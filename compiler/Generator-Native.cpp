// This file automatically generated from 'Generator-Native.ref'
// Don't edit! Edit 'Generator-Native.ref' and recompile it

#include "refalrts.h"

#define cookie_ns cookie_ns_1997402773_3533773760
#define COOKIE1_ 1997402773U
#define COOKIE2_ 3533773760U

enum efunc {
  efunc_u_u_Stepm_Drop = 0,
  efunc_u_u_Metau_Mu = 1,
  efunc_d_table = 2,
  efunc_Map = 3,
  efunc_gen_Apply_Z3 = 4,
  efunc_gen_Apply_Z0 = 5,
  efunc_Reduce = 6,
  efunc_gen_Reduce_S1A1 = 7,
  efunc_gen_Apply_Z2 = 8,
  efunc_Apply = 9,
  efunc_DoMapAccum = 10,
  efunc_gen_DoMapAccum_S1A1 = 11,
  efunc_Add = 12,
  efunc_Sub = 13,
  efunc_Fetch = 14,
  efunc_Pipe = 15,
  efunc_gen_Pipe_S2L1 = 16,
  efunc_gen_Pipe_S3L1 = 17,
  efunc_gen_SetLineNumbers_Z1 = 18,
  efunc_gen_GenProgramm_Native_B1 = 19,
  efunc_gen_DoMapAccum_Z1 = 20,
  efunc_gen_GenProgramm_Native_A1 = 21,
  efunc_EscapeString = 22,
  efunc_Symb = 23,
  efunc_CName = 24,
  efunc_DisplayCName = 25,
  efunc_FormatOffsets = 26,
  efunc_gen_NameAndCookies_D2 = 27,
  efunc_EscapeChar = 28,
  efunc_gen_PrintMatch_Z1 = 29,
  efunc_gen_PrintMatchSave_Z1 = 30,
  efunc_gen_PrintMatch_Z2 = 31,
  efunc_gen_PrintMatchSave_Z2 = 32,
  efunc_gen_PrintMatch_Z3 = 33,
  efunc_gen_PrintMatchSave_Z3 = 34,
  efunc_gen_PrintMatch_Z4 = 35,
  efunc_gen_PrintMatchSave_Z4 = 36,
  efunc_gen_PrintMatch_Z5 = 37,
  efunc_ContextItem = 38,
  efunc_PrintMatchSave = 39,
  efunc_gen_PrintMatch_Z6 = 40,
  efunc_gen_StrFromDirection_D2 = 41,
  efunc_gen_PrintMatch_Z7 = 42,
  efunc_gen_PrintMatch_Z8 = 43,
  efunc_gen_VarMatchFunction_D2 = 44,
  efunc_gen_PrintMatch_Z9 = 45,
  efunc_gen_PrintMatchSTVarSave_D1 = 46,
  efunc_gen_PrintMatchm_VM_Z1 = 47,
  efunc_gen_PrintMatchm_VM_Z2 = 48,
  efunc_PrintMatchSavem_VM = 49,
  efunc_DoPrintLength = 50,
  efunc_gen_DoPrintLength_Z0 = 51,
  efunc_gen_AllocatorFuncArgument_D6 = 52,
  efunc_gen_AllocatorFuncName_D12 = 53,
  efunc_gen_AllocatorMode_D2 = 54,
  efunc_gen_PrintCreateElem_D2 = 55,
  efunc_Mu = 56,
  efunc_Up = 57,
  efunc_Evm_met = 58,
  efunc_Residue = 59,
  efunc_u_u_Metau_Residue = 60,
  efunc_MapAccum = 61,
  efunc_UnBracket = 62,
  efunc_DelAccumulator = 63,
  efunc_Inc = 64,
  efunc_Dec = 65,
  efunc_GenProgramm_Native = 66,
  efunc_SetLineNumbers = 67,
  efunc_ContextRangem_B = 68,
  efunc_ContextRangem_E = 69,
  efunc_ContextRange = 70,
  efunc_PrintBracketsVarInit = 71,
  efunc_FunctionImage = 72,
  efunc_IdentifierImage = 73,
  efunc_BaseCName = 74,
  efunc_NameAndCookies = 75,
  efunc_GenCommandm_Native = 76,
  efunc_PrintString = 77,
  efunc_PrintLength = 78,
  efunc_PrintMatchChar = 79,
  efunc_PrintMatchCharSave = 80,
  efunc_PrintMatchNumber = 81,
  efunc_PrintMatchNumberSave = 82,
  efunc_PrintMatchName = 83,
  efunc_PrintMatchNameSave = 84,
  efunc_PrintMatchIdent = 85,
  efunc_PrintMatchIdentSave = 86,
  efunc_PrintMatchBrackets = 87,
  efunc_PrintMatchBracketsSave = 88,
  efunc_PrintMatchADT = 89,
  efunc_PrintMatchADTSave = 90,
  efunc_BreakerFromIndent = 91,
  efunc_PrintMatchEmpty = 92,
  efunc_StrFromDirection = 93,
  efunc_VarMatchFunction = 94,
  efunc_PrintMatchSTVar = 95,
  efunc_PrintMatchSTVarSave = 96,
  efunc_PrintMatchRepeated = 97,
  efunc_PrintMatchRepeatedTVarSave = 98,
  efunc_PrintMatch = 99,
  efunc_PrintMatchm_VM = 100,
  efunc_PrintCreateElem = 101,
  efunc_AllocatorMode = 102,
  efunc_AllocatorFuncName = 103,
  efunc_AllocatorFuncArgument = 104,
  efunc_gen_Apply_Z4 = 105,
  efunc_gen_SetLineNumbers_Z0 = 106,
  efunc_gen_DoMapAccum_S1A1Z1 = 107,
  efunc_gen_DoMapAccum_Z0 = 108,
  efunc_gen_GenCommandm_Native_Z0 = 109,
  efunc_gen_PrintMatch_Z0 = 110,
  efunc_gen_PrintMatchSave_Z0 = 111,
  efunc_gen_PrintMatchm_VM_Z0 = 112,
  efunc_gen_DoMapAccum_S1A1Z0 = 113,
};


enum ident {
  ident_NativeInsertBegin = 0,
  ident_FileLine = 1,
  ident_FileRowCol = 2,
  ident_NativeInsertEnd = 3,
  ident_Hash = 4,
  ident_Offset = 5,
  ident_CmdComment = 6,
  ident_CmdCEnumm_Start = 7,
  ident_CmdCEnumm_End = 8,
  ident_CmdCEnumm_Item = 9,
  ident_CmdCookieNS = 10,
  ident_CmdNativeFuncDescr = 11,
  ident_CmdFnStart = 12,
  ident_CmdFnEnd = 13,
  ident_CmdEmitNativeCode = 14,
  ident_CmdCallCondition = 15,
  ident_CmdProfileFunction = 16,
  ident_CmdLoadConstants = 17,
  ident_CmdIssueMemory = 18,
  ident_CmdStartSentence = 19,
  ident_CmdEndSentence = 20,
  ident_CmdInitB0 = 21,
  ident_CmdInitB0m_Lite = 22,
  ident_CmdChar = 23,
  ident_CmdCharSave = 24,
  ident_CmdNumber = 25,
  ident_CmdNumberSave = 26,
  ident_CmdName = 27,
  ident_CmdNameSave = 28,
  ident_CmdIdent = 29,
  ident_CmdIdentSave = 30,
  ident_CmdBrackets = 31,
  ident_CmdBracketsSave = 32,
  ident_CmdADT = 33,
  ident_CmdADTSave = 34,
  ident_AlgTerm = 35,
  ident_CmdCallSave = 36,
  ident_AlgLeft = 37,
  ident_AlgRight = 38,
  ident_CmdEmpty = 39,
  ident_CmdVar = 40,
  ident_CmdVarSave = 41,
  ident_CmdRepeated = 42,
  ident_CmdRepeatedTVarSave = 43,
  ident_CmdOpenedEm_Start = 44,
  ident_CmdOpenedEm_End = 45,
  ident_CmdSave = 46,
  ident_CmdResetAllocator = 47,
  ident_CmdSetRes = 48,
  ident_ARGm_BEGIN = 49,
  ident_RIGHTm_EDGE = 50,
  ident_CmdCopyVar = 51,
  ident_CmdReinitSVar = 52,
  ident_CmdCreateElem = 53,
  ident_Allocate = 54,
  ident_ElString = 55,
  ident_ElChar = 56,
  ident_ElName = 57,
  ident_ElNumber = 58,
  ident_ElIdent = 59,
  ident_ElOpenADT = 60,
  ident_ElCloseADT = 61,
  ident_ElOpenBracket = 62,
  ident_ElCloseBracket = 63,
  ident_ElOpenCall = 64,
  ident_ElCloseCall = 65,
  ident_ElClosureHead = 66,
  ident_ElUnwrappedClosure = 67,
  ident_Reinit = 68,
  ident_Update = 69,
  ident_CmdLinkBrackets = 70,
  ident_CmdPushStack = 71,
  ident_CmdWrapClosure = 72,
  ident_CmdInsertElem = 73,
  ident_CmdInsertVar = 74,
  ident_CmdInsertRange = 75,
  ident_CmdInsertTile = 76,
  ident_CmdUseRes = 77,
  ident_CmdSpliceToFreeList = 78,
  ident_CmdSpliceToFreeListm_Range = 79,
  ident_CmdNextStep = 80,
  ident_CmdTrash = 81,
  ident_LEFTm_EDGE = 82,
  ident_CmdFail = 83,
  ident_Mu = 84,
  ident_Up = 85,
  ident_Evm_met = 86,
  ident_Residue = 87,
  ident_u_u_Metau_Residue = 88,
  ident_Apply = 89,
  ident_Map = 90,
  ident_Reduce = 91,
  ident_Fetch = 92,
  ident_MapAccum = 93,
  ident_DoMapAccum = 94,
  ident_UnBracket = 95,
  ident_DelAccumulator = 96,
  ident_Inc = 97,
  ident_Dec = 98,
  ident_Pipe = 99,
  ident_GenProgramm_Native = 100,
  ident_SetLineNumbers = 101,
  ident_ContextRangem_B = 102,
  ident_ContextRangem_E = 103,
  ident_ContextRange = 104,
  ident_ContextItem = 105,
  ident_PrintBracketsVarInit = 106,
  ident_FunctionImage = 107,
  ident_IdentifierImage = 108,
  ident_BaseCName = 109,
  ident_NameAndCookies = 110,
  ident_FormatOffsets = 111,
  ident_GenCommandm_Native = 112,
  ident_PrintString = 113,
  ident_PrintLength = 114,
  ident_DoPrintLength = 115,
  ident_PrintMatchChar = 116,
  ident_PrintMatchCharSave = 117,
  ident_PrintMatchNumber = 118,
  ident_PrintMatchNumberSave = 119,
  ident_PrintMatchName = 120,
  ident_PrintMatchNameSave = 121,
  ident_PrintMatchIdent = 122,
  ident_PrintMatchIdentSave = 123,
  ident_PrintMatchBrackets = 124,
  ident_PrintMatchBracketsSave = 125,
  ident_PrintMatchADT = 126,
  ident_PrintMatchADTSave = 127,
  ident_BreakerFromIndent = 128,
  ident_PrintMatchEmpty = 129,
  ident_StrFromDirection = 130,
  ident_VarMatchFunction = 131,
  ident_PrintMatchSTVar = 132,
  ident_PrintMatchSTVarSave = 133,
  ident_PrintMatchRepeated = 134,
  ident_PrintMatchRepeatedTVarSave = 135,
  ident_PrintMatch = 136,
  ident_PrintMatchSave = 137,
  ident_PrintMatchm_VM = 138,
  ident_PrintMatchSavem_VM = 139,
  ident_PrintCreateElem = 140,
  ident_AllocatorMode = 141,
  ident_AllocatorFuncName = 142,
  ident_AllocatorFuncArgument = 143,
};


static refalrts::FnResult func_Mu(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Mu/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Mu("Mu", COOKIE1_, COOKIE2_, func_Mu);


static refalrts::FnResult func_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Residue("Residue", COOKIE1_, COOKIE2_, func_Residue);


static refalrts::FnResult func_u_u_Metau_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & __Meta_Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_Metau_Residue("__Meta_Residue", COOKIE1_, COOKIE2_, func_u_u_Metau_Residue);


static refalrts::FnResult func_Apply(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Apply/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply/4 s.Fn/5 e.Argument/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.Argument as range 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.Argument: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.Argument/7 HalfReuse: & $table/1 } >/9 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply/4 (/5 t.Closure/9 e.Bounded/7 )/6 e.Argument/2 >/1
  context[7] = 0;
  context[8] = 0;
  if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument as range 2
  context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.Bounded as range 7
  //DEBUG: e.Argument: 2
  //DEBUG: t.Closure: 9
  //DEBUG: e.Bounded: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply/4 } Tile{ AsIs: t.Closure/9 } Tile{ AsIs: e.Bounded/7 } Tile{ AsIs: e.Argument/2 } Tile{ AsIs: >/1 ]] }
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Apply("Apply", COOKIE1_, COOKIE2_, func_Apply);


static refalrts::FnResult func_Map(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Map/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Map/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Map/4 s.Fn/5 t.Next/9 e.Tail/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      if( ! refalrts::svar_term( context[5], context[5] ) )
        continue;
      // closed e.Tail as range 11
      //DEBUG: t.Next: 9
      //DEBUG: s.Fn: 5
      //DEBUG: e.Tail: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: t.Next/9 } & $table/13 >/14 </15 & Map/16 s.Fn/5/17 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[13], functions[efunc_d_table]);
      refalrts::alloc_close_call(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_Map]);
      refalrts::copy_stvar(vm, context[17], context[5]);
      refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[13], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Map/4 (/5 t./15 e.0/13 )/6 t.Next/9 e.Tail/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      // closed e.Tail as range 11
      context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
      if( ! context[16] )
        continue;
      // closed e.0 as range 13
      //DEBUG: t.Next: 9
      //DEBUG: e.Tail: 11
      //DEBUG: t.: 15
      //DEBUG: e.0: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </17 & Apply@3/18 t./15/19 e.0/13/21 Tile{ AsIs: t.Next/9 } >/23 Tile{ AsIs: </0 AsIs: & Map/4 AsIs: (/5 AsIs: t./15 AsIs: e.0/13 AsIs: )/6 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_gen_Apply_Z3]);
      refalrts::copy_evar(vm, context[19], context[20], context[15], context[16]);
      refalrts::copy_evar(vm, context[21], context[22], context[13], context[14]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[17], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map/4 t.Fn/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Fn: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.Fn/5 AsIs: t.Next/9 } >/13 </14 & Map/15 t.Fn/5/16 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_Map]);
    refalrts::copy_evar(vm, context[16], context[17], context[5], context[6]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map/4 t.Fn/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Map/4 t.Fn/5 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Map("Map", COOKIE1_, COOKIE2_, func_Map);


static refalrts::FnResult func_gen_Reduce_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Reduce$1=1/4 t.Fn/5 (/9 e.Tail/7 )/10 t.Acc$a/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Tail as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5
  //DEBUG: e.Tail: 7
  //DEBUG: t.Acc$a: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce/4 AsIs: t.Fn/5 } Tile{ AsIs: t.Acc$a/11 } Tile{ AsIs: e.Tail/7 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Reduce]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1("Reduce$1=1", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1);


static refalrts::FnResult func_Reduce(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Reduce/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce/4 t.new1/5 t.new2/7 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Reduce/4 t.Fn/5 t.Acc/7 t.Next/11 e.Tail/9 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[12] = refalrts::tvar_left( context[11], context[9], context[10] );
    if( ! context[12] )
      continue;
    // closed e.Tail as range 9
    //DEBUG: t.Fn: 5
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 11
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & Reduce$1=1/14 t.Fn/5/15 (/17 Tile{ AsIs: e.Tail/9 } )/18 Tile{ AsIs: </0 Reuse: & Apply@2/4 AsIs: t.Fn/5 AsIs: t.Acc/7 AsIs: t.Next/11 } >/19 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Reduce_S1A1]);
    refalrts::copy_evar(vm, context[15], context[16], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce/4 t.Fn/5 t.Acc/7 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Reduce/4 t.Fn/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Reduce("Reduce", COOKIE1_, COOKIE2_, func_Reduce);


static refalrts::FnResult func_Fetch(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & Fetch/4 e.Argument/2 t.Function/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_right( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument as range 2
  //DEBUG: t.Function: 5
  //DEBUG: e.Argument: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply/4 } Tile{ AsIs: t.Function/5 } Tile{ AsIs: e.Argument/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Apply]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Fetch("Fetch", COOKIE1_, COOKIE2_, func_Fetch);


static refalrts::FnResult func_MapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & MapAccum/4 t.Fn/5 t.Acc/7 e.Tail/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail as range 2
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn/5 AsIs: t.Acc/7 } (/9 )/10 Tile{ AsIs: e.Tail/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MapAccum("MapAccum", COOKIE1_, COOKIE2_, func_MapAccum);


static refalrts::FnResult func_gen_DoMapAccum_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DoMapAccum$1=1/4 t.Fn/5 (/9 e.Scanned/7 )/10 (/13 e.Tail/11 )/14 t.Acc$a/15 e.StepScanned/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Scanned as range 7
  // closed e.Tail as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  // closed e.StepScanned as range 2
  //DEBUG: t.Fn: 5
  //DEBUG: e.Scanned: 7
  //DEBUG: e.Tail: 11
  //DEBUG: t.Acc$a: 15
  //DEBUG: e.StepScanned: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn/5 } Tile{ AsIs: t.Acc$a/15 } Tile{ AsIs: (/13 } Tile{ AsIs: e.Scanned/7 } Tile{ AsIs: e.StepScanned/2 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1("DoMapAccum$1=1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1);


static refalrts::FnResult func_DoMapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & DoMapAccum/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum/4 t.new1/5 t.new2/7 (/11 e.new3/9 )/12 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new3 as range 9
  // closed e.new4 as range 2
  do {
    // </0 & DoMapAccum/4 t.Fn/5 t.Acc/7 (/11 e.Scanned/13 )/12 t.Next/17 e.Tail/15 >/1
    context[13] = context[9];
    context[14] = context[10];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.Scanned as range 13
    context[18] = refalrts::tvar_left( context[17], context[15], context[16] );
    if( ! context[18] )
      continue;
    // closed e.Tail as range 15
    //DEBUG: t.Fn: 5
    //DEBUG: t.Acc: 7
    //DEBUG: e.Scanned: 13
    //DEBUG: t.Next: 17
    //DEBUG: e.Tail: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1/4 AsIs: t.Fn/5 } Tile{ AsIs: (/11 AsIs: e.Scanned/13 AsIs: )/12 } (/19 Tile{ AsIs: e.Tail/15 } )/20 </21 & Apply@2/22 t.Fn/5/23 Tile{ AsIs: t.Acc/7 } Tile{ AsIs: t.Next/17 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_Apply_Z2]);
    refalrts::copy_evar(vm, context[23], context[24], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[20], context[24] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum/4 t.Fn/5 t.Acc/7 (/11 e.Scanned/9 )/12 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Scanned as range 9
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7
  //DEBUG: e.Scanned: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoMapAccum/4 t.Fn/5 {REMOVED TILE} (/11 {REMOVED TILE} )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ AsIs: e.Scanned/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoMapAccum("DoMapAccum", COOKIE1_, COOKIE2_, func_DoMapAccum);


static refalrts::FnResult func_UnBracket(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & UnBracket/4 (/7 e.Expr/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr as range 5
  //DEBUG: e.Expr: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & UnBracket/4 (/7 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Expr/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnBracket("UnBracket", COOKIE1_, COOKIE2_, func_UnBracket);


static refalrts::FnResult func_DelAccumulator(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & DelAccumulator/4 t.Acc/5 e.Tail/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail as range 2
  //DEBUG: t.Acc: 5
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DelAccumulator/4 t.Acc/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Tail/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DelAccumulator("DelAccumulator", COOKIE1_, COOKIE2_, func_DelAccumulator);


static refalrts::FnResult func_Inc(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Inc/4 e.Num/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Num as range 2
  //DEBUG: e.Num: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: e.Num/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_Add]);
  refalrts::reinit_number(context[4], 1UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Inc("Inc", COOKIE1_, COOKIE2_, func_Inc);


static refalrts::FnResult func_Dec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Dec/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Dec/4 s.Num/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.Num: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 AsIs: s.Num/7 HalfReuse: 1/1 } >/8 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::update_name(context[4], functions[efunc_Sub]);
    refalrts::reinit_number(context[1], 1UL);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Dec/4 e.Num/2 >/1
  // closed e.Num as range 2
  //DEBUG: e.Num: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 } (/5 Tile{ AsIs: e.Num/2 } )/6 1/7 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_number(vm, context[7], 1UL);
  refalrts::update_name(context[4], functions[efunc_Sub]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Dec("Dec", COOKIE1_, COOKIE2_, func_Dec);


static refalrts::FnResult func_gen_Pipe_S2L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Pipe$2\1/4 t.Func/5 (/9 e.Funcs/7 )/10 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Funcs as range 7
  // closed e.Arg as range 2
  //DEBUG: t.Func: 5
  //DEBUG: e.Funcs: 7
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch/4 } </11 & Apply/12 Tile{ AsIs: t.Func/5 } Tile{ AsIs: e.Arg/2 } >/13 </14 Tile{ HalfReuse: & Pipe/9 AsIs: e.Funcs/7 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_Apply]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_Fetch]);
  refalrts::reinit_name(context[9], functions[efunc_Pipe]);
  refalrts::reinit_close_call(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S2L1("Pipe$2\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S2L1);


static refalrts::FnResult func_gen_Pipe_S3L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Pipe$3\1/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe$3\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Arg/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S3L1("Pipe$3\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S3L1);


static refalrts::FnResult func_Pipe(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Pipe/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Pipe/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Pipe/4 t.Func/7 >/1
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;
      //DEBUG: t.Func: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.Func/7 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Pipe/4 t.Func/7 e.Funcs/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Funcs as range 9
    //DEBUG: t.Func: 7
    //DEBUG: e.Funcs: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: [*]/0 Reuse: & Pipe$2\1/4 AsIs: t.Func/7 } (/11 Tile{ AsIs: e.Funcs/9 } )/12 Tile{ HalfReuse: {*}/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::reinit_closure_head(context[0]);
    refalrts::update_name(context[4], functions[efunc_gen_Pipe_S2L1]);
    refalrts::reinit_unwrapped_closure(context[1], context[0]);
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    refalrts::wrap_closure( context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Pipe/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: & Pipe$3\1/1 ]] }
  refalrts::reinit_name(context[1], functions[efunc_gen_Pipe_S3L1]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Pipe("Pipe", COOKIE1_, COOKIE2_, func_Pipe);


static refalrts::FnResult func_gen_GenProgramm_Native_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & GenProgram-Native:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & GenProgram-Native:1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & GenProgram-Native:1/4 (/7 e.SourceFileName/13 )/8 (/11 e.TargetFileName/15 )/12 e.Lines-B/19 (/25 # NativeInsertBegin/27 t.SrcPos/28 )/26 e.Lines-E/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.SourceFileName as range 13
    // closed e.TargetFileName as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_NativeInsertBegin], context[23], context[24] );
      if( ! context[27] )
        continue;
      // closed e.Lines-E as range 21
      context[29] = refalrts::tvar_left( context[28], context[23], context[24] );
      if( ! context[29] )
        continue;
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      //DEBUG: e.SourceFileName: 13
      //DEBUG: e.TargetFileName: 15
      //DEBUG: e.Lines-B: 19
      //DEBUG: e.Lines-E: 21
      //DEBUG: t.SrcPos: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & SetLineNumbers@1/4 AsIs: (/7 AsIs: e.SourceFileName/13 AsIs: )/8 AsIs: (/11 AsIs: e.TargetFileName/15 AsIs: )/12 AsIs: e.Lines-B/19 AsIs: (/25 AsIs: # NativeInsertBegin/27 AsIs: t.SrcPos/28 AsIs: )/26 AsIs: e.Lines-E/21 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_SetLineNumbers_Z1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenProgram-Native:1/4 (/7 e.SourceFileName/5 )/8 (/11 e.TargetFileName/9 )/12 e.Lines/2 >/1
  // closed e.SourceFileName as range 5
  // closed e.TargetFileName as range 9
  // closed e.Lines as range 2
  //DEBUG: e.SourceFileName: 5
  //DEBUG: e.TargetFileName: 9
  //DEBUG: e.Lines: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & GenProgram-Native:1/4 (/7 e.SourceFileName/5 )/8 (/11 e.TargetFileName/9 )/12 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Lines/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GenProgramm_Native_B1("GenProgram-Native:1", COOKIE1_, COOKIE2_, func_gen_GenProgramm_Native_B1);


static refalrts::FnResult func_gen_GenProgramm_Native_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 45 elems
  refalrts::Iter context[45];
  refalrts::zeros( context, 45 );
  // </0 & GenProgram-Native=1/4 (/7 e.SourceFileName/5 )/8 (/11 e.TargetFileName/9 )/12 (/15 )/16 e.Generated/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  if( ! refalrts::empty_seq( context[13], context[14] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.SourceFileName as range 5
  // closed e.TargetFileName as range 9
  // closed e.Generated as range 2
  //DEBUG: e.SourceFileName: 5
  //DEBUG: e.TargetFileName: 9
  //DEBUG: e.Generated: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & GenProgram-Native:1/4 AsIs: (/7 AsIs: e.SourceFileName/5 AsIs: )/8 AsIs: (/11 AsIs: e.TargetFileName/9 AsIs: )/12 AsIs: (/15 HalfReuse: '/'/16 }"/ This file automatically generated from \'"/17 e.SourceFileName/5/19 '\''/21 )/22 (/23"// Don\'t edit! Edit \'"/24 e.SourceFileName/5/26"\' and recompile it"/28 )/30 (/31 )/32 (/33"#include \"refalrts.h\""/34 )/36 (/37 )/38 Tile{ AsIs: e.Generated/2 } (/39 )/40 (/41"//End of file"/42 )/44 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_chars(vm, context[17], context[18], "/ This file automatically generated from \'", 42);
  refalrts::copy_evar(vm, context[19], context[20], context[5], context[6]);
  refalrts::alloc_char(vm, context[21], '\'');
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "// Don\'t edit! Edit \'", 21);
  refalrts::copy_evar(vm, context[26], context[27], context[5], context[6]);
  refalrts::alloc_chars(vm, context[28], context[29], "\' and recompile it", 18);
  refalrts::alloc_close_bracket(vm, context[30]);
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::alloc_chars(vm, context[34], context[35], "#include \"refalrts.h\"", 21);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_open_bracket(vm, context[37]);
  refalrts::alloc_close_bracket(vm, context[38]);
  refalrts::alloc_open_bracket(vm, context[39]);
  refalrts::alloc_close_bracket(vm, context[40]);
  refalrts::alloc_open_bracket(vm, context[41]);
  refalrts::alloc_chars(vm, context[42], context[43], "//End of file", 13);
  refalrts::alloc_close_bracket(vm, context[44]);
  refalrts::update_name(context[4], functions[efunc_gen_GenProgramm_Native_B1]);
  refalrts::reinit_char(context[16], '/');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[41], context[44] );
  refalrts::link_brackets( context[39], context[40] );
  refalrts::link_brackets( context[37], context[38] );
  refalrts::link_brackets( context[33], context[36] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[23], context[30] );
  refalrts::link_brackets( context[15], context[22] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[39], context[44] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[17], context[38] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GenProgramm_Native_A1("GenProgram-Native=1", COOKIE1_, COOKIE2_, func_gen_GenProgramm_Native_A1);


static refalrts::FnResult func_GenProgramm_Native(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & GenProgram-Native/4 (/7 e.SourceFileName/5 )/8 (/11 e.TargetFileName/9 )/12 (/15 e.NativeRASL/13 )/16 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.SourceFileName as range 5
  // closed e.TargetFileName as range 9
  // closed e.NativeRASL as range 13
  //DEBUG: e.SourceFileName: 5
  //DEBUG: e.TargetFileName: 9
  //DEBUG: e.NativeRASL: 13

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & GenProgram-Native=1/4 AsIs: (/7 AsIs: e.SourceFileName/5 AsIs: )/8 AsIs: (/11 AsIs: e.TargetFileName/9 AsIs: )/12 HalfReuse: </15 } & DoMapAccum@1/17 (/18 )/19 (/20 )/21 Tile{ AsIs: e.NativeRASL/13 } Tile{ HalfReuse: >/16 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_DoMapAccum_Z1]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::update_name(context[4], functions[efunc_gen_GenProgramm_Native_A1]);
  refalrts::reinit_open_call(context[15]);
  refalrts::reinit_close_call(context[16]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[16];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[17], context[21] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_GenProgramm_Native("GenProgram-Native", 0U, 0U, func_GenProgramm_Native);


static refalrts::FnResult func_SetLineNumbers(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 79 elems
  refalrts::Iter context[79];
  refalrts::zeros( context, 79 );
  // </0 & SetLineNumbers/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SetLineNumbers/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 s.new3/13 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & SetLineNumbers/4 (/7 e.new8/14 )/8 (/11 e.new9/16 )/12 s.new5/13 (/22 e.new6/20 )/23 e.new7/18 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[9];
    context[17] = context[10];
    context[18] = context[2];
    context[19] = context[3];
    context[20] = 0;
    context[21] = 0;
    context[22] = refalrts::brackets_left( context[20], context[21], context[18], context[19] );
    if( ! context[22] )
      continue;
    refalrts::bracket_pointers(context[22], context[23]);
    // closed e.new8 as range 14
    // closed e.new9 as range 16
    // closed e.new6 as range 20
    // closed e.new7 as range 18
    do {
      // </0 & SetLineNumbers/4 (/7 e.new14/24 )/8 (/11 e.new15/26 )/12 s.new10/13 (/22 s.new12/32 e.new13/28 )/23 e.new11/30 >/1
      context[24] = context[14];
      context[25] = context[15];
      context[26] = context[16];
      context[27] = context[17];
      context[28] = context[20];
      context[29] = context[21];
      context[30] = context[18];
      context[31] = context[19];
      // closed e.new14 as range 24
      // closed e.new15 as range 26
      // closed e.new11 as range 30
      if( ! refalrts::svar_left( context[32], context[28], context[29] ) )
        continue;
      // closed e.new13 as range 28
      do {
        // </0 & SetLineNumbers/4 (/7 e.new19/33 )/8 (/11 e.new20/35 )/12 s.new16/13 (/22 # NativeInsertBegin/32 t.new18/41 )/23 e.new17/39 >/1
        context[33] = context[24];
        context[34] = context[25];
        context[35] = context[26];
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        if( ! refalrts::ident_term( identifiers[ident_NativeInsertBegin], context[32] ) )
          continue;
        // closed e.new19 as range 33
        // closed e.new20 as range 35
        // closed e.new17 as range 39
        context[42] = refalrts::tvar_left( context[41], context[37], context[38] );
        if( ! context[42] )
          continue;
        if( ! refalrts::empty_seq( context[37], context[38] ) )
          continue;
        do {
          // </0 & SetLineNumbers/4 (/7 e.Source/43 )/8 (/11 e.Target/45 )/12 s.LineNum/13 (/22 # NativeInsertBegin/32 s.SrcLineNum/41 )/23 e.Lines/47 >/1
          context[43] = context[33];
          context[44] = context[34];
          context[45] = context[35];
          context[46] = context[36];
          context[47] = context[39];
          context[48] = context[40];
          if( ! refalrts::svar_term( context[41], context[41] ) )
            continue;
          // closed e.Source as range 43
          // closed e.Target as range 45
          // closed e.Lines as range 47
          //DEBUG: s.SrcLineNum: 41
          //DEBUG: s.LineNum: 13
          //DEBUG: e.Source: 43
          //DEBUG: e.Target: 45
          //DEBUG: e.Lines: 47

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } (/49"#line "/50 Tile{ HalfReuse: </22 HalfReuse: & Symb/32 AsIs: s.SrcLineNum/41 } >/52" \""/53 </55 & EscapeString/56 e.Source/43/57 >/59 '\"'/60 )/61 Tile{ AsIs: </0 AsIs: & SetLineNumbers/4 AsIs: (/7 AsIs: e.Source/43 AsIs: )/8 AsIs: (/11 AsIs: e.Target/45 AsIs: )/12 } </62 & Add/63 1/64 Tile{ AsIs: s.LineNum/13 } Tile{ HalfReuse: >/23 AsIs: e.Lines/47 AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[49]);
          refalrts::alloc_chars(vm, context[50], context[51], "#line ", 6);
          refalrts::alloc_close_call(vm, context[52]);
          refalrts::alloc_chars(vm, context[53], context[54], " \"", 2);
          refalrts::alloc_open_call(vm, context[55]);
          refalrts::alloc_name(vm, context[56], functions[efunc_EscapeString]);
          refalrts::copy_evar(vm, context[57], context[58], context[43], context[44]);
          refalrts::alloc_close_call(vm, context[59]);
          refalrts::alloc_char(vm, context[60], '\"');
          refalrts::alloc_close_bracket(vm, context[61]);
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_Add]);
          refalrts::alloc_number(vm, context[64], 1UL);
          refalrts::reinit_open_call(context[22]);
          refalrts::reinit_name(context[32], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[23]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[62] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[49], context[61] );
          refalrts::push_stack( vm, context[59] );
          refalrts::push_stack( vm, context[55] );
          refalrts::push_stack( vm, context[52] );
          refalrts::push_stack( vm, context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[23];
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[62], context[64] );
          res = refalrts::splice_evar( res, context[0], context[12] );
          res = refalrts::splice_evar( res, context[52], context[61] );
          res = refalrts::splice_evar( res, context[22], context[41] );
          res = refalrts::splice_evar( res, context[49], context[51] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & SetLineNumbers/4 (/7 e.new26/43 )/8 (/11 e.new27/45 )/12 s.new21/13 (/22 # NativeInsertBegin/32 (/41 s.new23/51 t.new24/52 e.new25/49 )/42 )/23 e.new22/47 >/1
        context[43] = context[33];
        context[44] = context[34];
        context[45] = context[35];
        context[46] = context[36];
        context[47] = context[39];
        context[48] = context[40];
        context[49] = 0;
        context[50] = 0;
        if( ! refalrts::brackets_term( context[49], context[50], context[41] ) )
          continue;
        // closed e.new26 as range 43
        // closed e.new27 as range 45
        // closed e.new22 as range 47
        if( ! refalrts::svar_left( context[51], context[49], context[50] ) )
          continue;
        context[53] = refalrts::tvar_left( context[52], context[49], context[50] );
        if( ! context[53] )
          continue;
        // closed e.new25 as range 49
        do {
          // </0 & SetLineNumbers/4 (/7 e.Source/54 )/8 (/11 e.Target/56 )/12 s.LineNum/13 (/22 # NativeInsertBegin/32 (/41 # FileLine/51 s.Line/52 e.File/58 )/42 )/23 e.Lines/60 >/1
          context[54] = context[43];
          context[55] = context[44];
          context[56] = context[45];
          context[57] = context[46];
          context[58] = context[49];
          context[59] = context[50];
          context[60] = context[47];
          context[61] = context[48];
          if( ! refalrts::svar_term( context[52], context[52] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_FileLine], context[51] ) )
            continue;
          // closed e.Source as range 54
          // closed e.Target as range 56
          // closed e.File as range 58
          // closed e.Lines as range 60
          //DEBUG: s.Line: 52
          //DEBUG: s.LineNum: 13
          //DEBUG: e.Source: 54
          //DEBUG: e.Target: 56
          //DEBUG: e.File: 58
          //DEBUG: e.Lines: 60

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.LineNum/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } (/62"#lin"/63 Tile{ HalfReuse: 'e'/22 HalfReuse: ' '/32 HalfReuse: </41 HalfReuse: & Symb/51 AsIs: s.Line/52 } >/65" \""/66 </68 & EscapeString/69 Tile{ AsIs: e.File/58 } >/70 '\"'/71 )/72 Tile{ AsIs: </0 AsIs: & SetLineNumbers/4 AsIs: (/7 AsIs: e.Source/54 AsIs: )/8 AsIs: (/11 AsIs: e.Target/56 AsIs: )/12 } </73 & Add/74 1/75 Tile{ HalfReuse: s.LineNum13 /42 HalfReuse: >/23 AsIs: e.Lines/60 AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[62]);
          refalrts::alloc_chars(vm, context[63], context[64], "#lin", 4);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::alloc_chars(vm, context[66], context[67], " \"", 2);
          refalrts::alloc_open_call(vm, context[68]);
          refalrts::alloc_name(vm, context[69], functions[efunc_EscapeString]);
          refalrts::alloc_close_call(vm, context[70]);
          refalrts::alloc_char(vm, context[71], '\"');
          refalrts::alloc_close_bracket(vm, context[72]);
          refalrts::alloc_open_call(vm, context[73]);
          refalrts::alloc_name(vm, context[74], functions[efunc_Add]);
          refalrts::alloc_number(vm, context[75], 1UL);
          refalrts::reinit_char(context[22], 'e');
          refalrts::reinit_char(context[32], ' ');
          refalrts::reinit_open_call(context[41]);
          refalrts::reinit_name(context[51], functions[efunc_Symb]);
          refalrts::reinit_svar( context[42], context[13] );
          refalrts::reinit_close_call(context[23]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[73] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[62], context[72] );
          refalrts::push_stack( vm, context[70] );
          refalrts::push_stack( vm, context[68] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[41] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[42];
          res = refalrts::splice_evar( res, context[73], context[75] );
          res = refalrts::splice_evar( res, context[0], context[12] );
          res = refalrts::splice_evar( res, context[70], context[72] );
          res = refalrts::splice_evar( res, context[58], context[59] );
          res = refalrts::splice_evar( res, context[65], context[69] );
          res = refalrts::splice_evar( res, context[22], context[52] );
          res = refalrts::splice_evar( res, context[62], context[64] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & SetLineNumbers/4 (/7 e.Source/54 )/8 (/11 e.Target/56 )/12 s.LineNum/13 (/22 # NativeInsertBegin/32 (/41 # FileRowCol/51 (/52 s.Line/64 s.Col/65 )/53 e.File/58 )/42 )/23 e.Lines/60 >/1
        context[54] = context[43];
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[46];
        context[58] = context[49];
        context[59] = context[50];
        context[60] = context[47];
        context[61] = context[48];
        context[62] = 0;
        context[63] = 0;
        if( ! refalrts::brackets_term( context[62], context[63], context[52] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_FileRowCol], context[51] ) )
          continue;
        // closed e.Source as range 54
        // closed e.Target as range 56
        // closed e.File as range 58
        // closed e.Lines as range 60
        if( ! refalrts::svar_left( context[64], context[62], context[63] ) )
          continue;
        if( ! refalrts::svar_left( context[65], context[62], context[63] ) )
          continue;
        if( ! refalrts::empty_seq( context[62], context[63] ) )
          continue;
        //DEBUG: s.LineNum: 13
        //DEBUG: e.Source: 54
        //DEBUG: e.Target: 56
        //DEBUG: e.File: 58
        //DEBUG: e.Lines: 60
        //DEBUG: s.Line: 64
        //DEBUG: s.Col: 65

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.LineNum/13 {REMOVED TILE} s.Col/65 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/66"#li"/67 Tile{ HalfReuse: 'n'/22 HalfReuse: 'e'/32 HalfReuse: ' '/41 HalfReuse: </51 HalfReuse: & Symb/52 AsIs: s.Line/64 } >/69" \""/70 </72 & EscapeString/73 Tile{ AsIs: e.File/58 } >/74 '\"'/75 Tile{ AsIs: )/53 } Tile{ AsIs: </0 AsIs: & SetLineNumbers/4 AsIs: (/7 AsIs: e.Source/54 AsIs: )/8 AsIs: (/11 AsIs: e.Target/56 AsIs: )/12 } </76 & Add/77 1/78 Tile{ HalfReuse: s.LineNum13 /42 HalfReuse: >/23 AsIs: e.Lines/60 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[66]);
        refalrts::alloc_chars(vm, context[67], context[68], "#li", 3);
        refalrts::alloc_close_call(vm, context[69]);
        refalrts::alloc_chars(vm, context[70], context[71], " \"", 2);
        refalrts::alloc_open_call(vm, context[72]);
        refalrts::alloc_name(vm, context[73], functions[efunc_EscapeString]);
        refalrts::alloc_close_call(vm, context[74]);
        refalrts::alloc_char(vm, context[75], '\"');
        refalrts::alloc_open_call(vm, context[76]);
        refalrts::alloc_name(vm, context[77], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[78], 1UL);
        refalrts::reinit_char(context[22], 'n');
        refalrts::reinit_char(context[32], 'e');
        refalrts::reinit_char(context[41], ' ');
        refalrts::reinit_open_call(context[51]);
        refalrts::reinit_name(context[52], functions[efunc_Symb]);
        refalrts::reinit_svar( context[42], context[13] );
        refalrts::reinit_close_call(context[23]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[76] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[66], context[53] );
        refalrts::push_stack( vm, context[74] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[69] );
        refalrts::push_stack( vm, context[51] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[42];
        res = refalrts::splice_evar( res, context[76], context[78] );
        res = refalrts::splice_evar( res, context[0], context[12] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[74], context[75] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_evar( res, context[69], context[73] );
        res = refalrts::splice_evar( res, context[22], context[64] );
        res = refalrts::splice_evar( res, context[66], context[68] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & SetLineNumbers/4 (/7 e.Source/33 )/8 (/11 e.Target/35 )/12 s.LineNum/13 (/22 # NativeInsertEnd/32 )/23 e.Lines/37 >/1
      context[33] = context[24];
      context[34] = context[25];
      context[35] = context[26];
      context[36] = context[27];
      context[37] = context[30];
      context[38] = context[31];
      if( ! refalrts::ident_term( identifiers[ident_NativeInsertEnd], context[32] ) )
        continue;
      if( ! refalrts::empty_seq( context[28], context[29] ) )
        continue;
      // closed e.Source as range 33
      // closed e.Target as range 35
      // closed e.Lines as range 37
      //DEBUG: s.LineNum: 13
      //DEBUG: e.Source: 33
      //DEBUG: e.Target: 35
      //DEBUG: e.Lines: 37

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/39"#line "/40 </42 & Symb/43 </44 & Add/45 1/46 Tile{ AsIs: s.LineNum/13 } >/47 >/48" \""/49 </51 & EscapeString/52 e.Target/35/53 >/55 '\"'/56 )/57 Tile{ AsIs: </0 AsIs: & SetLineNumbers/4 AsIs: (/7 AsIs: e.Source/33 AsIs: )/8 AsIs: (/11 AsIs: e.Target/35 AsIs: )/12 } </58 & Add/59 Tile{ HalfReuse: 1/22 HalfReuse: s.LineNum13 /32 HalfReuse: >/23 AsIs: e.Lines/37 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_chars(vm, context[40], context[41], "#line ", 6);
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_name(vm, context[43], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[46], 1UL);
      refalrts::alloc_close_call(vm, context[47]);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::alloc_chars(vm, context[49], context[50], " \"", 2);
      refalrts::alloc_open_call(vm, context[51]);
      refalrts::alloc_name(vm, context[52], functions[efunc_EscapeString]);
      refalrts::copy_evar(vm, context[53], context[54], context[35], context[36]);
      refalrts::alloc_close_call(vm, context[55]);
      refalrts::alloc_char(vm, context[56], '\"');
      refalrts::alloc_close_bracket(vm, context[57]);
      refalrts::alloc_open_call(vm, context[58]);
      refalrts::alloc_name(vm, context[59], functions[efunc_Add]);
      refalrts::reinit_number(context[22], 1UL);
      refalrts::reinit_svar( context[32], context[13] );
      refalrts::reinit_close_call(context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[58] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[39], context[57] );
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[44] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[22];
      res = refalrts::splice_evar( res, context[58], context[59] );
      res = refalrts::splice_evar( res, context[0], context[12] );
      res = refalrts::splice_evar( res, context[47], context[57] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[39], context[46] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & SetLineNumbers/4 (/7 e.Source/24 )/8 (/11 e.Target/26 )/12 s.LineNum/13 (/22 e.OtherLine/28 )/23 e.Lines/30 >/1
    context[24] = context[14];
    context[25] = context[15];
    context[26] = context[16];
    context[27] = context[17];
    context[28] = context[20];
    context[29] = context[21];
    context[30] = context[18];
    context[31] = context[19];
    // closed e.Source as range 24
    // closed e.Target as range 26
    // closed e.OtherLine as range 28
    // closed e.Lines as range 30
    //DEBUG: s.LineNum: 13
    //DEBUG: e.Source: 24
    //DEBUG: e.Target: 26
    //DEBUG: e.OtherLine: 28
    //DEBUG: e.Lines: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/22 } Tile{ AsIs: e.OtherLine/28 } )/32 Tile{ AsIs: </0 AsIs: & SetLineNumbers/4 AsIs: (/7 AsIs: e.Source/24 AsIs: )/8 AsIs: (/11 AsIs: e.Target/26 AsIs: )/12 } </33 & Add/34 1/35 Tile{ AsIs: s.LineNum/13 } Tile{ HalfReuse: >/23 AsIs: e.Lines/30 AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[35], 1UL);
    refalrts::reinit_close_call(context[23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[33] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[22], context[32] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[23];
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[33], context[35] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_elem( res, context[32] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_elem( res, context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SetLineNumbers/4 (/7 e.Source/5 )/8 (/11 e.Target/9 )/12 s.LineNum/13 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Source as range 5
  // closed e.Target as range 9
  //DEBUG: s.LineNum: 13
  //DEBUG: e.Source: 5
  //DEBUG: e.Target: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & SetLineNumbers/4 (/7 e.Source/5 )/8 (/11 e.Target/9 )/12 s.LineNum/13 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_SetLineNumbers("SetLineNumbers", COOKIE1_, COOKIE2_, func_SetLineNumbers);


static refalrts::FnResult func_ContextRangem_B(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & ContextRange-B/4 s.RangeOffset/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.RangeOffset: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ }"context["/6 Tile{ AsIs: </0 Reuse: & Symb/4 AsIs: s.RangeOffset/5 AsIs: >/1 } ']'/8 Tile{ ]] }
  refalrts::alloc_chars(vm, context[6], context[7], "context[", 8);
  refalrts::alloc_char(vm, context[8], ']');
  refalrts::update_name(context[4], functions[efunc_Symb]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ContextRangem_B("ContextRange-B", COOKIE1_, COOKIE2_, func_ContextRangem_B);


static refalrts::FnResult func_ContextRangem_E(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & ContextRange-E/4 s.RangeOffset/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.RangeOffset: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ }"context["/6 </8 & Symb/9 </10 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: s.RangeOffset/5 AsIs: >/1 } >/11 ']'/12 Tile{ ]] }
  refalrts::alloc_chars(vm, context[6], context[7], "context[", 8);
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_Symb]);
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::alloc_char(vm, context[12], ']');
  refalrts::reinit_name(context[0], functions[efunc_Add]);
  refalrts::reinit_number(context[4], 1UL);
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[6], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ContextRangem_E("ContextRange-E", COOKIE1_, COOKIE2_, func_ContextRangem_E);


static refalrts::FnResult func_ContextRange(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & ContextRange/4 s.RangeOffset/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.RangeOffset: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ }"context["/6 Tile{ AsIs: </0 Reuse: & Symb/4 AsIs: s.RangeOffset/5 AsIs: >/1 }"], context["/8 </10 & Symb/11 </12 & Add/13 1/14 s.RangeOffset/5/15 >/16 >/17 ']'/18 Tile{ ]] }
  refalrts::alloc_chars(vm, context[6], context[7], "context[", 8);
  refalrts::alloc_chars(vm, context[8], context[9], "], context[", 11);
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_Symb]);
  refalrts::alloc_open_call(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[14], 1UL);
  refalrts::copy_stvar(vm, context[15], context[5]);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::alloc_char(vm, context[18], ']');
  refalrts::update_name(context[4], functions[efunc_Symb]);
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[8], context[18] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ContextRange("ContextRange", COOKIE1_, COOKIE2_, func_ContextRange);


static refalrts::FnResult func_ContextItem(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & ContextItem/4 s.ItemNumber/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.ItemNumber: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ }"context["/6 Tile{ AsIs: </0 Reuse: & Symb/4 AsIs: s.ItemNumber/5 AsIs: >/1 } ']'/8 Tile{ ]] }
  refalrts::alloc_chars(vm, context[6], context[7], "context[", 8);
  refalrts::alloc_char(vm, context[8], ']');
  refalrts::update_name(context[4], functions[efunc_Symb]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ContextItem("ContextItem", COOKIE1_, COOKIE2_, func_ContextItem);


static refalrts::FnResult func_PrintBracketsVarInit(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & PrintBracketsVarInit/4 e.Indent/2 s.InnerBrackets/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Indent as range 2
  //DEBUG: s.InnerBrackets: 5
  //DEBUG: e.Indent: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/6 Tile{ AsIs: e.Indent/2 }"context["/7 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.InnerBrackets/5 AsIs: >/1 }"] = 0;"/9 )/11 (/12 e.Indent/2/13"context["/15 </17 & Symb/18 </19 & Add/20 1/21 s.InnerBrackets/5/22 >/23 >/24"] = 0;"/25 )/27 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[6]);
  refalrts::alloc_chars(vm, context[7], context[8], "context[", 8);
  refalrts::alloc_chars(vm, context[9], context[10], "] = 0;", 6);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::copy_evar(vm, context[13], context[14], context[2], context[3]);
  refalrts::alloc_chars(vm, context[15], context[16], "context[", 8);
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_Symb]);
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_name(vm, context[20], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[21], 1UL);
  refalrts::copy_stvar(vm, context[22], context[5]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::alloc_close_call(vm, context[24]);
  refalrts::alloc_chars(vm, context[25], context[26], "] = 0;", 6);
  refalrts::alloc_close_bracket(vm, context[27]);
  refalrts::update_name(context[4], functions[efunc_Symb]);
  refalrts::link_brackets( context[12], context[27] );
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[19] );
  refalrts::link_brackets( context[6], context[11] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[27] );
  res = refalrts::splice_evar( res, context[5], context[1] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintBracketsVarInit("PrintBracketsVarInit", COOKIE1_, COOKIE2_, func_PrintBracketsVarInit);


static refalrts::FnResult func_FunctionImage(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & FunctionImage/4 e.Name/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Name as range 2
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ }"functions[efunc_"/5 Tile{ AsIs: </0 Reuse: & CName/4 AsIs: e.Name/2 AsIs: >/1 } ']'/7 Tile{ ]] }
  refalrts::alloc_chars(vm, context[5], context[6], "functions[efunc_", 16);
  refalrts::alloc_char(vm, context[7], ']');
  refalrts::update_name(context[4], functions[efunc_CName]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FunctionImage("FunctionImage", COOKIE1_, COOKIE2_, func_FunctionImage);


static refalrts::FnResult func_IdentifierImage(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & IdentifierImage/4 e.Name/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Name as range 2
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ }"identifiers[ident_"/5 Tile{ AsIs: </0 Reuse: & CName/4 AsIs: e.Name/2 AsIs: >/1 } ']'/7 Tile{ ]] }
  refalrts::alloc_chars(vm, context[5], context[6], "identifiers[ident_", 18);
  refalrts::alloc_char(vm, context[7], ']');
  refalrts::update_name(context[4], functions[efunc_CName]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IdentifierImage("IdentifierImage", COOKIE1_, COOKIE2_, func_IdentifierImage);


static refalrts::FnResult func_BaseCName(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & BaseCName/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & BaseCName/4 e.Name/5 # Hash/9 s.Cookie1/8 s.Cookie2/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_right( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_right( context[8], context[5], context[6] ) )
      continue;
    context[9] = refalrts::ident_right( identifiers[ident_Hash], context[5], context[6] );
    if( ! context[9] )
      continue;
    // closed e.Name as range 5
    //DEBUG: s.Cookie2: 7
    //DEBUG: s.Cookie1: 8
    //DEBUG: e.Name: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Cookie1/8 s.Cookie2/7 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CName/4 AsIs: e.Name/5 HalfReuse: >/9 } Tile{ ]] }
    refalrts::update_name(context[4], functions[efunc_CName]);
    refalrts::reinit_close_call(context[9]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, context[9], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & BaseCName/4 e.Name/2 >/1
  // closed e.Name as range 2
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CName/4 AsIs: e.Name/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_CName]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_BaseCName("BaseCName", COOKIE1_, COOKIE2_, func_BaseCName);


static refalrts::FnResult func_NameAndCookies(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & NameAndCookies/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & NameAndCookies/4 e.new1/2 # Hash/7 s.new2/6 s.new3/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_right( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::ident_right( identifiers[ident_Hash], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 2
  do {
    // </0 & NameAndCookies/4 e.Name/8 # Hash/7 0/6 0/5 >/1
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::number_term( 0UL, context[6] ) )
      continue;
    if( ! refalrts::number_term( 0UL, context[5] ) )
      continue;
    // closed e.Name as range 8
    //DEBUG: e.Name: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } '\"'/10 Tile{ AsIs: </0 Reuse: & DisplayCName/4 AsIs: e.Name/8 HalfReuse: >/7 HalfReuse: '\"'/6 HalfReuse: ','/5 HalfReuse: ' '/1 }"0U, 0U"/11 Tile{ ]] }
    refalrts::alloc_char(vm, context[10], '\"');
    refalrts::alloc_chars(vm, context[11], context[12], "0U, 0U", 6);
    refalrts::update_name(context[4], functions[efunc_DisplayCName]);
    refalrts::reinit_close_call(context[7]);
    refalrts::reinit_char(context[6], '\"');
    refalrts::reinit_char(context[5], ',');
    refalrts::reinit_char(context[1], ' ');
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_elem( res, context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & NameAndCookies/4 e.Name/2 # Hash/7 s.Cookie1/6 s.Cookie2/5 >/1
  // closed e.Name as range 2
  //DEBUG: s.Cookie1: 6
  //DEBUG: s.Cookie2: 5
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} s.Cookie1/6 s.Cookie2/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } '\"'/8 Tile{ AsIs: </0 Reuse: & DisplayCName/4 AsIs: e.Name/2 HalfReuse: >/7 }"\", COOKIE1_, COOKIE2"/9 Tile{ HalfReuse: '_'/1 ]] }
  refalrts::alloc_char(vm, context[8], '\"');
  refalrts::alloc_chars(vm, context[9], context[10], "\", COOKIE1_, COOKIE2", 20);
  refalrts::update_name(context[4], functions[efunc_DisplayCName]);
  refalrts::reinit_close_call(context[7]);
  refalrts::reinit_char(context[1], '_');
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_elem( res, context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NameAndCookies("NameAndCookies", COOKIE1_, COOKIE2_, func_NameAndCookies);


static refalrts::FnResult func_FormatOffsets(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & FormatOffsets/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & FormatOffsets/4 e.Chars/7 # Offset/11 s.Offset/12 e.Text/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = refalrts::ident_left( identifiers[ident_Offset], context[9], context[10] );
      if( ! context[11] )
        continue;
      if( ! refalrts::svar_left( context[12], context[9], context[10] ) )
        continue;
      // closed e.Text as range 9
      //DEBUG: e.Chars: 7
      //DEBUG: s.Offset: 12
      //DEBUG: e.Text: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Chars/7 } </13 Tile{ HalfReuse: & Symb/11 AsIs: s.Offset/12 } >/14 Tile{ AsIs: </0 AsIs: & FormatOffsets/4 } Tile{ AsIs: e.Text/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_close_call(vm, context[14]);
      refalrts::reinit_name(context[11], functions[efunc_Symb]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FormatOffsets/4 e.Chars/2 >/1
  // closed e.Chars as range 2
  //DEBUG: e.Chars: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & FormatOffsets/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Chars/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FormatOffsets("FormatOffsets", COOKIE1_, COOKIE2_, func_FormatOffsets);


static refalrts::FnResult func_GenCommandm_Native(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 135 elems
  refalrts::Iter context[135];
  refalrts::zeros( context, 135 );
  // </0 & GenCommand-Native/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & GenCommand-Native/4 (/9 e.new1/7 )/10 (/13 s.new2/15 e.new3/11 )/14 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[5], context[6] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    // closed e.new1 as range 7
    if( ! refalrts::svar_left( context[15], context[11], context[12] ) )
      continue;
    // closed e.new3 as range 11
    do {
      // </0 & GenCommand-Native/4 (/9 e.Indent/16 )/10 (/13 # CmdComment/15 e.Text/18 )/14 >/1
      context[16] = context[7];
      context[17] = context[8];
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_CmdComment], context[15] ) )
        continue;
      // closed e.Indent as range 16
      // closed e.Text as range 18
      //DEBUG: e.Indent: 16
      //DEBUG: e.Text: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/16 AsIs: )/10 AsIs: (/13 } e.Indent/16/20 Tile{ HalfReuse: '/'/4 } '/'/22 Tile{ AsIs: </0 } Tile{ HalfReuse: & FormatOffsets/15 AsIs: e.Text/18 HalfReuse: >/14 HalfReuse: )/1 ]] }
      refalrts::copy_evar(vm, context[20], context[21], context[16], context[17]);
      refalrts::alloc_char(vm, context[22], '/');
      refalrts::reinit_char(context[4], '/');
      refalrts::reinit_name(context[15], functions[efunc_FormatOffsets]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[13], context[1] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[15];
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.Indent/16 )/10 (/13 # CmdCEnum-Start/15 e.Prefix/18 )/14 >/1
      context[16] = context[7];
      context[17] = context[8];
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_CmdCEnumm_Start], context[15] ) )
        continue;
      // closed e.Indent as range 16
      // closed e.Prefix as range 18
      //DEBUG: e.Indent: 16
      //DEBUG: e.Prefix: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/16 AsIs: )/10 AsIs: (/13 HalfReuse: )/15 } (/20 e.Indent/16/21 Tile{ HalfReuse: 'e'/0 HalfReuse: 'n'/4 }"um "/23 Tile{ AsIs: e.Prefix/18 } ' '/25 Tile{ HalfReuse: '{'/14 HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::copy_evar(vm, context[21], context[22], context[16], context[17]);
      refalrts::alloc_chars(vm, context[23], context[24], "um ", 3);
      refalrts::alloc_char(vm, context[25], ' ');
      refalrts::reinit_close_bracket(context[15]);
      refalrts::reinit_char(context[0], 'e');
      refalrts::reinit_char(context[4], 'n');
      refalrts::reinit_char(context[14], '{');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[20], context[1] );
      refalrts::link_brackets( context[13], context[15] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.Indent/16 )/10 (/13 # CmdCEnum-End/15 )/14 >/1
      context[16] = context[7];
      context[17] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_CmdCEnumm_End], context[15] ) )
        continue;
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      // closed e.Indent as range 16
      //DEBUG: e.Indent: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } e.Indent/16/18 Tile{ HalfReuse: )/4 AsIs: (/9 AsIs: e.Indent/16 HalfReuse: '}'/10 HalfReuse: ';'/13 HalfReuse: )/15 HalfReuse: (/14 HalfReuse: )/1 ]] }
      refalrts::copy_evar(vm, context[18], context[19], context[16], context[17]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[10], '}');
      refalrts::reinit_char(context[13], ';');
      refalrts::reinit_close_bracket(context[15]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[14], context[1] );
      refalrts::link_brackets( context[9], context[15] );
      refalrts::link_brackets( context[0], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      res = refalrts::splice_evar( res, context[18], context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.new4/16 )/10 (/13 s.new5/15 e.new6/18 s.new7/20 )/14 >/1
      context[16] = context[7];
      context[17] = context[8];
      context[18] = context[11];
      context[19] = context[12];
      // closed e.new4 as range 16
      if( ! refalrts::svar_right( context[20], context[18], context[19] ) )
        continue;
      // closed e.new6 as range 18
      do {
        // </0 & GenCommand-Native/4 (/9 e.new8/21 )/10 (/13 s.new9/15 t.new11/25 e.new12/23 s.new10/20 )/14 >/1
        context[21] = context[16];
        context[22] = context[17];
        context[23] = context[18];
        context[24] = context[19];
        // closed e.new8 as range 21
        context[26] = refalrts::tvar_left( context[25], context[23], context[24] );
        if( ! context[26] )
          continue;
        // closed e.new12 as range 23
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCEnum-Item/15 (/25 e.Prefix/31 )/26 e.Name/29 s.Id/20 )/14 >/1
          context[27] = context[21];
          context[28] = context[22];
          context[29] = context[23];
          context[30] = context[24];
          context[31] = 0;
          context[32] = 0;
          if( ! refalrts::brackets_term( context[31], context[32], context[25] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_CmdCEnumm_Item], context[15] ) )
            continue;
          // closed e.Indent as range 27
          // closed e.Prefix as range 31
          // closed e.Name as range 29
          //DEBUG: s.Id: 20
          //DEBUG: e.Indent: 27
          //DEBUG: e.Prefix: 31
          //DEBUG: e.Name: 29

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/33 Tile{ HalfReuse: ' '/15 HalfReuse: ' '/25 AsIs: e.Prefix/31 HalfReuse: '_'/26 } Tile{ AsIs: </0 Reuse: & CName/4 } Tile{ AsIs: e.Name/29 } >/35" = "/36 </38 & Symb/39 Tile{ AsIs: s.Id/20 HalfReuse: >/14 HalfReuse: ','/1 } )/40 Tile{ ]] }
          refalrts::copy_evar(vm, context[33], context[34], context[27], context[28]);
          refalrts::alloc_close_call(vm, context[35]);
          refalrts::alloc_chars(vm, context[36], context[37], " = ", 3);
          refalrts::alloc_open_call(vm, context[38]);
          refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
          refalrts::alloc_close_bracket(vm, context[40]);
          refalrts::reinit_char(context[15], ' ');
          refalrts::reinit_char(context[25], ' ');
          refalrts::reinit_char(context[26], '_');
          refalrts::update_name(context[4], functions[efunc_CName]);
          refalrts::reinit_close_call(context[14]);
          refalrts::reinit_char(context[1], ',');
          refalrts::link_brackets( context[13], context[40] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[38] );
          refalrts::push_stack( vm, context[35] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_elem( res, context[40] );
          res = refalrts::splice_evar( res, context[20], context[1] );
          res = refalrts::splice_evar( res, context[35], context[39] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[15], context[26] );
          res = refalrts::splice_evar( res, context[33], context[34] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCookieNS/15 s.Cookie1/25 s.Cookie2/20 )/14 >/1
        context[27] = context[21];
        context[28] = context[22];
        if( ! refalrts::svar_term( context[25], context[25] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_CmdCookieNS], context[15] ) )
          continue;
        if( ! refalrts::empty_seq( context[23], context[24] ) )
          continue;
        // closed e.Indent as range 27
        //DEBUG: s.Cookie1: 25
        //DEBUG: s.Cookie2: 20
        //DEBUG: e.Indent: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 HalfReuse: '#'/15 }"define cookie_ns cookie_ns_"/29 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.Cookie1/25 } >/31 '_'/32 </33 & Symb/34 Tile{ AsIs: s.Cookie2/20 HalfReuse: >/14 HalfReuse: )/1 } (/35"#define COOKIE1_ "/36 </38 & Symb/39 s.Cookie1/25/40 >/41 'U'/42 )/43 (/44"#define COOKIE2_ "/45 </47 & Symb/48 s.Cookie2/20/49 >/50 'U'/51 )/52 Tile{ ]] }
        refalrts::alloc_chars(vm, context[29], context[30], "define cookie_ns cookie_ns_", 27);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_char(vm, context[32], '_');
        refalrts::alloc_open_call(vm, context[33]);
        refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
        refalrts::alloc_open_bracket(vm, context[35]);
        refalrts::alloc_chars(vm, context[36], context[37], "#define COOKIE1_ ", 17);
        refalrts::alloc_open_call(vm, context[38]);
        refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
        refalrts::copy_stvar(vm, context[40], context[25]);
        refalrts::alloc_close_call(vm, context[41]);
        refalrts::alloc_char(vm, context[42], 'U');
        refalrts::alloc_close_bracket(vm, context[43]);
        refalrts::alloc_open_bracket(vm, context[44]);
        refalrts::alloc_chars(vm, context[45], context[46], "#define COOKIE2_ ", 17);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_Symb]);
        refalrts::copy_stvar(vm, context[49], context[20]);
        refalrts::alloc_close_call(vm, context[50]);
        refalrts::alloc_char(vm, context[51], 'U');
        refalrts::alloc_close_bracket(vm, context[52]);
        refalrts::reinit_char(context[15], '#');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[44], context[52] );
        refalrts::push_stack( vm, context[50] );
        refalrts::push_stack( vm, context[47] );
        refalrts::link_brackets( context[35], context[43] );
        refalrts::push_stack( vm, context[41] );
        refalrts::push_stack( vm, context[38] );
        refalrts::link_brackets( context[13], context[1] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[33] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[35], context[52] );
        res = refalrts::splice_evar( res, context[20], context[1] );
        res = refalrts::splice_evar( res, context[31], context[34] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[9], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.new8/21 )/10 (/13 # CmdNativeFuncDescr/15 e.new10/23 # Hash/26 s.new11/25 s.new9/20 )/14 >/1
      context[21] = context[16];
      context[22] = context[17];
      context[23] = context[18];
      context[24] = context[19];
      if( ! refalrts::ident_term( identifiers[ident_CmdNativeFuncDescr], context[15] ) )
        continue;
      // closed e.new8 as range 21
      if( ! refalrts::svar_right( context[25], context[23], context[24] ) )
        continue;
      context[26] = refalrts::ident_right( identifiers[ident_Hash], context[23], context[24] );
      if( ! context[26] )
        continue;
      // closed e.new10 as range 23
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdNativeFuncDescr/15 e.1/29 # Hash/26 0/25 0/20 )/14 >/1
        context[27] = context[21];
        context[28] = context[22];
        context[29] = context[23];
        context[30] = context[24];
        if( ! refalrts::number_term( 0UL, context[25] ) )
          continue;
        if( ! refalrts::number_term( 0UL, context[20] ) )
          continue;
        // closed e.Indent as range 27
        // closed e.1 as range 29
        //DEBUG: e.Indent: 27
        //DEBUG: e.1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 HalfReuse: )/15 } (/31"static refalrts::NativeReference nat_ref_"/32 Tile{ AsIs: </0 Reuse: & CName/4 } Tile{ AsIs: e.1/29 } >/34"(\""/35 </37 & DisplayCName/38 e.1/29/39 >/41"\", 0U, 0U, func_"/42 </44 & CName/45 e.1/29/46 >/48 Tile{ HalfReuse: ')'/26 HalfReuse: ';'/25 HalfReuse: )/20 HalfReuse: (/14 HalfReuse: )/1 ]] }
        refalrts::alloc_open_bracket(vm, context[31]);
        refalrts::alloc_chars(vm, context[32], context[33], "static refalrts::NativeReference nat_ref_", 41);
        refalrts::alloc_close_call(vm, context[34]);
        refalrts::alloc_chars(vm, context[35], context[36], "(\"", 2);
        refalrts::alloc_open_call(vm, context[37]);
        refalrts::alloc_name(vm, context[38], functions[efunc_DisplayCName]);
        refalrts::copy_evar(vm, context[39], context[40], context[29], context[30]);
        refalrts::alloc_close_call(vm, context[41]);
        refalrts::alloc_chars(vm, context[42], context[43], "\", 0U, 0U, func_", 16);
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_CName]);
        refalrts::copy_evar(vm, context[46], context[47], context[29], context[30]);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::reinit_close_bracket(context[15]);
        refalrts::update_name(context[4], functions[efunc_CName]);
        refalrts::reinit_char(context[26], ')');
        refalrts::reinit_char(context[25], ';');
        refalrts::reinit_close_bracket(context[20]);
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[14], context[1] );
        refalrts::link_brackets( context[31], context[20] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[41] );
        refalrts::push_stack( vm, context[37] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[26];
        res = refalrts::splice_evar( res, context[34], context[48] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[31], context[33] );
        res = refalrts::splice_evar( res, context[9], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdNativeFuncDescr/15 e.1/29 # Hash/26 s.Cookie1/25 s.Cookie2/20 )/14 >/1
        context[27] = context[21];
        context[28] = context[22];
        context[29] = context[23];
        context[30] = context[24];
        // closed e.Indent as range 27
        // closed e.1 as range 29
        //DEBUG: s.Cookie1: 25
        //DEBUG: s.Cookie2: 20
        //DEBUG: e.Indent: 27
        //DEBUG: e.1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Cookie1/25 s.Cookie2/20 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 HalfReuse: )/15 } (/31 's'/32 Tile{ HalfReuse: 't'/26 }"atic refalrts::NativeReference nat_ref_"/33 Tile{ AsIs: </0 Reuse: & CName/4 } Tile{ AsIs: e.1/29 } >/35"(\""/36 </38 & DisplayCName/39 e.1/29/40 >/42"\", COOKIE1_, COOKIE2_, func_"/43 </45 & CName/46 e.1/29/47 >/49");"/50 )/52 Tile{ HalfReuse: (/14 HalfReuse: )/1 ]] }
        refalrts::alloc_open_bracket(vm, context[31]);
        refalrts::alloc_char(vm, context[32], 's');
        refalrts::alloc_chars(vm, context[33], context[34], "atic refalrts::NativeReference nat_ref_", 39);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::alloc_chars(vm, context[36], context[37], "(\"", 2);
        refalrts::alloc_open_call(vm, context[38]);
        refalrts::alloc_name(vm, context[39], functions[efunc_DisplayCName]);
        refalrts::copy_evar(vm, context[40], context[41], context[29], context[30]);
        refalrts::alloc_close_call(vm, context[42]);
        refalrts::alloc_chars(vm, context[43], context[44], "\", COOKIE1_, COOKIE2_, func_", 28);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_CName]);
        refalrts::copy_evar(vm, context[47], context[48], context[29], context[30]);
        refalrts::alloc_close_call(vm, context[49]);
        refalrts::alloc_chars(vm, context[50], context[51], ");", 2);
        refalrts::alloc_close_bracket(vm, context[52]);
        refalrts::reinit_close_bracket(context[15]);
        refalrts::reinit_char(context[26], 't');
        refalrts::update_name(context[4], functions[efunc_CName]);
        refalrts::reinit_open_bracket(context[14]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[14], context[1] );
        refalrts::link_brackets( context[31], context[52] );
        refalrts::push_stack( vm, context[49] );
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[38] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[35], context[52] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_elem( res, context[26] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[9], context[15] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdNativeFuncDescr/15 e.1/29 # Hash/26 0/25 0/20 )/14 >/1
        context[27] = context[21];
        context[28] = context[22];
        context[29] = context[23];
        context[30] = context[24];
        if( ! refalrts::number_term( 0UL, context[25] ) )
          continue;
        if( ! refalrts::number_term( 0UL, context[20] ) )
          continue;
        // closed e.Indent as range 27
        // closed e.1 as range 29
        //DEBUG: e.Indent: 27
        //DEBUG: e.1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/31 Tile{ AsIs: e.Indent/27 } )/32 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/9 }"static refalrts::NativeReference nat_ref"/33 Tile{ HalfReuse: '_'/10 HalfReuse: </13 HalfReuse: & CName/15 AsIs: e.1/29 AsIs: # Hash/26 AsIs: 0/25 AsIs: 0/20 HalfReuse: >/14 HalfReuse: '('/1 } '\"'/35 </36 & DisplayCName/37 e.1/29/38 >/40"\", 0U, 0U, func_"/41 </43 & CName/44 e.1/29/45 >/47");"/48 )/50 (/51 )/52 Tile{ ]] }
        refalrts::alloc_open_bracket(vm, context[31]);
        refalrts::alloc_close_bracket(vm, context[32]);
        refalrts::alloc_chars(vm, context[33], context[34], "static refalrts::NativeReference nat_ref", 40);
        refalrts::alloc_char(vm, context[35], '\"');
        refalrts::alloc_open_call(vm, context[36]);
        refalrts::alloc_name(vm, context[37], functions[efunc_DisplayCName]);
        refalrts::copy_evar(vm, context[38], context[39], context[29], context[30]);
        refalrts::alloc_close_call(vm, context[40]);
        refalrts::alloc_chars(vm, context[41], context[42], "\", 0U, 0U, func_", 16);
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::alloc_name(vm, context[44], functions[efunc_CName]);
        refalrts::copy_evar(vm, context[45], context[46], context[29], context[30]);
        refalrts::alloc_close_call(vm, context[47]);
        refalrts::alloc_chars(vm, context[48], context[49], ");", 2);
        refalrts::alloc_close_bracket(vm, context[50]);
        refalrts::alloc_open_bracket(vm, context[51]);
        refalrts::alloc_close_bracket(vm, context[52]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_close_bracket(context[4]);
        refalrts::reinit_char(context[10], '_');
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[15], functions[efunc_CName]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], '(');
        refalrts::link_brackets( context[51], context[52] );
        refalrts::link_brackets( context[9], context[50] );
        refalrts::push_stack( vm, context[47] );
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[40] );
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[13] );
        refalrts::link_brackets( context[0], context[4] );
        refalrts::link_brackets( context[31], context[32] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[35], context[52] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_elem( res, context[32] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_elem( res, context[31] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdNativeFuncDescr/15 e.1/29 # Hash/26 s.Cookie1/25 s.Cookie2/20 )/14 >/1
        context[27] = context[21];
        context[28] = context[22];
        context[29] = context[23];
        context[30] = context[24];
        // closed e.Indent as range 27
        // closed e.1 as range 29
        //DEBUG: s.Cookie1: 25
        //DEBUG: s.Cookie2: 20
        //DEBUG: e.Indent: 27
        //DEBUG: e.1: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/31 Tile{ AsIs: e.Indent/27 } )/32 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/9 }"static refalrts::NativeReference nat_ref"/33 Tile{ HalfReuse: '_'/10 HalfReuse: </13 HalfReuse: & CName/15 AsIs: e.1/29 AsIs: # Hash/26 AsIs: s.Cookie1/25 AsIs: s.Cookie2/20 HalfReuse: >/14 HalfReuse: '('/1 } '\"'/35 </36 & DisplayCName/37 e.1/29/38 >/40"\", COOKIE1_, COOKIE2_, func_"/41 </43 & CName/44 e.1/29/45 >/47");"/48 )/50 (/51 )/52 Tile{ ]] }
        refalrts::alloc_open_bracket(vm, context[31]);
        refalrts::alloc_close_bracket(vm, context[32]);
        refalrts::alloc_chars(vm, context[33], context[34], "static refalrts::NativeReference nat_ref", 40);
        refalrts::alloc_char(vm, context[35], '\"');
        refalrts::alloc_open_call(vm, context[36]);
        refalrts::alloc_name(vm, context[37], functions[efunc_DisplayCName]);
        refalrts::copy_evar(vm, context[38], context[39], context[29], context[30]);
        refalrts::alloc_close_call(vm, context[40]);
        refalrts::alloc_chars(vm, context[41], context[42], "\", COOKIE1_, COOKIE2_, func_", 28);
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::alloc_name(vm, context[44], functions[efunc_CName]);
        refalrts::copy_evar(vm, context[45], context[46], context[29], context[30]);
        refalrts::alloc_close_call(vm, context[47]);
        refalrts::alloc_chars(vm, context[48], context[49], ");", 2);
        refalrts::alloc_close_bracket(vm, context[50]);
        refalrts::alloc_open_bracket(vm, context[51]);
        refalrts::alloc_close_bracket(vm, context[52]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_close_bracket(context[4]);
        refalrts::reinit_char(context[10], '_');
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[15], functions[efunc_CName]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], '(');
        refalrts::link_brackets( context[51], context[52] );
        refalrts::link_brackets( context[9], context[50] );
        refalrts::push_stack( vm, context[47] );
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[40] );
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[13] );
        refalrts::link_brackets( context[0], context[4] );
        refalrts::link_brackets( context[31], context[32] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[35], context[52] );
        res = refalrts::splice_evar( res, context[10], context[1] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_elem( res, context[32] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_elem( res, context[31] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdNativeFuncDescr/15 e.1/29 # Hash/26 s.Cookie1/25 s.Cookie2/20 )/14 >/1
      context[27] = context[21];
      context[28] = context[22];
      context[29] = context[23];
      context[30] = context[24];
      // closed e.Indent as range 27
      // closed e.1 as range 29
      //DEBUG: s.Cookie1: 25
      //DEBUG: s.Cookie2: 20
      //DEBUG: e.Indent: 27
      //DEBUG: e.1: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/31 Tile{ AsIs: e.Indent/27 } )/32 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/9 }"static refalrts::NativeReference nat_ref"/33 Tile{ HalfReuse: '_'/10 HalfReuse: </13 HalfReuse: & CName/15 AsIs: e.1/29 AsIs: # Hash/26 AsIs: s.Cookie1/25 AsIs: s.Cookie2/20 HalfReuse: >/14 HalfReuse: '('/1 } </35 & NameAndCookies*2/36 e.1/29/37 # Hash/39 s.Cookie1/25/40 s.Cookie2/20/41 >/42", func_"/43 </45 & CName/46 e.1/29/47 >/49");"/50 )/52 (/53 )/54 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_close_bracket(vm, context[32]);
      refalrts::alloc_chars(vm, context[33], context[34], "static refalrts::NativeReference nat_ref", 40);
      refalrts::alloc_open_call(vm, context[35]);
      refalrts::alloc_name(vm, context[36], functions[efunc_gen_NameAndCookies_D2]);
      refalrts::copy_evar(vm, context[37], context[38], context[29], context[30]);
      refalrts::alloc_ident(vm, context[39], identifiers[ident_Hash]);
      refalrts::copy_stvar(vm, context[40], context[25]);
      refalrts::copy_stvar(vm, context[41], context[20]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_chars(vm, context[43], context[44], ", func_", 7);
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_CName]);
      refalrts::copy_evar(vm, context[47], context[48], context[29], context[30]);
      refalrts::alloc_close_call(vm, context[49]);
      refalrts::alloc_chars(vm, context[50], context[51], ");", 2);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::alloc_open_bracket(vm, context[53]);
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[10], '_');
      refalrts::reinit_open_call(context[13]);
      refalrts::reinit_name(context[15], functions[efunc_CName]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], '(');
      refalrts::link_brackets( context[53], context[54] );
      refalrts::link_brackets( context[9], context[52] );
      refalrts::push_stack( vm, context[49] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[0], context[4] );
      refalrts::link_brackets( context[31], context[32] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[35], context[54] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_elem( res, context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.Indent/16 )/10 (/13 # CmdNativeFuncDescr/15 e.Name/18 )/14 >/1
      context[16] = context[7];
      context[17] = context[8];
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_CmdNativeFuncDescr], context[15] ) )
        continue;
      // closed e.Indent as range 16
      // closed e.Name as range 18
      //DEBUG: e.Indent: 16
      //DEBUG: e.Name: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/16 AsIs: )/10 AsIs: (/13 HalfReuse: )/15 } (/20"static refalrts::NativeReference nat_ref_"/21 Tile{ AsIs: </0 Reuse: & CName/4 } Tile{ AsIs: e.Name/18 } >/23 '('/24 </25 & NameAndCookies*2/26 e.Name/18/27 >/29", func_"/30 </32 & CName/33 e.Name/18/34 >/36");"/37 )/39 Tile{ HalfReuse: (/14 HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_chars(vm, context[21], context[22], "static refalrts::NativeReference nat_ref_", 41);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_char(vm, context[24], '(');
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_gen_NameAndCookies_D2]);
      refalrts::copy_evar(vm, context[27], context[28], context[18], context[19]);
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::alloc_chars(vm, context[30], context[31], ", func_", 7);
      refalrts::alloc_open_call(vm, context[32]);
      refalrts::alloc_name(vm, context[33], functions[efunc_CName]);
      refalrts::copy_evar(vm, context[34], context[35], context[18], context[19]);
      refalrts::alloc_close_call(vm, context[36]);
      refalrts::alloc_chars(vm, context[37], context[38], ");", 2);
      refalrts::alloc_close_bracket(vm, context[39]);
      refalrts::reinit_close_bracket(context[15]);
      refalrts::update_name(context[4], functions[efunc_CName]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[14], context[1] );
      refalrts::link_brackets( context[20], context[39] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[15] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[39] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[20], context[22] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.new4/16 )/10 (/13 # CmdFnStart/15 e.new5/18 )/14 >/1
      context[16] = context[7];
      context[17] = context[8];
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_CmdFnStart], context[15] ) )
        continue;
      // closed e.new4 as range 16
      // closed e.new5 as range 18
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/20 )/10 (/13 # CmdFnStart/15 e.1/22 # Hash/26 s.Cookie1/25 s.Cookie2/24 )/14 >/1
        context[20] = context[16];
        context[21] = context[17];
        context[22] = context[18];
        context[23] = context[19];
        // closed e.Indent as range 20
        if( ! refalrts::svar_right( context[24], context[22], context[23] ) )
          continue;
        if( ! refalrts::svar_right( context[25], context[22], context[23] ) )
          continue;
        context[26] = refalrts::ident_right( identifiers[ident_Hash], context[22], context[23] );
        if( ! context[26] )
          continue;
        // closed e.1 as range 22
        //DEBUG: e.Indent: 20
        //DEBUG: s.Cookie2: 24
        //DEBUG: s.Cookie1: 25
        //DEBUG: e.1: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Cookie1/25 s.Cookie2/24 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/20 HalfReuse: ' '/10 HalfReuse: ' '/13 HalfReuse: )/15 } (/27 )/28 Tile{ HalfReuse: (/26 }"static refalrts::FnResult func_"/29 Tile{ AsIs: </0 Reuse: & CName/4 } Tile{ AsIs: e.1/22 } >/31"(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {"/32 )/34 (/35"  (void) vm"/36 Tile{ HalfReuse: ';'/14 HalfReuse: )/1 ]] }
        refalrts::alloc_open_bracket(vm, context[27]);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::alloc_chars(vm, context[29], context[30], "static refalrts::FnResult func_", 31);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_chars(vm, context[32], context[33], "(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {", 70);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::alloc_open_bracket(vm, context[35]);
        refalrts::alloc_chars(vm, context[36], context[37], "  (void) vm", 11);
        refalrts::reinit_char(context[10], ' ');
        refalrts::reinit_char(context[13], ' ');
        refalrts::reinit_close_bracket(context[15]);
        refalrts::reinit_open_bracket(context[26]);
        refalrts::update_name(context[4], functions[efunc_CName]);
        refalrts::reinit_char(context[14], ';');
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[35], context[1] );
        refalrts::link_brackets( context[26], context[34] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[27], context[28] );
        refalrts::link_brackets( context[9], context[15] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[31], context[37] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_elem( res, context[26] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[9], context[15] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/20 )/10 (/13 # CmdFnStart/15 e.Name/22 )/14 >/1
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      context[23] = context[19];
      // closed e.Indent as range 20
      // closed e.Name as range 22
      //DEBUG: e.Indent: 20
      //DEBUG: e.Name: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/20 HalfReuse: ' '/10 HalfReuse: ' '/13 HalfReuse: )/15 } (/24 )/25 (/26"static refalrts::FnResult func_"/27 Tile{ AsIs: </0 Reuse: & CName/4 } Tile{ AsIs: e.Name/22 } >/29"(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {"/30 )/32 (/33"  (void) vm"/34 Tile{ HalfReuse: ';'/14 HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[24]);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_open_bracket(vm, context[26]);
      refalrts::alloc_chars(vm, context[27], context[28], "static refalrts::FnResult func_", 31);
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::alloc_chars(vm, context[30], context[31], "(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {", 70);
      refalrts::alloc_close_bracket(vm, context[32]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_chars(vm, context[34], context[35], "  (void) vm", 11);
      refalrts::reinit_char(context[10], ' ');
      refalrts::reinit_char(context[13], ' ');
      refalrts::reinit_close_bracket(context[15]);
      refalrts::update_name(context[4], functions[efunc_CName]);
      refalrts::reinit_char(context[14], ';');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[33], context[1] );
      refalrts::link_brackets( context[26], context[32] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[9], context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[29], context[35] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[24], context[28] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.Indent/16 ' '/19 ' '/18 )/10 (/13 # CmdFnEnd/15 )/14 >/1
      context[16] = context[7];
      context[17] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_CmdFnEnd], context[15] ) )
        continue;
      context[18] = refalrts::char_right( ' ', context[16], context[17] );
      if( ! context[18] )
        continue;
      context[19] = refalrts::char_right( ' ', context[16], context[17] );
      if( ! context[19] )
        continue;
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      // closed e.Indent as range 16
      //DEBUG: e.Indent: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & GenCommand-Native/4 (/9 {REMOVED TILE} ' '/19 ' '/18 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Indent/16 } Tile{ AsIs: )/10 AsIs: (/13 HalfReuse: '}'/15 AsIs: )/14 } Tile{ ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_char(context[15], '}');
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[0], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[10], context[14] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.Indent/16 )/10 (/13 # CmdEmitNativeCode/15 t.SrcPos/20 e.Code/18 )/14 >/1
      context[16] = context[7];
      context[17] = context[8];
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_CmdEmitNativeCode], context[15] ) )
        continue;
      // closed e.Indent as range 16
      context[21] = refalrts::tvar_left( context[20], context[18], context[19] );
      if( ! context[21] )
        continue;
      // closed e.Code as range 18
      //DEBUG: e.Indent: 16
      //DEBUG: t.SrcPos: 20
      //DEBUG: e.Code: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/16 AsIs: )/10 AsIs: (/13 Reuse: # NativeInsertBegin/15 AsIs: t.SrcPos/20 } Tile{ HalfReuse: )/4 } Tile{ AsIs: e.Code/18 } Tile{ HalfReuse: (/0 } Tile{ HalfReuse: # NativeInsertEnd/14 HalfReuse: )/1 ]] }
      refalrts::update_ident(context[15], identifiers[ident_NativeInsertBegin]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[14], identifiers[ident_NativeInsertEnd]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      refalrts::link_brackets( context[13], context[4] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[9], context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.new4/16 )/10 (/13 s.new5/15 )/14 >/1
      context[16] = context[7];
      context[17] = context[8];
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      // closed e.new4 as range 16
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/18 )/10 (/13 # CmdCallCondition/15 )/14 >/1
        context[18] = context[16];
        context[19] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_CmdCallCondition], context[15] ) )
          continue;
        // closed e.Indent as range 18
        //DEBUG: e.Indent: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/20 e.Indent/18/21 )/23 (/24 e.Indent/18/25"refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm)"/27 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/9 AsIs: e.Indent/18 HalfReuse: 'i'/10 HalfReuse: 'f'/13 HalfReuse: ' '/15 HalfReuse: '('/14 HalfReuse: 'r'/1 }"ec_res != refalrts::cSuccess)"/29 )/31 (/32 e.Indent/18/33"  return rec_res;"/35 )/37 Tile{ ]] }
        refalrts::alloc_open_bracket(vm, context[20]);
        refalrts::copy_evar(vm, context[21], context[22], context[18], context[19]);
        refalrts::alloc_close_bracket(vm, context[23]);
        refalrts::alloc_open_bracket(vm, context[24]);
        refalrts::copy_evar(vm, context[25], context[26], context[18], context[19]);
        refalrts::alloc_chars(vm, context[27], context[28], "refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm)", 67);
        refalrts::alloc_chars(vm, context[29], context[30], "ec_res != refalrts::cSuccess)", 29);
        refalrts::alloc_close_bracket(vm, context[31]);
        refalrts::alloc_open_bracket(vm, context[32]);
        refalrts::copy_evar(vm, context[33], context[34], context[18], context[19]);
        refalrts::alloc_chars(vm, context[35], context[36], "  return rec_res;", 17);
        refalrts::alloc_close_bracket(vm, context[37]);
        refalrts::reinit_char(context[0], ';');
        refalrts::reinit_close_bracket(context[4]);
        refalrts::reinit_char(context[10], 'i');
        refalrts::reinit_char(context[13], 'f');
        refalrts::reinit_char(context[15], ' ');
        refalrts::reinit_char(context[14], '(');
        refalrts::reinit_char(context[1], 'r');
        refalrts::link_brackets( context[32], context[37] );
        refalrts::link_brackets( context[9], context[31] );
        refalrts::link_brackets( context[24], context[4] );
        refalrts::link_brackets( context[20], context[23] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[29], context[37] );
        res = refalrts::splice_evar( res, context[0], context[1] );
        res = refalrts::splice_evar( res, context[20], context[28] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/18 )/10 (/13 # CmdProfileFunction/15 )/14 >/1
        context[18] = context[16];
        context[19] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_CmdProfileFunction], context[15] ) )
          continue;
        // closed e.Indent as range 18
        //DEBUG: e.Indent: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/18 AsIs: )/10 AsIs: (/13 } e.Indent/18/20 Tile{ HalfReuse: 'r'/0 HalfReuse: 'e'/4 }"falrts::this_is_generated_function(vm"/22 Tile{ HalfReuse: ')'/15 HalfReuse: ';'/14 HalfReuse: )/1 ]] }
        refalrts::copy_evar(vm, context[20], context[21], context[18], context[19]);
        refalrts::alloc_chars(vm, context[22], context[23], "falrts::this_is_generated_function(vm", 37);
        refalrts::reinit_char(context[0], 'r');
        refalrts::reinit_char(context[4], 'e');
        refalrts::reinit_char(context[15], ')');
        refalrts::reinit_char(context[14], ';');
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[13], context[1] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[15];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/18 )/10 (/13 # CmdLoadConstants/15 )/14 >/1
      context[18] = context[16];
      context[19] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_CmdLoadConstants], context[15] ) )
        continue;
      // closed e.Indent as range 18
      //DEBUG: e.Indent: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/18 AsIs: )/10 AsIs: (/13 HalfReuse: ' '/15 HalfReuse: ' '/14 HalfReuse: 'r'/1 } 'e'/20 Tile{ HalfReuse: 'f'/0 HalfReuse: 'a'/4 }"lrts::RefalFunction **functions;"/21 )/23 (/24"  const refalrts::RefalIdentifier *identifiers;"/25 )/27 (/28"  refalrts::load_constants(arg_begin, &functions, &identifiers);"/29 )/31 Tile{ ]] }
      refalrts::alloc_char(vm, context[20], 'e');
      refalrts::alloc_chars(vm, context[21], context[22], "lrts::RefalFunction **functions;", 32);
      refalrts::alloc_close_bracket(vm, context[23]);
      refalrts::alloc_open_bracket(vm, context[24]);
      refalrts::alloc_chars(vm, context[25], context[26], "  const refalrts::RefalIdentifier *identifiers;", 47);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "  refalrts::load_constants(arg_begin, &functions, &identifiers);", 64);
      refalrts::alloc_close_bracket(vm, context[31]);
      refalrts::reinit_char(context[15], ' ');
      refalrts::reinit_char(context[14], ' ');
      refalrts::reinit_char(context[1], 'r');
      refalrts::reinit_char(context[0], 'f');
      refalrts::reinit_char(context[4], 'a');
      refalrts::link_brackets( context[28], context[31] );
      refalrts::link_brackets( context[24], context[27] );
      refalrts::link_brackets( context[13], context[23] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[21], context[31] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[9], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.Indent/16 )/10 (/13 # CmdIssueMemory/15 s.Number/20 )/14 >/1
      context[16] = context[7];
      context[17] = context[8];
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_CmdIssueMemory], context[15] ) )
        continue;
      // closed e.Indent as range 16
      if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
        continue;
      if( ! refalrts::empty_seq( context[18], context[19] ) )
        continue;
      //DEBUG: e.Indent: 16
      //DEBUG: s.Number: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/16 AsIs: )/10 AsIs: (/13 } e.Indent/16/21"// issue here memory for vars with "/23 </25 Tile{ HalfReuse: & Symb/15 AsIs: s.Number/20 HalfReuse: >/14 HalfReuse: ' '/1 }"elems"/26 )/28 (/29 e.Indent/16/30"refalrts::Iter context["/32 Tile{ AsIs: </0 Reuse: & Symb/4 } s.Number/20/34 >/35"];"/36 )/38 (/39 e.Indent/16/40"refalrts::zeros( context, "/42 </44 & Symb/45 s.Number/20/46 >/47" );"/48 )/50 Tile{ ]] }
      refalrts::copy_evar(vm, context[21], context[22], context[16], context[17]);
      refalrts::alloc_chars(vm, context[23], context[24], "// issue here memory for vars with ", 35);
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_chars(vm, context[26], context[27], "elems", 5);
      refalrts::alloc_close_bracket(vm, context[28]);
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::copy_evar(vm, context[30], context[31], context[16], context[17]);
      refalrts::alloc_chars(vm, context[32], context[33], "refalrts::Iter context[", 23);
      refalrts::copy_stvar(vm, context[34], context[20]);
      refalrts::alloc_close_call(vm, context[35]);
      refalrts::alloc_chars(vm, context[36], context[37], "];", 2);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::copy_evar(vm, context[40], context[41], context[16], context[17]);
      refalrts::alloc_chars(vm, context[42], context[43], "refalrts::zeros( context, ", 26);
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_Symb]);
      refalrts::copy_stvar(vm, context[46], context[20]);
      refalrts::alloc_close_call(vm, context[47]);
      refalrts::alloc_chars(vm, context[48], context[49], " );", 3);
      refalrts::alloc_close_bracket(vm, context[50]);
      refalrts::reinit_name(context[15], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ' ');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::link_brackets( context[39], context[50] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[44] );
      refalrts::link_brackets( context[29], context[38] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[28] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[25] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[34], context[50] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[26], context[33] );
      res = refalrts::splice_evar( res, context[15], context[1] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.new4/16 )/10 (/13 s.new5/15 )/14 >/1
      context[16] = context[7];
      context[17] = context[8];
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      // closed e.new4 as range 16
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/18 )/10 (/13 # CmdStartSentence/15 )/14 >/1
        context[18] = context[16];
        context[19] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_CmdStartSentence], context[15] ) )
          continue;
        // closed e.Indent as range 18
        //DEBUG: e.Indent: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/20 e.Indent/18/21 ' '/23 Tile{ HalfReuse: ' '/0 HalfReuse: )/4 AsIs: (/9 AsIs: e.Indent/18 HalfReuse: 'd'/10 HalfReuse: 'o'/13 HalfReuse: ' '/15 HalfReuse: '{'/14 HalfReuse: )/1 ]] }
        refalrts::alloc_open_bracket(vm, context[20]);
        refalrts::copy_evar(vm, context[21], context[22], context[18], context[19]);
        refalrts::alloc_char(vm, context[23], ' ');
        refalrts::reinit_char(context[0], ' ');
        refalrts::reinit_close_bracket(context[4]);
        refalrts::reinit_char(context[10], 'd');
        refalrts::reinit_char(context[13], 'o');
        refalrts::reinit_char(context[15], ' ');
        refalrts::reinit_char(context[14], '{');
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[9], context[1] );
        refalrts::link_brackets( context[20], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[0];
        res = refalrts::splice_evar( res, context[20], context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/18 ' '/21 ' '/20 )/10 (/13 # CmdEndSentence/15 )/14 >/1
        context[18] = context[16];
        context[19] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_CmdEndSentence], context[15] ) )
          continue;
        context[20] = refalrts::char_right( ' ', context[18], context[19] );
        if( ! context[20] )
          continue;
        context[21] = refalrts::char_right( ' ', context[18], context[19] );
        if( ! context[21] )
          continue;
        // closed e.Indent as range 18
        //DEBUG: e.Indent: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 } e.Indent/18/22 Tile{ HalfReuse: )/4 AsIs: (/9 AsIs: e.Indent/18 Reuse: '}'/21 AsIs: ' '/20 HalfReuse: 'w'/10 HalfReuse: 'h'/13 HalfReuse: 'i'/15 HalfReuse: 'l'/14 HalfReuse: 'e'/1 }" ( 0 );"/24 )/26 (/27 e.Indent/18/28"refalrts::stop_sentence(vm);"/30 )/32 (/33 )/34 Tile{ ]] }
        refalrts::copy_evar(vm, context[22], context[23], context[18], context[19]);
        refalrts::alloc_chars(vm, context[24], context[25], " ( 0 );", 7);
        refalrts::alloc_close_bracket(vm, context[26]);
        refalrts::alloc_open_bracket(vm, context[27]);
        refalrts::copy_evar(vm, context[28], context[29], context[18], context[19]);
        refalrts::alloc_chars(vm, context[30], context[31], "refalrts::stop_sentence(vm);", 28);
        refalrts::alloc_close_bracket(vm, context[32]);
        refalrts::alloc_open_bracket(vm, context[33]);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_close_bracket(context[4]);
        refalrts::update_char(context[21], '}');
        refalrts::reinit_char(context[10], 'w');
        refalrts::reinit_char(context[13], 'h');
        refalrts::reinit_char(context[15], 'i');
        refalrts::reinit_char(context[14], 'l');
        refalrts::reinit_char(context[1], 'e');
        refalrts::link_brackets( context[33], context[34] );
        refalrts::link_brackets( context[27], context[32] );
        refalrts::link_brackets( context[9], context[26] );
        refalrts::link_brackets( context[0], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[24], context[34] );
        res = refalrts::splice_evar( res, context[4], context[1] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/18 )/10 (/13 # CmdInitB0/15 )/14 >/1
        context[18] = context[16];
        context[19] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_CmdInitB0], context[15] ) )
          continue;
        // closed e.Indent as range 18
        //DEBUG: e.Indent: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/20 e.Indent/18/21 )/23 (/24 e.Indent/18/25"context[0] = arg_begin"/27 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/9 AsIs: e.Indent/18 HalfReuse: 'c'/10 HalfReuse: 'o'/13 HalfReuse: 'n'/15 HalfReuse: 't'/14 HalfReuse: 'e'/1 }"xt[1] = arg_end;"/29 )/31 (/32 e.Indent/18/33"refalrts::move_left( context[0], context[1] );"/35 )/37 (/38 e.Indent/18/39"refalrts::move_left( context[0], context[1] );"/41 )/43 (/44 e.Indent/18/45"refalrts::move_right( context[0], context[1] );"/47 )/49 Tile{ ]] }
        refalrts::alloc_open_bracket(vm, context[20]);
        refalrts::copy_evar(vm, context[21], context[22], context[18], context[19]);
        refalrts::alloc_close_bracket(vm, context[23]);
        refalrts::alloc_open_bracket(vm, context[24]);
        refalrts::copy_evar(vm, context[25], context[26], context[18], context[19]);
        refalrts::alloc_chars(vm, context[27], context[28], "context[0] = arg_begin", 22);
        refalrts::alloc_chars(vm, context[29], context[30], "xt[1] = arg_end;", 16);
        refalrts::alloc_close_bracket(vm, context[31]);
        refalrts::alloc_open_bracket(vm, context[32]);
        refalrts::copy_evar(vm, context[33], context[34], context[18], context[19]);
        refalrts::alloc_chars(vm, context[35], context[36], "refalrts::move_left( context[0], context[1] );", 46);
        refalrts::alloc_close_bracket(vm, context[37]);
        refalrts::alloc_open_bracket(vm, context[38]);
        refalrts::copy_evar(vm, context[39], context[40], context[18], context[19]);
        refalrts::alloc_chars(vm, context[41], context[42], "refalrts::move_left( context[0], context[1] );", 46);
        refalrts::alloc_close_bracket(vm, context[43]);
        refalrts::alloc_open_bracket(vm, context[44]);
        refalrts::copy_evar(vm, context[45], context[46], context[18], context[19]);
        refalrts::alloc_chars(vm, context[47], context[48], "refalrts::move_right( context[0], context[1] );", 47);
        refalrts::alloc_close_bracket(vm, context[49]);
        refalrts::reinit_char(context[0], ';');
        refalrts::reinit_close_bracket(context[4]);
        refalrts::reinit_char(context[10], 'c');
        refalrts::reinit_char(context[13], 'o');
        refalrts::reinit_char(context[15], 'n');
        refalrts::reinit_char(context[14], 't');
        refalrts::reinit_char(context[1], 'e');
        refalrts::link_brackets( context[44], context[49] );
        refalrts::link_brackets( context[38], context[43] );
        refalrts::link_brackets( context[32], context[37] );
        refalrts::link_brackets( context[9], context[31] );
        refalrts::link_brackets( context[24], context[4] );
        refalrts::link_brackets( context[20], context[23] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[29], context[49] );
        res = refalrts::splice_evar( res, context[0], context[1] );
        res = refalrts::splice_evar( res, context[20], context[28] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/18 )/10 (/13 # CmdInitB0-Lite/15 )/14 >/1
      context[18] = context[16];
      context[19] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_CmdInitB0m_Lite], context[15] ) )
        continue;
      // closed e.Indent as range 18
      //DEBUG: e.Indent: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/20 e.Indent/18/21 )/23 (/24 e.Indent/18/25"context[0] = arg_begin"/27 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/9 AsIs: e.Indent/18 HalfReuse: 'c'/10 HalfReuse: 'o'/13 HalfReuse: 'n'/15 HalfReuse: 't'/14 HalfReuse: 'e'/1 }"xt[1] = arg_end;"/29 )/31 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::copy_evar(vm, context[21], context[22], context[18], context[19]);
      refalrts::alloc_close_bracket(vm, context[23]);
      refalrts::alloc_open_bracket(vm, context[24]);
      refalrts::copy_evar(vm, context[25], context[26], context[18], context[19]);
      refalrts::alloc_chars(vm, context[27], context[28], "context[0] = arg_begin", 22);
      refalrts::alloc_chars(vm, context[29], context[30], "xt[1] = arg_end;", 16);
      refalrts::alloc_close_bracket(vm, context[31]);
      refalrts::reinit_char(context[0], ';');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[10], 'c');
      refalrts::reinit_char(context[13], 'o');
      refalrts::reinit_char(context[15], 'n');
      refalrts::reinit_char(context[14], 't');
      refalrts::reinit_char(context[1], 'e');
      refalrts::link_brackets( context[9], context[31] );
      refalrts::link_brackets( context[24], context[4] );
      refalrts::link_brackets( context[20], context[23] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[29], context[31] );
      res = refalrts::splice_evar( res, context[0], context[1] );
      res = refalrts::splice_evar( res, context[20], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Native/4 (/9 e.new4/16 )/10 (/13 s.new5/15 s.new6/20 s.new7/21 e.new8/18 )/14 >/1
    context[16] = context[7];
    context[17] = context[8];
    context[18] = context[11];
    context[19] = context[12];
    // closed e.new4 as range 16
    if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
      continue;
    if( ! refalrts::svar_left( context[21], context[18], context[19] ) )
      continue;
    // closed e.new8 as range 18
    do {
      // </0 & GenCommand-Native/4 (/9 e.new9/22 )/10 (/13 s.new10/15 s.new11/20 s.new12/21 s.new13/26 e.new14/24 )/14 >/1
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      // closed e.new9 as range 22
      if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
        continue;
      // closed e.new14 as range 24
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdChar/15 s.Direction/20 s.BracketNumber/21 s.Char/26 )/14 >/1
        context[27] = context[22];
        context[28] = context[23];
        if( ! refalrts::ident_term( identifiers[ident_CmdChar], context[15] ) )
          continue;
        if( ! refalrts::empty_seq( context[24], context[25] ) )
          continue;
        // closed e.Indent as range 27
        //DEBUG: s.Direction: 20
        //DEBUG: s.BracketNumber: 21
        //DEBUG: s.Char: 26
        //DEBUG: e.Indent: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Direction/20 s.BracketNumber/21 {REMOVED TILE}
        //RESULT: Tile{ [[ } (/29 e.Indent/27/30 )/32 Tile{ AsIs: </0 Reuse: & PrintMatch@1/4 AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 HalfReuse: s.Direction20 /13 HalfReuse: s.BracketNumber21 /15 } </33 & EscapeChar/34 Tile{ AsIs: s.Char/26 HalfReuse: >/14 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[29]);
        refalrts::copy_evar(vm, context[30], context[31], context[27], context[28]);
        refalrts::alloc_close_bracket(vm, context[32]);
        refalrts::alloc_open_call(vm, context[33]);
        refalrts::alloc_name(vm, context[34], functions[efunc_EscapeChar]);
        refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z1]);
        refalrts::reinit_svar( context[13], context[20] );
        refalrts::reinit_svar( context[15], context[21] );
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[33] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::link_brackets( context[29], context[32] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[26];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[0], context[15] );
        res = refalrts::splice_evar( res, context[29], context[32] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCharSave/15 s.Direction/20 s.BracketNumber/21 s.Offset/26 s.Char/31 )/14 >/1
        context[27] = context[22];
        context[28] = context[23];
        context[29] = context[24];
        context[30] = context[25];
        if( ! refalrts::ident_term( identifiers[ident_CmdCharSave], context[15] ) )
          continue;
        // closed e.Indent as range 27
        if( ! refalrts::svar_left( context[31], context[29], context[30] ) )
          continue;
        if( ! refalrts::empty_seq( context[29], context[30] ) )
          continue;
        //DEBUG: s.Direction: 20
        //DEBUG: s.BracketNumber: 21
        //DEBUG: s.Offset: 26
        //DEBUG: e.Indent: 27
        //DEBUG: s.Char: 31

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Direction/20 {REMOVED TILE} s.Offset/26 {REMOVED TILE}
        //RESULT: Tile{ [[ } (/32 e.Indent/27/33 )/35 Tile{ AsIs: </0 Reuse: & PrintMatchSave@1/4 AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 HalfReuse: s.Offset26 /13 HalfReuse: s.Direction20 /15 } Tile{ AsIs: s.BracketNumber/21 } </36 & EscapeChar/37 Tile{ AsIs: s.Char/31 HalfReuse: >/14 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[32]);
        refalrts::copy_evar(vm, context[33], context[34], context[27], context[28]);
        refalrts::alloc_close_bracket(vm, context[35]);
        refalrts::alloc_open_call(vm, context[36]);
        refalrts::alloc_name(vm, context[37], functions[efunc_EscapeChar]);
        refalrts::update_name(context[4], functions[efunc_gen_PrintMatchSave_Z1]);
        refalrts::reinit_svar( context[13], context[26] );
        refalrts::reinit_svar( context[15], context[20] );
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[36] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::link_brackets( context[32], context[35] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[31];
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_evar( res, context[0], context[15] );
        res = refalrts::splice_evar( res, context[32], context[35] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdNumber/15 s.Direction/20 s.BracketNumber/21 s.Number/26 )/14 >/1
        context[27] = context[22];
        context[28] = context[23];
        if( ! refalrts::ident_term( identifiers[ident_CmdNumber], context[15] ) )
          continue;
        if( ! refalrts::empty_seq( context[24], context[25] ) )
          continue;
        // closed e.Indent as range 27
        //DEBUG: s.Direction: 20
        //DEBUG: s.BracketNumber: 21
        //DEBUG: s.Number: 26
        //DEBUG: e.Indent: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Direction/20 s.BracketNumber/21 {REMOVED TILE}
        //RESULT: Tile{ [[ } (/29 e.Indent/27/30 )/32 Tile{ AsIs: </0 Reuse: & PrintMatch@2/4 AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 HalfReuse: s.Direction20 /13 HalfReuse: s.BracketNumber21 /15 } </33 & Symb/34 Tile{ AsIs: s.Number/26 HalfReuse: >/14 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[29]);
        refalrts::copy_evar(vm, context[30], context[31], context[27], context[28]);
        refalrts::alloc_close_bracket(vm, context[32]);
        refalrts::alloc_open_call(vm, context[33]);
        refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z2]);
        refalrts::reinit_svar( context[13], context[20] );
        refalrts::reinit_svar( context[15], context[21] );
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[33] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::link_brackets( context[29], context[32] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[26];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[0], context[15] );
        res = refalrts::splice_evar( res, context[29], context[32] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdNumberSave/15 s.Direction/20 s.BracketNumber/21 s.Offset/26 s.Number/31 )/14 >/1
        context[27] = context[22];
        context[28] = context[23];
        context[29] = context[24];
        context[30] = context[25];
        if( ! refalrts::ident_term( identifiers[ident_CmdNumberSave], context[15] ) )
          continue;
        // closed e.Indent as range 27
        if( ! refalrts::svar_left( context[31], context[29], context[30] ) )
          continue;
        if( ! refalrts::empty_seq( context[29], context[30] ) )
          continue;
        //DEBUG: s.Direction: 20
        //DEBUG: s.BracketNumber: 21
        //DEBUG: s.Offset: 26
        //DEBUG: e.Indent: 27
        //DEBUG: s.Number: 31

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Direction/20 {REMOVED TILE} s.Offset/26 {REMOVED TILE}
        //RESULT: Tile{ [[ } (/32 e.Indent/27/33 )/35 Tile{ AsIs: </0 Reuse: & PrintMatchSave@2/4 AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 HalfReuse: s.Offset26 /13 HalfReuse: s.Direction20 /15 } Tile{ AsIs: s.BracketNumber/21 } </36 & Symb/37 Tile{ AsIs: s.Number/31 HalfReuse: >/14 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[32]);
        refalrts::copy_evar(vm, context[33], context[34], context[27], context[28]);
        refalrts::alloc_close_bracket(vm, context[35]);
        refalrts::alloc_open_call(vm, context[36]);
        refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_PrintMatchSave_Z2]);
        refalrts::reinit_svar( context[13], context[26] );
        refalrts::reinit_svar( context[15], context[20] );
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[36] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::link_brackets( context[32], context[35] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[31];
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_evar( res, context[0], context[15] );
        res = refalrts::splice_evar( res, context[32], context[35] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdName/15 s.Direction/20 s.BracketNumber/21 s.Num/26 e.Name/29 )/14 >/1
        context[27] = context[22];
        context[28] = context[23];
        context[29] = context[24];
        context[30] = context[25];
        if( ! refalrts::ident_term( identifiers[ident_CmdName], context[15] ) )
          continue;
        // closed e.Indent as range 27
        // closed e.Name as range 29
        //DEBUG: s.Direction: 20
        //DEBUG: s.BracketNumber: 21
        //DEBUG: s.Num: 26
        //DEBUG: e.Indent: 27
        //DEBUG: e.Name: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Direction/20 s.BracketNumber/21 s.Num/26 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/31 e.Indent/27/32 )/34 Tile{ AsIs: </0 Reuse: & PrintMatch@3/4 AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 HalfReuse: s.Direction20 /13 HalfReuse: s.BracketNumber21 /15 } </35 & CName/36 Tile{ AsIs: e.Name/29 } Tile{ HalfReuse: >/14 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[31]);
        refalrts::copy_evar(vm, context[32], context[33], context[27], context[28]);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[36], functions[efunc_CName]);
        refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z3]);
        refalrts::reinit_svar( context[13], context[20] );
        refalrts::reinit_svar( context[15], context[21] );
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::link_brackets( context[31], context[34] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[0], context[15] );
        res = refalrts::splice_evar( res, context[31], context[34] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdNameSave/15 s.Direction/20 s.BracketNumber/21 s.Offset/26 s.Num/31 e.Name/29 )/14 >/1
        context[27] = context[22];
        context[28] = context[23];
        context[29] = context[24];
        context[30] = context[25];
        if( ! refalrts::ident_term( identifiers[ident_CmdNameSave], context[15] ) )
          continue;
        // closed e.Indent as range 27
        if( ! refalrts::svar_left( context[31], context[29], context[30] ) )
          continue;
        // closed e.Name as range 29
        //DEBUG: s.Direction: 20
        //DEBUG: s.BracketNumber: 21
        //DEBUG: s.Offset: 26
        //DEBUG: e.Indent: 27
        //DEBUG: s.Num: 31
        //DEBUG: e.Name: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Direction/20 {REMOVED TILE} s.Offset/26 s.Num/31 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/32 e.Indent/27/33 )/35 Tile{ AsIs: </0 Reuse: & PrintMatchSave@3/4 AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 HalfReuse: s.Offset26 /13 HalfReuse: s.Direction20 /15 } Tile{ AsIs: s.BracketNumber/21 } </36 & CName/37 Tile{ AsIs: e.Name/29 } Tile{ HalfReuse: >/14 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[32]);
        refalrts::copy_evar(vm, context[33], context[34], context[27], context[28]);
        refalrts::alloc_close_bracket(vm, context[35]);
        refalrts::alloc_open_call(vm, context[36]);
        refalrts::alloc_name(vm, context[37], functions[efunc_CName]);
        refalrts::update_name(context[4], functions[efunc_gen_PrintMatchSave_Z3]);
        refalrts::reinit_svar( context[13], context[26] );
        refalrts::reinit_svar( context[15], context[20] );
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[36] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::link_brackets( context[32], context[35] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_evar( res, context[0], context[15] );
        res = refalrts::splice_evar( res, context[32], context[35] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdIdent/15 s.Direction/20 s.BracketNumber/21 s.Num/26 e.Name/29 )/14 >/1
        context[27] = context[22];
        context[28] = context[23];
        context[29] = context[24];
        context[30] = context[25];
        if( ! refalrts::ident_term( identifiers[ident_CmdIdent], context[15] ) )
          continue;
        // closed e.Indent as range 27
        // closed e.Name as range 29
        //DEBUG: s.Direction: 20
        //DEBUG: s.BracketNumber: 21
        //DEBUG: s.Num: 26
        //DEBUG: e.Indent: 27
        //DEBUG: e.Name: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Direction/20 s.BracketNumber/21 s.Num/26 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/31 e.Indent/27/32 )/34 Tile{ AsIs: </0 Reuse: & PrintMatch@4/4 AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 HalfReuse: s.Direction20 /13 HalfReuse: s.BracketNumber21 /15 } </35 & CName/36 Tile{ AsIs: e.Name/29 } Tile{ HalfReuse: >/14 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[31]);
        refalrts::copy_evar(vm, context[32], context[33], context[27], context[28]);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[36], functions[efunc_CName]);
        refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z4]);
        refalrts::reinit_svar( context[13], context[20] );
        refalrts::reinit_svar( context[15], context[21] );
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::link_brackets( context[31], context[34] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[0], context[15] );
        res = refalrts::splice_evar( res, context[31], context[34] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdIdentSave/15 s.Direction/20 s.BracketNumber/21 s.Offset/26 s.Num/31 e.Name/29 )/14 >/1
        context[27] = context[22];
        context[28] = context[23];
        context[29] = context[24];
        context[30] = context[25];
        if( ! refalrts::ident_term( identifiers[ident_CmdIdentSave], context[15] ) )
          continue;
        // closed e.Indent as range 27
        if( ! refalrts::svar_left( context[31], context[29], context[30] ) )
          continue;
        // closed e.Name as range 29
        //DEBUG: s.Direction: 20
        //DEBUG: s.BracketNumber: 21
        //DEBUG: s.Offset: 26
        //DEBUG: e.Indent: 27
        //DEBUG: s.Num: 31
        //DEBUG: e.Name: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Direction/20 {REMOVED TILE} s.Offset/26 s.Num/31 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/32 e.Indent/27/33 )/35 Tile{ AsIs: </0 Reuse: & PrintMatchSave@4/4 AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 HalfReuse: s.Offset26 /13 HalfReuse: s.Direction20 /15 } Tile{ AsIs: s.BracketNumber/21 } </36 & CName/37 Tile{ AsIs: e.Name/29 } Tile{ HalfReuse: >/14 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[32]);
        refalrts::copy_evar(vm, context[33], context[34], context[27], context[28]);
        refalrts::alloc_close_bracket(vm, context[35]);
        refalrts::alloc_open_call(vm, context[36]);
        refalrts::alloc_name(vm, context[37], functions[efunc_CName]);
        refalrts::update_name(context[4], functions[efunc_gen_PrintMatchSave_Z4]);
        refalrts::reinit_svar( context[13], context[26] );
        refalrts::reinit_svar( context[15], context[20] );
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[36] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::link_brackets( context[32], context[35] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_evar( res, context[0], context[15] );
        res = refalrts::splice_evar( res, context[32], context[35] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new15/27 )/10 (/13 s.new16/15 s.new17/20 s.new18/21 s.new19/26 )/14 >/1
        context[27] = context[22];
        context[28] = context[23];
        if( ! refalrts::empty_seq( context[24], context[25] ) )
          continue;
        // closed e.new15 as range 27
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/29 )/10 (/13 # CmdBrackets/15 s.Direction/20 s.BracketNumber/21 s.InnerBrackets/26 )/14 >/1
          context[29] = context[27];
          context[30] = context[28];
          if( ! refalrts::ident_term( identifiers[ident_CmdBrackets], context[15] ) )
            continue;
          // closed e.Indent as range 29
          //DEBUG: s.Direction: 20
          //DEBUG: s.BracketNumber: 21
          //DEBUG: s.InnerBrackets: 26
          //DEBUG: e.Indent: 29

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Direction/20 s.BracketNumber/21 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } (/31 e.Indent/29/32 )/34 (/35 e.Indent/29/36"context["/38 </40 & Symb/41 s.InnerBrackets/26/42 >/43"] = 0;"/44 )/46 (/47 e.Indent/29/48"context["/50 </52 & Symb/53 </54 & Add/55 1/56 Tile{ AsIs: s.InnerBrackets/26 HalfReuse: >/14 AsIs: >/1 }"] = 0;"/57 )/59 Tile{ AsIs: </0 Reuse: & PrintMatch@5/4 AsIs: (/9 AsIs: e.Indent/29 AsIs: )/10 HalfReuse: s.Direction20 /13 HalfReuse: s.BracketNumber21 /15 } (/60 </61 & Symb/62 s.InnerBrackets/26/63 >/64 )/65 </66 & Symb/67 </68 & Add/69 1/70 s.InnerBrackets/26/71 >/72 >/73 >/74 Tile{ ]] }
          refalrts::alloc_open_bracket(vm, context[31]);
          refalrts::copy_evar(vm, context[32], context[33], context[29], context[30]);
          refalrts::alloc_close_bracket(vm, context[34]);
          refalrts::alloc_open_bracket(vm, context[35]);
          refalrts::copy_evar(vm, context[36], context[37], context[29], context[30]);
          refalrts::alloc_chars(vm, context[38], context[39], "context[", 8);
          refalrts::alloc_open_call(vm, context[40]);
          refalrts::alloc_name(vm, context[41], functions[efunc_Symb]);
          refalrts::copy_stvar(vm, context[42], context[26]);
          refalrts::alloc_close_call(vm, context[43]);
          refalrts::alloc_chars(vm, context[44], context[45], "] = 0;", 6);
          refalrts::alloc_close_bracket(vm, context[46]);
          refalrts::alloc_open_bracket(vm, context[47]);
          refalrts::copy_evar(vm, context[48], context[49], context[29], context[30]);
          refalrts::alloc_chars(vm, context[50], context[51], "context[", 8);
          refalrts::alloc_open_call(vm, context[52]);
          refalrts::alloc_name(vm, context[53], functions[efunc_Symb]);
          refalrts::alloc_open_call(vm, context[54]);
          refalrts::alloc_name(vm, context[55], functions[efunc_Add]);
          refalrts::alloc_number(vm, context[56], 1UL);
          refalrts::alloc_chars(vm, context[57], context[58], "] = 0;", 6);
          refalrts::alloc_close_bracket(vm, context[59]);
          refalrts::alloc_open_bracket(vm, context[60]);
          refalrts::alloc_open_call(vm, context[61]);
          refalrts::alloc_name(vm, context[62], functions[efunc_Symb]);
          refalrts::copy_stvar(vm, context[63], context[26]);
          refalrts::alloc_close_call(vm, context[64]);
          refalrts::alloc_close_bracket(vm, context[65]);
          refalrts::alloc_open_call(vm, context[66]);
          refalrts::alloc_name(vm, context[67], functions[efunc_Symb]);
          refalrts::alloc_open_call(vm, context[68]);
          refalrts::alloc_name(vm, context[69], functions[efunc_Add]);
          refalrts::alloc_number(vm, context[70], 1UL);
          refalrts::copy_stvar(vm, context[71], context[26]);
          refalrts::alloc_close_call(vm, context[72]);
          refalrts::alloc_close_call(vm, context[73]);
          refalrts::alloc_close_call(vm, context[74]);
          refalrts::reinit_close_call(context[14]);
          refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z5]);
          refalrts::reinit_svar( context[13], context[20] );
          refalrts::reinit_svar( context[15], context[21] );
          refalrts::push_stack( vm, context[74] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[73] );
          refalrts::push_stack( vm, context[66] );
          refalrts::push_stack( vm, context[72] );
          refalrts::push_stack( vm, context[68] );
          refalrts::link_brackets( context[60], context[65] );
          refalrts::push_stack( vm, context[64] );
          refalrts::push_stack( vm, context[61] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::link_brackets( context[47], context[59] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[52] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[54] );
          refalrts::link_brackets( context[35], context[46] );
          refalrts::push_stack( vm, context[43] );
          refalrts::push_stack( vm, context[40] );
          refalrts::link_brackets( context[31], context[34] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[60], context[74] );
          res = refalrts::splice_evar( res, context[0], context[15] );
          res = refalrts::splice_evar( res, context[57], context[59] );
          res = refalrts::splice_evar( res, context[26], context[1] );
          res = refalrts::splice_evar( res, context[31], context[56] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/29 )/10 (/13 # CmdBracketsSave/15 s.Direction/20 s.BracketNumber/21 s.InnerBrackets/26 )/14 >/1
        context[29] = context[27];
        context[30] = context[28];
        if( ! refalrts::ident_term( identifiers[ident_CmdBracketsSave], context[15] ) )
          continue;
        // closed e.Indent as range 29
        //DEBUG: s.Direction: 20
        //DEBUG: s.BracketNumber: 21
        //DEBUG: s.InnerBrackets: 26
        //DEBUG: e.Indent: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/31 e.Indent/29/32 )/34 (/35 e.Indent/29/36"context["/38 </40 & Symb/41 s.InnerBrackets/26/42 >/43"] = 0;"/44 )/46 (/47 e.Indent/29/48"context["/50 </52 & Symb/53 </54 & Add/55 1/56 Tile{ AsIs: s.InnerBrackets/26 HalfReuse: >/14 AsIs: >/1 }"] = 0;"/57 )/59 Tile{ AsIs: </0 Reuse: & PrintMatchSave/4 AsIs: (/9 AsIs: e.Indent/29 AsIs: )/10 HalfReuse: </13 HalfReuse: & Add/15 } 2/60 s.InnerBrackets/26/61 >/62 Tile{ AsIs: s.Direction/20 AsIs: s.BracketNumber/21 } (/63"brackets"/64 )/66"context["/67 </69 & Symb/70 s.InnerBrackets/26/71 >/72"], context["/73 </75 & Symb/76 </77 & Add/78 1/79 s.InnerBrackets/26/80 >/81 >/82 ']'/83 >/84 (/85 e.Indent/29/86"refalrts::bracket_pointers("/88 </90 & ContextItem/91 </92 & Add/93 s.InnerBrackets/26/94 2/95 >/96 >/97", "/98 </100 & ContextItem/101 </102 & Add/103 s.InnerBrackets/26/104 3/105 >/106 >/107");"/108 )/110 Tile{ ]] }
        refalrts::alloc_open_bracket(vm, context[31]);
        refalrts::copy_evar(vm, context[32], context[33], context[29], context[30]);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::alloc_open_bracket(vm, context[35]);
        refalrts::copy_evar(vm, context[36], context[37], context[29], context[30]);
        refalrts::alloc_chars(vm, context[38], context[39], "context[", 8);
        refalrts::alloc_open_call(vm, context[40]);
        refalrts::alloc_name(vm, context[41], functions[efunc_Symb]);
        refalrts::copy_stvar(vm, context[42], context[26]);
        refalrts::alloc_close_call(vm, context[43]);
        refalrts::alloc_chars(vm, context[44], context[45], "] = 0;", 6);
        refalrts::alloc_close_bracket(vm, context[46]);
        refalrts::alloc_open_bracket(vm, context[47]);
        refalrts::copy_evar(vm, context[48], context[49], context[29], context[30]);
        refalrts::alloc_chars(vm, context[50], context[51], "context[", 8);
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_name(vm, context[53], functions[efunc_Symb]);
        refalrts::alloc_open_call(vm, context[54]);
        refalrts::alloc_name(vm, context[55], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[56], 1UL);
        refalrts::alloc_chars(vm, context[57], context[58], "] = 0;", 6);
        refalrts::alloc_close_bracket(vm, context[59]);
        refalrts::alloc_number(vm, context[60], 2UL);
        refalrts::copy_stvar(vm, context[61], context[26]);
        refalrts::alloc_close_call(vm, context[62]);
        refalrts::alloc_open_bracket(vm, context[63]);
        refalrts::alloc_chars(vm, context[64], context[65], "brackets", 8);
        refalrts::alloc_close_bracket(vm, context[66]);
        refalrts::alloc_chars(vm, context[67], context[68], "context[", 8);
        refalrts::alloc_open_call(vm, context[69]);
        refalrts::alloc_name(vm, context[70], functions[efunc_Symb]);
        refalrts::copy_stvar(vm, context[71], context[26]);
        refalrts::alloc_close_call(vm, context[72]);
        refalrts::alloc_chars(vm, context[73], context[74], "], context[", 11);
        refalrts::alloc_open_call(vm, context[75]);
        refalrts::alloc_name(vm, context[76], functions[efunc_Symb]);
        refalrts::alloc_open_call(vm, context[77]);
        refalrts::alloc_name(vm, context[78], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[79], 1UL);
        refalrts::copy_stvar(vm, context[80], context[26]);
        refalrts::alloc_close_call(vm, context[81]);
        refalrts::alloc_close_call(vm, context[82]);
        refalrts::alloc_char(vm, context[83], ']');
        refalrts::alloc_close_call(vm, context[84]);
        refalrts::alloc_open_bracket(vm, context[85]);
        refalrts::copy_evar(vm, context[86], context[87], context[29], context[30]);
        refalrts::alloc_chars(vm, context[88], context[89], "refalrts::bracket_pointers(", 27);
        refalrts::alloc_open_call(vm, context[90]);
        refalrts::alloc_name(vm, context[91], functions[efunc_ContextItem]);
        refalrts::alloc_open_call(vm, context[92]);
        refalrts::alloc_name(vm, context[93], functions[efunc_Add]);
        refalrts::copy_stvar(vm, context[94], context[26]);
        refalrts::alloc_number(vm, context[95], 2UL);
        refalrts::alloc_close_call(vm, context[96]);
        refalrts::alloc_close_call(vm, context[97]);
        refalrts::alloc_chars(vm, context[98], context[99], ", ", 2);
        refalrts::alloc_open_call(vm, context[100]);
        refalrts::alloc_name(vm, context[101], functions[efunc_ContextItem]);
        refalrts::alloc_open_call(vm, context[102]);
        refalrts::alloc_name(vm, context[103], functions[efunc_Add]);
        refalrts::copy_stvar(vm, context[104], context[26]);
        refalrts::alloc_number(vm, context[105], 3UL);
        refalrts::alloc_close_call(vm, context[106]);
        refalrts::alloc_close_call(vm, context[107]);
        refalrts::alloc_chars(vm, context[108], context[109], ");", 2);
        refalrts::alloc_close_bracket(vm, context[110]);
        refalrts::reinit_close_call(context[14]);
        refalrts::update_name(context[4], functions[efunc_PrintMatchSave]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[15], functions[efunc_Add]);
        refalrts::link_brackets( context[85], context[110] );
        refalrts::push_stack( vm, context[107] );
        refalrts::push_stack( vm, context[100] );
        refalrts::push_stack( vm, context[106] );
        refalrts::push_stack( vm, context[102] );
        refalrts::push_stack( vm, context[97] );
        refalrts::push_stack( vm, context[90] );
        refalrts::push_stack( vm, context[96] );
        refalrts::push_stack( vm, context[92] );
        refalrts::push_stack( vm, context[84] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[82] );
        refalrts::push_stack( vm, context[75] );
        refalrts::push_stack( vm, context[81] );
        refalrts::push_stack( vm, context[77] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[69] );
        refalrts::link_brackets( context[63], context[66] );
        refalrts::push_stack( vm, context[62] );
        refalrts::push_stack( vm, context[13] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::link_brackets( context[47], context[59] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[54] );
        refalrts::link_brackets( context[35], context[46] );
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[40] );
        refalrts::link_brackets( context[31], context[34] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[63], context[110] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        res = refalrts::splice_evar( res, context[60], context[62] );
        res = refalrts::splice_evar( res, context[0], context[15] );
        res = refalrts::splice_evar( res, context[57], context[59] );
        res = refalrts::splice_evar( res, context[26], context[1] );
        res = refalrts::splice_evar( res, context[31], context[56] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new15/27 )/10 (/13 s.new16/15 s.new17/20 s.new18/21 s.new19/26 s.new20/31 e.new21/29 )/14 >/1
        context[27] = context[22];
        context[28] = context[23];
        context[29] = context[24];
        context[30] = context[25];
        // closed e.new15 as range 27
        if( ! refalrts::svar_left( context[31], context[29], context[30] ) )
          continue;
        // closed e.new21 as range 29
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/32 )/10 (/13 # CmdADT/15 s.Direction/20 s.BracketNumber/21 s.InnerBrackets/26 s.Num/31 e.Name/34 )/14 >/1
          context[32] = context[27];
          context[33] = context[28];
          context[34] = context[29];
          context[35] = context[30];
          if( ! refalrts::ident_term( identifiers[ident_CmdADT], context[15] ) )
            continue;
          // closed e.Indent as range 32
          // closed e.Name as range 34
          //DEBUG: s.Direction: 20
          //DEBUG: s.BracketNumber: 21
          //DEBUG: s.InnerBrackets: 26
          //DEBUG: s.Num: 31
          //DEBUG: e.Indent: 32
          //DEBUG: e.Name: 34

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Direction/20 s.BracketNumber/21 {REMOVED TILE} s.Num/31 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } (/36 e.Indent/32/37 )/39 (/40 e.Indent/32/41"context["/43 </45 & Symb/46 Tile{ AsIs: s.InnerBrackets/26 } >/47"] = 0;"/48 )/50 (/51 e.Indent/32/52"context["/54 </56 & Symb/57 </58 & Add/59 1/60 s.InnerBrackets/26/61 >/62 >/63"] = 0;"/64 )/66 Tile{ AsIs: </0 Reuse: & PrintMatch@6/4 AsIs: (/9 AsIs: e.Indent/32 AsIs: )/10 HalfReuse: s.Direction20 /13 HalfReuse: s.BracketNumber21 /15 } (/67 </68 & Symb/69 s.InnerBrackets/26/70 >/71 )/72 (/73 </74 & Symb/75 </76 & Add/77 1/78 s.InnerBrackets/26/79 >/80 >/81 )/82 </83 & CName/84 Tile{ AsIs: e.Name/34 } Tile{ HalfReuse: >/14 AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[36]);
          refalrts::copy_evar(vm, context[37], context[38], context[32], context[33]);
          refalrts::alloc_close_bracket(vm, context[39]);
          refalrts::alloc_open_bracket(vm, context[40]);
          refalrts::copy_evar(vm, context[41], context[42], context[32], context[33]);
          refalrts::alloc_chars(vm, context[43], context[44], "context[", 8);
          refalrts::alloc_open_call(vm, context[45]);
          refalrts::alloc_name(vm, context[46], functions[efunc_Symb]);
          refalrts::alloc_close_call(vm, context[47]);
          refalrts::alloc_chars(vm, context[48], context[49], "] = 0;", 6);
          refalrts::alloc_close_bracket(vm, context[50]);
          refalrts::alloc_open_bracket(vm, context[51]);
          refalrts::copy_evar(vm, context[52], context[53], context[32], context[33]);
          refalrts::alloc_chars(vm, context[54], context[55], "context[", 8);
          refalrts::alloc_open_call(vm, context[56]);
          refalrts::alloc_name(vm, context[57], functions[efunc_Symb]);
          refalrts::alloc_open_call(vm, context[58]);
          refalrts::alloc_name(vm, context[59], functions[efunc_Add]);
          refalrts::alloc_number(vm, context[60], 1UL);
          refalrts::copy_stvar(vm, context[61], context[26]);
          refalrts::alloc_close_call(vm, context[62]);
          refalrts::alloc_close_call(vm, context[63]);
          refalrts::alloc_chars(vm, context[64], context[65], "] = 0;", 6);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_open_call(vm, context[68]);
          refalrts::alloc_name(vm, context[69], functions[efunc_Symb]);
          refalrts::copy_stvar(vm, context[70], context[26]);
          refalrts::alloc_close_call(vm, context[71]);
          refalrts::alloc_close_bracket(vm, context[72]);
          refalrts::alloc_open_bracket(vm, context[73]);
          refalrts::alloc_open_call(vm, context[74]);
          refalrts::alloc_name(vm, context[75], functions[efunc_Symb]);
          refalrts::alloc_open_call(vm, context[76]);
          refalrts::alloc_name(vm, context[77], functions[efunc_Add]);
          refalrts::alloc_number(vm, context[78], 1UL);
          refalrts::copy_stvar(vm, context[79], context[26]);
          refalrts::alloc_close_call(vm, context[80]);
          refalrts::alloc_close_call(vm, context[81]);
          refalrts::alloc_close_bracket(vm, context[82]);
          refalrts::alloc_open_call(vm, context[83]);
          refalrts::alloc_name(vm, context[84], functions[efunc_CName]);
          refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z6]);
          refalrts::reinit_svar( context[13], context[20] );
          refalrts::reinit_svar( context[15], context[21] );
          refalrts::reinit_close_call(context[14]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[83] );
          refalrts::link_brackets( context[73], context[82] );
          refalrts::push_stack( vm, context[81] );
          refalrts::push_stack( vm, context[74] );
          refalrts::push_stack( vm, context[80] );
          refalrts::push_stack( vm, context[76] );
          refalrts::link_brackets( context[67], context[72] );
          refalrts::push_stack( vm, context[71] );
          refalrts::push_stack( vm, context[68] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::link_brackets( context[51], context[66] );
          refalrts::push_stack( vm, context[63] );
          refalrts::push_stack( vm, context[56] );
          refalrts::push_stack( vm, context[62] );
          refalrts::push_stack( vm, context[58] );
          refalrts::link_brackets( context[40], context[50] );
          refalrts::push_stack( vm, context[47] );
          refalrts::push_stack( vm, context[45] );
          refalrts::link_brackets( context[36], context[39] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[67], context[84] );
          res = refalrts::splice_evar( res, context[0], context[15] );
          res = refalrts::splice_evar( res, context[47], context[66] );
          res = refalrts::splice_elem( res, context[26] );
          res = refalrts::splice_evar( res, context[36], context[46] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.new22/32 )/10 (/13 # CmdADTSave/15 s.new23/20 s.new24/21 s.new25/26 s.new26/31 e.new27/34 )/14 >/1
        context[32] = context[27];
        context[33] = context[28];
        context[34] = context[29];
        context[35] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_CmdADTSave], context[15] ) )
          continue;
        // closed e.new22 as range 32
        // closed e.new27 as range 34
        do {
          // </0 & GenCommand-Native/4 (/9 e.new28/36 )/10 (/13 # CmdADTSave/15 # AlgTerm/20 s.new29/21 s.new30/26 s.new31/31 e.new32/38 )/14 >/1
          context[36] = context[32];
          context[37] = context[33];
          context[38] = context[34];
          context[39] = context[35];
          if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[20] ) )
            continue;
          // closed e.new28 as range 36
          // closed e.new32 as range 38
          do {
            // </0 & GenCommand-Native/4 (/9 ' '/44 ' '/45 )/10 (/13 # CmdADTSave/15 # AlgTerm/20 s.BracketNumber/21 s.InnerBrackets/26 s.Num/31 e.Name/42 )/14 >/1
            context[40] = context[36];
            context[41] = context[37];
            context[42] = context[38];
            context[43] = context[39];
            context[44] = refalrts::char_left( ' ', context[40], context[41] );
            if( ! context[44] )
              continue;
            context[45] = refalrts::char_left( ' ', context[40], context[41] );
            if( ! context[45] )
              continue;
            if( ! refalrts::empty_seq( context[40], context[41] ) )
              continue;
            // closed e.Name as range 42
            //DEBUG: s.BracketNumber: 21
            //DEBUG: s.InnerBrackets: 26
            //DEBUG: s.Num: 31
            //DEBUG: e.Name: 42

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/31 {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: ' '/44 AsIs: ' '/45 AsIs: )/10 AsIs: (/13 HalfReuse: ' '/15 HalfReuse: ' '/20 }"context["/46 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.InnerBrackets/26 } >/48"] = 0;"/49 )/51 (/52"  context["/53 </55 & Symb/56 </57 & Add/58 1/59 s.InnerBrackets/26/60 >/61 >/62"] = 0;"/63 )/65 (/66"  "/67 </69 & ContextItem/70 </71 & Add/72 s.InnerBrackets/26/73 2/74 >/75 >/76" = refalrts::adt_term(context["/77 </79 & Symb/80 s.InnerBrackets/26/81 >/82"], context["/83 </85 & Symb/86 </87 & Add/88 1/89 s.InnerBrackets/26/90 >/91 >/92"], functions[efunc_"/93 </95 & CName/96 Tile{ AsIs: e.Name/42 } >/97"], context["/98 </100 & Symb/101 Tile{ AsIs: s.BracketNumber/21 } >/102"]);"/103 )/105 (/106"  if( ! "/107 </109 & ContextItem/110 </111 & Add/112 s.InnerBrackets/26/113 2/114 >/115 >/116" )"/117 )/119 (/120"    return refalrts::cRecognitionImpossible"/121 Tile{ HalfReuse: ';'/14 HalfReuse: )/1 ]] }
            refalrts::alloc_chars(vm, context[46], context[47], "context[", 8);
            refalrts::alloc_close_call(vm, context[48]);
            refalrts::alloc_chars(vm, context[49], context[50], "] = 0;", 6);
            refalrts::alloc_close_bracket(vm, context[51]);
            refalrts::alloc_open_bracket(vm, context[52]);
            refalrts::alloc_chars(vm, context[53], context[54], "  context[", 10);
            refalrts::alloc_open_call(vm, context[55]);
            refalrts::alloc_name(vm, context[56], functions[efunc_Symb]);
            refalrts::alloc_open_call(vm, context[57]);
            refalrts::alloc_name(vm, context[58], functions[efunc_Add]);
            refalrts::alloc_number(vm, context[59], 1UL);
            refalrts::copy_stvar(vm, context[60], context[26]);
            refalrts::alloc_close_call(vm, context[61]);
            refalrts::alloc_close_call(vm, context[62]);
            refalrts::alloc_chars(vm, context[63], context[64], "] = 0;", 6);
            refalrts::alloc_close_bracket(vm, context[65]);
            refalrts::alloc_open_bracket(vm, context[66]);
            refalrts::alloc_chars(vm, context[67], context[68], "  ", 2);
            refalrts::alloc_open_call(vm, context[69]);
            refalrts::alloc_name(vm, context[70], functions[efunc_ContextItem]);
            refalrts::alloc_open_call(vm, context[71]);
            refalrts::alloc_name(vm, context[72], functions[efunc_Add]);
            refalrts::copy_stvar(vm, context[73], context[26]);
            refalrts::alloc_number(vm, context[74], 2UL);
            refalrts::alloc_close_call(vm, context[75]);
            refalrts::alloc_close_call(vm, context[76]);
            refalrts::alloc_chars(vm, context[77], context[78], " = refalrts::adt_term(context[", 30);
            refalrts::alloc_open_call(vm, context[79]);
            refalrts::alloc_name(vm, context[80], functions[efunc_Symb]);
            refalrts::copy_stvar(vm, context[81], context[26]);
            refalrts::alloc_close_call(vm, context[82]);
            refalrts::alloc_chars(vm, context[83], context[84], "], context[", 11);
            refalrts::alloc_open_call(vm, context[85]);
            refalrts::alloc_name(vm, context[86], functions[efunc_Symb]);
            refalrts::alloc_open_call(vm, context[87]);
            refalrts::alloc_name(vm, context[88], functions[efunc_Add]);
            refalrts::alloc_number(vm, context[89], 1UL);
            refalrts::copy_stvar(vm, context[90], context[26]);
            refalrts::alloc_close_call(vm, context[91]);
            refalrts::alloc_close_call(vm, context[92]);
            refalrts::alloc_chars(vm, context[93], context[94], "], functions[efunc_", 19);
            refalrts::alloc_open_call(vm, context[95]);
            refalrts::alloc_name(vm, context[96], functions[efunc_CName]);
            refalrts::alloc_close_call(vm, context[97]);
            refalrts::alloc_chars(vm, context[98], context[99], "], context[", 11);
            refalrts::alloc_open_call(vm, context[100]);
            refalrts::alloc_name(vm, context[101], functions[efunc_Symb]);
            refalrts::alloc_close_call(vm, context[102]);
            refalrts::alloc_chars(vm, context[103], context[104], "]);", 3);
            refalrts::alloc_close_bracket(vm, context[105]);
            refalrts::alloc_open_bracket(vm, context[106]);
            refalrts::alloc_chars(vm, context[107], context[108], "  if( ! ", 8);
            refalrts::alloc_open_call(vm, context[109]);
            refalrts::alloc_name(vm, context[110], functions[efunc_ContextItem]);
            refalrts::alloc_open_call(vm, context[111]);
            refalrts::alloc_name(vm, context[112], functions[efunc_Add]);
            refalrts::copy_stvar(vm, context[113], context[26]);
            refalrts::alloc_number(vm, context[114], 2UL);
            refalrts::alloc_close_call(vm, context[115]);
            refalrts::alloc_close_call(vm, context[116]);
            refalrts::alloc_chars(vm, context[117], context[118], " )", 2);
            refalrts::alloc_close_bracket(vm, context[119]);
            refalrts::alloc_open_bracket(vm, context[120]);
            refalrts::alloc_chars(vm, context[121], context[122], "    return refalrts::cRecognitionImpossible", 43);
            refalrts::reinit_char(context[15], ' ');
            refalrts::reinit_char(context[20], ' ');
            refalrts::update_name(context[4], functions[efunc_Symb]);
            refalrts::reinit_char(context[14], ';');
            refalrts::reinit_close_bracket(context[1]);
            refalrts::link_brackets( context[120], context[1] );
            refalrts::link_brackets( context[106], context[119] );
            refalrts::push_stack( vm, context[116] );
            refalrts::push_stack( vm, context[109] );
            refalrts::push_stack( vm, context[115] );
            refalrts::push_stack( vm, context[111] );
            refalrts::link_brackets( context[66], context[105] );
            refalrts::push_stack( vm, context[102] );
            refalrts::push_stack( vm, context[100] );
            refalrts::push_stack( vm, context[97] );
            refalrts::push_stack( vm, context[95] );
            refalrts::push_stack( vm, context[92] );
            refalrts::push_stack( vm, context[85] );
            refalrts::push_stack( vm, context[91] );
            refalrts::push_stack( vm, context[87] );
            refalrts::push_stack( vm, context[82] );
            refalrts::push_stack( vm, context[79] );
            refalrts::push_stack( vm, context[76] );
            refalrts::push_stack( vm, context[69] );
            refalrts::push_stack( vm, context[75] );
            refalrts::push_stack( vm, context[71] );
            refalrts::link_brackets( context[52], context[65] );
            refalrts::push_stack( vm, context[62] );
            refalrts::push_stack( vm, context[55] );
            refalrts::push_stack( vm, context[61] );
            refalrts::push_stack( vm, context[57] );
            refalrts::link_brackets( context[13], context[51] );
            refalrts::push_stack( vm, context[48] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[9], context[10] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[14];
            res = refalrts::splice_evar( res, context[102], context[122] );
            res = refalrts::splice_elem( res, context[21] );
            res = refalrts::splice_evar( res, context[97], context[101] );
            res = refalrts::splice_evar( res, context[42], context[43] );
            res = refalrts::splice_evar( res, context[48], context[96] );
            res = refalrts::splice_elem( res, context[26] );
            res = refalrts::splice_evar( res, context[0], context[4] );
            res = refalrts::splice_evar( res, context[46], context[47] );
            res = refalrts::splice_evar( res, context[9], context[20] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-Native/4 (/9 e.Indent/40 )/10 (/13 # CmdADTSave/15 # AlgTerm/20 s.BracketNumber/21 s.InnerBrackets/26 s.Num/31 e.Name/42 )/14 >/1
          context[40] = context[36];
          context[41] = context[37];
          context[42] = context[38];
          context[43] = context[39];
          // closed e.Indent as range 40
          // closed e.Name as range 42
          //DEBUG: s.BracketNumber: 21
          //DEBUG: s.InnerBrackets: 26
          //DEBUG: s.Num: 31
          //DEBUG: e.Indent: 40
          //DEBUG: e.Name: 42

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/31 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/40 AsIs: )/10 AsIs: (/13 } e.Indent/40/44"context["/46 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.InnerBrackets/26 } >/48"] = 0;"/49 )/51 (/52 e.Indent/40/53"context["/55 </57 & Symb/58 </59 & Add/60 1/61 s.InnerBrackets/26/62 >/63 >/64"] = 0;"/65 )/67 (/68 e.Indent/40/69 </71 & ContextItem/72 </73 & Add/74 s.InnerBrackets/26/75 2/76 >/77 >/78" = refalrts::adt_term(context["/79 </81 & Symb/82 s.InnerBrackets/26/83 >/84"], context["/85 </87 & Symb/88 </89 & Add/90 1/91 s.InnerBrackets/26/92 >/93 >/94"], functions[efunc_"/95 </97 & CName/98 Tile{ AsIs: e.Name/42 } >/99"], context["/100 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.BracketNumber/21 } >/102"]);"/103 )/105 (/106 e.Indent/40/107"if( ! "/109 </111 & ContextItem/112 </113 & Add/114 s.InnerBrackets/26/115 2/116 >/117 >/118" )"/119 )/121 (/122 e.Indent/40/123"  continue"/125 Tile{ HalfReuse: ';'/14 HalfReuse: )/1 ]] }
          refalrts::copy_evar(vm, context[44], context[45], context[40], context[41]);
          refalrts::alloc_chars(vm, context[46], context[47], "context[", 8);
          refalrts::alloc_close_call(vm, context[48]);
          refalrts::alloc_chars(vm, context[49], context[50], "] = 0;", 6);
          refalrts::alloc_close_bracket(vm, context[51]);
          refalrts::alloc_open_bracket(vm, context[52]);
          refalrts::copy_evar(vm, context[53], context[54], context[40], context[41]);
          refalrts::alloc_chars(vm, context[55], context[56], "context[", 8);
          refalrts::alloc_open_call(vm, context[57]);
          refalrts::alloc_name(vm, context[58], functions[efunc_Symb]);
          refalrts::alloc_open_call(vm, context[59]);
          refalrts::alloc_name(vm, context[60], functions[efunc_Add]);
          refalrts::alloc_number(vm, context[61], 1UL);
          refalrts::copy_stvar(vm, context[62], context[26]);
          refalrts::alloc_close_call(vm, context[63]);
          refalrts::alloc_close_call(vm, context[64]);
          refalrts::alloc_chars(vm, context[65], context[66], "] = 0;", 6);
          refalrts::alloc_close_bracket(vm, context[67]);
          refalrts::alloc_open_bracket(vm, context[68]);
          refalrts::copy_evar(vm, context[69], context[70], context[40], context[41]);
          refalrts::alloc_open_call(vm, context[71]);
          refalrts::alloc_name(vm, context[72], functions[efunc_ContextItem]);
          refalrts::alloc_open_call(vm, context[73]);
          refalrts::alloc_name(vm, context[74], functions[efunc_Add]);
          refalrts::copy_stvar(vm, context[75], context[26]);
          refalrts::alloc_number(vm, context[76], 2UL);
          refalrts::alloc_close_call(vm, context[77]);
          refalrts::alloc_close_call(vm, context[78]);
          refalrts::alloc_chars(vm, context[79], context[80], " = refalrts::adt_term(context[", 30);
          refalrts::alloc_open_call(vm, context[81]);
          refalrts::alloc_name(vm, context[82], functions[efunc_Symb]);
          refalrts::copy_stvar(vm, context[83], context[26]);
          refalrts::alloc_close_call(vm, context[84]);
          refalrts::alloc_chars(vm, context[85], context[86], "], context[", 11);
          refalrts::alloc_open_call(vm, context[87]);
          refalrts::alloc_name(vm, context[88], functions[efunc_Symb]);
          refalrts::alloc_open_call(vm, context[89]);
          refalrts::alloc_name(vm, context[90], functions[efunc_Add]);
          refalrts::alloc_number(vm, context[91], 1UL);
          refalrts::copy_stvar(vm, context[92], context[26]);
          refalrts::alloc_close_call(vm, context[93]);
          refalrts::alloc_close_call(vm, context[94]);
          refalrts::alloc_chars(vm, context[95], context[96], "], functions[efunc_", 19);
          refalrts::alloc_open_call(vm, context[97]);
          refalrts::alloc_name(vm, context[98], functions[efunc_CName]);
          refalrts::alloc_close_call(vm, context[99]);
          refalrts::alloc_chars(vm, context[100], context[101], "], context[", 11);
          refalrts::alloc_close_call(vm, context[102]);
          refalrts::alloc_chars(vm, context[103], context[104], "]);", 3);
          refalrts::alloc_close_bracket(vm, context[105]);
          refalrts::alloc_open_bracket(vm, context[106]);
          refalrts::copy_evar(vm, context[107], context[108], context[40], context[41]);
          refalrts::alloc_chars(vm, context[109], context[110], "if( ! ", 6);
          refalrts::alloc_open_call(vm, context[111]);
          refalrts::alloc_name(vm, context[112], functions[efunc_ContextItem]);
          refalrts::alloc_open_call(vm, context[113]);
          refalrts::alloc_name(vm, context[114], functions[efunc_Add]);
          refalrts::copy_stvar(vm, context[115], context[26]);
          refalrts::alloc_number(vm, context[116], 2UL);
          refalrts::alloc_close_call(vm, context[117]);
          refalrts::alloc_close_call(vm, context[118]);
          refalrts::alloc_chars(vm, context[119], context[120], " )", 2);
          refalrts::alloc_close_bracket(vm, context[121]);
          refalrts::alloc_open_bracket(vm, context[122]);
          refalrts::copy_evar(vm, context[123], context[124], context[40], context[41]);
          refalrts::alloc_chars(vm, context[125], context[126], "  continue", 10);
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[20], functions[efunc_Symb]);
          refalrts::reinit_char(context[14], ';');
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[122], context[1] );
          refalrts::link_brackets( context[106], context[121] );
          refalrts::push_stack( vm, context[118] );
          refalrts::push_stack( vm, context[111] );
          refalrts::push_stack( vm, context[117] );
          refalrts::push_stack( vm, context[113] );
          refalrts::link_brackets( context[68], context[105] );
          refalrts::push_stack( vm, context[102] );
          refalrts::push_stack( vm, context[15] );
          refalrts::push_stack( vm, context[99] );
          refalrts::push_stack( vm, context[97] );
          refalrts::push_stack( vm, context[94] );
          refalrts::push_stack( vm, context[87] );
          refalrts::push_stack( vm, context[93] );
          refalrts::push_stack( vm, context[89] );
          refalrts::push_stack( vm, context[84] );
          refalrts::push_stack( vm, context[81] );
          refalrts::push_stack( vm, context[78] );
          refalrts::push_stack( vm, context[71] );
          refalrts::push_stack( vm, context[77] );
          refalrts::push_stack( vm, context[73] );
          refalrts::link_brackets( context[52], context[67] );
          refalrts::push_stack( vm, context[64] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[63] );
          refalrts::push_stack( vm, context[59] );
          refalrts::link_brackets( context[13], context[51] );
          refalrts::push_stack( vm, context[48] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          res = refalrts::splice_evar( res, context[102], context[126] );
          res = refalrts::splice_evar( res, context[15], context[21] );
          res = refalrts::splice_evar( res, context[99], context[101] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[48], context[98] );
          res = refalrts::splice_elem( res, context[26] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/36 )/10 (/13 # CmdADTSave/15 s.Direction/20 s.BracketNumber/21 s.InnerBrackets/26 s.Num/31 e.Name/38 )/14 >/1
        context[36] = context[32];
        context[37] = context[33];
        context[38] = context[34];
        context[39] = context[35];
        // closed e.Indent as range 36
        // closed e.Name as range 38
        //DEBUG: s.Direction: 20
        //DEBUG: s.BracketNumber: 21
        //DEBUG: s.InnerBrackets: 26
        //DEBUG: s.Num: 31
        //DEBUG: e.Indent: 36
        //DEBUG: e.Name: 38

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/31 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/40 e.Indent/36/41 )/43 (/44 e.Indent/36/45"context["/47 </49 & Symb/50 Tile{ AsIs: s.InnerBrackets/26 } >/51"] = 0;"/52 )/54 (/55 e.Indent/36/56"context["/58 </60 & Symb/61 </62 & Add/63 1/64 s.InnerBrackets/26/65 >/66 >/67"] = 0;"/68 )/70 Tile{ AsIs: </0 Reuse: & PrintMatchSave/4 AsIs: (/9 AsIs: e.Indent/36 AsIs: )/10 HalfReuse: </13 HalfReuse: & Add/15 } 2/71 s.InnerBrackets/26/72 >/73 Tile{ AsIs: s.Direction/20 AsIs: s.BracketNumber/21 } (/74"adt"/75 )/77"context["/78 </80 & Symb/81 s.InnerBrackets/26/82 >/83"], context["/84 </86 & Symb/87 </88 & Add/89 1/90 s.InnerBrackets/26/91 >/92 >/93"], functions[efunc_"/94 </96 & CName/97 Tile{ AsIs: e.Name/38 } >/98 ']'/99 >/100 (/101 e.Indent/36/102"refalrts::adt_pointers("/104 </106 & ContextItem/107 </108 & Add/109 s.InnerBrackets/26/110 2/111 >/112 >/113", "/114 </116 & ContextItem/117 </118 & Add/119 s.InnerBrackets/26/120 3/121 >/122 >/123", "/124 </126 & ContextItem/127 </128 & Add/129 s.InnerBrackets/26/130 4/131 >/132 >/133 ')'/134 Tile{ HalfReuse: ';'/14 HalfReuse: )/1 ]] }
        refalrts::alloc_open_bracket(vm, context[40]);
        refalrts::copy_evar(vm, context[41], context[42], context[36], context[37]);
        refalrts::alloc_close_bracket(vm, context[43]);
        refalrts::alloc_open_bracket(vm, context[44]);
        refalrts::copy_evar(vm, context[45], context[46], context[36], context[37]);
        refalrts::alloc_chars(vm, context[47], context[48], "context[", 8);
        refalrts::alloc_open_call(vm, context[49]);
        refalrts::alloc_name(vm, context[50], functions[efunc_Symb]);
        refalrts::alloc_close_call(vm, context[51]);
        refalrts::alloc_chars(vm, context[52], context[53], "] = 0;", 6);
        refalrts::alloc_close_bracket(vm, context[54]);
        refalrts::alloc_open_bracket(vm, context[55]);
        refalrts::copy_evar(vm, context[56], context[57], context[36], context[37]);
        refalrts::alloc_chars(vm, context[58], context[59], "context[", 8);
        refalrts::alloc_open_call(vm, context[60]);
        refalrts::alloc_name(vm, context[61], functions[efunc_Symb]);
        refalrts::alloc_open_call(vm, context[62]);
        refalrts::alloc_name(vm, context[63], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[64], 1UL);
        refalrts::copy_stvar(vm, context[65], context[26]);
        refalrts::alloc_close_call(vm, context[66]);
        refalrts::alloc_close_call(vm, context[67]);
        refalrts::alloc_chars(vm, context[68], context[69], "] = 0;", 6);
        refalrts::alloc_close_bracket(vm, context[70]);
        refalrts::alloc_number(vm, context[71], 2UL);
        refalrts::copy_stvar(vm, context[72], context[26]);
        refalrts::alloc_close_call(vm, context[73]);
        refalrts::alloc_open_bracket(vm, context[74]);
        refalrts::alloc_chars(vm, context[75], context[76], "adt", 3);
        refalrts::alloc_close_bracket(vm, context[77]);
        refalrts::alloc_chars(vm, context[78], context[79], "context[", 8);
        refalrts::alloc_open_call(vm, context[80]);
        refalrts::alloc_name(vm, context[81], functions[efunc_Symb]);
        refalrts::copy_stvar(vm, context[82], context[26]);
        refalrts::alloc_close_call(vm, context[83]);
        refalrts::alloc_chars(vm, context[84], context[85], "], context[", 11);
        refalrts::alloc_open_call(vm, context[86]);
        refalrts::alloc_name(vm, context[87], functions[efunc_Symb]);
        refalrts::alloc_open_call(vm, context[88]);
        refalrts::alloc_name(vm, context[89], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[90], 1UL);
        refalrts::copy_stvar(vm, context[91], context[26]);
        refalrts::alloc_close_call(vm, context[92]);
        refalrts::alloc_close_call(vm, context[93]);
        refalrts::alloc_chars(vm, context[94], context[95], "], functions[efunc_", 19);
        refalrts::alloc_open_call(vm, context[96]);
        refalrts::alloc_name(vm, context[97], functions[efunc_CName]);
        refalrts::alloc_close_call(vm, context[98]);
        refalrts::alloc_char(vm, context[99], ']');
        refalrts::alloc_close_call(vm, context[100]);
        refalrts::alloc_open_bracket(vm, context[101]);
        refalrts::copy_evar(vm, context[102], context[103], context[36], context[37]);
        refalrts::alloc_chars(vm, context[104], context[105], "refalrts::adt_pointers(", 23);
        refalrts::alloc_open_call(vm, context[106]);
        refalrts::alloc_name(vm, context[107], functions[efunc_ContextItem]);
        refalrts::alloc_open_call(vm, context[108]);
        refalrts::alloc_name(vm, context[109], functions[efunc_Add]);
        refalrts::copy_stvar(vm, context[110], context[26]);
        refalrts::alloc_number(vm, context[111], 2UL);
        refalrts::alloc_close_call(vm, context[112]);
        refalrts::alloc_close_call(vm, context[113]);
        refalrts::alloc_chars(vm, context[114], context[115], ", ", 2);
        refalrts::alloc_open_call(vm, context[116]);
        refalrts::alloc_name(vm, context[117], functions[efunc_ContextItem]);
        refalrts::alloc_open_call(vm, context[118]);
        refalrts::alloc_name(vm, context[119], functions[efunc_Add]);
        refalrts::copy_stvar(vm, context[120], context[26]);
        refalrts::alloc_number(vm, context[121], 3UL);
        refalrts::alloc_close_call(vm, context[122]);
        refalrts::alloc_close_call(vm, context[123]);
        refalrts::alloc_chars(vm, context[124], context[125], ", ", 2);
        refalrts::alloc_open_call(vm, context[126]);
        refalrts::alloc_name(vm, context[127], functions[efunc_ContextItem]);
        refalrts::alloc_open_call(vm, context[128]);
        refalrts::alloc_name(vm, context[129], functions[efunc_Add]);
        refalrts::copy_stvar(vm, context[130], context[26]);
        refalrts::alloc_number(vm, context[131], 4UL);
        refalrts::alloc_close_call(vm, context[132]);
        refalrts::alloc_close_call(vm, context[133]);
        refalrts::alloc_char(vm, context[134], ')');
        refalrts::update_name(context[4], functions[efunc_PrintMatchSave]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[15], functions[efunc_Add]);
        refalrts::reinit_char(context[14], ';');
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[101], context[1] );
        refalrts::push_stack( vm, context[133] );
        refalrts::push_stack( vm, context[126] );
        refalrts::push_stack( vm, context[132] );
        refalrts::push_stack( vm, context[128] );
        refalrts::push_stack( vm, context[123] );
        refalrts::push_stack( vm, context[116] );
        refalrts::push_stack( vm, context[122] );
        refalrts::push_stack( vm, context[118] );
        refalrts::push_stack( vm, context[113] );
        refalrts::push_stack( vm, context[106] );
        refalrts::push_stack( vm, context[112] );
        refalrts::push_stack( vm, context[108] );
        refalrts::push_stack( vm, context[100] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[98] );
        refalrts::push_stack( vm, context[96] );
        refalrts::push_stack( vm, context[93] );
        refalrts::push_stack( vm, context[86] );
        refalrts::push_stack( vm, context[92] );
        refalrts::push_stack( vm, context[88] );
        refalrts::push_stack( vm, context[83] );
        refalrts::push_stack( vm, context[80] );
        refalrts::link_brackets( context[74], context[77] );
        refalrts::push_stack( vm, context[73] );
        refalrts::push_stack( vm, context[13] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::link_brackets( context[55], context[70] );
        refalrts::push_stack( vm, context[67] );
        refalrts::push_stack( vm, context[60] );
        refalrts::push_stack( vm, context[66] );
        refalrts::push_stack( vm, context[62] );
        refalrts::link_brackets( context[44], context[54] );
        refalrts::push_stack( vm, context[51] );
        refalrts::push_stack( vm, context[49] );
        refalrts::link_brackets( context[40], context[43] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[98], context[134] );
        res = refalrts::splice_evar( res, context[38], context[39] );
        res = refalrts::splice_evar( res, context[74], context[97] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        res = refalrts::splice_evar( res, context[71], context[73] );
        res = refalrts::splice_evar( res, context[0], context[15] );
        res = refalrts::splice_evar( res, context[51], context[70] );
        res = refalrts::splice_elem( res, context[26] );
        res = refalrts::splice_evar( res, context[40], context[50] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.new15/27 )/10 (/13 # CmdCallSave/15 s.new16/20 s.new17/21 s.new18/26 )/14 >/1
      context[27] = context[22];
      context[28] = context[23];
      if( ! refalrts::ident_term( identifiers[ident_CmdCallSave], context[15] ) )
        continue;
      if( ! refalrts::empty_seq( context[24], context[25] ) )
        continue;
      // closed e.new15 as range 27
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/29 )/10 (/13 # CmdCallSave/15 # AlgLeft/20 s.BracketNumber/21 s.InnerBrackets/26 )/14 >/1
        context[29] = context[27];
        context[30] = context[28];
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[20] ) )
          continue;
        // closed e.Indent as range 29
        //DEBUG: s.BracketNumber: 21
        //DEBUG: s.InnerBrackets: 26
        //DEBUG: e.Indent: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/29 AsIs: )/10 AsIs: (/13 } e.Indent/29/31"context["/33 Tile{ AsIs: </0 Reuse: & Symb/4 } s.InnerBrackets/26/35 >/36"] = 0;"/37 )/39 (/40 e.Indent/29/41"context["/43 </45 & Symb/46 </47 & Add/48 1/49 Tile{ AsIs: s.InnerBrackets/26 HalfReuse: >/14 AsIs: >/1 }"] = 0;"/50 )/52 (/53 e.Indent/29/54 </56 & ContextItem/57 </58 & Add/59 2/60 s.InnerBrackets/26/61 >/62 >/63" = refalrts::call_left( context["/64 </66 & Symb/67 s.InnerBrackets/26/68 >/69"], context["/70 </72 & Symb/73 </74 & Add/75 1/76 s.InnerBrackets/26/77 >/78 >/79"], context["/80 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.BracketNumber/21 } >/82"], context["/83 </85 & Symb/86 </87 & Add/88 1/89 s.BracketNumber/21/90 >/91 >/92"] );"/93 )/95 Tile{ ]] }
        refalrts::copy_evar(vm, context[31], context[32], context[29], context[30]);
        refalrts::alloc_chars(vm, context[33], context[34], "context[", 8);
        refalrts::copy_stvar(vm, context[35], context[26]);
        refalrts::alloc_close_call(vm, context[36]);
        refalrts::alloc_chars(vm, context[37], context[38], "] = 0;", 6);
        refalrts::alloc_close_bracket(vm, context[39]);
        refalrts::alloc_open_bracket(vm, context[40]);
        refalrts::copy_evar(vm, context[41], context[42], context[29], context[30]);
        refalrts::alloc_chars(vm, context[43], context[44], "context[", 8);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_Symb]);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[49], 1UL);
        refalrts::alloc_chars(vm, context[50], context[51], "] = 0;", 6);
        refalrts::alloc_close_bracket(vm, context[52]);
        refalrts::alloc_open_bracket(vm, context[53]);
        refalrts::copy_evar(vm, context[54], context[55], context[29], context[30]);
        refalrts::alloc_open_call(vm, context[56]);
        refalrts::alloc_name(vm, context[57], functions[efunc_ContextItem]);
        refalrts::alloc_open_call(vm, context[58]);
        refalrts::alloc_name(vm, context[59], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[60], 2UL);
        refalrts::copy_stvar(vm, context[61], context[26]);
        refalrts::alloc_close_call(vm, context[62]);
        refalrts::alloc_close_call(vm, context[63]);
        refalrts::alloc_chars(vm, context[64], context[65], " = refalrts::call_left( context[", 32);
        refalrts::alloc_open_call(vm, context[66]);
        refalrts::alloc_name(vm, context[67], functions[efunc_Symb]);
        refalrts::copy_stvar(vm, context[68], context[26]);
        refalrts::alloc_close_call(vm, context[69]);
        refalrts::alloc_chars(vm, context[70], context[71], "], context[", 11);
        refalrts::alloc_open_call(vm, context[72]);
        refalrts::alloc_name(vm, context[73], functions[efunc_Symb]);
        refalrts::alloc_open_call(vm, context[74]);
        refalrts::alloc_name(vm, context[75], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[76], 1UL);
        refalrts::copy_stvar(vm, context[77], context[26]);
        refalrts::alloc_close_call(vm, context[78]);
        refalrts::alloc_close_call(vm, context[79]);
        refalrts::alloc_chars(vm, context[80], context[81], "], context[", 11);
        refalrts::alloc_close_call(vm, context[82]);
        refalrts::alloc_chars(vm, context[83], context[84], "], context[", 11);
        refalrts::alloc_open_call(vm, context[85]);
        refalrts::alloc_name(vm, context[86], functions[efunc_Symb]);
        refalrts::alloc_open_call(vm, context[87]);
        refalrts::alloc_name(vm, context[88], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[89], 1UL);
        refalrts::copy_stvar(vm, context[90], context[21]);
        refalrts::alloc_close_call(vm, context[91]);
        refalrts::alloc_close_call(vm, context[92]);
        refalrts::alloc_chars(vm, context[93], context[94], "] );", 4);
        refalrts::alloc_close_bracket(vm, context[95]);
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[20], functions[efunc_Symb]);
        refalrts::link_brackets( context[53], context[95] );
        refalrts::push_stack( vm, context[92] );
        refalrts::push_stack( vm, context[85] );
        refalrts::push_stack( vm, context[91] );
        refalrts::push_stack( vm, context[87] );
        refalrts::push_stack( vm, context[82] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[79] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[78] );
        refalrts::push_stack( vm, context[74] );
        refalrts::push_stack( vm, context[69] );
        refalrts::push_stack( vm, context[66] );
        refalrts::push_stack( vm, context[63] );
        refalrts::push_stack( vm, context[56] );
        refalrts::push_stack( vm, context[62] );
        refalrts::push_stack( vm, context[58] );
        refalrts::link_brackets( context[40], context[52] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[47] );
        refalrts::link_brackets( context[13], context[39] );
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[82], context[95] );
        res = refalrts::splice_evar( res, context[15], context[21] );
        res = refalrts::splice_evar( res, context[50], context[81] );
        res = refalrts::splice_evar( res, context[26], context[1] );
        res = refalrts::splice_evar( res, context[35], context[49] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/29 )/10 (/13 # CmdCallSave/15 # AlgRight/20 s.BracketNumber/21 s.InnerBrackets/26 )/14 >/1
        context[29] = context[27];
        context[30] = context[28];
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[20] ) )
          continue;
        // closed e.Indent as range 29
        //DEBUG: s.BracketNumber: 21
        //DEBUG: s.InnerBrackets: 26
        //DEBUG: e.Indent: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/29 AsIs: )/10 AsIs: (/13 } e.Indent/29/31"context["/33 Tile{ AsIs: </0 Reuse: & Symb/4 } s.InnerBrackets/26/35 >/36"] = 0;"/37 )/39 (/40 e.Indent/29/41"context["/43 </45 & Symb/46 </47 & Add/48 1/49 Tile{ AsIs: s.InnerBrackets/26 HalfReuse: >/14 AsIs: >/1 }"] = 0;"/50 )/52 (/53 e.Indent/29/54 </56 & ContextItem/57 </58 & Add/59 2/60 s.InnerBrackets/26/61 >/62 >/63" = refalrts::call_right( context["/64 </66 & Symb/67 s.InnerBrackets/26/68 >/69"], context["/70 </72 & Symb/73 </74 & Add/75 1/76 s.InnerBrackets/26/77 >/78 >/79"], context["/80 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.BracketNumber/21 } >/82"], context["/83 </85 & Symb/86 </87 & Add/88 1/89 s.BracketNumber/21/90 >/91 >/92"] );"/93 )/95 Tile{ ]] }
        refalrts::copy_evar(vm, context[31], context[32], context[29], context[30]);
        refalrts::alloc_chars(vm, context[33], context[34], "context[", 8);
        refalrts::copy_stvar(vm, context[35], context[26]);
        refalrts::alloc_close_call(vm, context[36]);
        refalrts::alloc_chars(vm, context[37], context[38], "] = 0;", 6);
        refalrts::alloc_close_bracket(vm, context[39]);
        refalrts::alloc_open_bracket(vm, context[40]);
        refalrts::copy_evar(vm, context[41], context[42], context[29], context[30]);
        refalrts::alloc_chars(vm, context[43], context[44], "context[", 8);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_Symb]);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[49], 1UL);
        refalrts::alloc_chars(vm, context[50], context[51], "] = 0;", 6);
        refalrts::alloc_close_bracket(vm, context[52]);
        refalrts::alloc_open_bracket(vm, context[53]);
        refalrts::copy_evar(vm, context[54], context[55], context[29], context[30]);
        refalrts::alloc_open_call(vm, context[56]);
        refalrts::alloc_name(vm, context[57], functions[efunc_ContextItem]);
        refalrts::alloc_open_call(vm, context[58]);
        refalrts::alloc_name(vm, context[59], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[60], 2UL);
        refalrts::copy_stvar(vm, context[61], context[26]);
        refalrts::alloc_close_call(vm, context[62]);
        refalrts::alloc_close_call(vm, context[63]);
        refalrts::alloc_chars(vm, context[64], context[65], " = refalrts::call_right( context[", 33);
        refalrts::alloc_open_call(vm, context[66]);
        refalrts::alloc_name(vm, context[67], functions[efunc_Symb]);
        refalrts::copy_stvar(vm, context[68], context[26]);
        refalrts::alloc_close_call(vm, context[69]);
        refalrts::alloc_chars(vm, context[70], context[71], "], context[", 11);
        refalrts::alloc_open_call(vm, context[72]);
        refalrts::alloc_name(vm, context[73], functions[efunc_Symb]);
        refalrts::alloc_open_call(vm, context[74]);
        refalrts::alloc_name(vm, context[75], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[76], 1UL);
        refalrts::copy_stvar(vm, context[77], context[26]);
        refalrts::alloc_close_call(vm, context[78]);
        refalrts::alloc_close_call(vm, context[79]);
        refalrts::alloc_chars(vm, context[80], context[81], "], context[", 11);
        refalrts::alloc_close_call(vm, context[82]);
        refalrts::alloc_chars(vm, context[83], context[84], "], context[", 11);
        refalrts::alloc_open_call(vm, context[85]);
        refalrts::alloc_name(vm, context[86], functions[efunc_Symb]);
        refalrts::alloc_open_call(vm, context[87]);
        refalrts::alloc_name(vm, context[88], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[89], 1UL);
        refalrts::copy_stvar(vm, context[90], context[21]);
        refalrts::alloc_close_call(vm, context[91]);
        refalrts::alloc_close_call(vm, context[92]);
        refalrts::alloc_chars(vm, context[93], context[94], "] );", 4);
        refalrts::alloc_close_bracket(vm, context[95]);
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[20], functions[efunc_Symb]);
        refalrts::link_brackets( context[53], context[95] );
        refalrts::push_stack( vm, context[92] );
        refalrts::push_stack( vm, context[85] );
        refalrts::push_stack( vm, context[91] );
        refalrts::push_stack( vm, context[87] );
        refalrts::push_stack( vm, context[82] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[79] );
        refalrts::push_stack( vm, context[72] );
        refalrts::push_stack( vm, context[78] );
        refalrts::push_stack( vm, context[74] );
        refalrts::push_stack( vm, context[69] );
        refalrts::push_stack( vm, context[66] );
        refalrts::push_stack( vm, context[63] );
        refalrts::push_stack( vm, context[56] );
        refalrts::push_stack( vm, context[62] );
        refalrts::push_stack( vm, context[58] );
        refalrts::link_brackets( context[40], context[52] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[47] );
        refalrts::link_brackets( context[13], context[39] );
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[82], context[95] );
        res = refalrts::splice_evar( res, context[15], context[21] );
        res = refalrts::splice_evar( res, context[50], context[81] );
        res = refalrts::splice_evar( res, context[26], context[1] );
        res = refalrts::splice_evar( res, context[35], context[49] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/29 )/10 (/13 # CmdCallSave/15 s.Direction/20 s.BracketNumber/21 s.InnerBrackets/26 )/14 >/1
      context[29] = context[27];
      context[30] = context[28];
      // closed e.Indent as range 29
      //DEBUG: s.Direction: 20
      //DEBUG: s.BracketNumber: 21
      //DEBUG: s.InnerBrackets: 26
      //DEBUG: e.Indent: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/29 AsIs: )/10 AsIs: (/13 } e.Indent/29/31"context["/33 Tile{ AsIs: </0 Reuse: & Symb/4 } s.InnerBrackets/26/35 >/36"] = 0;"/37 )/39 (/40 e.Indent/29/41"context["/43 </45 & Symb/46 </47 & Add/48 1/49 Tile{ AsIs: s.InnerBrackets/26 HalfReuse: >/14 AsIs: >/1 }"] = 0;"/50 )/52 (/53 e.Indent/29/54 </56 & ContextItem/57 </58 & Add/59 2/60 s.InnerBrackets/26/61 >/62 >/63" = refalrts::call_"/64 </66 Tile{ HalfReuse: & StrFromDirection*2/15 AsIs: s.Direction/20 } >/67"( context["/68 </70 & Symb/71 s.InnerBrackets/26/72 >/73"], context["/74 </76 & Symb/77 </78 & Add/79 1/80 s.InnerBrackets/26/81 >/82 >/83"], context["/84 </86 & Symb/87 Tile{ AsIs: s.BracketNumber/21 } >/88"], context["/89 </91 & Symb/92 </93 & Add/94 1/95 s.BracketNumber/21/96 >/97 >/98"] );"/99 )/101 Tile{ ]] }
      refalrts::copy_evar(vm, context[31], context[32], context[29], context[30]);
      refalrts::alloc_chars(vm, context[33], context[34], "context[", 8);
      refalrts::copy_stvar(vm, context[35], context[26]);
      refalrts::alloc_close_call(vm, context[36]);
      refalrts::alloc_chars(vm, context[37], context[38], "] = 0;", 6);
      refalrts::alloc_close_bracket(vm, context[39]);
      refalrts::alloc_open_bracket(vm, context[40]);
      refalrts::copy_evar(vm, context[41], context[42], context[29], context[30]);
      refalrts::alloc_chars(vm, context[43], context[44], "context[", 8);
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[47]);
      refalrts::alloc_name(vm, context[48], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[49], 1UL);
      refalrts::alloc_chars(vm, context[50], context[51], "] = 0;", 6);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::alloc_open_bracket(vm, context[53]);
      refalrts::copy_evar(vm, context[54], context[55], context[29], context[30]);
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_name(vm, context[57], functions[efunc_ContextItem]);
      refalrts::alloc_open_call(vm, context[58]);
      refalrts::alloc_name(vm, context[59], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[60], 2UL);
      refalrts::copy_stvar(vm, context[61], context[26]);
      refalrts::alloc_close_call(vm, context[62]);
      refalrts::alloc_close_call(vm, context[63]);
      refalrts::alloc_chars(vm, context[64], context[65], " = refalrts::call_", 18);
      refalrts::alloc_open_call(vm, context[66]);
      refalrts::alloc_close_call(vm, context[67]);
      refalrts::alloc_chars(vm, context[68], context[69], "( context[", 10);
      refalrts::alloc_open_call(vm, context[70]);
      refalrts::alloc_name(vm, context[71], functions[efunc_Symb]);
      refalrts::copy_stvar(vm, context[72], context[26]);
      refalrts::alloc_close_call(vm, context[73]);
      refalrts::alloc_chars(vm, context[74], context[75], "], context[", 11);
      refalrts::alloc_open_call(vm, context[76]);
      refalrts::alloc_name(vm, context[77], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[78]);
      refalrts::alloc_name(vm, context[79], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[80], 1UL);
      refalrts::copy_stvar(vm, context[81], context[26]);
      refalrts::alloc_close_call(vm, context[82]);
      refalrts::alloc_close_call(vm, context[83]);
      refalrts::alloc_chars(vm, context[84], context[85], "], context[", 11);
      refalrts::alloc_open_call(vm, context[86]);
      refalrts::alloc_name(vm, context[87], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[88]);
      refalrts::alloc_chars(vm, context[89], context[90], "], context[", 11);
      refalrts::alloc_open_call(vm, context[91]);
      refalrts::alloc_name(vm, context[92], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[93]);
      refalrts::alloc_name(vm, context[94], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[95], 1UL);
      refalrts::copy_stvar(vm, context[96], context[21]);
      refalrts::alloc_close_call(vm, context[97]);
      refalrts::alloc_close_call(vm, context[98]);
      refalrts::alloc_chars(vm, context[99], context[100], "] );", 4);
      refalrts::alloc_close_bracket(vm, context[101]);
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_name(context[15], functions[efunc_gen_StrFromDirection_D2]);
      refalrts::link_brackets( context[53], context[101] );
      refalrts::push_stack( vm, context[98] );
      refalrts::push_stack( vm, context[91] );
      refalrts::push_stack( vm, context[97] );
      refalrts::push_stack( vm, context[93] );
      refalrts::push_stack( vm, context[88] );
      refalrts::push_stack( vm, context[86] );
      refalrts::push_stack( vm, context[83] );
      refalrts::push_stack( vm, context[76] );
      refalrts::push_stack( vm, context[82] );
      refalrts::push_stack( vm, context[78] );
      refalrts::push_stack( vm, context[73] );
      refalrts::push_stack( vm, context[70] );
      refalrts::push_stack( vm, context[67] );
      refalrts::push_stack( vm, context[66] );
      refalrts::push_stack( vm, context[63] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[62] );
      refalrts::push_stack( vm, context[58] );
      refalrts::link_brackets( context[40], context[52] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[47] );
      refalrts::link_brackets( context[13], context[39] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[88], context[101] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_evar( res, context[67], context[87] );
      res = refalrts::splice_evar( res, context[15], context[20] );
      res = refalrts::splice_evar( res, context[50], context[66] );
      res = refalrts::splice_evar( res, context[26], context[1] );
      res = refalrts::splice_evar( res, context[35], context[49] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.new9/22 )/10 (/13 # CmdEmpty/15 s.new10/20 s.new11/21 )/14 >/1
      context[22] = context[16];
      context[23] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_CmdEmpty], context[15] ) )
        continue;
      if( ! refalrts::empty_seq( context[18], context[19] ) )
        continue;
      // closed e.new9 as range 22
      do {
        // </0 & GenCommand-Native/4 (/9 ' '/26 ' '/27 )/10 (/13 # CmdEmpty/15 s.Direction/20 s.BracketNumber/21 )/14 >/1
        context[24] = context[22];
        context[25] = context[23];
        context[26] = refalrts::char_left( ' ', context[24], context[25] );
        if( ! context[26] )
          continue;
        context[27] = refalrts::char_left( ' ', context[24], context[25] );
        if( ! context[27] )
          continue;
        if( ! refalrts::empty_seq( context[24], context[25] ) )
          continue;
        //DEBUG: s.Direction: 20
        //DEBUG: s.BracketNumber: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Direction/20 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: ' '/26 AsIs: ' '/27 AsIs: )/10 AsIs: (/13 HalfReuse: ' '/15 }" if( ! refalrts::empty_seq( context["/28 Tile{ AsIs: </0 Reuse: & Symb/4 } s.BracketNumber/21/30 >/31"], context["/32 </34 & Symb/35 </36 & Add/37 1/38 Tile{ AsIs: s.BracketNumber/21 HalfReuse: >/14 AsIs: >/1 }"] ) )"/39 )/41 (/42"    return refalrts::cRecognitionImpossible;"/43 )/45 Tile{ ]] }
        refalrts::alloc_chars(vm, context[28], context[29], " if( ! refalrts::empty_seq( context[", 36);
        refalrts::copy_stvar(vm, context[30], context[21]);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_chars(vm, context[32], context[33], "], context[", 11);
        refalrts::alloc_open_call(vm, context[34]);
        refalrts::alloc_name(vm, context[35], functions[efunc_Symb]);
        refalrts::alloc_open_call(vm, context[36]);
        refalrts::alloc_name(vm, context[37], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[38], 1UL);
        refalrts::alloc_chars(vm, context[39], context[40], "] ) )", 5);
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_open_bracket(vm, context[42]);
        refalrts::alloc_chars(vm, context[43], context[44], "    return refalrts::cRecognitionImpossible;", 44);
        refalrts::alloc_close_bracket(vm, context[45]);
        refalrts::reinit_char(context[15], ' ');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[14]);
        refalrts::link_brackets( context[42], context[45] );
        refalrts::link_brackets( context[13], context[41] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[39], context[45] );
        res = refalrts::splice_evar( res, context[21], context[1] );
        res = refalrts::splice_evar( res, context[30], context[38] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[9], context[15] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/24 )/10 (/13 # CmdEmpty/15 s.Direction/20 s.BracketNumber/21 )/14 >/1
      context[24] = context[22];
      context[25] = context[23];
      // closed e.Indent as range 24
      //DEBUG: s.Direction: 20
      //DEBUG: s.BracketNumber: 21
      //DEBUG: e.Indent: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Direction/20 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/24 AsIs: )/10 AsIs: (/13 } e.Indent/24/26"if("/28 Tile{ HalfReuse: ' '/15 }"! refalrts::empty_seq( context["/30 Tile{ AsIs: </0 Reuse: & Symb/4 } s.BracketNumber/21/32 >/33"], context["/34 </36 & Symb/37 </38 & Add/39 1/40 Tile{ AsIs: s.BracketNumber/21 HalfReuse: >/14 AsIs: >/1 }"] ) )"/41 )/43 (/44 e.Indent/24/45"  continue;"/47 )/49 Tile{ ]] }
      refalrts::copy_evar(vm, context[26], context[27], context[24], context[25]);
      refalrts::alloc_chars(vm, context[28], context[29], "if(", 3);
      refalrts::alloc_chars(vm, context[30], context[31], "! refalrts::empty_seq( context[", 31);
      refalrts::copy_stvar(vm, context[32], context[21]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[40], 1UL);
      refalrts::alloc_chars(vm, context[41], context[42], "] ) )", 5);
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::alloc_open_bracket(vm, context[44]);
      refalrts::copy_evar(vm, context[45], context[46], context[24], context[25]);
      refalrts::alloc_chars(vm, context[47], context[48], "  continue;", 11);
      refalrts::alloc_close_bracket(vm, context[49]);
      refalrts::reinit_char(context[15], ' ');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[14]);
      refalrts::link_brackets( context[44], context[49] );
      refalrts::link_brackets( context[13], context[43] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[41], context[49] );
      res = refalrts::splice_evar( res, context[21], context[1] );
      res = refalrts::splice_evar( res, context[32], context[40] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Native/4 (/9 e.new9/22 )/10 (/13 s.new10/15 s.new11/20 s.new12/21 e.new13/24 s.new14/27 s.new15/26 )/14 >/1
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    // closed e.new9 as range 22
    if( ! refalrts::svar_right( context[26], context[24], context[25] ) )
      continue;
    if( ! refalrts::svar_right( context[27], context[24], context[25] ) )
      continue;
    // closed e.new13 as range 24
    do {
      // </0 & GenCommand-Native/4 (/9 e.new16/28 )/10 (/13 s.new17/15 s.new18/20 s.new19/21 s.new21/27 s.new20/26 )/14 >/1
      context[28] = context[22];
      context[29] = context[23];
      if( ! refalrts::empty_seq( context[24], context[25] ) )
        continue;
      // closed e.new16 as range 28
      do {
        // </0 & GenCommand-Native/4 (/9 e.new22/30 )/10 (/13 # CmdVar/15 s.new23/20 s.new24/21 s.new26/27 s.new25/26 )/14 >/1
        context[30] = context[28];
        context[31] = context[29];
        if( ! refalrts::ident_term( identifiers[ident_CmdVar], context[15] ) )
          continue;
        // closed e.new22 as range 30
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/32 )/10 (/13 # CmdVar/15 s.Direction/20 s.BracketNumber/21 's'/27 s.VarNumber/26 )/14 >/1
          context[32] = context[30];
          context[33] = context[31];
          if( ! refalrts::char_term( 's', context[27] ) )
            continue;
          // closed e.Indent as range 32
          //DEBUG: s.Direction: 20
          //DEBUG: s.BracketNumber: 21
          //DEBUG: s.VarNumber: 26
          //DEBUG: e.Indent: 32

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Direction/20 s.BracketNumber/21 {REMOVED TILE}
          //RESULT: Tile{ [[ } (/34 e.Indent/32/35 )/37 Tile{ AsIs: </0 Reuse: & PrintMatch@7/4 AsIs: (/9 AsIs: e.Indent/32 AsIs: )/10 HalfReuse: s.Direction20 /13 HalfReuse: s.BracketNumber21 /15 } </38 Tile{ HalfReuse: & Symb/27 AsIs: s.VarNumber/26 HalfReuse: >/14 AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[34]);
          refalrts::copy_evar(vm, context[35], context[36], context[32], context[33]);
          refalrts::alloc_close_bracket(vm, context[37]);
          refalrts::alloc_open_call(vm, context[38]);
          refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z7]);
          refalrts::reinit_svar( context[13], context[20] );
          refalrts::reinit_svar( context[15], context[21] );
          refalrts::reinit_name(context[27], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[14]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[38] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::link_brackets( context[34], context[37] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[27];
          res = refalrts::splice_elem( res, context[38] );
          res = refalrts::splice_evar( res, context[0], context[15] );
          res = refalrts::splice_evar( res, context[34], context[37] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/32 )/10 (/13 # CmdVar/15 s.Direction/20 s.BracketNumber/21 't'/27 s.VarNumber/26 )/14 >/1
          context[32] = context[30];
          context[33] = context[31];
          if( ! refalrts::char_term( 't', context[27] ) )
            continue;
          // closed e.Indent as range 32
          //DEBUG: s.Direction: 20
          //DEBUG: s.BracketNumber: 21
          //DEBUG: s.VarNumber: 26
          //DEBUG: e.Indent: 32

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Direction/20 s.BracketNumber/21 {REMOVED TILE}
          //RESULT: Tile{ [[ } (/34 e.Indent/32/35 )/37 Tile{ AsIs: </0 Reuse: & PrintMatch@8/4 AsIs: (/9 AsIs: e.Indent/32 AsIs: )/10 HalfReuse: s.Direction20 /13 HalfReuse: s.BracketNumber21 /15 } </38 Tile{ HalfReuse: & Symb/27 AsIs: s.VarNumber/26 HalfReuse: >/14 AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[34]);
          refalrts::copy_evar(vm, context[35], context[36], context[32], context[33]);
          refalrts::alloc_close_bracket(vm, context[37]);
          refalrts::alloc_open_call(vm, context[38]);
          refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z8]);
          refalrts::reinit_svar( context[13], context[20] );
          refalrts::reinit_svar( context[15], context[21] );
          refalrts::reinit_name(context[27], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[14]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[38] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::link_brackets( context[34], context[37] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[27];
          res = refalrts::splice_elem( res, context[38] );
          res = refalrts::splice_evar( res, context[0], context[15] );
          res = refalrts::splice_evar( res, context[34], context[37] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/32 )/10 (/13 # CmdVar/15 s.Direction/20 s.BracketNumber/21 s.Mode/27 s.VarNumber/26 )/14 >/1
        context[32] = context[30];
        context[33] = context[31];
        // closed e.Indent as range 32
        //DEBUG: s.Direction: 20
        //DEBUG: s.BracketNumber: 21
        //DEBUG: s.Mode: 27
        //DEBUG: s.VarNumber: 26
        //DEBUG: e.Indent: 32

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Direction/20 s.BracketNumber/21 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/34 e.Indent/32/35 )/37 Tile{ AsIs: </0 Reuse: & PrintMatch@9/4 AsIs: (/9 AsIs: e.Indent/32 AsIs: )/10 HalfReuse: s.Direction20 /13 HalfReuse: s.BracketNumber21 /15 } (/38 </39 & VarMatchFunction*2/40 Tile{ AsIs: s.Mode/27 } >/41 )/42 </43 & Symb/44 Tile{ AsIs: s.VarNumber/26 HalfReuse: >/14 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[34]);
        refalrts::copy_evar(vm, context[35], context[36], context[32], context[33]);
        refalrts::alloc_close_bracket(vm, context[37]);
        refalrts::alloc_open_bracket(vm, context[38]);
        refalrts::alloc_open_call(vm, context[39]);
        refalrts::alloc_name(vm, context[40], functions[efunc_gen_VarMatchFunction_D2]);
        refalrts::alloc_close_call(vm, context[41]);
        refalrts::alloc_close_bracket(vm, context[42]);
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::alloc_name(vm, context[44], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z9]);
        refalrts::reinit_svar( context[13], context[20] );
        refalrts::reinit_svar( context[15], context[21] );
        refalrts::reinit_close_call(context[14]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[43] );
        refalrts::link_brackets( context[38], context[42] );
        refalrts::push_stack( vm, context[41] );
        refalrts::push_stack( vm, context[39] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::link_brackets( context[34], context[37] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[26];
        res = refalrts::splice_evar( res, context[41], context[44] );
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_evar( res, context[38], context[40] );
        res = refalrts::splice_evar( res, context[0], context[15] );
        res = refalrts::splice_evar( res, context[34], context[37] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.new22/30 )/10 (/13 # CmdVarSave/15 s.new23/20 s.new24/21 s.new26/27 s.new25/26 )/14 >/1
      context[30] = context[28];
      context[31] = context[29];
      if( ! refalrts::ident_term( identifiers[ident_CmdVarSave], context[15] ) )
        continue;
      // closed e.new22 as range 30
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/32 )/10 (/13 # CmdVarSave/15 s.Direction/20 s.BracketNumber/21 't'/27 s.VarNumber/26 )/14 >/1
        context[32] = context[30];
        context[33] = context[31];
        if( ! refalrts::char_term( 't', context[27] ) )
          continue;
        // closed e.Indent as range 32
        //DEBUG: s.Direction: 20
        //DEBUG: s.BracketNumber: 21
        //DEBUG: s.VarNumber: 26
        //DEBUG: e.Indent: 32

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/34 e.Indent/32/35 )/37 Tile{ AsIs: </0 Reuse: & PrintMatchSave/4 AsIs: (/9 AsIs: e.Indent/32 AsIs: )/10 HalfReuse: </13 HalfReuse: & Add/15 } 1/38 Tile{ AsIs: s.VarNumber/26 } >/39 Tile{ AsIs: s.Direction/20 AsIs: s.BracketNumber/21 HalfReuse: (/27 }"tvar"/40 )/42"context["/43 </45 & Symb/46 s.VarNumber/26/47 >/48 Tile{ HalfReuse: ']'/14 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[34]);
        refalrts::copy_evar(vm, context[35], context[36], context[32], context[33]);
        refalrts::alloc_close_bracket(vm, context[37]);
        refalrts::alloc_number(vm, context[38], 1UL);
        refalrts::alloc_close_call(vm, context[39]);
        refalrts::alloc_chars(vm, context[40], context[41], "tvar", 4);
        refalrts::alloc_close_bracket(vm, context[42]);
        refalrts::alloc_chars(vm, context[43], context[44], "context[", 8);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_Symb]);
        refalrts::copy_stvar(vm, context[47], context[26]);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::update_name(context[4], functions[efunc_PrintMatchSave]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[15], functions[efunc_Add]);
        refalrts::reinit_open_bracket(context[27]);
        refalrts::reinit_char(context[14], ']');
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[45] );
        refalrts::link_brackets( context[27], context[42] );
        refalrts::push_stack( vm, context[39] );
        refalrts::push_stack( vm, context[13] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::link_brackets( context[34], context[37] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[40], context[48] );
        res = refalrts::splice_evar( res, context[20], context[27] );
        res = refalrts::splice_elem( res, context[39] );
        res = refalrts::splice_elem( res, context[26] );
        res = refalrts::splice_elem( res, context[38] );
        res = refalrts::splice_evar( res, context[0], context[15] );
        res = refalrts::splice_evar( res, context[34], context[37] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/32 )/10 (/13 # CmdVarSave/15 s.Direction/20 s.BracketNumber/21 s.Mode/27 s.VarNumber/26 )/14 >/1
      context[32] = context[30];
      context[33] = context[31];
      // closed e.Indent as range 32
      //DEBUG: s.Direction: 20
      //DEBUG: s.BracketNumber: 21
      //DEBUG: s.Mode: 27
      //DEBUG: s.VarNumber: 26
      //DEBUG: e.Indent: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Direction/20 s.BracketNumber/21 {REMOVED TILE} s.VarNumber/26 {REMOVED TILE}
      //RESULT: Tile{ [[ } (/34 e.Indent/32/35 )/37 Tile{ AsIs: </0 Reuse: & PrintMatchSTVarSave*1/4 AsIs: (/9 AsIs: e.Indent/32 AsIs: )/10 HalfReuse: s.Direction20 /13 HalfReuse: s.BracketNumber21 /15 } Tile{ AsIs: s.Mode/27 } Tile{ HalfReuse: s.VarNumber26 /14 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[34]);
      refalrts::copy_evar(vm, context[35], context[36], context[32], context[33]);
      refalrts::alloc_close_bracket(vm, context[37]);
      refalrts::update_name(context[4], functions[efunc_gen_PrintMatchSTVarSave_D1]);
      refalrts::reinit_svar( context[13], context[20] );
      refalrts::reinit_svar( context[15], context[21] );
      refalrts::reinit_svar( context[14], context[26] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[34], context[37] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[0], context[15] );
      res = refalrts::splice_evar( res, context[34], context[37] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Native/4 (/9 e.new16/28 )/10 (/13 # CmdRepeated/15 s.new17/20 s.new18/21 s.new21/32 s.new20/27 s.new19/26 )/14 >/1
    context[28] = context[22];
    context[29] = context[23];
    context[30] = context[24];
    context[31] = context[25];
    if( ! refalrts::ident_term( identifiers[ident_CmdRepeated], context[15] ) )
      continue;
    // closed e.new16 as range 28
    if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
      continue;
    if( ! refalrts::empty_seq( context[30], context[31] ) )
      continue;
    do {
      // </0 & GenCommand-Native/4 (/9 e.Indent/33 )/10 (/13 # CmdRepeated/15 s.Direction/20 s.BracketNumber/21 'e'/32 s.Var/27 s.Sample/26 )/14 >/1
      context[33] = context[28];
      context[34] = context[29];
      if( ! refalrts::char_term( 'e', context[32] ) )
        continue;
      // closed e.Indent as range 33
      //DEBUG: s.Direction: 20
      //DEBUG: s.BracketNumber: 21
      //DEBUG: s.Var: 27
      //DEBUG: s.Sample: 26
      //DEBUG: e.Indent: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Direction/20 s.BracketNumber/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/35 e.Indent/33/36 )/38 Tile{ AsIs: </0 Reuse: & PrintMatch-VM@1/4 AsIs: (/9 AsIs: e.Indent/33 AsIs: )/10 HalfReuse: s.Direction20 /13 HalfReuse: s.BracketNumber21 /15 } (/39 </40 Tile{ HalfReuse: & Symb/32 AsIs: s.Var/27 } >/41 )/42 (/43 </44 & Symb/45 </46 & Add/47 1/48 s.Var/27/49 >/50 >/51 )/52 (/53 </54 & Symb/55 s.Sample/26/56 >/57 )/58 </59 & Symb/60 </61 & Add/62 1/63 Tile{ AsIs: s.Sample/26 HalfReuse: >/14 AsIs: >/1 } >/64 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::copy_evar(vm, context[36], context[37], context[33], context[34]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_close_call(vm, context[41]);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::alloc_open_bracket(vm, context[43]);
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[46]);
      refalrts::alloc_name(vm, context[47], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[48], 1UL);
      refalrts::copy_stvar(vm, context[49], context[27]);
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::alloc_close_call(vm, context[51]);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::alloc_open_bracket(vm, context[53]);
      refalrts::alloc_open_call(vm, context[54]);
      refalrts::alloc_name(vm, context[55], functions[efunc_Symb]);
      refalrts::copy_stvar(vm, context[56], context[26]);
      refalrts::alloc_close_call(vm, context[57]);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_open_call(vm, context[59]);
      refalrts::alloc_name(vm, context[60], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[61]);
      refalrts::alloc_name(vm, context[62], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[63], 1UL);
      refalrts::alloc_close_call(vm, context[64]);
      refalrts::update_name(context[4], functions[efunc_gen_PrintMatchm_VM_Z1]);
      refalrts::reinit_svar( context[13], context[20] );
      refalrts::reinit_svar( context[15], context[21] );
      refalrts::reinit_name(context[32], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[64] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[59] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[61] );
      refalrts::link_brackets( context[53], context[58] );
      refalrts::push_stack( vm, context[57] );
      refalrts::push_stack( vm, context[54] );
      refalrts::link_brackets( context[43], context[52] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[46] );
      refalrts::link_brackets( context[39], context[42] );
      refalrts::push_stack( vm, context[41] );
      refalrts::push_stack( vm, context[40] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[35], context[38] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[64] );
      res = refalrts::splice_evar( res, context[26], context[1] );
      res = refalrts::splice_evar( res, context[41], context[63] );
      res = refalrts::splice_evar( res, context[32], context[27] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[0], context[15] );
      res = refalrts::splice_evar( res, context[35], context[38] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.new22/33 )/10 (/13 # CmdRepeated/15 # AlgTerm/20 s.new23/21 s.new26/32 s.new25/27 s.new24/26 )/14 >/1
      context[33] = context[28];
      context[34] = context[29];
      if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[20] ) )
        continue;
      // closed e.new22 as range 33
      do {
        // </0 & GenCommand-Native/4 (/9 ' '/37 ' '/38 )/10 (/13 # CmdRepeated/15 # AlgTerm/20 s.BracketNumber/21 s.Mode/32 s.Var/27 s.Sample/26 )/14 >/1
        context[35] = context[33];
        context[36] = context[34];
        context[37] = refalrts::char_left( ' ', context[35], context[36] );
        if( ! context[37] )
          continue;
        context[38] = refalrts::char_left( ' ', context[35], context[36] );
        if( ! context[38] )
          continue;
        if( ! refalrts::empty_seq( context[35], context[36] ) )
          continue;
        //DEBUG: s.BracketNumber: 21
        //DEBUG: s.Mode: 32
        //DEBUG: s.Var: 27
        //DEBUG: s.Sample: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.BracketNumber/21 s.Mode/32 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: ' '/37 AsIs: ' '/38 AsIs: )/10 AsIs: (/13 HalfReuse: ' '/15 HalfReuse: ' '/20 }"if( ! refalrts::repeated_stvar_term( vm, context["/39 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.Var/27 } >/41"], context["/42 </44 & Symb/45 Tile{ AsIs: s.Sample/26 HalfReuse: >/14 HalfReuse: ']'/1 }" ) )"/46 )/48 (/49"    return refalrts::cRecognitionImpossible;"/50 )/52 Tile{ ]] }
        refalrts::alloc_chars(vm, context[39], context[40], "if( ! refalrts::repeated_stvar_term( vm, context[", 49);
        refalrts::alloc_close_call(vm, context[41]);
        refalrts::alloc_chars(vm, context[42], context[43], "], context[", 11);
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_Symb]);
        refalrts::alloc_chars(vm, context[46], context[47], " ) )", 4);
        refalrts::alloc_close_bracket(vm, context[48]);
        refalrts::alloc_open_bracket(vm, context[49]);
        refalrts::alloc_chars(vm, context[50], context[51], "    return refalrts::cRecognitionImpossible;", 44);
        refalrts::alloc_close_bracket(vm, context[52]);
        refalrts::reinit_char(context[15], ' ');
        refalrts::reinit_char(context[20], ' ');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ']');
        refalrts::link_brackets( context[49], context[52] );
        refalrts::link_brackets( context[13], context[48] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[41] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[46], context[52] );
        res = refalrts::splice_evar( res, context[26], context[1] );
        res = refalrts::splice_evar( res, context[41], context[45] );
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[9], context[20] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/35 )/10 (/13 # CmdRepeated/15 # AlgTerm/20 s.BracketNumber/21 s.Mode/32 s.Var/27 s.Sample/26 )/14 >/1
      context[35] = context[33];
      context[36] = context[34];
      // closed e.Indent as range 35
      //DEBUG: s.BracketNumber: 21
      //DEBUG: s.Mode: 32
      //DEBUG: s.Var: 27
      //DEBUG: s.Sample: 26
      //DEBUG: e.Indent: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.BracketNumber/21 s.Mode/32 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/35 AsIs: )/10 AsIs: (/13 } e.Indent/35/37"if("/39 Tile{ HalfReuse: ' '/15 HalfReuse: '!'/20 }" refalrts::repeated_stvar_term( vm, context["/41 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.Var/27 } >/43"], context["/44 </46 & Symb/47 Tile{ AsIs: s.Sample/26 HalfReuse: >/14 HalfReuse: ']'/1 }" ) )"/48 )/50 (/51 e.Indent/35/52"  continue;"/54 )/56 Tile{ ]] }
      refalrts::copy_evar(vm, context[37], context[38], context[35], context[36]);
      refalrts::alloc_chars(vm, context[39], context[40], "if(", 3);
      refalrts::alloc_chars(vm, context[41], context[42], " refalrts::repeated_stvar_term( vm, context[", 44);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_chars(vm, context[44], context[45], "], context[", 11);
      refalrts::alloc_open_call(vm, context[46]);
      refalrts::alloc_name(vm, context[47], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[48], context[49], " ) )", 4);
      refalrts::alloc_close_bracket(vm, context[50]);
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::copy_evar(vm, context[52], context[53], context[35], context[36]);
      refalrts::alloc_chars(vm, context[54], context[55], "  continue;", 11);
      refalrts::alloc_close_bracket(vm, context[56]);
      refalrts::reinit_char(context[15], ' ');
      refalrts::reinit_char(context[20], '!');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ']');
      refalrts::link_brackets( context[51], context[56] );
      refalrts::link_brackets( context[13], context[50] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[48], context[56] );
      res = refalrts::splice_evar( res, context[26], context[1] );
      res = refalrts::splice_evar( res, context[43], context[47] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[15], context[20] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Native/4 (/9 e.Indent/33 )/10 (/13 # CmdRepeated/15 s.Direction/20 s.BracketNumber/21 s.Mode/32 s.Var/27 s.Sample/26 )/14 >/1
    context[33] = context[28];
    context[34] = context[29];
    // closed e.Indent as range 33
    //DEBUG: s.Direction: 20
    //DEBUG: s.BracketNumber: 21
    //DEBUG: s.Mode: 32
    //DEBUG: s.Var: 27
    //DEBUG: s.Sample: 26
    //DEBUG: e.Indent: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Direction/20 s.BracketNumber/21 s.Mode/32 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/35 e.Indent/33/36 )/38 Tile{ AsIs: </0 Reuse: & PrintMatch-VM@2/4 AsIs: (/9 AsIs: e.Indent/33 AsIs: )/10 HalfReuse: s.Direction20 /13 HalfReuse: s.BracketNumber21 /15 } (/39 </40 & Symb/41 Tile{ AsIs: s.Var/27 } >/42 )/43 </44 & Symb/45 Tile{ AsIs: s.Sample/26 HalfReuse: >/14 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[35]);
    refalrts::copy_evar(vm, context[36], context[37], context[33], context[34]);
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[42]);
    refalrts::alloc_close_bracket(vm, context[43]);
    refalrts::alloc_open_call(vm, context[44]);
    refalrts::alloc_name(vm, context[45], functions[efunc_Symb]);
    refalrts::update_name(context[4], functions[efunc_gen_PrintMatchm_VM_Z2]);
    refalrts::reinit_svar( context[13], context[20] );
    refalrts::reinit_svar( context[15], context[21] );
    refalrts::reinit_close_call(context[14]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[44] );
    refalrts::link_brackets( context[39], context[43] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[40] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::link_brackets( context[35], context[38] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[26];
    res = refalrts::splice_evar( res, context[42], context[45] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[39], context[41] );
    res = refalrts::splice_evar( res, context[0], context[15] );
    res = refalrts::splice_evar( res, context[35], context[38] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Native/4 (/9 e.new1/7 )/10 (/13 s.new2/15 e.new3/11 )/14 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[5], context[6] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    // closed e.new1 as range 7
    if( ! refalrts::svar_left( context[15], context[11], context[12] ) )
      continue;
    // closed e.new3 as range 11
    do {
      // </0 & GenCommand-Native/4 (/9 e.new4/16 )/10 (/13 s.new5/15 e.new6/18 s.new7/21 s.new8/20 )/14 >/1
      context[16] = context[7];
      context[17] = context[8];
      context[18] = context[11];
      context[19] = context[12];
      // closed e.new4 as range 16
      if( ! refalrts::svar_right( context[20], context[18], context[19] ) )
        continue;
      if( ! refalrts::svar_right( context[21], context[18], context[19] ) )
        continue;
      // closed e.new6 as range 18
      do {
        // </0 & GenCommand-Native/4 (/9 e.new9/22 )/10 (/13 s.new10/15 e.new13/24 s.new14/26 s.new12/21 s.new11/20 )/14 >/1
        context[22] = context[16];
        context[23] = context[17];
        context[24] = context[18];
        context[25] = context[19];
        // closed e.new9 as range 22
        if( ! refalrts::svar_right( context[26], context[24], context[25] ) )
          continue;
        // closed e.new13 as range 24
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdRepeatedTVarSave/15 s.Direction/31 s.BracketNumber/26 s.Var/21 s.Sample/20 )/14 >/1
          context[27] = context[22];
          context[28] = context[23];
          context[29] = context[24];
          context[30] = context[25];
          if( ! refalrts::ident_term( identifiers[ident_CmdRepeatedTVarSave], context[15] ) )
            continue;
          // closed e.Indent as range 27
          if( ! refalrts::svar_left( context[31], context[29], context[30] ) )
            continue;
          if( ! refalrts::empty_seq( context[29], context[30] ) )
            continue;
          //DEBUG: s.BracketNumber: 26
          //DEBUG: s.Var: 21
          //DEBUG: s.Sample: 20
          //DEBUG: e.Indent: 27
          //DEBUG: s.Direction: 31

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } (/32 e.Indent/27/33 )/35 Tile{ AsIs: </0 Reuse: & PrintMatchSave-VM/4 AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 HalfReuse: </13 HalfReuse: & Add/15 } 1/36 Tile{ AsIs: s.Var/21 } >/37 Tile{ AsIs: s.Direction/31 AsIs: s.BracketNumber/26 } (/38"repeated_stvar"/39 )/41"context["/42 </44 & Symb/45 s.Var/21/46 >/47"], context["/48 </50 & Symb/51 Tile{ AsIs: s.Sample/20 } >/52 Tile{ HalfReuse: ']'/14 AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[32]);
          refalrts::copy_evar(vm, context[33], context[34], context[27], context[28]);
          refalrts::alloc_close_bracket(vm, context[35]);
          refalrts::alloc_number(vm, context[36], 1UL);
          refalrts::alloc_close_call(vm, context[37]);
          refalrts::alloc_open_bracket(vm, context[38]);
          refalrts::alloc_chars(vm, context[39], context[40], "repeated_stvar", 14);
          refalrts::alloc_close_bracket(vm, context[41]);
          refalrts::alloc_chars(vm, context[42], context[43], "context[", 8);
          refalrts::alloc_open_call(vm, context[44]);
          refalrts::alloc_name(vm, context[45], functions[efunc_Symb]);
          refalrts::copy_stvar(vm, context[46], context[21]);
          refalrts::alloc_close_call(vm, context[47]);
          refalrts::alloc_chars(vm, context[48], context[49], "], context[", 11);
          refalrts::alloc_open_call(vm, context[50]);
          refalrts::alloc_name(vm, context[51], functions[efunc_Symb]);
          refalrts::alloc_close_call(vm, context[52]);
          refalrts::update_name(context[4], functions[efunc_PrintMatchSavem_VM]);
          refalrts::reinit_open_call(context[13]);
          refalrts::reinit_name(context[15], functions[efunc_Add]);
          refalrts::reinit_char(context[14], ']');
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[52] );
          refalrts::push_stack( vm, context[50] );
          refalrts::push_stack( vm, context[47] );
          refalrts::push_stack( vm, context[44] );
          refalrts::link_brackets( context[38], context[41] );
          refalrts::push_stack( vm, context[37] );
          refalrts::push_stack( vm, context[13] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::link_brackets( context[32], context[35] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          res = refalrts::splice_elem( res, context[52] );
          res = refalrts::splice_elem( res, context[20] );
          res = refalrts::splice_evar( res, context[38], context[51] );
          res = refalrts::splice_evar( res, context[31], context[26] );
          res = refalrts::splice_elem( res, context[37] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_elem( res, context[36] );
          res = refalrts::splice_evar( res, context[0], context[15] );
          res = refalrts::splice_evar( res, context[32], context[35] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.new15/27 )/10 (/13 s.new16/15 # AlgLeft/26 s.new18/21 s.new17/20 )/14 >/1
        context[27] = context[22];
        context[28] = context[23];
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[26] ) )
          continue;
        if( ! refalrts::empty_seq( context[24], context[25] ) )
          continue;
        // closed e.new15 as range 27
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/29 )/10 (/13 # CmdOpenedE-Start/15 # AlgLeft/26 s.BracketNumber/21 s.VarNumber/20 )/14 >/1
          context[29] = context[27];
          context[30] = context[28];
          if( ! refalrts::ident_term( identifiers[ident_CmdOpenedEm_Start], context[15] ) )
            continue;
          // closed e.Indent as range 29
          //DEBUG: s.BracketNumber: 21
          //DEBUG: s.VarNumber: 20
          //DEBUG: e.Indent: 29

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.BracketNumber/21 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } (/31 e.Indent/29/32 ' '/34 Tile{ HalfReuse: ' '/0 HalfReuse: )/4 AsIs: (/9 AsIs: e.Indent/29 HalfReuse: 'c'/10 HalfReuse: 'o'/13 HalfReuse: 'n'/15 HalfReuse: 't'/26 }"ext["/35 </37 & Symb/38 s.VarNumber/20/39 >/40"] = 0;"/41 )/43 (/44 e.Indent/29/45"context["/47 </49 & Symb/50 </51 & Add/52 1/53 Tile{ AsIs: s.VarNumber/20 HalfReuse: >/14 AsIs: >/1 }"] = 0;"/54 )/56 (/57 e.Indent/29/58"refalrts::start_e_loop(vm);"/60 )/62 (/63 e.Indent/29/64"do {"/66 )/68 Tile{ ]] }
          refalrts::alloc_open_bracket(vm, context[31]);
          refalrts::copy_evar(vm, context[32], context[33], context[29], context[30]);
          refalrts::alloc_char(vm, context[34], ' ');
          refalrts::alloc_chars(vm, context[35], context[36], "ext[", 4);
          refalrts::alloc_open_call(vm, context[37]);
          refalrts::alloc_name(vm, context[38], functions[efunc_Symb]);
          refalrts::copy_stvar(vm, context[39], context[20]);
          refalrts::alloc_close_call(vm, context[40]);
          refalrts::alloc_chars(vm, context[41], context[42], "] = 0;", 6);
          refalrts::alloc_close_bracket(vm, context[43]);
          refalrts::alloc_open_bracket(vm, context[44]);
          refalrts::copy_evar(vm, context[45], context[46], context[29], context[30]);
          refalrts::alloc_chars(vm, context[47], context[48], "context[", 8);
          refalrts::alloc_open_call(vm, context[49]);
          refalrts::alloc_name(vm, context[50], functions[efunc_Symb]);
          refalrts::alloc_open_call(vm, context[51]);
          refalrts::alloc_name(vm, context[52], functions[efunc_Add]);
          refalrts::alloc_number(vm, context[53], 1UL);
          refalrts::alloc_chars(vm, context[54], context[55], "] = 0;", 6);
          refalrts::alloc_close_bracket(vm, context[56]);
          refalrts::alloc_open_bracket(vm, context[57]);
          refalrts::copy_evar(vm, context[58], context[59], context[29], context[30]);
          refalrts::alloc_chars(vm, context[60], context[61], "refalrts::start_e_loop(vm);", 27);
          refalrts::alloc_close_bracket(vm, context[62]);
          refalrts::alloc_open_bracket(vm, context[63]);
          refalrts::copy_evar(vm, context[64], context[65], context[29], context[30]);
          refalrts::alloc_chars(vm, context[66], context[67], "do {", 4);
          refalrts::alloc_close_bracket(vm, context[68]);
          refalrts::reinit_char(context[0], ' ');
          refalrts::reinit_close_bracket(context[4]);
          refalrts::reinit_char(context[10], 'c');
          refalrts::reinit_char(context[13], 'o');
          refalrts::reinit_char(context[15], 'n');
          refalrts::reinit_char(context[26], 't');
          refalrts::reinit_close_call(context[14]);
          refalrts::link_brackets( context[63], context[68] );
          refalrts::link_brackets( context[57], context[62] );
          refalrts::link_brackets( context[44], context[56] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[49] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[51] );
          refalrts::link_brackets( context[9], context[43] );
          refalrts::push_stack( vm, context[40] );
          refalrts::push_stack( vm, context[37] );
          refalrts::link_brackets( context[31], context[4] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[54], context[68] );
          res = refalrts::splice_evar( res, context[20], context[1] );
          res = refalrts::splice_evar( res, context[35], context[53] );
          res = refalrts::splice_evar( res, context[0], context[26] );
          res = refalrts::splice_evar( res, context[31], context[34] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/29 ' '/32 ' '/31 )/10 (/13 # CmdOpenedE-End/15 # AlgLeft/26 s.BracketNumber/21 s.VarNumber/20 )/14 >/1
        context[29] = context[27];
        context[30] = context[28];
        if( ! refalrts::ident_term( identifiers[ident_CmdOpenedEm_End], context[15] ) )
          continue;
        context[31] = refalrts::char_right( ' ', context[29], context[30] );
        if( ! context[31] )
          continue;
        context[32] = refalrts::char_right( ' ', context[29], context[30] );
        if( ! context[32] )
          continue;
        // closed e.Indent as range 29
        //DEBUG: s.BracketNumber: 21
        //DEBUG: s.VarNumber: 20
        //DEBUG: e.Indent: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 } e.Indent/29/33 Tile{ HalfReuse: )/4 AsIs: (/9 AsIs: e.Indent/29 Reuse: '}'/32 AsIs: ' '/31 HalfReuse: 'w'/10 HalfReuse: 'h'/13 HalfReuse: 'i'/15 HalfReuse: 'l'/26 }"e ( refalrts::open_evar_advance( context["/35 </37 & Symb/38 s.VarNumber/20/39 >/40"], context["/41 </43 & Symb/44 </45 & Add/46 1/47 Tile{ AsIs: s.VarNumber/20 HalfReuse: >/14 AsIs: >/1 }"], context["/48 </50 & Symb/51 Tile{ AsIs: s.BracketNumber/21 } >/52"], context["/53 </55 & Symb/56 </57 & Add/58 1/59 s.BracketNumber/21/60 >/61 >/62"] ) );"/63 )/65 Tile{ ]] }
        refalrts::copy_evar(vm, context[33], context[34], context[29], context[30]);
        refalrts::alloc_chars(vm, context[35], context[36], "e ( refalrts::open_evar_advance( context[", 41);
        refalrts::alloc_open_call(vm, context[37]);
        refalrts::alloc_name(vm, context[38], functions[efunc_Symb]);
        refalrts::copy_stvar(vm, context[39], context[20]);
        refalrts::alloc_close_call(vm, context[40]);
        refalrts::alloc_chars(vm, context[41], context[42], "], context[", 11);
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::alloc_name(vm, context[44], functions[efunc_Symb]);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[47], 1UL);
        refalrts::alloc_chars(vm, context[48], context[49], "], context[", 11);
        refalrts::alloc_open_call(vm, context[50]);
        refalrts::alloc_name(vm, context[51], functions[efunc_Symb]);
        refalrts::alloc_close_call(vm, context[52]);
        refalrts::alloc_chars(vm, context[53], context[54], "], context[", 11);
        refalrts::alloc_open_call(vm, context[55]);
        refalrts::alloc_name(vm, context[56], functions[efunc_Symb]);
        refalrts::alloc_open_call(vm, context[57]);
        refalrts::alloc_name(vm, context[58], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[59], 1UL);
        refalrts::copy_stvar(vm, context[60], context[21]);
        refalrts::alloc_close_call(vm, context[61]);
        refalrts::alloc_close_call(vm, context[62]);
        refalrts::alloc_chars(vm, context[63], context[64], "] ) );", 6);
        refalrts::alloc_close_bracket(vm, context[65]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_close_bracket(context[4]);
        refalrts::update_char(context[32], '}');
        refalrts::reinit_char(context[10], 'w');
        refalrts::reinit_char(context[13], 'h');
        refalrts::reinit_char(context[15], 'i');
        refalrts::reinit_char(context[26], 'l');
        refalrts::reinit_close_call(context[14]);
        refalrts::link_brackets( context[9], context[65] );
        refalrts::push_stack( vm, context[62] );
        refalrts::push_stack( vm, context[55] );
        refalrts::push_stack( vm, context[61] );
        refalrts::push_stack( vm, context[57] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[50] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[40] );
        refalrts::push_stack( vm, context[37] );
        refalrts::link_brackets( context[0], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[52], context[65] );
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_evar( res, context[48], context[51] );
        res = refalrts::splice_evar( res, context[20], context[1] );
        res = refalrts::splice_evar( res, context[35], context[47] );
        res = refalrts::splice_evar( res, context[4], context[26] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/22 )/10 (/13 # CmdSave/15 s.OldBracketNumber/21 s.NewBracketNumber/20 )/14 >/1
      context[22] = context[16];
      context[23] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_CmdSave], context[15] ) )
        continue;
      if( ! refalrts::empty_seq( context[18], context[19] ) )
        continue;
      // closed e.Indent as range 22
      //DEBUG: s.OldBracketNumber: 21
      //DEBUG: s.NewBracketNumber: 20
      //DEBUG: e.Indent: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 AsIs: )/10 AsIs: (/13 } e.Indent/22/24"context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } s.NewBracketNumber/20/28 >/29"] = context["/30 </32 Tile{ HalfReuse: & Symb/15 AsIs: s.OldBracketNumber/21 } >/33"];"/34 )/36 (/37 e.Indent/22/38"context["/40 </42 & Symb/43 </44 & Add/45 1/46 Tile{ AsIs: s.NewBracketNumber/20 HalfReuse: >/14 AsIs: >/1 }"] = context["/47 </49 & Symb/50 </51 & Add/52 1/53 s.OldBracketNumber/21/54 >/55 >/56"];"/57 )/59 Tile{ ]] }
      refalrts::copy_evar(vm, context[24], context[25], context[22], context[23]);
      refalrts::alloc_chars(vm, context[26], context[27], "context[", 8);
      refalrts::copy_stvar(vm, context[28], context[20]);
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::alloc_chars(vm, context[30], context[31], "] = context[", 12);
      refalrts::alloc_open_call(vm, context[32]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_chars(vm, context[34], context[35], "];", 2);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::copy_evar(vm, context[38], context[39], context[22], context[23]);
      refalrts::alloc_chars(vm, context[40], context[41], "context[", 8);
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_name(vm, context[43], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[46], 1UL);
      refalrts::alloc_chars(vm, context[47], context[48], "] = context[", 12);
      refalrts::alloc_open_call(vm, context[49]);
      refalrts::alloc_name(vm, context[50], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[51]);
      refalrts::alloc_name(vm, context[52], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[53], 1UL);
      refalrts::copy_stvar(vm, context[54], context[21]);
      refalrts::alloc_close_call(vm, context[55]);
      refalrts::alloc_close_call(vm, context[56]);
      refalrts::alloc_chars(vm, context[57], context[58], "];", 2);
      refalrts::alloc_close_bracket(vm, context[59]);
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::reinit_name(context[15], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[14]);
      refalrts::link_brackets( context[37], context[59] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[49] );
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[44] );
      refalrts::link_brackets( context[13], context[36] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[47], context[59] );
      res = refalrts::splice_evar( res, context[20], context[1] );
      res = refalrts::splice_evar( res, context[33], context[46] );
      res = refalrts::splice_evar( res, context[15], context[21] );
      res = refalrts::splice_evar( res, context[28], context[32] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.Indent/16 )/10 (/13 # CmdResetAllocator/15 )/14 >/1
      context[16] = context[7];
      context[17] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_CmdResetAllocator], context[15] ) )
        continue;
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      // closed e.Indent as range 16
      //DEBUG: e.Indent: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/16 AsIs: )/10 AsIs: (/13 HalfReuse: )/15 HalfReuse: (/14 } e.Indent/16/18 'r'/20 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::reset_allocator(vm);"/21 Tile{ HalfReuse: )/1 ]] }
      refalrts::copy_evar(vm, context[18], context[19], context[16], context[17]);
      refalrts::alloc_char(vm, context[20], 'r');
      refalrts::alloc_chars(vm, context[21], context[22], "alrts::reset_allocator(vm);", 27);
      refalrts::reinit_close_bracket(context[15]);
      refalrts::reinit_open_bracket(context[14]);
      refalrts::reinit_char(context[0], 'e');
      refalrts::reinit_char(context[4], 'f');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[14], context[1] );
      refalrts::link_brackets( context[13], context[15] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Native/4 (/9 e.new4/16 )/10 (/13 s.new5/15 s.new6/20 e.new7/18 )/14 >/1
    context[16] = context[7];
    context[17] = context[8];
    context[18] = context[11];
    context[19] = context[12];
    // closed e.new4 as range 16
    if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
      continue;
    // closed e.new7 as range 18
    do {
      // </0 & GenCommand-Native/4 (/9 e.new8/21 )/10 (/13 # CmdSetRes/15 s.new9/20 )/14 >/1
      context[21] = context[16];
      context[22] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_CmdSetRes], context[15] ) )
        continue;
      if( ! refalrts::empty_seq( context[18], context[19] ) )
        continue;
      // closed e.new8 as range 21
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdSetRes/15 # ARG-BEGIN/20 )/14 >/1
        context[23] = context[21];
        context[24] = context[22];
        if( ! refalrts::ident_term( identifiers[ident_ARGm_BEGIN], context[20] ) )
          continue;
        // closed e.Indent as range 23
        //DEBUG: e.Indent: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 } e.Indent/23/25 Tile{ HalfReuse: )/4 AsIs: (/9 AsIs: e.Indent/23 HalfReuse: 'r'/10 HalfReuse: 'e'/13 HalfReuse: 'f'/15 HalfReuse: 'a'/20 HalfReuse: 'l'/14 HalfReuse: 'r'/1 }"ts::Iter res = arg_begin;"/27 )/29 Tile{ ]] }
        refalrts::copy_evar(vm, context[25], context[26], context[23], context[24]);
        refalrts::alloc_chars(vm, context[27], context[28], "ts::Iter res = arg_begin;", 25);
        refalrts::alloc_close_bracket(vm, context[29]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_close_bracket(context[4]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[13], 'e');
        refalrts::reinit_char(context[15], 'f');
        refalrts::reinit_char(context[20], 'a');
        refalrts::reinit_char(context[14], 'l');
        refalrts::reinit_char(context[1], 'r');
        refalrts::link_brackets( context[9], context[29] );
        refalrts::link_brackets( context[0], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[27], context[29] );
        res = refalrts::splice_evar( res, context[4], context[1] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdSetRes/15 # RIGHT-EDGE/20 )/14 >/1
        context[23] = context[21];
        context[24] = context[22];
        if( ! refalrts::ident_term( identifiers[ident_RIGHTm_EDGE], context[20] ) )
          continue;
        // closed e.Indent as range 23
        //DEBUG: e.Indent: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/25 e.Indent/23/26 )/28 (/29 e.Indent/23/30"refalrts::Iter trash_prev = arg_begin->prev"/32 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/9 AsIs: e.Indent/23 HalfReuse: 'r'/10 HalfReuse: 'e'/13 HalfReuse: 'f'/15 HalfReuse: 'a'/20 HalfReuse: 'l'/14 HalfReuse: 'r'/1 }"ts::use(trash_prev);"/34 )/36 (/37 e.Indent/23/38"refalrts::Iter res = arg_end->next;"/40 )/42 Tile{ ]] }
        refalrts::alloc_open_bracket(vm, context[25]);
        refalrts::copy_evar(vm, context[26], context[27], context[23], context[24]);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::alloc_open_bracket(vm, context[29]);
        refalrts::copy_evar(vm, context[30], context[31], context[23], context[24]);
        refalrts::alloc_chars(vm, context[32], context[33], "refalrts::Iter trash_prev = arg_begin->prev", 43);
        refalrts::alloc_chars(vm, context[34], context[35], "ts::use(trash_prev);", 20);
        refalrts::alloc_close_bracket(vm, context[36]);
        refalrts::alloc_open_bracket(vm, context[37]);
        refalrts::copy_evar(vm, context[38], context[39], context[23], context[24]);
        refalrts::alloc_chars(vm, context[40], context[41], "refalrts::Iter res = arg_end->next;", 35);
        refalrts::alloc_close_bracket(vm, context[42]);
        refalrts::reinit_char(context[0], ';');
        refalrts::reinit_close_bracket(context[4]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[13], 'e');
        refalrts::reinit_char(context[15], 'f');
        refalrts::reinit_char(context[20], 'a');
        refalrts::reinit_char(context[14], 'l');
        refalrts::reinit_char(context[1], 'r');
        refalrts::link_brackets( context[37], context[42] );
        refalrts::link_brackets( context[9], context[36] );
        refalrts::link_brackets( context[29], context[4] );
        refalrts::link_brackets( context[25], context[28] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[34], context[42] );
        res = refalrts::splice_evar( res, context[0], context[1] );
        res = refalrts::splice_evar( res, context[25], context[33] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdSetRes/15 s.Offset/20 )/14 >/1
      context[23] = context[21];
      context[24] = context[22];
      // closed e.Indent as range 23
      //DEBUG: s.Offset: 20
      //DEBUG: e.Indent: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/25 Tile{ HalfReuse: 'r'/4 }"efalrts::Iter trash_prev = arg_begin->prev;"/27 )/29 (/30 e.Indent/23/31"refalrts::use(trash_prev);"/33 )/35 (/36 e.Indent/23/37"refalrts::Iter res = context["/39 Tile{ AsIs: </0 } Tile{ HalfReuse: & Symb/15 AsIs: s.Offset/20 HalfReuse: >/14 HalfReuse: ']'/1 } ';'/41 )/42 Tile{ ]] }
      refalrts::copy_evar(vm, context[25], context[26], context[23], context[24]);
      refalrts::alloc_chars(vm, context[27], context[28], "efalrts::Iter trash_prev = arg_begin->prev;", 43);
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::alloc_open_bracket(vm, context[30]);
      refalrts::copy_evar(vm, context[31], context[32], context[23], context[24]);
      refalrts::alloc_chars(vm, context[33], context[34], "refalrts::use(trash_prev);", 26);
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::copy_evar(vm, context[37], context[38], context[23], context[24]);
      refalrts::alloc_chars(vm, context[39], context[40], "refalrts::Iter res = context[", 29);
      refalrts::alloc_char(vm, context[41], ';');
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::reinit_char(context[4], 'r');
      refalrts::reinit_name(context[15], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ']');
      refalrts::link_brackets( context[36], context[42] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[30], context[35] );
      refalrts::link_brackets( context[13], context[29] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[15], context[1] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[27], context[40] );
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Native/4 (/9 e.new8/21 )/10 (/13 s.new9/15 s.new10/20 s.new11/25 e.new12/23 )/14 >/1
    context[21] = context[16];
    context[22] = context[17];
    context[23] = context[18];
    context[24] = context[19];
    // closed e.new8 as range 21
    if( ! refalrts::svar_left( context[25], context[23], context[24] ) )
      continue;
    // closed e.new12 as range 23
    do {
      // </0 & GenCommand-Native/4 (/9 e.new13/26 )/10 (/13 # CmdCopyVar/15 s.new14/20 s.new15/25 s.new16/30 )/14 >/1
      context[26] = context[21];
      context[27] = context[22];
      context[28] = context[23];
      context[29] = context[24];
      if( ! refalrts::ident_term( identifiers[ident_CmdCopyVar], context[15] ) )
        continue;
      // closed e.new13 as range 26
      if( ! refalrts::svar_left( context[30], context[28], context[29] ) )
        continue;
      if( ! refalrts::empty_seq( context[28], context[29] ) )
        continue;
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/31 )/10 (/13 # CmdCopyVar/15 'e'/20 s.Target/25 s.Sample/30 )/14 >/1
        context[31] = context[26];
        context[32] = context[27];
        if( ! refalrts::char_term( 'e', context[20] ) )
          continue;
        // closed e.Indent as range 31
        //DEBUG: s.Target: 25
        //DEBUG: s.Sample: 30
        //DEBUG: e.Indent: 31

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/31 AsIs: )/10 AsIs: (/13 } e.Indent/31/33"refalrts::copy_evar(vm, context["/35 Tile{ AsIs: </0 Reuse: & Symb/4 } s.Target/25/37 >/38"], context["/39 </41 & Symb/42 </43 Tile{ HalfReuse: & Add/15 HalfReuse: 1/20 AsIs: s.Target/25 } >/44 >/45"], context["/46 </48 & Symb/49 s.Sample/30/50 >/51"], context["/52 </54 & Symb/55 </56 & Add/57 1/58 Tile{ AsIs: s.Sample/30 HalfReuse: >/14 AsIs: >/1 }"]);"/59 )/61 Tile{ ]] }
        refalrts::copy_evar(vm, context[33], context[34], context[31], context[32]);
        refalrts::alloc_chars(vm, context[35], context[36], "refalrts::copy_evar(vm, context[", 32);
        refalrts::copy_stvar(vm, context[37], context[25]);
        refalrts::alloc_close_call(vm, context[38]);
        refalrts::alloc_chars(vm, context[39], context[40], "], context[", 11);
        refalrts::alloc_open_call(vm, context[41]);
        refalrts::alloc_name(vm, context[42], functions[efunc_Symb]);
        refalrts::alloc_open_call(vm, context[43]);
        refalrts::alloc_close_call(vm, context[44]);
        refalrts::alloc_close_call(vm, context[45]);
        refalrts::alloc_chars(vm, context[46], context[47], "], context[", 11);
        refalrts::alloc_open_call(vm, context[48]);
        refalrts::alloc_name(vm, context[49], functions[efunc_Symb]);
        refalrts::copy_stvar(vm, context[50], context[30]);
        refalrts::alloc_close_call(vm, context[51]);
        refalrts::alloc_chars(vm, context[52], context[53], "], context[", 11);
        refalrts::alloc_open_call(vm, context[54]);
        refalrts::alloc_name(vm, context[55], functions[efunc_Symb]);
        refalrts::alloc_open_call(vm, context[56]);
        refalrts::alloc_name(vm, context[57], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[58], 1UL);
        refalrts::alloc_chars(vm, context[59], context[60], "]);", 3);
        refalrts::alloc_close_bracket(vm, context[61]);
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_name(context[15], functions[efunc_Add]);
        refalrts::reinit_number(context[20], 1UL);
        refalrts::reinit_close_call(context[14]);
        refalrts::link_brackets( context[13], context[61] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[56] );
        refalrts::push_stack( vm, context[51] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[41] );
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[38] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[59], context[61] );
        res = refalrts::splice_evar( res, context[30], context[1] );
        res = refalrts::splice_evar( res, context[44], context[58] );
        res = refalrts::splice_evar( res, context[15], context[25] );
        res = refalrts::splice_evar( res, context[37], context[43] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/31 )/10 (/13 # CmdCopyVar/15 s.Mode/20 s.Target/25 s.Sample/30 )/14 >/1
      context[31] = context[26];
      context[32] = context[27];
      // closed e.Indent as range 31
      //DEBUG: s.Mode: 20
      //DEBUG: s.Target: 25
      //DEBUG: s.Sample: 30
      //DEBUG: e.Indent: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Mode/20 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/31 AsIs: )/10 AsIs: (/13 } e.Indent/31/33"ref"/35 Tile{ HalfReuse: 'a'/15 }"lrts::copy_stvar(vm, context["/37 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.Target/25 } >/39"], context["/40 </42 & Symb/43 Tile{ AsIs: s.Sample/30 HalfReuse: >/14 HalfReuse: ']'/1 }");"/44 )/46 Tile{ ]] }
      refalrts::copy_evar(vm, context[33], context[34], context[31], context[32]);
      refalrts::alloc_chars(vm, context[35], context[36], "ref", 3);
      refalrts::alloc_chars(vm, context[37], context[38], "lrts::copy_stvar(vm, context[", 29);
      refalrts::alloc_close_call(vm, context[39]);
      refalrts::alloc_chars(vm, context[40], context[41], "], context[", 11);
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_name(vm, context[43], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[44], context[45], ");", 2);
      refalrts::alloc_close_bracket(vm, context[46]);
      refalrts::reinit_char(context[15], 'a');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ']');
      refalrts::link_brackets( context[13], context[46] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[39] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[44], context[46] );
      res = refalrts::splice_evar( res, context[30], context[1] );
      res = refalrts::splice_evar( res, context[39], context[43] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.Indent/26 )/10 (/13 # CmdReinitSVar/15 s.Offset/20 s.Sample/25 )/14 >/1
      context[26] = context[21];
      context[27] = context[22];
      if( ! refalrts::ident_term( identifiers[ident_CmdReinitSVar], context[15] ) )
        continue;
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      // closed e.Indent as range 26
      //DEBUG: s.Offset: 20
      //DEBUG: s.Sample: 25
      //DEBUG: e.Indent: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/26 AsIs: )/10 AsIs: (/13 } e.Indent/26/28"ref"/30 Tile{ HalfReuse: 'a'/15 }"lrts::reinit_svar( context["/32 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.Offset/20 } >/34"], context["/35 </37 & Symb/38 Tile{ AsIs: s.Sample/25 HalfReuse: >/14 HalfReuse: ']'/1 }" );"/39 )/41 Tile{ ]] }
      refalrts::copy_evar(vm, context[28], context[29], context[26], context[27]);
      refalrts::alloc_chars(vm, context[30], context[31], "ref", 3);
      refalrts::alloc_chars(vm, context[32], context[33], "lrts::reinit_svar( context[", 27);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::alloc_chars(vm, context[35], context[36], "], context[", 11);
      refalrts::alloc_open_call(vm, context[37]);
      refalrts::alloc_name(vm, context[38], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[39], context[40], " );", 3);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::reinit_char(context[15], 'a');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ']');
      refalrts::link_brackets( context[13], context[41] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[39], context[41] );
      res = refalrts::splice_evar( res, context[25], context[1] );
      res = refalrts::splice_evar( res, context[34], context[38] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Native/4 (/9 e.new13/26 )/10 (/13 # CmdCreateElem/15 s.new14/20 s.new15/25 s.new16/30 e.new17/28 )/14 >/1
    context[26] = context[21];
    context[27] = context[22];
    context[28] = context[23];
    context[29] = context[24];
    if( ! refalrts::ident_term( identifiers[ident_CmdCreateElem], context[15] ) )
      continue;
    // closed e.new13 as range 26
    if( ! refalrts::svar_left( context[30], context[28], context[29] ) )
      continue;
    // closed e.new17 as range 28
    do {
      // </0 & GenCommand-Native/4 (/9 e.new18/31 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.new19/25 s.new20/30 e.new21/33 )/14 >/1
      context[31] = context[26];
      context[32] = context[27];
      context[33] = context[28];
      context[34] = context[29];
      if( ! refalrts::ident_term( identifiers[ident_Allocate], context[20] ) )
        continue;
      // closed e.new18 as range 31
      // closed e.new21 as range 33
      do {
        // </0 & GenCommand-Native/4 (/9 e.new22/35 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.new23/25 # ElString/30 e.new24/37 )/14 >/1
        context[35] = context[31];
        context[36] = context[32];
        context[37] = context[33];
        context[38] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_ElString], context[30] ) )
          continue;
        // closed e.new22 as range 35
        // closed e.new24 as range 37
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElString/30 s.Char/43 e./41 )/14 >/1
          context[39] = context[35];
          context[40] = context[36];
          context[41] = context[37];
          context[42] = context[38];
          // closed e.Indent as range 39
          if( ! refalrts::svar_left( context[43], context[41], context[42] ) )
            continue;
          // closed e. as range 41
          //DEBUG: s.ElemNumber: 25
          //DEBUG: e.Indent: 39
          //DEBUG: s.Char: 43
          //DEBUG: e.: 41

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/44"refalrts::alloc_chars(vm, context["/46 Tile{ AsIs: </0 Reuse: & Symb/4 } s.ElemNumber/25/48 >/49"], "/50 </52 & ContextItem/53 </54 Tile{ HalfReuse: & Add/15 HalfReuse: 1/20 AsIs: s.ElemNumber/25 } >/55 >/56", \""/57 </59 Tile{ HalfReuse: & EscapeString/30 AsIs: s.Char/43 AsIs: e./41 HalfReuse: >/14 HalfReuse: '\"'/1 }", "/60 </62 & DoPrintLength/63 1/64 e./41/65 >/67");"/68 )/70 Tile{ ]] }
          refalrts::copy_evar(vm, context[44], context[45], context[39], context[40]);
          refalrts::alloc_chars(vm, context[46], context[47], "refalrts::alloc_chars(vm, context[", 34);
          refalrts::copy_stvar(vm, context[48], context[25]);
          refalrts::alloc_close_call(vm, context[49]);
          refalrts::alloc_chars(vm, context[50], context[51], "], ", 3);
          refalrts::alloc_open_call(vm, context[52]);
          refalrts::alloc_name(vm, context[53], functions[efunc_ContextItem]);
          refalrts::alloc_open_call(vm, context[54]);
          refalrts::alloc_close_call(vm, context[55]);
          refalrts::alloc_close_call(vm, context[56]);
          refalrts::alloc_chars(vm, context[57], context[58], ", \"", 3);
          refalrts::alloc_open_call(vm, context[59]);
          refalrts::alloc_chars(vm, context[60], context[61], ", ", 2);
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_DoPrintLength]);
          refalrts::alloc_number(vm, context[64], 1UL);
          refalrts::copy_evar(vm, context[65], context[66], context[41], context[42]);
          refalrts::alloc_close_call(vm, context[67]);
          refalrts::alloc_chars(vm, context[68], context[69], ");", 2);
          refalrts::alloc_close_bracket(vm, context[70]);
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_name(context[15], functions[efunc_Add]);
          refalrts::reinit_number(context[20], 1UL);
          refalrts::reinit_name(context[30], functions[efunc_EscapeString]);
          refalrts::reinit_close_call(context[14]);
          refalrts::reinit_char(context[1], '\"');
          refalrts::link_brackets( context[13], context[70] );
          refalrts::push_stack( vm, context[67] );
          refalrts::push_stack( vm, context[62] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[59] );
          refalrts::push_stack( vm, context[56] );
          refalrts::push_stack( vm, context[52] );
          refalrts::push_stack( vm, context[55] );
          refalrts::push_stack( vm, context[54] );
          refalrts::push_stack( vm, context[49] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[60], context[70] );
          res = refalrts::splice_evar( res, context[30], context[1] );
          res = refalrts::splice_evar( res, context[55], context[59] );
          res = refalrts::splice_evar( res, context[15], context[25] );
          res = refalrts::splice_evar( res, context[48], context[54] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElString/30 )/14 >/1
          context[39] = context[35];
          context[40] = context[36];
          if( ! refalrts::empty_seq( context[37], context[38] ) )
            continue;
          // closed e.Indent as range 39
          //DEBUG: s.ElemNumber: 25
          //DEBUG: e.Indent: 39

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/41"refalrts::alloc_chars(vm, context["/43 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 HalfReuse: ']'/14 HalfReuse: ','/1 } ' '/45 Tile{ AsIs: </0 Reuse: & ContextItem/4 } </46 & Add/47 1/48 s.ElemNumber/25/49 >/50 >/51", \""/52 </54 & EscapeString/55 >/56"\", 0);"/57 )/59 Tile{ ]] }
          refalrts::copy_evar(vm, context[41], context[42], context[39], context[40]);
          refalrts::alloc_chars(vm, context[43], context[44], "refalrts::alloc_chars(vm, context[", 34);
          refalrts::alloc_char(vm, context[45], ' ');
          refalrts::alloc_open_call(vm, context[46]);
          refalrts::alloc_name(vm, context[47], functions[efunc_Add]);
          refalrts::alloc_number(vm, context[48], 1UL);
          refalrts::copy_stvar(vm, context[49], context[25]);
          refalrts::alloc_close_call(vm, context[50]);
          refalrts::alloc_close_call(vm, context[51]);
          refalrts::alloc_chars(vm, context[52], context[53], ", \"", 3);
          refalrts::alloc_open_call(vm, context[54]);
          refalrts::alloc_name(vm, context[55], functions[efunc_EscapeString]);
          refalrts::alloc_close_call(vm, context[56]);
          refalrts::alloc_chars(vm, context[57], context[58], "\", 0);", 6);
          refalrts::alloc_close_bracket(vm, context[59]);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[20], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[30]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ',');
          refalrts::update_name(context[4], functions[efunc_ContextItem]);
          refalrts::link_brackets( context[13], context[59] );
          refalrts::push_stack( vm, context[56] );
          refalrts::push_stack( vm, context[54] );
          refalrts::push_stack( vm, context[51] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[50] );
          refalrts::push_stack( vm, context[46] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[46], context[59] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[45] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[43], context[44] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElString/30 e.String/41 )/14 >/1
        context[39] = context[35];
        context[40] = context[36];
        context[41] = context[37];
        context[42] = context[38];
        // closed e.Indent as range 39
        // closed e.String as range 41
        //DEBUG: s.ElemNumber: 25
        //DEBUG: e.Indent: 39
        //DEBUG: e.String: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/43"refalrts::alloc_chars(vm, context["/45 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 }"], "/47 Tile{ AsIs: </0 Reuse: & ContextItem/4 } </49 & Add/50 1/51 s.ElemNumber/25/52 >/53 >/54", \""/55 </57 & EscapeString/58 Tile{ AsIs: e.String/41 } >/59"\", "/60 </62 & DoPrintLength@0/63 0/64 e.String/41/65 >/67 ')'/68 Tile{ HalfReuse: ';'/14 HalfReuse: )/1 ]] }
        refalrts::copy_evar(vm, context[43], context[44], context[39], context[40]);
        refalrts::alloc_chars(vm, context[45], context[46], "refalrts::alloc_chars(vm, context[", 34);
        refalrts::alloc_chars(vm, context[47], context[48], "], ", 3);
        refalrts::alloc_open_call(vm, context[49]);
        refalrts::alloc_name(vm, context[50], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[51], 1UL);
        refalrts::copy_stvar(vm, context[52], context[25]);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::alloc_chars(vm, context[55], context[56], ", \"", 3);
        refalrts::alloc_open_call(vm, context[57]);
        refalrts::alloc_name(vm, context[58], functions[efunc_EscapeString]);
        refalrts::alloc_close_call(vm, context[59]);
        refalrts::alloc_chars(vm, context[60], context[61], "\", ", 3);
        refalrts::alloc_open_call(vm, context[62]);
        refalrts::alloc_name(vm, context[63], functions[efunc_gen_DoPrintLength_Z0]);
        refalrts::alloc_number(vm, context[64], 0UL);
        refalrts::copy_evar(vm, context[65], context[66], context[41], context[42]);
        refalrts::alloc_close_call(vm, context[67]);
        refalrts::alloc_char(vm, context[68], ')');
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[20], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[30]);
        refalrts::update_name(context[4], functions[efunc_ContextItem]);
        refalrts::reinit_char(context[14], ';');
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[13], context[1] );
        refalrts::push_stack( vm, context[67] );
        refalrts::push_stack( vm, context[62] );
        refalrts::push_stack( vm, context[59] );
        refalrts::push_stack( vm, context[57] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[49] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[59], context[68] );
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_evar( res, context[49], context[58] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[15], context[30] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new22/35 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.new23/25 # ElChar/30 e.new24/37 )/14 >/1
        context[35] = context[31];
        context[36] = context[32];
        context[37] = context[33];
        context[38] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_ElChar], context[30] ) )
          continue;
        // closed e.new22 as range 35
        // closed e.new24 as range 37
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElChar/30 s.Char/43 )/14 >/1
          context[39] = context[35];
          context[40] = context[36];
          context[41] = context[37];
          context[42] = context[38];
          // closed e.Indent as range 39
          if( ! refalrts::svar_left( context[43], context[41], context[42] ) )
            continue;
          if( ! refalrts::empty_seq( context[41], context[42] ) )
            continue;
          //DEBUG: s.ElemNumber: 25
          //DEBUG: e.Indent: 39
          //DEBUG: s.Char: 43

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/44"refalrts::alloc_char(vm, context["/46 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 }"], \'"/48 Tile{ AsIs: </0 Reuse: & EscapeChar/4 } Tile{ AsIs: s.Char/43 HalfReuse: >/14 HalfReuse: '\''/1 }");"/50 )/52 Tile{ ]] }
          refalrts::copy_evar(vm, context[44], context[45], context[39], context[40]);
          refalrts::alloc_chars(vm, context[46], context[47], "refalrts::alloc_char(vm, context[", 33);
          refalrts::alloc_chars(vm, context[48], context[49], "], \'", 4);
          refalrts::alloc_chars(vm, context[50], context[51], ");", 2);
          refalrts::alloc_close_bracket(vm, context[52]);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[20], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[30]);
          refalrts::update_name(context[4], functions[efunc_EscapeChar]);
          refalrts::reinit_close_call(context[14]);
          refalrts::reinit_char(context[1], '\'');
          refalrts::link_brackets( context[13], context[52] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[50], context[52] );
          res = refalrts::splice_evar( res, context[43], context[1] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[48], context[49] );
          res = refalrts::splice_evar( res, context[15], context[30] );
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElChar/30 )/14 >/1
          context[39] = context[35];
          context[40] = context[36];
          if( ! refalrts::empty_seq( context[37], context[38] ) )
            continue;
          // closed e.Indent as range 39
          //DEBUG: s.ElemNumber: 25
          //DEBUG: e.Indent: 39

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/41 'r'/43 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::alloc_char(vm, context["/44 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/46 )/47 Tile{ ]] }
          refalrts::copy_evar(vm, context[41], context[42], context[39], context[40]);
          refalrts::alloc_char(vm, context[43], 'r');
          refalrts::alloc_chars(vm, context[44], context[45], "alrts::alloc_char(vm, context[", 30);
          refalrts::alloc_char(vm, context[46], ';');
          refalrts::alloc_close_bracket(vm, context[47]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[20], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[30]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[47] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[43] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElChar/30 e./41 )/14 >/1
        context[39] = context[35];
        context[40] = context[36];
        context[41] = context[37];
        context[42] = context[38];
        // closed e.Indent as range 39
        // closed e. as range 41
        //DEBUG: s.ElemNumber: 25
        //DEBUG: e.Indent: 39
        //DEBUG: e.: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/43"refalrts::alloc_char(vm, context["/45 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 } >/47 ']'/48 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElChar/30 AsIs: e./41 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/49 )/50 Tile{ ]] }
        refalrts::copy_evar(vm, context[43], context[44], context[39], context[40]);
        refalrts::alloc_chars(vm, context[45], context[46], "refalrts::alloc_char(vm, context[", 33);
        refalrts::alloc_close_call(vm, context[47]);
        refalrts::alloc_char(vm, context[48], ']');
        refalrts::alloc_char(vm, context[49], ';');
        refalrts::alloc_close_bracket(vm, context[50]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[20], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[50] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[47] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[30], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[15], context[25] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new22/35 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.new23/25 # ElName/30 e.new24/37 )/14 >/1
        context[35] = context[31];
        context[36] = context[32];
        context[37] = context[33];
        context[38] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_ElName], context[30] ) )
          continue;
        // closed e.new22 as range 35
        // closed e.new24 as range 37
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElName/30 s.Num/43 e.0/41 )/14 >/1
          context[39] = context[35];
          context[40] = context[36];
          context[41] = context[37];
          context[42] = context[38];
          // closed e.Indent as range 39
          if( ! refalrts::svar_left( context[43], context[41], context[42] ) )
            continue;
          // closed e.0 as range 41
          //DEBUG: s.ElemNumber: 25
          //DEBUG: e.Indent: 39
          //DEBUG: s.Num: 43
          //DEBUG: e.0: 41

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/43 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/44"refalrts::alloc_name(vm, context["/46 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 }"], functions[efunc_"/48 Tile{ AsIs: </0 Reuse: & CName/4 } Tile{ AsIs: e.0/41 } >/50"])"/51 Tile{ HalfReuse: ';'/14 HalfReuse: )/1 ]] }
          refalrts::copy_evar(vm, context[44], context[45], context[39], context[40]);
          refalrts::alloc_chars(vm, context[46], context[47], "refalrts::alloc_name(vm, context[", 33);
          refalrts::alloc_chars(vm, context[48], context[49], "], functions[efunc_", 19);
          refalrts::alloc_close_call(vm, context[50]);
          refalrts::alloc_chars(vm, context[51], context[52], "])", 2);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[20], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[30]);
          refalrts::update_name(context[4], functions[efunc_CName]);
          refalrts::reinit_char(context[14], ';');
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[13], context[1] );
          refalrts::push_stack( vm, context[50] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          res = refalrts::splice_evar( res, context[50], context[52] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[48], context[49] );
          res = refalrts::splice_evar( res, context[15], context[30] );
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElName/30 )/14 >/1
          context[39] = context[35];
          context[40] = context[36];
          if( ! refalrts::empty_seq( context[37], context[38] ) )
            continue;
          // closed e.Indent as range 39
          //DEBUG: s.ElemNumber: 25
          //DEBUG: e.Indent: 39

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/41 'r'/43 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::alloc_name(vm, context["/44 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/46 )/47 Tile{ ]] }
          refalrts::copy_evar(vm, context[41], context[42], context[39], context[40]);
          refalrts::alloc_char(vm, context[43], 'r');
          refalrts::alloc_chars(vm, context[44], context[45], "alrts::alloc_name(vm, context[", 30);
          refalrts::alloc_char(vm, context[46], ';');
          refalrts::alloc_close_bracket(vm, context[47]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[20], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[30]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[47] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[43] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElName/30 e./41 )/14 >/1
        context[39] = context[35];
        context[40] = context[36];
        context[41] = context[37];
        context[42] = context[38];
        // closed e.Indent as range 39
        // closed e. as range 41
        //DEBUG: s.ElemNumber: 25
        //DEBUG: e.Indent: 39
        //DEBUG: e.: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/43"refalrts::alloc_name(vm, context["/45 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 } >/47 ']'/48 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElName/30 AsIs: e./41 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/49 )/50 Tile{ ]] }
        refalrts::copy_evar(vm, context[43], context[44], context[39], context[40]);
        refalrts::alloc_chars(vm, context[45], context[46], "refalrts::alloc_name(vm, context[", 33);
        refalrts::alloc_close_call(vm, context[47]);
        refalrts::alloc_char(vm, context[48], ']');
        refalrts::alloc_char(vm, context[49], ';');
        refalrts::alloc_close_bracket(vm, context[50]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[20], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[50] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[47] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[30], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[15], context[25] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new22/35 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.new23/25 # ElNumber/30 e.new24/37 )/14 >/1
        context[35] = context[31];
        context[36] = context[32];
        context[37] = context[33];
        context[38] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[30] ) )
          continue;
        // closed e.new22 as range 35
        // closed e.new24 as range 37
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElNumber/30 s.Number/43 )/14 >/1
          context[39] = context[35];
          context[40] = context[36];
          context[41] = context[37];
          context[42] = context[38];
          // closed e.Indent as range 39
          if( ! refalrts::svar_left( context[43], context[41], context[42] ) )
            continue;
          if( ! refalrts::empty_seq( context[41], context[42] ) )
            continue;
          //DEBUG: s.ElemNumber: 25
          //DEBUG: e.Indent: 39
          //DEBUG: s.Number: 43

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/44"refalrts::alloc_number(vm, context["/46 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 }"], "/48 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.Number/43 HalfReuse: >/14 HalfReuse: 'U'/1 }"L);"/50 )/52 Tile{ ]] }
          refalrts::copy_evar(vm, context[44], context[45], context[39], context[40]);
          refalrts::alloc_chars(vm, context[46], context[47], "refalrts::alloc_number(vm, context[", 35);
          refalrts::alloc_chars(vm, context[48], context[49], "], ", 3);
          refalrts::alloc_chars(vm, context[50], context[51], "L);", 3);
          refalrts::alloc_close_bracket(vm, context[52]);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[20], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[30]);
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[14]);
          refalrts::reinit_char(context[1], 'U');
          refalrts::link_brackets( context[13], context[52] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[50], context[52] );
          res = refalrts::splice_evar( res, context[43], context[1] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[48], context[49] );
          res = refalrts::splice_evar( res, context[15], context[30] );
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElNumber/30 )/14 >/1
          context[39] = context[35];
          context[40] = context[36];
          if( ! refalrts::empty_seq( context[37], context[38] ) )
            continue;
          // closed e.Indent as range 39
          //DEBUG: s.ElemNumber: 25
          //DEBUG: e.Indent: 39

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/41 'r'/43 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::alloc_number(vm, context["/44 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/46 )/47 Tile{ ]] }
          refalrts::copy_evar(vm, context[41], context[42], context[39], context[40]);
          refalrts::alloc_char(vm, context[43], 'r');
          refalrts::alloc_chars(vm, context[44], context[45], "alrts::alloc_number(vm, context[", 32);
          refalrts::alloc_char(vm, context[46], ';');
          refalrts::alloc_close_bracket(vm, context[47]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[20], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[30]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[47] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[43] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElNumber/30 e./41 )/14 >/1
        context[39] = context[35];
        context[40] = context[36];
        context[41] = context[37];
        context[42] = context[38];
        // closed e.Indent as range 39
        // closed e. as range 41
        //DEBUG: s.ElemNumber: 25
        //DEBUG: e.Indent: 39
        //DEBUG: e.: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/43"refalrts::alloc_number(vm, context["/45 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 } >/47 ']'/48 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElNumber/30 AsIs: e./41 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/49 )/50 Tile{ ]] }
        refalrts::copy_evar(vm, context[43], context[44], context[39], context[40]);
        refalrts::alloc_chars(vm, context[45], context[46], "refalrts::alloc_number(vm, context[", 35);
        refalrts::alloc_close_call(vm, context[47]);
        refalrts::alloc_char(vm, context[48], ']');
        refalrts::alloc_char(vm, context[49], ';');
        refalrts::alloc_close_bracket(vm, context[50]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[20], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[50] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[47] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[30], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[15], context[25] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new22/35 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.new23/25 # ElIdent/30 e.new24/37 )/14 >/1
        context[35] = context[31];
        context[36] = context[32];
        context[37] = context[33];
        context[38] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[30] ) )
          continue;
        // closed e.new22 as range 35
        // closed e.new24 as range 37
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElIdent/30 s.Num/43 e.0/41 )/14 >/1
          context[39] = context[35];
          context[40] = context[36];
          context[41] = context[37];
          context[42] = context[38];
          // closed e.Indent as range 39
          if( ! refalrts::svar_left( context[43], context[41], context[42] ) )
            continue;
          // closed e.0 as range 41
          //DEBUG: s.ElemNumber: 25
          //DEBUG: e.Indent: 39
          //DEBUG: s.Num: 43
          //DEBUG: e.0: 41

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/43 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/44"refalrts::alloc_ident(vm, context["/46 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 }"], identifiers[ident_"/48 Tile{ AsIs: </0 Reuse: & CName/4 } Tile{ AsIs: e.0/41 } >/50"])"/51 Tile{ HalfReuse: ';'/14 HalfReuse: )/1 ]] }
          refalrts::copy_evar(vm, context[44], context[45], context[39], context[40]);
          refalrts::alloc_chars(vm, context[46], context[47], "refalrts::alloc_ident(vm, context[", 34);
          refalrts::alloc_chars(vm, context[48], context[49], "], identifiers[ident_", 21);
          refalrts::alloc_close_call(vm, context[50]);
          refalrts::alloc_chars(vm, context[51], context[52], "])", 2);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[20], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[30]);
          refalrts::update_name(context[4], functions[efunc_CName]);
          refalrts::reinit_char(context[14], ';');
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[13], context[1] );
          refalrts::push_stack( vm, context[50] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          res = refalrts::splice_evar( res, context[50], context[52] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[48], context[49] );
          res = refalrts::splice_evar( res, context[15], context[30] );
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElIdent/30 )/14 >/1
          context[39] = context[35];
          context[40] = context[36];
          if( ! refalrts::empty_seq( context[37], context[38] ) )
            continue;
          // closed e.Indent as range 39
          //DEBUG: s.ElemNumber: 25
          //DEBUG: e.Indent: 39

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/41 'r'/43 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::alloc_ident(vm, context["/44 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/46 )/47 Tile{ ]] }
          refalrts::copy_evar(vm, context[41], context[42], context[39], context[40]);
          refalrts::alloc_char(vm, context[43], 'r');
          refalrts::alloc_chars(vm, context[44], context[45], "alrts::alloc_ident(vm, context[", 31);
          refalrts::alloc_char(vm, context[46], ';');
          refalrts::alloc_close_bracket(vm, context[47]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[20], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[30]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[47] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[43] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElIdent/30 e./41 )/14 >/1
        context[39] = context[35];
        context[40] = context[36];
        context[41] = context[37];
        context[42] = context[38];
        // closed e.Indent as range 39
        // closed e. as range 41
        //DEBUG: s.ElemNumber: 25
        //DEBUG: e.Indent: 39
        //DEBUG: e.: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/43"refalrts::alloc_ident(vm, context["/45 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 } >/47 ']'/48 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElIdent/30 AsIs: e./41 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/49 )/50 Tile{ ]] }
        refalrts::copy_evar(vm, context[43], context[44], context[39], context[40]);
        refalrts::alloc_chars(vm, context[45], context[46], "refalrts::alloc_ident(vm, context[", 34);
        refalrts::alloc_close_call(vm, context[47]);
        refalrts::alloc_char(vm, context[48], ']');
        refalrts::alloc_char(vm, context[49], ';');
        refalrts::alloc_close_bracket(vm, context[50]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[20], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[50] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[47] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[30], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[15], context[25] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new22/35 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.new23/25 # ElOpenADT/30 e.new24/37 )/14 >/1
        context[35] = context[31];
        context[36] = context[32];
        context[37] = context[33];
        context[38] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_ElOpenADT], context[30] ) )
          continue;
        // closed e.new22 as range 35
        // closed e.new24 as range 37
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElOpenADT/30 )/14 >/1
          context[39] = context[35];
          context[40] = context[36];
          if( ! refalrts::empty_seq( context[37], context[38] ) )
            continue;
          // closed e.Indent as range 39
          //DEBUG: s.ElemNumber: 25
          //DEBUG: e.Indent: 39

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/41 'r'/43 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::alloc_open_adt(vm, context["/44 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/46 )/47 Tile{ ]] }
          refalrts::copy_evar(vm, context[41], context[42], context[39], context[40]);
          refalrts::alloc_char(vm, context[43], 'r');
          refalrts::alloc_chars(vm, context[44], context[45], "alrts::alloc_open_adt(vm, context[", 34);
          refalrts::alloc_char(vm, context[46], ';');
          refalrts::alloc_close_bracket(vm, context[47]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[20], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[30]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[47] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[43] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElOpenADT/30 e./41 )/14 >/1
        context[39] = context[35];
        context[40] = context[36];
        context[41] = context[37];
        context[42] = context[38];
        // closed e.Indent as range 39
        // closed e. as range 41
        //DEBUG: s.ElemNumber: 25
        //DEBUG: e.Indent: 39
        //DEBUG: e.: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/43"refalrts::alloc_open_adt(vm, context["/45 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 } >/47 ']'/48 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElOpenADT/30 AsIs: e./41 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/49 )/50 Tile{ ]] }
        refalrts::copy_evar(vm, context[43], context[44], context[39], context[40]);
        refalrts::alloc_chars(vm, context[45], context[46], "refalrts::alloc_open_adt(vm, context[", 37);
        refalrts::alloc_close_call(vm, context[47]);
        refalrts::alloc_char(vm, context[48], ']');
        refalrts::alloc_char(vm, context[49], ';');
        refalrts::alloc_close_bracket(vm, context[50]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[20], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[50] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[47] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[30], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[15], context[25] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new22/35 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.new23/25 # ElCloseADT/30 e.new24/37 )/14 >/1
        context[35] = context[31];
        context[36] = context[32];
        context[37] = context[33];
        context[38] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_ElCloseADT], context[30] ) )
          continue;
        // closed e.new22 as range 35
        // closed e.new24 as range 37
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElCloseADT/30 )/14 >/1
          context[39] = context[35];
          context[40] = context[36];
          if( ! refalrts::empty_seq( context[37], context[38] ) )
            continue;
          // closed e.Indent as range 39
          //DEBUG: s.ElemNumber: 25
          //DEBUG: e.Indent: 39

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/41 'r'/43 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::alloc_close_adt(vm, context["/44 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/46 )/47 Tile{ ]] }
          refalrts::copy_evar(vm, context[41], context[42], context[39], context[40]);
          refalrts::alloc_char(vm, context[43], 'r');
          refalrts::alloc_chars(vm, context[44], context[45], "alrts::alloc_close_adt(vm, context[", 35);
          refalrts::alloc_char(vm, context[46], ';');
          refalrts::alloc_close_bracket(vm, context[47]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[20], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[30]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[47] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[43] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElCloseADT/30 e./41 )/14 >/1
        context[39] = context[35];
        context[40] = context[36];
        context[41] = context[37];
        context[42] = context[38];
        // closed e.Indent as range 39
        // closed e. as range 41
        //DEBUG: s.ElemNumber: 25
        //DEBUG: e.Indent: 39
        //DEBUG: e.: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/43"refalrts::alloc_close_adt(vm, context["/45 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 } >/47 ']'/48 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElCloseADT/30 AsIs: e./41 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/49 )/50 Tile{ ]] }
        refalrts::copy_evar(vm, context[43], context[44], context[39], context[40]);
        refalrts::alloc_chars(vm, context[45], context[46], "refalrts::alloc_close_adt(vm, context[", 38);
        refalrts::alloc_close_call(vm, context[47]);
        refalrts::alloc_char(vm, context[48], ']');
        refalrts::alloc_char(vm, context[49], ';');
        refalrts::alloc_close_bracket(vm, context[50]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[20], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[50] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[47] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[30], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[15], context[25] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new22/35 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.new23/25 # ElOpenBracket/30 e.new24/37 )/14 >/1
        context[35] = context[31];
        context[36] = context[32];
        context[37] = context[33];
        context[38] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_ElOpenBracket], context[30] ) )
          continue;
        // closed e.new22 as range 35
        // closed e.new24 as range 37
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElOpenBracket/30 )/14 >/1
          context[39] = context[35];
          context[40] = context[36];
          if( ! refalrts::empty_seq( context[37], context[38] ) )
            continue;
          // closed e.Indent as range 39
          //DEBUG: s.ElemNumber: 25
          //DEBUG: e.Indent: 39

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/41 'r'/43 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::alloc_open_bracket(vm, context["/44 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/46 )/47 Tile{ ]] }
          refalrts::copy_evar(vm, context[41], context[42], context[39], context[40]);
          refalrts::alloc_char(vm, context[43], 'r');
          refalrts::alloc_chars(vm, context[44], context[45], "alrts::alloc_open_bracket(vm, context[", 38);
          refalrts::alloc_char(vm, context[46], ';');
          refalrts::alloc_close_bracket(vm, context[47]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[20], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[30]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[47] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[43] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElOpenBracket/30 e./41 )/14 >/1
        context[39] = context[35];
        context[40] = context[36];
        context[41] = context[37];
        context[42] = context[38];
        // closed e.Indent as range 39
        // closed e. as range 41
        //DEBUG: s.ElemNumber: 25
        //DEBUG: e.Indent: 39
        //DEBUG: e.: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/43"refalrts::alloc_open_bracket(vm, context["/45 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 } >/47 ']'/48 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElOpenBracket/30 AsIs: e./41 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/49 )/50 Tile{ ]] }
        refalrts::copy_evar(vm, context[43], context[44], context[39], context[40]);
        refalrts::alloc_chars(vm, context[45], context[46], "refalrts::alloc_open_bracket(vm, context[", 41);
        refalrts::alloc_close_call(vm, context[47]);
        refalrts::alloc_char(vm, context[48], ']');
        refalrts::alloc_char(vm, context[49], ';');
        refalrts::alloc_close_bracket(vm, context[50]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[20], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[50] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[47] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[30], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[15], context[25] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new22/35 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.new23/25 # ElCloseBracket/30 e.new24/37 )/14 >/1
        context[35] = context[31];
        context[36] = context[32];
        context[37] = context[33];
        context[38] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_ElCloseBracket], context[30] ) )
          continue;
        // closed e.new22 as range 35
        // closed e.new24 as range 37
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElCloseBracket/30 )/14 >/1
          context[39] = context[35];
          context[40] = context[36];
          if( ! refalrts::empty_seq( context[37], context[38] ) )
            continue;
          // closed e.Indent as range 39
          //DEBUG: s.ElemNumber: 25
          //DEBUG: e.Indent: 39

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/41 'r'/43 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::alloc_close_bracket(vm, context["/44 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/46 )/47 Tile{ ]] }
          refalrts::copy_evar(vm, context[41], context[42], context[39], context[40]);
          refalrts::alloc_char(vm, context[43], 'r');
          refalrts::alloc_chars(vm, context[44], context[45], "alrts::alloc_close_bracket(vm, context[", 39);
          refalrts::alloc_char(vm, context[46], ';');
          refalrts::alloc_close_bracket(vm, context[47]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[20], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[30]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[47] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[43] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElCloseBracket/30 e./41 )/14 >/1
        context[39] = context[35];
        context[40] = context[36];
        context[41] = context[37];
        context[42] = context[38];
        // closed e.Indent as range 39
        // closed e. as range 41
        //DEBUG: s.ElemNumber: 25
        //DEBUG: e.Indent: 39
        //DEBUG: e.: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/43"refalrts::alloc_close_bracket(vm, context["/45 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 } >/47 ']'/48 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElCloseBracket/30 AsIs: e./41 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/49 )/50 Tile{ ]] }
        refalrts::copy_evar(vm, context[43], context[44], context[39], context[40]);
        refalrts::alloc_chars(vm, context[45], context[46], "refalrts::alloc_close_bracket(vm, context[", 42);
        refalrts::alloc_close_call(vm, context[47]);
        refalrts::alloc_char(vm, context[48], ']');
        refalrts::alloc_char(vm, context[49], ';');
        refalrts::alloc_close_bracket(vm, context[50]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[20], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[50] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[47] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[30], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[15], context[25] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new22/35 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.new23/25 # ElOpenCall/30 e.new24/37 )/14 >/1
        context[35] = context[31];
        context[36] = context[32];
        context[37] = context[33];
        context[38] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_ElOpenCall], context[30] ) )
          continue;
        // closed e.new22 as range 35
        // closed e.new24 as range 37
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElOpenCall/30 )/14 >/1
          context[39] = context[35];
          context[40] = context[36];
          if( ! refalrts::empty_seq( context[37], context[38] ) )
            continue;
          // closed e.Indent as range 39
          //DEBUG: s.ElemNumber: 25
          //DEBUG: e.Indent: 39

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/41 'r'/43 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::alloc_open_call(vm, context["/44 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/46 )/47 Tile{ ]] }
          refalrts::copy_evar(vm, context[41], context[42], context[39], context[40]);
          refalrts::alloc_char(vm, context[43], 'r');
          refalrts::alloc_chars(vm, context[44], context[45], "alrts::alloc_open_call(vm, context[", 35);
          refalrts::alloc_char(vm, context[46], ';');
          refalrts::alloc_close_bracket(vm, context[47]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[20], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[30]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[47] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[43] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElOpenCall/30 e./41 )/14 >/1
        context[39] = context[35];
        context[40] = context[36];
        context[41] = context[37];
        context[42] = context[38];
        // closed e.Indent as range 39
        // closed e. as range 41
        //DEBUG: s.ElemNumber: 25
        //DEBUG: e.Indent: 39
        //DEBUG: e.: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/43"refalrts::alloc_open_call(vm, context["/45 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 } >/47 ']'/48 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElOpenCall/30 AsIs: e./41 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/49 )/50 Tile{ ]] }
        refalrts::copy_evar(vm, context[43], context[44], context[39], context[40]);
        refalrts::alloc_chars(vm, context[45], context[46], "refalrts::alloc_open_call(vm, context[", 38);
        refalrts::alloc_close_call(vm, context[47]);
        refalrts::alloc_char(vm, context[48], ']');
        refalrts::alloc_char(vm, context[49], ';');
        refalrts::alloc_close_bracket(vm, context[50]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[20], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[50] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[47] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[30], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[15], context[25] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new22/35 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.new23/25 # ElCloseCall/30 e.new24/37 )/14 >/1
        context[35] = context[31];
        context[36] = context[32];
        context[37] = context[33];
        context[38] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_ElCloseCall], context[30] ) )
          continue;
        // closed e.new22 as range 35
        // closed e.new24 as range 37
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElCloseCall/30 )/14 >/1
          context[39] = context[35];
          context[40] = context[36];
          if( ! refalrts::empty_seq( context[37], context[38] ) )
            continue;
          // closed e.Indent as range 39
          //DEBUG: s.ElemNumber: 25
          //DEBUG: e.Indent: 39

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/41 'r'/43 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::alloc_close_call(vm, context["/44 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/46 )/47 Tile{ ]] }
          refalrts::copy_evar(vm, context[41], context[42], context[39], context[40]);
          refalrts::alloc_char(vm, context[43], 'r');
          refalrts::alloc_chars(vm, context[44], context[45], "alrts::alloc_close_call(vm, context[", 36);
          refalrts::alloc_char(vm, context[46], ';');
          refalrts::alloc_close_bracket(vm, context[47]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[20], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[30]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[47] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[43] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElCloseCall/30 e./41 )/14 >/1
        context[39] = context[35];
        context[40] = context[36];
        context[41] = context[37];
        context[42] = context[38];
        // closed e.Indent as range 39
        // closed e. as range 41
        //DEBUG: s.ElemNumber: 25
        //DEBUG: e.Indent: 39
        //DEBUG: e.: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/43"refalrts::alloc_close_call(vm, context["/45 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 } >/47 ']'/48 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElCloseCall/30 AsIs: e./41 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/49 )/50 Tile{ ]] }
        refalrts::copy_evar(vm, context[43], context[44], context[39], context[40]);
        refalrts::alloc_chars(vm, context[45], context[46], "refalrts::alloc_close_call(vm, context[", 39);
        refalrts::alloc_close_call(vm, context[47]);
        refalrts::alloc_char(vm, context[48], ']');
        refalrts::alloc_char(vm, context[49], ';');
        refalrts::alloc_close_bracket(vm, context[50]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[20], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[50] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[47] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[30], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[15], context[25] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new22/35 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.new23/25 # ElClosureHead/30 e.new24/37 )/14 >/1
        context[35] = context[31];
        context[36] = context[32];
        context[37] = context[33];
        context[38] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_ElClosureHead], context[30] ) )
          continue;
        // closed e.new22 as range 35
        // closed e.new24 as range 37
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElClosureHead/30 )/14 >/1
          context[39] = context[35];
          context[40] = context[36];
          if( ! refalrts::empty_seq( context[37], context[38] ) )
            continue;
          // closed e.Indent as range 39
          //DEBUG: s.ElemNumber: 25
          //DEBUG: e.Indent: 39

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/41 'r'/43 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::alloc_closure_head(vm, context["/44 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/46 )/47 Tile{ ]] }
          refalrts::copy_evar(vm, context[41], context[42], context[39], context[40]);
          refalrts::alloc_char(vm, context[43], 'r');
          refalrts::alloc_chars(vm, context[44], context[45], "alrts::alloc_closure_head(vm, context[", 38);
          refalrts::alloc_char(vm, context[46], ';');
          refalrts::alloc_close_bracket(vm, context[47]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[20], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[30]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[47] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[43] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElClosureHead/30 e./41 )/14 >/1
        context[39] = context[35];
        context[40] = context[36];
        context[41] = context[37];
        context[42] = context[38];
        // closed e.Indent as range 39
        // closed e. as range 41
        //DEBUG: s.ElemNumber: 25
        //DEBUG: e.Indent: 39
        //DEBUG: e.: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/43"refalrts::alloc_closure_head(vm, context["/45 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 } >/47 ']'/48 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElClosureHead/30 AsIs: e./41 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/49 )/50 Tile{ ]] }
        refalrts::copy_evar(vm, context[43], context[44], context[39], context[40]);
        refalrts::alloc_chars(vm, context[45], context[46], "refalrts::alloc_closure_head(vm, context[", 41);
        refalrts::alloc_close_call(vm, context[47]);
        refalrts::alloc_char(vm, context[48], ']');
        refalrts::alloc_char(vm, context[49], ';');
        refalrts::alloc_close_bracket(vm, context[50]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[20], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[50] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[47] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[30], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[15], context[25] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new22/35 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.new23/25 # ElUnwrappedClosure/30 e.new24/37 )/14 >/1
        context[35] = context[31];
        context[36] = context[32];
        context[37] = context[33];
        context[38] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[30] ) )
          continue;
        // closed e.new22 as range 35
        // closed e.new24 as range 37
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElUnwrappedClosure/30 s.HeadOffset/43 )/14 >/1
          context[39] = context[35];
          context[40] = context[36];
          context[41] = context[37];
          context[42] = context[38];
          // closed e.Indent as range 39
          if( ! refalrts::svar_left( context[43], context[41], context[42] ) )
            continue;
          if( ! refalrts::empty_seq( context[41], context[42] ) )
            continue;
          //DEBUG: s.ElemNumber: 25
          //DEBUG: e.Indent: 39
          //DEBUG: s.HeadOffset: 43

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/44"refalrts::alloc_unwrapped_closure(vm, context["/46 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 }"], context["/48 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.HeadOffset/43 HalfReuse: >/14 HalfReuse: ']'/1 }");"/50 )/52 Tile{ ]] }
          refalrts::copy_evar(vm, context[44], context[45], context[39], context[40]);
          refalrts::alloc_chars(vm, context[46], context[47], "refalrts::alloc_unwrapped_closure(vm, context[", 46);
          refalrts::alloc_chars(vm, context[48], context[49], "], context[", 11);
          refalrts::alloc_chars(vm, context[50], context[51], ");", 2);
          refalrts::alloc_close_bracket(vm, context[52]);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[20], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[30]);
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[14]);
          refalrts::reinit_char(context[1], ']');
          refalrts::link_brackets( context[13], context[52] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[50], context[52] );
          res = refalrts::splice_evar( res, context[43], context[1] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[48], context[49] );
          res = refalrts::splice_evar( res, context[15], context[30] );
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElUnwrappedClosure/30 )/14 >/1
          context[39] = context[35];
          context[40] = context[36];
          if( ! refalrts::empty_seq( context[37], context[38] ) )
            continue;
          // closed e.Indent as range 39
          //DEBUG: s.ElemNumber: 25
          //DEBUG: e.Indent: 39

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/41 'r'/43 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::alloc_unwrapped_closure(vm, context["/44 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/46 )/47 Tile{ ]] }
          refalrts::copy_evar(vm, context[41], context[42], context[39], context[40]);
          refalrts::alloc_char(vm, context[43], 'r');
          refalrts::alloc_chars(vm, context[44], context[45], "alrts::alloc_unwrapped_closure(vm, context[", 43);
          refalrts::alloc_char(vm, context[46], ';');
          refalrts::alloc_close_bracket(vm, context[47]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[20], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[30]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[47] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[43] );
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/39 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElUnwrappedClosure/30 e./41 )/14 >/1
        context[39] = context[35];
        context[40] = context[36];
        context[41] = context[37];
        context[42] = context[38];
        // closed e.Indent as range 39
        // closed e. as range 41
        //DEBUG: s.ElemNumber: 25
        //DEBUG: e.Indent: 39
        //DEBUG: e.: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/39 AsIs: )/10 AsIs: (/13 } e.Indent/39/43"refalrts::alloc_unwrapped_closure(vm, context["/45 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 } >/47 ']'/48 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElUnwrappedClosure/30 AsIs: e./41 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/49 )/50 Tile{ ]] }
        refalrts::copy_evar(vm, context[43], context[44], context[39], context[40]);
        refalrts::alloc_chars(vm, context[45], context[46], "refalrts::alloc_unwrapped_closure(vm, context[", 46);
        refalrts::alloc_close_call(vm, context[47]);
        refalrts::alloc_char(vm, context[48], ']');
        refalrts::alloc_char(vm, context[49], ';');
        refalrts::alloc_close_bracket(vm, context[50]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[20], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[50] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[47] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[30], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[15], context[25] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new22/35 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.new23/25 s.new24/30 s.new25/39 e.new26/37 )/14 >/1
        context[35] = context[31];
        context[36] = context[32];
        context[37] = context[33];
        context[38] = context[34];
        // closed e.new22 as range 35
        if( ! refalrts::svar_left( context[39], context[37], context[38] ) )
          continue;
        // closed e.new26 as range 37
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/40 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElChar/30 s.Char/39 )/14 >/1
          context[40] = context[35];
          context[41] = context[36];
          if( ! refalrts::ident_term( identifiers[ident_ElChar], context[30] ) )
            continue;
          if( ! refalrts::empty_seq( context[37], context[38] ) )
            continue;
          // closed e.Indent as range 40
          //DEBUG: s.ElemNumber: 25
          //DEBUG: s.Char: 39
          //DEBUG: e.Indent: 40

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/40 AsIs: )/10 AsIs: (/13 } e.Indent/40/42"refalrts::alloc_"/44 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElChar/46 >/47"(vm, context["/48 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 }"], \'"/50 </52 & EscapeChar/53 Tile{ AsIs: s.Char/39 HalfReuse: >/14 HalfReuse: '\''/1 }");"/54 )/56 Tile{ ]] }
          refalrts::copy_evar(vm, context[42], context[43], context[40], context[41]);
          refalrts::alloc_chars(vm, context[44], context[45], "refalrts::alloc_", 16);
          refalrts::alloc_ident(vm, context[46], identifiers[ident_ElChar]);
          refalrts::alloc_close_call(vm, context[47]);
          refalrts::alloc_chars(vm, context[48], context[49], "(vm, context[", 13);
          refalrts::alloc_chars(vm, context[50], context[51], "], \'", 4);
          refalrts::alloc_open_call(vm, context[52]);
          refalrts::alloc_name(vm, context[53], functions[efunc_EscapeChar]);
          refalrts::alloc_chars(vm, context[54], context[55], ");", 2);
          refalrts::alloc_close_bracket(vm, context[56]);
          refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[20], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[30]);
          refalrts::reinit_close_call(context[14]);
          refalrts::reinit_char(context[1], '\'');
          refalrts::link_brackets( context[13], context[56] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[52] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[15] );
          refalrts::push_stack( vm, context[47] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[54], context[56] );
          res = refalrts::splice_evar( res, context[39], context[1] );
          res = refalrts::splice_evar( res, context[50], context[53] );
          res = refalrts::splice_evar( res, context[15], context[30] );
          res = refalrts::splice_evar( res, context[46], context[49] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/40 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElName/30 s.Num/39 e.0/42 )/14 >/1
          context[40] = context[35];
          context[41] = context[36];
          context[42] = context[37];
          context[43] = context[38];
          if( ! refalrts::ident_term( identifiers[ident_ElName], context[30] ) )
            continue;
          // closed e.Indent as range 40
          // closed e.0 as range 42
          //DEBUG: s.ElemNumber: 25
          //DEBUG: s.Num: 39
          //DEBUG: e.Indent: 40
          //DEBUG: e.0: 42

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/39 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/40 AsIs: )/10 AsIs: (/13 } e.Indent/40/44"refalrts::alloc_"/46 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElName/48 >/49"(vm, context["/50 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 }"], functions[efunc_"/52 </54 & CName/55 Tile{ AsIs: e.0/42 } >/56"])"/57 Tile{ HalfReuse: ';'/14 HalfReuse: )/1 ]] }
          refalrts::copy_evar(vm, context[44], context[45], context[40], context[41]);
          refalrts::alloc_chars(vm, context[46], context[47], "refalrts::alloc_", 16);
          refalrts::alloc_ident(vm, context[48], identifiers[ident_ElName]);
          refalrts::alloc_close_call(vm, context[49]);
          refalrts::alloc_chars(vm, context[50], context[51], "(vm, context[", 13);
          refalrts::alloc_chars(vm, context[52], context[53], "], functions[efunc_", 19);
          refalrts::alloc_open_call(vm, context[54]);
          refalrts::alloc_name(vm, context[55], functions[efunc_CName]);
          refalrts::alloc_close_call(vm, context[56]);
          refalrts::alloc_chars(vm, context[57], context[58], "])", 2);
          refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[20], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[30]);
          refalrts::reinit_char(context[14], ';');
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[13], context[1] );
          refalrts::push_stack( vm, context[56] );
          refalrts::push_stack( vm, context[54] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[15] );
          refalrts::push_stack( vm, context[49] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          res = refalrts::splice_evar( res, context[56], context[58] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[52], context[55] );
          res = refalrts::splice_evar( res, context[15], context[30] );
          res = refalrts::splice_evar( res, context[48], context[51] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/40 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElNumber/30 s.Number/39 )/14 >/1
          context[40] = context[35];
          context[41] = context[36];
          if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[30] ) )
            continue;
          if( ! refalrts::empty_seq( context[37], context[38] ) )
            continue;
          // closed e.Indent as range 40
          //DEBUG: s.ElemNumber: 25
          //DEBUG: s.Number: 39
          //DEBUG: e.Indent: 40

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/40 AsIs: )/10 AsIs: (/13 } e.Indent/40/42"refalrts::alloc_"/44 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElNumber/46 >/47"(vm, context["/48 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 }"], "/50 </52 & Symb/53 Tile{ AsIs: s.Number/39 HalfReuse: >/14 HalfReuse: 'U'/1 }"L);"/54 )/56 Tile{ ]] }
          refalrts::copy_evar(vm, context[42], context[43], context[40], context[41]);
          refalrts::alloc_chars(vm, context[44], context[45], "refalrts::alloc_", 16);
          refalrts::alloc_ident(vm, context[46], identifiers[ident_ElNumber]);
          refalrts::alloc_close_call(vm, context[47]);
          refalrts::alloc_chars(vm, context[48], context[49], "(vm, context[", 13);
          refalrts::alloc_chars(vm, context[50], context[51], "], ", 3);
          refalrts::alloc_open_call(vm, context[52]);
          refalrts::alloc_name(vm, context[53], functions[efunc_Symb]);
          refalrts::alloc_chars(vm, context[54], context[55], "L);", 3);
          refalrts::alloc_close_bracket(vm, context[56]);
          refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[20], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[30]);
          refalrts::reinit_close_call(context[14]);
          refalrts::reinit_char(context[1], 'U');
          refalrts::link_brackets( context[13], context[56] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[52] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[15] );
          refalrts::push_stack( vm, context[47] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[54], context[56] );
          res = refalrts::splice_evar( res, context[39], context[1] );
          res = refalrts::splice_evar( res, context[50], context[53] );
          res = refalrts::splice_evar( res, context[15], context[30] );
          res = refalrts::splice_evar( res, context[46], context[49] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/40 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElIdent/30 s.Num/39 e.0/42 )/14 >/1
          context[40] = context[35];
          context[41] = context[36];
          context[42] = context[37];
          context[43] = context[38];
          if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[30] ) )
            continue;
          // closed e.Indent as range 40
          // closed e.0 as range 42
          //DEBUG: s.ElemNumber: 25
          //DEBUG: s.Num: 39
          //DEBUG: e.Indent: 40
          //DEBUG: e.0: 42

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/39 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/40 AsIs: )/10 AsIs: (/13 } e.Indent/40/44"refalrts::alloc_"/46 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElIdent/48 >/49"(vm, context["/50 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 }"], identifiers[ident_"/52 </54 & CName/55 Tile{ AsIs: e.0/42 } >/56"])"/57 Tile{ HalfReuse: ';'/14 HalfReuse: )/1 ]] }
          refalrts::copy_evar(vm, context[44], context[45], context[40], context[41]);
          refalrts::alloc_chars(vm, context[46], context[47], "refalrts::alloc_", 16);
          refalrts::alloc_ident(vm, context[48], identifiers[ident_ElIdent]);
          refalrts::alloc_close_call(vm, context[49]);
          refalrts::alloc_chars(vm, context[50], context[51], "(vm, context[", 13);
          refalrts::alloc_chars(vm, context[52], context[53], "], identifiers[ident_", 21);
          refalrts::alloc_open_call(vm, context[54]);
          refalrts::alloc_name(vm, context[55], functions[efunc_CName]);
          refalrts::alloc_close_call(vm, context[56]);
          refalrts::alloc_chars(vm, context[57], context[58], "])", 2);
          refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[20], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[30]);
          refalrts::reinit_char(context[14], ';');
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[13], context[1] );
          refalrts::push_stack( vm, context[56] );
          refalrts::push_stack( vm, context[54] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[15] );
          refalrts::push_stack( vm, context[49] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          res = refalrts::splice_evar( res, context[56], context[58] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[52], context[55] );
          res = refalrts::splice_evar( res, context[15], context[30] );
          res = refalrts::splice_evar( res, context[48], context[51] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/40 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 # ElUnwrappedClosure/30 s.HeadOffset/39 )/14 >/1
        context[40] = context[35];
        context[41] = context[36];
        if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[30] ) )
          continue;
        if( ! refalrts::empty_seq( context[37], context[38] ) )
          continue;
        // closed e.Indent as range 40
        //DEBUG: s.ElemNumber: 25
        //DEBUG: s.HeadOffset: 39
        //DEBUG: e.Indent: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/40 AsIs: )/10 AsIs: (/13 } e.Indent/40/42"refalrts::alloc_"/44 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElUnwrappedClosure/46 >/47"(vm, context["/48 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 }"], context["/50 </52 & Symb/53 Tile{ AsIs: s.HeadOffset/39 HalfReuse: >/14 HalfReuse: ']'/1 }");"/54 )/56 Tile{ ]] }
        refalrts::copy_evar(vm, context[42], context[43], context[40], context[41]);
        refalrts::alloc_chars(vm, context[44], context[45], "refalrts::alloc_", 16);
        refalrts::alloc_ident(vm, context[46], identifiers[ident_ElUnwrappedClosure]);
        refalrts::alloc_close_call(vm, context[47]);
        refalrts::alloc_chars(vm, context[48], context[49], "(vm, context[", 13);
        refalrts::alloc_chars(vm, context[50], context[51], "], context[", 11);
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_name(vm, context[53], functions[efunc_Symb]);
        refalrts::alloc_chars(vm, context[54], context[55], ");", 2);
        refalrts::alloc_close_bracket(vm, context[56]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[20], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[30]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ']');
        refalrts::link_brackets( context[13], context[56] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[47] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[54], context[56] );
        res = refalrts::splice_evar( res, context[39], context[1] );
        res = refalrts::splice_evar( res, context[50], context[53] );
        res = refalrts::splice_evar( res, context[15], context[30] );
        res = refalrts::splice_evar( res, context[46], context[49] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/35 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 s.ElementType/30 )/14 >/1
        context[35] = context[31];
        context[36] = context[32];
        if( ! refalrts::empty_seq( context[33], context[34] ) )
          continue;
        // closed e.Indent as range 35
        //DEBUG: s.ElemNumber: 25
        //DEBUG: s.ElementType: 30
        //DEBUG: e.Indent: 35

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/35 AsIs: )/10 AsIs: (/13 } e.Indent/35/37"refalrts::alloc_"/39 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } Tile{ AsIs: s.ElementType/30 HalfReuse: >/14 HalfReuse: '('/1 }"vm, context["/41 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 } >/43"]);"/44 )/46 Tile{ ]] }
        refalrts::copy_evar(vm, context[37], context[38], context[35], context[36]);
        refalrts::alloc_chars(vm, context[39], context[40], "refalrts::alloc_", 16);
        refalrts::alloc_chars(vm, context[41], context[42], "vm, context[", 12);
        refalrts::alloc_close_call(vm, context[43]);
        refalrts::alloc_chars(vm, context[44], context[45], "]);", 3);
        refalrts::alloc_close_bracket(vm, context[46]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], '(');
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[20], functions[efunc_Symb]);
        refalrts::link_brackets( context[13], context[46] );
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[43], context[46] );
        res = refalrts::splice_evar( res, context[15], context[25] );
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_evar( res, context[30], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/35 )/10 (/13 # CmdCreateElem/15 # Allocate/20 s.ElemNumber/25 s.ElementType/30 e./37 )/14 >/1
      context[35] = context[31];
      context[36] = context[32];
      context[37] = context[33];
      context[38] = context[34];
      // closed e.Indent as range 35
      // closed e. as range 37
      //DEBUG: s.ElemNumber: 25
      //DEBUG: s.ElementType: 30
      //DEBUG: e.Indent: 35
      //DEBUG: e.: 37

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/35 AsIs: )/10 AsIs: (/13 } e.Indent/35/39"refalrts::alloc_"/41 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } s.ElementType/30/43 >/44"(vm, context["/45 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 } >/47 ']'/48 </49 & AllocatorFuncArgument*6/50 Tile{ AsIs: s.ElementType/30 AsIs: e./37 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/51 )/52 Tile{ ]] }
      refalrts::copy_evar(vm, context[39], context[40], context[35], context[36]);
      refalrts::alloc_chars(vm, context[41], context[42], "refalrts::alloc_", 16);
      refalrts::copy_stvar(vm, context[43], context[30]);
      refalrts::alloc_close_call(vm, context[44]);
      refalrts::alloc_chars(vm, context[45], context[46], "(vm, context[", 13);
      refalrts::alloc_close_call(vm, context[47]);
      refalrts::alloc_char(vm, context[48], ']');
      refalrts::alloc_open_call(vm, context[49]);
      refalrts::alloc_name(vm, context[50], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_char(vm, context[51], ';');
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[20], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ')');
      refalrts::link_brackets( context[13], context[52] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[49] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_evar( res, context[30], context[1] );
      res = refalrts::splice_evar( res, context[47], context[50] );
      res = refalrts::splice_evar( res, context[15], context[25] );
      res = refalrts::splice_evar( res, context[43], context[46] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Native/4 (/9 e.Indent/31 )/10 (/13 # CmdCreateElem/15 # Reinit/20 s.ElemNumber/25 # ElChar/30 s.Char/35 )/14 >/1
    context[31] = context[26];
    context[32] = context[27];
    context[33] = context[28];
    context[34] = context[29];
    if( ! refalrts::ident_term( identifiers[ident_Reinit], context[20] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_ElChar], context[30] ) )
      continue;
    // closed e.Indent as range 31
    if( ! refalrts::svar_left( context[35], context[33], context[34] ) )
      continue;
    if( ! refalrts::empty_seq( context[33], context[34] ) )
      continue;
    //DEBUG: s.ElemNumber: 25
    //DEBUG: e.Indent: 31
    //DEBUG: s.Char: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/31 AsIs: )/10 AsIs: (/13 } e.Indent/31/36"refalrts::reinit_char(context["/38 Tile{ HalfReuse: </15 HalfReuse: & Symb/20 AsIs: s.ElemNumber/25 HalfReuse: >/30 }"], \'"/40 Tile{ AsIs: </0 Reuse: & EscapeChar/4 } Tile{ AsIs: s.Char/35 HalfReuse: >/14 HalfReuse: '\''/1 }");"/42 )/44 Tile{ ]] }
    refalrts::copy_evar(vm, context[36], context[37], context[31], context[32]);
    refalrts::alloc_chars(vm, context[38], context[39], "refalrts::reinit_char(context[", 30);
    refalrts::alloc_chars(vm, context[40], context[41], "], \'", 4);
    refalrts::alloc_chars(vm, context[42], context[43], ");", 2);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::reinit_open_call(context[15]);
    refalrts::reinit_name(context[20], functions[efunc_Symb]);
    refalrts::reinit_close_call(context[30]);
    refalrts::update_name(context[4], functions[efunc_EscapeChar]);
    refalrts::reinit_close_call(context[14]);
    refalrts::reinit_char(context[1], '\'');
    refalrts::link_brackets( context[13], context[44] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[30] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[42], context[44] );
    res = refalrts::splice_evar( res, context[35], context[1] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[15], context[30] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_evar( res, context[9], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Native/4 (/9 e.new1/7 )/10 (/13 # CmdCreateElem/15 s.new2/16 s.new3/17 s.new4/18 e.new5/11 )/14 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[5], context[6] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = refalrts::ident_left( identifiers[ident_CmdCreateElem], context[11], context[12] );
    if( ! context[15] )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    // closed e.new1 as range 7
    if( ! refalrts::svar_left( context[16], context[11], context[12] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[11], context[12] ) )
      continue;
    if( ! refalrts::svar_left( context[18], context[11], context[12] ) )
      continue;
    // closed e.new5 as range 11
    do {
      // </0 & GenCommand-Native/4 (/9 e.new6/19 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.new7/17 s.new8/18 e.new9/21 )/14 >/1
      context[19] = context[7];
      context[20] = context[8];
      context[21] = context[11];
      context[22] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_Reinit], context[16] ) )
        continue;
      // closed e.new6 as range 19
      // closed e.new9 as range 21
      do {
        // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.new11/17 # ElChar/18 e.new12/25 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        if( ! refalrts::ident_term( identifiers[ident_ElChar], context[18] ) )
          continue;
        // closed e.new10 as range 23
        // closed e.new12 as range 25
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElChar/18 )/14 >/1
          context[27] = context[23];
          context[28] = context[24];
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          // closed e.Indent as range 27
          //DEBUG: s.ElemNumber: 17
          //DEBUG: e.Indent: 27

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/29 'r'/31 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::reinit_char(context["/32 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/34 )/35 Tile{ ]] }
          refalrts::copy_evar(vm, context[29], context[30], context[27], context[28]);
          refalrts::alloc_char(vm, context[31], 'r');
          refalrts::alloc_chars(vm, context[32], context[33], "alrts::reinit_char(context[", 27);
          refalrts::alloc_char(vm, context[34], ';');
          refalrts::alloc_close_bracket(vm, context[35]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[35] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElChar/18 e./29 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        // closed e.Indent as range 27
        // closed e. as range 29
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27
        //DEBUG: e.: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/31"refalrts::reinit_char(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElChar/18 AsIs: e./29 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/37 )/38 Tile{ ]] }
        refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
        refalrts::alloc_chars(vm, context[33], context[34], "refalrts::reinit_char(context[", 30);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::alloc_char(vm, context[36], ']');
        refalrts::alloc_char(vm, context[37], ';');
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[38] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[15], context[17] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.new11/17 # ElName/18 e.new12/25 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        if( ! refalrts::ident_term( identifiers[ident_ElName], context[18] ) )
          continue;
        // closed e.new10 as range 23
        // closed e.new12 as range 25
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElName/18 s.Num/31 e.0/29 )/14 >/1
          context[27] = context[23];
          context[28] = context[24];
          context[29] = context[25];
          context[30] = context[26];
          // closed e.Indent as range 27
          if( ! refalrts::svar_left( context[31], context[29], context[30] ) )
            continue;
          // closed e.0 as range 29
          //DEBUG: s.ElemNumber: 17
          //DEBUG: e.Indent: 27
          //DEBUG: s.Num: 31
          //DEBUG: e.0: 29

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/31 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/32"refalrts::reinit_name(context["/34 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 }"], functions[efunc_"/36 Tile{ AsIs: </0 Reuse: & CName/4 } Tile{ AsIs: e.0/29 } >/38"])"/39 Tile{ HalfReuse: ';'/14 HalfReuse: )/1 ]] }
          refalrts::copy_evar(vm, context[32], context[33], context[27], context[28]);
          refalrts::alloc_chars(vm, context[34], context[35], "refalrts::reinit_name(context[", 30);
          refalrts::alloc_chars(vm, context[36], context[37], "], functions[efunc_", 19);
          refalrts::alloc_close_call(vm, context[38]);
          refalrts::alloc_chars(vm, context[39], context[40], "])", 2);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::update_name(context[4], functions[efunc_CName]);
          refalrts::reinit_char(context[14], ';');
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[13], context[1] );
          refalrts::push_stack( vm, context[38] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          res = refalrts::splice_evar( res, context[38], context[40] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[36], context[37] );
          res = refalrts::splice_evar( res, context[15], context[18] );
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElName/18 )/14 >/1
          context[27] = context[23];
          context[28] = context[24];
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          // closed e.Indent as range 27
          //DEBUG: s.ElemNumber: 17
          //DEBUG: e.Indent: 27

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/29 'r'/31 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::reinit_name(context["/32 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/34 )/35 Tile{ ]] }
          refalrts::copy_evar(vm, context[29], context[30], context[27], context[28]);
          refalrts::alloc_char(vm, context[31], 'r');
          refalrts::alloc_chars(vm, context[32], context[33], "alrts::reinit_name(context[", 27);
          refalrts::alloc_char(vm, context[34], ';');
          refalrts::alloc_close_bracket(vm, context[35]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[35] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElName/18 e./29 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        // closed e.Indent as range 27
        // closed e. as range 29
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27
        //DEBUG: e.: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/31"refalrts::reinit_name(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElName/18 AsIs: e./29 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/37 )/38 Tile{ ]] }
        refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
        refalrts::alloc_chars(vm, context[33], context[34], "refalrts::reinit_name(context[", 30);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::alloc_char(vm, context[36], ']');
        refalrts::alloc_char(vm, context[37], ';');
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[38] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[15], context[17] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.new11/17 # ElNumber/18 e.new12/25 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[18] ) )
          continue;
        // closed e.new10 as range 23
        // closed e.new12 as range 25
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElNumber/18 s.Number/31 )/14 >/1
          context[27] = context[23];
          context[28] = context[24];
          context[29] = context[25];
          context[30] = context[26];
          // closed e.Indent as range 27
          if( ! refalrts::svar_left( context[31], context[29], context[30] ) )
            continue;
          if( ! refalrts::empty_seq( context[29], context[30] ) )
            continue;
          //DEBUG: s.ElemNumber: 17
          //DEBUG: e.Indent: 27
          //DEBUG: s.Number: 31

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/32"refalrts::reinit_number(context["/34 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 }"], "/36 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.Number/31 HalfReuse: >/14 HalfReuse: 'U'/1 }"L);"/38 )/40 Tile{ ]] }
          refalrts::copy_evar(vm, context[32], context[33], context[27], context[28]);
          refalrts::alloc_chars(vm, context[34], context[35], "refalrts::reinit_number(context[", 32);
          refalrts::alloc_chars(vm, context[36], context[37], "], ", 3);
          refalrts::alloc_chars(vm, context[38], context[39], "L);", 3);
          refalrts::alloc_close_bracket(vm, context[40]);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[14]);
          refalrts::reinit_char(context[1], 'U');
          refalrts::link_brackets( context[13], context[40] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[38], context[40] );
          res = refalrts::splice_evar( res, context[31], context[1] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[36], context[37] );
          res = refalrts::splice_evar( res, context[15], context[18] );
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElNumber/18 )/14 >/1
          context[27] = context[23];
          context[28] = context[24];
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          // closed e.Indent as range 27
          //DEBUG: s.ElemNumber: 17
          //DEBUG: e.Indent: 27

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/29 'r'/31 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::reinit_number(context["/32 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/34 )/35 Tile{ ]] }
          refalrts::copy_evar(vm, context[29], context[30], context[27], context[28]);
          refalrts::alloc_char(vm, context[31], 'r');
          refalrts::alloc_chars(vm, context[32], context[33], "alrts::reinit_number(context[", 29);
          refalrts::alloc_char(vm, context[34], ';');
          refalrts::alloc_close_bracket(vm, context[35]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[35] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElNumber/18 e./29 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        // closed e.Indent as range 27
        // closed e. as range 29
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27
        //DEBUG: e.: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/31"refalrts::reinit_number(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElNumber/18 AsIs: e./29 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/37 )/38 Tile{ ]] }
        refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
        refalrts::alloc_chars(vm, context[33], context[34], "refalrts::reinit_number(context[", 32);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::alloc_char(vm, context[36], ']');
        refalrts::alloc_char(vm, context[37], ';');
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[38] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[15], context[17] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.new11/17 # ElIdent/18 e.new12/25 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[18] ) )
          continue;
        // closed e.new10 as range 23
        // closed e.new12 as range 25
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElIdent/18 s.Num/31 e.0/29 )/14 >/1
          context[27] = context[23];
          context[28] = context[24];
          context[29] = context[25];
          context[30] = context[26];
          // closed e.Indent as range 27
          if( ! refalrts::svar_left( context[31], context[29], context[30] ) )
            continue;
          // closed e.0 as range 29
          //DEBUG: s.ElemNumber: 17
          //DEBUG: e.Indent: 27
          //DEBUG: s.Num: 31
          //DEBUG: e.0: 29

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/31 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/32"refalrts::reinit_ident(context["/34 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 }"], identifiers[ident_"/36 Tile{ AsIs: </0 Reuse: & CName/4 } Tile{ AsIs: e.0/29 } >/38"])"/39 Tile{ HalfReuse: ';'/14 HalfReuse: )/1 ]] }
          refalrts::copy_evar(vm, context[32], context[33], context[27], context[28]);
          refalrts::alloc_chars(vm, context[34], context[35], "refalrts::reinit_ident(context[", 31);
          refalrts::alloc_chars(vm, context[36], context[37], "], identifiers[ident_", 21);
          refalrts::alloc_close_call(vm, context[38]);
          refalrts::alloc_chars(vm, context[39], context[40], "])", 2);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::update_name(context[4], functions[efunc_CName]);
          refalrts::reinit_char(context[14], ';');
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[13], context[1] );
          refalrts::push_stack( vm, context[38] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          res = refalrts::splice_evar( res, context[38], context[40] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[36], context[37] );
          res = refalrts::splice_evar( res, context[15], context[18] );
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElIdent/18 )/14 >/1
          context[27] = context[23];
          context[28] = context[24];
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          // closed e.Indent as range 27
          //DEBUG: s.ElemNumber: 17
          //DEBUG: e.Indent: 27

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/29 'r'/31 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::reinit_ident(context["/32 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/34 )/35 Tile{ ]] }
          refalrts::copy_evar(vm, context[29], context[30], context[27], context[28]);
          refalrts::alloc_char(vm, context[31], 'r');
          refalrts::alloc_chars(vm, context[32], context[33], "alrts::reinit_ident(context[", 28);
          refalrts::alloc_char(vm, context[34], ';');
          refalrts::alloc_close_bracket(vm, context[35]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[35] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElIdent/18 e./29 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        // closed e.Indent as range 27
        // closed e. as range 29
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27
        //DEBUG: e.: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/31"refalrts::reinit_ident(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElIdent/18 AsIs: e./29 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/37 )/38 Tile{ ]] }
        refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
        refalrts::alloc_chars(vm, context[33], context[34], "refalrts::reinit_ident(context[", 31);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::alloc_char(vm, context[36], ']');
        refalrts::alloc_char(vm, context[37], ';');
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[38] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[15], context[17] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.new11/17 # ElOpenADT/18 e.new12/25 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        if( ! refalrts::ident_term( identifiers[ident_ElOpenADT], context[18] ) )
          continue;
        // closed e.new10 as range 23
        // closed e.new12 as range 25
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElOpenADT/18 )/14 >/1
          context[27] = context[23];
          context[28] = context[24];
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          // closed e.Indent as range 27
          //DEBUG: s.ElemNumber: 17
          //DEBUG: e.Indent: 27

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/29 'r'/31 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::reinit_open_adt(context["/32 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/34 )/35 Tile{ ]] }
          refalrts::copy_evar(vm, context[29], context[30], context[27], context[28]);
          refalrts::alloc_char(vm, context[31], 'r');
          refalrts::alloc_chars(vm, context[32], context[33], "alrts::reinit_open_adt(context[", 31);
          refalrts::alloc_char(vm, context[34], ';');
          refalrts::alloc_close_bracket(vm, context[35]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[35] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElOpenADT/18 e./29 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        // closed e.Indent as range 27
        // closed e. as range 29
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27
        //DEBUG: e.: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/31"refalrts::reinit_open_adt(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElOpenADT/18 AsIs: e./29 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/37 )/38 Tile{ ]] }
        refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
        refalrts::alloc_chars(vm, context[33], context[34], "refalrts::reinit_open_adt(context[", 34);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::alloc_char(vm, context[36], ']');
        refalrts::alloc_char(vm, context[37], ';');
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[38] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[15], context[17] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.new11/17 # ElCloseADT/18 e.new12/25 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        if( ! refalrts::ident_term( identifiers[ident_ElCloseADT], context[18] ) )
          continue;
        // closed e.new10 as range 23
        // closed e.new12 as range 25
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElCloseADT/18 )/14 >/1
          context[27] = context[23];
          context[28] = context[24];
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          // closed e.Indent as range 27
          //DEBUG: s.ElemNumber: 17
          //DEBUG: e.Indent: 27

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/29 'r'/31 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::reinit_close_adt(context["/32 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/34 )/35 Tile{ ]] }
          refalrts::copy_evar(vm, context[29], context[30], context[27], context[28]);
          refalrts::alloc_char(vm, context[31], 'r');
          refalrts::alloc_chars(vm, context[32], context[33], "alrts::reinit_close_adt(context[", 32);
          refalrts::alloc_char(vm, context[34], ';');
          refalrts::alloc_close_bracket(vm, context[35]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[35] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElCloseADT/18 e./29 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        // closed e.Indent as range 27
        // closed e. as range 29
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27
        //DEBUG: e.: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/31"refalrts::reinit_close_adt(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElCloseADT/18 AsIs: e./29 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/37 )/38 Tile{ ]] }
        refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
        refalrts::alloc_chars(vm, context[33], context[34], "refalrts::reinit_close_adt(context[", 35);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::alloc_char(vm, context[36], ']');
        refalrts::alloc_char(vm, context[37], ';');
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[38] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[15], context[17] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.new11/17 # ElOpenBracket/18 e.new12/25 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        if( ! refalrts::ident_term( identifiers[ident_ElOpenBracket], context[18] ) )
          continue;
        // closed e.new10 as range 23
        // closed e.new12 as range 25
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElOpenBracket/18 )/14 >/1
          context[27] = context[23];
          context[28] = context[24];
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          // closed e.Indent as range 27
          //DEBUG: s.ElemNumber: 17
          //DEBUG: e.Indent: 27

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/29 'r'/31 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::reinit_open_bracket(context["/32 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/34 )/35 Tile{ ]] }
          refalrts::copy_evar(vm, context[29], context[30], context[27], context[28]);
          refalrts::alloc_char(vm, context[31], 'r');
          refalrts::alloc_chars(vm, context[32], context[33], "alrts::reinit_open_bracket(context[", 35);
          refalrts::alloc_char(vm, context[34], ';');
          refalrts::alloc_close_bracket(vm, context[35]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[35] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElOpenBracket/18 e./29 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        // closed e.Indent as range 27
        // closed e. as range 29
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27
        //DEBUG: e.: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/31"refalrts::reinit_open_bracket(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElOpenBracket/18 AsIs: e./29 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/37 )/38 Tile{ ]] }
        refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
        refalrts::alloc_chars(vm, context[33], context[34], "refalrts::reinit_open_bracket(context[", 38);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::alloc_char(vm, context[36], ']');
        refalrts::alloc_char(vm, context[37], ';');
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[38] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[15], context[17] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.new11/17 # ElCloseBracket/18 e.new12/25 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        if( ! refalrts::ident_term( identifiers[ident_ElCloseBracket], context[18] ) )
          continue;
        // closed e.new10 as range 23
        // closed e.new12 as range 25
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElCloseBracket/18 )/14 >/1
          context[27] = context[23];
          context[28] = context[24];
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          // closed e.Indent as range 27
          //DEBUG: s.ElemNumber: 17
          //DEBUG: e.Indent: 27

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/29 'r'/31 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::reinit_close_bracket(context["/32 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/34 )/35 Tile{ ]] }
          refalrts::copy_evar(vm, context[29], context[30], context[27], context[28]);
          refalrts::alloc_char(vm, context[31], 'r');
          refalrts::alloc_chars(vm, context[32], context[33], "alrts::reinit_close_bracket(context[", 36);
          refalrts::alloc_char(vm, context[34], ';');
          refalrts::alloc_close_bracket(vm, context[35]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[35] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElCloseBracket/18 e./29 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        // closed e.Indent as range 27
        // closed e. as range 29
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27
        //DEBUG: e.: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/31"refalrts::reinit_close_bracket(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElCloseBracket/18 AsIs: e./29 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/37 )/38 Tile{ ]] }
        refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
        refalrts::alloc_chars(vm, context[33], context[34], "refalrts::reinit_close_bracket(context[", 39);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::alloc_char(vm, context[36], ']');
        refalrts::alloc_char(vm, context[37], ';');
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[38] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[15], context[17] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.new11/17 # ElOpenCall/18 e.new12/25 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        if( ! refalrts::ident_term( identifiers[ident_ElOpenCall], context[18] ) )
          continue;
        // closed e.new10 as range 23
        // closed e.new12 as range 25
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElOpenCall/18 )/14 >/1
          context[27] = context[23];
          context[28] = context[24];
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          // closed e.Indent as range 27
          //DEBUG: s.ElemNumber: 17
          //DEBUG: e.Indent: 27

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/29 'r'/31 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::reinit_open_call(context["/32 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/34 )/35 Tile{ ]] }
          refalrts::copy_evar(vm, context[29], context[30], context[27], context[28]);
          refalrts::alloc_char(vm, context[31], 'r');
          refalrts::alloc_chars(vm, context[32], context[33], "alrts::reinit_open_call(context[", 32);
          refalrts::alloc_char(vm, context[34], ';');
          refalrts::alloc_close_bracket(vm, context[35]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[35] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElOpenCall/18 e./29 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        // closed e.Indent as range 27
        // closed e. as range 29
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27
        //DEBUG: e.: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/31"refalrts::reinit_open_call(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElOpenCall/18 AsIs: e./29 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/37 )/38 Tile{ ]] }
        refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
        refalrts::alloc_chars(vm, context[33], context[34], "refalrts::reinit_open_call(context[", 35);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::alloc_char(vm, context[36], ']');
        refalrts::alloc_char(vm, context[37], ';');
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[38] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[15], context[17] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.new11/17 # ElCloseCall/18 e.new12/25 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        if( ! refalrts::ident_term( identifiers[ident_ElCloseCall], context[18] ) )
          continue;
        // closed e.new10 as range 23
        // closed e.new12 as range 25
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElCloseCall/18 )/14 >/1
          context[27] = context[23];
          context[28] = context[24];
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          // closed e.Indent as range 27
          //DEBUG: s.ElemNumber: 17
          //DEBUG: e.Indent: 27

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/29 'r'/31 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::reinit_close_call(context["/32 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/34 )/35 Tile{ ]] }
          refalrts::copy_evar(vm, context[29], context[30], context[27], context[28]);
          refalrts::alloc_char(vm, context[31], 'r');
          refalrts::alloc_chars(vm, context[32], context[33], "alrts::reinit_close_call(context[", 33);
          refalrts::alloc_char(vm, context[34], ';');
          refalrts::alloc_close_bracket(vm, context[35]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[35] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElCloseCall/18 e./29 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        // closed e.Indent as range 27
        // closed e. as range 29
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27
        //DEBUG: e.: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/31"refalrts::reinit_close_call(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElCloseCall/18 AsIs: e./29 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/37 )/38 Tile{ ]] }
        refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
        refalrts::alloc_chars(vm, context[33], context[34], "refalrts::reinit_close_call(context[", 36);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::alloc_char(vm, context[36], ']');
        refalrts::alloc_char(vm, context[37], ';');
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[38] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[15], context[17] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.new11/17 # ElClosureHead/18 e.new12/25 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        if( ! refalrts::ident_term( identifiers[ident_ElClosureHead], context[18] ) )
          continue;
        // closed e.new10 as range 23
        // closed e.new12 as range 25
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElClosureHead/18 )/14 >/1
          context[27] = context[23];
          context[28] = context[24];
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          // closed e.Indent as range 27
          //DEBUG: s.ElemNumber: 17
          //DEBUG: e.Indent: 27

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/29 'r'/31 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::reinit_closure_head(context["/32 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/34 )/35 Tile{ ]] }
          refalrts::copy_evar(vm, context[29], context[30], context[27], context[28]);
          refalrts::alloc_char(vm, context[31], 'r');
          refalrts::alloc_chars(vm, context[32], context[33], "alrts::reinit_closure_head(context[", 35);
          refalrts::alloc_char(vm, context[34], ';');
          refalrts::alloc_close_bracket(vm, context[35]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[35] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElClosureHead/18 e./29 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        // closed e.Indent as range 27
        // closed e. as range 29
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27
        //DEBUG: e.: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/31"refalrts::reinit_closure_head(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElClosureHead/18 AsIs: e./29 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/37 )/38 Tile{ ]] }
        refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
        refalrts::alloc_chars(vm, context[33], context[34], "refalrts::reinit_closure_head(context[", 38);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::alloc_char(vm, context[36], ']');
        refalrts::alloc_char(vm, context[37], ';');
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[38] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[15], context[17] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.new11/17 # ElUnwrappedClosure/18 e.new12/25 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[18] ) )
          continue;
        // closed e.new10 as range 23
        // closed e.new12 as range 25
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElUnwrappedClosure/18 s.HeadOffset/31 )/14 >/1
          context[27] = context[23];
          context[28] = context[24];
          context[29] = context[25];
          context[30] = context[26];
          // closed e.Indent as range 27
          if( ! refalrts::svar_left( context[31], context[29], context[30] ) )
            continue;
          if( ! refalrts::empty_seq( context[29], context[30] ) )
            continue;
          //DEBUG: s.ElemNumber: 17
          //DEBUG: e.Indent: 27
          //DEBUG: s.HeadOffset: 31

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/32"refalrts::reinit_unwrapped_closure(context["/34 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 }"], context["/36 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.HeadOffset/31 HalfReuse: >/14 HalfReuse: ']'/1 }");"/38 )/40 Tile{ ]] }
          refalrts::copy_evar(vm, context[32], context[33], context[27], context[28]);
          refalrts::alloc_chars(vm, context[34], context[35], "refalrts::reinit_unwrapped_closure(context[", 43);
          refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
          refalrts::alloc_chars(vm, context[38], context[39], ");", 2);
          refalrts::alloc_close_bracket(vm, context[40]);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[14]);
          refalrts::reinit_char(context[1], ']');
          refalrts::link_brackets( context[13], context[40] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[38], context[40] );
          res = refalrts::splice_evar( res, context[31], context[1] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[36], context[37] );
          res = refalrts::splice_evar( res, context[15], context[18] );
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElUnwrappedClosure/18 )/14 >/1
          context[27] = context[23];
          context[28] = context[24];
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          // closed e.Indent as range 27
          //DEBUG: s.ElemNumber: 17
          //DEBUG: e.Indent: 27

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/29 'r'/31 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::reinit_unwrapped_closure(context["/32 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/34 )/35 Tile{ ]] }
          refalrts::copy_evar(vm, context[29], context[30], context[27], context[28]);
          refalrts::alloc_char(vm, context[31], 'r');
          refalrts::alloc_chars(vm, context[32], context[33], "alrts::reinit_unwrapped_closure(context[", 40);
          refalrts::alloc_char(vm, context[34], ';');
          refalrts::alloc_close_bracket(vm, context[35]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[35] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElUnwrappedClosure/18 e./29 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        // closed e.Indent as range 27
        // closed e. as range 29
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27
        //DEBUG: e.: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/31"refalrts::reinit_unwrapped_closure(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElUnwrappedClosure/18 AsIs: e./29 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/37 )/38 Tile{ ]] }
        refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
        refalrts::alloc_chars(vm, context[33], context[34], "refalrts::reinit_unwrapped_closure(context[", 43);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::alloc_char(vm, context[36], ']');
        refalrts::alloc_char(vm, context[37], ';');
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[38] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[15], context[17] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.new11/17 s.new12/18 s.new13/27 e.new14/25 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        // closed e.new10 as range 23
        if( ! refalrts::svar_left( context[27], context[25], context[26] ) )
          continue;
        // closed e.new14 as range 25
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/28 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElChar/18 s.Char/27 )/14 >/1
          context[28] = context[23];
          context[29] = context[24];
          if( ! refalrts::ident_term( identifiers[ident_ElChar], context[18] ) )
            continue;
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          // closed e.Indent as range 28
          //DEBUG: s.ElemNumber: 17
          //DEBUG: s.Char: 27
          //DEBUG: e.Indent: 28

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/28 AsIs: )/10 AsIs: (/13 } e.Indent/28/30"refalrts::reinit_"/32 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElChar/34 >/35"(context["/36 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 }"], \'"/38 </40 & EscapeChar/41 Tile{ AsIs: s.Char/27 HalfReuse: >/14 HalfReuse: '\''/1 }");"/42 )/44 Tile{ ]] }
          refalrts::copy_evar(vm, context[30], context[31], context[28], context[29]);
          refalrts::alloc_chars(vm, context[32], context[33], "refalrts::reinit_", 17);
          refalrts::alloc_ident(vm, context[34], identifiers[ident_ElChar]);
          refalrts::alloc_close_call(vm, context[35]);
          refalrts::alloc_chars(vm, context[36], context[37], "(context[", 9);
          refalrts::alloc_chars(vm, context[38], context[39], "], \'", 4);
          refalrts::alloc_open_call(vm, context[40]);
          refalrts::alloc_name(vm, context[41], functions[efunc_EscapeChar]);
          refalrts::alloc_chars(vm, context[42], context[43], ");", 2);
          refalrts::alloc_close_bracket(vm, context[44]);
          refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_close_call(context[14]);
          refalrts::reinit_char(context[1], '\'');
          refalrts::link_brackets( context[13], context[44] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[40] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::push_stack( vm, context[35] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[42], context[44] );
          res = refalrts::splice_evar( res, context[27], context[1] );
          res = refalrts::splice_evar( res, context[38], context[41] );
          res = refalrts::splice_evar( res, context[15], context[18] );
          res = refalrts::splice_evar( res, context[34], context[37] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[30], context[31] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/28 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElName/18 s.Num/27 e.0/30 )/14 >/1
          context[28] = context[23];
          context[29] = context[24];
          context[30] = context[25];
          context[31] = context[26];
          if( ! refalrts::ident_term( identifiers[ident_ElName], context[18] ) )
            continue;
          // closed e.Indent as range 28
          // closed e.0 as range 30
          //DEBUG: s.ElemNumber: 17
          //DEBUG: s.Num: 27
          //DEBUG: e.Indent: 28
          //DEBUG: e.0: 30

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/27 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/28 AsIs: )/10 AsIs: (/13 } e.Indent/28/32"refalrts::reinit_"/34 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElName/36 >/37"(context["/38 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 }"], functions[efunc_"/40 </42 & CName/43 Tile{ AsIs: e.0/30 } >/44"])"/45 Tile{ HalfReuse: ';'/14 HalfReuse: )/1 ]] }
          refalrts::copy_evar(vm, context[32], context[33], context[28], context[29]);
          refalrts::alloc_chars(vm, context[34], context[35], "refalrts::reinit_", 17);
          refalrts::alloc_ident(vm, context[36], identifiers[ident_ElName]);
          refalrts::alloc_close_call(vm, context[37]);
          refalrts::alloc_chars(vm, context[38], context[39], "(context[", 9);
          refalrts::alloc_chars(vm, context[40], context[41], "], functions[efunc_", 19);
          refalrts::alloc_open_call(vm, context[42]);
          refalrts::alloc_name(vm, context[43], functions[efunc_CName]);
          refalrts::alloc_close_call(vm, context[44]);
          refalrts::alloc_chars(vm, context[45], context[46], "])", 2);
          refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_char(context[14], ';');
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[13], context[1] );
          refalrts::push_stack( vm, context[44] );
          refalrts::push_stack( vm, context[42] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::push_stack( vm, context[37] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          res = refalrts::splice_evar( res, context[44], context[46] );
          res = refalrts::splice_evar( res, context[30], context[31] );
          res = refalrts::splice_evar( res, context[40], context[43] );
          res = refalrts::splice_evar( res, context[15], context[18] );
          res = refalrts::splice_evar( res, context[36], context[39] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/28 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElNumber/18 s.Number/27 )/14 >/1
          context[28] = context[23];
          context[29] = context[24];
          if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[18] ) )
            continue;
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          // closed e.Indent as range 28
          //DEBUG: s.ElemNumber: 17
          //DEBUG: s.Number: 27
          //DEBUG: e.Indent: 28

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/28 AsIs: )/10 AsIs: (/13 } e.Indent/28/30"refalrts::reinit_"/32 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElNumber/34 >/35"(context["/36 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 }"], "/38 </40 & Symb/41 Tile{ AsIs: s.Number/27 HalfReuse: >/14 HalfReuse: 'U'/1 }"L);"/42 )/44 Tile{ ]] }
          refalrts::copy_evar(vm, context[30], context[31], context[28], context[29]);
          refalrts::alloc_chars(vm, context[32], context[33], "refalrts::reinit_", 17);
          refalrts::alloc_ident(vm, context[34], identifiers[ident_ElNumber]);
          refalrts::alloc_close_call(vm, context[35]);
          refalrts::alloc_chars(vm, context[36], context[37], "(context[", 9);
          refalrts::alloc_chars(vm, context[38], context[39], "], ", 3);
          refalrts::alloc_open_call(vm, context[40]);
          refalrts::alloc_name(vm, context[41], functions[efunc_Symb]);
          refalrts::alloc_chars(vm, context[42], context[43], "L);", 3);
          refalrts::alloc_close_bracket(vm, context[44]);
          refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_close_call(context[14]);
          refalrts::reinit_char(context[1], 'U');
          refalrts::link_brackets( context[13], context[44] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[40] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::push_stack( vm, context[35] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[42], context[44] );
          res = refalrts::splice_evar( res, context[27], context[1] );
          res = refalrts::splice_evar( res, context[38], context[41] );
          res = refalrts::splice_evar( res, context[15], context[18] );
          res = refalrts::splice_evar( res, context[34], context[37] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[30], context[31] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/28 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElIdent/18 s.Num/27 e.0/30 )/14 >/1
          context[28] = context[23];
          context[29] = context[24];
          context[30] = context[25];
          context[31] = context[26];
          if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[18] ) )
            continue;
          // closed e.Indent as range 28
          // closed e.0 as range 30
          //DEBUG: s.ElemNumber: 17
          //DEBUG: s.Num: 27
          //DEBUG: e.Indent: 28
          //DEBUG: e.0: 30

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/27 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/28 AsIs: )/10 AsIs: (/13 } e.Indent/28/32"refalrts::reinit_"/34 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElIdent/36 >/37"(context["/38 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 }"], identifiers[ident_"/40 </42 & CName/43 Tile{ AsIs: e.0/30 } >/44"])"/45 Tile{ HalfReuse: ';'/14 HalfReuse: )/1 ]] }
          refalrts::copy_evar(vm, context[32], context[33], context[28], context[29]);
          refalrts::alloc_chars(vm, context[34], context[35], "refalrts::reinit_", 17);
          refalrts::alloc_ident(vm, context[36], identifiers[ident_ElIdent]);
          refalrts::alloc_close_call(vm, context[37]);
          refalrts::alloc_chars(vm, context[38], context[39], "(context[", 9);
          refalrts::alloc_chars(vm, context[40], context[41], "], identifiers[ident_", 21);
          refalrts::alloc_open_call(vm, context[42]);
          refalrts::alloc_name(vm, context[43], functions[efunc_CName]);
          refalrts::alloc_close_call(vm, context[44]);
          refalrts::alloc_chars(vm, context[45], context[46], "])", 2);
          refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_char(context[14], ';');
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[13], context[1] );
          refalrts::push_stack( vm, context[44] );
          refalrts::push_stack( vm, context[42] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::push_stack( vm, context[37] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          res = refalrts::splice_evar( res, context[44], context[46] );
          res = refalrts::splice_evar( res, context[30], context[31] );
          res = refalrts::splice_evar( res, context[40], context[43] );
          res = refalrts::splice_evar( res, context[15], context[18] );
          res = refalrts::splice_evar( res, context[36], context[39] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/28 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 # ElUnwrappedClosure/18 s.HeadOffset/27 )/14 >/1
        context[28] = context[23];
        context[29] = context[24];
        if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[18] ) )
          continue;
        if( ! refalrts::empty_seq( context[25], context[26] ) )
          continue;
        // closed e.Indent as range 28
        //DEBUG: s.ElemNumber: 17
        //DEBUG: s.HeadOffset: 27
        //DEBUG: e.Indent: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/28 AsIs: )/10 AsIs: (/13 } e.Indent/28/30"refalrts::reinit_"/32 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElUnwrappedClosure/34 >/35"(context["/36 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 }"], context["/38 </40 & Symb/41 Tile{ AsIs: s.HeadOffset/27 HalfReuse: >/14 HalfReuse: ']'/1 }");"/42 )/44 Tile{ ]] }
        refalrts::copy_evar(vm, context[30], context[31], context[28], context[29]);
        refalrts::alloc_chars(vm, context[32], context[33], "refalrts::reinit_", 17);
        refalrts::alloc_ident(vm, context[34], identifiers[ident_ElUnwrappedClosure]);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::alloc_chars(vm, context[36], context[37], "(context[", 9);
        refalrts::alloc_chars(vm, context[38], context[39], "], context[", 11);
        refalrts::alloc_open_call(vm, context[40]);
        refalrts::alloc_name(vm, context[41], functions[efunc_Symb]);
        refalrts::alloc_chars(vm, context[42], context[43], ");", 2);
        refalrts::alloc_close_bracket(vm, context[44]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ']');
        refalrts::link_brackets( context[13], context[44] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[40] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[42], context[44] );
        res = refalrts::splice_evar( res, context[27], context[1] );
        res = refalrts::splice_evar( res, context[38], context[41] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        res = refalrts::splice_evar( res, context[34], context[37] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 s.ElementType/18 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        // closed e.Indent as range 23
        //DEBUG: s.ElemNumber: 17
        //DEBUG: s.ElementType: 18
        //DEBUG: e.Indent: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/25"refalrts::reinit_"/27 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } Tile{ AsIs: s.ElementType/18 HalfReuse: >/14 HalfReuse: '('/1 }"context["/29 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/31"]);"/32 )/34 Tile{ ]] }
        refalrts::copy_evar(vm, context[25], context[26], context[23], context[24]);
        refalrts::alloc_chars(vm, context[27], context[28], "refalrts::reinit_", 17);
        refalrts::alloc_chars(vm, context[29], context[30], "context[", 8);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_chars(vm, context[32], context[33], "]);", 3);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], '(');
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::link_brackets( context[13], context[34] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[31], context[34] );
        res = refalrts::splice_evar( res, context[15], context[17] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 # Reinit/16 s.ElemNumber/17 s.ElementType/18 e./25 )/14 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      // closed e.Indent as range 23
      // closed e. as range 25
      //DEBUG: s.ElemNumber: 17
      //DEBUG: s.ElementType: 18
      //DEBUG: e.Indent: 23
      //DEBUG: e.: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/27"refalrts::reinit_"/29 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } s.ElementType/18/31 >/32"(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 </37 & AllocatorFuncArgument*6/38 Tile{ AsIs: s.ElementType/18 AsIs: e./25 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/39 )/40 Tile{ ]] }
      refalrts::copy_evar(vm, context[27], context[28], context[23], context[24]);
      refalrts::alloc_chars(vm, context[29], context[30], "refalrts::reinit_", 17);
      refalrts::copy_stvar(vm, context[31], context[18]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_chars(vm, context[33], context[34], "(context[", 9);
      refalrts::alloc_close_call(vm, context[35]);
      refalrts::alloc_char(vm, context[36], ']');
      refalrts::alloc_open_call(vm, context[37]);
      refalrts::alloc_name(vm, context[38], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_char(vm, context[39], ';');
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[16], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ')');
      refalrts::link_brackets( context[13], context[40] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[18], context[1] );
      res = refalrts::splice_evar( res, context[35], context[38] );
      res = refalrts::splice_evar( res, context[15], context[17] );
      res = refalrts::splice_evar( res, context[31], context[34] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Native/4 (/9 e.new6/19 )/10 (/13 # CmdCreateElem/15 # Update/16 s.new7/17 s.new8/18 e.new9/21 )/14 >/1
    context[19] = context[7];
    context[20] = context[8];
    context[21] = context[11];
    context[22] = context[12];
    if( ! refalrts::ident_term( identifiers[ident_Update], context[16] ) )
      continue;
    // closed e.new6 as range 19
    // closed e.new9 as range 21
    do {
      // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Update/16 s.new11/17 # ElChar/18 e.new12/25 )/14 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      if( ! refalrts::ident_term( identifiers[ident_ElChar], context[18] ) )
        continue;
      // closed e.new10 as range 23
      // closed e.new12 as range 25
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElChar/18 s.Char/31 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        // closed e.Indent as range 27
        if( ! refalrts::svar_left( context[31], context[29], context[30] ) )
          continue;
        if( ! refalrts::empty_seq( context[29], context[30] ) )
          continue;
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27
        //DEBUG: s.Char: 31

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/32"refalrts::update_char(context["/34 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 }"], \'"/36 Tile{ AsIs: </0 Reuse: & EscapeChar/4 } Tile{ AsIs: s.Char/31 HalfReuse: >/14 HalfReuse: '\''/1 }");"/38 )/40 Tile{ ]] }
        refalrts::copy_evar(vm, context[32], context[33], context[27], context[28]);
        refalrts::alloc_chars(vm, context[34], context[35], "refalrts::update_char(context[", 30);
        refalrts::alloc_chars(vm, context[36], context[37], "], \'", 4);
        refalrts::alloc_chars(vm, context[38], context[39], ");", 2);
        refalrts::alloc_close_bracket(vm, context[40]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[18]);
        refalrts::update_name(context[4], functions[efunc_EscapeChar]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], '\'');
        refalrts::link_brackets( context[13], context[40] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[38], context[40] );
        res = refalrts::splice_evar( res, context[31], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElChar/18 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::empty_seq( context[25], context[26] ) )
          continue;
        // closed e.Indent as range 27
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/29 'r'/31 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::update_char(context["/32 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/34 )/35 Tile{ ]] }
        refalrts::copy_evar(vm, context[29], context[30], context[27], context[28]);
        refalrts::alloc_char(vm, context[31], 'r');
        refalrts::alloc_chars(vm, context[32], context[33], "alrts::update_char(context[", 27);
        refalrts::alloc_char(vm, context[34], ';');
        refalrts::alloc_close_bracket(vm, context[35]);
        refalrts::reinit_char(context[0], 'e');
        refalrts::reinit_char(context[4], 'f');
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_char(context[14], ']');
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[35] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_evar( res, context[15], context[1] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElChar/18 e./29 )/14 >/1
      context[27] = context[23];
      context[28] = context[24];
      context[29] = context[25];
      context[30] = context[26];
      // closed e.Indent as range 27
      // closed e. as range 29
      //DEBUG: s.ElemNumber: 17
      //DEBUG: e.Indent: 27
      //DEBUG: e.: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/31"refalrts::update_char(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElChar/18 AsIs: e./29 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/37 )/38 Tile{ ]] }
      refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
      refalrts::alloc_chars(vm, context[33], context[34], "refalrts::update_char(context[", 30);
      refalrts::alloc_close_call(vm, context[35]);
      refalrts::alloc_char(vm, context[36], ']');
      refalrts::alloc_char(vm, context[37], ';');
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[16], functions[efunc_Symb]);
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ')');
      refalrts::link_brackets( context[13], context[38] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[15] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[18], context[1] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[15], context[17] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Update/16 s.new11/17 # ElName/18 e.new12/25 )/14 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      if( ! refalrts::ident_term( identifiers[ident_ElName], context[18] ) )
        continue;
      // closed e.new10 as range 23
      // closed e.new12 as range 25
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElName/18 s.Num/31 e.0/29 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        // closed e.Indent as range 27
        if( ! refalrts::svar_left( context[31], context[29], context[30] ) )
          continue;
        // closed e.0 as range 29
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27
        //DEBUG: s.Num: 31
        //DEBUG: e.0: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/31 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/32"refalrts::update_name(context["/34 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 }"], functions[efunc_"/36 Tile{ AsIs: </0 Reuse: & CName/4 } Tile{ AsIs: e.0/29 } >/38"])"/39 Tile{ HalfReuse: ';'/14 HalfReuse: )/1 ]] }
        refalrts::copy_evar(vm, context[32], context[33], context[27], context[28]);
        refalrts::alloc_chars(vm, context[34], context[35], "refalrts::update_name(context[", 30);
        refalrts::alloc_chars(vm, context[36], context[37], "], functions[efunc_", 19);
        refalrts::alloc_close_call(vm, context[38]);
        refalrts::alloc_chars(vm, context[39], context[40], "])", 2);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[18]);
        refalrts::update_name(context[4], functions[efunc_CName]);
        refalrts::reinit_char(context[14], ';');
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[13], context[1] );
        refalrts::push_stack( vm, context[38] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[38], context[40] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElName/18 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::empty_seq( context[25], context[26] ) )
          continue;
        // closed e.Indent as range 27
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/29 'r'/31 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::update_name(context["/32 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/34 )/35 Tile{ ]] }
        refalrts::copy_evar(vm, context[29], context[30], context[27], context[28]);
        refalrts::alloc_char(vm, context[31], 'r');
        refalrts::alloc_chars(vm, context[32], context[33], "alrts::update_name(context[", 27);
        refalrts::alloc_char(vm, context[34], ';');
        refalrts::alloc_close_bracket(vm, context[35]);
        refalrts::reinit_char(context[0], 'e');
        refalrts::reinit_char(context[4], 'f');
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_char(context[14], ']');
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[35] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_evar( res, context[15], context[1] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElName/18 e./29 )/14 >/1
      context[27] = context[23];
      context[28] = context[24];
      context[29] = context[25];
      context[30] = context[26];
      // closed e.Indent as range 27
      // closed e. as range 29
      //DEBUG: s.ElemNumber: 17
      //DEBUG: e.Indent: 27
      //DEBUG: e.: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/31"refalrts::update_name(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElName/18 AsIs: e./29 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/37 )/38 Tile{ ]] }
      refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
      refalrts::alloc_chars(vm, context[33], context[34], "refalrts::update_name(context[", 30);
      refalrts::alloc_close_call(vm, context[35]);
      refalrts::alloc_char(vm, context[36], ']');
      refalrts::alloc_char(vm, context[37], ';');
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[16], functions[efunc_Symb]);
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ')');
      refalrts::link_brackets( context[13], context[38] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[15] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[18], context[1] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[15], context[17] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Update/16 s.new11/17 # ElNumber/18 e.new12/25 )/14 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[18] ) )
        continue;
      // closed e.new10 as range 23
      // closed e.new12 as range 25
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElNumber/18 s.Number/31 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        // closed e.Indent as range 27
        if( ! refalrts::svar_left( context[31], context[29], context[30] ) )
          continue;
        if( ! refalrts::empty_seq( context[29], context[30] ) )
          continue;
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27
        //DEBUG: s.Number: 31

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/32"refalrts::update_number(context["/34 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 }"], "/36 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.Number/31 HalfReuse: >/14 HalfReuse: 'U'/1 }"L);"/38 )/40 Tile{ ]] }
        refalrts::copy_evar(vm, context[32], context[33], context[27], context[28]);
        refalrts::alloc_chars(vm, context[34], context[35], "refalrts::update_number(context[", 32);
        refalrts::alloc_chars(vm, context[36], context[37], "], ", 3);
        refalrts::alloc_chars(vm, context[38], context[39], "L);", 3);
        refalrts::alloc_close_bracket(vm, context[40]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[18]);
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], 'U');
        refalrts::link_brackets( context[13], context[40] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[38], context[40] );
        res = refalrts::splice_evar( res, context[31], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElNumber/18 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::empty_seq( context[25], context[26] ) )
          continue;
        // closed e.Indent as range 27
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/29 'r'/31 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::update_number(context["/32 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/34 )/35 Tile{ ]] }
        refalrts::copy_evar(vm, context[29], context[30], context[27], context[28]);
        refalrts::alloc_char(vm, context[31], 'r');
        refalrts::alloc_chars(vm, context[32], context[33], "alrts::update_number(context[", 29);
        refalrts::alloc_char(vm, context[34], ';');
        refalrts::alloc_close_bracket(vm, context[35]);
        refalrts::reinit_char(context[0], 'e');
        refalrts::reinit_char(context[4], 'f');
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_char(context[14], ']');
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[35] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_evar( res, context[15], context[1] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElNumber/18 e./29 )/14 >/1
      context[27] = context[23];
      context[28] = context[24];
      context[29] = context[25];
      context[30] = context[26];
      // closed e.Indent as range 27
      // closed e. as range 29
      //DEBUG: s.ElemNumber: 17
      //DEBUG: e.Indent: 27
      //DEBUG: e.: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/31"refalrts::update_number(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElNumber/18 AsIs: e./29 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/37 )/38 Tile{ ]] }
      refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
      refalrts::alloc_chars(vm, context[33], context[34], "refalrts::update_number(context[", 32);
      refalrts::alloc_close_call(vm, context[35]);
      refalrts::alloc_char(vm, context[36], ']');
      refalrts::alloc_char(vm, context[37], ';');
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[16], functions[efunc_Symb]);
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ')');
      refalrts::link_brackets( context[13], context[38] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[15] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[18], context[1] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[15], context[17] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Update/16 s.new11/17 # ElIdent/18 e.new12/25 )/14 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[18] ) )
        continue;
      // closed e.new10 as range 23
      // closed e.new12 as range 25
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElIdent/18 s.Num/31 e.0/29 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        // closed e.Indent as range 27
        if( ! refalrts::svar_left( context[31], context[29], context[30] ) )
          continue;
        // closed e.0 as range 29
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27
        //DEBUG: s.Num: 31
        //DEBUG: e.0: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/31 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/32"refalrts::update_ident(context["/34 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 }"], identifiers[ident_"/36 Tile{ AsIs: </0 Reuse: & CName/4 } Tile{ AsIs: e.0/29 } >/38"])"/39 Tile{ HalfReuse: ';'/14 HalfReuse: )/1 ]] }
        refalrts::copy_evar(vm, context[32], context[33], context[27], context[28]);
        refalrts::alloc_chars(vm, context[34], context[35], "refalrts::update_ident(context[", 31);
        refalrts::alloc_chars(vm, context[36], context[37], "], identifiers[ident_", 21);
        refalrts::alloc_close_call(vm, context[38]);
        refalrts::alloc_chars(vm, context[39], context[40], "])", 2);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[18]);
        refalrts::update_name(context[4], functions[efunc_CName]);
        refalrts::reinit_char(context[14], ';');
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[13], context[1] );
        refalrts::push_stack( vm, context[38] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[38], context[40] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElIdent/18 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::empty_seq( context[25], context[26] ) )
          continue;
        // closed e.Indent as range 27
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/29 'r'/31 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::update_ident(context["/32 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/34 )/35 Tile{ ]] }
        refalrts::copy_evar(vm, context[29], context[30], context[27], context[28]);
        refalrts::alloc_char(vm, context[31], 'r');
        refalrts::alloc_chars(vm, context[32], context[33], "alrts::update_ident(context[", 28);
        refalrts::alloc_char(vm, context[34], ';');
        refalrts::alloc_close_bracket(vm, context[35]);
        refalrts::reinit_char(context[0], 'e');
        refalrts::reinit_char(context[4], 'f');
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_char(context[14], ']');
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[35] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_evar( res, context[15], context[1] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElIdent/18 e./29 )/14 >/1
      context[27] = context[23];
      context[28] = context[24];
      context[29] = context[25];
      context[30] = context[26];
      // closed e.Indent as range 27
      // closed e. as range 29
      //DEBUG: s.ElemNumber: 17
      //DEBUG: e.Indent: 27
      //DEBUG: e.: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/31"refalrts::update_ident(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElIdent/18 AsIs: e./29 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/37 )/38 Tile{ ]] }
      refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
      refalrts::alloc_chars(vm, context[33], context[34], "refalrts::update_ident(context[", 31);
      refalrts::alloc_close_call(vm, context[35]);
      refalrts::alloc_char(vm, context[36], ']');
      refalrts::alloc_char(vm, context[37], ';');
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[16], functions[efunc_Symb]);
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ')');
      refalrts::link_brackets( context[13], context[38] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[15] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[18], context[1] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[15], context[17] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Update/16 s.new11/17 # ElOpenADT/18 e.new12/25 )/14 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      if( ! refalrts::ident_term( identifiers[ident_ElOpenADT], context[18] ) )
        continue;
      // closed e.new10 as range 23
      // closed e.new12 as range 25
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElOpenADT/18 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        if( ! refalrts::empty_seq( context[25], context[26] ) )
          continue;
        // closed e.Indent as range 27
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/29 'r'/31 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::update_open_adt(context["/32 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/34 )/35 Tile{ ]] }
        refalrts::copy_evar(vm, context[29], context[30], context[27], context[28]);
        refalrts::alloc_char(vm, context[31], 'r');
        refalrts::alloc_chars(vm, context[32], context[33], "alrts::update_open_adt(context[", 31);
        refalrts::alloc_char(vm, context[34], ';');
        refalrts::alloc_close_bracket(vm, context[35]);
        refalrts::reinit_char(context[0], 'e');
        refalrts::reinit_char(context[4], 'f');
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_char(context[14], ']');
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[35] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_evar( res, context[15], context[1] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElOpenADT/18 e./29 )/14 >/1
      context[27] = context[23];
      context[28] = context[24];
      context[29] = context[25];
      context[30] = context[26];
      // closed e.Indent as range 27
      // closed e. as range 29
      //DEBUG: s.ElemNumber: 17
      //DEBUG: e.Indent: 27
      //DEBUG: e.: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/31"refalrts::update_open_adt(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElOpenADT/18 AsIs: e./29 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/37 )/38 Tile{ ]] }
      refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
      refalrts::alloc_chars(vm, context[33], context[34], "refalrts::update_open_adt(context[", 34);
      refalrts::alloc_close_call(vm, context[35]);
      refalrts::alloc_char(vm, context[36], ']');
      refalrts::alloc_char(vm, context[37], ';');
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[16], functions[efunc_Symb]);
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ')');
      refalrts::link_brackets( context[13], context[38] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[15] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[18], context[1] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[15], context[17] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Update/16 s.new11/17 # ElCloseADT/18 e.new12/25 )/14 >/1
    context[23] = context[19];
    context[24] = context[20];
    context[25] = context[21];
    context[26] = context[22];
    if( ! refalrts::ident_term( identifiers[ident_ElCloseADT], context[18] ) )
      continue;
    // closed e.new10 as range 23
    // closed e.new12 as range 25
    do {
      // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElCloseADT/18 )/14 >/1
      context[27] = context[23];
      context[28] = context[24];
      if( ! refalrts::empty_seq( context[25], context[26] ) )
        continue;
      // closed e.Indent as range 27
      //DEBUG: s.ElemNumber: 17
      //DEBUG: e.Indent: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/29 'r'/31 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::update_close_adt(context["/32 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/34 )/35 Tile{ ]] }
      refalrts::copy_evar(vm, context[29], context[30], context[27], context[28]);
      refalrts::alloc_char(vm, context[31], 'r');
      refalrts::alloc_chars(vm, context[32], context[33], "alrts::update_close_adt(context[", 32);
      refalrts::alloc_char(vm, context[34], ';');
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::reinit_char(context[0], 'e');
      refalrts::reinit_char(context[4], 'f');
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[16], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[18]);
      refalrts::reinit_char(context[14], ']');
      refalrts::reinit_char(context[1], ')');
      refalrts::link_brackets( context[13], context[35] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[15] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[15], context[1] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElCloseADT/18 e./29 )/14 >/1
    context[27] = context[23];
    context[28] = context[24];
    context[29] = context[25];
    context[30] = context[26];
    // closed e.Indent as range 27
    // closed e. as range 29
    //DEBUG: s.ElemNumber: 17
    //DEBUG: e.Indent: 27
    //DEBUG: e.: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/31"refalrts::update_close_adt(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElCloseADT/18 AsIs: e./29 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/37 )/38 Tile{ ]] }
    refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
    refalrts::alloc_chars(vm, context[33], context[34], "refalrts::update_close_adt(context[", 35);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_char(vm, context[36], ']');
    refalrts::alloc_char(vm, context[37], ';');
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::reinit_open_call(context[15]);
    refalrts::reinit_name(context[16], functions[efunc_Symb]);
    refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
    refalrts::reinit_close_call(context[14]);
    refalrts::reinit_char(context[1], ')');
    refalrts::link_brackets( context[13], context[38] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[18], context[1] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[15], context[17] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[9], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Native/4 (/9 e.new1/7 )/10 (/13 # CmdCreateElem/15 s.new2/16 s.new3/17 s.new4/18 e.new5/11 )/14 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[5], context[6] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = refalrts::ident_left( identifiers[ident_CmdCreateElem], context[11], context[12] );
    if( ! context[15] )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    // closed e.new1 as range 7
    if( ! refalrts::svar_left( context[16], context[11], context[12] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[11], context[12] ) )
      continue;
    if( ! refalrts::svar_left( context[18], context[11], context[12] ) )
      continue;
    // closed e.new5 as range 11
    do {
      // </0 & GenCommand-Native/4 (/9 e.new6/19 )/10 (/13 # CmdCreateElem/15 # Update/16 s.new7/17 s.new8/18 e.new9/21 )/14 >/1
      context[19] = context[7];
      context[20] = context[8];
      context[21] = context[11];
      context[22] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_Update], context[16] ) )
        continue;
      // closed e.new6 as range 19
      // closed e.new9 as range 21
      do {
        // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Update/16 s.new11/17 # ElOpenBracket/18 e.new12/25 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        if( ! refalrts::ident_term( identifiers[ident_ElOpenBracket], context[18] ) )
          continue;
        // closed e.new10 as range 23
        // closed e.new12 as range 25
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElOpenBracket/18 )/14 >/1
          context[27] = context[23];
          context[28] = context[24];
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          // closed e.Indent as range 27
          //DEBUG: s.ElemNumber: 17
          //DEBUG: e.Indent: 27

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/29 'r'/31 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::update_open_bracket(context["/32 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/34 )/35 Tile{ ]] }
          refalrts::copy_evar(vm, context[29], context[30], context[27], context[28]);
          refalrts::alloc_char(vm, context[31], 'r');
          refalrts::alloc_chars(vm, context[32], context[33], "alrts::update_open_bracket(context[", 35);
          refalrts::alloc_char(vm, context[34], ';');
          refalrts::alloc_close_bracket(vm, context[35]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[35] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElOpenBracket/18 e./29 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        // closed e.Indent as range 27
        // closed e. as range 29
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27
        //DEBUG: e.: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/31"refalrts::update_open_bracket(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElOpenBracket/18 AsIs: e./29 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/37 )/38 Tile{ ]] }
        refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
        refalrts::alloc_chars(vm, context[33], context[34], "refalrts::update_open_bracket(context[", 38);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::alloc_char(vm, context[36], ']');
        refalrts::alloc_char(vm, context[37], ';');
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[38] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[15], context[17] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Update/16 s.new11/17 # ElCloseBracket/18 e.new12/25 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        if( ! refalrts::ident_term( identifiers[ident_ElCloseBracket], context[18] ) )
          continue;
        // closed e.new10 as range 23
        // closed e.new12 as range 25
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElCloseBracket/18 )/14 >/1
          context[27] = context[23];
          context[28] = context[24];
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          // closed e.Indent as range 27
          //DEBUG: s.ElemNumber: 17
          //DEBUG: e.Indent: 27

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/29 'r'/31 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::update_close_bracket(context["/32 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/34 )/35 Tile{ ]] }
          refalrts::copy_evar(vm, context[29], context[30], context[27], context[28]);
          refalrts::alloc_char(vm, context[31], 'r');
          refalrts::alloc_chars(vm, context[32], context[33], "alrts::update_close_bracket(context[", 36);
          refalrts::alloc_char(vm, context[34], ';');
          refalrts::alloc_close_bracket(vm, context[35]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[35] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElCloseBracket/18 e./29 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        // closed e.Indent as range 27
        // closed e. as range 29
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27
        //DEBUG: e.: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/31"refalrts::update_close_bracket(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElCloseBracket/18 AsIs: e./29 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/37 )/38 Tile{ ]] }
        refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
        refalrts::alloc_chars(vm, context[33], context[34], "refalrts::update_close_bracket(context[", 39);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::alloc_char(vm, context[36], ']');
        refalrts::alloc_char(vm, context[37], ';');
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[38] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[15], context[17] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Update/16 s.new11/17 # ElOpenCall/18 e.new12/25 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        if( ! refalrts::ident_term( identifiers[ident_ElOpenCall], context[18] ) )
          continue;
        // closed e.new10 as range 23
        // closed e.new12 as range 25
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElOpenCall/18 )/14 >/1
          context[27] = context[23];
          context[28] = context[24];
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          // closed e.Indent as range 27
          //DEBUG: s.ElemNumber: 17
          //DEBUG: e.Indent: 27

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/29 'r'/31 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::update_open_call(context["/32 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/34 )/35 Tile{ ]] }
          refalrts::copy_evar(vm, context[29], context[30], context[27], context[28]);
          refalrts::alloc_char(vm, context[31], 'r');
          refalrts::alloc_chars(vm, context[32], context[33], "alrts::update_open_call(context[", 32);
          refalrts::alloc_char(vm, context[34], ';');
          refalrts::alloc_close_bracket(vm, context[35]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[35] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElOpenCall/18 e./29 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        // closed e.Indent as range 27
        // closed e. as range 29
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27
        //DEBUG: e.: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/31"refalrts::update_open_call(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElOpenCall/18 AsIs: e./29 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/37 )/38 Tile{ ]] }
        refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
        refalrts::alloc_chars(vm, context[33], context[34], "refalrts::update_open_call(context[", 35);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::alloc_char(vm, context[36], ']');
        refalrts::alloc_char(vm, context[37], ';');
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[38] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[15], context[17] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Update/16 s.new11/17 # ElCloseCall/18 e.new12/25 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        if( ! refalrts::ident_term( identifiers[ident_ElCloseCall], context[18] ) )
          continue;
        // closed e.new10 as range 23
        // closed e.new12 as range 25
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElCloseCall/18 )/14 >/1
          context[27] = context[23];
          context[28] = context[24];
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          // closed e.Indent as range 27
          //DEBUG: s.ElemNumber: 17
          //DEBUG: e.Indent: 27

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/29 'r'/31 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::update_close_call(context["/32 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/34 )/35 Tile{ ]] }
          refalrts::copy_evar(vm, context[29], context[30], context[27], context[28]);
          refalrts::alloc_char(vm, context[31], 'r');
          refalrts::alloc_chars(vm, context[32], context[33], "alrts::update_close_call(context[", 33);
          refalrts::alloc_char(vm, context[34], ';');
          refalrts::alloc_close_bracket(vm, context[35]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[35] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElCloseCall/18 e./29 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        // closed e.Indent as range 27
        // closed e. as range 29
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27
        //DEBUG: e.: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/31"refalrts::update_close_call(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElCloseCall/18 AsIs: e./29 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/37 )/38 Tile{ ]] }
        refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
        refalrts::alloc_chars(vm, context[33], context[34], "refalrts::update_close_call(context[", 36);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::alloc_char(vm, context[36], ']');
        refalrts::alloc_char(vm, context[37], ';');
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[38] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[15], context[17] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Update/16 s.new11/17 # ElClosureHead/18 e.new12/25 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        if( ! refalrts::ident_term( identifiers[ident_ElClosureHead], context[18] ) )
          continue;
        // closed e.new10 as range 23
        // closed e.new12 as range 25
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElClosureHead/18 )/14 >/1
          context[27] = context[23];
          context[28] = context[24];
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          // closed e.Indent as range 27
          //DEBUG: s.ElemNumber: 17
          //DEBUG: e.Indent: 27

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/29 'r'/31 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::update_closure_head(context["/32 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/34 )/35 Tile{ ]] }
          refalrts::copy_evar(vm, context[29], context[30], context[27], context[28]);
          refalrts::alloc_char(vm, context[31], 'r');
          refalrts::alloc_chars(vm, context[32], context[33], "alrts::update_closure_head(context[", 35);
          refalrts::alloc_char(vm, context[34], ';');
          refalrts::alloc_close_bracket(vm, context[35]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[35] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElClosureHead/18 e./29 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        // closed e.Indent as range 27
        // closed e. as range 29
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27
        //DEBUG: e.: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/31"refalrts::update_closure_head(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElClosureHead/18 AsIs: e./29 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/37 )/38 Tile{ ]] }
        refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
        refalrts::alloc_chars(vm, context[33], context[34], "refalrts::update_closure_head(context[", 38);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::alloc_char(vm, context[36], ']');
        refalrts::alloc_char(vm, context[37], ';');
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[38] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[15], context[17] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Update/16 s.new11/17 # ElUnwrappedClosure/18 e.new12/25 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[18] ) )
          continue;
        // closed e.new10 as range 23
        // closed e.new12 as range 25
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElUnwrappedClosure/18 s.HeadOffset/31 )/14 >/1
          context[27] = context[23];
          context[28] = context[24];
          context[29] = context[25];
          context[30] = context[26];
          // closed e.Indent as range 27
          if( ! refalrts::svar_left( context[31], context[29], context[30] ) )
            continue;
          if( ! refalrts::empty_seq( context[29], context[30] ) )
            continue;
          //DEBUG: s.ElemNumber: 17
          //DEBUG: e.Indent: 27
          //DEBUG: s.HeadOffset: 31

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/32"refalrts::update_unwrapped_closure(context["/34 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 }"], context["/36 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.HeadOffset/31 HalfReuse: >/14 HalfReuse: ']'/1 }");"/38 )/40 Tile{ ]] }
          refalrts::copy_evar(vm, context[32], context[33], context[27], context[28]);
          refalrts::alloc_chars(vm, context[34], context[35], "refalrts::update_unwrapped_closure(context[", 43);
          refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
          refalrts::alloc_chars(vm, context[38], context[39], ");", 2);
          refalrts::alloc_close_bracket(vm, context[40]);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[14]);
          refalrts::reinit_char(context[1], ']');
          refalrts::link_brackets( context[13], context[40] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[38], context[40] );
          res = refalrts::splice_evar( res, context[31], context[1] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[36], context[37] );
          res = refalrts::splice_evar( res, context[15], context[18] );
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElUnwrappedClosure/18 )/14 >/1
          context[27] = context[23];
          context[28] = context[24];
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          // closed e.Indent as range 27
          //DEBUG: s.ElemNumber: 17
          //DEBUG: e.Indent: 27

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/29 'r'/31 Tile{ HalfReuse: 'e'/0 HalfReuse: 'f'/4 }"alrts::update_unwrapped_closure(context["/32 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/34 )/35 Tile{ ]] }
          refalrts::copy_evar(vm, context[29], context[30], context[27], context[28]);
          refalrts::alloc_char(vm, context[31], 'r');
          refalrts::alloc_chars(vm, context[32], context[33], "alrts::update_unwrapped_closure(context[", 40);
          refalrts::alloc_char(vm, context[34], ';');
          refalrts::alloc_close_bracket(vm, context[35]);
          refalrts::reinit_char(context[0], 'e');
          refalrts::reinit_char(context[4], 'f');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_char(context[14], ']');
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[13], context[35] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[15], context[1] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_evar( res, context[29], context[30] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/27 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElUnwrappedClosure/18 e./29 )/14 >/1
        context[27] = context[23];
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        // closed e.Indent as range 27
        // closed e. as range 29
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 27
        //DEBUG: e.: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/27 AsIs: )/10 AsIs: (/13 } e.Indent/27/31"refalrts::update_unwrapped_closure(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 Tile{ AsIs: </0 Reuse: & AllocatorFuncArgument*6/4 } Tile{ AsIs: # ElUnwrappedClosure/18 AsIs: e./29 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/37 )/38 Tile{ ]] }
        refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
        refalrts::alloc_chars(vm, context[33], context[34], "refalrts::update_unwrapped_closure(context[", 43);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::alloc_char(vm, context[36], ']');
        refalrts::alloc_char(vm, context[37], ';');
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[38] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[15], context[17] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.new10/23 )/10 (/13 # CmdCreateElem/15 # Update/16 s.new11/17 s.new12/18 s.new13/27 e.new14/25 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        // closed e.new10 as range 23
        if( ! refalrts::svar_left( context[27], context[25], context[26] ) )
          continue;
        // closed e.new14 as range 25
        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/28 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElChar/18 s.Char/27 )/14 >/1
          context[28] = context[23];
          context[29] = context[24];
          if( ! refalrts::ident_term( identifiers[ident_ElChar], context[18] ) )
            continue;
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          // closed e.Indent as range 28
          //DEBUG: s.ElemNumber: 17
          //DEBUG: s.Char: 27
          //DEBUG: e.Indent: 28

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/28 AsIs: )/10 AsIs: (/13 } e.Indent/28/30"refalrts::update_"/32 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElChar/34 >/35"(context["/36 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 }"], \'"/38 </40 & EscapeChar/41 Tile{ AsIs: s.Char/27 HalfReuse: >/14 HalfReuse: '\''/1 }");"/42 )/44 Tile{ ]] }
          refalrts::copy_evar(vm, context[30], context[31], context[28], context[29]);
          refalrts::alloc_chars(vm, context[32], context[33], "refalrts::update_", 17);
          refalrts::alloc_ident(vm, context[34], identifiers[ident_ElChar]);
          refalrts::alloc_close_call(vm, context[35]);
          refalrts::alloc_chars(vm, context[36], context[37], "(context[", 9);
          refalrts::alloc_chars(vm, context[38], context[39], "], \'", 4);
          refalrts::alloc_open_call(vm, context[40]);
          refalrts::alloc_name(vm, context[41], functions[efunc_EscapeChar]);
          refalrts::alloc_chars(vm, context[42], context[43], ");", 2);
          refalrts::alloc_close_bracket(vm, context[44]);
          refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_close_call(context[14]);
          refalrts::reinit_char(context[1], '\'');
          refalrts::link_brackets( context[13], context[44] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[40] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::push_stack( vm, context[35] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[42], context[44] );
          res = refalrts::splice_evar( res, context[27], context[1] );
          res = refalrts::splice_evar( res, context[38], context[41] );
          res = refalrts::splice_evar( res, context[15], context[18] );
          res = refalrts::splice_evar( res, context[34], context[37] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[30], context[31] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/28 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElName/18 s.Num/27 e.0/30 )/14 >/1
          context[28] = context[23];
          context[29] = context[24];
          context[30] = context[25];
          context[31] = context[26];
          if( ! refalrts::ident_term( identifiers[ident_ElName], context[18] ) )
            continue;
          // closed e.Indent as range 28
          // closed e.0 as range 30
          //DEBUG: s.ElemNumber: 17
          //DEBUG: s.Num: 27
          //DEBUG: e.Indent: 28
          //DEBUG: e.0: 30

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/27 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/28 AsIs: )/10 AsIs: (/13 } e.Indent/28/32"refalrts::update_"/34 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElName/36 >/37"(context["/38 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 }"], functions[efunc_"/40 </42 & CName/43 Tile{ AsIs: e.0/30 } >/44"])"/45 Tile{ HalfReuse: ';'/14 HalfReuse: )/1 ]] }
          refalrts::copy_evar(vm, context[32], context[33], context[28], context[29]);
          refalrts::alloc_chars(vm, context[34], context[35], "refalrts::update_", 17);
          refalrts::alloc_ident(vm, context[36], identifiers[ident_ElName]);
          refalrts::alloc_close_call(vm, context[37]);
          refalrts::alloc_chars(vm, context[38], context[39], "(context[", 9);
          refalrts::alloc_chars(vm, context[40], context[41], "], functions[efunc_", 19);
          refalrts::alloc_open_call(vm, context[42]);
          refalrts::alloc_name(vm, context[43], functions[efunc_CName]);
          refalrts::alloc_close_call(vm, context[44]);
          refalrts::alloc_chars(vm, context[45], context[46], "])", 2);
          refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_char(context[14], ';');
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[13], context[1] );
          refalrts::push_stack( vm, context[44] );
          refalrts::push_stack( vm, context[42] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::push_stack( vm, context[37] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          res = refalrts::splice_evar( res, context[44], context[46] );
          res = refalrts::splice_evar( res, context[30], context[31] );
          res = refalrts::splice_evar( res, context[40], context[43] );
          res = refalrts::splice_evar( res, context[15], context[18] );
          res = refalrts::splice_evar( res, context[36], context[39] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/28 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElNumber/18 s.Number/27 )/14 >/1
          context[28] = context[23];
          context[29] = context[24];
          if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[18] ) )
            continue;
          if( ! refalrts::empty_seq( context[25], context[26] ) )
            continue;
          // closed e.Indent as range 28
          //DEBUG: s.ElemNumber: 17
          //DEBUG: s.Number: 27
          //DEBUG: e.Indent: 28

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/28 AsIs: )/10 AsIs: (/13 } e.Indent/28/30"refalrts::update_"/32 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElNumber/34 >/35"(context["/36 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 }"], "/38 </40 & Symb/41 Tile{ AsIs: s.Number/27 HalfReuse: >/14 HalfReuse: 'U'/1 }"L);"/42 )/44 Tile{ ]] }
          refalrts::copy_evar(vm, context[30], context[31], context[28], context[29]);
          refalrts::alloc_chars(vm, context[32], context[33], "refalrts::update_", 17);
          refalrts::alloc_ident(vm, context[34], identifiers[ident_ElNumber]);
          refalrts::alloc_close_call(vm, context[35]);
          refalrts::alloc_chars(vm, context[36], context[37], "(context[", 9);
          refalrts::alloc_chars(vm, context[38], context[39], "], ", 3);
          refalrts::alloc_open_call(vm, context[40]);
          refalrts::alloc_name(vm, context[41], functions[efunc_Symb]);
          refalrts::alloc_chars(vm, context[42], context[43], "L);", 3);
          refalrts::alloc_close_bracket(vm, context[44]);
          refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_close_call(context[14]);
          refalrts::reinit_char(context[1], 'U');
          refalrts::link_brackets( context[13], context[44] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[40] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::push_stack( vm, context[35] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[42], context[44] );
          res = refalrts::splice_evar( res, context[27], context[1] );
          res = refalrts::splice_evar( res, context[38], context[41] );
          res = refalrts::splice_evar( res, context[15], context[18] );
          res = refalrts::splice_evar( res, context[34], context[37] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[30], context[31] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-Native/4 (/9 e.Indent/28 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElIdent/18 s.Num/27 e.0/30 )/14 >/1
          context[28] = context[23];
          context[29] = context[24];
          context[30] = context[25];
          context[31] = context[26];
          if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[18] ) )
            continue;
          // closed e.Indent as range 28
          // closed e.0 as range 30
          //DEBUG: s.ElemNumber: 17
          //DEBUG: s.Num: 27
          //DEBUG: e.Indent: 28
          //DEBUG: e.0: 30

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/27 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/28 AsIs: )/10 AsIs: (/13 } e.Indent/28/32"refalrts::update_"/34 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElIdent/36 >/37"(context["/38 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 }"], identifiers[ident_"/40 </42 & CName/43 Tile{ AsIs: e.0/30 } >/44"])"/45 Tile{ HalfReuse: ';'/14 HalfReuse: )/1 ]] }
          refalrts::copy_evar(vm, context[32], context[33], context[28], context[29]);
          refalrts::alloc_chars(vm, context[34], context[35], "refalrts::update_", 17);
          refalrts::alloc_ident(vm, context[36], identifiers[ident_ElIdent]);
          refalrts::alloc_close_call(vm, context[37]);
          refalrts::alloc_chars(vm, context[38], context[39], "(context[", 9);
          refalrts::alloc_chars(vm, context[40], context[41], "], identifiers[ident_", 21);
          refalrts::alloc_open_call(vm, context[42]);
          refalrts::alloc_name(vm, context[43], functions[efunc_CName]);
          refalrts::alloc_close_call(vm, context[44]);
          refalrts::alloc_chars(vm, context[45], context[46], "])", 2);
          refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[16], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_char(context[14], ';');
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[13], context[1] );
          refalrts::push_stack( vm, context[44] );
          refalrts::push_stack( vm, context[42] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[15] );
          refalrts::push_stack( vm, context[37] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          res = refalrts::splice_evar( res, context[44], context[46] );
          res = refalrts::splice_evar( res, context[30], context[31] );
          res = refalrts::splice_evar( res, context[40], context[43] );
          res = refalrts::splice_evar( res, context[15], context[18] );
          res = refalrts::splice_evar( res, context[36], context[39] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/9 e.Indent/28 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 # ElUnwrappedClosure/18 s.HeadOffset/27 )/14 >/1
        context[28] = context[23];
        context[29] = context[24];
        if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[18] ) )
          continue;
        if( ! refalrts::empty_seq( context[25], context[26] ) )
          continue;
        // closed e.Indent as range 28
        //DEBUG: s.ElemNumber: 17
        //DEBUG: s.HeadOffset: 27
        //DEBUG: e.Indent: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/28 AsIs: )/10 AsIs: (/13 } e.Indent/28/30"refalrts::update_"/32 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElUnwrappedClosure/34 >/35"(context["/36 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 HalfReuse: >/18 }"], context["/38 </40 & Symb/41 Tile{ AsIs: s.HeadOffset/27 HalfReuse: >/14 HalfReuse: ']'/1 }");"/42 )/44 Tile{ ]] }
        refalrts::copy_evar(vm, context[30], context[31], context[28], context[29]);
        refalrts::alloc_chars(vm, context[32], context[33], "refalrts::update_", 17);
        refalrts::alloc_ident(vm, context[34], identifiers[ident_ElUnwrappedClosure]);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::alloc_chars(vm, context[36], context[37], "(context[", 9);
        refalrts::alloc_chars(vm, context[38], context[39], "], context[", 11);
        refalrts::alloc_open_call(vm, context[40]);
        refalrts::alloc_name(vm, context[41], functions[efunc_Symb]);
        refalrts::alloc_chars(vm, context[42], context[43], ");", 2);
        refalrts::alloc_close_bracket(vm, context[44]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ']');
        refalrts::link_brackets( context[13], context[44] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[40] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[42], context[44] );
        res = refalrts::splice_evar( res, context[27], context[1] );
        res = refalrts::splice_evar( res, context[38], context[41] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        res = refalrts::splice_evar( res, context[34], context[37] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 s.ElementType/18 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        // closed e.Indent as range 23
        //DEBUG: s.ElemNumber: 17
        //DEBUG: s.ElementType: 18
        //DEBUG: e.Indent: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/25"refalrts::update_"/27 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } Tile{ AsIs: s.ElementType/18 HalfReuse: >/14 HalfReuse: '('/1 }"context["/29 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/31"]);"/32 )/34 Tile{ ]] }
        refalrts::copy_evar(vm, context[25], context[26], context[23], context[24]);
        refalrts::alloc_chars(vm, context[27], context[28], "refalrts::update_", 17);
        refalrts::alloc_chars(vm, context[29], context[30], "context[", 8);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_chars(vm, context[32], context[33], "]);", 3);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], '(');
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_Symb]);
        refalrts::link_brackets( context[13], context[34] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[31], context[34] );
        res = refalrts::splice_evar( res, context[15], context[17] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 # Update/16 s.ElemNumber/17 s.ElementType/18 e./25 )/14 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      // closed e.Indent as range 23
      // closed e. as range 25
      //DEBUG: s.ElemNumber: 17
      //DEBUG: s.ElementType: 18
      //DEBUG: e.Indent: 23
      //DEBUG: e.: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/27"refalrts::update_"/29 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } s.ElementType/18/31 >/32"(context["/33 Tile{ HalfReuse: </15 HalfReuse: & Symb/16 AsIs: s.ElemNumber/17 } >/35 ']'/36 </37 & AllocatorFuncArgument*6/38 Tile{ AsIs: s.ElementType/18 AsIs: e./25 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/39 )/40 Tile{ ]] }
      refalrts::copy_evar(vm, context[27], context[28], context[23], context[24]);
      refalrts::alloc_chars(vm, context[29], context[30], "refalrts::update_", 17);
      refalrts::copy_stvar(vm, context[31], context[18]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_chars(vm, context[33], context[34], "(context[", 9);
      refalrts::alloc_close_call(vm, context[35]);
      refalrts::alloc_char(vm, context[36], ']');
      refalrts::alloc_open_call(vm, context[37]);
      refalrts::alloc_name(vm, context[38], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_char(vm, context[39], ';');
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[16], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ')');
      refalrts::link_brackets( context[13], context[40] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[18], context[1] );
      res = refalrts::splice_evar( res, context[35], context[38] );
      res = refalrts::splice_evar( res, context[15], context[17] );
      res = refalrts::splice_evar( res, context[31], context[34] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.new6/19 )/10 (/13 # CmdCreateElem/15 s.new7/16 s.new8/17 # ElChar/18 e.new9/21 )/14 >/1
      context[19] = context[7];
      context[20] = context[8];
      context[21] = context[11];
      context[22] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_ElChar], context[18] ) )
        continue;
      // closed e.new6 as range 19
      // closed e.new9 as range 21
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElChar/18 s.Char/27 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        // closed e.Indent as range 23
        if( ! refalrts::svar_left( context[27], context[25], context[26] ) )
          continue;
        if( ! refalrts::empty_seq( context[25], context[26] ) )
          continue;
        //DEBUG: s.CreateMode: 16
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 23
        //DEBUG: s.Char: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/28"refalrts::"/30 </32 Tile{ HalfReuse: & AllocatorMode*2/15 AsIs: s.CreateMode/16 } >/33"_char(context["/34 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/17 } >/36"], \'"/37 </39 Tile{ HalfReuse: & EscapeChar/18 AsIs: s.Char/27 HalfReuse: >/14 HalfReuse: '\''/1 }");"/40 )/42 Tile{ ]] }
        refalrts::copy_evar(vm, context[28], context[29], context[23], context[24]);
        refalrts::alloc_chars(vm, context[30], context[31], "refalrts::", 10);
        refalrts::alloc_open_call(vm, context[32]);
        refalrts::alloc_close_call(vm, context[33]);
        refalrts::alloc_chars(vm, context[34], context[35], "_char(context[", 14);
        refalrts::alloc_close_call(vm, context[36]);
        refalrts::alloc_chars(vm, context[37], context[38], "], \'", 4);
        refalrts::alloc_open_call(vm, context[39]);
        refalrts::alloc_chars(vm, context[40], context[41], ");", 2);
        refalrts::alloc_close_bracket(vm, context[42]);
        refalrts::reinit_name(context[15], functions[efunc_gen_AllocatorMode_D2]);
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_name(context[18], functions[efunc_EscapeChar]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], '\'');
        refalrts::link_brackets( context[13], context[42] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[39] );
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[33] );
        refalrts::push_stack( vm, context[32] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[40], context[42] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[36], context[39] );
        res = refalrts::splice_elem( res, context[17] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[33], context[35] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_evar( res, context[30], context[32] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElChar/18 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        // closed e.Indent as range 23
        //DEBUG: s.CreateMode: 16
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/25"ref"/27 Tile{ HalfReuse: 'a'/15 }"lrts::"/29 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/31"_char(context["/32 </34 & Symb/35 Tile{ AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/36 )/37 Tile{ ]] }
        refalrts::copy_evar(vm, context[25], context[26], context[23], context[24]);
        refalrts::alloc_chars(vm, context[27], context[28], "ref", 3);
        refalrts::alloc_chars(vm, context[29], context[30], "lrts::", 6);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_chars(vm, context[32], context[33], "_char(context[", 14);
        refalrts::alloc_open_call(vm, context[34]);
        refalrts::alloc_name(vm, context[35], functions[efunc_Symb]);
        refalrts::alloc_char(vm, context[36], ';');
        refalrts::alloc_close_bracket(vm, context[37]);
        refalrts::reinit_char(context[15], 'a');
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_char(context[14], ']');
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[37] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        res = refalrts::splice_evar( res, context[31], context[35] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElChar/18 e./25 )/14 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      // closed e.Indent as range 23
      // closed e. as range 25
      //DEBUG: s.CreateMode: 16
      //DEBUG: s.ElemNumber: 17
      //DEBUG: e.Indent: 23
      //DEBUG: e.: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/27"refal"/29 Tile{ HalfReuse: 'r'/15 }"ts::"/31 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/33"_char(context["/34 </36 & Symb/37 Tile{ AsIs: s.ElemNumber/17 } >/38 ']'/39 </40 & AllocatorFuncArgument*6/41 Tile{ AsIs: # ElChar/18 AsIs: e./25 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/42 )/43 Tile{ ]] }
      refalrts::copy_evar(vm, context[27], context[28], context[23], context[24]);
      refalrts::alloc_chars(vm, context[29], context[30], "refal", 5);
      refalrts::alloc_chars(vm, context[31], context[32], "ts::", 4);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_chars(vm, context[34], context[35], "_char(context[", 14);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_char(vm, context[39], ']');
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_char(vm, context[42], ';');
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::reinit_char(context[15], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ')');
      refalrts::link_brackets( context[13], context[43] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[18], context[1] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[33], context[37] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.new6/19 )/10 (/13 # CmdCreateElem/15 s.new7/16 s.new8/17 # ElName/18 e.new9/21 )/14 >/1
      context[19] = context[7];
      context[20] = context[8];
      context[21] = context[11];
      context[22] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_ElName], context[18] ) )
        continue;
      // closed e.new6 as range 19
      // closed e.new9 as range 21
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElName/18 s.Num/27 e.0/25 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        // closed e.Indent as range 23
        if( ! refalrts::svar_left( context[27], context[25], context[26] ) )
          continue;
        // closed e.0 as range 25
        //DEBUG: s.CreateMode: 16
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 23
        //DEBUG: s.Num: 27
        //DEBUG: e.0: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/27 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/28"ref"/30 Tile{ HalfReuse: 'a'/15 }"lrts::"/32 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/34"_name(context["/35 </37 & Symb/38 Tile{ AsIs: s.ElemNumber/17 HalfReuse: >/18 }"], functions[efunc_"/39 </41 & CName/42 Tile{ AsIs: e.0/25 } >/43"])"/44 Tile{ HalfReuse: ';'/14 HalfReuse: )/1 ]] }
        refalrts::copy_evar(vm, context[28], context[29], context[23], context[24]);
        refalrts::alloc_chars(vm, context[30], context[31], "ref", 3);
        refalrts::alloc_chars(vm, context[32], context[33], "lrts::", 6);
        refalrts::alloc_close_call(vm, context[34]);
        refalrts::alloc_chars(vm, context[35], context[36], "_name(context[", 14);
        refalrts::alloc_open_call(vm, context[37]);
        refalrts::alloc_name(vm, context[38], functions[efunc_Symb]);
        refalrts::alloc_chars(vm, context[39], context[40], "], functions[efunc_", 19);
        refalrts::alloc_open_call(vm, context[41]);
        refalrts::alloc_name(vm, context[42], functions[efunc_CName]);
        refalrts::alloc_close_call(vm, context[43]);
        refalrts::alloc_chars(vm, context[44], context[45], "])", 2);
        refalrts::reinit_char(context[15], 'a');
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_char(context[14], ';');
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[13], context[1] );
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[41] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[37] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[43], context[45] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[39], context[42] );
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[34], context[38] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElName/18 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        // closed e.Indent as range 23
        //DEBUG: s.CreateMode: 16
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/25"ref"/27 Tile{ HalfReuse: 'a'/15 }"lrts::"/29 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/31"_name(context["/32 </34 & Symb/35 Tile{ AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/36 )/37 Tile{ ]] }
        refalrts::copy_evar(vm, context[25], context[26], context[23], context[24]);
        refalrts::alloc_chars(vm, context[27], context[28], "ref", 3);
        refalrts::alloc_chars(vm, context[29], context[30], "lrts::", 6);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_chars(vm, context[32], context[33], "_name(context[", 14);
        refalrts::alloc_open_call(vm, context[34]);
        refalrts::alloc_name(vm, context[35], functions[efunc_Symb]);
        refalrts::alloc_char(vm, context[36], ';');
        refalrts::alloc_close_bracket(vm, context[37]);
        refalrts::reinit_char(context[15], 'a');
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_char(context[14], ']');
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[37] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        res = refalrts::splice_evar( res, context[31], context[35] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElName/18 e./25 )/14 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      // closed e.Indent as range 23
      // closed e. as range 25
      //DEBUG: s.CreateMode: 16
      //DEBUG: s.ElemNumber: 17
      //DEBUG: e.Indent: 23
      //DEBUG: e.: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/27"refal"/29 Tile{ HalfReuse: 'r'/15 }"ts::"/31 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/33"_name(context["/34 </36 & Symb/37 Tile{ AsIs: s.ElemNumber/17 } >/38 ']'/39 </40 & AllocatorFuncArgument*6/41 Tile{ AsIs: # ElName/18 AsIs: e./25 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/42 )/43 Tile{ ]] }
      refalrts::copy_evar(vm, context[27], context[28], context[23], context[24]);
      refalrts::alloc_chars(vm, context[29], context[30], "refal", 5);
      refalrts::alloc_chars(vm, context[31], context[32], "ts::", 4);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_chars(vm, context[34], context[35], "_name(context[", 14);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_char(vm, context[39], ']');
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_char(vm, context[42], ';');
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::reinit_char(context[15], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ')');
      refalrts::link_brackets( context[13], context[43] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[18], context[1] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[33], context[37] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.new6/19 )/10 (/13 # CmdCreateElem/15 s.new7/16 s.new8/17 # ElNumber/18 e.new9/21 )/14 >/1
      context[19] = context[7];
      context[20] = context[8];
      context[21] = context[11];
      context[22] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[18] ) )
        continue;
      // closed e.new6 as range 19
      // closed e.new9 as range 21
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElNumber/18 s.Number/27 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        // closed e.Indent as range 23
        if( ! refalrts::svar_left( context[27], context[25], context[26] ) )
          continue;
        if( ! refalrts::empty_seq( context[25], context[26] ) )
          continue;
        //DEBUG: s.CreateMode: 16
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 23
        //DEBUG: s.Number: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/28"refal"/30 Tile{ HalfReuse: 'r'/15 }"ts::"/32 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/34"_number(context["/35 </37 & Symb/38 Tile{ AsIs: s.ElemNumber/17 } >/39"], "/40 </42 Tile{ HalfReuse: & Symb/18 AsIs: s.Number/27 HalfReuse: >/14 HalfReuse: 'U'/1 }"L);"/43 )/45 Tile{ ]] }
        refalrts::copy_evar(vm, context[28], context[29], context[23], context[24]);
        refalrts::alloc_chars(vm, context[30], context[31], "refal", 5);
        refalrts::alloc_chars(vm, context[32], context[33], "ts::", 4);
        refalrts::alloc_close_call(vm, context[34]);
        refalrts::alloc_chars(vm, context[35], context[36], "_number(context[", 16);
        refalrts::alloc_open_call(vm, context[37]);
        refalrts::alloc_name(vm, context[38], functions[efunc_Symb]);
        refalrts::alloc_close_call(vm, context[39]);
        refalrts::alloc_chars(vm, context[40], context[41], "], ", 3);
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_chars(vm, context[43], context[44], "L);", 3);
        refalrts::alloc_close_bracket(vm, context[45]);
        refalrts::reinit_char(context[15], 'r');
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
        refalrts::reinit_name(context[18], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], 'U');
        refalrts::link_brackets( context[13], context[45] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[39] );
        refalrts::push_stack( vm, context[37] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[43], context[45] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[39], context[42] );
        res = refalrts::splice_elem( res, context[17] );
        res = refalrts::splice_evar( res, context[34], context[38] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElNumber/18 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        // closed e.Indent as range 23
        //DEBUG: s.CreateMode: 16
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/25"ref"/27 Tile{ HalfReuse: 'a'/15 }"lrts::"/29 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/31"_number(context["/32 </34 & Symb/35 Tile{ AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/36 )/37 Tile{ ]] }
        refalrts::copy_evar(vm, context[25], context[26], context[23], context[24]);
        refalrts::alloc_chars(vm, context[27], context[28], "ref", 3);
        refalrts::alloc_chars(vm, context[29], context[30], "lrts::", 6);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_chars(vm, context[32], context[33], "_number(context[", 16);
        refalrts::alloc_open_call(vm, context[34]);
        refalrts::alloc_name(vm, context[35], functions[efunc_Symb]);
        refalrts::alloc_char(vm, context[36], ';');
        refalrts::alloc_close_bracket(vm, context[37]);
        refalrts::reinit_char(context[15], 'a');
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_char(context[14], ']');
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[37] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        res = refalrts::splice_evar( res, context[31], context[35] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElNumber/18 e./25 )/14 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      // closed e.Indent as range 23
      // closed e. as range 25
      //DEBUG: s.CreateMode: 16
      //DEBUG: s.ElemNumber: 17
      //DEBUG: e.Indent: 23
      //DEBUG: e.: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/27"refal"/29 Tile{ HalfReuse: 'r'/15 }"ts::"/31 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/33"_number(context["/34 </36 & Symb/37 Tile{ AsIs: s.ElemNumber/17 } >/38 ']'/39 </40 & AllocatorFuncArgument*6/41 Tile{ AsIs: # ElNumber/18 AsIs: e./25 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/42 )/43 Tile{ ]] }
      refalrts::copy_evar(vm, context[27], context[28], context[23], context[24]);
      refalrts::alloc_chars(vm, context[29], context[30], "refal", 5);
      refalrts::alloc_chars(vm, context[31], context[32], "ts::", 4);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_chars(vm, context[34], context[35], "_number(context[", 16);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_char(vm, context[39], ']');
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_char(vm, context[42], ';');
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::reinit_char(context[15], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ')');
      refalrts::link_brackets( context[13], context[43] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[18], context[1] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[33], context[37] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.new6/19 )/10 (/13 # CmdCreateElem/15 s.new7/16 s.new8/17 # ElIdent/18 e.new9/21 )/14 >/1
      context[19] = context[7];
      context[20] = context[8];
      context[21] = context[11];
      context[22] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[18] ) )
        continue;
      // closed e.new6 as range 19
      // closed e.new9 as range 21
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElIdent/18 s.Num/27 e.0/25 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        // closed e.Indent as range 23
        if( ! refalrts::svar_left( context[27], context[25], context[26] ) )
          continue;
        // closed e.0 as range 25
        //DEBUG: s.CreateMode: 16
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 23
        //DEBUG: s.Num: 27
        //DEBUG: e.0: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/27 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/28"ref"/30 Tile{ HalfReuse: 'a'/15 }"lrts::"/32 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/34"_ident(context["/35 </37 & Symb/38 Tile{ AsIs: s.ElemNumber/17 HalfReuse: >/18 }"], identifiers[ident_"/39 </41 & CName/42 Tile{ AsIs: e.0/25 } >/43"])"/44 Tile{ HalfReuse: ';'/14 HalfReuse: )/1 ]] }
        refalrts::copy_evar(vm, context[28], context[29], context[23], context[24]);
        refalrts::alloc_chars(vm, context[30], context[31], "ref", 3);
        refalrts::alloc_chars(vm, context[32], context[33], "lrts::", 6);
        refalrts::alloc_close_call(vm, context[34]);
        refalrts::alloc_chars(vm, context[35], context[36], "_ident(context[", 15);
        refalrts::alloc_open_call(vm, context[37]);
        refalrts::alloc_name(vm, context[38], functions[efunc_Symb]);
        refalrts::alloc_chars(vm, context[39], context[40], "], identifiers[ident_", 21);
        refalrts::alloc_open_call(vm, context[41]);
        refalrts::alloc_name(vm, context[42], functions[efunc_CName]);
        refalrts::alloc_close_call(vm, context[43]);
        refalrts::alloc_chars(vm, context[44], context[45], "])", 2);
        refalrts::reinit_char(context[15], 'a');
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_char(context[14], ';');
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[13], context[1] );
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[41] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[37] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[43], context[45] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[39], context[42] );
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[34], context[38] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElIdent/18 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        // closed e.Indent as range 23
        //DEBUG: s.CreateMode: 16
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/25"ref"/27 Tile{ HalfReuse: 'a'/15 }"lrts::"/29 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/31"_ident(context["/32 </34 & Symb/35 Tile{ AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/36 )/37 Tile{ ]] }
        refalrts::copy_evar(vm, context[25], context[26], context[23], context[24]);
        refalrts::alloc_chars(vm, context[27], context[28], "ref", 3);
        refalrts::alloc_chars(vm, context[29], context[30], "lrts::", 6);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_chars(vm, context[32], context[33], "_ident(context[", 15);
        refalrts::alloc_open_call(vm, context[34]);
        refalrts::alloc_name(vm, context[35], functions[efunc_Symb]);
        refalrts::alloc_char(vm, context[36], ';');
        refalrts::alloc_close_bracket(vm, context[37]);
        refalrts::reinit_char(context[15], 'a');
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_char(context[14], ']');
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[37] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        res = refalrts::splice_evar( res, context[31], context[35] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElIdent/18 e./25 )/14 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      // closed e.Indent as range 23
      // closed e. as range 25
      //DEBUG: s.CreateMode: 16
      //DEBUG: s.ElemNumber: 17
      //DEBUG: e.Indent: 23
      //DEBUG: e.: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/27"refal"/29 Tile{ HalfReuse: 'r'/15 }"ts::"/31 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/33"_ident(context["/34 </36 & Symb/37 Tile{ AsIs: s.ElemNumber/17 } >/38 ']'/39 </40 & AllocatorFuncArgument*6/41 Tile{ AsIs: # ElIdent/18 AsIs: e./25 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/42 )/43 Tile{ ]] }
      refalrts::copy_evar(vm, context[27], context[28], context[23], context[24]);
      refalrts::alloc_chars(vm, context[29], context[30], "refal", 5);
      refalrts::alloc_chars(vm, context[31], context[32], "ts::", 4);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_chars(vm, context[34], context[35], "_ident(context[", 15);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_char(vm, context[39], ']');
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_char(vm, context[42], ';');
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::reinit_char(context[15], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ')');
      refalrts::link_brackets( context[13], context[43] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[18], context[1] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[33], context[37] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.new6/19 )/10 (/13 # CmdCreateElem/15 s.new7/16 s.new8/17 # ElOpenADT/18 e.new9/21 )/14 >/1
      context[19] = context[7];
      context[20] = context[8];
      context[21] = context[11];
      context[22] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_ElOpenADT], context[18] ) )
        continue;
      // closed e.new6 as range 19
      // closed e.new9 as range 21
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElOpenADT/18 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        // closed e.Indent as range 23
        //DEBUG: s.CreateMode: 16
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/25"ref"/27 Tile{ HalfReuse: 'a'/15 }"lrts::"/29 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/31"_open_adt(context["/32 </34 & Symb/35 Tile{ AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/36 )/37 Tile{ ]] }
        refalrts::copy_evar(vm, context[25], context[26], context[23], context[24]);
        refalrts::alloc_chars(vm, context[27], context[28], "ref", 3);
        refalrts::alloc_chars(vm, context[29], context[30], "lrts::", 6);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_chars(vm, context[32], context[33], "_open_adt(context[", 18);
        refalrts::alloc_open_call(vm, context[34]);
        refalrts::alloc_name(vm, context[35], functions[efunc_Symb]);
        refalrts::alloc_char(vm, context[36], ';');
        refalrts::alloc_close_bracket(vm, context[37]);
        refalrts::reinit_char(context[15], 'a');
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_char(context[14], ']');
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[37] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        res = refalrts::splice_evar( res, context[31], context[35] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElOpenADT/18 e./25 )/14 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      // closed e.Indent as range 23
      // closed e. as range 25
      //DEBUG: s.CreateMode: 16
      //DEBUG: s.ElemNumber: 17
      //DEBUG: e.Indent: 23
      //DEBUG: e.: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/27"refal"/29 Tile{ HalfReuse: 'r'/15 }"ts::"/31 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/33"_open_adt(context["/34 </36 & Symb/37 Tile{ AsIs: s.ElemNumber/17 } >/38 ']'/39 </40 & AllocatorFuncArgument*6/41 Tile{ AsIs: # ElOpenADT/18 AsIs: e./25 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/42 )/43 Tile{ ]] }
      refalrts::copy_evar(vm, context[27], context[28], context[23], context[24]);
      refalrts::alloc_chars(vm, context[29], context[30], "refal", 5);
      refalrts::alloc_chars(vm, context[31], context[32], "ts::", 4);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_chars(vm, context[34], context[35], "_open_adt(context[", 18);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_char(vm, context[39], ']');
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_char(vm, context[42], ';');
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::reinit_char(context[15], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ')');
      refalrts::link_brackets( context[13], context[43] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[18], context[1] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[33], context[37] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.new6/19 )/10 (/13 # CmdCreateElem/15 s.new7/16 s.new8/17 # ElCloseADT/18 e.new9/21 )/14 >/1
      context[19] = context[7];
      context[20] = context[8];
      context[21] = context[11];
      context[22] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_ElCloseADT], context[18] ) )
        continue;
      // closed e.new6 as range 19
      // closed e.new9 as range 21
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElCloseADT/18 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        // closed e.Indent as range 23
        //DEBUG: s.CreateMode: 16
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/25"ref"/27 Tile{ HalfReuse: 'a'/15 }"lrts::"/29 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/31"_close_adt(context["/32 </34 & Symb/35 Tile{ AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/36 )/37 Tile{ ]] }
        refalrts::copy_evar(vm, context[25], context[26], context[23], context[24]);
        refalrts::alloc_chars(vm, context[27], context[28], "ref", 3);
        refalrts::alloc_chars(vm, context[29], context[30], "lrts::", 6);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_chars(vm, context[32], context[33], "_close_adt(context[", 19);
        refalrts::alloc_open_call(vm, context[34]);
        refalrts::alloc_name(vm, context[35], functions[efunc_Symb]);
        refalrts::alloc_char(vm, context[36], ';');
        refalrts::alloc_close_bracket(vm, context[37]);
        refalrts::reinit_char(context[15], 'a');
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_char(context[14], ']');
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[37] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        res = refalrts::splice_evar( res, context[31], context[35] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElCloseADT/18 e./25 )/14 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      // closed e.Indent as range 23
      // closed e. as range 25
      //DEBUG: s.CreateMode: 16
      //DEBUG: s.ElemNumber: 17
      //DEBUG: e.Indent: 23
      //DEBUG: e.: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/27"refal"/29 Tile{ HalfReuse: 'r'/15 }"ts::"/31 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/33"_close_adt(context["/34 </36 & Symb/37 Tile{ AsIs: s.ElemNumber/17 } >/38 ']'/39 </40 & AllocatorFuncArgument*6/41 Tile{ AsIs: # ElCloseADT/18 AsIs: e./25 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/42 )/43 Tile{ ]] }
      refalrts::copy_evar(vm, context[27], context[28], context[23], context[24]);
      refalrts::alloc_chars(vm, context[29], context[30], "refal", 5);
      refalrts::alloc_chars(vm, context[31], context[32], "ts::", 4);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_chars(vm, context[34], context[35], "_close_adt(context[", 19);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_char(vm, context[39], ']');
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_char(vm, context[42], ';');
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::reinit_char(context[15], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ')');
      refalrts::link_brackets( context[13], context[43] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[18], context[1] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[33], context[37] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.new6/19 )/10 (/13 # CmdCreateElem/15 s.new7/16 s.new8/17 # ElOpenBracket/18 e.new9/21 )/14 >/1
      context[19] = context[7];
      context[20] = context[8];
      context[21] = context[11];
      context[22] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_ElOpenBracket], context[18] ) )
        continue;
      // closed e.new6 as range 19
      // closed e.new9 as range 21
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElOpenBracket/18 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        // closed e.Indent as range 23
        //DEBUG: s.CreateMode: 16
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/25"ref"/27 Tile{ HalfReuse: 'a'/15 }"lrts::"/29 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/31"_open_bracket(context["/32 </34 & Symb/35 Tile{ AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/36 )/37 Tile{ ]] }
        refalrts::copy_evar(vm, context[25], context[26], context[23], context[24]);
        refalrts::alloc_chars(vm, context[27], context[28], "ref", 3);
        refalrts::alloc_chars(vm, context[29], context[30], "lrts::", 6);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_chars(vm, context[32], context[33], "_open_bracket(context[", 22);
        refalrts::alloc_open_call(vm, context[34]);
        refalrts::alloc_name(vm, context[35], functions[efunc_Symb]);
        refalrts::alloc_char(vm, context[36], ';');
        refalrts::alloc_close_bracket(vm, context[37]);
        refalrts::reinit_char(context[15], 'a');
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_char(context[14], ']');
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[37] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        res = refalrts::splice_evar( res, context[31], context[35] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElOpenBracket/18 e./25 )/14 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      // closed e.Indent as range 23
      // closed e. as range 25
      //DEBUG: s.CreateMode: 16
      //DEBUG: s.ElemNumber: 17
      //DEBUG: e.Indent: 23
      //DEBUG: e.: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/27"refal"/29 Tile{ HalfReuse: 'r'/15 }"ts::"/31 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/33"_open_bracket(context["/34 </36 & Symb/37 Tile{ AsIs: s.ElemNumber/17 } >/38 ']'/39 </40 & AllocatorFuncArgument*6/41 Tile{ AsIs: # ElOpenBracket/18 AsIs: e./25 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/42 )/43 Tile{ ]] }
      refalrts::copy_evar(vm, context[27], context[28], context[23], context[24]);
      refalrts::alloc_chars(vm, context[29], context[30], "refal", 5);
      refalrts::alloc_chars(vm, context[31], context[32], "ts::", 4);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_chars(vm, context[34], context[35], "_open_bracket(context[", 22);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_char(vm, context[39], ']');
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_char(vm, context[42], ';');
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::reinit_char(context[15], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ')');
      refalrts::link_brackets( context[13], context[43] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[18], context[1] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[33], context[37] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.new6/19 )/10 (/13 # CmdCreateElem/15 s.new7/16 s.new8/17 # ElCloseBracket/18 e.new9/21 )/14 >/1
      context[19] = context[7];
      context[20] = context[8];
      context[21] = context[11];
      context[22] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_ElCloseBracket], context[18] ) )
        continue;
      // closed e.new6 as range 19
      // closed e.new9 as range 21
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElCloseBracket/18 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        // closed e.Indent as range 23
        //DEBUG: s.CreateMode: 16
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/25"ref"/27 Tile{ HalfReuse: 'a'/15 }"lrts::"/29 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/31"_close_bracket(context["/32 </34 & Symb/35 Tile{ AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/36 )/37 Tile{ ]] }
        refalrts::copy_evar(vm, context[25], context[26], context[23], context[24]);
        refalrts::alloc_chars(vm, context[27], context[28], "ref", 3);
        refalrts::alloc_chars(vm, context[29], context[30], "lrts::", 6);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_chars(vm, context[32], context[33], "_close_bracket(context[", 23);
        refalrts::alloc_open_call(vm, context[34]);
        refalrts::alloc_name(vm, context[35], functions[efunc_Symb]);
        refalrts::alloc_char(vm, context[36], ';');
        refalrts::alloc_close_bracket(vm, context[37]);
        refalrts::reinit_char(context[15], 'a');
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_char(context[14], ']');
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[37] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        res = refalrts::splice_evar( res, context[31], context[35] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElCloseBracket/18 e./25 )/14 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      // closed e.Indent as range 23
      // closed e. as range 25
      //DEBUG: s.CreateMode: 16
      //DEBUG: s.ElemNumber: 17
      //DEBUG: e.Indent: 23
      //DEBUG: e.: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/27"refal"/29 Tile{ HalfReuse: 'r'/15 }"ts::"/31 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/33"_close_bracket(context["/34 </36 & Symb/37 Tile{ AsIs: s.ElemNumber/17 } >/38 ']'/39 </40 & AllocatorFuncArgument*6/41 Tile{ AsIs: # ElCloseBracket/18 AsIs: e./25 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/42 )/43 Tile{ ]] }
      refalrts::copy_evar(vm, context[27], context[28], context[23], context[24]);
      refalrts::alloc_chars(vm, context[29], context[30], "refal", 5);
      refalrts::alloc_chars(vm, context[31], context[32], "ts::", 4);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_chars(vm, context[34], context[35], "_close_bracket(context[", 23);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_char(vm, context[39], ']');
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_char(vm, context[42], ';');
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::reinit_char(context[15], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ')');
      refalrts::link_brackets( context[13], context[43] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[18], context[1] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[33], context[37] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.new6/19 )/10 (/13 # CmdCreateElem/15 s.new7/16 s.new8/17 # ElOpenCall/18 e.new9/21 )/14 >/1
      context[19] = context[7];
      context[20] = context[8];
      context[21] = context[11];
      context[22] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_ElOpenCall], context[18] ) )
        continue;
      // closed e.new6 as range 19
      // closed e.new9 as range 21
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElOpenCall/18 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        // closed e.Indent as range 23
        //DEBUG: s.CreateMode: 16
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/25"ref"/27 Tile{ HalfReuse: 'a'/15 }"lrts::"/29 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/31"_open_call(context["/32 </34 & Symb/35 Tile{ AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/36 )/37 Tile{ ]] }
        refalrts::copy_evar(vm, context[25], context[26], context[23], context[24]);
        refalrts::alloc_chars(vm, context[27], context[28], "ref", 3);
        refalrts::alloc_chars(vm, context[29], context[30], "lrts::", 6);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_chars(vm, context[32], context[33], "_open_call(context[", 19);
        refalrts::alloc_open_call(vm, context[34]);
        refalrts::alloc_name(vm, context[35], functions[efunc_Symb]);
        refalrts::alloc_char(vm, context[36], ';');
        refalrts::alloc_close_bracket(vm, context[37]);
        refalrts::reinit_char(context[15], 'a');
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_char(context[14], ']');
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[37] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        res = refalrts::splice_evar( res, context[31], context[35] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElOpenCall/18 e./25 )/14 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      // closed e.Indent as range 23
      // closed e. as range 25
      //DEBUG: s.CreateMode: 16
      //DEBUG: s.ElemNumber: 17
      //DEBUG: e.Indent: 23
      //DEBUG: e.: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/27"refal"/29 Tile{ HalfReuse: 'r'/15 }"ts::"/31 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/33"_open_call(context["/34 </36 & Symb/37 Tile{ AsIs: s.ElemNumber/17 } >/38 ']'/39 </40 & AllocatorFuncArgument*6/41 Tile{ AsIs: # ElOpenCall/18 AsIs: e./25 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/42 )/43 Tile{ ]] }
      refalrts::copy_evar(vm, context[27], context[28], context[23], context[24]);
      refalrts::alloc_chars(vm, context[29], context[30], "refal", 5);
      refalrts::alloc_chars(vm, context[31], context[32], "ts::", 4);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_chars(vm, context[34], context[35], "_open_call(context[", 19);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_char(vm, context[39], ']');
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_char(vm, context[42], ';');
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::reinit_char(context[15], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ')');
      refalrts::link_brackets( context[13], context[43] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[18], context[1] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[33], context[37] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.new6/19 )/10 (/13 # CmdCreateElem/15 s.new7/16 s.new8/17 # ElCloseCall/18 e.new9/21 )/14 >/1
      context[19] = context[7];
      context[20] = context[8];
      context[21] = context[11];
      context[22] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_ElCloseCall], context[18] ) )
        continue;
      // closed e.new6 as range 19
      // closed e.new9 as range 21
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElCloseCall/18 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        // closed e.Indent as range 23
        //DEBUG: s.CreateMode: 16
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/25"ref"/27 Tile{ HalfReuse: 'a'/15 }"lrts::"/29 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/31"_close_call(context["/32 </34 & Symb/35 Tile{ AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/36 )/37 Tile{ ]] }
        refalrts::copy_evar(vm, context[25], context[26], context[23], context[24]);
        refalrts::alloc_chars(vm, context[27], context[28], "ref", 3);
        refalrts::alloc_chars(vm, context[29], context[30], "lrts::", 6);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_chars(vm, context[32], context[33], "_close_call(context[", 20);
        refalrts::alloc_open_call(vm, context[34]);
        refalrts::alloc_name(vm, context[35], functions[efunc_Symb]);
        refalrts::alloc_char(vm, context[36], ';');
        refalrts::alloc_close_bracket(vm, context[37]);
        refalrts::reinit_char(context[15], 'a');
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_char(context[14], ']');
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[37] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        res = refalrts::splice_evar( res, context[31], context[35] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElCloseCall/18 e./25 )/14 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      // closed e.Indent as range 23
      // closed e. as range 25
      //DEBUG: s.CreateMode: 16
      //DEBUG: s.ElemNumber: 17
      //DEBUG: e.Indent: 23
      //DEBUG: e.: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/27"refal"/29 Tile{ HalfReuse: 'r'/15 }"ts::"/31 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/33"_close_call(context["/34 </36 & Symb/37 Tile{ AsIs: s.ElemNumber/17 } >/38 ']'/39 </40 & AllocatorFuncArgument*6/41 Tile{ AsIs: # ElCloseCall/18 AsIs: e./25 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/42 )/43 Tile{ ]] }
      refalrts::copy_evar(vm, context[27], context[28], context[23], context[24]);
      refalrts::alloc_chars(vm, context[29], context[30], "refal", 5);
      refalrts::alloc_chars(vm, context[31], context[32], "ts::", 4);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_chars(vm, context[34], context[35], "_close_call(context[", 20);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_char(vm, context[39], ']');
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_char(vm, context[42], ';');
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::reinit_char(context[15], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ')');
      refalrts::link_brackets( context[13], context[43] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[18], context[1] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[33], context[37] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.new6/19 )/10 (/13 # CmdCreateElem/15 s.new7/16 s.new8/17 # ElClosureHead/18 e.new9/21 )/14 >/1
      context[19] = context[7];
      context[20] = context[8];
      context[21] = context[11];
      context[22] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_ElClosureHead], context[18] ) )
        continue;
      // closed e.new6 as range 19
      // closed e.new9 as range 21
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElClosureHead/18 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        // closed e.Indent as range 23
        //DEBUG: s.CreateMode: 16
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/25"ref"/27 Tile{ HalfReuse: 'a'/15 }"lrts::"/29 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/31"_closure_head(context["/32 </34 & Symb/35 Tile{ AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/36 )/37 Tile{ ]] }
        refalrts::copy_evar(vm, context[25], context[26], context[23], context[24]);
        refalrts::alloc_chars(vm, context[27], context[28], "ref", 3);
        refalrts::alloc_chars(vm, context[29], context[30], "lrts::", 6);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_chars(vm, context[32], context[33], "_closure_head(context[", 22);
        refalrts::alloc_open_call(vm, context[34]);
        refalrts::alloc_name(vm, context[35], functions[efunc_Symb]);
        refalrts::alloc_char(vm, context[36], ';');
        refalrts::alloc_close_bracket(vm, context[37]);
        refalrts::reinit_char(context[15], 'a');
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_char(context[14], ']');
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[37] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        res = refalrts::splice_evar( res, context[31], context[35] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElClosureHead/18 e./25 )/14 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      // closed e.Indent as range 23
      // closed e. as range 25
      //DEBUG: s.CreateMode: 16
      //DEBUG: s.ElemNumber: 17
      //DEBUG: e.Indent: 23
      //DEBUG: e.: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/27"refal"/29 Tile{ HalfReuse: 'r'/15 }"ts::"/31 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/33"_closure_head(context["/34 </36 & Symb/37 Tile{ AsIs: s.ElemNumber/17 } >/38 ']'/39 </40 & AllocatorFuncArgument*6/41 Tile{ AsIs: # ElClosureHead/18 AsIs: e./25 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/42 )/43 Tile{ ]] }
      refalrts::copy_evar(vm, context[27], context[28], context[23], context[24]);
      refalrts::alloc_chars(vm, context[29], context[30], "refal", 5);
      refalrts::alloc_chars(vm, context[31], context[32], "ts::", 4);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_chars(vm, context[34], context[35], "_closure_head(context[", 22);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_char(vm, context[39], ']');
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_char(vm, context[42], ';');
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::reinit_char(context[15], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ')');
      refalrts::link_brackets( context[13], context[43] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[18], context[1] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[33], context[37] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/9 e.new6/19 )/10 (/13 # CmdCreateElem/15 s.new7/16 s.new8/17 # ElUnwrappedClosure/18 e.new9/21 )/14 >/1
      context[19] = context[7];
      context[20] = context[8];
      context[21] = context[11];
      context[22] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[18] ) )
        continue;
      // closed e.new6 as range 19
      // closed e.new9 as range 21
      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElUnwrappedClosure/18 s.HeadOffset/27 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        // closed e.Indent as range 23
        if( ! refalrts::svar_left( context[27], context[25], context[26] ) )
          continue;
        if( ! refalrts::empty_seq( context[25], context[26] ) )
          continue;
        //DEBUG: s.CreateMode: 16
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 23
        //DEBUG: s.HeadOffset: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/28"refalrts::"/30 </32 Tile{ HalfReuse: & AllocatorMode*2/15 AsIs: s.CreateMode/16 } >/33"_unwrapped_closure(context["/34 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/17 } >/36"], context["/37 </39 Tile{ HalfReuse: & Symb/18 AsIs: s.HeadOffset/27 HalfReuse: >/14 HalfReuse: ']'/1 }");"/40 )/42 Tile{ ]] }
        refalrts::copy_evar(vm, context[28], context[29], context[23], context[24]);
        refalrts::alloc_chars(vm, context[30], context[31], "refalrts::", 10);
        refalrts::alloc_open_call(vm, context[32]);
        refalrts::alloc_close_call(vm, context[33]);
        refalrts::alloc_chars(vm, context[34], context[35], "_unwrapped_closure(context[", 27);
        refalrts::alloc_close_call(vm, context[36]);
        refalrts::alloc_chars(vm, context[37], context[38], "], context[", 11);
        refalrts::alloc_open_call(vm, context[39]);
        refalrts::alloc_chars(vm, context[40], context[41], ");", 2);
        refalrts::alloc_close_bracket(vm, context[42]);
        refalrts::reinit_name(context[15], functions[efunc_gen_AllocatorMode_D2]);
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_name(context[18], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_char(context[1], ']');
        refalrts::link_brackets( context[13], context[42] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[39] );
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[33] );
        refalrts::push_stack( vm, context[32] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[40], context[42] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[36], context[39] );
        res = refalrts::splice_elem( res, context[17] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[33], context[35] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_evar( res, context[30], context[32] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElUnwrappedClosure/18 )/14 >/1
        context[23] = context[19];
        context[24] = context[20];
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        // closed e.Indent as range 23
        //DEBUG: s.CreateMode: 16
        //DEBUG: s.ElemNumber: 17
        //DEBUG: e.Indent: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/25"ref"/27 Tile{ HalfReuse: 'a'/15 }"lrts::"/29 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/31"_unwrapped_closure(context["/32 </34 & Symb/35 Tile{ AsIs: s.ElemNumber/17 HalfReuse: >/18 HalfReuse: ']'/14 HalfReuse: ')'/1 } ';'/36 )/37 Tile{ ]] }
        refalrts::copy_evar(vm, context[25], context[26], context[23], context[24]);
        refalrts::alloc_chars(vm, context[27], context[28], "ref", 3);
        refalrts::alloc_chars(vm, context[29], context[30], "lrts::", 6);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_chars(vm, context[32], context[33], "_unwrapped_closure(context[", 27);
        refalrts::alloc_open_call(vm, context[34]);
        refalrts::alloc_name(vm, context[35], functions[efunc_Symb]);
        refalrts::alloc_char(vm, context[36], ';');
        refalrts::alloc_close_bracket(vm, context[37]);
        refalrts::reinit_char(context[15], 'a');
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_char(context[14], ']');
        refalrts::reinit_char(context[1], ')');
        refalrts::link_brackets( context[13], context[37] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[17], context[1] );
        res = refalrts::splice_evar( res, context[31], context[35] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[9], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/9 e.Indent/23 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElUnwrappedClosure/18 e./25 )/14 >/1
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[22];
      // closed e.Indent as range 23
      // closed e. as range 25
      //DEBUG: s.CreateMode: 16
      //DEBUG: s.ElemNumber: 17
      //DEBUG: e.Indent: 23
      //DEBUG: e.: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 AsIs: )/10 AsIs: (/13 } e.Indent/23/27"refal"/29 Tile{ HalfReuse: 'r'/15 }"ts::"/31 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/33"_unwrapped_closure(context["/34 </36 & Symb/37 Tile{ AsIs: s.ElemNumber/17 } >/38 ']'/39 </40 & AllocatorFuncArgument*6/41 Tile{ AsIs: # ElUnwrappedClosure/18 AsIs: e./25 HalfReuse: >/14 HalfReuse: ')'/1 } ';'/42 )/43 Tile{ ]] }
      refalrts::copy_evar(vm, context[27], context[28], context[23], context[24]);
      refalrts::alloc_chars(vm, context[29], context[30], "refal", 5);
      refalrts::alloc_chars(vm, context[31], context[32], "ts::", 4);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_chars(vm, context[34], context[35], "_unwrapped_closure(context[", 27);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_char(vm, context[39], ']');
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_char(vm, context[42], ';');
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::reinit_char(context[15], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], ')');
      refalrts::link_brackets( context[13], context[43] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[18], context[1] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[33], context[37] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Native/4 (/9 e.new6/19 )/10 (/13 # CmdCreateElem/15 s.new7/16 s.new8/17 s.new9/18 s.new10/23 e.new11/21 )/14 >/1
    context[19] = context[7];
    context[20] = context[8];
    context[21] = context[11];
    context[22] = context[12];
    // closed e.new6 as range 19
    if( ! refalrts::svar_left( context[23], context[21], context[22] ) )
      continue;
    // closed e.new11 as range 21
    do {
      // </0 & GenCommand-Native/4 (/9 e.Indent/24 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElChar/18 s.Char/23 )/14 >/1
      context[24] = context[19];
      context[25] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_ElChar], context[18] ) )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.Indent as range 24
      //DEBUG: s.CreateMode: 16
      //DEBUG: s.ElemNumber: 17
      //DEBUG: s.Char: 23
      //DEBUG: e.Indent: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/24 AsIs: )/10 AsIs: (/13 } e.Indent/24/26"refalrts::"/28 </30 Tile{ HalfReuse: & AllocatorMode*2/15 AsIs: s.CreateMode/16 } >/31 '_'/32 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElChar/33 >/34"(context["/35 </37 & Symb/38 Tile{ AsIs: s.ElemNumber/17 } >/39"], \'"/40 </42 Tile{ HalfReuse: & EscapeChar/18 AsIs: s.Char/23 HalfReuse: >/14 HalfReuse: '\''/1 }");"/43 )/45 Tile{ ]] }
      refalrts::copy_evar(vm, context[26], context[27], context[24], context[25]);
      refalrts::alloc_chars(vm, context[28], context[29], "refalrts::", 10);
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::alloc_char(vm, context[32], '_');
      refalrts::alloc_ident(vm, context[33], identifiers[ident_ElChar]);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::alloc_chars(vm, context[35], context[36], "(context[", 9);
      refalrts::alloc_open_call(vm, context[37]);
      refalrts::alloc_name(vm, context[38], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[39]);
      refalrts::alloc_chars(vm, context[40], context[41], "], \'", 4);
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_chars(vm, context[43], context[44], ");", 2);
      refalrts::alloc_close_bracket(vm, context[45]);
      refalrts::reinit_name(context[15], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
      refalrts::reinit_name(context[18], functions[efunc_EscapeChar]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_char(context[1], '\'');
      refalrts::link_brackets( context[13], context[45] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[39] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[30] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[43], context[45] );
      res = refalrts::splice_evar( res, context[18], context[1] );
      res = refalrts::splice_evar( res, context[39], context[42] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_evar( res, context[33], context[38] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[28], context[30] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[9], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Native/4 (/9 e.Indent/24 )/10 (/13 # CmdCreateElem/15 s.CreateMode/16 s.ElemNumber/17 # ElName/18 s.Num/23 e.0/26 )/14 >/1
    context[24] = context[19];
    context[25] = context[20];
    context[26] = context[21];
    context[27] = context[22];
    if( ! refalrts::ident_term( identifiers[ident_ElName], context[18] ) )
      continue;
    // closed e.Indent as range 24
    // closed e.0 as range 26
    //DEBUG: s.CreateMode: 16
    //DEBUG: s.ElemNumber: 17
    //DEBUG: s.Num: 23
    //DEBUG: e.Indent: 24
    //DEBUG: e.0: 26

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/23 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/24 AsIs: )/10 AsIs: (/13 } e.Indent/24/28"refalrts::"/30 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/16 } >/32 '_'/33 </34 & AllocatorFuncName*12/35 Tile{ Reuse: # ElName/15 } >/36"(context["/37 </39 & Symb/40 Tile{ AsIs: s.ElemNumber/17 HalfReuse: >/18 }"], functions[efunc_"/41 </43 & CName/44 Tile{ AsIs: e.0/26 } >/45"])"/46 Tile{ HalfReuse: ';'/14 HalfReuse: )/1 ]] }
    refalrts::copy_evar(vm, context[28], context[29], context[24], context[25]);
    refalrts::alloc_chars(vm, context[30], context[31], "refalrts::", 10);
    refalrts::alloc_close_call(vm, context[32]);
    refalrts::alloc_char(vm, context[33], '_');
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_gen_AllocatorFuncName_D12]);
    refalrts::alloc_close_call(vm, context[36]);
    refalrts::alloc_chars(vm, context[37], context[38], "(context[", 9);
    refalrts::alloc_open_call(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_Symb]);
    refalrts::alloc_chars(vm, context[41], context[42], "], functions[efunc_", 19);
    refalrts::alloc_open_call(vm, context[43]);
    refalrts::alloc_name(vm, context[44], functions[efunc_CName]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::alloc_chars(vm, context[46], context[47], "])", 2);
    refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
    refalrts::update_ident(context[15], identifiers[ident_ElName]);
    refalrts::reinit_close_call(context[18]);
    refalrts::reinit_char(context[14], ';');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[13], context[1] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[14];
    res = refalrts::splice_evar( res, context[45], context[47] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[41], context[44] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[36], context[40] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[32], context[35] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[9], context[13] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenCommand-Native/4 (/7 e.new1/5 )/8 (/11 s.new2/13 e.new3/9 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[13], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 9
  do {
    // </0 & GenCommand-Native/4 (/7 e.new4/14 )/8 (/11 s.new5/13 s.new6/18 e.new7/16 )/12 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[9];
    context[17] = context[10];
    // closed e.new4 as range 14
    if( ! refalrts::svar_left( context[18], context[16], context[17] ) )
      continue;
    // closed e.new7 as range 16
    do {
      // </0 & GenCommand-Native/4 (/7 e.new8/19 )/8 (/11 s.new9/13 s.new10/18 s.new11/23 e.new12/21 )/12 >/1
      context[19] = context[14];
      context[20] = context[15];
      context[21] = context[16];
      context[22] = context[17];
      // closed e.new8 as range 19
      if( ! refalrts::svar_left( context[23], context[21], context[22] ) )
        continue;
      // closed e.new12 as range 21
      do {
        // </0 & GenCommand-Native/4 (/7 e.new13/24 )/8 (/11 # CmdCreateElem/13 s.new14/18 s.new15/23 e.new16/26 )/12 >/1
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[21];
        context[27] = context[22];
        if( ! refalrts::ident_term( identifiers[ident_CmdCreateElem], context[13] ) )
          continue;
        // closed e.new13 as range 24
        // closed e.new16 as range 26
        do {
          // </0 & GenCommand-Native/4 (/7 e.new17/28 )/8 (/11 # CmdCreateElem/13 s.new18/18 s.new19/23 s.new20/32 e.new21/30 )/12 >/1
          context[28] = context[24];
          context[29] = context[25];
          context[30] = context[26];
          context[31] = context[27];
          // closed e.new17 as range 28
          if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
            continue;
          // closed e.new21 as range 30
          do {
            // </0 & GenCommand-Native/4 (/7 e.new22/33 )/8 (/11 # CmdCreateElem/13 s.new23/18 s.new24/23 s.new25/32 s.new26/37 e.new27/35 )/12 >/1
            context[33] = context[28];
            context[34] = context[29];
            context[35] = context[30];
            context[36] = context[31];
            // closed e.new22 as range 33
            if( ! refalrts::svar_left( context[37], context[35], context[36] ) )
              continue;
            // closed e.new27 as range 35
            do {
              // </0 & GenCommand-Native/4 (/7 e.Indent/38 )/8 (/11 # CmdCreateElem/13 s.CreateMode/18 s.ElemNumber/23 # ElNumber/32 s.Number/37 )/12 >/1
              context[38] = context[33];
              context[39] = context[34];
              if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[32] ) )
                continue;
              if( ! refalrts::empty_seq( context[35], context[36] ) )
                continue;
              // closed e.Indent as range 38
              //DEBUG: s.CreateMode: 18
              //DEBUG: s.ElemNumber: 23
              //DEBUG: s.Number: 37
              //DEBUG: e.Indent: 38

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/38 AsIs: )/8 AsIs: (/11 } e.Indent/38/40"refalrts::"/42 </44 Tile{ HalfReuse: & AllocatorMode*2/13 AsIs: s.CreateMode/18 } >/45 '_'/46 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElNumber/47 >/48"(context["/49 </51 & Symb/52 Tile{ AsIs: s.ElemNumber/23 } >/53"], "/54 </56 Tile{ HalfReuse: & Symb/32 AsIs: s.Number/37 HalfReuse: >/12 HalfReuse: 'U'/1 }"L);"/57 )/59 Tile{ ]] }
              refalrts::copy_evar(vm, context[40], context[41], context[38], context[39]);
              refalrts::alloc_chars(vm, context[42], context[43], "refalrts::", 10);
              refalrts::alloc_open_call(vm, context[44]);
              refalrts::alloc_close_call(vm, context[45]);
              refalrts::alloc_char(vm, context[46], '_');
              refalrts::alloc_ident(vm, context[47], identifiers[ident_ElNumber]);
              refalrts::alloc_close_call(vm, context[48]);
              refalrts::alloc_chars(vm, context[49], context[50], "(context[", 9);
              refalrts::alloc_open_call(vm, context[51]);
              refalrts::alloc_name(vm, context[52], functions[efunc_Symb]);
              refalrts::alloc_close_call(vm, context[53]);
              refalrts::alloc_chars(vm, context[54], context[55], "], ", 3);
              refalrts::alloc_open_call(vm, context[56]);
              refalrts::alloc_chars(vm, context[57], context[58], "L);", 3);
              refalrts::alloc_close_bracket(vm, context[59]);
              refalrts::reinit_name(context[13], functions[efunc_gen_AllocatorMode_D2]);
              refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
              refalrts::reinit_name(context[32], functions[efunc_Symb]);
              refalrts::reinit_close_call(context[12]);
              refalrts::reinit_char(context[1], 'U');
              refalrts::link_brackets( context[11], context[59] );
              refalrts::push_stack( vm, context[12] );
              refalrts::push_stack( vm, context[56] );
              refalrts::push_stack( vm, context[53] );
              refalrts::push_stack( vm, context[51] );
              refalrts::push_stack( vm, context[48] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[45] );
              refalrts::push_stack( vm, context[44] );
              refalrts::link_brackets( context[7], context[8] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[57], context[59] );
              res = refalrts::splice_evar( res, context[32], context[1] );
              res = refalrts::splice_evar( res, context[53], context[56] );
              res = refalrts::splice_elem( res, context[23] );
              res = refalrts::splice_evar( res, context[47], context[52] );
              res = refalrts::splice_evar( res, context[0], context[4] );
              res = refalrts::splice_evar( res, context[45], context[46] );
              res = refalrts::splice_evar( res, context[13], context[18] );
              res = refalrts::splice_evar( res, context[42], context[44] );
              res = refalrts::splice_evar( res, context[40], context[41] );
              res = refalrts::splice_evar( res, context[7], context[11] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & GenCommand-Native/4 (/7 e.Indent/38 )/8 (/11 # CmdCreateElem/13 s.CreateMode/18 s.ElemNumber/23 # ElIdent/32 s.Num/37 e.0/40 )/12 >/1
              context[38] = context[33];
              context[39] = context[34];
              context[40] = context[35];
              context[41] = context[36];
              if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[32] ) )
                continue;
              // closed e.Indent as range 38
              // closed e.0 as range 40
              //DEBUG: s.CreateMode: 18
              //DEBUG: s.ElemNumber: 23
              //DEBUG: s.Num: 37
              //DEBUG: e.Indent: 38
              //DEBUG: e.0: 40

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/37 {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/38 AsIs: )/8 AsIs: (/11 } e.Indent/38/42"refalrts::"/44 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/18 } >/46 '_'/47 </48 & AllocatorFuncName*12/49 Tile{ Reuse: # ElIdent/13 } >/50"(context["/51 </53 & Symb/54 Tile{ AsIs: s.ElemNumber/23 HalfReuse: >/32 }"], identifiers[ident_"/55 </57 & CName/58 Tile{ AsIs: e.0/40 } >/59"])"/60 Tile{ HalfReuse: ';'/12 HalfReuse: )/1 ]] }
              refalrts::copy_evar(vm, context[42], context[43], context[38], context[39]);
              refalrts::alloc_chars(vm, context[44], context[45], "refalrts::", 10);
              refalrts::alloc_close_call(vm, context[46]);
              refalrts::alloc_char(vm, context[47], '_');
              refalrts::alloc_open_call(vm, context[48]);
              refalrts::alloc_name(vm, context[49], functions[efunc_gen_AllocatorFuncName_D12]);
              refalrts::alloc_close_call(vm, context[50]);
              refalrts::alloc_chars(vm, context[51], context[52], "(context[", 9);
              refalrts::alloc_open_call(vm, context[53]);
              refalrts::alloc_name(vm, context[54], functions[efunc_Symb]);
              refalrts::alloc_chars(vm, context[55], context[56], "], identifiers[ident_", 21);
              refalrts::alloc_open_call(vm, context[57]);
              refalrts::alloc_name(vm, context[58], functions[efunc_CName]);
              refalrts::alloc_close_call(vm, context[59]);
              refalrts::alloc_chars(vm, context[60], context[61], "])", 2);
              refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
              refalrts::update_ident(context[13], identifiers[ident_ElIdent]);
              refalrts::reinit_close_call(context[32]);
              refalrts::reinit_char(context[12], ';');
              refalrts::reinit_close_bracket(context[1]);
              refalrts::link_brackets( context[11], context[1] );
              refalrts::push_stack( vm, context[59] );
              refalrts::push_stack( vm, context[57] );
              refalrts::push_stack( vm, context[32] );
              refalrts::push_stack( vm, context[53] );
              refalrts::push_stack( vm, context[50] );
              refalrts::push_stack( vm, context[48] );
              refalrts::push_stack( vm, context[46] );
              refalrts::push_stack( vm, context[0] );
              refalrts::link_brackets( context[7], context[8] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[12];
              res = refalrts::splice_evar( res, context[59], context[61] );
              res = refalrts::splice_evar( res, context[40], context[41] );
              res = refalrts::splice_evar( res, context[55], context[58] );
              res = refalrts::splice_evar( res, context[23], context[32] );
              res = refalrts::splice_evar( res, context[50], context[54] );
              res = refalrts::splice_elem( res, context[13] );
              res = refalrts::splice_evar( res, context[46], context[49] );
              res = refalrts::splice_elem( res, context[18] );
              res = refalrts::splice_evar( res, context[0], context[4] );
              res = refalrts::splice_evar( res, context[44], context[45] );
              res = refalrts::splice_evar( res, context[42], context[43] );
              res = refalrts::splice_evar( res, context[7], context[11] );
              refalrts::splice_to_freelist_open( vm, trash_prev, res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & GenCommand-Native/4 (/7 e.Indent/38 )/8 (/11 # CmdCreateElem/13 s.CreateMode/18 s.ElemNumber/23 # ElUnwrappedClosure/32 s.HeadOffset/37 )/12 >/1
            context[38] = context[33];
            context[39] = context[34];
            if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[32] ) )
              continue;
            if( ! refalrts::empty_seq( context[35], context[36] ) )
              continue;
            // closed e.Indent as range 38
            //DEBUG: s.CreateMode: 18
            //DEBUG: s.ElemNumber: 23
            //DEBUG: s.HeadOffset: 37
            //DEBUG: e.Indent: 38

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/38 AsIs: )/8 AsIs: (/11 } e.Indent/38/40"refalrts::"/42 </44 Tile{ HalfReuse: & AllocatorMode*2/13 AsIs: s.CreateMode/18 } >/45 '_'/46 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElUnwrappedClosure/47 >/48"(context["/49 </51 & Symb/52 Tile{ AsIs: s.ElemNumber/23 } >/53"], context["/54 </56 Tile{ HalfReuse: & Symb/32 AsIs: s.HeadOffset/37 HalfReuse: >/12 HalfReuse: ']'/1 }");"/57 )/59 Tile{ ]] }
            refalrts::copy_evar(vm, context[40], context[41], context[38], context[39]);
            refalrts::alloc_chars(vm, context[42], context[43], "refalrts::", 10);
            refalrts::alloc_open_call(vm, context[44]);
            refalrts::alloc_close_call(vm, context[45]);
            refalrts::alloc_char(vm, context[46], '_');
            refalrts::alloc_ident(vm, context[47], identifiers[ident_ElUnwrappedClosure]);
            refalrts::alloc_close_call(vm, context[48]);
            refalrts::alloc_chars(vm, context[49], context[50], "(context[", 9);
            refalrts::alloc_open_call(vm, context[51]);
            refalrts::alloc_name(vm, context[52], functions[efunc_Symb]);
            refalrts::alloc_close_call(vm, context[53]);
            refalrts::alloc_chars(vm, context[54], context[55], "], context[", 11);
            refalrts::alloc_open_call(vm, context[56]);
            refalrts::alloc_chars(vm, context[57], context[58], ");", 2);
            refalrts::alloc_close_bracket(vm, context[59]);
            refalrts::reinit_name(context[13], functions[efunc_gen_AllocatorMode_D2]);
            refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
            refalrts::reinit_name(context[32], functions[efunc_Symb]);
            refalrts::reinit_close_call(context[12]);
            refalrts::reinit_char(context[1], ']');
            refalrts::link_brackets( context[11], context[59] );
            refalrts::push_stack( vm, context[12] );
            refalrts::push_stack( vm, context[56] );
            refalrts::push_stack( vm, context[53] );
            refalrts::push_stack( vm, context[51] );
            refalrts::push_stack( vm, context[48] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[45] );
            refalrts::push_stack( vm, context[44] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[57], context[59] );
            res = refalrts::splice_evar( res, context[32], context[1] );
            res = refalrts::splice_evar( res, context[53], context[56] );
            res = refalrts::splice_elem( res, context[23] );
            res = refalrts::splice_evar( res, context[47], context[52] );
            res = refalrts::splice_evar( res, context[0], context[4] );
            res = refalrts::splice_evar( res, context[45], context[46] );
            res = refalrts::splice_evar( res, context[13], context[18] );
            res = refalrts::splice_evar( res, context[42], context[44] );
            res = refalrts::splice_evar( res, context[40], context[41] );
            res = refalrts::splice_evar( res, context[7], context[11] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-Native/4 (/7 e.Indent/33 )/8 (/11 # CmdCreateElem/13 s.CreateMode/18 s.ElemNumber/23 s.ElementType/32 )/12 >/1
            context[33] = context[28];
            context[34] = context[29];
            if( ! refalrts::empty_seq( context[30], context[31] ) )
              continue;
            // closed e.Indent as range 33
            //DEBUG: s.CreateMode: 18
            //DEBUG: s.ElemNumber: 23
            //DEBUG: s.ElementType: 32
            //DEBUG: e.Indent: 33

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/33 AsIs: )/8 AsIs: (/11 } e.Indent/33/35"refal"/37 Tile{ HalfReuse: 'r'/13 }"ts::"/39 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/18 } >/41 '_'/42 </43 & AllocatorFuncName*12/44 Tile{ AsIs: s.ElementType/32 HalfReuse: >/12 HalfReuse: '('/1 }"context["/45 </47 & Symb/48 Tile{ AsIs: s.ElemNumber/23 } >/49"]);"/50 )/52 Tile{ ]] }
            refalrts::copy_evar(vm, context[35], context[36], context[33], context[34]);
            refalrts::alloc_chars(vm, context[37], context[38], "refal", 5);
            refalrts::alloc_chars(vm, context[39], context[40], "ts::", 4);
            refalrts::alloc_close_call(vm, context[41]);
            refalrts::alloc_char(vm, context[42], '_');
            refalrts::alloc_open_call(vm, context[43]);
            refalrts::alloc_name(vm, context[44], functions[efunc_gen_AllocatorFuncName_D12]);
            refalrts::alloc_chars(vm, context[45], context[46], "context[", 8);
            refalrts::alloc_open_call(vm, context[47]);
            refalrts::alloc_name(vm, context[48], functions[efunc_Symb]);
            refalrts::alloc_close_call(vm, context[49]);
            refalrts::alloc_chars(vm, context[50], context[51], "]);", 3);
            refalrts::alloc_close_bracket(vm, context[52]);
            refalrts::reinit_char(context[13], 'r');
            refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
            refalrts::reinit_close_call(context[12]);
            refalrts::reinit_char(context[1], '(');
            refalrts::link_brackets( context[11], context[52] );
            refalrts::push_stack( vm, context[49] );
            refalrts::push_stack( vm, context[47] );
            refalrts::push_stack( vm, context[12] );
            refalrts::push_stack( vm, context[43] );
            refalrts::push_stack( vm, context[41] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[49], context[52] );
            res = refalrts::splice_elem( res, context[23] );
            res = refalrts::splice_evar( res, context[45], context[48] );
            res = refalrts::splice_evar( res, context[32], context[1] );
            res = refalrts::splice_evar( res, context[41], context[44] );
            res = refalrts::splice_elem( res, context[18] );
            res = refalrts::splice_evar( res, context[0], context[4] );
            res = refalrts::splice_evar( res, context[39], context[40] );
            res = refalrts::splice_elem( res, context[13] );
            res = refalrts::splice_evar( res, context[37], context[38] );
            res = refalrts::splice_evar( res, context[35], context[36] );
            res = refalrts::splice_evar( res, context[7], context[11] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-Native/4 (/7 e.Indent/33 )/8 (/11 # CmdCreateElem/13 s.CreateMode/18 s.ElemNumber/23 s.ElementType/32 e./35 )/12 >/1
          context[33] = context[28];
          context[34] = context[29];
          context[35] = context[30];
          context[36] = context[31];
          // closed e.Indent as range 33
          // closed e. as range 35
          //DEBUG: s.CreateMode: 18
          //DEBUG: s.ElemNumber: 23
          //DEBUG: s.ElementType: 32
          //DEBUG: e.Indent: 33
          //DEBUG: e.: 35

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/33 AsIs: )/8 AsIs: (/11 } e.Indent/33/37"refalrts::"/39 </41 Tile{ HalfReuse: & AllocatorMode*2/13 AsIs: s.CreateMode/18 } >/42 '_'/43 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } s.ElementType/32/44 >/45"(context["/46 </48 & Symb/49 Tile{ AsIs: s.ElemNumber/23 } >/50 ']'/51 </52 & AllocatorFuncArgument*6/53 Tile{ AsIs: s.ElementType/32 AsIs: e./35 HalfReuse: >/12 HalfReuse: ')'/1 } ';'/54 )/55 Tile{ ]] }
          refalrts::copy_evar(vm, context[37], context[38], context[33], context[34]);
          refalrts::alloc_chars(vm, context[39], context[40], "refalrts::", 10);
          refalrts::alloc_open_call(vm, context[41]);
          refalrts::alloc_close_call(vm, context[42]);
          refalrts::alloc_char(vm, context[43], '_');
          refalrts::copy_stvar(vm, context[44], context[32]);
          refalrts::alloc_close_call(vm, context[45]);
          refalrts::alloc_chars(vm, context[46], context[47], "(context[", 9);
          refalrts::alloc_open_call(vm, context[48]);
          refalrts::alloc_name(vm, context[49], functions[efunc_Symb]);
          refalrts::alloc_close_call(vm, context[50]);
          refalrts::alloc_char(vm, context[51], ']');
          refalrts::alloc_open_call(vm, context[52]);
          refalrts::alloc_name(vm, context[53], functions[efunc_gen_AllocatorFuncArgument_D6]);
          refalrts::alloc_char(vm, context[54], ';');
          refalrts::alloc_close_bracket(vm, context[55]);
          refalrts::reinit_name(context[13], functions[efunc_gen_AllocatorMode_D2]);
          refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
          refalrts::reinit_close_call(context[12]);
          refalrts::reinit_char(context[1], ')');
          refalrts::link_brackets( context[11], context[55] );
          refalrts::push_stack( vm, context[12] );
          refalrts::push_stack( vm, context[52] );
          refalrts::push_stack( vm, context[50] );
          refalrts::push_stack( vm, context[48] );
          refalrts::push_stack( vm, context[45] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[42] );
          refalrts::push_stack( vm, context[41] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[54], context[55] );
          res = refalrts::splice_evar( res, context[32], context[1] );
          res = refalrts::splice_evar( res, context[50], context[53] );
          res = refalrts::splice_elem( res, context[23] );
          res = refalrts::splice_evar( res, context[44], context[49] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[13], context[18] );
          res = refalrts::splice_evar( res, context[39], context[41] );
          res = refalrts::splice_evar( res, context[37], context[38] );
          res = refalrts::splice_evar( res, context[7], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-Native/4 (/7 e.Indent/28 )/8 (/11 # CmdCreateElem/13 s.CreateMode/18 s.ElemNumber/23 e.ElemInfo/30 )/12 >/1
        context[28] = context[24];
        context[29] = context[25];
        context[30] = context[26];
        context[31] = context[27];
        // closed e.Indent as range 28
        // closed e.ElemInfo as range 30
        //DEBUG: s.CreateMode: 18
        //DEBUG: s.ElemNumber: 23
        //DEBUG: e.Indent: 28
        //DEBUG: e.ElemInfo: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.CreateMode/18 s.ElemNumber/23 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/32 e.Indent/28/33 Tile{ AsIs: )/12 } Tile{ AsIs: </0 Reuse: & PrintCreateElem*2/4 AsIs: (/7 AsIs: e.Indent/28 AsIs: )/8 HalfReuse: s.CreateMode18 /11 HalfReuse: s.ElemNumber23 /13 } Tile{ AsIs: e.ElemInfo/30 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[32]);
        refalrts::copy_evar(vm, context[33], context[34], context[28], context[29]);
        refalrts::update_name(context[4], functions[efunc_gen_PrintCreateElem_D2]);
        refalrts::reinit_svar( context[11], context[18] );
        refalrts::reinit_svar( context[13], context[23] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[32], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_evar( res, context[0], context[13] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_elem( res, context[32] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/7 e.Indent/24 )/8 (/11 # CmdLinkBrackets/13 s.Left/18 s.Right/23 )/12 >/1
      context[24] = context[19];
      context[25] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_CmdLinkBrackets], context[13] ) )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.Indent as range 24
      //DEBUG: s.Left: 18
      //DEBUG: s.Right: 23
      //DEBUG: e.Indent: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/24 AsIs: )/8 AsIs: (/11 } e.Indent/24/26"ref"/28 Tile{ HalfReuse: 'a'/13 }"lrts::link_brackets( context["/30 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.Left/18 } >/32"], context["/33 </35 & Symb/36 Tile{ AsIs: s.Right/23 HalfReuse: >/12 HalfReuse: ']'/1 }" );"/37 )/39 Tile{ ]] }
      refalrts::copy_evar(vm, context[26], context[27], context[24], context[25]);
      refalrts::alloc_chars(vm, context[28], context[29], "ref", 3);
      refalrts::alloc_chars(vm, context[30], context[31], "lrts::link_brackets( context[", 29);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_chars(vm, context[33], context[34], "], context[", 11);
      refalrts::alloc_open_call(vm, context[35]);
      refalrts::alloc_name(vm, context[36], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[37], context[38], " );", 3);
      refalrts::alloc_close_bracket(vm, context[39]);
      refalrts::reinit_char(context[13], 'a');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[12]);
      refalrts::reinit_char(context[1], ']');
      refalrts::link_brackets( context[11], context[39] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[37], context[39] );
      res = refalrts::splice_evar( res, context[23], context[1] );
      res = refalrts::splice_evar( res, context[32], context[36] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[7], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/7 e.new8/19 )/8 (/11 s.new9/13 s.new10/18 )/12 >/1
      context[19] = context[14];
      context[20] = context[15];
      if( ! refalrts::empty_seq( context[16], context[17] ) )
        continue;
      // closed e.new8 as range 19
      do {
        // </0 & GenCommand-Native/4 (/7 e.Indent/21 )/8 (/11 # CmdPushStack/13 s.ElemNumber/18 )/12 >/1
        context[21] = context[19];
        context[22] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_CmdPushStack], context[13] ) )
          continue;
        // closed e.Indent as range 21
        //DEBUG: s.ElemNumber: 18
        //DEBUG: e.Indent: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/21 AsIs: )/8 AsIs: (/11 } e.Indent/21/23 Tile{ HalfReuse: 'r'/4 }"efalrts::push_stack( vm, context["/25 Tile{ AsIs: </0 } Tile{ HalfReuse: & Symb/13 AsIs: s.ElemNumber/18 HalfReuse: >/12 HalfReuse: ']'/1 }" );"/27 )/29 Tile{ ]] }
        refalrts::copy_evar(vm, context[23], context[24], context[21], context[22]);
        refalrts::alloc_chars(vm, context[25], context[26], "efalrts::push_stack( vm, context[", 33);
        refalrts::alloc_chars(vm, context[27], context[28], " );", 3);
        refalrts::alloc_close_bracket(vm, context[29]);
        refalrts::reinit_char(context[4], 'r');
        refalrts::reinit_name(context[13], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[12]);
        refalrts::reinit_char(context[1], ']');
        refalrts::link_brackets( context[11], context[29] );
        refalrts::push_stack( vm, context[12] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[27], context[29] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_elem( res, context[0] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_elem( res, context[4] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[7], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-Native/4 (/7 e.Indent/21 )/8 (/11 # CmdWrapClosure/13 s.Offset/18 )/12 >/1
        context[21] = context[19];
        context[22] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_CmdWrapClosure], context[13] ) )
          continue;
        // closed e.Indent as range 21
        //DEBUG: s.Offset: 18
        //DEBUG: e.Indent: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/21 AsIs: )/8 AsIs: (/11 } e.Indent/21/23 Tile{ HalfReuse: 'r'/4 }"efalrts::wrap_closure( context["/25 Tile{ AsIs: </0 } Tile{ HalfReuse: & Symb/13 AsIs: s.Offset/18 HalfReuse: >/12 HalfReuse: ']'/1 }" );"/27 )/29 Tile{ ]] }
        refalrts::copy_evar(vm, context[23], context[24], context[21], context[22]);
        refalrts::alloc_chars(vm, context[25], context[26], "efalrts::wrap_closure( context[", 31);
        refalrts::alloc_chars(vm, context[27], context[28], " );", 3);
        refalrts::alloc_close_bracket(vm, context[29]);
        refalrts::reinit_char(context[4], 'r');
        refalrts::reinit_name(context[13], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[12]);
        refalrts::reinit_char(context[1], ']');
        refalrts::link_brackets( context[11], context[29] );
        refalrts::push_stack( vm, context[12] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[27], context[29] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_elem( res, context[0] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_elem( res, context[4] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[7], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/7 e.Indent/21 )/8 (/11 # CmdInsertElem/13 s.ElemNumber/18 )/12 >/1
      context[21] = context[19];
      context[22] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_CmdInsertElem], context[13] ) )
        continue;
      // closed e.Indent as range 21
      //DEBUG: s.ElemNumber: 18
      //DEBUG: e.Indent: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/21 AsIs: )/8 AsIs: (/11 } e.Indent/21/23 Tile{ HalfReuse: 'r'/4 }"es = refalrts::splice_elem( res, context["/25 Tile{ AsIs: </0 } Tile{ HalfReuse: & Symb/13 AsIs: s.ElemNumber/18 HalfReuse: >/12 HalfReuse: ']'/1 }" );"/27 )/29 Tile{ ]] }
      refalrts::copy_evar(vm, context[23], context[24], context[21], context[22]);
      refalrts::alloc_chars(vm, context[25], context[26], "es = refalrts::splice_elem( res, context[", 41);
      refalrts::alloc_chars(vm, context[27], context[28], " );", 3);
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::reinit_char(context[4], 'r');
      refalrts::reinit_name(context[13], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[12]);
      refalrts::reinit_char(context[1], ']');
      refalrts::link_brackets( context[11], context[29] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[27], context[29] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[7], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/7 e.new8/19 )/8 (/11 # CmdInsertVar/13 s.new9/18 s.new10/23 )/12 >/1
      context[19] = context[14];
      context[20] = context[15];
      context[21] = context[16];
      context[22] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_CmdInsertVar], context[13] ) )
        continue;
      // closed e.new8 as range 19
      if( ! refalrts::svar_left( context[23], context[21], context[22] ) )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      do {
        // </0 & GenCommand-Native/4 (/7 e.Indent/24 )/8 (/11 # CmdInsertVar/13 'e'/18 s.Number/23 )/12 >/1
        context[24] = context[19];
        context[25] = context[20];
        if( ! refalrts::char_term( 'e', context[18] ) )
          continue;
        // closed e.Indent as range 24
        //DEBUG: s.Number: 23
        //DEBUG: e.Indent: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/24 AsIs: )/8 AsIs: (/11 } e.Indent/24/26"res = refalrts::splice_evar( res, context["/28 Tile{ AsIs: </0 Reuse: & Symb/4 } s.Number/23/30 >/31"], context["/32 </34 & Symb/35 </36 Tile{ HalfReuse: & Add/13 HalfReuse: 1/18 AsIs: s.Number/23 HalfReuse: >/12 AsIs: >/1 }"] );"/37 )/39 Tile{ ]] }
        refalrts::copy_evar(vm, context[26], context[27], context[24], context[25]);
        refalrts::alloc_chars(vm, context[28], context[29], "res = refalrts::splice_evar( res, context[", 42);
        refalrts::copy_stvar(vm, context[30], context[23]);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_chars(vm, context[32], context[33], "], context[", 11);
        refalrts::alloc_open_call(vm, context[34]);
        refalrts::alloc_name(vm, context[35], functions[efunc_Symb]);
        refalrts::alloc_open_call(vm, context[36]);
        refalrts::alloc_chars(vm, context[37], context[38], "] );", 4);
        refalrts::alloc_close_bracket(vm, context[39]);
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_name(context[13], functions[efunc_Add]);
        refalrts::reinit_number(context[18], 1UL);
        refalrts::reinit_close_call(context[12]);
        refalrts::link_brackets( context[11], context[39] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[12] );
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[37], context[39] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[30], context[36] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[7], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-Native/4 (/7 e.Indent/24 )/8 (/11 # CmdInsertVar/13 s.Mode/18 s.Number/23 )/12 >/1
      context[24] = context[19];
      context[25] = context[20];
      // closed e.Indent as range 24
      //DEBUG: s.Mode: 18
      //DEBUG: s.Number: 23
      //DEBUG: e.Indent: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Mode/18 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/24 AsIs: )/8 AsIs: (/11 } e.Indent/24/26"res"/28 Tile{ HalfReuse: ' '/13 }"= refalrts::splice_stvar( res, context["/30 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.Number/23 HalfReuse: >/12 HalfReuse: ']'/1 }" );"/32 )/34 Tile{ ]] }
      refalrts::copy_evar(vm, context[26], context[27], context[24], context[25]);
      refalrts::alloc_chars(vm, context[28], context[29], "res", 3);
      refalrts::alloc_chars(vm, context[30], context[31], "= refalrts::splice_stvar( res, context[", 39);
      refalrts::alloc_chars(vm, context[32], context[33], " );", 3);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_char(context[13], ' ');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[12]);
      refalrts::reinit_char(context[1], ']');
      refalrts::link_brackets( context[11], context[34] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[23], context[1] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[7], context[11] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Native/4 (/7 e.Indent/19 )/8 (/11 # CmdInsertRange/13 s.Number/18 )/12 >/1
      context[19] = context[14];
      context[20] = context[15];
      if( ! refalrts::ident_term( identifiers[ident_CmdInsertRange], context[13] ) )
        continue;
      if( ! refalrts::empty_seq( context[16], context[17] ) )
        continue;
      // closed e.Indent as range 19
      //DEBUG: s.Number: 18
      //DEBUG: e.Indent: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/19 AsIs: )/8 AsIs: (/11 } e.Indent/19/21"res = refalrts::splice_evar( res, context["/23 Tile{ AsIs: </0 Reuse: & Symb/4 } s.Number/18/25 >/26"], "/27 </29 & ContextItem/30 </31 & Add/32 Tile{ HalfReuse: 1/13 AsIs: s.Number/18 HalfReuse: >/12 AsIs: >/1 }" );"/33 )/35 Tile{ ]] }
      refalrts::copy_evar(vm, context[21], context[22], context[19], context[20]);
      refalrts::alloc_chars(vm, context[23], context[24], "res = refalrts::splice_evar( res, context[", 42);
      refalrts::copy_stvar(vm, context[25], context[18]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::alloc_chars(vm, context[27], context[28], "], ", 3);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_ContextItem]);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_Add]);
      refalrts::alloc_chars(vm, context[33], context[34], " );", 3);
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::reinit_number(context[13], 1UL);
      refalrts::reinit_close_call(context[12]);
      refalrts::link_brackets( context[11], context[35] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[33], context[35] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[25], context[32] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[7], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Native/4 (/7 e.new8/19 )/8 (/11 # CmdInsertTile/13 s.new9/18 s.new10/23 )/12 >/1
    context[19] = context[14];
    context[20] = context[15];
    context[21] = context[16];
    context[22] = context[17];
    if( ! refalrts::ident_term( identifiers[ident_CmdInsertTile], context[13] ) )
      continue;
    // closed e.new8 as range 19
    if( ! refalrts::svar_left( context[23], context[21], context[22] ) )
      continue;
    if( ! refalrts::empty_seq( context[21], context[22] ) )
      continue;
    do {
      // </0 & GenCommand-Native/4 (/7 e.Indent/24 )/8 (/11 # CmdInsertTile/13 s.BeginEndOffset/18 s.BeginEndOffset/23 )/12 >/1
      context[24] = context[19];
      context[25] = context[20];
      if( ! refalrts::repeated_stvar_term( vm, context[23], context[18] ) )
        continue;
      // closed e.Indent as range 24
      //DEBUG: s.BeginEndOffset: 18
      //DEBUG: e.Indent: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.BeginEndOffset/18 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/24 AsIs: )/8 AsIs: (/11 } e.Indent/24/26"res"/28 Tile{ HalfReuse: ' '/13 }"= refalrts::splice_elem( res, context["/30 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.BeginEndOffset/23 HalfReuse: >/12 HalfReuse: ']'/1 }" );"/32 )/34 Tile{ ]] }
      refalrts::copy_evar(vm, context[26], context[27], context[24], context[25]);
      refalrts::alloc_chars(vm, context[28], context[29], "res", 3);
      refalrts::alloc_chars(vm, context[30], context[31], "= refalrts::splice_elem( res, context[", 38);
      refalrts::alloc_chars(vm, context[32], context[33], " );", 3);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_char(context[13], ' ');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[12]);
      refalrts::reinit_char(context[1], ']');
      refalrts::link_brackets( context[11], context[34] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[23], context[1] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[7], context[11] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Native/4 (/7 e.Indent/24 )/8 (/11 # CmdInsertTile/13 s.BeginOffset/18 s.EndOffset/23 )/12 >/1
    context[24] = context[19];
    context[25] = context[20];
    // closed e.Indent as range 24
    //DEBUG: s.BeginOffset: 18
    //DEBUG: s.EndOffset: 23
    //DEBUG: e.Indent: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/24 AsIs: )/8 AsIs: (/11 } e.Indent/24/26"res"/28 Tile{ HalfReuse: ' '/13 }"= refalrts::splice_evar( res, context["/30 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.BeginOffset/18 } >/32"], context["/33 </35 & Symb/36 Tile{ AsIs: s.EndOffset/23 HalfReuse: >/12 HalfReuse: ']'/1 }" );"/37 )/39 Tile{ ]] }
    refalrts::copy_evar(vm, context[26], context[27], context[24], context[25]);
    refalrts::alloc_chars(vm, context[28], context[29], "res", 3);
    refalrts::alloc_chars(vm, context[30], context[31], "= refalrts::splice_evar( res, context[", 38);
    refalrts::alloc_close_call(vm, context[32]);
    refalrts::alloc_chars(vm, context[33], context[34], "], context[", 11);
    refalrts::alloc_open_call(vm, context[35]);
    refalrts::alloc_name(vm, context[36], functions[efunc_Symb]);
    refalrts::alloc_chars(vm, context[37], context[38], " );", 3);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::reinit_char(context[13], ' ');
    refalrts::update_name(context[4], functions[efunc_Symb]);
    refalrts::reinit_close_call(context[12]);
    refalrts::reinit_char(context[1], ']');
    refalrts::link_brackets( context[11], context[39] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[37], context[39] );
    res = refalrts::splice_evar( res, context[23], context[1] );
    res = refalrts::splice_evar( res, context[32], context[36] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Native/4 (/7 e.new4/14 )/8 (/11 s.new5/13 )/12 >/1
    context[14] = context[5];
    context[15] = context[6];
    if( ! refalrts::empty_seq( context[9], context[10] ) )
      continue;
    // closed e.new4 as range 14
    do {
      // </0 & GenCommand-Native/4 (/7 e.Indent/16 )/8 (/11 # CmdUseRes/13 )/12 >/1
      context[16] = context[14];
      context[17] = context[15];
      if( ! refalrts::ident_term( identifiers[ident_CmdUseRes], context[13] ) )
        continue;
      // closed e.Indent as range 16
      //DEBUG: e.Indent: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 AsIs: )/8 AsIs: (/11 } e.Indent/16/18 Tile{ HalfReuse: 'r'/0 HalfReuse: 'e'/4 }"falrts::use( res "/20 Tile{ HalfReuse: ')'/13 HalfReuse: ';'/12 HalfReuse: )/1 ]] }
      refalrts::copy_evar(vm, context[18], context[19], context[16], context[17]);
      refalrts::alloc_chars(vm, context[20], context[21], "falrts::use( res ", 17);
      refalrts::reinit_char(context[0], 'r');
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_char(context[13], ')');
      refalrts::reinit_char(context[12], ';');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[11], context[1] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[13];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[7], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Native/4 (/7 e.Indent/16 )/8 (/11 # CmdSpliceToFreeList/13 )/12 >/1
    context[16] = context[14];
    context[17] = context[15];
    if( ! refalrts::ident_term( identifiers[ident_CmdSpliceToFreeList], context[13] ) )
      continue;
    // closed e.Indent as range 16
    //DEBUG: e.Indent: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 AsIs: )/8 AsIs: (/11 } e.Indent/16/18 Tile{ HalfReuse: 'r'/0 HalfReuse: 'e'/4 }"falrts::splice_to_freelist( vm, arg_begin, arg_end "/20 Tile{ HalfReuse: ')'/13 HalfReuse: ';'/12 HalfReuse: )/1 ]] }
    refalrts::copy_evar(vm, context[18], context[19], context[16], context[17]);
    refalrts::alloc_chars(vm, context[20], context[21], "falrts::splice_to_freelist( vm, arg_begin, arg_end ", 51);
    refalrts::reinit_char(context[0], 'r');
    refalrts::reinit_char(context[4], 'e');
    refalrts::reinit_char(context[13], ')');
    refalrts::reinit_char(context[12], ';');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[11], context[1] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Native/4 (/7 e.Indent/14 )/8 (/11 # CmdSpliceToFreeList-Range/13 s.Left/18 s.Right/19 )/12 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[9];
    context[17] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_CmdSpliceToFreeListm_Range], context[13] ) )
      continue;
    // closed e.Indent as range 14
    if( ! refalrts::svar_left( context[18], context[16], context[17] ) )
      continue;
    if( ! refalrts::svar_left( context[19], context[16], context[17] ) )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: e.Indent: 14
    //DEBUG: s.Left: 18
    //DEBUG: s.Right: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/14 AsIs: )/8 AsIs: (/11 } e.Indent/14/20"ref"/22 Tile{ HalfReuse: 'a'/13 }"lrts::splice_to_freelist(vm, context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.Left/18 } >/26"], context["/27 </29 & Symb/30 Tile{ AsIs: s.Right/19 HalfReuse: >/12 HalfReuse: ']'/1 }");"/31 )/33 Tile{ ]] }
    refalrts::copy_evar(vm, context[20], context[21], context[14], context[15]);
    refalrts::alloc_chars(vm, context[22], context[23], "ref", 3);
    refalrts::alloc_chars(vm, context[24], context[25], "lrts::splice_to_freelist(vm, context[", 37);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::alloc_chars(vm, context[27], context[28], "], context[", 11);
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_Symb]);
    refalrts::alloc_chars(vm, context[31], context[32], ");", 2);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::reinit_char(context[13], 'a');
    refalrts::update_name(context[4], functions[efunc_Symb]);
    refalrts::reinit_close_call(context[12]);
    refalrts::reinit_char(context[1], ']');
    refalrts::link_brackets( context[11], context[33] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[33] );
    res = refalrts::splice_evar( res, context[19], context[1] );
    res = refalrts::splice_evar( res, context[26], context[30] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Native/4 (/7 e.Indent/14 )/8 (/11 # CmdNextStep/13 )/12 >/1
    context[14] = context[5];
    context[15] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_CmdNextStep], context[13] ) )
      continue;
    if( ! refalrts::empty_seq( context[9], context[10] ) )
      continue;
    // closed e.Indent as range 14
    //DEBUG: e.Indent: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/14 AsIs: )/8 AsIs: (/11 } e.Indent/14/16 Tile{ HalfReuse: 'r'/0 HalfReuse: 'e'/4 }"turn refalrts::cSucces"/18 Tile{ HalfReuse: 's'/13 HalfReuse: ';'/12 HalfReuse: )/1 ]] }
    refalrts::copy_evar(vm, context[16], context[17], context[14], context[15]);
    refalrts::alloc_chars(vm, context[18], context[19], "turn refalrts::cSucces", 22);
    refalrts::reinit_char(context[0], 'r');
    refalrts::reinit_char(context[4], 'e');
    refalrts::reinit_char(context[13], 's');
    refalrts::reinit_char(context[12], ';');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[11], context[1] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Native/4 (/7 e.new4/14 )/8 (/11 # CmdTrash/13 s.new5/18 )/12 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[9];
    context[17] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_CmdTrash], context[13] ) )
      continue;
    // closed e.new4 as range 14
    if( ! refalrts::svar_left( context[18], context[16], context[17] ) )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    do {
      // </0 & GenCommand-Native/4 (/7 e.Indent/19 )/8 (/11 # CmdTrash/13 # LEFT-EDGE/18 )/12 >/1
      context[19] = context[14];
      context[20] = context[15];
      if( ! refalrts::ident_term( identifiers[ident_LEFTm_EDGE], context[18] ) )
        continue;
      // closed e.Indent as range 19
      //DEBUG: e.Indent: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } e.Indent/19/21 Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent/19 HalfReuse: 'r'/8 HalfReuse: 'e'/11 HalfReuse: 'f'/13 HalfReuse: 'a'/18 HalfReuse: 'l'/12 HalfReuse: 'r'/1 }"ts::splice_to_freelist_open( vm, trash_prev, res );"/23 )/25 Tile{ ]] }
      refalrts::copy_evar(vm, context[21], context[22], context[19], context[20]);
      refalrts::alloc_chars(vm, context[23], context[24], "ts::splice_to_freelist_open( vm, trash_prev, res );", 51);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], 'r');
      refalrts::reinit_char(context[11], 'e');
      refalrts::reinit_char(context[13], 'f');
      refalrts::reinit_char(context[18], 'a');
      refalrts::reinit_char(context[12], 'l');
      refalrts::reinit_char(context[1], 'r');
      refalrts::link_brackets( context[7], context[25] );
      refalrts::link_brackets( context[0], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[4], context[1] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Native/4 (/7 e.Indent/19 )/8 (/11 # CmdTrash/13 s.Offset/18 )/12 >/1
    context[19] = context[14];
    context[20] = context[15];
    // closed e.Indent as range 19
    //DEBUG: s.Offset: 18
    //DEBUG: e.Indent: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/19 AsIs: )/8 AsIs: (/11 } e.Indent/19/21"ref"/23 Tile{ HalfReuse: 'a'/4 }"lrts::splice_to_freelist_open( vm, context["/25 Tile{ AsIs: </0 } Tile{ HalfReuse: & Symb/13 AsIs: s.Offset/18 HalfReuse: >/12 HalfReuse: ']'/1 }", res );"/27 )/29 Tile{ ]] }
    refalrts::copy_evar(vm, context[21], context[22], context[19], context[20]);
    refalrts::alloc_chars(vm, context[23], context[24], "ref", 3);
    refalrts::alloc_chars(vm, context[25], context[26], "lrts::splice_to_freelist_open( vm, context[", 43);
    refalrts::alloc_chars(vm, context[27], context[28], ", res );", 8);
    refalrts::alloc_close_bracket(vm, context[29]);
    refalrts::reinit_char(context[4], 'a');
    refalrts::reinit_name(context[13], functions[efunc_Symb]);
    refalrts::reinit_close_call(context[12]);
    refalrts::reinit_char(context[1], ']');
    refalrts::link_brackets( context[11], context[29] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[27], context[29] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_elem( res, context[0] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_elem( res, context[4] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenCommand-Native/4 (/7 e.new4/5 )/8 (/11 # CmdFail/13 )/12 >/1
  if( ! refalrts::ident_term( identifiers[ident_CmdFail], context[13] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 5
  do {
    // </0 & GenCommand-Native/4 (/7 ' '/16 ' '/17 )/8 (/11 # CmdFail/13 )/12 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = refalrts::char_left( ' ', context[14], context[15] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( ' ', context[14], context[15] );
    if( ! context[17] )
      continue;
    if( ! refalrts::empty_seq( context[14], context[15] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: ' '/16 AsIs: ' '/17 AsIs: )/8 AsIs: (/11 HalfReuse: ' '/13 HalfReuse: ' '/12 HalfReuse: 'r'/1 } 'e'/18 Tile{ HalfReuse: 't'/0 HalfReuse: 'u'/4 }"rn refalrts::cRecognitionImpossible;"/19 )/21 Tile{ ]] }
    refalrts::alloc_char(vm, context[18], 'e');
    refalrts::alloc_chars(vm, context[19], context[20], "rn refalrts::cRecognitionImpossible;", 36);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::reinit_char(context[13], ' ');
    refalrts::reinit_char(context[12], ' ');
    refalrts::reinit_char(context[1], 'r');
    refalrts::reinit_char(context[0], 't');
    refalrts::reinit_char(context[4], 'u');
    refalrts::link_brackets( context[11], context[21] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[19], context[21] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[7], context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenCommand-Native/4 (/7 e.Indent/5 )/8 (/11 # CmdFail/13 )/12 >/1
  // closed e.Indent as range 5
  //DEBUG: e.Indent: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/5 AsIs: )/8 AsIs: (/11 } e.Indent/5/14 Tile{ HalfReuse: 'c'/0 HalfReuse: 'o'/4 }"ntinu"/16 Tile{ HalfReuse: 'e'/13 HalfReuse: ';'/12 HalfReuse: )/1 ]] }
  refalrts::copy_evar(vm, context[14], context[15], context[5], context[6]);
  refalrts::alloc_chars(vm, context[16], context[17], "ntinu", 5);
  refalrts::reinit_char(context[0], 'c');
  refalrts::reinit_char(context[4], 'o');
  refalrts::reinit_char(context[13], 'e');
  refalrts::reinit_char(context[12], ';');
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[11], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[13];
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[7], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_GenCommandm_Native("GenCommand-Native", COOKIE1_, COOKIE2_, func_GenCommandm_Native);


static refalrts::FnResult func_PrintString(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & PrintString/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & PrintString/4 s.Char/7 e./5 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    // closed e. as range 5
    //DEBUG: s.Char: 7
    //DEBUG: e.: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } '\"'/8 Tile{ AsIs: </0 Reuse: & EscapeString/4 AsIs: s.Char/7 AsIs: e./5 AsIs: >/1 }"\", "/9 </11 & DoPrintLength/12 1/13 e./5/14 >/16 Tile{ ]] }
    refalrts::alloc_char(vm, context[8], '\"');
    refalrts::alloc_chars(vm, context[9], context[10], "\", ", 3);
    refalrts::alloc_open_call(vm, context[11]);
    refalrts::alloc_name(vm, context[12], functions[efunc_DoPrintLength]);
    refalrts::alloc_number(vm, context[13], 1UL);
    refalrts::copy_evar(vm, context[14], context[15], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::update_name(context[4], functions[efunc_EscapeString]);
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[9], context[16] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintString/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } '\"'/5 Tile{ AsIs: </0 Reuse: & EscapeString/4 AsIs: >/1 }"\", 0"/6 Tile{ ]] }
    refalrts::alloc_char(vm, context[5], '\"');
    refalrts::alloc_chars(vm, context[6], context[7], "\", 0", 4);
    refalrts::update_name(context[4], functions[efunc_EscapeString]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_elem( res, context[5] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintString/4 e.String/2 >/1
  // closed e.String as range 2
  //DEBUG: e.String: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } '\"'/5 Tile{ AsIs: </0 Reuse: & EscapeString/4 AsIs: e.String/2 AsIs: >/1 }"\", "/6 </8 & DoPrintLength@0/9 0/10 e.String/2/11 >/13 Tile{ ]] }
  refalrts::alloc_char(vm, context[5], '\"');
  refalrts::alloc_chars(vm, context[6], context[7], "\", ", 3);
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_DoPrintLength_Z0]);
  refalrts::alloc_number(vm, context[10], 0UL);
  refalrts::copy_evar(vm, context[11], context[12], context[2], context[3]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_EscapeString]);
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[6], context[13] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintString("PrintString", COOKIE1_, COOKIE2_, func_PrintString);


static refalrts::FnResult func_PrintLength(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & PrintLength/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & PrintLength/4 s.Char/7 e./5 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    // closed e. as range 5
    //DEBUG: s.Char: 7
    //DEBUG: e.: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Char/7 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoPrintLength/4 } 1/8 Tile{ AsIs: e./5 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_number(vm, context[8], 1UL);
    refalrts::update_name(context[4], functions[efunc_DoPrintLength]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintLength/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & PrintLength/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '0'/1 ]] }
    refalrts::reinit_char(context[1], '0');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintLength/4 e.String/2 >/1
  // closed e.String as range 2
  //DEBUG: e.String: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & DoPrintLength@0/0 HalfReuse: 0/4 AsIs: e.String/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoPrintLength_Z0]);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintLength("PrintLength", COOKIE1_, COOKIE2_, func_PrintLength);


static refalrts::FnResult func_DoPrintLength(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & DoPrintLength/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoPrintLength/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & DoPrintLength/4 s.Length/5 s.Char/8 e.Tail/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    // closed e.Tail as range 6
    //DEBUG: s.Length: 5
    //DEBUG: s.Char: 8
    //DEBUG: e.Tail: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Char/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoPrintLength/4 } </9 & Add/10 1/11 Tile{ AsIs: s.Length/5 } >/12 Tile{ AsIs: e.Tail/6 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[11], 1UL);
    refalrts::alloc_close_call(vm, context[12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[9], context[11] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoPrintLength/4 s.Length/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Length: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Symb/4 AsIs: s.Length/5 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Symb]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoPrintLength("DoPrintLength", COOKIE1_, COOKIE2_, func_DoPrintLength);


static refalrts::FnResult func_PrintMatchChar(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & PrintMatchChar/4 (/7 e.Indent/5 )/8 s.Direction/9 s.BracketNumber/10 s.Char/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Indent: 5
  //DEBUG: s.Direction: 9
  //DEBUG: s.BracketNumber: 10
  //DEBUG: s.Char: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch@1/4 AsIs: (/7 AsIs: e.Indent/5 AsIs: )/8 AsIs: s.Direction/9 AsIs: s.BracketNumber/10 } </12 & EscapeChar/13 Tile{ AsIs: s.Char/11 AsIs: >/1 } >/14 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_EscapeChar]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z1]);
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[11], context[1] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintMatchChar("PrintMatchChar", COOKIE1_, COOKIE2_, func_PrintMatchChar);


static refalrts::FnResult func_PrintMatchCharSave(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & PrintMatchCharSave/4 (/7 e.Indent/5 )/8 s.Offset/9 s.Direction/10 s.BracketNumber/11 s.Char/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Indent: 5
  //DEBUG: s.Offset: 9
  //DEBUG: s.Direction: 10
  //DEBUG: s.BracketNumber: 11
  //DEBUG: s.Char: 12

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave@1/4 AsIs: (/7 AsIs: e.Indent/5 AsIs: )/8 AsIs: s.Offset/9 AsIs: s.Direction/10 AsIs: s.BracketNumber/11 } </13 & EscapeChar/14 Tile{ AsIs: s.Char/12 AsIs: >/1 } >/15 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_EscapeChar]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatchSave_Z1]);
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[12], context[1] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintMatchCharSave("PrintMatchCharSave", COOKIE1_, COOKIE2_, func_PrintMatchCharSave);


static refalrts::FnResult func_PrintMatchNumber(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & PrintMatchNumber/4 (/7 e.Indent/5 )/8 s.Direction/9 s.BracketNumber/10 s.Number/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Indent: 5
  //DEBUG: s.Direction: 9
  //DEBUG: s.BracketNumber: 10
  //DEBUG: s.Number: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch@2/4 AsIs: (/7 AsIs: e.Indent/5 AsIs: )/8 AsIs: s.Direction/9 AsIs: s.BracketNumber/10 } </12 & Symb/13 Tile{ AsIs: s.Number/11 AsIs: >/1 } >/14 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_Symb]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z2]);
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[11], context[1] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintMatchNumber("PrintMatchNumber", COOKIE1_, COOKIE2_, func_PrintMatchNumber);


static refalrts::FnResult func_PrintMatchNumberSave(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & PrintMatchNumberSave/4 (/7 e.Indent/5 )/8 s.Offset/9 s.Direction/10 s.BracketNumber/11 s.Number/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Indent: 5
  //DEBUG: s.Offset: 9
  //DEBUG: s.Direction: 10
  //DEBUG: s.BracketNumber: 11
  //DEBUG: s.Number: 12

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave@2/4 AsIs: (/7 AsIs: e.Indent/5 AsIs: )/8 AsIs: s.Offset/9 AsIs: s.Direction/10 AsIs: s.BracketNumber/11 } </13 & Symb/14 Tile{ AsIs: s.Number/12 AsIs: >/1 } >/15 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_Symb]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatchSave_Z2]);
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[12], context[1] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintMatchNumberSave("PrintMatchNumberSave", COOKIE1_, COOKIE2_, func_PrintMatchNumberSave);


static refalrts::FnResult func_PrintMatchName(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & PrintMatchName/4 (/7 e.Indent/5 )/8 s.Direction/9 s.BracketNumber/10 e.Name/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 2
  //DEBUG: e.Indent: 5
  //DEBUG: s.Direction: 9
  //DEBUG: s.BracketNumber: 10
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch@3/4 AsIs: (/7 AsIs: e.Indent/5 AsIs: )/8 AsIs: s.Direction/9 AsIs: s.BracketNumber/10 } </11 & CName/12 Tile{ AsIs: e.Name/2 } >/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_CName]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintMatchName("PrintMatchName", COOKIE1_, COOKIE2_, func_PrintMatchName);


static refalrts::FnResult func_PrintMatchNameSave(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & PrintMatchNameSave/4 (/7 e.Indent/5 )/8 s.Offset/9 s.Direction/10 s.BracketNumber/11 e.Name/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 2
  //DEBUG: e.Indent: 5
  //DEBUG: s.Offset: 9
  //DEBUG: s.Direction: 10
  //DEBUG: s.BracketNumber: 11
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave@3/4 AsIs: (/7 AsIs: e.Indent/5 AsIs: )/8 AsIs: s.Offset/9 AsIs: s.Direction/10 AsIs: s.BracketNumber/11 } </12 & CName/13 Tile{ AsIs: e.Name/2 } >/14 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_CName]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatchSave_Z3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintMatchNameSave("PrintMatchNameSave", COOKIE1_, COOKIE2_, func_PrintMatchNameSave);


static refalrts::FnResult func_PrintMatchIdent(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & PrintMatchIdent/4 (/7 e.Indent/5 )/8 s.Direction/9 s.BracketNumber/10 e.Name/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 2
  //DEBUG: e.Indent: 5
  //DEBUG: s.Direction: 9
  //DEBUG: s.BracketNumber: 10
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch@4/4 AsIs: (/7 AsIs: e.Indent/5 AsIs: )/8 AsIs: s.Direction/9 AsIs: s.BracketNumber/10 } </11 & CName/12 Tile{ AsIs: e.Name/2 } >/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_CName]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintMatchIdent("PrintMatchIdent", COOKIE1_, COOKIE2_, func_PrintMatchIdent);


static refalrts::FnResult func_PrintMatchIdentSave(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & PrintMatchIdentSave/4 (/7 e.Indent/5 )/8 s.Offset/9 s.Direction/10 s.BracketNumber/11 e.Name/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 2
  //DEBUG: e.Indent: 5
  //DEBUG: s.Offset: 9
  //DEBUG: s.Direction: 10
  //DEBUG: s.BracketNumber: 11
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave@4/4 AsIs: (/7 AsIs: e.Indent/5 AsIs: )/8 AsIs: s.Offset/9 AsIs: s.Direction/10 AsIs: s.BracketNumber/11 } </12 & CName/13 Tile{ AsIs: e.Name/2 } >/14 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_CName]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatchSave_Z4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintMatchIdentSave("PrintMatchIdentSave", COOKIE1_, COOKIE2_, func_PrintMatchIdentSave);


static refalrts::FnResult func_PrintMatchBrackets(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & PrintMatchBrackets/4 (/7 e.Indent/5 )/8 s.Direction/9 s.BracketNumber/10 s.InnerNum/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Indent: 5
  //DEBUG: s.Direction: 9
  //DEBUG: s.BracketNumber: 10
  //DEBUG: s.InnerNum: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch@5/4 AsIs: (/7 AsIs: e.Indent/5 AsIs: )/8 AsIs: s.Direction/9 AsIs: s.BracketNumber/10 } (/12 </13 & Symb/14 Tile{ AsIs: s.InnerNum/11 AsIs: >/1 } )/15 </16 & Symb/17 </18 & Add/19 1/20 s.InnerNum/11/21 >/22 >/23 >/24 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_Symb]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_open_call(vm, context[16]);
  refalrts::alloc_name(vm, context[17], functions[efunc_Symb]);
  refalrts::alloc_open_call(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[20], 1UL);
  refalrts::copy_stvar(vm, context[21], context[11]);
  refalrts::alloc_close_call(vm, context[22]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::alloc_close_call(vm, context[24]);
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z5]);
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[22] );
  refalrts::push_stack( vm, context[18] );
  refalrts::link_brackets( context[12], context[15] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[15], context[24] );
  res = refalrts::splice_evar( res, context[11], context[1] );
  res = refalrts::splice_evar( res, context[12], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintMatchBrackets("PrintMatchBrackets", COOKIE1_, COOKIE2_, func_PrintMatchBrackets);


static refalrts::FnResult func_PrintMatchBracketsSave(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 63 elems
  refalrts::Iter context[63];
  refalrts::zeros( context, 63 );
  // </0 & PrintMatchBracketsSave/4 (/7 e.Indent/5 )/8 s.Direction/9 s.BracketNumber/10 s.InnerNum/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Indent: 5
  //DEBUG: s.Direction: 9
  //DEBUG: s.BracketNumber: 10
  //DEBUG: s.InnerNum: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave/4 AsIs: (/7 AsIs: e.Indent/5 AsIs: )/8 } </12 & Add/13 2/14 Tile{ AsIs: s.InnerNum/11 AsIs: >/1 } Tile{ AsIs: s.Direction/9 AsIs: s.BracketNumber/10 } (/15"brackets"/16 )/18"context["/19 </21 & Symb/22 s.InnerNum/11/23 >/24"], context["/25 </27 & Symb/28 </29 & Add/30 1/31 s.InnerNum/11/32 >/33 >/34 ']'/35 >/36 (/37 e.Indent/5/38"refalrts::bracket_pointers("/40 </42 & ContextItem/43 </44 & Add/45 s.InnerNum/11/46 2/47 >/48 >/49", "/50 </52 & ContextItem/53 </54 & Add/55 s.InnerNum/11/56 3/57 >/58 >/59");"/60 )/62 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[14], 2UL);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_chars(vm, context[16], context[17], "brackets", 8);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_chars(vm, context[19], context[20], "context[", 8);
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_Symb]);
  refalrts::copy_stvar(vm, context[23], context[11]);
  refalrts::alloc_close_call(vm, context[24]);
  refalrts::alloc_chars(vm, context[25], context[26], "], context[", 11);
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_Symb]);
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[31], 1UL);
  refalrts::copy_stvar(vm, context[32], context[11]);
  refalrts::alloc_close_call(vm, context[33]);
  refalrts::alloc_close_call(vm, context[34]);
  refalrts::alloc_char(vm, context[35], ']');
  refalrts::alloc_close_call(vm, context[36]);
  refalrts::alloc_open_bracket(vm, context[37]);
  refalrts::copy_evar(vm, context[38], context[39], context[5], context[6]);
  refalrts::alloc_chars(vm, context[40], context[41], "refalrts::bracket_pointers(", 27);
  refalrts::alloc_open_call(vm, context[42]);
  refalrts::alloc_name(vm, context[43], functions[efunc_ContextItem]);
  refalrts::alloc_open_call(vm, context[44]);
  refalrts::alloc_name(vm, context[45], functions[efunc_Add]);
  refalrts::copy_stvar(vm, context[46], context[11]);
  refalrts::alloc_number(vm, context[47], 2UL);
  refalrts::alloc_close_call(vm, context[48]);
  refalrts::alloc_close_call(vm, context[49]);
  refalrts::alloc_chars(vm, context[50], context[51], ", ", 2);
  refalrts::alloc_open_call(vm, context[52]);
  refalrts::alloc_name(vm, context[53], functions[efunc_ContextItem]);
  refalrts::alloc_open_call(vm, context[54]);
  refalrts::alloc_name(vm, context[55], functions[efunc_Add]);
  refalrts::copy_stvar(vm, context[56], context[11]);
  refalrts::alloc_number(vm, context[57], 3UL);
  refalrts::alloc_close_call(vm, context[58]);
  refalrts::alloc_close_call(vm, context[59]);
  refalrts::alloc_chars(vm, context[60], context[61], ");", 2);
  refalrts::alloc_close_bracket(vm, context[62]);
  refalrts::update_name(context[4], functions[efunc_PrintMatchSave]);
  refalrts::link_brackets( context[37], context[62] );
  refalrts::push_stack( vm, context[59] );
  refalrts::push_stack( vm, context[52] );
  refalrts::push_stack( vm, context[58] );
  refalrts::push_stack( vm, context[54] );
  refalrts::push_stack( vm, context[49] );
  refalrts::push_stack( vm, context[42] );
  refalrts::push_stack( vm, context[48] );
  refalrts::push_stack( vm, context[44] );
  refalrts::push_stack( vm, context[36] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[34] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[33] );
  refalrts::push_stack( vm, context[29] );
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[15], context[18] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[15], context[62] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[11], context[1] );
  res = refalrts::splice_evar( res, context[12], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintMatchBracketsSave("PrintMatchBracketsSave", COOKIE1_, COOKIE2_, func_PrintMatchBracketsSave);


static refalrts::FnResult func_PrintMatchADT(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & PrintMatchADT/4 (/7 e.Indent/5 )/8 s.Direction/9 s.BracketNumber/10 s.InnerNum/11 e.Name/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 2
  //DEBUG: e.Indent: 5
  //DEBUG: s.Direction: 9
  //DEBUG: s.BracketNumber: 10
  //DEBUG: s.InnerNum: 11
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch@6/4 AsIs: (/7 AsIs: e.Indent/5 AsIs: )/8 AsIs: s.Direction/9 AsIs: s.BracketNumber/10 } (/12 </13 & Symb/14 Tile{ AsIs: s.InnerNum/11 } >/15 )/16 (/17 </18 & Symb/19 </20 & Add/21 1/22 s.InnerNum/11/23 >/24 >/25 )/26 </27 & CName/28 Tile{ AsIs: e.Name/2 } >/29 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_Symb]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_open_call(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_Symb]);
  refalrts::alloc_open_call(vm, context[20]);
  refalrts::alloc_name(vm, context[21], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[22], 1UL);
  refalrts::copy_stvar(vm, context[23], context[11]);
  refalrts::alloc_close_call(vm, context[24]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_CName]);
  refalrts::alloc_close_call(vm, context[29]);
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z6]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[29] );
  refalrts::push_stack( vm, context[27] );
  refalrts::link_brackets( context[17], context[26] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[18] );
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[20] );
  refalrts::link_brackets( context[12], context[16] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[29] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[15], context[28] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[12], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintMatchADT("PrintMatchADT", COOKIE1_, COOKIE2_, func_PrintMatchADT);


static refalrts::FnResult func_PrintMatchADTSave(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 78 elems
  refalrts::Iter context[78];
  refalrts::zeros( context, 78 );
  // </0 & PrintMatchADTSave/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrintMatchADTSave/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 s.new4/11 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 2
  do {
    // </0 & PrintMatchADTSave/4 (/7 e.new9/12 )/8 # AlgTerm/9 s.new6/10 s.new7/11 e.new8/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[9] ) )
      continue;
    // closed e.new9 as range 12
    // closed e.new8 as range 14
    do {
      // </0 & PrintMatchADTSave/4 (/7 ' '/20 ' '/21 )/8 # AlgTerm/9 s.Offset/10 s.InnerNum/11 e.Name/18 >/1
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = context[15];
      context[20] = refalrts::char_left( ' ', context[16], context[17] );
      if( ! context[20] )
        continue;
      context[21] = refalrts::char_left( ' ', context[16], context[17] );
      if( ! context[21] )
        continue;
      if( ! refalrts::empty_seq( context[16], context[17] ) )
        continue;
      // closed e.Name as range 18
      //DEBUG: s.Offset: 10
      //DEBUG: s.InnerNum: 11
      //DEBUG: e.Name: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/22"  "/23 </25 & ContextItem/26 </27 & Add/28 s.InnerNum/11/29 2/30 >/31 >/32" = refalrts::adt_term(context["/33 </35 & Symb/36 Tile{ AsIs: s.InnerNum/11 } >/37"], context["/38 </40 & Symb/41 </42 & Add/43 1/44 s.InnerNum/11/45 >/46 >/47"], functions[efunc_"/48 </50 & CName/51 Tile{ AsIs: e.Name/18 } >/52"], context["/53 </55 & Symb/56 Tile{ AsIs: s.Offset/10 } >/57"])"/58 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/20 AsIs: ' '/21 HalfReuse: 'i'/8 HalfReuse: 'f'/9 }"( ! "/60 </62 & ContextItem/63 </64 & Add/65 s.InnerNum/11/66 2/67 >/68 >/69" )"/70 )/72 (/73"    return refalrts::cRecognitionImpossible;"/74 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[22]);
      refalrts::alloc_chars(vm, context[23], context[24], "  ", 2);
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_ContextItem]);
      refalrts::alloc_open_call(vm, context[27]);
      refalrts::alloc_name(vm, context[28], functions[efunc_Add]);
      refalrts::copy_stvar(vm, context[29], context[11]);
      refalrts::alloc_number(vm, context[30], 2UL);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_chars(vm, context[33], context[34], " = refalrts::adt_term(context[", 30);
      refalrts::alloc_open_call(vm, context[35]);
      refalrts::alloc_name(vm, context[36], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::alloc_chars(vm, context[38], context[39], "], context[", 11);
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_name(vm, context[43], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[44], 1UL);
      refalrts::copy_stvar(vm, context[45], context[11]);
      refalrts::alloc_close_call(vm, context[46]);
      refalrts::alloc_close_call(vm, context[47]);
      refalrts::alloc_chars(vm, context[48], context[49], "], functions[efunc_", 19);
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_CName]);
      refalrts::alloc_close_call(vm, context[52]);
      refalrts::alloc_chars(vm, context[53], context[54], "], context[", 11);
      refalrts::alloc_open_call(vm, context[55]);
      refalrts::alloc_name(vm, context[56], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[57]);
      refalrts::alloc_chars(vm, context[58], context[59], "])", 2);
      refalrts::alloc_chars(vm, context[60], context[61], "( ! ", 4);
      refalrts::alloc_open_call(vm, context[62]);
      refalrts::alloc_name(vm, context[63], functions[efunc_ContextItem]);
      refalrts::alloc_open_call(vm, context[64]);
      refalrts::alloc_name(vm, context[65], functions[efunc_Add]);
      refalrts::copy_stvar(vm, context[66], context[11]);
      refalrts::alloc_number(vm, context[67], 2UL);
      refalrts::alloc_close_call(vm, context[68]);
      refalrts::alloc_close_call(vm, context[69]);
      refalrts::alloc_chars(vm, context[70], context[71], " )", 2);
      refalrts::alloc_close_bracket(vm, context[72]);
      refalrts::alloc_open_bracket(vm, context[73]);
      refalrts::alloc_chars(vm, context[74], context[75], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::reinit_char(context[0], ';');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], 'i');
      refalrts::reinit_char(context[9], 'f');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[73], context[1] );
      refalrts::link_brackets( context[7], context[72] );
      refalrts::push_stack( vm, context[69] );
      refalrts::push_stack( vm, context[62] );
      refalrts::push_stack( vm, context[68] );
      refalrts::push_stack( vm, context[64] );
      refalrts::link_brackets( context[22], context[4] );
      refalrts::push_stack( vm, context[57] );
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[27] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[60], context[75] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[57], context[59] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[52], context[56] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[37], context[51] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[22], context[36] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatchADTSave/4 (/7 e.Indent/16 )/8 # AlgTerm/9 s.Offset/10 s.InnerNum/11 e.Name/18 >/1
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    context[19] = context[15];
    // closed e.Indent as range 16
    // closed e.Name as range 18
    //DEBUG: s.Offset: 10
    //DEBUG: s.InnerNum: 11
    //DEBUG: e.Indent: 16
    //DEBUG: e.Name: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/20 e.Indent/16/21 </23 & ContextItem/24 </25 & Add/26 s.InnerNum/11/27 2/28 >/29 >/30" = refalrts::adt_term(context["/31 </33 & Symb/34 Tile{ AsIs: s.InnerNum/11 } >/35"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.InnerNum/11/43 >/44 >/45"], functions[efunc_"/46 </48 & CName/49 Tile{ AsIs: e.Name/18 } >/50"], context["/51 </53 & Symb/54 Tile{ AsIs: s.Offset/10 } >/55"])"/56 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'i'/8 HalfReuse: 'f'/9 }"( ! "/58 </60 & ContextItem/61 </62 & Add/63 s.InnerNum/11/64 2/65 >/66 >/67" )"/68 )/70 (/71 e.Indent/16/72"  continue;"/74 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::copy_evar(vm, context[21], context[22], context[16], context[17]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_ContextItem]);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_Add]);
    refalrts::copy_stvar(vm, context[27], context[11]);
    refalrts::alloc_number(vm, context[28], 2UL);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_call(vm, context[30]);
    refalrts::alloc_chars(vm, context[31], context[32], " = refalrts::adt_term(context[", 30);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[42], 1UL);
    refalrts::copy_stvar(vm, context[43], context[11]);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::alloc_chars(vm, context[46], context[47], "], functions[efunc_", 19);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_name(vm, context[49], functions[efunc_CName]);
    refalrts::alloc_close_call(vm, context[50]);
    refalrts::alloc_chars(vm, context[51], context[52], "], context[", 11);
    refalrts::alloc_open_call(vm, context[53]);
    refalrts::alloc_name(vm, context[54], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[55]);
    refalrts::alloc_chars(vm, context[56], context[57], "])", 2);
    refalrts::alloc_chars(vm, context[58], context[59], "( ! ", 4);
    refalrts::alloc_open_call(vm, context[60]);
    refalrts::alloc_name(vm, context[61], functions[efunc_ContextItem]);
    refalrts::alloc_open_call(vm, context[62]);
    refalrts::alloc_name(vm, context[63], functions[efunc_Add]);
    refalrts::copy_stvar(vm, context[64], context[11]);
    refalrts::alloc_number(vm, context[65], 2UL);
    refalrts::alloc_close_call(vm, context[66]);
    refalrts::alloc_close_call(vm, context[67]);
    refalrts::alloc_chars(vm, context[68], context[69], " )", 2);
    refalrts::alloc_close_bracket(vm, context[70]);
    refalrts::alloc_open_bracket(vm, context[71]);
    refalrts::copy_evar(vm, context[72], context[73], context[16], context[17]);
    refalrts::alloc_chars(vm, context[74], context[75], "  continue;", 11);
    refalrts::reinit_char(context[0], ';');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::reinit_char(context[9], 'f');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[71], context[1] );
    refalrts::link_brackets( context[7], context[70] );
    refalrts::push_stack( vm, context[67] );
    refalrts::push_stack( vm, context[60] );
    refalrts::push_stack( vm, context[66] );
    refalrts::push_stack( vm, context[62] );
    refalrts::link_brackets( context[20], context[4] );
    refalrts::push_stack( vm, context[55] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[50] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[30] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[58], context[75] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[55], context[57] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[50], context[54] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[35], context[49] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[20], context[34] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintMatchADTSave/4 (/7 e.Indent/5 )/8 s.Direction/9 s.BracketNumber/10 s.InnerNum/11 e.Name/2 >/1
  // closed e.Indent as range 5
  // closed e.Name as range 2
  //DEBUG: s.Direction: 9
  //DEBUG: s.BracketNumber: 10
  //DEBUG: s.InnerNum: 11
  //DEBUG: e.Indent: 5
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave/4 AsIs: (/7 AsIs: e.Indent/5 AsIs: )/8 } </12 & Add/13 2/14 s.InnerNum/11/15 >/16 Tile{ AsIs: s.Direction/9 AsIs: s.BracketNumber/10 } (/17"adt"/18 )/20"context["/21 </23 & Symb/24 Tile{ AsIs: s.InnerNum/11 } >/25"], context["/26 </28 & Symb/29 </30 & Add/31 1/32 s.InnerNum/11/33 >/34 >/35"], functions[efunc_"/36 </38 & CName/39 Tile{ AsIs: e.Name/2 } >/40 ']'/41 >/42 (/43 e.Indent/5/44"refalrts::adt_pointers("/46 </48 & ContextItem/49 </50 & Add/51 s.InnerNum/11/52 2/53 >/54 >/55", "/56 </58 & ContextItem/59 </60 & Add/61 s.InnerNum/11/62 3/63 >/64 >/65", "/66 </68 & ContextItem/69 </70 & Add/71 s.InnerNum/11/72 4/73 >/74 >/75");"/76 Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_open_call(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[14], 2UL);
  refalrts::copy_stvar(vm, context[15], context[11]);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_chars(vm, context[18], context[19], "adt", 3);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::alloc_chars(vm, context[21], context[22], "context[", 8);
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_Symb]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::alloc_chars(vm, context[26], context[27], "], context[", 11);
  refalrts::alloc_open_call(vm, context[28]);
  refalrts::alloc_name(vm, context[29], functions[efunc_Symb]);
  refalrts::alloc_open_call(vm, context[30]);
  refalrts::alloc_name(vm, context[31], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[32], 1UL);
  refalrts::copy_stvar(vm, context[33], context[11]);
  refalrts::alloc_close_call(vm, context[34]);
  refalrts::alloc_close_call(vm, context[35]);
  refalrts::alloc_chars(vm, context[36], context[37], "], functions[efunc_", 19);
  refalrts::alloc_open_call(vm, context[38]);
  refalrts::alloc_name(vm, context[39], functions[efunc_CName]);
  refalrts::alloc_close_call(vm, context[40]);
  refalrts::alloc_char(vm, context[41], ']');
  refalrts::alloc_close_call(vm, context[42]);
  refalrts::alloc_open_bracket(vm, context[43]);
  refalrts::copy_evar(vm, context[44], context[45], context[5], context[6]);
  refalrts::alloc_chars(vm, context[46], context[47], "refalrts::adt_pointers(", 23);
  refalrts::alloc_open_call(vm, context[48]);
  refalrts::alloc_name(vm, context[49], functions[efunc_ContextItem]);
  refalrts::alloc_open_call(vm, context[50]);
  refalrts::alloc_name(vm, context[51], functions[efunc_Add]);
  refalrts::copy_stvar(vm, context[52], context[11]);
  refalrts::alloc_number(vm, context[53], 2UL);
  refalrts::alloc_close_call(vm, context[54]);
  refalrts::alloc_close_call(vm, context[55]);
  refalrts::alloc_chars(vm, context[56], context[57], ", ", 2);
  refalrts::alloc_open_call(vm, context[58]);
  refalrts::alloc_name(vm, context[59], functions[efunc_ContextItem]);
  refalrts::alloc_open_call(vm, context[60]);
  refalrts::alloc_name(vm, context[61], functions[efunc_Add]);
  refalrts::copy_stvar(vm, context[62], context[11]);
  refalrts::alloc_number(vm, context[63], 3UL);
  refalrts::alloc_close_call(vm, context[64]);
  refalrts::alloc_close_call(vm, context[65]);
  refalrts::alloc_chars(vm, context[66], context[67], ", ", 2);
  refalrts::alloc_open_call(vm, context[68]);
  refalrts::alloc_name(vm, context[69], functions[efunc_ContextItem]);
  refalrts::alloc_open_call(vm, context[70]);
  refalrts::alloc_name(vm, context[71], functions[efunc_Add]);
  refalrts::copy_stvar(vm, context[72], context[11]);
  refalrts::alloc_number(vm, context[73], 4UL);
  refalrts::alloc_close_call(vm, context[74]);
  refalrts::alloc_close_call(vm, context[75]);
  refalrts::alloc_chars(vm, context[76], context[77], ");", 2);
  refalrts::update_name(context[4], functions[efunc_PrintMatchSave]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[43], context[1] );
  refalrts::push_stack( vm, context[75] );
  refalrts::push_stack( vm, context[68] );
  refalrts::push_stack( vm, context[74] );
  refalrts::push_stack( vm, context[70] );
  refalrts::push_stack( vm, context[65] );
  refalrts::push_stack( vm, context[58] );
  refalrts::push_stack( vm, context[64] );
  refalrts::push_stack( vm, context[60] );
  refalrts::push_stack( vm, context[55] );
  refalrts::push_stack( vm, context[48] );
  refalrts::push_stack( vm, context[54] );
  refalrts::push_stack( vm, context[50] );
  refalrts::push_stack( vm, context[42] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[40] );
  refalrts::push_stack( vm, context[38] );
  refalrts::push_stack( vm, context[35] );
  refalrts::push_stack( vm, context[28] );
  refalrts::push_stack( vm, context[34] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[17], context[20] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[40], context[77] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[25], context[39] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[17], context[24] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[12], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintMatchADTSave("PrintMatchADTSave", COOKIE1_, COOKIE2_, func_PrintMatchADTSave);


static refalrts::FnResult func_BreakerFromIndent(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & BreakerFromIndent/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & BreakerFromIndent/4 ' '/7 ' '/8 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = refalrts::char_left( ' ', context[5], context[6] );
    if( ! context[7] )
      continue;
    context[8] = refalrts::char_left( ' ', context[5], context[6] );
    if( ! context[8] )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'e'/4 Reuse: 't'/7 Reuse: 'u'/8 HalfReuse: 'r'/1 }"n refalrts::cRecognitionImpossible;"/9 Tile{ ]] }
    refalrts::alloc_chars(vm, context[9], context[10], "n refalrts::cRecognitionImpossible;", 35);
    refalrts::reinit_char(context[0], 'r');
    refalrts::reinit_char(context[4], 'e');
    refalrts::update_char(context[7], 't');
    refalrts::update_char(context[8], 'u');
    refalrts::reinit_char(context[1], 'r');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & BreakerFromIndent/4 e.OtherIndent/2 >/1
  // closed e.OtherIndent as range 2
  //DEBUG: e.OtherIndent: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} e.OtherIndent/2 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: 'c'/0 HalfReuse: 'o'/4 }"ntinue"/5 Tile{ HalfReuse: ';'/1 ]] }
  refalrts::alloc_chars(vm, context[5], context[6], "ntinue", 6);
  refalrts::reinit_char(context[0], 'c');
  refalrts::reinit_char(context[4], 'o');
  refalrts::reinit_char(context[1], ';');
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_BreakerFromIndent("BreakerFromIndent", COOKIE1_, COOKIE2_, func_BreakerFromIndent);


static refalrts::FnResult func_PrintMatchEmpty(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & PrintMatchEmpty/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrintMatchEmpty/4 (/7 e.new1/5 )/8 s.new2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & PrintMatchEmpty/4 (/7 ' '/12 ' '/13 )/8 s.BracketNumber/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = refalrts::char_left( ' ', context[10], context[11] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_left( ' ', context[10], context[11] );
    if( ! context[13] )
      continue;
    if( ! refalrts::empty_seq( context[10], context[11] ) )
      continue;
    //DEBUG: s.BracketNumber: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/14"  if( ! refalrts::empty_seq( cont"/15 Tile{ HalfReuse: 'e'/0 HalfReuse: 'x'/4 HalfReuse: 't'/7 Reuse: '['/12 HalfReuse: </13 HalfReuse: & Symb/8 AsIs: s.BracketNumber/9 AsIs: >/1 }"], context["/17 </19 & Symb/20 </21 & Add/22 1/23 s.BracketNumber/9/24 >/25 >/26"] ) )"/27 )/29 (/30"    return refalrts::cRecognitionImpossible;"/31 )/33 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[14]);
    refalrts::alloc_chars(vm, context[15], context[16], "  if( ! refalrts::empty_seq( cont", 33);
    refalrts::alloc_chars(vm, context[17], context[18], "], context[", 11);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[23], 1UL);
    refalrts::copy_stvar(vm, context[24], context[9]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::alloc_chars(vm, context[27], context[28], "] ) )", 5);
    refalrts::alloc_close_bracket(vm, context[29]);
    refalrts::alloc_open_bracket(vm, context[30]);
    refalrts::alloc_chars(vm, context[31], context[32], "    return refalrts::cRecognitionImpossible;", 44);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::reinit_char(context[0], 'e');
    refalrts::reinit_char(context[4], 'x');
    refalrts::reinit_char(context[7], 't');
    refalrts::update_char(context[12], '[');
    refalrts::reinit_open_call(context[13]);
    refalrts::reinit_name(context[8], functions[efunc_Symb]);
    refalrts::link_brackets( context[30], context[33] );
    refalrts::link_brackets( context[14], context[29] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[33] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[14], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintMatchEmpty/4 (/7 e.Indent/5 )/8 s.BracketNumber/9 >/1
  // closed e.Indent as range 5
  //DEBUG: s.BracketNumber: 9
  //DEBUG: e.Indent: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/10 e.Indent/5/11"if( ! refalrts::empty_seq( context["/13 </15 & Symb/16 Tile{ AsIs: s.BracketNumber/9 AsIs: >/1 }"], context["/17 </19 & Symb/20 </21 & Add/22 1/23 s.BracketNumber/9/24 >/25 >/26"] ) "/27 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent/5 HalfReuse: ' '/8 }" continue;"/29 )/31 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::copy_evar(vm, context[11], context[12], context[5], context[6]);
  refalrts::alloc_chars(vm, context[13], context[14], "if( ! refalrts::empty_seq( context[", 35);
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_Symb]);
  refalrts::alloc_chars(vm, context[17], context[18], "], context[", 11);
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_name(vm, context[20], functions[efunc_Symb]);
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[23], 1UL);
  refalrts::copy_stvar(vm, context[24], context[9]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::alloc_close_call(vm, context[26]);
  refalrts::alloc_chars(vm, context[27], context[28], "] ) ", 4);
  refalrts::alloc_chars(vm, context[29], context[30], " continue;", 10);
  refalrts::alloc_close_bracket(vm, context[31]);
  refalrts::reinit_char(context[0], ')');
  refalrts::reinit_close_bracket(context[4]);
  refalrts::reinit_char(context[8], ' ');
  refalrts::link_brackets( context[7], context[31] );
  refalrts::link_brackets( context[10], context[4] );
  refalrts::push_stack( vm, context[26] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[15] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[29], context[31] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[17], context[28] );
  res = refalrts::splice_evar( res, context[9], context[1] );
  res = refalrts::splice_evar( res, context[10], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintMatchEmpty("PrintMatchEmpty", COOKIE1_, COOKIE2_, func_PrintMatchEmpty);


static refalrts::FnResult func_StrFromDirection(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & StrFromDirection/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & StrFromDirection/4 s.new1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & StrFromDirection/4 # AlgLeft/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'l'/0 HalfReuse: 'e'/4 HalfReuse: 'f'/5 HalfReuse: 't'/1 ]] }
    refalrts::reinit_char(context[0], 'l');
    refalrts::reinit_char(context[4], 'e');
    refalrts::reinit_char(context[5], 'f');
    refalrts::reinit_char(context[1], 't');
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & StrFromDirection/4 # AlgRight/5 >/1
  if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'i'/4 HalfReuse: 'g'/5 HalfReuse: 'h'/1 } 't'/6 Tile{ ]] }
  refalrts::alloc_char(vm, context[6], 't');
  refalrts::reinit_char(context[0], 'r');
  refalrts::reinit_char(context[4], 'i');
  refalrts::reinit_char(context[5], 'g');
  refalrts::reinit_char(context[1], 'h');
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_StrFromDirection("StrFromDirection", COOKIE1_, COOKIE2_, func_StrFromDirection);


static refalrts::FnResult func_VarMatchFunction(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & VarMatchFunction/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & VarMatchFunction/4 s.new1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & VarMatchFunction/4 's'/5 >/1
    if( ! refalrts::char_term( 's', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 's'/0 HalfReuse: 'v'/4 Reuse: 'a'/5 HalfReuse: 'r'/1 ]] }
    refalrts::reinit_char(context[0], 's');
    refalrts::reinit_char(context[4], 'v');
    refalrts::update_char(context[5], 'a');
    refalrts::reinit_char(context[1], 'r');
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & VarMatchFunction/4 't'/5 >/1
  if( ! refalrts::char_term( 't', context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: 't'/0 HalfReuse: 'v'/4 Reuse: 'a'/5 HalfReuse: 'r'/1 ]] }
  refalrts::reinit_char(context[0], 't');
  refalrts::reinit_char(context[4], 'v');
  refalrts::update_char(context[5], 'a');
  refalrts::reinit_char(context[1], 'r');
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_VarMatchFunction("VarMatchFunction", COOKIE1_, COOKIE2_, func_VarMatchFunction);


static refalrts::FnResult func_PrintMatchSTVar(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & PrintMatchSTVar/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrintMatchSTVar/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 s.new4/11 s.new5/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & PrintMatchSTVar/4 (/7 e.Indent/13 )/8 s.Direction/9 s.BracketNumber/10 's'/11 s.VarNumber/12 >/1
    context[13] = context[5];
    context[14] = context[6];
    if( ! refalrts::char_term( 's', context[11] ) )
      continue;
    // closed e.Indent as range 13
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber: 10
    //DEBUG: s.VarNumber: 12
    //DEBUG: e.Indent: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch@7/4 AsIs: (/7 AsIs: e.Indent/13 AsIs: )/8 AsIs: s.Direction/9 AsIs: s.BracketNumber/10 HalfReuse: </11 } & Symb/15 Tile{ AsIs: s.VarNumber/12 AsIs: >/1 } >/16 Tile{ ]] }
    refalrts::alloc_name(vm, context[15], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z7]);
    refalrts::reinit_open_call(context[11]);
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[11] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    res = refalrts::splice_elem( res, context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatchSTVar/4 (/7 e.Indent/13 )/8 s.Direction/9 s.BracketNumber/10 't'/11 s.VarNumber/12 >/1
    context[13] = context[5];
    context[14] = context[6];
    if( ! refalrts::char_term( 't', context[11] ) )
      continue;
    // closed e.Indent as range 13
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber: 10
    //DEBUG: s.VarNumber: 12
    //DEBUG: e.Indent: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch@8/4 AsIs: (/7 AsIs: e.Indent/13 AsIs: )/8 AsIs: s.Direction/9 AsIs: s.BracketNumber/10 HalfReuse: </11 } & Symb/15 Tile{ AsIs: s.VarNumber/12 AsIs: >/1 } >/16 Tile{ ]] }
    refalrts::alloc_name(vm, context[15], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z8]);
    refalrts::reinit_open_call(context[11]);
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[11] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    res = refalrts::splice_elem( res, context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintMatchSTVar/4 (/7 e.Indent/5 )/8 s.Direction/9 s.BracketNumber/10 s.Mode/11 s.VarNumber/12 >/1
  // closed e.Indent as range 5
  //DEBUG: s.Direction: 9
  //DEBUG: s.BracketNumber: 10
  //DEBUG: s.Mode: 11
  //DEBUG: s.VarNumber: 12
  //DEBUG: e.Indent: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch@9/4 AsIs: (/7 AsIs: e.Indent/5 AsIs: )/8 AsIs: s.Direction/9 AsIs: s.BracketNumber/10 } (/13 </14 & VarMatchFunction*2/15 Tile{ AsIs: s.Mode/11 } >/16 )/17 </18 & Symb/19 Tile{ AsIs: s.VarNumber/12 AsIs: >/1 } >/20 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_VarMatchFunction_D2]);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::alloc_open_call(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_Symb]);
  refalrts::alloc_close_call(vm, context[20]);
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z9]);
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[18] );
  refalrts::link_brackets( context[13], context[17] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[12], context[1] );
  res = refalrts::splice_evar( res, context[16], context[19] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[13], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintMatchSTVar("PrintMatchSTVar", COOKIE1_, COOKIE2_, func_PrintMatchSTVar);


static refalrts::FnResult func_PrintMatchSTVarSave(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & PrintMatchSTVarSave/4 (/7 e.Indent/5 )/8 s.Direction/9 s.BracketNumber/10 't'/11 s.VarNumber/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = refalrts::char_left( 't', context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Indent: 5
  //DEBUG: s.Direction: 9
  //DEBUG: s.BracketNumber: 10
  //DEBUG: s.VarNumber: 12

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave/4 AsIs: (/7 AsIs: e.Indent/5 AsIs: )/8 } </13 & Add/14 Tile{ HalfReuse: 1/11 AsIs: s.VarNumber/12 AsIs: >/1 } Tile{ AsIs: s.Direction/9 AsIs: s.BracketNumber/10 } (/15"tvar"/16 )/18"context["/19 </21 & Symb/22 s.VarNumber/12/23 >/24 ']'/25 >/26 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_Add]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_chars(vm, context[16], context[17], "tvar", 4);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_chars(vm, context[19], context[20], "context[", 8);
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_Symb]);
  refalrts::copy_stvar(vm, context[23], context[12]);
  refalrts::alloc_close_call(vm, context[24]);
  refalrts::alloc_char(vm, context[25], ']');
  refalrts::alloc_close_call(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_PrintMatchSave]);
  refalrts::reinit_number(context[11], 1UL);
  refalrts::push_stack( vm, context[26] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[15], context[18] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[15], context[26] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[11], context[1] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintMatchSTVarSave("PrintMatchSTVarSave", COOKIE1_, COOKIE2_, func_PrintMatchSTVarSave);


static refalrts::FnResult func_PrintMatchRepeated(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & PrintMatchRepeated/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrintMatchRepeated/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 s.new4/11 s.new5/12 s.new6/13 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & PrintMatchRepeated/4 (/7 e.Indent/14 )/8 s.Direction/9 s.BracketNumber/10 'e'/11 s.VarNumber/12 s.SampleNumber/13 >/1
    context[14] = context[5];
    context[15] = context[6];
    if( ! refalrts::char_term( 'e', context[11] ) )
      continue;
    // closed e.Indent as range 14
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber: 10
    //DEBUG: s.VarNumber: 12
    //DEBUG: s.SampleNumber: 13
    //DEBUG: e.Indent: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch-VM@1/4 AsIs: (/7 AsIs: e.Indent/14 AsIs: )/8 AsIs: s.Direction/9 AsIs: s.BracketNumber/10 HalfReuse: (/11 } </16 & Symb/17 Tile{ AsIs: s.VarNumber/12 } >/18 )/19 (/20 </21 & Symb/22 </23 & Add/24 1/25 s.VarNumber/12/26 >/27 >/28 )/29 (/30 </31 & Symb/32 Tile{ AsIs: s.SampleNumber/13 AsIs: >/1 } )/33 </34 & Symb/35 </36 & Add/37 1/38 s.SampleNumber/13/39 >/40 >/41 >/42 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::alloc_close_bracket(vm, context[19]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[25], 1UL);
    refalrts::copy_stvar(vm, context[26], context[12]);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_close_bracket(vm, context[29]);
    refalrts::alloc_open_bracket(vm, context[30]);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[38], 1UL);
    refalrts::copy_stvar(vm, context[39], context[13]);
    refalrts::alloc_close_call(vm, context[40]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::alloc_close_call(vm, context[42]);
    refalrts::update_name(context[4], functions[efunc_gen_PrintMatchm_VM_Z1]);
    refalrts::reinit_open_bracket(context[11]);
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[36] );
    refalrts::link_brackets( context[30], context[33] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[20], context[29] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[11], context[19] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[16] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[33], context[42] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_evar( res, context[18], context[32] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatchRepeated/4 (/7 e.new11/14 )/8 # AlgTerm/9 s.new7/10 s.new8/11 s.new9/12 s.new10/13 >/1
    context[14] = context[5];
    context[15] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[9] ) )
      continue;
    // closed e.new11 as range 14
    do {
      // </0 & PrintMatchRepeated/4 (/7 ' '/18 ' '/19 )/8 # AlgTerm/9 s.BracketNumber/10 s.Mode/11 s.VarNumber/12 s.SampleNumber/13 >/1
      context[16] = context[14];
      context[17] = context[15];
      context[18] = refalrts::char_left( ' ', context[16], context[17] );
      if( ! context[18] )
        continue;
      context[19] = refalrts::char_left( ' ', context[16], context[17] );
      if( ! context[19] )
        continue;
      if( ! refalrts::empty_seq( context[16], context[17] ) )
        continue;
      //DEBUG: s.BracketNumber: 10
      //DEBUG: s.Mode: 11
      //DEBUG: s.VarNumber: 12
      //DEBUG: s.SampleNumber: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.BracketNumber/10 s.Mode/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/20"  if( ! refalrts::repeated_stvar_term( vm, context["/21 </23 & Symb/24 Tile{ AsIs: s.VarNumber/12 } >/25"], context["/26 </28 & Symb/29 Tile{ AsIs: s.SampleNumber/13 AsIs: >/1 }"] ) "/30 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/18 AsIs: ' '/19 HalfReuse: ' '/8 HalfReuse: ' '/9 }"return refalrts::cRecognitionImpossible;"/32 )/34 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_chars(vm, context[21], context[22], "  if( ! refalrts::repeated_stvar_term( vm, context[", 51);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_chars(vm, context[26], context[27], "], context[", 11);
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[30], context[31], "] ) ", 4);
      refalrts::alloc_chars(vm, context[32], context[33], "return refalrts::cRecognitionImpossible;", 40);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_char(context[0], ')');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], ' ');
      refalrts::reinit_char(context[9], ' ');
      refalrts::link_brackets( context[7], context[34] );
      refalrts::link_brackets( context[20], context[4] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[25], context[29] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[20], context[24] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatchRepeated/4 (/7 e.Indent/16 )/8 # AlgTerm/9 s.BracketNumber/10 s.Mode/11 s.VarNumber/12 s.SampleNumber/13 >/1
    context[16] = context[14];
    context[17] = context[15];
    // closed e.Indent as range 16
    //DEBUG: s.BracketNumber: 10
    //DEBUG: s.Mode: 11
    //DEBUG: s.VarNumber: 12
    //DEBUG: s.SampleNumber: 13
    //DEBUG: e.Indent: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.BracketNumber/10 s.Mode/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/18 e.Indent/16/19"if( ! refalrts::repeated_stvar_term( vm, context["/21 </23 & Symb/24 Tile{ AsIs: s.VarNumber/12 } >/25"], context["/26 </28 & Symb/29 Tile{ AsIs: s.SampleNumber/13 AsIs: >/1 }"] ) "/30 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent/16 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/32 )/34 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[18]);
    refalrts::copy_evar(vm, context[19], context[20], context[16], context[17]);
    refalrts::alloc_chars(vm, context[21], context[22], "if( ! refalrts::repeated_stvar_term( vm, context[", 49);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_chars(vm, context[26], context[27], "], context[", 11);
    refalrts::alloc_open_call(vm, context[28]);
    refalrts::alloc_name(vm, context[29], functions[efunc_Symb]);
    refalrts::alloc_chars(vm, context[30], context[31], "] ) ", 4);
    refalrts::alloc_chars(vm, context[32], context[33], "continue;", 9);
    refalrts::alloc_close_bracket(vm, context[34]);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::link_brackets( context[7], context[34] );
    refalrts::link_brackets( context[18], context[4] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[32], context[34] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_evar( res, context[25], context[29] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[18], context[24] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintMatchRepeated/4 (/7 e.Indent/5 )/8 s.Direction/9 s.BracketNumber/10 s.Mode/11 s.VarNumber/12 s.SampleNumber/13 >/1
  // closed e.Indent as range 5
  //DEBUG: s.Direction: 9
  //DEBUG: s.BracketNumber: 10
  //DEBUG: s.Mode: 11
  //DEBUG: s.VarNumber: 12
  //DEBUG: s.SampleNumber: 13
  //DEBUG: e.Indent: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Mode/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch-VM@2/4 AsIs: (/7 AsIs: e.Indent/5 AsIs: )/8 AsIs: s.Direction/9 AsIs: s.BracketNumber/10 } (/14 </15 & Symb/16 Tile{ AsIs: s.VarNumber/12 } >/17 )/18 </19 & Symb/20 Tile{ AsIs: s.SampleNumber/13 AsIs: >/1 } >/21 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_Symb]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_name(vm, context[20], functions[efunc_Symb]);
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatchm_VM_Z2]);
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[19] );
  refalrts::link_brackets( context[14], context[18] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[13], context[1] );
  res = refalrts::splice_evar( res, context[17], context[20] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[14], context[16] );
  refalrts::splice_to_freelist_open( vm, context[10], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintMatchRepeated("PrintMatchRepeated", COOKIE1_, COOKIE2_, func_PrintMatchRepeated);


static refalrts::FnResult func_PrintMatchRepeatedTVarSave(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & PrintMatchRepeatedTVarSave/4 (/7 e.Indent/5 )/8 s.Direction/9 s.BracketNumber/10 s.VarNumber/11 s.SampleNumber/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Indent as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Indent: 5
  //DEBUG: s.Direction: 9
  //DEBUG: s.BracketNumber: 10
  //DEBUG: s.VarNumber: 11
  //DEBUG: s.SampleNumber: 12

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave-VM/4 AsIs: (/7 AsIs: e.Indent/5 AsIs: )/8 } </13 & Add/14 1/15 s.VarNumber/11/16 >/17 Tile{ AsIs: s.Direction/9 AsIs: s.BracketNumber/10 } (/18"repeated_stvar"/19 )/21"context["/22 </24 & Symb/25 Tile{ AsIs: s.VarNumber/11 } >/26"], context["/27 </29 & Symb/30 Tile{ AsIs: s.SampleNumber/12 AsIs: >/1 } ']'/31 >/32 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[15], 1UL);
  refalrts::copy_stvar(vm, context[16], context[11]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_chars(vm, context[19], context[20], "repeated_stvar", 14);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_chars(vm, context[22], context[23], "context[", 8);
  refalrts::alloc_open_call(vm, context[24]);
  refalrts::alloc_name(vm, context[25], functions[efunc_Symb]);
  refalrts::alloc_close_call(vm, context[26]);
  refalrts::alloc_chars(vm, context[27], context[28], "], context[", 11);
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_Symb]);
  refalrts::alloc_char(vm, context[31], ']');
  refalrts::alloc_close_call(vm, context[32]);
  refalrts::update_name(context[4], functions[efunc_PrintMatchSavem_VM]);
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[29] );
  refalrts::push_stack( vm, context[26] );
  refalrts::push_stack( vm, context[24] );
  refalrts::link_brackets( context[18], context[21] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[12], context[1] );
  res = refalrts::splice_evar( res, context[26], context[30] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[18], context[25] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[13], context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintMatchRepeatedTVarSave("PrintMatchRepeatedTVarSave", COOKIE1_, COOKIE2_, func_PrintMatchRepeatedTVarSave);


static refalrts::FnResult func_PrintMatch(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  // </0 & PrintMatch/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrintMatch/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 (/13 e.new4/11 )/14 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new4 as range 11
  // closed e.new5 as range 2
  do {
    // </0 & PrintMatch/4 (/7 e.new8/15 )/8 # AlgTerm/9 s.new6/10 (/13 e.new9/17 )/14 e.new7/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[9] ) )
      continue;
    // closed e.new8 as range 15
    // closed e.new9 as range 17
    // closed e.new7 as range 19
    do {
      // </0 & PrintMatch/4 (/7 ' '/27 ' '/28 )/8 # AlgTerm/9 s.Offset/10 (/13 e.Function/23 )/14 e.TextRep/25 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[27] )
        continue;
      context[28] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[28] )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.Function as range 23
      // closed e.TextRep as range 25
      //DEBUG: s.Offset: 10
      //DEBUG: e.Function: 23
      //DEBUG: e.TextRep: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/29"  if( ! refalrts::"/30 Tile{ AsIs: e.Function/23 }"_term("/32 Tile{ HalfReuse: ' '/14 AsIs: e.TextRep/25 HalfReuse: ','/1 }" con"/34 Tile{ HalfReuse: 't'/0 HalfReuse: 'e'/4 HalfReuse: 'x'/7 Reuse: 't'/27 Reuse: '['/28 HalfReuse: </8 HalfReuse: & Symb/9 AsIs: s.Offset/10 HalfReuse: >/13 }"] ) )"/36 )/38 (/39"    return refalrts::cRecognitionImpossible;"/40 )/42 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_chars(vm, context[30], context[31], "  if( ! refalrts::", 18);
      refalrts::alloc_chars(vm, context[32], context[33], "_term(", 6);
      refalrts::alloc_chars(vm, context[34], context[35], " con", 4);
      refalrts::alloc_chars(vm, context[36], context[37], "] ) )", 5);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_chars(vm, context[40], context[41], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::reinit_char(context[14], ' ');
      refalrts::reinit_char(context[1], ',');
      refalrts::reinit_char(context[0], 't');
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_char(context[7], 'x');
      refalrts::update_char(context[27], 't');
      refalrts::update_char(context[28], '[');
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[9], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[13]);
      refalrts::link_brackets( context[39], context[42] );
      refalrts::link_brackets( context[29], context[38] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[36], context[42] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[14], context[1] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch/4 (/7 e.Indent/21 )/8 # AlgTerm/9 s.Offset/10 (/13 e.Function/23 )/14 e.TextRep/25 >/1
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    // closed e.Indent as range 21
    // closed e.Function as range 23
    // closed e.TextRep as range 25
    //DEBUG: s.Offset: 10
    //DEBUG: e.Indent: 21
    //DEBUG: e.Function: 23
    //DEBUG: e.TextRep: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/27 e.Indent/21/28"if( ! refalrts:"/30 Tile{ HalfReuse: ':'/13 AsIs: e.Function/23 HalfReuse: '_'/14 }"term( "/32 Tile{ AsIs: e.TextRep/25 }", context["/34 </36 & Symb/37 Tile{ AsIs: s.Offset/10 } >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent/21 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/41 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::copy_evar(vm, context[28], context[29], context[21], context[22]);
    refalrts::alloc_chars(vm, context[30], context[31], "if( ! refalrts:", 15);
    refalrts::alloc_chars(vm, context[32], context[33], "term( ", 6);
    refalrts::alloc_chars(vm, context[34], context[35], ", context[", 10);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
    refalrts::alloc_chars(vm, context[41], context[42], "continue;", 9);
    refalrts::reinit_char(context[13], ':');
    refalrts::reinit_char(context[14], '_');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[27], context[4] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[36] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[38], context[40] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[34], context[37] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[27], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch/4 (/7 e.new8/15 )/8 # AlgLeft/9 s.new6/10 (/13 e.new9/17 )/14 e.new7/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[9] ) )
      continue;
    // closed e.new8 as range 15
    // closed e.new9 as range 17
    // closed e.new7 as range 19
    do {
      // </0 & PrintMatch/4 (/7 ' '/27 ' '/28 )/8 # AlgLeft/9 s.BracketNumber/10 (/13 e.Function/23 )/14 e.TextRep/25 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[27] )
        continue;
      context[28] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[28] )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.Function as range 23
      // closed e.TextRep as range 25
      //DEBUG: s.BracketNumber: 10
      //DEBUG: e.Function: 23
      //DEBUG: e.TextRep: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/29"  if( ! refalrts::"/30 Tile{ AsIs: e.Function/23 }"_left("/32 Tile{ HalfReuse: ' '/14 AsIs: e.TextRep/25 HalfReuse: ','/1 }" con"/34 Tile{ HalfReuse: 't'/0 HalfReuse: 'e'/4 HalfReuse: 'x'/7 Reuse: 't'/27 Reuse: '['/28 HalfReuse: </8 HalfReuse: & Symb/9 AsIs: s.BracketNumber/10 HalfReuse: >/13 }"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.BracketNumber/10/43 >/44 >/45"] ) )"/46 )/48 (/49"    return refalrts::cRecognitionImpossible;"/50 )/52 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_chars(vm, context[30], context[31], "  if( ! refalrts::", 18);
      refalrts::alloc_chars(vm, context[32], context[33], "_left(", 6);
      refalrts::alloc_chars(vm, context[34], context[35], " con", 4);
      refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[42], 1UL);
      refalrts::copy_stvar(vm, context[43], context[10]);
      refalrts::alloc_close_call(vm, context[44]);
      refalrts::alloc_close_call(vm, context[45]);
      refalrts::alloc_chars(vm, context[46], context[47], "] ) )", 5);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::alloc_chars(vm, context[50], context[51], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::reinit_char(context[14], ' ');
      refalrts::reinit_char(context[1], ',');
      refalrts::reinit_char(context[0], 't');
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_char(context[7], 'x');
      refalrts::update_char(context[27], 't');
      refalrts::update_char(context[28], '[');
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[9], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[13]);
      refalrts::link_brackets( context[49], context[52] );
      refalrts::link_brackets( context[29], context[48] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[36], context[52] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[14], context[1] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch/4 (/7 e.Indent/21 )/8 # AlgLeft/9 s.BracketNumber/10 (/13 e.Function/23 )/14 e.TextRep/25 >/1
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    // closed e.Indent as range 21
    // closed e.Function as range 23
    // closed e.TextRep as range 25
    //DEBUG: s.BracketNumber: 10
    //DEBUG: e.Indent: 21
    //DEBUG: e.Function: 23
    //DEBUG: e.TextRep: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/27 e.Indent/21/28"if( ! refalrts:"/30 Tile{ HalfReuse: ':'/13 AsIs: e.Function/23 HalfReuse: '_'/14 }"left( "/32 Tile{ AsIs: e.TextRep/25 }", context["/34 </36 & Symb/37 Tile{ AsIs: s.BracketNumber/10 } >/38"], context["/39 </41 & Symb/42 </43 & Add/44 1/45 s.BracketNumber/10/46 >/47 >/48"] ) "/49 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent/21 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/51 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::copy_evar(vm, context[28], context[29], context[21], context[22]);
    refalrts::alloc_chars(vm, context[30], context[31], "if( ! refalrts:", 15);
    refalrts::alloc_chars(vm, context[32], context[33], "left( ", 6);
    refalrts::alloc_chars(vm, context[34], context[35], ", context[", 10);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "], context[", 11);
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_name(vm, context[42], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[43]);
    refalrts::alloc_name(vm, context[44], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[45], 1UL);
    refalrts::copy_stvar(vm, context[46], context[10]);
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::alloc_close_call(vm, context[48]);
    refalrts::alloc_chars(vm, context[49], context[50], "] ) ", 4);
    refalrts::alloc_chars(vm, context[51], context[52], "continue;", 9);
    refalrts::reinit_char(context[13], ':');
    refalrts::reinit_char(context[14], '_');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[27], context[4] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[36] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[38], context[50] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[34], context[37] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[27], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch/4 (/7 e.new8/15 )/8 # AlgRight/9 s.new6/10 (/13 e.new9/17 )/14 e.new7/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[9] ) )
      continue;
    // closed e.new8 as range 15
    // closed e.new9 as range 17
    // closed e.new7 as range 19
    do {
      // </0 & PrintMatch/4 (/7 ' '/27 ' '/28 )/8 # AlgRight/9 s.BracketNumber/10 (/13 e.Function/23 )/14 e.TextRep/25 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[27] )
        continue;
      context[28] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[28] )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.Function as range 23
      // closed e.TextRep as range 25
      //DEBUG: s.BracketNumber: 10
      //DEBUG: e.Function: 23
      //DEBUG: e.TextRep: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/29"  if( ! refalrts::"/30 Tile{ AsIs: e.Function/23 }"_right("/32 Tile{ HalfReuse: ' '/14 AsIs: e.TextRep/25 HalfReuse: ','/1 }" con"/34 Tile{ HalfReuse: 't'/0 HalfReuse: 'e'/4 HalfReuse: 'x'/7 Reuse: 't'/27 Reuse: '['/28 HalfReuse: </8 HalfReuse: & Symb/9 AsIs: s.BracketNumber/10 HalfReuse: >/13 }"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.BracketNumber/10/43 >/44 >/45"] ) )"/46 )/48 (/49"    return refalrts::cRecognitionImpossible;"/50 )/52 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_chars(vm, context[30], context[31], "  if( ! refalrts::", 18);
      refalrts::alloc_chars(vm, context[32], context[33], "_right(", 7);
      refalrts::alloc_chars(vm, context[34], context[35], " con", 4);
      refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[42], 1UL);
      refalrts::copy_stvar(vm, context[43], context[10]);
      refalrts::alloc_close_call(vm, context[44]);
      refalrts::alloc_close_call(vm, context[45]);
      refalrts::alloc_chars(vm, context[46], context[47], "] ) )", 5);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::alloc_chars(vm, context[50], context[51], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::reinit_char(context[14], ' ');
      refalrts::reinit_char(context[1], ',');
      refalrts::reinit_char(context[0], 't');
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_char(context[7], 'x');
      refalrts::update_char(context[27], 't');
      refalrts::update_char(context[28], '[');
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[9], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[13]);
      refalrts::link_brackets( context[49], context[52] );
      refalrts::link_brackets( context[29], context[48] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[36], context[52] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[14], context[1] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch/4 (/7 e.Indent/21 )/8 # AlgRight/9 s.BracketNumber/10 (/13 e.Function/23 )/14 e.TextRep/25 >/1
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    // closed e.Indent as range 21
    // closed e.Function as range 23
    // closed e.TextRep as range 25
    //DEBUG: s.BracketNumber: 10
    //DEBUG: e.Indent: 21
    //DEBUG: e.Function: 23
    //DEBUG: e.TextRep: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/27 e.Indent/21/28"if( ! refalrts:"/30 Tile{ HalfReuse: ':'/13 AsIs: e.Function/23 HalfReuse: '_'/14 }"right( "/32 Tile{ AsIs: e.TextRep/25 }", context["/34 </36 & Symb/37 Tile{ AsIs: s.BracketNumber/10 } >/38"], context["/39 </41 & Symb/42 </43 & Add/44 1/45 s.BracketNumber/10/46 >/47 >/48"] ) "/49 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent/21 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/51 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::copy_evar(vm, context[28], context[29], context[21], context[22]);
    refalrts::alloc_chars(vm, context[30], context[31], "if( ! refalrts:", 15);
    refalrts::alloc_chars(vm, context[32], context[33], "right( ", 7);
    refalrts::alloc_chars(vm, context[34], context[35], ", context[", 10);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "], context[", 11);
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_name(vm, context[42], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[43]);
    refalrts::alloc_name(vm, context[44], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[45], 1UL);
    refalrts::copy_stvar(vm, context[46], context[10]);
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::alloc_close_call(vm, context[48]);
    refalrts::alloc_chars(vm, context[49], context[50], "] ) ", 4);
    refalrts::alloc_chars(vm, context[51], context[52], "continue;", 9);
    refalrts::reinit_char(context[13], ':');
    refalrts::reinit_char(context[14], '_');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[27], context[4] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[36] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[38], context[50] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[34], context[37] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[27], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch/4 (/7 ' '/21 ' '/22 )/8 s.Direction/9 s.BracketNumber/10 (/13 e.Function/17 )/14 e.TextRep/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    context[21] = refalrts::char_left( ' ', context[15], context[16] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( ' ', context[15], context[16] );
    if( ! context[22] )
      continue;
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    // closed e.Function as range 17
    // closed e.TextRep as range 19
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber: 10
    //DEBUG: e.Function: 17
    //DEBUG: e.TextRep: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/23"  if( ! refalrts:"/24 Tile{ HalfReuse: ':'/13 AsIs: e.Function/17 HalfReuse: '_'/14 } </26 & StrFromDirection*2/27 Tile{ AsIs: s.Direction/9 } >/28"( "/29 Tile{ AsIs: e.TextRep/19 }", context["/31 </33 & Symb/34 Tile{ AsIs: s.BracketNumber/10 } >/35"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.BracketNumber/10/43 >/44 >/45"] ) "/46 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/21 AsIs: ' '/22 HalfReuse: ' '/8 }" return refalrts::cRecognitionImpossible;"/48 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_chars(vm, context[24], context[25], "  if( ! refalrts:", 17);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "( ", 2);
    refalrts::alloc_chars(vm, context[31], context[32], ", context[", 10);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[42], 1UL);
    refalrts::copy_stvar(vm, context[43], context[10]);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::alloc_chars(vm, context[46], context[47], "] ) ", 4);
    refalrts::alloc_chars(vm, context[48], context[49], " return refalrts::cRecognitionImpossible;", 41);
    refalrts::reinit_char(context[13], ':');
    refalrts::reinit_char(context[14], '_');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[23], context[4] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[35], context[47] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[23], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintMatch/4 (/7 e.Indent/5 )/8 s.Direction/9 s.BracketNumber/10 (/13 e.Function/11 )/14 e.TextRep/2 >/1
  // closed e.Indent as range 5
  // closed e.Function as range 11
  // closed e.TextRep as range 2
  //DEBUG: s.Direction: 9
  //DEBUG: s.BracketNumber: 10
  //DEBUG: e.Indent: 5
  //DEBUG: e.Function: 11
  //DEBUG: e.TextRep: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/15 e.Indent/5/16"if( ! refalrts:"/18 Tile{ HalfReuse: ':'/13 AsIs: e.Function/11 HalfReuse: '_'/14 } </20 & StrFromDirection*2/21 Tile{ AsIs: s.Direction/9 } >/22"( "/23 Tile{ AsIs: e.TextRep/2 }", context["/25 </27 & Symb/28 Tile{ AsIs: s.BracketNumber/10 } >/29"], context["/30 </32 & Symb/33 </34 & Add/35 1/36 s.BracketNumber/10/37 >/38 >/39"] ) "/40 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent/5 HalfReuse: ' '/8 }" continue;"/42 Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::copy_evar(vm, context[16], context[17], context[5], context[6]);
  refalrts::alloc_chars(vm, context[18], context[19], "if( ! refalrts:", 15);
  refalrts::alloc_open_call(vm, context[20]);
  refalrts::alloc_name(vm, context[21], functions[efunc_gen_StrFromDirection_D2]);
  refalrts::alloc_close_call(vm, context[22]);
  refalrts::alloc_chars(vm, context[23], context[24], "( ", 2);
  refalrts::alloc_chars(vm, context[25], context[26], ", context[", 10);
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_Symb]);
  refalrts::alloc_close_call(vm, context[29]);
  refalrts::alloc_chars(vm, context[30], context[31], "], context[", 11);
  refalrts::alloc_open_call(vm, context[32]);
  refalrts::alloc_name(vm, context[33], functions[efunc_Symb]);
  refalrts::alloc_open_call(vm, context[34]);
  refalrts::alloc_name(vm, context[35], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[36], 1UL);
  refalrts::copy_stvar(vm, context[37], context[10]);
  refalrts::alloc_close_call(vm, context[38]);
  refalrts::alloc_close_call(vm, context[39]);
  refalrts::alloc_chars(vm, context[40], context[41], "] ) ", 4);
  refalrts::alloc_chars(vm, context[42], context[43], " continue;", 10);
  refalrts::reinit_char(context[13], ':');
  refalrts::reinit_char(context[14], '_');
  refalrts::reinit_char(context[0], ')');
  refalrts::reinit_close_bracket(context[4]);
  refalrts::reinit_char(context[8], ' ');
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[7], context[1] );
  refalrts::link_brackets( context[15], context[4] );
  refalrts::push_stack( vm, context[39] );
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[38] );
  refalrts::push_stack( vm, context[34] );
  refalrts::push_stack( vm, context[29] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[22] );
  refalrts::push_stack( vm, context[20] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[42], context[43] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[29], context[41] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_evar( res, context[25], context[28] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[22], context[24] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[15], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintMatch("PrintMatch", COOKIE1_, COOKIE2_, func_PrintMatch);


static refalrts::FnResult func_PrintMatchSave(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 70 elems
  refalrts::Iter context[70];
  refalrts::zeros( context, 70 );
  // </0 & PrintMatchSave/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrintMatchSave/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 s.new4/11 (/14 e.new5/12 )/15 e.new6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.new5 as range 12
  // closed e.new6 as range 2
  do {
    // </0 & PrintMatchSave/4 (/7 e.new10/16 )/8 s.new7/9 # AlgLeft/10 s.new8/11 (/14 e.new11/18 )/15 e.new9/20 >/1
    context[16] = context[5];
    context[17] = context[6];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[2];
    context[21] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[10] ) )
      continue;
    // closed e.new10 as range 16
    // closed e.new11 as range 18
    // closed e.new9 as range 20
    do {
      // </0 & PrintMatchSave/4 (/7 ' '/28 ' '/29 )/8 s.Offset/9 # AlgLeft/10 s.BracketNumber/11 (/14 e.Function/24 )/15 e.TextRep/26 >/1
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[21];
      context[28] = refalrts::char_left( ' ', context[22], context[23] );
      if( ! context[28] )
        continue;
      context[29] = refalrts::char_left( ' ', context[22], context[23] );
      if( ! context[29] )
        continue;
      if( ! refalrts::empty_seq( context[22], context[23] ) )
        continue;
      // closed e.Function as range 24
      // closed e.TextRep as range 26
      //DEBUG: s.Offset: 9
      //DEBUG: s.BracketNumber: 11
      //DEBUG: e.Function: 24
      //DEBUG: e.TextRep: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/30"  context["/31 </33 & Symb/34 Tile{ AsIs: s.Offset/9 HalfReuse: >/10 }"] = refalrts:"/35 Tile{ HalfReuse: ':'/14 AsIs: e.Function/24 HalfReuse: '_'/15 }"left( "/37 Tile{ AsIs: e.TextRep/26 }", context["/39 </41 & Symb/42 Tile{ AsIs: s.BracketNumber/11 } >/43"], context["/44 </46 & Symb/47 </48 & Add/49 1/50 s.BracketNumber/11/51 >/52 >/53"] )"/54 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/28 AsIs: ' '/29 HalfReuse: 'i'/8 }"f( ! context["/56 </58 & Symb/59 s.Offset/9/60 >/61"] )"/62 )/64 (/65"    return refalrts::cRecognitionImpossible;"/66 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[30]);
      refalrts::alloc_chars(vm, context[31], context[32], "  context[", 10);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[35], context[36], "] = refalrts:", 13);
      refalrts::alloc_chars(vm, context[37], context[38], "left( ", 6);
      refalrts::alloc_chars(vm, context[39], context[40], ", context[", 10);
      refalrts::alloc_open_call(vm, context[41]);
      refalrts::alloc_name(vm, context[42], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_chars(vm, context[44], context[45], "], context[", 11);
      refalrts::alloc_open_call(vm, context[46]);
      refalrts::alloc_name(vm, context[47], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[49], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[50], 1UL);
      refalrts::copy_stvar(vm, context[51], context[11]);
      refalrts::alloc_close_call(vm, context[52]);
      refalrts::alloc_close_call(vm, context[53]);
      refalrts::alloc_chars(vm, context[54], context[55], "] )", 3);
      refalrts::alloc_chars(vm, context[56], context[57], "f( ! context[", 13);
      refalrts::alloc_open_call(vm, context[58]);
      refalrts::alloc_name(vm, context[59], functions[efunc_Symb]);
      refalrts::copy_stvar(vm, context[60], context[9]);
      refalrts::alloc_close_call(vm, context[61]);
      refalrts::alloc_chars(vm, context[62], context[63], "] )", 3);
      refalrts::alloc_close_bracket(vm, context[64]);
      refalrts::alloc_open_bracket(vm, context[65]);
      refalrts::alloc_chars(vm, context[66], context[67], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::reinit_close_call(context[10]);
      refalrts::reinit_char(context[14], ':');
      refalrts::reinit_char(context[15], '_');
      refalrts::reinit_char(context[0], ';');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], 'i');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[65], context[1] );
      refalrts::link_brackets( context[7], context[64] );
      refalrts::push_stack( vm, context[61] );
      refalrts::push_stack( vm, context[58] );
      refalrts::link_brackets( context[30], context[4] );
      refalrts::push_stack( vm, context[53] );
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[41] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[33] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[56], context[67] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[43], context[55] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[39], context[42] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[30], context[34] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatchSave/4 (/7 e.Indent/22 )/8 s.Offset/9 # AlgLeft/10 s.BracketNumber/11 (/14 e.Function/24 )/15 e.TextRep/26 >/1
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    context[27] = context[21];
    // closed e.Indent as range 22
    // closed e.Function as range 24
    // closed e.TextRep as range 26
    //DEBUG: s.Offset: 9
    //DEBUG: s.BracketNumber: 11
    //DEBUG: e.Indent: 22
    //DEBUG: e.Function: 24
    //DEBUG: e.TextRep: 26

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/28 e.Indent/22/29"context["/31 </33 & Symb/34 Tile{ AsIs: s.Offset/9 HalfReuse: >/10 }"] = refalrts:"/35 Tile{ HalfReuse: ':'/14 AsIs: e.Function/24 HalfReuse: '_'/15 }"left( "/37 Tile{ AsIs: e.TextRep/26 }", context["/39 </41 & Symb/42 Tile{ AsIs: s.BracketNumber/11 } >/43"], context["/44 </46 & Symb/47 </48 & Add/49 1/50 s.BracketNumber/11/51 >/52 >/53"] )"/54 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent/22 HalfReuse: 'i'/8 }"f( ! context["/56 </58 & Symb/59 s.Offset/9/60 >/61"] )"/62 )/64 (/65 e.Indent/22/66"  continue;"/68 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[28]);
    refalrts::copy_evar(vm, context[29], context[30], context[22], context[23]);
    refalrts::alloc_chars(vm, context[31], context[32], "context[", 8);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
    refalrts::alloc_chars(vm, context[35], context[36], "] = refalrts:", 13);
    refalrts::alloc_chars(vm, context[37], context[38], "left( ", 6);
    refalrts::alloc_chars(vm, context[39], context[40], ", context[", 10);
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_name(vm, context[42], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[43]);
    refalrts::alloc_chars(vm, context[44], context[45], "], context[", 11);
    refalrts::alloc_open_call(vm, context[46]);
    refalrts::alloc_name(vm, context[47], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_name(vm, context[49], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[50], 1UL);
    refalrts::copy_stvar(vm, context[51], context[11]);
    refalrts::alloc_close_call(vm, context[52]);
    refalrts::alloc_close_call(vm, context[53]);
    refalrts::alloc_chars(vm, context[54], context[55], "] )", 3);
    refalrts::alloc_chars(vm, context[56], context[57], "f( ! context[", 13);
    refalrts::alloc_open_call(vm, context[58]);
    refalrts::alloc_name(vm, context[59], functions[efunc_Symb]);
    refalrts::copy_stvar(vm, context[60], context[9]);
    refalrts::alloc_close_call(vm, context[61]);
    refalrts::alloc_chars(vm, context[62], context[63], "] )", 3);
    refalrts::alloc_close_bracket(vm, context[64]);
    refalrts::alloc_open_bracket(vm, context[65]);
    refalrts::copy_evar(vm, context[66], context[67], context[22], context[23]);
    refalrts::alloc_chars(vm, context[68], context[69], "  continue;", 11);
    refalrts::reinit_close_call(context[10]);
    refalrts::reinit_char(context[14], ':');
    refalrts::reinit_char(context[15], '_');
    refalrts::reinit_char(context[0], ';');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[65], context[1] );
    refalrts::link_brackets( context[7], context[64] );
    refalrts::push_stack( vm, context[61] );
    refalrts::push_stack( vm, context[58] );
    refalrts::link_brackets( context[28], context[4] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[52] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[56], context[69] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[43], context[55] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[39], context[42] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[28], context[34] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatchSave/4 (/7 e.new10/16 )/8 s.new7/9 # AlgRight/10 s.new8/11 (/14 e.new11/18 )/15 e.new9/20 >/1
    context[16] = context[5];
    context[17] = context[6];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[2];
    context[21] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[10] ) )
      continue;
    // closed e.new10 as range 16
    // closed e.new11 as range 18
    // closed e.new9 as range 20
    do {
      // </0 & PrintMatchSave/4 (/7 ' '/28 ' '/29 )/8 s.Offset/9 # AlgRight/10 s.BracketNumber/11 (/14 e.Function/24 )/15 e.TextRep/26 >/1
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[21];
      context[28] = refalrts::char_left( ' ', context[22], context[23] );
      if( ! context[28] )
        continue;
      context[29] = refalrts::char_left( ' ', context[22], context[23] );
      if( ! context[29] )
        continue;
      if( ! refalrts::empty_seq( context[22], context[23] ) )
        continue;
      // closed e.Function as range 24
      // closed e.TextRep as range 26
      //DEBUG: s.Offset: 9
      //DEBUG: s.BracketNumber: 11
      //DEBUG: e.Function: 24
      //DEBUG: e.TextRep: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/30"  context["/31 </33 & Symb/34 Tile{ AsIs: s.Offset/9 HalfReuse: >/10 }"] = refalrts:"/35 Tile{ HalfReuse: ':'/14 AsIs: e.Function/24 HalfReuse: '_'/15 }"right( "/37 Tile{ AsIs: e.TextRep/26 }", context["/39 </41 & Symb/42 Tile{ AsIs: s.BracketNumber/11 } >/43"], context["/44 </46 & Symb/47 </48 & Add/49 1/50 s.BracketNumber/11/51 >/52 >/53"] )"/54 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/28 AsIs: ' '/29 HalfReuse: 'i'/8 }"f( ! context["/56 </58 & Symb/59 s.Offset/9/60 >/61"] )"/62 )/64 (/65"    return refalrts::cRecognitionImpossible;"/66 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[30]);
      refalrts::alloc_chars(vm, context[31], context[32], "  context[", 10);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[35], context[36], "] = refalrts:", 13);
      refalrts::alloc_chars(vm, context[37], context[38], "right( ", 7);
      refalrts::alloc_chars(vm, context[39], context[40], ", context[", 10);
      refalrts::alloc_open_call(vm, context[41]);
      refalrts::alloc_name(vm, context[42], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_chars(vm, context[44], context[45], "], context[", 11);
      refalrts::alloc_open_call(vm, context[46]);
      refalrts::alloc_name(vm, context[47], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[49], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[50], 1UL);
      refalrts::copy_stvar(vm, context[51], context[11]);
      refalrts::alloc_close_call(vm, context[52]);
      refalrts::alloc_close_call(vm, context[53]);
      refalrts::alloc_chars(vm, context[54], context[55], "] )", 3);
      refalrts::alloc_chars(vm, context[56], context[57], "f( ! context[", 13);
      refalrts::alloc_open_call(vm, context[58]);
      refalrts::alloc_name(vm, context[59], functions[efunc_Symb]);
      refalrts::copy_stvar(vm, context[60], context[9]);
      refalrts::alloc_close_call(vm, context[61]);
      refalrts::alloc_chars(vm, context[62], context[63], "] )", 3);
      refalrts::alloc_close_bracket(vm, context[64]);
      refalrts::alloc_open_bracket(vm, context[65]);
      refalrts::alloc_chars(vm, context[66], context[67], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::reinit_close_call(context[10]);
      refalrts::reinit_char(context[14], ':');
      refalrts::reinit_char(context[15], '_');
      refalrts::reinit_char(context[0], ';');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], 'i');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[65], context[1] );
      refalrts::link_brackets( context[7], context[64] );
      refalrts::push_stack( vm, context[61] );
      refalrts::push_stack( vm, context[58] );
      refalrts::link_brackets( context[30], context[4] );
      refalrts::push_stack( vm, context[53] );
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[41] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[33] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[56], context[67] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[43], context[55] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[39], context[42] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[30], context[34] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatchSave/4 (/7 e.Indent/22 )/8 s.Offset/9 # AlgRight/10 s.BracketNumber/11 (/14 e.Function/24 )/15 e.TextRep/26 >/1
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    context[27] = context[21];
    // closed e.Indent as range 22
    // closed e.Function as range 24
    // closed e.TextRep as range 26
    //DEBUG: s.Offset: 9
    //DEBUG: s.BracketNumber: 11
    //DEBUG: e.Indent: 22
    //DEBUG: e.Function: 24
    //DEBUG: e.TextRep: 26

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/28 e.Indent/22/29"context["/31 </33 & Symb/34 Tile{ AsIs: s.Offset/9 HalfReuse: >/10 }"] = refalrts:"/35 Tile{ HalfReuse: ':'/14 AsIs: e.Function/24 HalfReuse: '_'/15 }"right( "/37 Tile{ AsIs: e.TextRep/26 }", context["/39 </41 & Symb/42 Tile{ AsIs: s.BracketNumber/11 } >/43"], context["/44 </46 & Symb/47 </48 & Add/49 1/50 s.BracketNumber/11/51 >/52 >/53"] )"/54 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent/22 HalfReuse: 'i'/8 }"f( ! context["/56 </58 & Symb/59 s.Offset/9/60 >/61"] )"/62 )/64 (/65 e.Indent/22/66"  continue;"/68 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[28]);
    refalrts::copy_evar(vm, context[29], context[30], context[22], context[23]);
    refalrts::alloc_chars(vm, context[31], context[32], "context[", 8);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
    refalrts::alloc_chars(vm, context[35], context[36], "] = refalrts:", 13);
    refalrts::alloc_chars(vm, context[37], context[38], "right( ", 7);
    refalrts::alloc_chars(vm, context[39], context[40], ", context[", 10);
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_name(vm, context[42], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[43]);
    refalrts::alloc_chars(vm, context[44], context[45], "], context[", 11);
    refalrts::alloc_open_call(vm, context[46]);
    refalrts::alloc_name(vm, context[47], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_name(vm, context[49], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[50], 1UL);
    refalrts::copy_stvar(vm, context[51], context[11]);
    refalrts::alloc_close_call(vm, context[52]);
    refalrts::alloc_close_call(vm, context[53]);
    refalrts::alloc_chars(vm, context[54], context[55], "] )", 3);
    refalrts::alloc_chars(vm, context[56], context[57], "f( ! context[", 13);
    refalrts::alloc_open_call(vm, context[58]);
    refalrts::alloc_name(vm, context[59], functions[efunc_Symb]);
    refalrts::copy_stvar(vm, context[60], context[9]);
    refalrts::alloc_close_call(vm, context[61]);
    refalrts::alloc_chars(vm, context[62], context[63], "] )", 3);
    refalrts::alloc_close_bracket(vm, context[64]);
    refalrts::alloc_open_bracket(vm, context[65]);
    refalrts::copy_evar(vm, context[66], context[67], context[22], context[23]);
    refalrts::alloc_chars(vm, context[68], context[69], "  continue;", 11);
    refalrts::reinit_close_call(context[10]);
    refalrts::reinit_char(context[14], ':');
    refalrts::reinit_char(context[15], '_');
    refalrts::reinit_char(context[0], ';');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[65], context[1] );
    refalrts::link_brackets( context[7], context[64] );
    refalrts::push_stack( vm, context[61] );
    refalrts::push_stack( vm, context[58] );
    refalrts::link_brackets( context[28], context[4] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[52] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[56], context[69] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[43], context[55] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[39], context[42] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[28], context[34] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatchSave/4 (/7 ' '/22 ' '/23 )/8 s.Offset/9 s.Direction/10 s.BracketNumber/11 (/14 e.Function/18 )/15 e.TextRep/20 >/1
    context[16] = context[5];
    context[17] = context[6];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[2];
    context[21] = context[3];
    context[22] = refalrts::char_left( ' ', context[16], context[17] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( ' ', context[16], context[17] );
    if( ! context[23] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    // closed e.Function as range 18
    // closed e.TextRep as range 20
    //DEBUG: s.Offset: 9
    //DEBUG: s.Direction: 10
    //DEBUG: s.BracketNumber: 11
    //DEBUG: e.Function: 18
    //DEBUG: e.TextRep: 20

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/24"  context["/25 </27 & Symb/28 Tile{ AsIs: s.Offset/9 } >/29"] = refalrts:"/30 Tile{ HalfReuse: ':'/14 AsIs: e.Function/18 HalfReuse: '_'/15 } </32 & StrFromDirection*2/33 Tile{ AsIs: s.Direction/10 } >/34"( "/35 Tile{ AsIs: e.TextRep/20 }", context["/37 </39 & Symb/40 Tile{ AsIs: s.BracketNumber/11 } >/41"], context["/42 </44 & Symb/45 </46 & Add/47 1/48 s.BracketNumber/11/49 >/50 >/51"] )"/52 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/22 AsIs: ' '/23 HalfReuse: 'i'/8 }"f( ! context["/54 </56 & Symb/57 s.Offset/9/58 >/59"] )"/60 )/62 (/63"    return refalrts::cRecognitionImpossible;"/64 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[24]);
    refalrts::alloc_chars(vm, context[25], context[26], "  context[", 10);
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_chars(vm, context[30], context[31], "] = refalrts:", 13);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[34]);
    refalrts::alloc_chars(vm, context[35], context[36], "( ", 2);
    refalrts::alloc_chars(vm, context[37], context[38], ", context[", 10);
    refalrts::alloc_open_call(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::alloc_chars(vm, context[42], context[43], "], context[", 11);
    refalrts::alloc_open_call(vm, context[44]);
    refalrts::alloc_name(vm, context[45], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[46]);
    refalrts::alloc_name(vm, context[47], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[48], 1UL);
    refalrts::copy_stvar(vm, context[49], context[11]);
    refalrts::alloc_close_call(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::alloc_chars(vm, context[52], context[53], "] )", 3);
    refalrts::alloc_chars(vm, context[54], context[55], "f( ! context[", 13);
    refalrts::alloc_open_call(vm, context[56]);
    refalrts::alloc_name(vm, context[57], functions[efunc_Symb]);
    refalrts::copy_stvar(vm, context[58], context[9]);
    refalrts::alloc_close_call(vm, context[59]);
    refalrts::alloc_chars(vm, context[60], context[61], "] )", 3);
    refalrts::alloc_close_bracket(vm, context[62]);
    refalrts::alloc_open_bracket(vm, context[63]);
    refalrts::alloc_chars(vm, context[64], context[65], "    return refalrts::cRecognitionImpossible;", 44);
    refalrts::reinit_char(context[14], ':');
    refalrts::reinit_char(context[15], '_');
    refalrts::reinit_char(context[0], ';');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[63], context[1] );
    refalrts::link_brackets( context[7], context[62] );
    refalrts::push_stack( vm, context[59] );
    refalrts::push_stack( vm, context[56] );
    refalrts::link_brackets( context[24], context[4] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[50] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[54], context[65] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[41], context[53] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[37], context[40] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[34], context[36] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[29], context[31] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[24], context[28] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintMatchSave/4 (/7 e.Indent/5 )/8 s.Offset/9 s.Direction/10 s.BracketNumber/11 (/14 e.Function/12 )/15 e.TextRep/2 >/1
  // closed e.Indent as range 5
  // closed e.Function as range 12
  // closed e.TextRep as range 2
  //DEBUG: s.Offset: 9
  //DEBUG: s.Direction: 10
  //DEBUG: s.BracketNumber: 11
  //DEBUG: e.Indent: 5
  //DEBUG: e.Function: 12
  //DEBUG: e.TextRep: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/16 e.Indent/5/17"context["/19 </21 & Symb/22 Tile{ AsIs: s.Offset/9 } >/23"] = refalrts:"/24 Tile{ HalfReuse: ':'/14 AsIs: e.Function/12 HalfReuse: '_'/15 } </26 & StrFromDirection*2/27 Tile{ AsIs: s.Direction/10 } >/28"( "/29 Tile{ AsIs: e.TextRep/2 }", context["/31 </33 & Symb/34 Tile{ AsIs: s.BracketNumber/11 } >/35"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.BracketNumber/11/43 >/44 >/45"] )"/46 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent/5 HalfReuse: 'i'/8 }"f( ! context["/48 </50 & Symb/51 s.Offset/9/52 >/53"] )"/54 )/56 (/57 e.Indent/5/58"  continue;"/60 Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::copy_evar(vm, context[17], context[18], context[5], context[6]);
  refalrts::alloc_chars(vm, context[19], context[20], "context[", 8);
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_Symb]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "] = refalrts:", 13);
  refalrts::alloc_open_call(vm, context[26]);
  refalrts::alloc_name(vm, context[27], functions[efunc_gen_StrFromDirection_D2]);
  refalrts::alloc_close_call(vm, context[28]);
  refalrts::alloc_chars(vm, context[29], context[30], "( ", 2);
  refalrts::alloc_chars(vm, context[31], context[32], ", context[", 10);
  refalrts::alloc_open_call(vm, context[33]);
  refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
  refalrts::alloc_close_call(vm, context[35]);
  refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
  refalrts::alloc_open_call(vm, context[38]);
  refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
  refalrts::alloc_open_call(vm, context[40]);
  refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[42], 1UL);
  refalrts::copy_stvar(vm, context[43], context[11]);
  refalrts::alloc_close_call(vm, context[44]);
  refalrts::alloc_close_call(vm, context[45]);
  refalrts::alloc_chars(vm, context[46], context[47], "] )", 3);
  refalrts::alloc_chars(vm, context[48], context[49], "f( ! context[", 13);
  refalrts::alloc_open_call(vm, context[50]);
  refalrts::alloc_name(vm, context[51], functions[efunc_Symb]);
  refalrts::copy_stvar(vm, context[52], context[9]);
  refalrts::alloc_close_call(vm, context[53]);
  refalrts::alloc_chars(vm, context[54], context[55], "] )", 3);
  refalrts::alloc_close_bracket(vm, context[56]);
  refalrts::alloc_open_bracket(vm, context[57]);
  refalrts::copy_evar(vm, context[58], context[59], context[5], context[6]);
  refalrts::alloc_chars(vm, context[60], context[61], "  continue;", 11);
  refalrts::reinit_char(context[14], ':');
  refalrts::reinit_char(context[15], '_');
  refalrts::reinit_char(context[0], ';');
  refalrts::reinit_close_bracket(context[4]);
  refalrts::reinit_char(context[8], 'i');
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[57], context[1] );
  refalrts::link_brackets( context[7], context[56] );
  refalrts::push_stack( vm, context[53] );
  refalrts::push_stack( vm, context[50] );
  refalrts::link_brackets( context[16], context[4] );
  refalrts::push_stack( vm, context[45] );
  refalrts::push_stack( vm, context[38] );
  refalrts::push_stack( vm, context[44] );
  refalrts::push_stack( vm, context[40] );
  refalrts::push_stack( vm, context[35] );
  refalrts::push_stack( vm, context[33] );
  refalrts::push_stack( vm, context[28] );
  refalrts::push_stack( vm, context[26] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[21] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[48], context[61] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[35], context[47] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[31], context[34] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[28], context[30] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[23], context[25] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[16], context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintMatchSave("PrintMatchSave", COOKIE1_, COOKIE2_, func_PrintMatchSave);


static refalrts::FnResult func_PrintMatchm_VM(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  // </0 & PrintMatch-VM/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrintMatch-VM/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 (/13 e.new4/11 )/14 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new4 as range 11
  // closed e.new5 as range 2
  do {
    // </0 & PrintMatch-VM/4 (/7 e.new8/15 )/8 # AlgTerm/9 s.new6/10 (/13 e.new9/17 )/14 e.new7/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[9] ) )
      continue;
    // closed e.new8 as range 15
    // closed e.new9 as range 17
    // closed e.new7 as range 19
    do {
      // </0 & PrintMatch-VM/4 (/7 ' '/27 ' '/28 )/8 # AlgTerm/9 s.Offset/10 (/13 e.Function/23 )/14 e.TextRep/25 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[27] )
        continue;
      context[28] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[28] )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.Function as range 23
      // closed e.TextRep as range 25
      //DEBUG: s.Offset: 10
      //DEBUG: e.Function: 23
      //DEBUG: e.TextRep: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/29"  if( ! refalrts::"/30 Tile{ AsIs: e.Function/23 }"_term( vm,"/32 Tile{ HalfReuse: ' '/14 AsIs: e.TextRep/25 HalfReuse: ','/1 }" con"/34 Tile{ HalfReuse: 't'/0 HalfReuse: 'e'/4 HalfReuse: 'x'/7 Reuse: 't'/27 Reuse: '['/28 HalfReuse: </8 HalfReuse: & Symb/9 AsIs: s.Offset/10 HalfReuse: >/13 }"] ) )"/36 )/38 (/39"    return refalrts::cRecognitionImpossible;"/40 )/42 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_chars(vm, context[30], context[31], "  if( ! refalrts::", 18);
      refalrts::alloc_chars(vm, context[32], context[33], "_term( vm,", 10);
      refalrts::alloc_chars(vm, context[34], context[35], " con", 4);
      refalrts::alloc_chars(vm, context[36], context[37], "] ) )", 5);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_chars(vm, context[40], context[41], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::reinit_char(context[14], ' ');
      refalrts::reinit_char(context[1], ',');
      refalrts::reinit_char(context[0], 't');
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_char(context[7], 'x');
      refalrts::update_char(context[27], 't');
      refalrts::update_char(context[28], '[');
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[9], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[13]);
      refalrts::link_brackets( context[39], context[42] );
      refalrts::link_brackets( context[29], context[38] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[36], context[42] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[14], context[1] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch-VM/4 (/7 e.Indent/21 )/8 # AlgTerm/9 s.Offset/10 (/13 e.Function/23 )/14 e.TextRep/25 >/1
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    // closed e.Indent as range 21
    // closed e.Function as range 23
    // closed e.TextRep as range 25
    //DEBUG: s.Offset: 10
    //DEBUG: e.Indent: 21
    //DEBUG: e.Function: 23
    //DEBUG: e.TextRep: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/27 e.Indent/21/28"if( ! refalrts:"/30 Tile{ HalfReuse: ':'/13 AsIs: e.Function/23 HalfReuse: '_'/14 }"term( vm, "/32 Tile{ AsIs: e.TextRep/25 }", context["/34 </36 & Symb/37 Tile{ AsIs: s.Offset/10 } >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent/21 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/41 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::copy_evar(vm, context[28], context[29], context[21], context[22]);
    refalrts::alloc_chars(vm, context[30], context[31], "if( ! refalrts:", 15);
    refalrts::alloc_chars(vm, context[32], context[33], "term( vm, ", 10);
    refalrts::alloc_chars(vm, context[34], context[35], ", context[", 10);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
    refalrts::alloc_chars(vm, context[41], context[42], "continue;", 9);
    refalrts::reinit_char(context[13], ':');
    refalrts::reinit_char(context[14], '_');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[27], context[4] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[36] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[38], context[40] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[34], context[37] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[27], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch-VM/4 (/7 e.new8/15 )/8 # AlgLeft/9 s.new6/10 (/13 e.new9/17 )/14 e.new7/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[9] ) )
      continue;
    // closed e.new8 as range 15
    // closed e.new9 as range 17
    // closed e.new7 as range 19
    do {
      // </0 & PrintMatch-VM/4 (/7 ' '/27 ' '/28 )/8 # AlgLeft/9 s.BracketNumber/10 (/13 e.Function/23 )/14 e.TextRep/25 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[27] )
        continue;
      context[28] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[28] )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.Function as range 23
      // closed e.TextRep as range 25
      //DEBUG: s.BracketNumber: 10
      //DEBUG: e.Function: 23
      //DEBUG: e.TextRep: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/29"  if( ! refalrts::"/30 Tile{ AsIs: e.Function/23 }"_left( vm,"/32 Tile{ HalfReuse: ' '/14 AsIs: e.TextRep/25 HalfReuse: ','/1 }" con"/34 Tile{ HalfReuse: 't'/0 HalfReuse: 'e'/4 HalfReuse: 'x'/7 Reuse: 't'/27 Reuse: '['/28 HalfReuse: </8 HalfReuse: & Symb/9 AsIs: s.BracketNumber/10 HalfReuse: >/13 }"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.BracketNumber/10/43 >/44 >/45"] ) )"/46 )/48 (/49"    return refalrts::cRecognitionImpossible;"/50 )/52 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_chars(vm, context[30], context[31], "  if( ! refalrts::", 18);
      refalrts::alloc_chars(vm, context[32], context[33], "_left( vm,", 10);
      refalrts::alloc_chars(vm, context[34], context[35], " con", 4);
      refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[42], 1UL);
      refalrts::copy_stvar(vm, context[43], context[10]);
      refalrts::alloc_close_call(vm, context[44]);
      refalrts::alloc_close_call(vm, context[45]);
      refalrts::alloc_chars(vm, context[46], context[47], "] ) )", 5);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::alloc_chars(vm, context[50], context[51], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::reinit_char(context[14], ' ');
      refalrts::reinit_char(context[1], ',');
      refalrts::reinit_char(context[0], 't');
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_char(context[7], 'x');
      refalrts::update_char(context[27], 't');
      refalrts::update_char(context[28], '[');
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[9], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[13]);
      refalrts::link_brackets( context[49], context[52] );
      refalrts::link_brackets( context[29], context[48] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[36], context[52] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[14], context[1] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch-VM/4 (/7 e.Indent/21 )/8 # AlgLeft/9 s.BracketNumber/10 (/13 e.Function/23 )/14 e.TextRep/25 >/1
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    // closed e.Indent as range 21
    // closed e.Function as range 23
    // closed e.TextRep as range 25
    //DEBUG: s.BracketNumber: 10
    //DEBUG: e.Indent: 21
    //DEBUG: e.Function: 23
    //DEBUG: e.TextRep: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/27 e.Indent/21/28"if( ! refalrts:"/30 Tile{ HalfReuse: ':'/13 AsIs: e.Function/23 HalfReuse: '_'/14 }"left( vm, "/32 Tile{ AsIs: e.TextRep/25 }", context["/34 </36 & Symb/37 Tile{ AsIs: s.BracketNumber/10 } >/38"], context["/39 </41 & Symb/42 </43 & Add/44 1/45 s.BracketNumber/10/46 >/47 >/48"] ) "/49 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent/21 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/51 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::copy_evar(vm, context[28], context[29], context[21], context[22]);
    refalrts::alloc_chars(vm, context[30], context[31], "if( ! refalrts:", 15);
    refalrts::alloc_chars(vm, context[32], context[33], "left( vm, ", 10);
    refalrts::alloc_chars(vm, context[34], context[35], ", context[", 10);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "], context[", 11);
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_name(vm, context[42], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[43]);
    refalrts::alloc_name(vm, context[44], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[45], 1UL);
    refalrts::copy_stvar(vm, context[46], context[10]);
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::alloc_close_call(vm, context[48]);
    refalrts::alloc_chars(vm, context[49], context[50], "] ) ", 4);
    refalrts::alloc_chars(vm, context[51], context[52], "continue;", 9);
    refalrts::reinit_char(context[13], ':');
    refalrts::reinit_char(context[14], '_');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[27], context[4] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[36] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[38], context[50] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[34], context[37] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[27], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch-VM/4 (/7 e.new8/15 )/8 # AlgRight/9 s.new6/10 (/13 e.new9/17 )/14 e.new7/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[9] ) )
      continue;
    // closed e.new8 as range 15
    // closed e.new9 as range 17
    // closed e.new7 as range 19
    do {
      // </0 & PrintMatch-VM/4 (/7 ' '/27 ' '/28 )/8 # AlgRight/9 s.BracketNumber/10 (/13 e.Function/23 )/14 e.TextRep/25 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[27] )
        continue;
      context[28] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[28] )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.Function as range 23
      // closed e.TextRep as range 25
      //DEBUG: s.BracketNumber: 10
      //DEBUG: e.Function: 23
      //DEBUG: e.TextRep: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/29"  if( ! refalrts::"/30 Tile{ AsIs: e.Function/23 }"_right( vm,"/32 Tile{ HalfReuse: ' '/14 AsIs: e.TextRep/25 HalfReuse: ','/1 }" con"/34 Tile{ HalfReuse: 't'/0 HalfReuse: 'e'/4 HalfReuse: 'x'/7 Reuse: 't'/27 Reuse: '['/28 HalfReuse: </8 HalfReuse: & Symb/9 AsIs: s.BracketNumber/10 HalfReuse: >/13 }"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.BracketNumber/10/43 >/44 >/45"] ) )"/46 )/48 (/49"    return refalrts::cRecognitionImpossible;"/50 )/52 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_chars(vm, context[30], context[31], "  if( ! refalrts::", 18);
      refalrts::alloc_chars(vm, context[32], context[33], "_right( vm,", 11);
      refalrts::alloc_chars(vm, context[34], context[35], " con", 4);
      refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[42], 1UL);
      refalrts::copy_stvar(vm, context[43], context[10]);
      refalrts::alloc_close_call(vm, context[44]);
      refalrts::alloc_close_call(vm, context[45]);
      refalrts::alloc_chars(vm, context[46], context[47], "] ) )", 5);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::alloc_chars(vm, context[50], context[51], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::reinit_char(context[14], ' ');
      refalrts::reinit_char(context[1], ',');
      refalrts::reinit_char(context[0], 't');
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_char(context[7], 'x');
      refalrts::update_char(context[27], 't');
      refalrts::update_char(context[28], '[');
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[9], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[13]);
      refalrts::link_brackets( context[49], context[52] );
      refalrts::link_brackets( context[29], context[48] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[36], context[52] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[14], context[1] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch-VM/4 (/7 e.Indent/21 )/8 # AlgRight/9 s.BracketNumber/10 (/13 e.Function/23 )/14 e.TextRep/25 >/1
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    // closed e.Indent as range 21
    // closed e.Function as range 23
    // closed e.TextRep as range 25
    //DEBUG: s.BracketNumber: 10
    //DEBUG: e.Indent: 21
    //DEBUG: e.Function: 23
    //DEBUG: e.TextRep: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/27 e.Indent/21/28"if( ! refalrts:"/30 Tile{ HalfReuse: ':'/13 AsIs: e.Function/23 HalfReuse: '_'/14 }"right( vm, "/32 Tile{ AsIs: e.TextRep/25 }", context["/34 </36 & Symb/37 Tile{ AsIs: s.BracketNumber/10 } >/38"], context["/39 </41 & Symb/42 </43 & Add/44 1/45 s.BracketNumber/10/46 >/47 >/48"] ) "/49 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent/21 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/51 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::copy_evar(vm, context[28], context[29], context[21], context[22]);
    refalrts::alloc_chars(vm, context[30], context[31], "if( ! refalrts:", 15);
    refalrts::alloc_chars(vm, context[32], context[33], "right( vm, ", 11);
    refalrts::alloc_chars(vm, context[34], context[35], ", context[", 10);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "], context[", 11);
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_name(vm, context[42], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[43]);
    refalrts::alloc_name(vm, context[44], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[45], 1UL);
    refalrts::copy_stvar(vm, context[46], context[10]);
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::alloc_close_call(vm, context[48]);
    refalrts::alloc_chars(vm, context[49], context[50], "] ) ", 4);
    refalrts::alloc_chars(vm, context[51], context[52], "continue;", 9);
    refalrts::reinit_char(context[13], ':');
    refalrts::reinit_char(context[14], '_');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[27], context[4] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[36] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[38], context[50] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[34], context[37] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[27], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch-VM/4 (/7 ' '/21 ' '/22 )/8 s.Direction/9 s.BracketNumber/10 (/13 e.Function/17 )/14 e.TextRep/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    context[21] = refalrts::char_left( ' ', context[15], context[16] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( ' ', context[15], context[16] );
    if( ! context[22] )
      continue;
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    // closed e.Function as range 17
    // closed e.TextRep as range 19
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber: 10
    //DEBUG: e.Function: 17
    //DEBUG: e.TextRep: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/23"  if( ! refalrts:"/24 Tile{ HalfReuse: ':'/13 AsIs: e.Function/17 HalfReuse: '_'/14 } </26 & StrFromDirection*2/27 Tile{ AsIs: s.Direction/9 } >/28"( vm, "/29 Tile{ AsIs: e.TextRep/19 }", context["/31 </33 & Symb/34 Tile{ AsIs: s.BracketNumber/10 } >/35"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.BracketNumber/10/43 >/44 >/45"] ) "/46 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/21 AsIs: ' '/22 HalfReuse: ' '/8 }" return refalrts::cRecognitionImpossible;"/48 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_chars(vm, context[24], context[25], "  if( ! refalrts:", 17);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "( vm, ", 6);
    refalrts::alloc_chars(vm, context[31], context[32], ", context[", 10);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[42], 1UL);
    refalrts::copy_stvar(vm, context[43], context[10]);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::alloc_chars(vm, context[46], context[47], "] ) ", 4);
    refalrts::alloc_chars(vm, context[48], context[49], " return refalrts::cRecognitionImpossible;", 41);
    refalrts::reinit_char(context[13], ':');
    refalrts::reinit_char(context[14], '_');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[23], context[4] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[35], context[47] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[23], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintMatch-VM/4 (/7 e.Indent/5 )/8 s.Direction/9 s.BracketNumber/10 (/13 e.Function/11 )/14 e.TextRep/2 >/1
  // closed e.Indent as range 5
  // closed e.Function as range 11
  // closed e.TextRep as range 2
  //DEBUG: s.Direction: 9
  //DEBUG: s.BracketNumber: 10
  //DEBUG: e.Indent: 5
  //DEBUG: e.Function: 11
  //DEBUG: e.TextRep: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/15 e.Indent/5/16"if( ! refalrts:"/18 Tile{ HalfReuse: ':'/13 AsIs: e.Function/11 HalfReuse: '_'/14 } </20 & StrFromDirection*2/21 Tile{ AsIs: s.Direction/9 } >/22"( vm, "/23 Tile{ AsIs: e.TextRep/2 }", context["/25 </27 & Symb/28 Tile{ AsIs: s.BracketNumber/10 } >/29"], context["/30 </32 & Symb/33 </34 & Add/35 1/36 s.BracketNumber/10/37 >/38 >/39"] ) "/40 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent/5 HalfReuse: ' '/8 }" continue;"/42 Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::copy_evar(vm, context[16], context[17], context[5], context[6]);
  refalrts::alloc_chars(vm, context[18], context[19], "if( ! refalrts:", 15);
  refalrts::alloc_open_call(vm, context[20]);
  refalrts::alloc_name(vm, context[21], functions[efunc_gen_StrFromDirection_D2]);
  refalrts::alloc_close_call(vm, context[22]);
  refalrts::alloc_chars(vm, context[23], context[24], "( vm, ", 6);
  refalrts::alloc_chars(vm, context[25], context[26], ", context[", 10);
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_Symb]);
  refalrts::alloc_close_call(vm, context[29]);
  refalrts::alloc_chars(vm, context[30], context[31], "], context[", 11);
  refalrts::alloc_open_call(vm, context[32]);
  refalrts::alloc_name(vm, context[33], functions[efunc_Symb]);
  refalrts::alloc_open_call(vm, context[34]);
  refalrts::alloc_name(vm, context[35], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[36], 1UL);
  refalrts::copy_stvar(vm, context[37], context[10]);
  refalrts::alloc_close_call(vm, context[38]);
  refalrts::alloc_close_call(vm, context[39]);
  refalrts::alloc_chars(vm, context[40], context[41], "] ) ", 4);
  refalrts::alloc_chars(vm, context[42], context[43], " continue;", 10);
  refalrts::reinit_char(context[13], ':');
  refalrts::reinit_char(context[14], '_');
  refalrts::reinit_char(context[0], ')');
  refalrts::reinit_close_bracket(context[4]);
  refalrts::reinit_char(context[8], ' ');
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[7], context[1] );
  refalrts::link_brackets( context[15], context[4] );
  refalrts::push_stack( vm, context[39] );
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[38] );
  refalrts::push_stack( vm, context[34] );
  refalrts::push_stack( vm, context[29] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[22] );
  refalrts::push_stack( vm, context[20] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[42], context[43] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[29], context[41] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_evar( res, context[25], context[28] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[22], context[24] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[15], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintMatchm_VM("PrintMatch-VM", COOKIE1_, COOKIE2_, func_PrintMatchm_VM);


static refalrts::FnResult func_PrintMatchSavem_VM(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 70 elems
  refalrts::Iter context[70];
  refalrts::zeros( context, 70 );
  // </0 & PrintMatchSave-VM/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrintMatchSave-VM/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 s.new4/11 (/14 e.new5/12 )/15 e.new6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.new5 as range 12
  // closed e.new6 as range 2
  do {
    // </0 & PrintMatchSave-VM/4 (/7 e.new10/16 )/8 s.new7/9 # AlgLeft/10 s.new8/11 (/14 e.new11/18 )/15 e.new9/20 >/1
    context[16] = context[5];
    context[17] = context[6];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[2];
    context[21] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[10] ) )
      continue;
    // closed e.new10 as range 16
    // closed e.new11 as range 18
    // closed e.new9 as range 20
    do {
      // </0 & PrintMatchSave-VM/4 (/7 ' '/28 ' '/29 )/8 s.Offset/9 # AlgLeft/10 s.BracketNumber/11 (/14 e.Function/24 )/15 e.TextRep/26 >/1
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[21];
      context[28] = refalrts::char_left( ' ', context[22], context[23] );
      if( ! context[28] )
        continue;
      context[29] = refalrts::char_left( ' ', context[22], context[23] );
      if( ! context[29] )
        continue;
      if( ! refalrts::empty_seq( context[22], context[23] ) )
        continue;
      // closed e.Function as range 24
      // closed e.TextRep as range 26
      //DEBUG: s.Offset: 9
      //DEBUG: s.BracketNumber: 11
      //DEBUG: e.Function: 24
      //DEBUG: e.TextRep: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/30"  context["/31 </33 & Symb/34 Tile{ AsIs: s.Offset/9 HalfReuse: >/10 }"] = refalrts:"/35 Tile{ HalfReuse: ':'/14 AsIs: e.Function/24 HalfReuse: '_'/15 }"left( vm, "/37 Tile{ AsIs: e.TextRep/26 }", context["/39 </41 & Symb/42 Tile{ AsIs: s.BracketNumber/11 } >/43"], context["/44 </46 & Symb/47 </48 & Add/49 1/50 s.BracketNumber/11/51 >/52 >/53"] )"/54 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/28 AsIs: ' '/29 HalfReuse: 'i'/8 }"f( ! context["/56 </58 & Symb/59 s.Offset/9/60 >/61"] )"/62 )/64 (/65"    return refalrts::cRecognitionImpossible;"/66 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[30]);
      refalrts::alloc_chars(vm, context[31], context[32], "  context[", 10);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[35], context[36], "] = refalrts:", 13);
      refalrts::alloc_chars(vm, context[37], context[38], "left( vm, ", 10);
      refalrts::alloc_chars(vm, context[39], context[40], ", context[", 10);
      refalrts::alloc_open_call(vm, context[41]);
      refalrts::alloc_name(vm, context[42], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_chars(vm, context[44], context[45], "], context[", 11);
      refalrts::alloc_open_call(vm, context[46]);
      refalrts::alloc_name(vm, context[47], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[49], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[50], 1UL);
      refalrts::copy_stvar(vm, context[51], context[11]);
      refalrts::alloc_close_call(vm, context[52]);
      refalrts::alloc_close_call(vm, context[53]);
      refalrts::alloc_chars(vm, context[54], context[55], "] )", 3);
      refalrts::alloc_chars(vm, context[56], context[57], "f( ! context[", 13);
      refalrts::alloc_open_call(vm, context[58]);
      refalrts::alloc_name(vm, context[59], functions[efunc_Symb]);
      refalrts::copy_stvar(vm, context[60], context[9]);
      refalrts::alloc_close_call(vm, context[61]);
      refalrts::alloc_chars(vm, context[62], context[63], "] )", 3);
      refalrts::alloc_close_bracket(vm, context[64]);
      refalrts::alloc_open_bracket(vm, context[65]);
      refalrts::alloc_chars(vm, context[66], context[67], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::reinit_close_call(context[10]);
      refalrts::reinit_char(context[14], ':');
      refalrts::reinit_char(context[15], '_');
      refalrts::reinit_char(context[0], ';');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], 'i');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[65], context[1] );
      refalrts::link_brackets( context[7], context[64] );
      refalrts::push_stack( vm, context[61] );
      refalrts::push_stack( vm, context[58] );
      refalrts::link_brackets( context[30], context[4] );
      refalrts::push_stack( vm, context[53] );
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[41] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[33] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[56], context[67] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[43], context[55] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[39], context[42] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[30], context[34] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatchSave-VM/4 (/7 e.Indent/22 )/8 s.Offset/9 # AlgLeft/10 s.BracketNumber/11 (/14 e.Function/24 )/15 e.TextRep/26 >/1
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    context[27] = context[21];
    // closed e.Indent as range 22
    // closed e.Function as range 24
    // closed e.TextRep as range 26
    //DEBUG: s.Offset: 9
    //DEBUG: s.BracketNumber: 11
    //DEBUG: e.Indent: 22
    //DEBUG: e.Function: 24
    //DEBUG: e.TextRep: 26

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/28 e.Indent/22/29"context["/31 </33 & Symb/34 Tile{ AsIs: s.Offset/9 HalfReuse: >/10 }"] = refalrts:"/35 Tile{ HalfReuse: ':'/14 AsIs: e.Function/24 HalfReuse: '_'/15 }"left( vm, "/37 Tile{ AsIs: e.TextRep/26 }", context["/39 </41 & Symb/42 Tile{ AsIs: s.BracketNumber/11 } >/43"], context["/44 </46 & Symb/47 </48 & Add/49 1/50 s.BracketNumber/11/51 >/52 >/53"] )"/54 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent/22 HalfReuse: 'i'/8 }"f( ! context["/56 </58 & Symb/59 s.Offset/9/60 >/61"] )"/62 )/64 (/65 e.Indent/22/66"  continue;"/68 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[28]);
    refalrts::copy_evar(vm, context[29], context[30], context[22], context[23]);
    refalrts::alloc_chars(vm, context[31], context[32], "context[", 8);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
    refalrts::alloc_chars(vm, context[35], context[36], "] = refalrts:", 13);
    refalrts::alloc_chars(vm, context[37], context[38], "left( vm, ", 10);
    refalrts::alloc_chars(vm, context[39], context[40], ", context[", 10);
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_name(vm, context[42], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[43]);
    refalrts::alloc_chars(vm, context[44], context[45], "], context[", 11);
    refalrts::alloc_open_call(vm, context[46]);
    refalrts::alloc_name(vm, context[47], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_name(vm, context[49], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[50], 1UL);
    refalrts::copy_stvar(vm, context[51], context[11]);
    refalrts::alloc_close_call(vm, context[52]);
    refalrts::alloc_close_call(vm, context[53]);
    refalrts::alloc_chars(vm, context[54], context[55], "] )", 3);
    refalrts::alloc_chars(vm, context[56], context[57], "f( ! context[", 13);
    refalrts::alloc_open_call(vm, context[58]);
    refalrts::alloc_name(vm, context[59], functions[efunc_Symb]);
    refalrts::copy_stvar(vm, context[60], context[9]);
    refalrts::alloc_close_call(vm, context[61]);
    refalrts::alloc_chars(vm, context[62], context[63], "] )", 3);
    refalrts::alloc_close_bracket(vm, context[64]);
    refalrts::alloc_open_bracket(vm, context[65]);
    refalrts::copy_evar(vm, context[66], context[67], context[22], context[23]);
    refalrts::alloc_chars(vm, context[68], context[69], "  continue;", 11);
    refalrts::reinit_close_call(context[10]);
    refalrts::reinit_char(context[14], ':');
    refalrts::reinit_char(context[15], '_');
    refalrts::reinit_char(context[0], ';');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[65], context[1] );
    refalrts::link_brackets( context[7], context[64] );
    refalrts::push_stack( vm, context[61] );
    refalrts::push_stack( vm, context[58] );
    refalrts::link_brackets( context[28], context[4] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[52] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[56], context[69] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[43], context[55] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[39], context[42] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[28], context[34] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatchSave-VM/4 (/7 e.new10/16 )/8 s.new7/9 # AlgRight/10 s.new8/11 (/14 e.new11/18 )/15 e.new9/20 >/1
    context[16] = context[5];
    context[17] = context[6];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[2];
    context[21] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[10] ) )
      continue;
    // closed e.new10 as range 16
    // closed e.new11 as range 18
    // closed e.new9 as range 20
    do {
      // </0 & PrintMatchSave-VM/4 (/7 ' '/28 ' '/29 )/8 s.Offset/9 # AlgRight/10 s.BracketNumber/11 (/14 e.Function/24 )/15 e.TextRep/26 >/1
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[21];
      context[28] = refalrts::char_left( ' ', context[22], context[23] );
      if( ! context[28] )
        continue;
      context[29] = refalrts::char_left( ' ', context[22], context[23] );
      if( ! context[29] )
        continue;
      if( ! refalrts::empty_seq( context[22], context[23] ) )
        continue;
      // closed e.Function as range 24
      // closed e.TextRep as range 26
      //DEBUG: s.Offset: 9
      //DEBUG: s.BracketNumber: 11
      //DEBUG: e.Function: 24
      //DEBUG: e.TextRep: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/30"  context["/31 </33 & Symb/34 Tile{ AsIs: s.Offset/9 HalfReuse: >/10 }"] = refalrts:"/35 Tile{ HalfReuse: ':'/14 AsIs: e.Function/24 HalfReuse: '_'/15 }"right( vm, "/37 Tile{ AsIs: e.TextRep/26 }", context["/39 </41 & Symb/42 Tile{ AsIs: s.BracketNumber/11 } >/43"], context["/44 </46 & Symb/47 </48 & Add/49 1/50 s.BracketNumber/11/51 >/52 >/53"] )"/54 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/28 AsIs: ' '/29 HalfReuse: 'i'/8 }"f( ! context["/56 </58 & Symb/59 s.Offset/9/60 >/61"] )"/62 )/64 (/65"    return refalrts::cRecognitionImpossible;"/66 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[30]);
      refalrts::alloc_chars(vm, context[31], context[32], "  context[", 10);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[35], context[36], "] = refalrts:", 13);
      refalrts::alloc_chars(vm, context[37], context[38], "right( vm, ", 11);
      refalrts::alloc_chars(vm, context[39], context[40], ", context[", 10);
      refalrts::alloc_open_call(vm, context[41]);
      refalrts::alloc_name(vm, context[42], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_chars(vm, context[44], context[45], "], context[", 11);
      refalrts::alloc_open_call(vm, context[46]);
      refalrts::alloc_name(vm, context[47], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[49], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[50], 1UL);
      refalrts::copy_stvar(vm, context[51], context[11]);
      refalrts::alloc_close_call(vm, context[52]);
      refalrts::alloc_close_call(vm, context[53]);
      refalrts::alloc_chars(vm, context[54], context[55], "] )", 3);
      refalrts::alloc_chars(vm, context[56], context[57], "f( ! context[", 13);
      refalrts::alloc_open_call(vm, context[58]);
      refalrts::alloc_name(vm, context[59], functions[efunc_Symb]);
      refalrts::copy_stvar(vm, context[60], context[9]);
      refalrts::alloc_close_call(vm, context[61]);
      refalrts::alloc_chars(vm, context[62], context[63], "] )", 3);
      refalrts::alloc_close_bracket(vm, context[64]);
      refalrts::alloc_open_bracket(vm, context[65]);
      refalrts::alloc_chars(vm, context[66], context[67], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::reinit_close_call(context[10]);
      refalrts::reinit_char(context[14], ':');
      refalrts::reinit_char(context[15], '_');
      refalrts::reinit_char(context[0], ';');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], 'i');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[65], context[1] );
      refalrts::link_brackets( context[7], context[64] );
      refalrts::push_stack( vm, context[61] );
      refalrts::push_stack( vm, context[58] );
      refalrts::link_brackets( context[30], context[4] );
      refalrts::push_stack( vm, context[53] );
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[41] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[33] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[56], context[67] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[43], context[55] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[39], context[42] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[30], context[34] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatchSave-VM/4 (/7 e.Indent/22 )/8 s.Offset/9 # AlgRight/10 s.BracketNumber/11 (/14 e.Function/24 )/15 e.TextRep/26 >/1
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    context[27] = context[21];
    // closed e.Indent as range 22
    // closed e.Function as range 24
    // closed e.TextRep as range 26
    //DEBUG: s.Offset: 9
    //DEBUG: s.BracketNumber: 11
    //DEBUG: e.Indent: 22
    //DEBUG: e.Function: 24
    //DEBUG: e.TextRep: 26

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/28 e.Indent/22/29"context["/31 </33 & Symb/34 Tile{ AsIs: s.Offset/9 HalfReuse: >/10 }"] = refalrts:"/35 Tile{ HalfReuse: ':'/14 AsIs: e.Function/24 HalfReuse: '_'/15 }"right( vm, "/37 Tile{ AsIs: e.TextRep/26 }", context["/39 </41 & Symb/42 Tile{ AsIs: s.BracketNumber/11 } >/43"], context["/44 </46 & Symb/47 </48 & Add/49 1/50 s.BracketNumber/11/51 >/52 >/53"] )"/54 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent/22 HalfReuse: 'i'/8 }"f( ! context["/56 </58 & Symb/59 s.Offset/9/60 >/61"] )"/62 )/64 (/65 e.Indent/22/66"  continue;"/68 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[28]);
    refalrts::copy_evar(vm, context[29], context[30], context[22], context[23]);
    refalrts::alloc_chars(vm, context[31], context[32], "context[", 8);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
    refalrts::alloc_chars(vm, context[35], context[36], "] = refalrts:", 13);
    refalrts::alloc_chars(vm, context[37], context[38], "right( vm, ", 11);
    refalrts::alloc_chars(vm, context[39], context[40], ", context[", 10);
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_name(vm, context[42], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[43]);
    refalrts::alloc_chars(vm, context[44], context[45], "], context[", 11);
    refalrts::alloc_open_call(vm, context[46]);
    refalrts::alloc_name(vm, context[47], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_name(vm, context[49], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[50], 1UL);
    refalrts::copy_stvar(vm, context[51], context[11]);
    refalrts::alloc_close_call(vm, context[52]);
    refalrts::alloc_close_call(vm, context[53]);
    refalrts::alloc_chars(vm, context[54], context[55], "] )", 3);
    refalrts::alloc_chars(vm, context[56], context[57], "f( ! context[", 13);
    refalrts::alloc_open_call(vm, context[58]);
    refalrts::alloc_name(vm, context[59], functions[efunc_Symb]);
    refalrts::copy_stvar(vm, context[60], context[9]);
    refalrts::alloc_close_call(vm, context[61]);
    refalrts::alloc_chars(vm, context[62], context[63], "] )", 3);
    refalrts::alloc_close_bracket(vm, context[64]);
    refalrts::alloc_open_bracket(vm, context[65]);
    refalrts::copy_evar(vm, context[66], context[67], context[22], context[23]);
    refalrts::alloc_chars(vm, context[68], context[69], "  continue;", 11);
    refalrts::reinit_close_call(context[10]);
    refalrts::reinit_char(context[14], ':');
    refalrts::reinit_char(context[15], '_');
    refalrts::reinit_char(context[0], ';');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[65], context[1] );
    refalrts::link_brackets( context[7], context[64] );
    refalrts::push_stack( vm, context[61] );
    refalrts::push_stack( vm, context[58] );
    refalrts::link_brackets( context[28], context[4] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[52] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[33] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[56], context[69] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[43], context[55] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[39], context[42] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[28], context[34] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatchSave-VM/4 (/7 ' '/22 ' '/23 )/8 s.Offset/9 s.Direction/10 s.BracketNumber/11 (/14 e.Function/18 )/15 e.TextRep/20 >/1
    context[16] = context[5];
    context[17] = context[6];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[2];
    context[21] = context[3];
    context[22] = refalrts::char_left( ' ', context[16], context[17] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( ' ', context[16], context[17] );
    if( ! context[23] )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    // closed e.Function as range 18
    // closed e.TextRep as range 20
    //DEBUG: s.Offset: 9
    //DEBUG: s.Direction: 10
    //DEBUG: s.BracketNumber: 11
    //DEBUG: e.Function: 18
    //DEBUG: e.TextRep: 20

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/24"  context["/25 </27 & Symb/28 Tile{ AsIs: s.Offset/9 } >/29"] = refalrts:"/30 Tile{ HalfReuse: ':'/14 AsIs: e.Function/18 HalfReuse: '_'/15 } </32 & StrFromDirection*2/33 Tile{ AsIs: s.Direction/10 } >/34"( vm, "/35 Tile{ AsIs: e.TextRep/20 }", context["/37 </39 & Symb/40 Tile{ AsIs: s.BracketNumber/11 } >/41"], context["/42 </44 & Symb/45 </46 & Add/47 1/48 s.BracketNumber/11/49 >/50 >/51"] )"/52 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/22 AsIs: ' '/23 HalfReuse: 'i'/8 }"f( ! context["/54 </56 & Symb/57 s.Offset/9/58 >/59"] )"/60 )/62 (/63"    return refalrts::cRecognitionImpossible;"/64 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[24]);
    refalrts::alloc_chars(vm, context[25], context[26], "  context[", 10);
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_chars(vm, context[30], context[31], "] = refalrts:", 13);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[34]);
    refalrts::alloc_chars(vm, context[35], context[36], "( vm, ", 6);
    refalrts::alloc_chars(vm, context[37], context[38], ", context[", 10);
    refalrts::alloc_open_call(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::alloc_chars(vm, context[42], context[43], "], context[", 11);
    refalrts::alloc_open_call(vm, context[44]);
    refalrts::alloc_name(vm, context[45], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[46]);
    refalrts::alloc_name(vm, context[47], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[48], 1UL);
    refalrts::copy_stvar(vm, context[49], context[11]);
    refalrts::alloc_close_call(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::alloc_chars(vm, context[52], context[53], "] )", 3);
    refalrts::alloc_chars(vm, context[54], context[55], "f( ! context[", 13);
    refalrts::alloc_open_call(vm, context[56]);
    refalrts::alloc_name(vm, context[57], functions[efunc_Symb]);
    refalrts::copy_stvar(vm, context[58], context[9]);
    refalrts::alloc_close_call(vm, context[59]);
    refalrts::alloc_chars(vm, context[60], context[61], "] )", 3);
    refalrts::alloc_close_bracket(vm, context[62]);
    refalrts::alloc_open_bracket(vm, context[63]);
    refalrts::alloc_chars(vm, context[64], context[65], "    return refalrts::cRecognitionImpossible;", 44);
    refalrts::reinit_char(context[14], ':');
    refalrts::reinit_char(context[15], '_');
    refalrts::reinit_char(context[0], ';');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[63], context[1] );
    refalrts::link_brackets( context[7], context[62] );
    refalrts::push_stack( vm, context[59] );
    refalrts::push_stack( vm, context[56] );
    refalrts::link_brackets( context[24], context[4] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[50] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[54], context[65] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[41], context[53] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[37], context[40] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[34], context[36] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[29], context[31] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[24], context[28] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintMatchSave-VM/4 (/7 e.Indent/5 )/8 s.Offset/9 s.Direction/10 s.BracketNumber/11 (/14 e.Function/12 )/15 e.TextRep/2 >/1
  // closed e.Indent as range 5
  // closed e.Function as range 12
  // closed e.TextRep as range 2
  //DEBUG: s.Offset: 9
  //DEBUG: s.Direction: 10
  //DEBUG: s.BracketNumber: 11
  //DEBUG: e.Indent: 5
  //DEBUG: e.Function: 12
  //DEBUG: e.TextRep: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/16 e.Indent/5/17"context["/19 </21 & Symb/22 Tile{ AsIs: s.Offset/9 } >/23"] = refalrts:"/24 Tile{ HalfReuse: ':'/14 AsIs: e.Function/12 HalfReuse: '_'/15 } </26 & StrFromDirection*2/27 Tile{ AsIs: s.Direction/10 } >/28"( vm, "/29 Tile{ AsIs: e.TextRep/2 }", context["/31 </33 & Symb/34 Tile{ AsIs: s.BracketNumber/11 } >/35"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.BracketNumber/11/43 >/44 >/45"] )"/46 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent/5 HalfReuse: 'i'/8 }"f( ! context["/48 </50 & Symb/51 s.Offset/9/52 >/53"] )"/54 )/56 (/57 e.Indent/5/58"  continue;"/60 Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::copy_evar(vm, context[17], context[18], context[5], context[6]);
  refalrts::alloc_chars(vm, context[19], context[20], "context[", 8);
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_Symb]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "] = refalrts:", 13);
  refalrts::alloc_open_call(vm, context[26]);
  refalrts::alloc_name(vm, context[27], functions[efunc_gen_StrFromDirection_D2]);
  refalrts::alloc_close_call(vm, context[28]);
  refalrts::alloc_chars(vm, context[29], context[30], "( vm, ", 6);
  refalrts::alloc_chars(vm, context[31], context[32], ", context[", 10);
  refalrts::alloc_open_call(vm, context[33]);
  refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
  refalrts::alloc_close_call(vm, context[35]);
  refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
  refalrts::alloc_open_call(vm, context[38]);
  refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
  refalrts::alloc_open_call(vm, context[40]);
  refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[42], 1UL);
  refalrts::copy_stvar(vm, context[43], context[11]);
  refalrts::alloc_close_call(vm, context[44]);
  refalrts::alloc_close_call(vm, context[45]);
  refalrts::alloc_chars(vm, context[46], context[47], "] )", 3);
  refalrts::alloc_chars(vm, context[48], context[49], "f( ! context[", 13);
  refalrts::alloc_open_call(vm, context[50]);
  refalrts::alloc_name(vm, context[51], functions[efunc_Symb]);
  refalrts::copy_stvar(vm, context[52], context[9]);
  refalrts::alloc_close_call(vm, context[53]);
  refalrts::alloc_chars(vm, context[54], context[55], "] )", 3);
  refalrts::alloc_close_bracket(vm, context[56]);
  refalrts::alloc_open_bracket(vm, context[57]);
  refalrts::copy_evar(vm, context[58], context[59], context[5], context[6]);
  refalrts::alloc_chars(vm, context[60], context[61], "  continue;", 11);
  refalrts::reinit_char(context[14], ':');
  refalrts::reinit_char(context[15], '_');
  refalrts::reinit_char(context[0], ';');
  refalrts::reinit_close_bracket(context[4]);
  refalrts::reinit_char(context[8], 'i');
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[57], context[1] );
  refalrts::link_brackets( context[7], context[56] );
  refalrts::push_stack( vm, context[53] );
  refalrts::push_stack( vm, context[50] );
  refalrts::link_brackets( context[16], context[4] );
  refalrts::push_stack( vm, context[45] );
  refalrts::push_stack( vm, context[38] );
  refalrts::push_stack( vm, context[44] );
  refalrts::push_stack( vm, context[40] );
  refalrts::push_stack( vm, context[35] );
  refalrts::push_stack( vm, context[33] );
  refalrts::push_stack( vm, context[28] );
  refalrts::push_stack( vm, context[26] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[21] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[48], context[61] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[35], context[47] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[31], context[34] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[28], context[30] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[23], context[25] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[16], context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintMatchSavem_VM("PrintMatchSave-VM", COOKIE1_, COOKIE2_, func_PrintMatchSavem_VM);


static refalrts::FnResult func_PrintCreateElem(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & PrintCreateElem/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & PrintCreateElem/4 (/9 e.new1/7 )/10 s.new2/11 s.new3/12 s.new4/13 e.new5/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.new1 as range 7
    if( ! refalrts::svar_left( context[11], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[12], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[13], context[5], context[6] ) )
      continue;
    // closed e.new5 as range 5
    do {
      // </0 & PrintCreateElem/4 (/9 e.new9/14 )/10 # Allocate/11 s.new6/12 s.new7/13 e.new8/16 >/1
      context[14] = context[7];
      context[15] = context[8];
      context[16] = context[5];
      context[17] = context[6];
      if( ! refalrts::ident_term( identifiers[ident_Allocate], context[11] ) )
        continue;
      // closed e.new9 as range 14
      // closed e.new8 as range 16
      do {
        // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Allocate/11 s.new10/12 # ElChar/13 e.new11/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_ElChar], context[13] ) )
          continue;
        // closed e.new12 as range 18
        // closed e.new11 as range 20
        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElChar/13 s.Char/26 >/1
          context[22] = context[18];
          context[23] = context[19];
          context[24] = context[20];
          context[25] = context[21];
          // closed e.Indent as range 22
          if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
            continue;
          if( ! refalrts::empty_seq( context[24], context[25] ) )
            continue;
          //DEBUG: s.ElemNumber: 12
          //DEBUG: e.Indent: 22
          //DEBUG: s.Char: 26

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_char(vm, context["/27 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/29"], \'"/30 </32 Tile{ HalfReuse: & EscapeChar/13 AsIs: s.Char/26 AsIs: >/1 }"\');"/33 )/35 Tile{ ]] }
          refalrts::alloc_chars(vm, context[27], context[28], "falrts::alloc_char(vm, context[", 31);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_chars(vm, context[30], context[31], "], \'", 4);
          refalrts::alloc_open_call(vm, context[32]);
          refalrts::alloc_chars(vm, context[33], context[34], "\');", 3);
          refalrts::alloc_close_bracket(vm, context[35]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_name(context[13], functions[efunc_EscapeChar]);
          refalrts::link_brackets( context[9], context[35] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[33], context[35] );
          res = refalrts::splice_evar( res, context[13], context[1] );
          res = refalrts::splice_evar( res, context[29], context[32] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[27], context[28] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElChar/13 >/1
          context[22] = context[18];
          context[23] = context[19];
          if( ! refalrts::empty_seq( context[20], context[21] ) )
            continue;
          // closed e.Indent as range 22
          //DEBUG: s.ElemNumber: 12
          //DEBUG: e.Indent: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_char(vm, context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
          refalrts::alloc_chars(vm, context[24], context[25], "falrts::alloc_char(vm, context[", 31);
          refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_char(context[1], ']');
          refalrts::link_brackets( context[9], context[28] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[28] );
          res = refalrts::splice_evar( res, context[12], context[1] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElChar/13 e.Info/24 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        // closed e.Info as range 24
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: e.Info: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_char(vm, context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElChar/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
        refalrts::alloc_chars(vm, context[26], context[27], "falrts::alloc_char(vm, context[", 31);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_char(vm, context[29], ']');
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::link_brackets( context[9], context[34] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[32], context[34] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[28], context[31] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Allocate/11 s.new10/12 # ElName/13 e.new11/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_ElName], context[13] ) )
          continue;
        // closed e.new12 as range 18
        // closed e.new11 as range 20
        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElName/13 s.Num/26 e./24 >/1
          context[22] = context[18];
          context[23] = context[19];
          context[24] = context[20];
          context[25] = context[21];
          // closed e.Indent as range 22
          if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
            continue;
          // closed e. as range 24
          //DEBUG: s.ElemNumber: 12
          //DEBUG: e.Indent: 22
          //DEBUG: s.Num: 26
          //DEBUG: e.: 24

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/26 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_name(vm, context["/27 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 }"], functions[efunc_"/29 </31 & CName/32 Tile{ AsIs: e./24 } >/33"]);"/34 Tile{ HalfReuse: )/1 ]] }
          refalrts::alloc_chars(vm, context[27], context[28], "falrts::alloc_name(vm, context[", 31);
          refalrts::alloc_chars(vm, context[29], context[30], "], functions[efunc_", 19);
          refalrts::alloc_open_call(vm, context[31]);
          refalrts::alloc_name(vm, context[32], functions[efunc_CName]);
          refalrts::alloc_close_call(vm, context[33]);
          refalrts::alloc_chars(vm, context[34], context[35], "]);", 3);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[9], context[1] );
          refalrts::push_stack( vm, context[33] );
          refalrts::push_stack( vm, context[31] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[33], context[35] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[29], context[32] );
          res = refalrts::splice_evar( res, context[12], context[13] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[27], context[28] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElName/13 >/1
          context[22] = context[18];
          context[23] = context[19];
          if( ! refalrts::empty_seq( context[20], context[21] ) )
            continue;
          // closed e.Indent as range 22
          //DEBUG: s.ElemNumber: 12
          //DEBUG: e.Indent: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_name(vm, context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
          refalrts::alloc_chars(vm, context[24], context[25], "falrts::alloc_name(vm, context[", 31);
          refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_char(context[1], ']');
          refalrts::link_brackets( context[9], context[28] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[28] );
          res = refalrts::splice_evar( res, context[12], context[1] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElName/13 e.Info/24 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        // closed e.Info as range 24
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: e.Info: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_name(vm, context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElName/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
        refalrts::alloc_chars(vm, context[26], context[27], "falrts::alloc_name(vm, context[", 31);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_char(vm, context[29], ']');
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::link_brackets( context[9], context[34] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[32], context[34] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[28], context[31] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Allocate/11 s.new10/12 # ElNumber/13 e.new11/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[13] ) )
          continue;
        // closed e.new12 as range 18
        // closed e.new11 as range 20
        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElNumber/13 s.Number/26 >/1
          context[22] = context[18];
          context[23] = context[19];
          context[24] = context[20];
          context[25] = context[21];
          // closed e.Indent as range 22
          if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
            continue;
          if( ! refalrts::empty_seq( context[24], context[25] ) )
            continue;
          //DEBUG: s.ElemNumber: 12
          //DEBUG: e.Indent: 22
          //DEBUG: s.Number: 26

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_number(vm, context["/27 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/29"], "/30 </32 Tile{ HalfReuse: & Symb/13 AsIs: s.Number/26 AsIs: >/1 }"UL);"/33 )/35 Tile{ ]] }
          refalrts::alloc_chars(vm, context[27], context[28], "falrts::alloc_number(vm, context[", 33);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_chars(vm, context[30], context[31], "], ", 3);
          refalrts::alloc_open_call(vm, context[32]);
          refalrts::alloc_chars(vm, context[33], context[34], "UL);", 4);
          refalrts::alloc_close_bracket(vm, context[35]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_name(context[13], functions[efunc_Symb]);
          refalrts::link_brackets( context[9], context[35] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[33], context[35] );
          res = refalrts::splice_evar( res, context[13], context[1] );
          res = refalrts::splice_evar( res, context[29], context[32] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[27], context[28] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElNumber/13 >/1
          context[22] = context[18];
          context[23] = context[19];
          if( ! refalrts::empty_seq( context[20], context[21] ) )
            continue;
          // closed e.Indent as range 22
          //DEBUG: s.ElemNumber: 12
          //DEBUG: e.Indent: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_number(vm, context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
          refalrts::alloc_chars(vm, context[24], context[25], "falrts::alloc_number(vm, context[", 33);
          refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_char(context[1], ']');
          refalrts::link_brackets( context[9], context[28] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[28] );
          res = refalrts::splice_evar( res, context[12], context[1] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElNumber/13 e.Info/24 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        // closed e.Info as range 24
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: e.Info: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_number(vm, context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElNumber/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
        refalrts::alloc_chars(vm, context[26], context[27], "falrts::alloc_number(vm, context[", 33);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_char(vm, context[29], ']');
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::link_brackets( context[9], context[34] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[32], context[34] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[28], context[31] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Allocate/11 s.new10/12 # ElIdent/13 e.new11/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[13] ) )
          continue;
        // closed e.new12 as range 18
        // closed e.new11 as range 20
        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElIdent/13 s.Num/26 e./24 >/1
          context[22] = context[18];
          context[23] = context[19];
          context[24] = context[20];
          context[25] = context[21];
          // closed e.Indent as range 22
          if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
            continue;
          // closed e. as range 24
          //DEBUG: s.ElemNumber: 12
          //DEBUG: e.Indent: 22
          //DEBUG: s.Num: 26
          //DEBUG: e.: 24

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/26 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_ident(vm, context["/27 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 }"], identifiers[ident_"/29 </31 & CName/32 Tile{ AsIs: e./24 } >/33"]);"/34 Tile{ HalfReuse: )/1 ]] }
          refalrts::alloc_chars(vm, context[27], context[28], "falrts::alloc_ident(vm, context[", 32);
          refalrts::alloc_chars(vm, context[29], context[30], "], identifiers[ident_", 21);
          refalrts::alloc_open_call(vm, context[31]);
          refalrts::alloc_name(vm, context[32], functions[efunc_CName]);
          refalrts::alloc_close_call(vm, context[33]);
          refalrts::alloc_chars(vm, context[34], context[35], "]);", 3);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[9], context[1] );
          refalrts::push_stack( vm, context[33] );
          refalrts::push_stack( vm, context[31] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[33], context[35] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[29], context[32] );
          res = refalrts::splice_evar( res, context[12], context[13] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[27], context[28] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElIdent/13 >/1
          context[22] = context[18];
          context[23] = context[19];
          if( ! refalrts::empty_seq( context[20], context[21] ) )
            continue;
          // closed e.Indent as range 22
          //DEBUG: s.ElemNumber: 12
          //DEBUG: e.Indent: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_ident(vm, context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
          refalrts::alloc_chars(vm, context[24], context[25], "falrts::alloc_ident(vm, context[", 32);
          refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_char(context[1], ']');
          refalrts::link_brackets( context[9], context[28] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[28] );
          res = refalrts::splice_evar( res, context[12], context[1] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElIdent/13 e.Info/24 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        // closed e.Info as range 24
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: e.Info: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_ident(vm, context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElIdent/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
        refalrts::alloc_chars(vm, context[26], context[27], "falrts::alloc_ident(vm, context[", 32);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_char(vm, context[29], ']');
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::link_brackets( context[9], context[34] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[32], context[34] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[28], context[31] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Allocate/11 s.new10/12 # ElOpenADT/13 e.new11/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_ElOpenADT], context[13] ) )
          continue;
        // closed e.new12 as range 18
        // closed e.new11 as range 20
        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElOpenADT/13 >/1
          context[22] = context[18];
          context[23] = context[19];
          if( ! refalrts::empty_seq( context[20], context[21] ) )
            continue;
          // closed e.Indent as range 22
          //DEBUG: s.ElemNumber: 12
          //DEBUG: e.Indent: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_open_adt(vm, context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
          refalrts::alloc_chars(vm, context[24], context[25], "falrts::alloc_open_adt(vm, context[", 35);
          refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_char(context[1], ']');
          refalrts::link_brackets( context[9], context[28] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[28] );
          res = refalrts::splice_evar( res, context[12], context[1] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElOpenADT/13 e.Info/24 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        // closed e.Info as range 24
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: e.Info: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_open_adt(vm, context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElOpenADT/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
        refalrts::alloc_chars(vm, context[26], context[27], "falrts::alloc_open_adt(vm, context[", 35);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_char(vm, context[29], ']');
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::link_brackets( context[9], context[34] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[32], context[34] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[28], context[31] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Allocate/11 s.new10/12 # ElCloseADT/13 e.new11/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_ElCloseADT], context[13] ) )
          continue;
        // closed e.new12 as range 18
        // closed e.new11 as range 20
        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElCloseADT/13 >/1
          context[22] = context[18];
          context[23] = context[19];
          if( ! refalrts::empty_seq( context[20], context[21] ) )
            continue;
          // closed e.Indent as range 22
          //DEBUG: s.ElemNumber: 12
          //DEBUG: e.Indent: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_close_adt(vm, context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
          refalrts::alloc_chars(vm, context[24], context[25], "falrts::alloc_close_adt(vm, context[", 36);
          refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_char(context[1], ']');
          refalrts::link_brackets( context[9], context[28] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[28] );
          res = refalrts::splice_evar( res, context[12], context[1] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElCloseADT/13 e.Info/24 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        // closed e.Info as range 24
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: e.Info: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_close_adt(vm, context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElCloseADT/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
        refalrts::alloc_chars(vm, context[26], context[27], "falrts::alloc_close_adt(vm, context[", 36);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_char(vm, context[29], ']');
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::link_brackets( context[9], context[34] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[32], context[34] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[28], context[31] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Allocate/11 s.new10/12 # ElOpenBracket/13 e.new11/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_ElOpenBracket], context[13] ) )
          continue;
        // closed e.new12 as range 18
        // closed e.new11 as range 20
        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElOpenBracket/13 >/1
          context[22] = context[18];
          context[23] = context[19];
          if( ! refalrts::empty_seq( context[20], context[21] ) )
            continue;
          // closed e.Indent as range 22
          //DEBUG: s.ElemNumber: 12
          //DEBUG: e.Indent: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_open_bracket(vm, context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
          refalrts::alloc_chars(vm, context[24], context[25], "falrts::alloc_open_bracket(vm, context[", 39);
          refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_char(context[1], ']');
          refalrts::link_brackets( context[9], context[28] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[28] );
          res = refalrts::splice_evar( res, context[12], context[1] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElOpenBracket/13 e.Info/24 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        // closed e.Info as range 24
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: e.Info: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_open_bracket(vm, context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElOpenBracket/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
        refalrts::alloc_chars(vm, context[26], context[27], "falrts::alloc_open_bracket(vm, context[", 39);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_char(vm, context[29], ']');
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::link_brackets( context[9], context[34] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[32], context[34] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[28], context[31] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Allocate/11 s.new10/12 # ElCloseBracket/13 e.new11/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_ElCloseBracket], context[13] ) )
          continue;
        // closed e.new12 as range 18
        // closed e.new11 as range 20
        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElCloseBracket/13 >/1
          context[22] = context[18];
          context[23] = context[19];
          if( ! refalrts::empty_seq( context[20], context[21] ) )
            continue;
          // closed e.Indent as range 22
          //DEBUG: s.ElemNumber: 12
          //DEBUG: e.Indent: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_close_bracket(vm, context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
          refalrts::alloc_chars(vm, context[24], context[25], "falrts::alloc_close_bracket(vm, context[", 40);
          refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_char(context[1], ']');
          refalrts::link_brackets( context[9], context[28] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[28] );
          res = refalrts::splice_evar( res, context[12], context[1] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElCloseBracket/13 e.Info/24 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        // closed e.Info as range 24
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: e.Info: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_close_bracket(vm, context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElCloseBracket/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
        refalrts::alloc_chars(vm, context[26], context[27], "falrts::alloc_close_bracket(vm, context[", 40);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_char(vm, context[29], ']');
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::link_brackets( context[9], context[34] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[32], context[34] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[28], context[31] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Allocate/11 s.new10/12 # ElOpenCall/13 e.new11/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_ElOpenCall], context[13] ) )
          continue;
        // closed e.new12 as range 18
        // closed e.new11 as range 20
        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElOpenCall/13 >/1
          context[22] = context[18];
          context[23] = context[19];
          if( ! refalrts::empty_seq( context[20], context[21] ) )
            continue;
          // closed e.Indent as range 22
          //DEBUG: s.ElemNumber: 12
          //DEBUG: e.Indent: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_open_call(vm, context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
          refalrts::alloc_chars(vm, context[24], context[25], "falrts::alloc_open_call(vm, context[", 36);
          refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_char(context[1], ']');
          refalrts::link_brackets( context[9], context[28] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[28] );
          res = refalrts::splice_evar( res, context[12], context[1] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElOpenCall/13 e.Info/24 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        // closed e.Info as range 24
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: e.Info: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_open_call(vm, context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElOpenCall/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
        refalrts::alloc_chars(vm, context[26], context[27], "falrts::alloc_open_call(vm, context[", 36);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_char(vm, context[29], ']');
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::link_brackets( context[9], context[34] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[32], context[34] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[28], context[31] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Allocate/11 s.new10/12 # ElCloseCall/13 e.new11/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_ElCloseCall], context[13] ) )
          continue;
        // closed e.new12 as range 18
        // closed e.new11 as range 20
        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElCloseCall/13 >/1
          context[22] = context[18];
          context[23] = context[19];
          if( ! refalrts::empty_seq( context[20], context[21] ) )
            continue;
          // closed e.Indent as range 22
          //DEBUG: s.ElemNumber: 12
          //DEBUG: e.Indent: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_close_call(vm, context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
          refalrts::alloc_chars(vm, context[24], context[25], "falrts::alloc_close_call(vm, context[", 37);
          refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_char(context[1], ']');
          refalrts::link_brackets( context[9], context[28] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[28] );
          res = refalrts::splice_evar( res, context[12], context[1] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElCloseCall/13 e.Info/24 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        // closed e.Info as range 24
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: e.Info: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_close_call(vm, context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElCloseCall/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
        refalrts::alloc_chars(vm, context[26], context[27], "falrts::alloc_close_call(vm, context[", 37);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_char(vm, context[29], ']');
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::link_brackets( context[9], context[34] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[32], context[34] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[28], context[31] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Allocate/11 s.new10/12 # ElClosureHead/13 e.new11/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_ElClosureHead], context[13] ) )
          continue;
        // closed e.new12 as range 18
        // closed e.new11 as range 20
        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElClosureHead/13 >/1
          context[22] = context[18];
          context[23] = context[19];
          if( ! refalrts::empty_seq( context[20], context[21] ) )
            continue;
          // closed e.Indent as range 22
          //DEBUG: s.ElemNumber: 12
          //DEBUG: e.Indent: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_closure_head(vm, context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
          refalrts::alloc_chars(vm, context[24], context[25], "falrts::alloc_closure_head(vm, context[", 39);
          refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_char(context[1], ']');
          refalrts::link_brackets( context[9], context[28] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[28] );
          res = refalrts::splice_evar( res, context[12], context[1] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElClosureHead/13 e.Info/24 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        // closed e.Info as range 24
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: e.Info: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_closure_head(vm, context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElClosureHead/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
        refalrts::alloc_chars(vm, context[26], context[27], "falrts::alloc_closure_head(vm, context[", 39);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_char(vm, context[29], ']');
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::link_brackets( context[9], context[34] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[32], context[34] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[28], context[31] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Allocate/11 s.new10/12 # ElUnwrappedClosure/13 e.new11/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[13] ) )
          continue;
        // closed e.new12 as range 18
        // closed e.new11 as range 20
        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElUnwrappedClosure/13 s.HeadOffset/26 >/1
          context[22] = context[18];
          context[23] = context[19];
          context[24] = context[20];
          context[25] = context[21];
          // closed e.Indent as range 22
          if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
            continue;
          if( ! refalrts::empty_seq( context[24], context[25] ) )
            continue;
          //DEBUG: s.ElemNumber: 12
          //DEBUG: e.Indent: 22
          //DEBUG: s.HeadOffset: 26

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_unwrapped_closure(vm, context["/27 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/29"], context["/30 </32 Tile{ HalfReuse: & Symb/13 AsIs: s.HeadOffset/26 AsIs: >/1 }"]);"/33 )/35 Tile{ ]] }
          refalrts::alloc_chars(vm, context[27], context[28], "falrts::alloc_unwrapped_closure(vm, context[", 44);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_chars(vm, context[30], context[31], "], context[", 11);
          refalrts::alloc_open_call(vm, context[32]);
          refalrts::alloc_chars(vm, context[33], context[34], "]);", 3);
          refalrts::alloc_close_bracket(vm, context[35]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_name(context[13], functions[efunc_Symb]);
          refalrts::link_brackets( context[9], context[35] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[33], context[35] );
          res = refalrts::splice_evar( res, context[13], context[1] );
          res = refalrts::splice_evar( res, context[29], context[32] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[27], context[28] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElUnwrappedClosure/13 >/1
          context[22] = context[18];
          context[23] = context[19];
          if( ! refalrts::empty_seq( context[20], context[21] ) )
            continue;
          // closed e.Indent as range 22
          //DEBUG: s.ElemNumber: 12
          //DEBUG: e.Indent: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_unwrapped_closure(vm, context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
          refalrts::alloc_chars(vm, context[24], context[25], "falrts::alloc_unwrapped_closure(vm, context[", 44);
          refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_char(context[1], ']');
          refalrts::link_brackets( context[9], context[28] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[28] );
          res = refalrts::splice_evar( res, context[12], context[1] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Allocate/11 s.ElemNumber/12 # ElUnwrappedClosure/13 e.Info/24 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        // closed e.Info as range 24
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: e.Info: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_unwrapped_closure(vm, context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElUnwrappedClosure/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
        refalrts::alloc_chars(vm, context[26], context[27], "falrts::alloc_unwrapped_closure(vm, context[", 44);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_char(vm, context[29], ']');
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::link_brackets( context[9], context[34] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[32], context[34] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[28], context[31] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.new14/18 )/10 # Allocate/11 s.new10/12 s.new11/13 s.new12/22 e.new13/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        // closed e.new14 as range 18
        if( ! refalrts::svar_left( context[22], context[20], context[21] ) )
          continue;
        // closed e.new13 as range 20
        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/23 )/10 # Allocate/11 s.ElemNumber/12 # ElChar/13 s.Char/22 >/1
          context[23] = context[18];
          context[24] = context[19];
          if( ! refalrts::ident_term( identifiers[ident_ElChar], context[13] ) )
            continue;
          if( ! refalrts::empty_seq( context[20], context[21] ) )
            continue;
          // closed e.Indent as range 23
          //DEBUG: s.ElemNumber: 12
          //DEBUG: s.Char: 22
          //DEBUG: e.Indent: 23

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_"/25 </27 & AllocatorFuncName*12/28 # ElChar/29 >/30"(vm, context["/31 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/33"], \'"/34 </36 Tile{ HalfReuse: & EscapeChar/13 AsIs: s.Char/22 AsIs: >/1 }"\');"/37 )/39 Tile{ ]] }
          refalrts::alloc_chars(vm, context[25], context[26], "falrts::alloc_", 14);
          refalrts::alloc_open_call(vm, context[27]);
          refalrts::alloc_name(vm, context[28], functions[efunc_gen_AllocatorFuncName_D12]);
          refalrts::alloc_ident(vm, context[29], identifiers[ident_ElChar]);
          refalrts::alloc_close_call(vm, context[30]);
          refalrts::alloc_chars(vm, context[31], context[32], "(vm, context[", 13);
          refalrts::alloc_close_call(vm, context[33]);
          refalrts::alloc_chars(vm, context[34], context[35], "], \'", 4);
          refalrts::alloc_open_call(vm, context[36]);
          refalrts::alloc_chars(vm, context[37], context[38], "\');", 3);
          refalrts::alloc_close_bracket(vm, context[39]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_name(context[13], functions[efunc_EscapeChar]);
          refalrts::link_brackets( context[9], context[39] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[36] );
          refalrts::push_stack( vm, context[33] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[27] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[37], context[39] );
          res = refalrts::splice_evar( res, context[13], context[1] );
          res = refalrts::splice_evar( res, context[33], context[36] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[25], context[32] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/23 )/10 # Allocate/11 s.ElemNumber/12 # ElName/13 s.Num/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::ident_term( identifiers[ident_ElName], context[13] ) )
            continue;
          // closed e.Indent as range 23
          // closed e. as range 25
          //DEBUG: s.ElemNumber: 12
          //DEBUG: s.Num: 22
          //DEBUG: e.Indent: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/22 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_"/27 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElName/29 >/30"(vm, context["/31 </33 & Symb/34 Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 }"], functions[efunc_"/35 </37 & CName/38 Tile{ AsIs: e./25 } >/39"]);"/40 Tile{ HalfReuse: )/1 ]] }
          refalrts::alloc_chars(vm, context[27], context[28], "falrts::alloc_", 14);
          refalrts::alloc_ident(vm, context[29], identifiers[ident_ElName]);
          refalrts::alloc_close_call(vm, context[30]);
          refalrts::alloc_chars(vm, context[31], context[32], "(vm, context[", 13);
          refalrts::alloc_open_call(vm, context[33]);
          refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
          refalrts::alloc_chars(vm, context[35], context[36], "], functions[efunc_", 19);
          refalrts::alloc_open_call(vm, context[37]);
          refalrts::alloc_name(vm, context[38], functions[efunc_CName]);
          refalrts::alloc_close_call(vm, context[39]);
          refalrts::alloc_chars(vm, context[40], context[41], "]);", 3);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[9], context[1] );
          refalrts::push_stack( vm, context[39] );
          refalrts::push_stack( vm, context[37] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[33] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[39], context[41] );
          res = refalrts::splice_evar( res, context[25], context[26] );
          res = refalrts::splice_evar( res, context[35], context[38] );
          res = refalrts::splice_evar( res, context[12], context[13] );
          res = refalrts::splice_evar( res, context[29], context[34] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[27], context[28] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/23 )/10 # Allocate/11 s.ElemNumber/12 # ElNumber/13 s.Number/22 >/1
          context[23] = context[18];
          context[24] = context[19];
          if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[13] ) )
            continue;
          if( ! refalrts::empty_seq( context[20], context[21] ) )
            continue;
          // closed e.Indent as range 23
          //DEBUG: s.ElemNumber: 12
          //DEBUG: s.Number: 22
          //DEBUG: e.Indent: 23

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_"/25 </27 & AllocatorFuncName*12/28 # ElNumber/29 >/30"(vm, context["/31 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/33"], "/34 </36 Tile{ HalfReuse: & Symb/13 AsIs: s.Number/22 AsIs: >/1 }"UL);"/37 )/39 Tile{ ]] }
          refalrts::alloc_chars(vm, context[25], context[26], "falrts::alloc_", 14);
          refalrts::alloc_open_call(vm, context[27]);
          refalrts::alloc_name(vm, context[28], functions[efunc_gen_AllocatorFuncName_D12]);
          refalrts::alloc_ident(vm, context[29], identifiers[ident_ElNumber]);
          refalrts::alloc_close_call(vm, context[30]);
          refalrts::alloc_chars(vm, context[31], context[32], "(vm, context[", 13);
          refalrts::alloc_close_call(vm, context[33]);
          refalrts::alloc_chars(vm, context[34], context[35], "], ", 3);
          refalrts::alloc_open_call(vm, context[36]);
          refalrts::alloc_chars(vm, context[37], context[38], "UL);", 4);
          refalrts::alloc_close_bracket(vm, context[39]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_name(context[13], functions[efunc_Symb]);
          refalrts::link_brackets( context[9], context[39] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[36] );
          refalrts::push_stack( vm, context[33] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[27] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[37], context[39] );
          res = refalrts::splice_evar( res, context[13], context[1] );
          res = refalrts::splice_evar( res, context[33], context[36] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[25], context[32] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/23 )/10 # Allocate/11 s.ElemNumber/12 # ElIdent/13 s.Num/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[13] ) )
            continue;
          // closed e.Indent as range 23
          // closed e. as range 25
          //DEBUG: s.ElemNumber: 12
          //DEBUG: s.Num: 22
          //DEBUG: e.Indent: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/22 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_"/27 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElIdent/29 >/30"(vm, context["/31 </33 & Symb/34 Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 }"], identifiers[ident_"/35 </37 & CName/38 Tile{ AsIs: e./25 } >/39"]);"/40 Tile{ HalfReuse: )/1 ]] }
          refalrts::alloc_chars(vm, context[27], context[28], "falrts::alloc_", 14);
          refalrts::alloc_ident(vm, context[29], identifiers[ident_ElIdent]);
          refalrts::alloc_close_call(vm, context[30]);
          refalrts::alloc_chars(vm, context[31], context[32], "(vm, context[", 13);
          refalrts::alloc_open_call(vm, context[33]);
          refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
          refalrts::alloc_chars(vm, context[35], context[36], "], identifiers[ident_", 21);
          refalrts::alloc_open_call(vm, context[37]);
          refalrts::alloc_name(vm, context[38], functions[efunc_CName]);
          refalrts::alloc_close_call(vm, context[39]);
          refalrts::alloc_chars(vm, context[40], context[41], "]);", 3);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[9], context[1] );
          refalrts::push_stack( vm, context[39] );
          refalrts::push_stack( vm, context[37] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[33] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[39], context[41] );
          res = refalrts::splice_evar( res, context[25], context[26] );
          res = refalrts::splice_evar( res, context[35], context[38] );
          res = refalrts::splice_evar( res, context[12], context[13] );
          res = refalrts::splice_evar( res, context[29], context[34] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[27], context[28] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PrintCreateElem/4 (/9 e.Indent/23 )/10 # Allocate/11 s.ElemNumber/12 # ElUnwrappedClosure/13 s.HeadOffset/22 >/1
        context[23] = context[18];
        context[24] = context[19];
        if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[13] ) )
          continue;
        if( ! refalrts::empty_seq( context[20], context[21] ) )
          continue;
        // closed e.Indent as range 23
        //DEBUG: s.ElemNumber: 12
        //DEBUG: s.HeadOffset: 22
        //DEBUG: e.Indent: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_"/25 </27 & AllocatorFuncName*12/28 # ElUnwrappedClosure/29 >/30"(vm, context["/31 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/33"], context["/34 </36 Tile{ HalfReuse: & Symb/13 AsIs: s.HeadOffset/22 AsIs: >/1 }"]);"/37 )/39 Tile{ ]] }
        refalrts::alloc_chars(vm, context[25], context[26], "falrts::alloc_", 14);
        refalrts::alloc_open_call(vm, context[27]);
        refalrts::alloc_name(vm, context[28], functions[efunc_gen_AllocatorFuncName_D12]);
        refalrts::alloc_ident(vm, context[29], identifiers[ident_ElUnwrappedClosure]);
        refalrts::alloc_close_call(vm, context[30]);
        refalrts::alloc_chars(vm, context[31], context[32], "(vm, context[", 13);
        refalrts::alloc_close_call(vm, context[33]);
        refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
        refalrts::alloc_open_call(vm, context[36]);
        refalrts::alloc_chars(vm, context[37], context[38], "]);", 3);
        refalrts::alloc_close_bracket(vm, context[39]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_name(context[13], functions[efunc_Symb]);
        refalrts::link_brackets( context[9], context[39] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[33] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[27] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[37], context[39] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[33], context[36] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[25], context[32] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/18 )/10 # Allocate/11 s.ElemNumber/12 s.ElementType/13 >/1
        context[18] = context[14];
        context[19] = context[15];
        if( ! refalrts::empty_seq( context[16], context[17] ) )
          continue;
        // closed e.Indent as range 18
        //DEBUG: s.ElemNumber: 12
        //DEBUG: s.ElementType: 13
        //DEBUG: e.Indent: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/18 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_"/20 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } Tile{ AsIs: s.ElementType/13 AsIs: >/1 }"(vm, context["/22 </24 & Symb/25 Tile{ AsIs: s.ElemNumber/12 } >/26"]);"/27 )/29 Tile{ ]] }
        refalrts::alloc_chars(vm, context[20], context[21], "falrts::alloc_", 14);
        refalrts::alloc_chars(vm, context[22], context[23], "(vm, context[", 13);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Symb]);
        refalrts::alloc_close_call(vm, context[26]);
        refalrts::alloc_chars(vm, context[27], context[28], "]);", 3);
        refalrts::alloc_close_bracket(vm, context[29]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
        refalrts::link_brackets( context[9], context[29] );
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[29] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PrintCreateElem/4 (/9 e.Indent/18 )/10 # Allocate/11 s.ElemNumber/12 s.ElementType/13 e.Info/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      // closed e.Indent as range 18
      // closed e.Info as range 20
      //DEBUG: s.ElemNumber: 12
      //DEBUG: s.ElementType: 13
      //DEBUG: e.Indent: 18
      //DEBUG: e.Info: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/18 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::alloc_"/22 </24 & AllocatorFuncName*12/25 s.ElementType/13/26 >/27"(vm, context["/28 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/30 ']'/31 </32 & AllocatorFuncArgument*6/33 Tile{ AsIs: s.ElementType/13 AsIs: e.Info/20 AsIs: >/1 }");"/34 )/36 Tile{ ]] }
      refalrts::alloc_chars(vm, context[22], context[23], "falrts::alloc_", 14);
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_name(vm, context[25], functions[efunc_gen_AllocatorFuncName_D12]);
      refalrts::copy_stvar(vm, context[26], context[13]);
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::alloc_chars(vm, context[28], context[29], "(vm, context[", 13);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::alloc_char(vm, context[31], ']');
      refalrts::alloc_open_call(vm, context[32]);
      refalrts::alloc_name(vm, context[33], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_chars(vm, context[34], context[35], ");", 2);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::reinit_char(context[10], 'r');
      refalrts::reinit_char(context[11], 'e');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::link_brackets( context[9], context[36] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[24] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[34], context[36] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[30], context[33] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[22], context[29] );
      res = refalrts::splice_evar( res, context[9], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintCreateElem/4 (/9 e.new9/14 )/10 # Reinit/11 s.new6/12 s.new7/13 e.new8/16 >/1
    context[14] = context[7];
    context[15] = context[8];
    context[16] = context[5];
    context[17] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_Reinit], context[11] ) )
      continue;
    // closed e.new9 as range 14
    // closed e.new8 as range 16
    do {
      // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Reinit/11 s.new10/12 # ElChar/13 e.new11/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_ElChar], context[13] ) )
        continue;
      // closed e.new12 as range 18
      // closed e.new11 as range 20
      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElChar/13 s.Char/26 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
          continue;
        if( ! refalrts::empty_seq( context[24], context[25] ) )
          continue;
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: s.Char: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_char(context["/27 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/29"], \'"/30 </32 Tile{ HalfReuse: & EscapeChar/13 AsIs: s.Char/26 AsIs: >/1 }"\');"/33 )/35 Tile{ ]] }
        refalrts::alloc_chars(vm, context[27], context[28], "falrts::reinit_char(context[", 28);
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::alloc_chars(vm, context[30], context[31], "], \'", 4);
        refalrts::alloc_open_call(vm, context[32]);
        refalrts::alloc_chars(vm, context[33], context[34], "\');", 3);
        refalrts::alloc_close_bracket(vm, context[35]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_name(context[13], functions[efunc_EscapeChar]);
        refalrts::link_brackets( context[9], context[35] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[32] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[33], context[35] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[29], context[32] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElChar/13 >/1
        context[22] = context[18];
        context[23] = context[19];
        if( ! refalrts::empty_seq( context[20], context[21] ) )
          continue;
        // closed e.Indent as range 22
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_char(context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
        refalrts::alloc_chars(vm, context[24], context[25], "falrts::reinit_char(context[", 28);
        refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[13]);
        refalrts::reinit_char(context[1], ']');
        refalrts::link_brackets( context[9], context[28] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[28] );
        res = refalrts::splice_evar( res, context[12], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElChar/13 e.Info/24 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      // closed e.Indent as range 22
      // closed e.Info as range 24
      //DEBUG: s.ElemNumber: 12
      //DEBUG: e.Indent: 22
      //DEBUG: e.Info: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_char(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElChar/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
      refalrts::alloc_chars(vm, context[26], context[27], "falrts::reinit_char(context[", 28);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_char(vm, context[29], ']');
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_char(context[10], 'r');
      refalrts::reinit_char(context[11], 'e');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::link_brackets( context[9], context[34] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[9], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Reinit/11 s.new10/12 # ElName/13 e.new11/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_ElName], context[13] ) )
        continue;
      // closed e.new12 as range 18
      // closed e.new11 as range 20
      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElName/13 s.Num/26 e./24 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
          continue;
        // closed e. as range 24
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: s.Num: 26
        //DEBUG: e.: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/26 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_name(context["/27 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 }"], functions[efunc_"/29 </31 & CName/32 Tile{ AsIs: e./24 } >/33"]);"/34 Tile{ HalfReuse: )/1 ]] }
        refalrts::alloc_chars(vm, context[27], context[28], "falrts::reinit_name(context[", 28);
        refalrts::alloc_chars(vm, context[29], context[30], "], functions[efunc_", 19);
        refalrts::alloc_open_call(vm, context[31]);
        refalrts::alloc_name(vm, context[32], functions[efunc_CName]);
        refalrts::alloc_close_call(vm, context[33]);
        refalrts::alloc_chars(vm, context[34], context[35], "]);", 3);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[13]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[9], context[1] );
        refalrts::push_stack( vm, context[33] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[33], context[35] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[29], context[32] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElName/13 >/1
        context[22] = context[18];
        context[23] = context[19];
        if( ! refalrts::empty_seq( context[20], context[21] ) )
          continue;
        // closed e.Indent as range 22
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_name(context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
        refalrts::alloc_chars(vm, context[24], context[25], "falrts::reinit_name(context[", 28);
        refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[13]);
        refalrts::reinit_char(context[1], ']');
        refalrts::link_brackets( context[9], context[28] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[28] );
        res = refalrts::splice_evar( res, context[12], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElName/13 e.Info/24 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      // closed e.Indent as range 22
      // closed e.Info as range 24
      //DEBUG: s.ElemNumber: 12
      //DEBUG: e.Indent: 22
      //DEBUG: e.Info: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_name(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElName/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
      refalrts::alloc_chars(vm, context[26], context[27], "falrts::reinit_name(context[", 28);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_char(vm, context[29], ']');
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_char(context[10], 'r');
      refalrts::reinit_char(context[11], 'e');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::link_brackets( context[9], context[34] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[9], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Reinit/11 s.new10/12 # ElNumber/13 e.new11/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[13] ) )
        continue;
      // closed e.new12 as range 18
      // closed e.new11 as range 20
      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElNumber/13 s.Number/26 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
          continue;
        if( ! refalrts::empty_seq( context[24], context[25] ) )
          continue;
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: s.Number: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_number(context["/27 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/29"], "/30 </32 Tile{ HalfReuse: & Symb/13 AsIs: s.Number/26 AsIs: >/1 }"UL);"/33 )/35 Tile{ ]] }
        refalrts::alloc_chars(vm, context[27], context[28], "falrts::reinit_number(context[", 30);
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::alloc_chars(vm, context[30], context[31], "], ", 3);
        refalrts::alloc_open_call(vm, context[32]);
        refalrts::alloc_chars(vm, context[33], context[34], "UL);", 4);
        refalrts::alloc_close_bracket(vm, context[35]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_name(context[13], functions[efunc_Symb]);
        refalrts::link_brackets( context[9], context[35] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[32] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[33], context[35] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[29], context[32] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElNumber/13 >/1
        context[22] = context[18];
        context[23] = context[19];
        if( ! refalrts::empty_seq( context[20], context[21] ) )
          continue;
        // closed e.Indent as range 22
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_number(context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
        refalrts::alloc_chars(vm, context[24], context[25], "falrts::reinit_number(context[", 30);
        refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[13]);
        refalrts::reinit_char(context[1], ']');
        refalrts::link_brackets( context[9], context[28] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[28] );
        res = refalrts::splice_evar( res, context[12], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElNumber/13 e.Info/24 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      // closed e.Indent as range 22
      // closed e.Info as range 24
      //DEBUG: s.ElemNumber: 12
      //DEBUG: e.Indent: 22
      //DEBUG: e.Info: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_number(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElNumber/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
      refalrts::alloc_chars(vm, context[26], context[27], "falrts::reinit_number(context[", 30);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_char(vm, context[29], ']');
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_char(context[10], 'r');
      refalrts::reinit_char(context[11], 'e');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::link_brackets( context[9], context[34] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[9], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Reinit/11 s.new10/12 # ElIdent/13 e.new11/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[13] ) )
        continue;
      // closed e.new12 as range 18
      // closed e.new11 as range 20
      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElIdent/13 s.Num/26 e./24 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
          continue;
        // closed e. as range 24
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: s.Num: 26
        //DEBUG: e.: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/26 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_ident(context["/27 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 }"], identifiers[ident_"/29 </31 & CName/32 Tile{ AsIs: e./24 } >/33"]);"/34 Tile{ HalfReuse: )/1 ]] }
        refalrts::alloc_chars(vm, context[27], context[28], "falrts::reinit_ident(context[", 29);
        refalrts::alloc_chars(vm, context[29], context[30], "], identifiers[ident_", 21);
        refalrts::alloc_open_call(vm, context[31]);
        refalrts::alloc_name(vm, context[32], functions[efunc_CName]);
        refalrts::alloc_close_call(vm, context[33]);
        refalrts::alloc_chars(vm, context[34], context[35], "]);", 3);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[13]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[9], context[1] );
        refalrts::push_stack( vm, context[33] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[33], context[35] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[29], context[32] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElIdent/13 >/1
        context[22] = context[18];
        context[23] = context[19];
        if( ! refalrts::empty_seq( context[20], context[21] ) )
          continue;
        // closed e.Indent as range 22
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_ident(context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
        refalrts::alloc_chars(vm, context[24], context[25], "falrts::reinit_ident(context[", 29);
        refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[13]);
        refalrts::reinit_char(context[1], ']');
        refalrts::link_brackets( context[9], context[28] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[28] );
        res = refalrts::splice_evar( res, context[12], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElIdent/13 e.Info/24 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      // closed e.Indent as range 22
      // closed e.Info as range 24
      //DEBUG: s.ElemNumber: 12
      //DEBUG: e.Indent: 22
      //DEBUG: e.Info: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_ident(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElIdent/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
      refalrts::alloc_chars(vm, context[26], context[27], "falrts::reinit_ident(context[", 29);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_char(vm, context[29], ']');
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_char(context[10], 'r');
      refalrts::reinit_char(context[11], 'e');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::link_brackets( context[9], context[34] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[9], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Reinit/11 s.new10/12 # ElOpenADT/13 e.new11/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_ElOpenADT], context[13] ) )
        continue;
      // closed e.new12 as range 18
      // closed e.new11 as range 20
      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElOpenADT/13 >/1
        context[22] = context[18];
        context[23] = context[19];
        if( ! refalrts::empty_seq( context[20], context[21] ) )
          continue;
        // closed e.Indent as range 22
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_open_adt(context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
        refalrts::alloc_chars(vm, context[24], context[25], "falrts::reinit_open_adt(context[", 32);
        refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[13]);
        refalrts::reinit_char(context[1], ']');
        refalrts::link_brackets( context[9], context[28] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[28] );
        res = refalrts::splice_evar( res, context[12], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElOpenADT/13 e.Info/24 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      // closed e.Indent as range 22
      // closed e.Info as range 24
      //DEBUG: s.ElemNumber: 12
      //DEBUG: e.Indent: 22
      //DEBUG: e.Info: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_open_adt(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElOpenADT/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
      refalrts::alloc_chars(vm, context[26], context[27], "falrts::reinit_open_adt(context[", 32);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_char(vm, context[29], ']');
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_char(context[10], 'r');
      refalrts::reinit_char(context[11], 'e');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::link_brackets( context[9], context[34] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[9], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintCreateElem/4 (/9 e.Indent/18 )/10 # Reinit/11 s.ElemNumber/12 # ElCloseADT/13 >/1
    context[18] = context[14];
    context[19] = context[15];
    if( ! refalrts::ident_term( identifiers[ident_ElCloseADT], context[13] ) )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    // closed e.Indent as range 18
    //DEBUG: s.ElemNumber: 12
    //DEBUG: e.Indent: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/18 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_close_adt(context["/20 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/22 )/24 Tile{ ]] }
    refalrts::alloc_chars(vm, context[20], context[21], "falrts::reinit_close_adt(context[", 33);
    refalrts::alloc_chars(vm, context[22], context[23], ");", 2);
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::reinit_char(context[10], 'r');
    refalrts::reinit_char(context[11], 'e');
    refalrts::update_name(context[4], functions[efunc_Symb]);
    refalrts::reinit_close_call(context[13]);
    refalrts::reinit_char(context[1], ']');
    refalrts::link_brackets( context[9], context[24] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[9], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintCreateElem/4 (/9 e.new1/7 )/10 s.new2/11 s.new3/12 s.new4/13 e.new5/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.new1 as range 7
    if( ! refalrts::svar_left( context[11], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[12], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[13], context[5], context[6] ) )
      continue;
    // closed e.new5 as range 5
    do {
      // </0 & PrintCreateElem/4 (/9 e.new9/14 )/10 # Reinit/11 s.new6/12 s.new7/13 e.new8/16 >/1
      context[14] = context[7];
      context[15] = context[8];
      context[16] = context[5];
      context[17] = context[6];
      if( ! refalrts::ident_term( identifiers[ident_Reinit], context[11] ) )
        continue;
      // closed e.new9 as range 14
      // closed e.new8 as range 16
      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/18 )/10 # Reinit/11 s.ElemNumber/12 # ElCloseADT/13 e.Info/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_ElCloseADT], context[13] ) )
          continue;
        // closed e.Indent as range 18
        // closed e.Info as range 20
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 18
        //DEBUG: e.Info: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/18 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_close_adt(context["/22 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/24 ']'/25 </26 & AllocatorFuncArgument*6/27 Tile{ AsIs: # ElCloseADT/13 AsIs: e.Info/20 AsIs: >/1 }");"/28 )/30 Tile{ ]] }
        refalrts::alloc_chars(vm, context[22], context[23], "falrts::reinit_close_adt(context[", 33);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_char(vm, context[25], ']');
        refalrts::alloc_open_call(vm, context[26]);
        refalrts::alloc_name(vm, context[27], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::alloc_chars(vm, context[28], context[29], ");", 2);
        refalrts::alloc_close_bracket(vm, context[30]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::link_brackets( context[9], context[30] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[28], context[30] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[24], context[27] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Reinit/11 s.new10/12 # ElOpenBracket/13 e.new11/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_ElOpenBracket], context[13] ) )
          continue;
        // closed e.new12 as range 18
        // closed e.new11 as range 20
        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElOpenBracket/13 >/1
          context[22] = context[18];
          context[23] = context[19];
          if( ! refalrts::empty_seq( context[20], context[21] ) )
            continue;
          // closed e.Indent as range 22
          //DEBUG: s.ElemNumber: 12
          //DEBUG: e.Indent: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_open_bracket(context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
          refalrts::alloc_chars(vm, context[24], context[25], "falrts::reinit_open_bracket(context[", 36);
          refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_char(context[1], ']');
          refalrts::link_brackets( context[9], context[28] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[28] );
          res = refalrts::splice_evar( res, context[12], context[1] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElOpenBracket/13 e.Info/24 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        // closed e.Info as range 24
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: e.Info: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_open_bracket(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElOpenBracket/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
        refalrts::alloc_chars(vm, context[26], context[27], "falrts::reinit_open_bracket(context[", 36);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_char(vm, context[29], ']');
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::link_brackets( context[9], context[34] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[32], context[34] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[28], context[31] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Reinit/11 s.new10/12 # ElCloseBracket/13 e.new11/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_ElCloseBracket], context[13] ) )
          continue;
        // closed e.new12 as range 18
        // closed e.new11 as range 20
        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElCloseBracket/13 >/1
          context[22] = context[18];
          context[23] = context[19];
          if( ! refalrts::empty_seq( context[20], context[21] ) )
            continue;
          // closed e.Indent as range 22
          //DEBUG: s.ElemNumber: 12
          //DEBUG: e.Indent: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_close_bracket(context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
          refalrts::alloc_chars(vm, context[24], context[25], "falrts::reinit_close_bracket(context[", 37);
          refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_char(context[1], ']');
          refalrts::link_brackets( context[9], context[28] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[28] );
          res = refalrts::splice_evar( res, context[12], context[1] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElCloseBracket/13 e.Info/24 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        // closed e.Info as range 24
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: e.Info: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_close_bracket(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElCloseBracket/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
        refalrts::alloc_chars(vm, context[26], context[27], "falrts::reinit_close_bracket(context[", 37);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_char(vm, context[29], ']');
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::link_brackets( context[9], context[34] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[32], context[34] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[28], context[31] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Reinit/11 s.new10/12 # ElOpenCall/13 e.new11/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_ElOpenCall], context[13] ) )
          continue;
        // closed e.new12 as range 18
        // closed e.new11 as range 20
        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElOpenCall/13 >/1
          context[22] = context[18];
          context[23] = context[19];
          if( ! refalrts::empty_seq( context[20], context[21] ) )
            continue;
          // closed e.Indent as range 22
          //DEBUG: s.ElemNumber: 12
          //DEBUG: e.Indent: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_open_call(context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
          refalrts::alloc_chars(vm, context[24], context[25], "falrts::reinit_open_call(context[", 33);
          refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_char(context[1], ']');
          refalrts::link_brackets( context[9], context[28] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[28] );
          res = refalrts::splice_evar( res, context[12], context[1] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElOpenCall/13 e.Info/24 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        // closed e.Info as range 24
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: e.Info: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_open_call(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElOpenCall/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
        refalrts::alloc_chars(vm, context[26], context[27], "falrts::reinit_open_call(context[", 33);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_char(vm, context[29], ']');
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::link_brackets( context[9], context[34] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[32], context[34] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[28], context[31] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Reinit/11 s.new10/12 # ElCloseCall/13 e.new11/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_ElCloseCall], context[13] ) )
          continue;
        // closed e.new12 as range 18
        // closed e.new11 as range 20
        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElCloseCall/13 >/1
          context[22] = context[18];
          context[23] = context[19];
          if( ! refalrts::empty_seq( context[20], context[21] ) )
            continue;
          // closed e.Indent as range 22
          //DEBUG: s.ElemNumber: 12
          //DEBUG: e.Indent: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_close_call(context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
          refalrts::alloc_chars(vm, context[24], context[25], "falrts::reinit_close_call(context[", 34);
          refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_char(context[1], ']');
          refalrts::link_brackets( context[9], context[28] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[28] );
          res = refalrts::splice_evar( res, context[12], context[1] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElCloseCall/13 e.Info/24 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        // closed e.Info as range 24
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: e.Info: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_close_call(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElCloseCall/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
        refalrts::alloc_chars(vm, context[26], context[27], "falrts::reinit_close_call(context[", 34);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_char(vm, context[29], ']');
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::link_brackets( context[9], context[34] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[32], context[34] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[28], context[31] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Reinit/11 s.new10/12 # ElClosureHead/13 e.new11/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_ElClosureHead], context[13] ) )
          continue;
        // closed e.new12 as range 18
        // closed e.new11 as range 20
        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElClosureHead/13 >/1
          context[22] = context[18];
          context[23] = context[19];
          if( ! refalrts::empty_seq( context[20], context[21] ) )
            continue;
          // closed e.Indent as range 22
          //DEBUG: s.ElemNumber: 12
          //DEBUG: e.Indent: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_closure_head(context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
          refalrts::alloc_chars(vm, context[24], context[25], "falrts::reinit_closure_head(context[", 36);
          refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_char(context[1], ']');
          refalrts::link_brackets( context[9], context[28] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[28] );
          res = refalrts::splice_evar( res, context[12], context[1] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElClosureHead/13 e.Info/24 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        // closed e.Info as range 24
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: e.Info: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_closure_head(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElClosureHead/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
        refalrts::alloc_chars(vm, context[26], context[27], "falrts::reinit_closure_head(context[", 36);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_char(vm, context[29], ']');
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::link_brackets( context[9], context[34] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[32], context[34] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[28], context[31] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Reinit/11 s.new10/12 # ElUnwrappedClosure/13 e.new11/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[13] ) )
          continue;
        // closed e.new12 as range 18
        // closed e.new11 as range 20
        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElUnwrappedClosure/13 s.HeadOffset/26 >/1
          context[22] = context[18];
          context[23] = context[19];
          context[24] = context[20];
          context[25] = context[21];
          // closed e.Indent as range 22
          if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
            continue;
          if( ! refalrts::empty_seq( context[24], context[25] ) )
            continue;
          //DEBUG: s.ElemNumber: 12
          //DEBUG: e.Indent: 22
          //DEBUG: s.HeadOffset: 26

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_unwrapped_closure(context["/27 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/29"], context["/30 </32 Tile{ HalfReuse: & Symb/13 AsIs: s.HeadOffset/26 AsIs: >/1 }"]);"/33 )/35 Tile{ ]] }
          refalrts::alloc_chars(vm, context[27], context[28], "falrts::reinit_unwrapped_closure(context[", 41);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_chars(vm, context[30], context[31], "], context[", 11);
          refalrts::alloc_open_call(vm, context[32]);
          refalrts::alloc_chars(vm, context[33], context[34], "]);", 3);
          refalrts::alloc_close_bracket(vm, context[35]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_name(context[13], functions[efunc_Symb]);
          refalrts::link_brackets( context[9], context[35] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[33], context[35] );
          res = refalrts::splice_evar( res, context[13], context[1] );
          res = refalrts::splice_evar( res, context[29], context[32] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[27], context[28] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElUnwrappedClosure/13 >/1
          context[22] = context[18];
          context[23] = context[19];
          if( ! refalrts::empty_seq( context[20], context[21] ) )
            continue;
          // closed e.Indent as range 22
          //DEBUG: s.ElemNumber: 12
          //DEBUG: e.Indent: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_unwrapped_closure(context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
          refalrts::alloc_chars(vm, context[24], context[25], "falrts::reinit_unwrapped_closure(context[", 41);
          refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_char(context[1], ']');
          refalrts::link_brackets( context[9], context[28] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[28] );
          res = refalrts::splice_evar( res, context[12], context[1] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Reinit/11 s.ElemNumber/12 # ElUnwrappedClosure/13 e.Info/24 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        // closed e.Info as range 24
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: e.Info: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_unwrapped_closure(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElUnwrappedClosure/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
        refalrts::alloc_chars(vm, context[26], context[27], "falrts::reinit_unwrapped_closure(context[", 41);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_char(vm, context[29], ']');
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
        refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::link_brackets( context[9], context[34] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[32], context[34] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[28], context[31] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.new14/18 )/10 # Reinit/11 s.new10/12 s.new11/13 s.new12/22 e.new13/20 >/1
        context[18] = context[14];
        context[19] = context[15];
        context[20] = context[16];
        context[21] = context[17];
        // closed e.new14 as range 18
        if( ! refalrts::svar_left( context[22], context[20], context[21] ) )
          continue;
        // closed e.new13 as range 20
        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/23 )/10 # Reinit/11 s.ElemNumber/12 # ElChar/13 s.Char/22 >/1
          context[23] = context[18];
          context[24] = context[19];
          if( ! refalrts::ident_term( identifiers[ident_ElChar], context[13] ) )
            continue;
          if( ! refalrts::empty_seq( context[20], context[21] ) )
            continue;
          // closed e.Indent as range 23
          //DEBUG: s.ElemNumber: 12
          //DEBUG: s.Char: 22
          //DEBUG: e.Indent: 23

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_"/25 </27 & AllocatorFuncName*12/28 # ElChar/29 >/30"(context["/31 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/33"], \'"/34 </36 Tile{ HalfReuse: & EscapeChar/13 AsIs: s.Char/22 AsIs: >/1 }"\');"/37 )/39 Tile{ ]] }
          refalrts::alloc_chars(vm, context[25], context[26], "falrts::reinit_", 15);
          refalrts::alloc_open_call(vm, context[27]);
          refalrts::alloc_name(vm, context[28], functions[efunc_gen_AllocatorFuncName_D12]);
          refalrts::alloc_ident(vm, context[29], identifiers[ident_ElChar]);
          refalrts::alloc_close_call(vm, context[30]);
          refalrts::alloc_chars(vm, context[31], context[32], "(context[", 9);
          refalrts::alloc_close_call(vm, context[33]);
          refalrts::alloc_chars(vm, context[34], context[35], "], \'", 4);
          refalrts::alloc_open_call(vm, context[36]);
          refalrts::alloc_chars(vm, context[37], context[38], "\');", 3);
          refalrts::alloc_close_bracket(vm, context[39]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_name(context[13], functions[efunc_EscapeChar]);
          refalrts::link_brackets( context[9], context[39] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[36] );
          refalrts::push_stack( vm, context[33] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[27] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[37], context[39] );
          res = refalrts::splice_evar( res, context[13], context[1] );
          res = refalrts::splice_evar( res, context[33], context[36] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[25], context[32] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/23 )/10 # Reinit/11 s.ElemNumber/12 # ElName/13 s.Num/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::ident_term( identifiers[ident_ElName], context[13] ) )
            continue;
          // closed e.Indent as range 23
          // closed e. as range 25
          //DEBUG: s.ElemNumber: 12
          //DEBUG: s.Num: 22
          //DEBUG: e.Indent: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/22 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_"/27 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElName/29 >/30"(context["/31 </33 & Symb/34 Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 }"], functions[efunc_"/35 </37 & CName/38 Tile{ AsIs: e./25 } >/39"]);"/40 Tile{ HalfReuse: )/1 ]] }
          refalrts::alloc_chars(vm, context[27], context[28], "falrts::reinit_", 15);
          refalrts::alloc_ident(vm, context[29], identifiers[ident_ElName]);
          refalrts::alloc_close_call(vm, context[30]);
          refalrts::alloc_chars(vm, context[31], context[32], "(context[", 9);
          refalrts::alloc_open_call(vm, context[33]);
          refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
          refalrts::alloc_chars(vm, context[35], context[36], "], functions[efunc_", 19);
          refalrts::alloc_open_call(vm, context[37]);
          refalrts::alloc_name(vm, context[38], functions[efunc_CName]);
          refalrts::alloc_close_call(vm, context[39]);
          refalrts::alloc_chars(vm, context[40], context[41], "]);", 3);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[9], context[1] );
          refalrts::push_stack( vm, context[39] );
          refalrts::push_stack( vm, context[37] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[33] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[39], context[41] );
          res = refalrts::splice_evar( res, context[25], context[26] );
          res = refalrts::splice_evar( res, context[35], context[38] );
          res = refalrts::splice_evar( res, context[12], context[13] );
          res = refalrts::splice_evar( res, context[29], context[34] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[27], context[28] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/23 )/10 # Reinit/11 s.ElemNumber/12 # ElNumber/13 s.Number/22 >/1
          context[23] = context[18];
          context[24] = context[19];
          if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[13] ) )
            continue;
          if( ! refalrts::empty_seq( context[20], context[21] ) )
            continue;
          // closed e.Indent as range 23
          //DEBUG: s.ElemNumber: 12
          //DEBUG: s.Number: 22
          //DEBUG: e.Indent: 23

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_"/25 </27 & AllocatorFuncName*12/28 # ElNumber/29 >/30"(context["/31 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/33"], "/34 </36 Tile{ HalfReuse: & Symb/13 AsIs: s.Number/22 AsIs: >/1 }"UL);"/37 )/39 Tile{ ]] }
          refalrts::alloc_chars(vm, context[25], context[26], "falrts::reinit_", 15);
          refalrts::alloc_open_call(vm, context[27]);
          refalrts::alloc_name(vm, context[28], functions[efunc_gen_AllocatorFuncName_D12]);
          refalrts::alloc_ident(vm, context[29], identifiers[ident_ElNumber]);
          refalrts::alloc_close_call(vm, context[30]);
          refalrts::alloc_chars(vm, context[31], context[32], "(context[", 9);
          refalrts::alloc_close_call(vm, context[33]);
          refalrts::alloc_chars(vm, context[34], context[35], "], ", 3);
          refalrts::alloc_open_call(vm, context[36]);
          refalrts::alloc_chars(vm, context[37], context[38], "UL);", 4);
          refalrts::alloc_close_bracket(vm, context[39]);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_name(context[13], functions[efunc_Symb]);
          refalrts::link_brackets( context[9], context[39] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[36] );
          refalrts::push_stack( vm, context[33] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[27] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[37], context[39] );
          res = refalrts::splice_evar( res, context[13], context[1] );
          res = refalrts::splice_evar( res, context[33], context[36] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[25], context[32] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PrintCreateElem/4 (/9 e.Indent/23 )/10 # Reinit/11 s.ElemNumber/12 # ElIdent/13 s.Num/22 e./25 >/1
          context[23] = context[18];
          context[24] = context[19];
          context[25] = context[20];
          context[26] = context[21];
          if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[13] ) )
            continue;
          // closed e.Indent as range 23
          // closed e. as range 25
          //DEBUG: s.ElemNumber: 12
          //DEBUG: s.Num: 22
          //DEBUG: e.Indent: 23
          //DEBUG: e.: 25

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/22 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_"/27 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElIdent/29 >/30"(context["/31 </33 & Symb/34 Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 }"], identifiers[ident_"/35 </37 & CName/38 Tile{ AsIs: e./25 } >/39"]);"/40 Tile{ HalfReuse: )/1 ]] }
          refalrts::alloc_chars(vm, context[27], context[28], "falrts::reinit_", 15);
          refalrts::alloc_ident(vm, context[29], identifiers[ident_ElIdent]);
          refalrts::alloc_close_call(vm, context[30]);
          refalrts::alloc_chars(vm, context[31], context[32], "(context[", 9);
          refalrts::alloc_open_call(vm, context[33]);
          refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
          refalrts::alloc_chars(vm, context[35], context[36], "], identifiers[ident_", 21);
          refalrts::alloc_open_call(vm, context[37]);
          refalrts::alloc_name(vm, context[38], functions[efunc_CName]);
          refalrts::alloc_close_call(vm, context[39]);
          refalrts::alloc_chars(vm, context[40], context[41], "]);", 3);
          refalrts::reinit_char(context[10], 'r');
          refalrts::reinit_char(context[11], 'e');
          refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
          refalrts::reinit_close_call(context[13]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[9], context[1] );
          refalrts::push_stack( vm, context[39] );
          refalrts::push_stack( vm, context[37] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[33] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[39], context[41] );
          res = refalrts::splice_evar( res, context[25], context[26] );
          res = refalrts::splice_evar( res, context[35], context[38] );
          res = refalrts::splice_evar( res, context[12], context[13] );
          res = refalrts::splice_evar( res, context[29], context[34] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[27], context[28] );
          res = refalrts::splice_evar( res, context[9], context[11] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PrintCreateElem/4 (/9 e.Indent/23 )/10 # Reinit/11 s.ElemNumber/12 # ElUnwrappedClosure/13 s.HeadOffset/22 >/1
        context[23] = context[18];
        context[24] = context[19];
        if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[13] ) )
          continue;
        if( ! refalrts::empty_seq( context[20], context[21] ) )
          continue;
        // closed e.Indent as range 23
        //DEBUG: s.ElemNumber: 12
        //DEBUG: s.HeadOffset: 22
        //DEBUG: e.Indent: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/23 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_"/25 </27 & AllocatorFuncName*12/28 # ElUnwrappedClosure/29 >/30"(context["/31 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/33"], context["/34 </36 Tile{ HalfReuse: & Symb/13 AsIs: s.HeadOffset/22 AsIs: >/1 }"]);"/37 )/39 Tile{ ]] }
        refalrts::alloc_chars(vm, context[25], context[26], "falrts::reinit_", 15);
        refalrts::alloc_open_call(vm, context[27]);
        refalrts::alloc_name(vm, context[28], functions[efunc_gen_AllocatorFuncName_D12]);
        refalrts::alloc_ident(vm, context[29], identifiers[ident_ElUnwrappedClosure]);
        refalrts::alloc_close_call(vm, context[30]);
        refalrts::alloc_chars(vm, context[31], context[32], "(context[", 9);
        refalrts::alloc_close_call(vm, context[33]);
        refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
        refalrts::alloc_open_call(vm, context[36]);
        refalrts::alloc_chars(vm, context[37], context[38], "]);", 3);
        refalrts::alloc_close_bracket(vm, context[39]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_name(context[13], functions[efunc_Symb]);
        refalrts::link_brackets( context[9], context[39] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[33] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[27] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[37], context[39] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[33], context[36] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[25], context[32] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/18 )/10 # Reinit/11 s.ElemNumber/12 s.ElementType/13 >/1
        context[18] = context[14];
        context[19] = context[15];
        if( ! refalrts::empty_seq( context[16], context[17] ) )
          continue;
        // closed e.Indent as range 18
        //DEBUG: s.ElemNumber: 12
        //DEBUG: s.ElementType: 13
        //DEBUG: e.Indent: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/18 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_"/20 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } Tile{ AsIs: s.ElementType/13 AsIs: >/1 }"(context["/22 </24 & Symb/25 Tile{ AsIs: s.ElemNumber/12 } >/26"]);"/27 )/29 Tile{ ]] }
        refalrts::alloc_chars(vm, context[20], context[21], "falrts::reinit_", 15);
        refalrts::alloc_chars(vm, context[22], context[23], "(context[", 9);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Symb]);
        refalrts::alloc_close_call(vm, context[26]);
        refalrts::alloc_chars(vm, context[27], context[28], "]);", 3);
        refalrts::alloc_close_bracket(vm, context[29]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
        refalrts::link_brackets( context[9], context[29] );
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[29] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PrintCreateElem/4 (/9 e.Indent/18 )/10 # Reinit/11 s.ElemNumber/12 s.ElementType/13 e.Info/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      // closed e.Indent as range 18
      // closed e.Info as range 20
      //DEBUG: s.ElemNumber: 12
      //DEBUG: s.ElementType: 13
      //DEBUG: e.Indent: 18
      //DEBUG: e.Info: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/18 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::reinit_"/22 </24 & AllocatorFuncName*12/25 s.ElementType/13/26 >/27"(context["/28 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/30 ']'/31 </32 & AllocatorFuncArgument*6/33 Tile{ AsIs: s.ElementType/13 AsIs: e.Info/20 AsIs: >/1 }");"/34 )/36 Tile{ ]] }
      refalrts::alloc_chars(vm, context[22], context[23], "falrts::reinit_", 15);
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_name(vm, context[25], functions[efunc_gen_AllocatorFuncName_D12]);
      refalrts::copy_stvar(vm, context[26], context[13]);
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::alloc_chars(vm, context[28], context[29], "(context[", 9);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::alloc_char(vm, context[31], ']');
      refalrts::alloc_open_call(vm, context[32]);
      refalrts::alloc_name(vm, context[33], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_chars(vm, context[34], context[35], ");", 2);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::reinit_char(context[10], 'r');
      refalrts::reinit_char(context[11], 'e');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::link_brackets( context[9], context[36] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[24] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[34], context[36] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[30], context[33] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[22], context[29] );
      res = refalrts::splice_evar( res, context[9], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintCreateElem/4 (/9 e.new9/14 )/10 # Update/11 s.new6/12 s.new7/13 e.new8/16 >/1
    context[14] = context[7];
    context[15] = context[8];
    context[16] = context[5];
    context[17] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_Update], context[11] ) )
      continue;
    // closed e.new9 as range 14
    // closed e.new8 as range 16
    do {
      // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Update/11 s.new10/12 # ElChar/13 e.new11/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_ElChar], context[13] ) )
        continue;
      // closed e.new12 as range 18
      // closed e.new11 as range 20
      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElChar/13 s.Char/26 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
          continue;
        if( ! refalrts::empty_seq( context[24], context[25] ) )
          continue;
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: s.Char: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_char(context["/27 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/29"], \'"/30 </32 Tile{ HalfReuse: & EscapeChar/13 AsIs: s.Char/26 AsIs: >/1 }"\');"/33 )/35 Tile{ ]] }
        refalrts::alloc_chars(vm, context[27], context[28], "falrts::update_char(context[", 28);
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::alloc_chars(vm, context[30], context[31], "], \'", 4);
        refalrts::alloc_open_call(vm, context[32]);
        refalrts::alloc_chars(vm, context[33], context[34], "\');", 3);
        refalrts::alloc_close_bracket(vm, context[35]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_name(context[13], functions[efunc_EscapeChar]);
        refalrts::link_brackets( context[9], context[35] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[32] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[33], context[35] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[29], context[32] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElChar/13 >/1
        context[22] = context[18];
        context[23] = context[19];
        if( ! refalrts::empty_seq( context[20], context[21] ) )
          continue;
        // closed e.Indent as range 22
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_char(context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
        refalrts::alloc_chars(vm, context[24], context[25], "falrts::update_char(context[", 28);
        refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[13]);
        refalrts::reinit_char(context[1], ']');
        refalrts::link_brackets( context[9], context[28] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[28] );
        res = refalrts::splice_evar( res, context[12], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElChar/13 e.Info/24 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      // closed e.Indent as range 22
      // closed e.Info as range 24
      //DEBUG: s.ElemNumber: 12
      //DEBUG: e.Indent: 22
      //DEBUG: e.Info: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_char(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElChar/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
      refalrts::alloc_chars(vm, context[26], context[27], "falrts::update_char(context[", 28);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_char(vm, context[29], ']');
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_char(context[10], 'r');
      refalrts::reinit_char(context[11], 'e');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::link_brackets( context[9], context[34] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[9], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Update/11 s.new10/12 # ElName/13 e.new11/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_ElName], context[13] ) )
        continue;
      // closed e.new12 as range 18
      // closed e.new11 as range 20
      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElName/13 s.Num/26 e./24 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
          continue;
        // closed e. as range 24
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: s.Num: 26
        //DEBUG: e.: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/26 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_name(context["/27 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 }"], functions[efunc_"/29 </31 & CName/32 Tile{ AsIs: e./24 } >/33"]);"/34 Tile{ HalfReuse: )/1 ]] }
        refalrts::alloc_chars(vm, context[27], context[28], "falrts::update_name(context[", 28);
        refalrts::alloc_chars(vm, context[29], context[30], "], functions[efunc_", 19);
        refalrts::alloc_open_call(vm, context[31]);
        refalrts::alloc_name(vm, context[32], functions[efunc_CName]);
        refalrts::alloc_close_call(vm, context[33]);
        refalrts::alloc_chars(vm, context[34], context[35], "]);", 3);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[13]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[9], context[1] );
        refalrts::push_stack( vm, context[33] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[33], context[35] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[29], context[32] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElName/13 >/1
        context[22] = context[18];
        context[23] = context[19];
        if( ! refalrts::empty_seq( context[20], context[21] ) )
          continue;
        // closed e.Indent as range 22
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_name(context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
        refalrts::alloc_chars(vm, context[24], context[25], "falrts::update_name(context[", 28);
        refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[13]);
        refalrts::reinit_char(context[1], ']');
        refalrts::link_brackets( context[9], context[28] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[28] );
        res = refalrts::splice_evar( res, context[12], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElName/13 e.Info/24 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      // closed e.Indent as range 22
      // closed e.Info as range 24
      //DEBUG: s.ElemNumber: 12
      //DEBUG: e.Indent: 22
      //DEBUG: e.Info: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_name(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElName/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
      refalrts::alloc_chars(vm, context[26], context[27], "falrts::update_name(context[", 28);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_char(vm, context[29], ']');
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_char(context[10], 'r');
      refalrts::reinit_char(context[11], 'e');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::link_brackets( context[9], context[34] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[9], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Update/11 s.new10/12 # ElNumber/13 e.new11/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[13] ) )
        continue;
      // closed e.new12 as range 18
      // closed e.new11 as range 20
      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElNumber/13 s.Number/26 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
          continue;
        if( ! refalrts::empty_seq( context[24], context[25] ) )
          continue;
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: s.Number: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_number(context["/27 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/29"], "/30 </32 Tile{ HalfReuse: & Symb/13 AsIs: s.Number/26 AsIs: >/1 }"UL);"/33 )/35 Tile{ ]] }
        refalrts::alloc_chars(vm, context[27], context[28], "falrts::update_number(context[", 30);
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::alloc_chars(vm, context[30], context[31], "], ", 3);
        refalrts::alloc_open_call(vm, context[32]);
        refalrts::alloc_chars(vm, context[33], context[34], "UL);", 4);
        refalrts::alloc_close_bracket(vm, context[35]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_name(context[13], functions[efunc_Symb]);
        refalrts::link_brackets( context[9], context[35] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[32] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[33], context[35] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[29], context[32] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElNumber/13 >/1
        context[22] = context[18];
        context[23] = context[19];
        if( ! refalrts::empty_seq( context[20], context[21] ) )
          continue;
        // closed e.Indent as range 22
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_number(context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
        refalrts::alloc_chars(vm, context[24], context[25], "falrts::update_number(context[", 30);
        refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[13]);
        refalrts::reinit_char(context[1], ']');
        refalrts::link_brackets( context[9], context[28] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[28] );
        res = refalrts::splice_evar( res, context[12], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElNumber/13 e.Info/24 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      // closed e.Indent as range 22
      // closed e.Info as range 24
      //DEBUG: s.ElemNumber: 12
      //DEBUG: e.Indent: 22
      //DEBUG: e.Info: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_number(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElNumber/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
      refalrts::alloc_chars(vm, context[26], context[27], "falrts::update_number(context[", 30);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_char(vm, context[29], ']');
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_char(context[10], 'r');
      refalrts::reinit_char(context[11], 'e');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::link_brackets( context[9], context[34] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[9], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Update/11 s.new10/12 # ElIdent/13 e.new11/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[13] ) )
        continue;
      // closed e.new12 as range 18
      // closed e.new11 as range 20
      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElIdent/13 s.Num/26 e./24 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
          continue;
        // closed e. as range 24
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: s.Num: 26
        //DEBUG: e.: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/26 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_ident(context["/27 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 }"], identifiers[ident_"/29 </31 & CName/32 Tile{ AsIs: e./24 } >/33"]);"/34 Tile{ HalfReuse: )/1 ]] }
        refalrts::alloc_chars(vm, context[27], context[28], "falrts::update_ident(context[", 29);
        refalrts::alloc_chars(vm, context[29], context[30], "], identifiers[ident_", 21);
        refalrts::alloc_open_call(vm, context[31]);
        refalrts::alloc_name(vm, context[32], functions[efunc_CName]);
        refalrts::alloc_close_call(vm, context[33]);
        refalrts::alloc_chars(vm, context[34], context[35], "]);", 3);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[13]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[9], context[1] );
        refalrts::push_stack( vm, context[33] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[33], context[35] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[29], context[32] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElIdent/13 >/1
        context[22] = context[18];
        context[23] = context[19];
        if( ! refalrts::empty_seq( context[20], context[21] ) )
          continue;
        // closed e.Indent as range 22
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_ident(context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
        refalrts::alloc_chars(vm, context[24], context[25], "falrts::update_ident(context[", 29);
        refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[13]);
        refalrts::reinit_char(context[1], ']');
        refalrts::link_brackets( context[9], context[28] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[28] );
        res = refalrts::splice_evar( res, context[12], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElIdent/13 e.Info/24 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      // closed e.Indent as range 22
      // closed e.Info as range 24
      //DEBUG: s.ElemNumber: 12
      //DEBUG: e.Indent: 22
      //DEBUG: e.Info: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_ident(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElIdent/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
      refalrts::alloc_chars(vm, context[26], context[27], "falrts::update_ident(context[", 29);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_char(vm, context[29], ']');
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_char(context[10], 'r');
      refalrts::reinit_char(context[11], 'e');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::link_brackets( context[9], context[34] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[9], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Update/11 s.new10/12 # ElOpenADT/13 e.new11/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_ElOpenADT], context[13] ) )
        continue;
      // closed e.new12 as range 18
      // closed e.new11 as range 20
      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElOpenADT/13 >/1
        context[22] = context[18];
        context[23] = context[19];
        if( ! refalrts::empty_seq( context[20], context[21] ) )
          continue;
        // closed e.Indent as range 22
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_open_adt(context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
        refalrts::alloc_chars(vm, context[24], context[25], "falrts::update_open_adt(context[", 32);
        refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[13]);
        refalrts::reinit_char(context[1], ']');
        refalrts::link_brackets( context[9], context[28] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[28] );
        res = refalrts::splice_evar( res, context[12], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElOpenADT/13 e.Info/24 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      // closed e.Indent as range 22
      // closed e.Info as range 24
      //DEBUG: s.ElemNumber: 12
      //DEBUG: e.Indent: 22
      //DEBUG: e.Info: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_open_adt(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElOpenADT/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
      refalrts::alloc_chars(vm, context[26], context[27], "falrts::update_open_adt(context[", 32);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_char(vm, context[29], ']');
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_char(context[10], 'r');
      refalrts::reinit_char(context[11], 'e');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::link_brackets( context[9], context[34] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[9], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Update/11 s.new10/12 # ElCloseADT/13 e.new11/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_ElCloseADT], context[13] ) )
        continue;
      // closed e.new12 as range 18
      // closed e.new11 as range 20
      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElCloseADT/13 >/1
        context[22] = context[18];
        context[23] = context[19];
        if( ! refalrts::empty_seq( context[20], context[21] ) )
          continue;
        // closed e.Indent as range 22
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_close_adt(context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
        refalrts::alloc_chars(vm, context[24], context[25], "falrts::update_close_adt(context[", 33);
        refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[13]);
        refalrts::reinit_char(context[1], ']');
        refalrts::link_brackets( context[9], context[28] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[28] );
        res = refalrts::splice_evar( res, context[12], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElCloseADT/13 e.Info/24 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      // closed e.Indent as range 22
      // closed e.Info as range 24
      //DEBUG: s.ElemNumber: 12
      //DEBUG: e.Indent: 22
      //DEBUG: e.Info: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_close_adt(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElCloseADT/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
      refalrts::alloc_chars(vm, context[26], context[27], "falrts::update_close_adt(context[", 33);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_char(vm, context[29], ']');
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_char(context[10], 'r');
      refalrts::reinit_char(context[11], 'e');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::link_brackets( context[9], context[34] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[9], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Update/11 s.new10/12 # ElOpenBracket/13 e.new11/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_ElOpenBracket], context[13] ) )
        continue;
      // closed e.new12 as range 18
      // closed e.new11 as range 20
      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElOpenBracket/13 >/1
        context[22] = context[18];
        context[23] = context[19];
        if( ! refalrts::empty_seq( context[20], context[21] ) )
          continue;
        // closed e.Indent as range 22
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_open_bracket(context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
        refalrts::alloc_chars(vm, context[24], context[25], "falrts::update_open_bracket(context[", 36);
        refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[13]);
        refalrts::reinit_char(context[1], ']');
        refalrts::link_brackets( context[9], context[28] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[28] );
        res = refalrts::splice_evar( res, context[12], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElOpenBracket/13 e.Info/24 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      // closed e.Indent as range 22
      // closed e.Info as range 24
      //DEBUG: s.ElemNumber: 12
      //DEBUG: e.Indent: 22
      //DEBUG: e.Info: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_open_bracket(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElOpenBracket/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
      refalrts::alloc_chars(vm, context[26], context[27], "falrts::update_open_bracket(context[", 36);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_char(vm, context[29], ']');
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_char(context[10], 'r');
      refalrts::reinit_char(context[11], 'e');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::link_brackets( context[9], context[34] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[9], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Update/11 s.new10/12 # ElCloseBracket/13 e.new11/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_ElCloseBracket], context[13] ) )
        continue;
      // closed e.new12 as range 18
      // closed e.new11 as range 20
      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElCloseBracket/13 >/1
        context[22] = context[18];
        context[23] = context[19];
        if( ! refalrts::empty_seq( context[20], context[21] ) )
          continue;
        // closed e.Indent as range 22
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_close_bracket(context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
        refalrts::alloc_chars(vm, context[24], context[25], "falrts::update_close_bracket(context[", 37);
        refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[13]);
        refalrts::reinit_char(context[1], ']');
        refalrts::link_brackets( context[9], context[28] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[28] );
        res = refalrts::splice_evar( res, context[12], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElCloseBracket/13 e.Info/24 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      // closed e.Indent as range 22
      // closed e.Info as range 24
      //DEBUG: s.ElemNumber: 12
      //DEBUG: e.Indent: 22
      //DEBUG: e.Info: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_close_bracket(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElCloseBracket/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
      refalrts::alloc_chars(vm, context[26], context[27], "falrts::update_close_bracket(context[", 37);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_char(vm, context[29], ']');
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_char(context[10], 'r');
      refalrts::reinit_char(context[11], 'e');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::link_brackets( context[9], context[34] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[9], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Update/11 s.new10/12 # ElOpenCall/13 e.new11/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_ElOpenCall], context[13] ) )
        continue;
      // closed e.new12 as range 18
      // closed e.new11 as range 20
      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElOpenCall/13 >/1
        context[22] = context[18];
        context[23] = context[19];
        if( ! refalrts::empty_seq( context[20], context[21] ) )
          continue;
        // closed e.Indent as range 22
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_open_call(context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
        refalrts::alloc_chars(vm, context[24], context[25], "falrts::update_open_call(context[", 33);
        refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[13]);
        refalrts::reinit_char(context[1], ']');
        refalrts::link_brackets( context[9], context[28] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[28] );
        res = refalrts::splice_evar( res, context[12], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElOpenCall/13 e.Info/24 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      // closed e.Indent as range 22
      // closed e.Info as range 24
      //DEBUG: s.ElemNumber: 12
      //DEBUG: e.Indent: 22
      //DEBUG: e.Info: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_open_call(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElOpenCall/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
      refalrts::alloc_chars(vm, context[26], context[27], "falrts::update_open_call(context[", 33);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_char(vm, context[29], ']');
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_char(context[10], 'r');
      refalrts::reinit_char(context[11], 'e');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::link_brackets( context[9], context[34] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[9], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Update/11 s.new10/12 # ElCloseCall/13 e.new11/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_ElCloseCall], context[13] ) )
        continue;
      // closed e.new12 as range 18
      // closed e.new11 as range 20
      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElCloseCall/13 >/1
        context[22] = context[18];
        context[23] = context[19];
        if( ! refalrts::empty_seq( context[20], context[21] ) )
          continue;
        // closed e.Indent as range 22
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_close_call(context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
        refalrts::alloc_chars(vm, context[24], context[25], "falrts::update_close_call(context[", 34);
        refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[13]);
        refalrts::reinit_char(context[1], ']');
        refalrts::link_brackets( context[9], context[28] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[28] );
        res = refalrts::splice_evar( res, context[12], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElCloseCall/13 e.Info/24 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      // closed e.Indent as range 22
      // closed e.Info as range 24
      //DEBUG: s.ElemNumber: 12
      //DEBUG: e.Indent: 22
      //DEBUG: e.Info: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_close_call(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElCloseCall/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
      refalrts::alloc_chars(vm, context[26], context[27], "falrts::update_close_call(context[", 34);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_char(vm, context[29], ']');
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_char(context[10], 'r');
      refalrts::reinit_char(context[11], 'e');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::link_brackets( context[9], context[34] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[9], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Update/11 s.new10/12 # ElClosureHead/13 e.new11/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_ElClosureHead], context[13] ) )
        continue;
      // closed e.new12 as range 18
      // closed e.new11 as range 20
      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElClosureHead/13 >/1
        context[22] = context[18];
        context[23] = context[19];
        if( ! refalrts::empty_seq( context[20], context[21] ) )
          continue;
        // closed e.Indent as range 22
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_closure_head(context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
        refalrts::alloc_chars(vm, context[24], context[25], "falrts::update_closure_head(context[", 36);
        refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[13]);
        refalrts::reinit_char(context[1], ']');
        refalrts::link_brackets( context[9], context[28] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[28] );
        res = refalrts::splice_evar( res, context[12], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElClosureHead/13 e.Info/24 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      // closed e.Indent as range 22
      // closed e.Info as range 24
      //DEBUG: s.ElemNumber: 12
      //DEBUG: e.Indent: 22
      //DEBUG: e.Info: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_closure_head(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElClosureHead/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
      refalrts::alloc_chars(vm, context[26], context[27], "falrts::update_closure_head(context[", 36);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_char(vm, context[29], ']');
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_char(context[10], 'r');
      refalrts::reinit_char(context[11], 'e');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::link_brackets( context[9], context[34] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[9], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrintCreateElem/4 (/9 e.new12/18 )/10 # Update/11 s.new10/12 # ElUnwrappedClosure/13 e.new11/20 >/1
      context[18] = context[14];
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[13] ) )
        continue;
      // closed e.new12 as range 18
      // closed e.new11 as range 20
      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElUnwrappedClosure/13 s.HeadOffset/26 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        // closed e.Indent as range 22
        if( ! refalrts::svar_left( context[26], context[24], context[25] ) )
          continue;
        if( ! refalrts::empty_seq( context[24], context[25] ) )
          continue;
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22
        //DEBUG: s.HeadOffset: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_unwrapped_closure(context["/27 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/29"], context["/30 </32 Tile{ HalfReuse: & Symb/13 AsIs: s.HeadOffset/26 AsIs: >/1 }"]);"/33 )/35 Tile{ ]] }
        refalrts::alloc_chars(vm, context[27], context[28], "falrts::update_unwrapped_closure(context[", 41);
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::alloc_chars(vm, context[30], context[31], "], context[", 11);
        refalrts::alloc_open_call(vm, context[32]);
        refalrts::alloc_chars(vm, context[33], context[34], "]);", 3);
        refalrts::alloc_close_bracket(vm, context[35]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_name(context[13], functions[efunc_Symb]);
        refalrts::link_brackets( context[9], context[35] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[32] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[33], context[35] );
        res = refalrts::splice_evar( res, context[13], context[1] );
        res = refalrts::splice_evar( res, context[29], context[32] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElUnwrappedClosure/13 >/1
        context[22] = context[18];
        context[23] = context[19];
        if( ! refalrts::empty_seq( context[20], context[21] ) )
          continue;
        // closed e.Indent as range 22
        //DEBUG: s.ElemNumber: 12
        //DEBUG: e.Indent: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_unwrapped_closure(context["/24 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 HalfReuse: >/13 HalfReuse: ']'/1 }");"/26 )/28 Tile{ ]] }
        refalrts::alloc_chars(vm, context[24], context[25], "falrts::update_unwrapped_closure(context[", 41);
        refalrts::alloc_chars(vm, context[26], context[27], ");", 2);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::reinit_char(context[10], 'r');
        refalrts::reinit_char(context[11], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_close_call(context[13]);
        refalrts::reinit_char(context[1], ']');
        refalrts::link_brackets( context[9], context[28] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[28] );
        res = refalrts::splice_evar( res, context[12], context[1] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[9], context[11] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PrintCreateElem/4 (/9 e.Indent/22 )/10 # Update/11 s.ElemNumber/12 # ElUnwrappedClosure/13 e.Info/24 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      // closed e.Indent as range 22
      // closed e.Info as range 24
      //DEBUG: s.ElemNumber: 12
      //DEBUG: e.Indent: 22
      //DEBUG: e.Info: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/22 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_unwrapped_closure(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: # ElUnwrappedClosure/13 AsIs: e.Info/24 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
      refalrts::alloc_chars(vm, context[26], context[27], "falrts::update_unwrapped_closure(context[", 41);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_char(vm, context[29], ']');
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
      refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_char(context[10], 'r');
      refalrts::reinit_char(context[11], 'e');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::link_brackets( context[9], context[34] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[13], context[1] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[9], context[11] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintCreateElem/4 (/9 e.Indent/18 )/10 # Update/11 s.ElemNumber/12 # ElChar/13 s.Char/22 >/1
    context[18] = context[14];
    context[19] = context[15];
    context[20] = context[16];
    context[21] = context[17];
    if( ! refalrts::ident_term( identifiers[ident_ElChar], context[13] ) )
      continue;
    // closed e.Indent as range 18
    if( ! refalrts::svar_left( context[22], context[20], context[21] ) )
      continue;
    if( ! refalrts::empty_seq( context[20], context[21] ) )
      continue;
    //DEBUG: s.ElemNumber: 12
    //DEBUG: e.Indent: 18
    //DEBUG: s.Char: 22

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: e.Indent/18 HalfReuse: 'r'/10 HalfReuse: 'e'/11 }"falrts::update_"/23 </25 & AllocatorFuncName*12/26 # ElChar/27 >/28"(context["/29 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/12 } >/31"], \'"/32 </34 Tile{ HalfReuse: & EscapeChar/13 AsIs: s.Char/22 AsIs: >/1 }"\');"/35 )/37 Tile{ ]] }
    refalrts::alloc_chars(vm, context[23], context[24], "falrts::update_", 15);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_gen_AllocatorFuncName_D12]);
    refalrts::alloc_ident(vm, context[27], identifiers[ident_ElChar]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "(context[", 9);
    refalrts::alloc_close_call(vm, context[31]);
    refalrts::alloc_chars(vm, context[32], context[33], "], \'", 4);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_chars(vm, context[35], context[36], "\');", 3);
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::reinit_char(context[10], 'r');
    refalrts::reinit_char(context[11], 'e');
    refalrts::update_name(context[4], functions[efunc_Symb]);
    refalrts::reinit_name(context[13], functions[efunc_EscapeChar]);
    refalrts::link_brackets( context[9], context[37] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[35], context[37] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[23], context[30] );
    res = refalrts::splice_evar( res, context[9], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintCreateElem/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 s.new4/11 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 2
  do {
    // </0 & PrintCreateElem/4 (/7 e.new9/12 )/8 # Update/9 s.new6/10 s.new7/11 e.new8/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Update], context[9] ) )
      continue;
    // closed e.new9 as range 12
    // closed e.new8 as range 14
    do {
      // </0 & PrintCreateElem/4 (/7 e.new14/16 )/8 # Update/9 s.new10/10 s.new11/11 s.new12/20 e.new13/18 >/1
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = context[15];
      // closed e.new14 as range 16
      if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
        continue;
      // closed e.new13 as range 18
      do {
        // </0 & PrintCreateElem/4 (/7 e.Indent/21 )/8 # Update/9 s.ElemNumber/10 # ElName/11 s.Num/20 e./23 >/1
        context[21] = context[16];
        context[22] = context[17];
        context[23] = context[18];
        context[24] = context[19];
        if( ! refalrts::ident_term( identifiers[ident_ElName], context[11] ) )
          continue;
        // closed e.Indent as range 21
        // closed e. as range 23
        //DEBUG: s.ElemNumber: 10
        //DEBUG: s.Num: 20
        //DEBUG: e.Indent: 21
        //DEBUG: e.: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/20 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/21 HalfReuse: 'r'/8 HalfReuse: 'e'/9 }"falrts::update_"/25 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElName/27 >/28"(context["/29 </31 & Symb/32 Tile{ AsIs: s.ElemNumber/10 HalfReuse: >/11 }"], functions[efunc_"/33 </35 & CName/36 Tile{ AsIs: e./23 } >/37"]);"/38 Tile{ HalfReuse: )/1 ]] }
        refalrts::alloc_chars(vm, context[25], context[26], "falrts::update_", 15);
        refalrts::alloc_ident(vm, context[27], identifiers[ident_ElName]);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_chars(vm, context[29], context[30], "(context[", 9);
        refalrts::alloc_open_call(vm, context[31]);
        refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
        refalrts::alloc_chars(vm, context[33], context[34], "], functions[efunc_", 19);
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[36], functions[efunc_CName]);
        refalrts::alloc_close_call(vm, context[37]);
        refalrts::alloc_chars(vm, context[38], context[39], "]);", 3);
        refalrts::reinit_char(context[8], 'r');
        refalrts::reinit_char(context[9], 'e');
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
        refalrts::reinit_close_call(context[11]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[7], context[1] );
        refalrts::push_stack( vm, context[37] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[11] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[37], context[39] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[33], context[36] );
        res = refalrts::splice_evar( res, context[10], context[11] );
        res = refalrts::splice_evar( res, context[27], context[32] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[7], context[9] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/7 e.Indent/21 )/8 # Update/9 s.ElemNumber/10 # ElNumber/11 s.Number/20 >/1
        context[21] = context[16];
        context[22] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[11] ) )
          continue;
        if( ! refalrts::empty_seq( context[18], context[19] ) )
          continue;
        // closed e.Indent as range 21
        //DEBUG: s.ElemNumber: 10
        //DEBUG: s.Number: 20
        //DEBUG: e.Indent: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/21 HalfReuse: 'r'/8 HalfReuse: 'e'/9 }"falrts::update_"/23 </25 & AllocatorFuncName*12/26 # ElNumber/27 >/28"(context["/29 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/10 } >/31"], "/32 </34 Tile{ HalfReuse: & Symb/11 AsIs: s.Number/20 AsIs: >/1 }"UL);"/35 )/37 Tile{ ]] }
        refalrts::alloc_chars(vm, context[23], context[24], "falrts::update_", 15);
        refalrts::alloc_open_call(vm, context[25]);
        refalrts::alloc_name(vm, context[26], functions[efunc_gen_AllocatorFuncName_D12]);
        refalrts::alloc_ident(vm, context[27], identifiers[ident_ElNumber]);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_chars(vm, context[29], context[30], "(context[", 9);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_chars(vm, context[32], context[33], "], ", 3);
        refalrts::alloc_open_call(vm, context[34]);
        refalrts::alloc_chars(vm, context[35], context[36], "UL);", 4);
        refalrts::alloc_close_bracket(vm, context[37]);
        refalrts::reinit_char(context[8], 'r');
        refalrts::reinit_char(context[9], 'e');
        refalrts::update_name(context[4], functions[efunc_Symb]);
        refalrts::reinit_name(context[11], functions[efunc_Symb]);
        refalrts::link_brackets( context[7], context[37] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[25] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[35], context[37] );
        res = refalrts::splice_evar( res, context[11], context[1] );
        res = refalrts::splice_evar( res, context[31], context[34] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[23], context[30] );
        res = refalrts::splice_evar( res, context[7], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PrintCreateElem/4 (/7 e.Indent/21 )/8 # Update/9 s.ElemNumber/10 # ElIdent/11 s.Num/20 e./23 >/1
        context[21] = context[16];
        context[22] = context[17];
        context[23] = context[18];
        context[24] = context[19];
        if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[11] ) )
          continue;
        // closed e.Indent as range 21
        // closed e. as range 23
        //DEBUG: s.ElemNumber: 10
        //DEBUG: s.Num: 20
        //DEBUG: e.Indent: 21
        //DEBUG: e.: 23

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/20 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/21 HalfReuse: 'r'/8 HalfReuse: 'e'/9 }"falrts::update_"/25 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElIdent/27 >/28"(context["/29 </31 & Symb/32 Tile{ AsIs: s.ElemNumber/10 HalfReuse: >/11 }"], identifiers[ident_"/33 </35 & CName/36 Tile{ AsIs: e./23 } >/37"]);"/38 Tile{ HalfReuse: )/1 ]] }
        refalrts::alloc_chars(vm, context[25], context[26], "falrts::update_", 15);
        refalrts::alloc_ident(vm, context[27], identifiers[ident_ElIdent]);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_chars(vm, context[29], context[30], "(context[", 9);
        refalrts::alloc_open_call(vm, context[31]);
        refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
        refalrts::alloc_chars(vm, context[33], context[34], "], identifiers[ident_", 21);
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[36], functions[efunc_CName]);
        refalrts::alloc_close_call(vm, context[37]);
        refalrts::alloc_chars(vm, context[38], context[39], "]);", 3);
        refalrts::reinit_char(context[8], 'r');
        refalrts::reinit_char(context[9], 'e');
        refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
        refalrts::reinit_close_call(context[11]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[7], context[1] );
        refalrts::push_stack( vm, context[37] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[11] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[37], context[39] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[33], context[36] );
        res = refalrts::splice_evar( res, context[10], context[11] );
        res = refalrts::splice_evar( res, context[27], context[32] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[7], context[9] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PrintCreateElem/4 (/7 e.Indent/21 )/8 # Update/9 s.ElemNumber/10 # ElUnwrappedClosure/11 s.HeadOffset/20 >/1
      context[21] = context[16];
      context[22] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[11] ) )
        continue;
      if( ! refalrts::empty_seq( context[18], context[19] ) )
        continue;
      // closed e.Indent as range 21
      //DEBUG: s.ElemNumber: 10
      //DEBUG: s.HeadOffset: 20
      //DEBUG: e.Indent: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/21 HalfReuse: 'r'/8 HalfReuse: 'e'/9 }"falrts::update_"/23 </25 & AllocatorFuncName*12/26 # ElUnwrappedClosure/27 >/28"(context["/29 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/10 } >/31"], context["/32 </34 Tile{ HalfReuse: & Symb/11 AsIs: s.HeadOffset/20 AsIs: >/1 }"]);"/35 )/37 Tile{ ]] }
      refalrts::alloc_chars(vm, context[23], context[24], "falrts::update_", 15);
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_gen_AllocatorFuncName_D12]);
      refalrts::alloc_ident(vm, context[27], identifiers[ident_ElUnwrappedClosure]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "(context[", 9);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::alloc_chars(vm, context[32], context[33], "], context[", 11);
      refalrts::alloc_open_call(vm, context[34]);
      refalrts::alloc_chars(vm, context[35], context[36], "]);", 3);
      refalrts::alloc_close_bracket(vm, context[37]);
      refalrts::reinit_char(context[8], 'r');
      refalrts::reinit_char(context[9], 'e');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::reinit_name(context[11], functions[efunc_Symb]);
      refalrts::link_brackets( context[7], context[37] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[25] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[35], context[37] );
      res = refalrts::splice_evar( res, context[11], context[1] );
      res = refalrts::splice_evar( res, context[31], context[34] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[23], context[30] );
      res = refalrts::splice_evar( res, context[7], context[9] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 # Update/9 s.ElemNumber/10 s.ElementType/11 >/1
      context[16] = context[12];
      context[17] = context[13];
      if( ! refalrts::empty_seq( context[14], context[15] ) )
        continue;
      // closed e.Indent as range 16
      //DEBUG: s.ElemNumber: 10
      //DEBUG: s.ElementType: 11
      //DEBUG: e.Indent: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 HalfReuse: 'e'/9 }"falrts::update_"/18 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } Tile{ AsIs: s.ElementType/11 AsIs: >/1 }"(context["/20 </22 & Symb/23 Tile{ AsIs: s.ElemNumber/10 } >/24"]);"/25 )/27 Tile{ ]] }
      refalrts::alloc_chars(vm, context[18], context[19], "falrts::update_", 15);
      refalrts::alloc_chars(vm, context[20], context[21], "(context[", 9);
      refalrts::alloc_open_call(vm, context[22]);
      refalrts::alloc_name(vm, context[23], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::alloc_chars(vm, context[25], context[26], "]);", 3);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::reinit_char(context[8], 'r');
      refalrts::reinit_char(context[9], 'e');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
      refalrts::link_brackets( context[7], context[27] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[24], context[27] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[20], context[23] );
      res = refalrts::splice_evar( res, context[11], context[1] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[7], context[9] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 # Update/9 s.ElemNumber/10 s.ElementType/11 e.Info/18 >/1
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    context[19] = context[15];
    // closed e.Indent as range 16
    // closed e.Info as range 18
    //DEBUG: s.ElemNumber: 10
    //DEBUG: s.ElementType: 11
    //DEBUG: e.Indent: 16
    //DEBUG: e.Info: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 HalfReuse: 'e'/9 }"falrts::update_"/20 </22 & AllocatorFuncName*12/23 s.ElementType/11/24 >/25"(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/10 } >/28 ']'/29 </30 & AllocatorFuncArgument*6/31 Tile{ AsIs: s.ElementType/11 AsIs: e.Info/18 AsIs: >/1 }");"/32 )/34 Tile{ ]] }
    refalrts::alloc_chars(vm, context[20], context[21], "falrts::update_", 15);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_AllocatorFuncName_D12]);
    refalrts::copy_stvar(vm, context[24], context[11]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_chars(vm, context[26], context[27], "(context[", 9);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_char(vm, context[29], ']');
    refalrts::alloc_open_call(vm, context[30]);
    refalrts::alloc_name(vm, context[31], functions[efunc_gen_AllocatorFuncArgument_D6]);
    refalrts::alloc_chars(vm, context[32], context[33], ");", 2);
    refalrts::alloc_close_bracket(vm, context[34]);
    refalrts::reinit_char(context[8], 'r');
    refalrts::reinit_char(context[9], 'e');
    refalrts::update_name(context[4], functions[efunc_Symb]);
    refalrts::link_brackets( context[7], context[34] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[30] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[32], context[34] );
    res = refalrts::splice_evar( res, context[11], context[1] );
    res = refalrts::splice_evar( res, context[28], context[31] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[20], context[27] );
    res = refalrts::splice_evar( res, context[7], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintCreateElem/4 (/7 e.new9/12 )/8 s.new6/9 s.new7/10 # ElChar/11 e.new8/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_ElChar], context[11] ) )
      continue;
    // closed e.new9 as range 12
    // closed e.new8 as range 14
    do {
      // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElChar/11 s.Char/20 >/1
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = context[15];
      // closed e.Indent as range 16
      if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
        continue;
      if( ! refalrts::empty_seq( context[18], context[19] ) )
        continue;
      //DEBUG: s.CreateMode: 9
      //DEBUG: s.ElemNumber: 10
      //DEBUG: e.Indent: 16
      //DEBUG: s.Char: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/21 </23 & AllocatorMode*2/24 Tile{ AsIs: s.CreateMode/9 } >/25"_char(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/10 } >/28"], \'"/29 </31 Tile{ HalfReuse: & EscapeChar/11 AsIs: s.Char/20 AsIs: >/1 }"\');"/32 )/34 Tile{ ]] }
      refalrts::alloc_chars(vm, context[21], context[22], "efalrts::", 9);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_chars(vm, context[26], context[27], "_char(context[", 14);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "], \'", 4);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_chars(vm, context[32], context[33], "\');", 3);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_char(context[8], 'r');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::reinit_name(context[11], functions[efunc_EscapeChar]);
      refalrts::link_brackets( context[7], context[34] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[11], context[1] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[21], context[24] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElChar/11 >/1
      context[16] = context[12];
      context[17] = context[13];
      if( ! refalrts::empty_seq( context[14], context[15] ) )
        continue;
      // closed e.Indent as range 16
      //DEBUG: s.CreateMode: 9
      //DEBUG: s.ElemNumber: 10
      //DEBUG: e.Indent: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/18 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/9 } >/20"_char(context["/21 </23 & Symb/24 Tile{ AsIs: s.ElemNumber/10 HalfReuse: >/11 HalfReuse: ']'/1 }");"/25 )/27 Tile{ ]] }
      refalrts::alloc_chars(vm, context[18], context[19], "efalrts::", 9);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_chars(vm, context[21], context[22], "_char(context[", 14);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[25], context[26], ");", 2);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::reinit_char(context[8], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[11]);
      refalrts::reinit_char(context[1], ']');
      refalrts::link_brackets( context[7], context[27] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_evar( res, context[20], context[24] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElChar/11 e.Info/18 >/1
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    context[19] = context[15];
    // closed e.Indent as range 16
    // closed e.Info as range 18
    //DEBUG: s.CreateMode: 9
    //DEBUG: s.ElemNumber: 10
    //DEBUG: e.Indent: 16
    //DEBUG: e.Info: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/20 </22 & AllocatorMode*2/23 Tile{ AsIs: s.CreateMode/9 } >/24"_char(context["/25 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/10 } >/27 ']'/28 </29 & AllocatorFuncArgument*6/30 Tile{ AsIs: # ElChar/11 AsIs: e.Info/18 AsIs: >/1 }");"/31 )/33 Tile{ ]] }
    refalrts::alloc_chars(vm, context[20], context[21], "efalrts::", 9);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_AllocatorMode_D2]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_chars(vm, context[25], context[26], "_char(context[", 14);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::alloc_char(vm, context[28], ']');
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_gen_AllocatorFuncArgument_D6]);
    refalrts::alloc_chars(vm, context[31], context[32], ");", 2);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::reinit_char(context[8], 'r');
    refalrts::update_name(context[4], functions[efunc_Symb]);
    refalrts::link_brackets( context[7], context[33] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[33] );
    res = refalrts::splice_evar( res, context[11], context[1] );
    res = refalrts::splice_evar( res, context[27], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[24], context[26] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintCreateElem/4 (/7 e.new9/12 )/8 s.new6/9 s.new7/10 # ElName/11 e.new8/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_ElName], context[11] ) )
      continue;
    // closed e.new9 as range 12
    // closed e.new8 as range 14
    do {
      // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElName/11 s.Num/20 e./18 >/1
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = context[15];
      // closed e.Indent as range 16
      if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
        continue;
      // closed e. as range 18
      //DEBUG: s.CreateMode: 9
      //DEBUG: s.ElemNumber: 10
      //DEBUG: e.Indent: 16
      //DEBUG: s.Num: 20
      //DEBUG: e.: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/20 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/21 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/9 } >/23"_name(context["/24 </26 & Symb/27 Tile{ AsIs: s.ElemNumber/10 HalfReuse: >/11 }"], functions[efunc_"/28 </30 & CName/31 Tile{ AsIs: e./18 } >/32"]);"/33 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_chars(vm, context[21], context[22], "efalrts::", 9);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_chars(vm, context[24], context[25], "_name(context[", 14);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[28], context[29], "], functions[efunc_", 19);
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_CName]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_chars(vm, context[33], context[34], "]);", 3);
      refalrts::reinit_char(context[8], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[11]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      res = refalrts::splice_evar( res, context[23], context[27] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElName/11 >/1
      context[16] = context[12];
      context[17] = context[13];
      if( ! refalrts::empty_seq( context[14], context[15] ) )
        continue;
      // closed e.Indent as range 16
      //DEBUG: s.CreateMode: 9
      //DEBUG: s.ElemNumber: 10
      //DEBUG: e.Indent: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/18 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/9 } >/20"_name(context["/21 </23 & Symb/24 Tile{ AsIs: s.ElemNumber/10 HalfReuse: >/11 HalfReuse: ']'/1 }");"/25 )/27 Tile{ ]] }
      refalrts::alloc_chars(vm, context[18], context[19], "efalrts::", 9);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_chars(vm, context[21], context[22], "_name(context[", 14);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[25], context[26], ");", 2);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::reinit_char(context[8], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[11]);
      refalrts::reinit_char(context[1], ']');
      refalrts::link_brackets( context[7], context[27] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_evar( res, context[20], context[24] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElName/11 e.Info/18 >/1
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    context[19] = context[15];
    // closed e.Indent as range 16
    // closed e.Info as range 18
    //DEBUG: s.CreateMode: 9
    //DEBUG: s.ElemNumber: 10
    //DEBUG: e.Indent: 16
    //DEBUG: e.Info: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/20 </22 & AllocatorMode*2/23 Tile{ AsIs: s.CreateMode/9 } >/24"_name(context["/25 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/10 } >/27 ']'/28 </29 & AllocatorFuncArgument*6/30 Tile{ AsIs: # ElName/11 AsIs: e.Info/18 AsIs: >/1 }");"/31 )/33 Tile{ ]] }
    refalrts::alloc_chars(vm, context[20], context[21], "efalrts::", 9);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_AllocatorMode_D2]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_chars(vm, context[25], context[26], "_name(context[", 14);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::alloc_char(vm, context[28], ']');
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_gen_AllocatorFuncArgument_D6]);
    refalrts::alloc_chars(vm, context[31], context[32], ");", 2);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::reinit_char(context[8], 'r');
    refalrts::update_name(context[4], functions[efunc_Symb]);
    refalrts::link_brackets( context[7], context[33] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[33] );
    res = refalrts::splice_evar( res, context[11], context[1] );
    res = refalrts::splice_evar( res, context[27], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[24], context[26] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintCreateElem/4 (/7 e.new9/12 )/8 s.new6/9 s.new7/10 # ElNumber/11 e.new8/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[11] ) )
      continue;
    // closed e.new9 as range 12
    // closed e.new8 as range 14
    do {
      // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElNumber/11 s.Number/20 >/1
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = context[15];
      // closed e.Indent as range 16
      if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
        continue;
      if( ! refalrts::empty_seq( context[18], context[19] ) )
        continue;
      //DEBUG: s.CreateMode: 9
      //DEBUG: s.ElemNumber: 10
      //DEBUG: e.Indent: 16
      //DEBUG: s.Number: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/21 </23 & AllocatorMode*2/24 Tile{ AsIs: s.CreateMode/9 } >/25"_number(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/10 } >/28"], "/29 </31 Tile{ HalfReuse: & Symb/11 AsIs: s.Number/20 AsIs: >/1 }"UL);"/32 )/34 Tile{ ]] }
      refalrts::alloc_chars(vm, context[21], context[22], "efalrts::", 9);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_chars(vm, context[26], context[27], "_number(context[", 16);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "], ", 3);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_chars(vm, context[32], context[33], "UL);", 4);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_char(context[8], 'r');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::reinit_name(context[11], functions[efunc_Symb]);
      refalrts::link_brackets( context[7], context[34] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[11], context[1] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[21], context[24] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElNumber/11 >/1
      context[16] = context[12];
      context[17] = context[13];
      if( ! refalrts::empty_seq( context[14], context[15] ) )
        continue;
      // closed e.Indent as range 16
      //DEBUG: s.CreateMode: 9
      //DEBUG: s.ElemNumber: 10
      //DEBUG: e.Indent: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/18 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/9 } >/20"_number(context["/21 </23 & Symb/24 Tile{ AsIs: s.ElemNumber/10 HalfReuse: >/11 HalfReuse: ']'/1 }");"/25 )/27 Tile{ ]] }
      refalrts::alloc_chars(vm, context[18], context[19], "efalrts::", 9);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_chars(vm, context[21], context[22], "_number(context[", 16);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[25], context[26], ");", 2);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::reinit_char(context[8], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[11]);
      refalrts::reinit_char(context[1], ']');
      refalrts::link_brackets( context[7], context[27] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_evar( res, context[20], context[24] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElNumber/11 e.Info/18 >/1
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    context[19] = context[15];
    // closed e.Indent as range 16
    // closed e.Info as range 18
    //DEBUG: s.CreateMode: 9
    //DEBUG: s.ElemNumber: 10
    //DEBUG: e.Indent: 16
    //DEBUG: e.Info: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/20 </22 & AllocatorMode*2/23 Tile{ AsIs: s.CreateMode/9 } >/24"_number(context["/25 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/10 } >/27 ']'/28 </29 & AllocatorFuncArgument*6/30 Tile{ AsIs: # ElNumber/11 AsIs: e.Info/18 AsIs: >/1 }");"/31 )/33 Tile{ ]] }
    refalrts::alloc_chars(vm, context[20], context[21], "efalrts::", 9);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_AllocatorMode_D2]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_chars(vm, context[25], context[26], "_number(context[", 16);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::alloc_char(vm, context[28], ']');
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_gen_AllocatorFuncArgument_D6]);
    refalrts::alloc_chars(vm, context[31], context[32], ");", 2);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::reinit_char(context[8], 'r');
    refalrts::update_name(context[4], functions[efunc_Symb]);
    refalrts::link_brackets( context[7], context[33] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[33] );
    res = refalrts::splice_evar( res, context[11], context[1] );
    res = refalrts::splice_evar( res, context[27], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[24], context[26] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintCreateElem/4 (/7 e.new9/12 )/8 s.new6/9 s.new7/10 # ElIdent/11 e.new8/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[11] ) )
      continue;
    // closed e.new9 as range 12
    // closed e.new8 as range 14
    do {
      // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElIdent/11 s.Num/20 e./18 >/1
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = context[15];
      // closed e.Indent as range 16
      if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
        continue;
      // closed e. as range 18
      //DEBUG: s.CreateMode: 9
      //DEBUG: s.ElemNumber: 10
      //DEBUG: e.Indent: 16
      //DEBUG: s.Num: 20
      //DEBUG: e.: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/20 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/21 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/9 } >/23"_ident(context["/24 </26 & Symb/27 Tile{ AsIs: s.ElemNumber/10 HalfReuse: >/11 }"], identifiers[ident_"/28 </30 & CName/31 Tile{ AsIs: e./18 } >/32"]);"/33 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_chars(vm, context[21], context[22], "efalrts::", 9);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_chars(vm, context[24], context[25], "_ident(context[", 15);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[28], context[29], "], identifiers[ident_", 21);
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_CName]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_chars(vm, context[33], context[34], "]);", 3);
      refalrts::reinit_char(context[8], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[11]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      res = refalrts::splice_evar( res, context[23], context[27] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElIdent/11 >/1
      context[16] = context[12];
      context[17] = context[13];
      if( ! refalrts::empty_seq( context[14], context[15] ) )
        continue;
      // closed e.Indent as range 16
      //DEBUG: s.CreateMode: 9
      //DEBUG: s.ElemNumber: 10
      //DEBUG: e.Indent: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/18 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/9 } >/20"_ident(context["/21 </23 & Symb/24 Tile{ AsIs: s.ElemNumber/10 HalfReuse: >/11 HalfReuse: ']'/1 }");"/25 )/27 Tile{ ]] }
      refalrts::alloc_chars(vm, context[18], context[19], "efalrts::", 9);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_chars(vm, context[21], context[22], "_ident(context[", 15);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[25], context[26], ");", 2);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::reinit_char(context[8], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[11]);
      refalrts::reinit_char(context[1], ']');
      refalrts::link_brackets( context[7], context[27] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_evar( res, context[20], context[24] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElIdent/11 e.Info/18 >/1
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    context[19] = context[15];
    // closed e.Indent as range 16
    // closed e.Info as range 18
    //DEBUG: s.CreateMode: 9
    //DEBUG: s.ElemNumber: 10
    //DEBUG: e.Indent: 16
    //DEBUG: e.Info: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/20 </22 & AllocatorMode*2/23 Tile{ AsIs: s.CreateMode/9 } >/24"_ident(context["/25 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/10 } >/27 ']'/28 </29 & AllocatorFuncArgument*6/30 Tile{ AsIs: # ElIdent/11 AsIs: e.Info/18 AsIs: >/1 }");"/31 )/33 Tile{ ]] }
    refalrts::alloc_chars(vm, context[20], context[21], "efalrts::", 9);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_AllocatorMode_D2]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_chars(vm, context[25], context[26], "_ident(context[", 15);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::alloc_char(vm, context[28], ']');
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_gen_AllocatorFuncArgument_D6]);
    refalrts::alloc_chars(vm, context[31], context[32], ");", 2);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::reinit_char(context[8], 'r');
    refalrts::update_name(context[4], functions[efunc_Symb]);
    refalrts::link_brackets( context[7], context[33] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[33] );
    res = refalrts::splice_evar( res, context[11], context[1] );
    res = refalrts::splice_evar( res, context[27], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[24], context[26] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintCreateElem/4 (/7 e.new9/12 )/8 s.new6/9 s.new7/10 # ElOpenADT/11 e.new8/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_ElOpenADT], context[11] ) )
      continue;
    // closed e.new9 as range 12
    // closed e.new8 as range 14
    do {
      // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElOpenADT/11 >/1
      context[16] = context[12];
      context[17] = context[13];
      if( ! refalrts::empty_seq( context[14], context[15] ) )
        continue;
      // closed e.Indent as range 16
      //DEBUG: s.CreateMode: 9
      //DEBUG: s.ElemNumber: 10
      //DEBUG: e.Indent: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/18 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/9 } >/20"_open_adt(context["/21 </23 & Symb/24 Tile{ AsIs: s.ElemNumber/10 HalfReuse: >/11 HalfReuse: ']'/1 }");"/25 )/27 Tile{ ]] }
      refalrts::alloc_chars(vm, context[18], context[19], "efalrts::", 9);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_chars(vm, context[21], context[22], "_open_adt(context[", 18);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[25], context[26], ");", 2);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::reinit_char(context[8], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[11]);
      refalrts::reinit_char(context[1], ']');
      refalrts::link_brackets( context[7], context[27] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_evar( res, context[20], context[24] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElOpenADT/11 e.Info/18 >/1
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    context[19] = context[15];
    // closed e.Indent as range 16
    // closed e.Info as range 18
    //DEBUG: s.CreateMode: 9
    //DEBUG: s.ElemNumber: 10
    //DEBUG: e.Indent: 16
    //DEBUG: e.Info: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/20 </22 & AllocatorMode*2/23 Tile{ AsIs: s.CreateMode/9 } >/24"_open_adt(context["/25 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/10 } >/27 ']'/28 </29 & AllocatorFuncArgument*6/30 Tile{ AsIs: # ElOpenADT/11 AsIs: e.Info/18 AsIs: >/1 }");"/31 )/33 Tile{ ]] }
    refalrts::alloc_chars(vm, context[20], context[21], "efalrts::", 9);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_AllocatorMode_D2]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_chars(vm, context[25], context[26], "_open_adt(context[", 18);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::alloc_char(vm, context[28], ']');
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_gen_AllocatorFuncArgument_D6]);
    refalrts::alloc_chars(vm, context[31], context[32], ");", 2);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::reinit_char(context[8], 'r');
    refalrts::update_name(context[4], functions[efunc_Symb]);
    refalrts::link_brackets( context[7], context[33] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[33] );
    res = refalrts::splice_evar( res, context[11], context[1] );
    res = refalrts::splice_evar( res, context[27], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[24], context[26] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintCreateElem/4 (/7 e.new9/12 )/8 s.new6/9 s.new7/10 # ElCloseADT/11 e.new8/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_ElCloseADT], context[11] ) )
      continue;
    // closed e.new9 as range 12
    // closed e.new8 as range 14
    do {
      // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElCloseADT/11 >/1
      context[16] = context[12];
      context[17] = context[13];
      if( ! refalrts::empty_seq( context[14], context[15] ) )
        continue;
      // closed e.Indent as range 16
      //DEBUG: s.CreateMode: 9
      //DEBUG: s.ElemNumber: 10
      //DEBUG: e.Indent: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/18 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/9 } >/20"_close_adt(context["/21 </23 & Symb/24 Tile{ AsIs: s.ElemNumber/10 HalfReuse: >/11 HalfReuse: ']'/1 }");"/25 )/27 Tile{ ]] }
      refalrts::alloc_chars(vm, context[18], context[19], "efalrts::", 9);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_chars(vm, context[21], context[22], "_close_adt(context[", 19);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[25], context[26], ");", 2);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::reinit_char(context[8], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[11]);
      refalrts::reinit_char(context[1], ']');
      refalrts::link_brackets( context[7], context[27] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_evar( res, context[20], context[24] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElCloseADT/11 e.Info/18 >/1
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    context[19] = context[15];
    // closed e.Indent as range 16
    // closed e.Info as range 18
    //DEBUG: s.CreateMode: 9
    //DEBUG: s.ElemNumber: 10
    //DEBUG: e.Indent: 16
    //DEBUG: e.Info: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/20 </22 & AllocatorMode*2/23 Tile{ AsIs: s.CreateMode/9 } >/24"_close_adt(context["/25 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/10 } >/27 ']'/28 </29 & AllocatorFuncArgument*6/30 Tile{ AsIs: # ElCloseADT/11 AsIs: e.Info/18 AsIs: >/1 }");"/31 )/33 Tile{ ]] }
    refalrts::alloc_chars(vm, context[20], context[21], "efalrts::", 9);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_AllocatorMode_D2]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_chars(vm, context[25], context[26], "_close_adt(context[", 19);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::alloc_char(vm, context[28], ']');
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_gen_AllocatorFuncArgument_D6]);
    refalrts::alloc_chars(vm, context[31], context[32], ");", 2);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::reinit_char(context[8], 'r');
    refalrts::update_name(context[4], functions[efunc_Symb]);
    refalrts::link_brackets( context[7], context[33] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[33] );
    res = refalrts::splice_evar( res, context[11], context[1] );
    res = refalrts::splice_evar( res, context[27], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[24], context[26] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintCreateElem/4 (/7 e.new9/12 )/8 s.new6/9 s.new7/10 # ElOpenBracket/11 e.new8/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_ElOpenBracket], context[11] ) )
      continue;
    // closed e.new9 as range 12
    // closed e.new8 as range 14
    do {
      // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElOpenBracket/11 >/1
      context[16] = context[12];
      context[17] = context[13];
      if( ! refalrts::empty_seq( context[14], context[15] ) )
        continue;
      // closed e.Indent as range 16
      //DEBUG: s.CreateMode: 9
      //DEBUG: s.ElemNumber: 10
      //DEBUG: e.Indent: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/18 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/9 } >/20"_open_bracket(context["/21 </23 & Symb/24 Tile{ AsIs: s.ElemNumber/10 HalfReuse: >/11 HalfReuse: ']'/1 }");"/25 )/27 Tile{ ]] }
      refalrts::alloc_chars(vm, context[18], context[19], "efalrts::", 9);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_chars(vm, context[21], context[22], "_open_bracket(context[", 22);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[25], context[26], ");", 2);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::reinit_char(context[8], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[11]);
      refalrts::reinit_char(context[1], ']');
      refalrts::link_brackets( context[7], context[27] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_evar( res, context[20], context[24] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElOpenBracket/11 e.Info/18 >/1
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    context[19] = context[15];
    // closed e.Indent as range 16
    // closed e.Info as range 18
    //DEBUG: s.CreateMode: 9
    //DEBUG: s.ElemNumber: 10
    //DEBUG: e.Indent: 16
    //DEBUG: e.Info: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/20 </22 & AllocatorMode*2/23 Tile{ AsIs: s.CreateMode/9 } >/24"_open_bracket(context["/25 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/10 } >/27 ']'/28 </29 & AllocatorFuncArgument*6/30 Tile{ AsIs: # ElOpenBracket/11 AsIs: e.Info/18 AsIs: >/1 }");"/31 )/33 Tile{ ]] }
    refalrts::alloc_chars(vm, context[20], context[21], "efalrts::", 9);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_AllocatorMode_D2]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_chars(vm, context[25], context[26], "_open_bracket(context[", 22);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::alloc_char(vm, context[28], ']');
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_gen_AllocatorFuncArgument_D6]);
    refalrts::alloc_chars(vm, context[31], context[32], ");", 2);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::reinit_char(context[8], 'r');
    refalrts::update_name(context[4], functions[efunc_Symb]);
    refalrts::link_brackets( context[7], context[33] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[33] );
    res = refalrts::splice_evar( res, context[11], context[1] );
    res = refalrts::splice_evar( res, context[27], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[24], context[26] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintCreateElem/4 (/7 e.new9/12 )/8 s.new6/9 s.new7/10 # ElCloseBracket/11 e.new8/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_ElCloseBracket], context[11] ) )
      continue;
    // closed e.new9 as range 12
    // closed e.new8 as range 14
    do {
      // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElCloseBracket/11 >/1
      context[16] = context[12];
      context[17] = context[13];
      if( ! refalrts::empty_seq( context[14], context[15] ) )
        continue;
      // closed e.Indent as range 16
      //DEBUG: s.CreateMode: 9
      //DEBUG: s.ElemNumber: 10
      //DEBUG: e.Indent: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/18 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/9 } >/20"_close_bracket(context["/21 </23 & Symb/24 Tile{ AsIs: s.ElemNumber/10 HalfReuse: >/11 HalfReuse: ']'/1 }");"/25 )/27 Tile{ ]] }
      refalrts::alloc_chars(vm, context[18], context[19], "efalrts::", 9);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_chars(vm, context[21], context[22], "_close_bracket(context[", 23);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[25], context[26], ");", 2);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::reinit_char(context[8], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[11]);
      refalrts::reinit_char(context[1], ']');
      refalrts::link_brackets( context[7], context[27] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_evar( res, context[20], context[24] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElCloseBracket/11 e.Info/18 >/1
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    context[19] = context[15];
    // closed e.Indent as range 16
    // closed e.Info as range 18
    //DEBUG: s.CreateMode: 9
    //DEBUG: s.ElemNumber: 10
    //DEBUG: e.Indent: 16
    //DEBUG: e.Info: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/20 </22 & AllocatorMode*2/23 Tile{ AsIs: s.CreateMode/9 } >/24"_close_bracket(context["/25 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/10 } >/27 ']'/28 </29 & AllocatorFuncArgument*6/30 Tile{ AsIs: # ElCloseBracket/11 AsIs: e.Info/18 AsIs: >/1 }");"/31 )/33 Tile{ ]] }
    refalrts::alloc_chars(vm, context[20], context[21], "efalrts::", 9);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_AllocatorMode_D2]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_chars(vm, context[25], context[26], "_close_bracket(context[", 23);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::alloc_char(vm, context[28], ']');
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_gen_AllocatorFuncArgument_D6]);
    refalrts::alloc_chars(vm, context[31], context[32], ");", 2);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::reinit_char(context[8], 'r');
    refalrts::update_name(context[4], functions[efunc_Symb]);
    refalrts::link_brackets( context[7], context[33] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[33] );
    res = refalrts::splice_evar( res, context[11], context[1] );
    res = refalrts::splice_evar( res, context[27], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[24], context[26] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintCreateElem/4 (/7 e.new9/12 )/8 s.new6/9 s.new7/10 # ElOpenCall/11 e.new8/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_ElOpenCall], context[11] ) )
      continue;
    // closed e.new9 as range 12
    // closed e.new8 as range 14
    do {
      // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElOpenCall/11 >/1
      context[16] = context[12];
      context[17] = context[13];
      if( ! refalrts::empty_seq( context[14], context[15] ) )
        continue;
      // closed e.Indent as range 16
      //DEBUG: s.CreateMode: 9
      //DEBUG: s.ElemNumber: 10
      //DEBUG: e.Indent: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/18 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/9 } >/20"_open_call(context["/21 </23 & Symb/24 Tile{ AsIs: s.ElemNumber/10 HalfReuse: >/11 HalfReuse: ']'/1 }");"/25 )/27 Tile{ ]] }
      refalrts::alloc_chars(vm, context[18], context[19], "efalrts::", 9);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_chars(vm, context[21], context[22], "_open_call(context[", 19);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[25], context[26], ");", 2);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::reinit_char(context[8], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[11]);
      refalrts::reinit_char(context[1], ']');
      refalrts::link_brackets( context[7], context[27] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_evar( res, context[20], context[24] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElOpenCall/11 e.Info/18 >/1
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    context[19] = context[15];
    // closed e.Indent as range 16
    // closed e.Info as range 18
    //DEBUG: s.CreateMode: 9
    //DEBUG: s.ElemNumber: 10
    //DEBUG: e.Indent: 16
    //DEBUG: e.Info: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/20 </22 & AllocatorMode*2/23 Tile{ AsIs: s.CreateMode/9 } >/24"_open_call(context["/25 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/10 } >/27 ']'/28 </29 & AllocatorFuncArgument*6/30 Tile{ AsIs: # ElOpenCall/11 AsIs: e.Info/18 AsIs: >/1 }");"/31 )/33 Tile{ ]] }
    refalrts::alloc_chars(vm, context[20], context[21], "efalrts::", 9);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_AllocatorMode_D2]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_chars(vm, context[25], context[26], "_open_call(context[", 19);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::alloc_char(vm, context[28], ']');
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_gen_AllocatorFuncArgument_D6]);
    refalrts::alloc_chars(vm, context[31], context[32], ");", 2);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::reinit_char(context[8], 'r');
    refalrts::update_name(context[4], functions[efunc_Symb]);
    refalrts::link_brackets( context[7], context[33] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[33] );
    res = refalrts::splice_evar( res, context[11], context[1] );
    res = refalrts::splice_evar( res, context[27], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[24], context[26] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintCreateElem/4 (/7 e.new9/12 )/8 s.new6/9 s.new7/10 # ElCloseCall/11 e.new8/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_ElCloseCall], context[11] ) )
      continue;
    // closed e.new9 as range 12
    // closed e.new8 as range 14
    do {
      // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElCloseCall/11 >/1
      context[16] = context[12];
      context[17] = context[13];
      if( ! refalrts::empty_seq( context[14], context[15] ) )
        continue;
      // closed e.Indent as range 16
      //DEBUG: s.CreateMode: 9
      //DEBUG: s.ElemNumber: 10
      //DEBUG: e.Indent: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/18 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/9 } >/20"_close_call(context["/21 </23 & Symb/24 Tile{ AsIs: s.ElemNumber/10 HalfReuse: >/11 HalfReuse: ']'/1 }");"/25 )/27 Tile{ ]] }
      refalrts::alloc_chars(vm, context[18], context[19], "efalrts::", 9);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_chars(vm, context[21], context[22], "_close_call(context[", 20);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[25], context[26], ");", 2);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::reinit_char(context[8], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[11]);
      refalrts::reinit_char(context[1], ']');
      refalrts::link_brackets( context[7], context[27] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_evar( res, context[20], context[24] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElCloseCall/11 e.Info/18 >/1
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    context[19] = context[15];
    // closed e.Indent as range 16
    // closed e.Info as range 18
    //DEBUG: s.CreateMode: 9
    //DEBUG: s.ElemNumber: 10
    //DEBUG: e.Indent: 16
    //DEBUG: e.Info: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/20 </22 & AllocatorMode*2/23 Tile{ AsIs: s.CreateMode/9 } >/24"_close_call(context["/25 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/10 } >/27 ']'/28 </29 & AllocatorFuncArgument*6/30 Tile{ AsIs: # ElCloseCall/11 AsIs: e.Info/18 AsIs: >/1 }");"/31 )/33 Tile{ ]] }
    refalrts::alloc_chars(vm, context[20], context[21], "efalrts::", 9);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_AllocatorMode_D2]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_chars(vm, context[25], context[26], "_close_call(context[", 20);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::alloc_char(vm, context[28], ']');
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_gen_AllocatorFuncArgument_D6]);
    refalrts::alloc_chars(vm, context[31], context[32], ");", 2);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::reinit_char(context[8], 'r');
    refalrts::update_name(context[4], functions[efunc_Symb]);
    refalrts::link_brackets( context[7], context[33] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[33] );
    res = refalrts::splice_evar( res, context[11], context[1] );
    res = refalrts::splice_evar( res, context[27], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[24], context[26] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintCreateElem/4 (/7 e.new9/12 )/8 s.new6/9 s.new7/10 # ElClosureHead/11 e.new8/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_ElClosureHead], context[11] ) )
      continue;
    // closed e.new9 as range 12
    // closed e.new8 as range 14
    do {
      // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElClosureHead/11 >/1
      context[16] = context[12];
      context[17] = context[13];
      if( ! refalrts::empty_seq( context[14], context[15] ) )
        continue;
      // closed e.Indent as range 16
      //DEBUG: s.CreateMode: 9
      //DEBUG: s.ElemNumber: 10
      //DEBUG: e.Indent: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/18 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/9 } >/20"_closure_head(context["/21 </23 & Symb/24 Tile{ AsIs: s.ElemNumber/10 HalfReuse: >/11 HalfReuse: ']'/1 }");"/25 )/27 Tile{ ]] }
      refalrts::alloc_chars(vm, context[18], context[19], "efalrts::", 9);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_chars(vm, context[21], context[22], "_closure_head(context[", 22);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[25], context[26], ");", 2);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::reinit_char(context[8], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[11]);
      refalrts::reinit_char(context[1], ']');
      refalrts::link_brackets( context[7], context[27] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_evar( res, context[20], context[24] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElClosureHead/11 e.Info/18 >/1
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    context[19] = context[15];
    // closed e.Indent as range 16
    // closed e.Info as range 18
    //DEBUG: s.CreateMode: 9
    //DEBUG: s.ElemNumber: 10
    //DEBUG: e.Indent: 16
    //DEBUG: e.Info: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/20 </22 & AllocatorMode*2/23 Tile{ AsIs: s.CreateMode/9 } >/24"_closure_head(context["/25 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/10 } >/27 ']'/28 </29 & AllocatorFuncArgument*6/30 Tile{ AsIs: # ElClosureHead/11 AsIs: e.Info/18 AsIs: >/1 }");"/31 )/33 Tile{ ]] }
    refalrts::alloc_chars(vm, context[20], context[21], "efalrts::", 9);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_AllocatorMode_D2]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_chars(vm, context[25], context[26], "_closure_head(context[", 22);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::alloc_char(vm, context[28], ']');
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_gen_AllocatorFuncArgument_D6]);
    refalrts::alloc_chars(vm, context[31], context[32], ");", 2);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::reinit_char(context[8], 'r');
    refalrts::update_name(context[4], functions[efunc_Symb]);
    refalrts::link_brackets( context[7], context[33] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[33] );
    res = refalrts::splice_evar( res, context[11], context[1] );
    res = refalrts::splice_evar( res, context[27], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[24], context[26] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintCreateElem/4 (/7 e.new9/12 )/8 s.new6/9 s.new7/10 # ElUnwrappedClosure/11 e.new8/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[11] ) )
      continue;
    // closed e.new9 as range 12
    // closed e.new8 as range 14
    do {
      // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElUnwrappedClosure/11 s.HeadOffset/20 >/1
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = context[15];
      // closed e.Indent as range 16
      if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
        continue;
      if( ! refalrts::empty_seq( context[18], context[19] ) )
        continue;
      //DEBUG: s.CreateMode: 9
      //DEBUG: s.ElemNumber: 10
      //DEBUG: e.Indent: 16
      //DEBUG: s.HeadOffset: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/21 </23 & AllocatorMode*2/24 Tile{ AsIs: s.CreateMode/9 } >/25"_unwrapped_closure(context["/26 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/10 } >/28"], context["/29 </31 Tile{ HalfReuse: & Symb/11 AsIs: s.HeadOffset/20 AsIs: >/1 }"]);"/32 )/34 Tile{ ]] }
      refalrts::alloc_chars(vm, context[21], context[22], "efalrts::", 9);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_chars(vm, context[26], context[27], "_unwrapped_closure(context[", 27);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_chars(vm, context[32], context[33], "]);", 3);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_char(context[8], 'r');
      refalrts::update_name(context[4], functions[efunc_Symb]);
      refalrts::reinit_name(context[11], functions[efunc_Symb]);
      refalrts::link_brackets( context[7], context[34] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[11], context[1] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[21], context[24] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElUnwrappedClosure/11 >/1
      context[16] = context[12];
      context[17] = context[13];
      if( ! refalrts::empty_seq( context[14], context[15] ) )
        continue;
      // closed e.Indent as range 16
      //DEBUG: s.CreateMode: 9
      //DEBUG: s.ElemNumber: 10
      //DEBUG: e.Indent: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/18 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/9 } >/20"_unwrapped_closure(context["/21 </23 & Symb/24 Tile{ AsIs: s.ElemNumber/10 HalfReuse: >/11 HalfReuse: ']'/1 }");"/25 )/27 Tile{ ]] }
      refalrts::alloc_chars(vm, context[18], context[19], "efalrts::", 9);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_chars(vm, context[21], context[22], "_unwrapped_closure(context[", 27);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[25], context[26], ");", 2);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::reinit_char(context[8], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[11]);
      refalrts::reinit_char(context[1], ']');
      refalrts::link_brackets( context[7], context[27] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_evar( res, context[20], context[24] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintCreateElem/4 (/7 e.Indent/16 )/8 s.CreateMode/9 s.ElemNumber/10 # ElUnwrappedClosure/11 e.Info/18 >/1
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    context[19] = context[15];
    // closed e.Indent as range 16
    // closed e.Info as range 18
    //DEBUG: s.CreateMode: 9
    //DEBUG: s.ElemNumber: 10
    //DEBUG: e.Indent: 16
    //DEBUG: e.Info: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/16 HalfReuse: 'r'/8 }"efalrts::"/20 </22 & AllocatorMode*2/23 Tile{ AsIs: s.CreateMode/9 } >/24"_unwrapped_closure(context["/25 Tile{ AsIs: </0 Reuse: & Symb/4 } Tile{ AsIs: s.ElemNumber/10 } >/27 ']'/28 </29 & AllocatorFuncArgument*6/30 Tile{ AsIs: # ElUnwrappedClosure/11 AsIs: e.Info/18 AsIs: >/1 }");"/31 )/33 Tile{ ]] }
    refalrts::alloc_chars(vm, context[20], context[21], "efalrts::", 9);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_AllocatorMode_D2]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_chars(vm, context[25], context[26], "_unwrapped_closure(context[", 27);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::alloc_char(vm, context[28], ']');
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_gen_AllocatorFuncArgument_D6]);
    refalrts::alloc_chars(vm, context[31], context[32], ");", 2);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::reinit_char(context[8], 'r');
    refalrts::update_name(context[4], functions[efunc_Symb]);
    refalrts::link_brackets( context[7], context[33] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[33] );
    res = refalrts::splice_evar( res, context[11], context[1] );
    res = refalrts::splice_evar( res, context[27], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[24], context[26] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintCreateElem/4 (/7 e.new11/12 )/8 s.new6/9 s.new7/10 s.new8/11 s.new9/16 e.new10/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    // closed e.new11 as range 12
    if( ! refalrts::svar_left( context[16], context[14], context[15] ) )
      continue;
    // closed e.new10 as range 14
    do {
      // </0 & PrintCreateElem/4 (/7 e.Indent/17 )/8 s.CreateMode/9 s.ElemNumber/10 # ElChar/11 s.Char/16 >/1
      context[17] = context[12];
      context[18] = context[13];
      if( ! refalrts::ident_term( identifiers[ident_ElChar], context[11] ) )
        continue;
      if( ! refalrts::empty_seq( context[14], context[15] ) )
        continue;
      // closed e.Indent as range 17
      //DEBUG: s.CreateMode: 9
      //DEBUG: s.ElemNumber: 10
      //DEBUG: s.Char: 16
      //DEBUG: e.Indent: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/17 HalfReuse: 'r'/8 }"efalrts::"/19 </21 & AllocatorMode*2/22 Tile{ AsIs: s.CreateMode/9 } >/23 '_'/24 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElChar/25 >/26"(context["/27 </29 & Symb/30 Tile{ AsIs: s.ElemNumber/10 } >/31"], \'"/32 </34 Tile{ HalfReuse: & EscapeChar/11 AsIs: s.Char/16 AsIs: >/1 }"\');"/35 )/37 Tile{ ]] }
      refalrts::alloc_chars(vm, context[19], context[20], "efalrts::", 9);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_char(vm, context[24], '_');
      refalrts::alloc_ident(vm, context[25], identifiers[ident_ElChar]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::alloc_chars(vm, context[27], context[28], "(context[", 9);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::alloc_chars(vm, context[32], context[33], "], \'", 4);
      refalrts::alloc_open_call(vm, context[34]);
      refalrts::alloc_chars(vm, context[35], context[36], "\');", 3);
      refalrts::alloc_close_bracket(vm, context[37]);
      refalrts::reinit_char(context[8], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
      refalrts::reinit_name(context[11], functions[efunc_EscapeChar]);
      refalrts::link_brackets( context[7], context[37] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[35], context[37] );
      res = refalrts::splice_evar( res, context[11], context[1] );
      res = refalrts::splice_evar( res, context[31], context[34] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[25], context[30] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrintCreateElem/4 (/7 e.Indent/17 )/8 s.CreateMode/9 s.ElemNumber/10 # ElName/11 s.Num/16 e./19 >/1
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      context[20] = context[15];
      if( ! refalrts::ident_term( identifiers[ident_ElName], context[11] ) )
        continue;
      // closed e.Indent as range 17
      // closed e. as range 19
      //DEBUG: s.CreateMode: 9
      //DEBUG: s.ElemNumber: 10
      //DEBUG: s.Num: 16
      //DEBUG: e.Indent: 17
      //DEBUG: e.: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/16 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/17 HalfReuse: 'r'/8 }"efalrts::"/21 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/9 } >/23 '_'/24 </25 & AllocatorFuncName*12/26 # ElName/27 >/28"(context["/29 </31 & Symb/32 Tile{ AsIs: s.ElemNumber/10 HalfReuse: >/11 }"], functions[efunc_"/33 </35 & CName/36 Tile{ AsIs: e./19 } >/37"]);"/38 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_chars(vm, context[21], context[22], "efalrts::", 9);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_char(vm, context[24], '_');
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_gen_AllocatorFuncName_D12]);
      refalrts::alloc_ident(vm, context[27], identifiers[ident_ElName]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "(context[", 9);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[33], context[34], "], functions[efunc_", 19);
      refalrts::alloc_open_call(vm, context[35]);
      refalrts::alloc_name(vm, context[36], functions[efunc_CName]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::alloc_chars(vm, context[38], context[39], "]);", 3);
      refalrts::reinit_char(context[8], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[11]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[37], context[39] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[33], context[36] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      res = refalrts::splice_evar( res, context[23], context[32] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrintCreateElem/4 (/7 e.Indent/17 )/8 s.CreateMode/9 s.ElemNumber/10 # ElNumber/11 s.Number/16 >/1
      context[17] = context[12];
      context[18] = context[13];
      if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[11] ) )
        continue;
      if( ! refalrts::empty_seq( context[14], context[15] ) )
        continue;
      // closed e.Indent as range 17
      //DEBUG: s.CreateMode: 9
      //DEBUG: s.ElemNumber: 10
      //DEBUG: s.Number: 16
      //DEBUG: e.Indent: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/17 HalfReuse: 'r'/8 }"efalrts::"/19 </21 & AllocatorMode*2/22 Tile{ AsIs: s.CreateMode/9 } >/23 '_'/24 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElNumber/25 >/26"(context["/27 </29 & Symb/30 Tile{ AsIs: s.ElemNumber/10 } >/31"], "/32 </34 Tile{ HalfReuse: & Symb/11 AsIs: s.Number/16 AsIs: >/1 }"UL);"/35 )/37 Tile{ ]] }
      refalrts::alloc_chars(vm, context[19], context[20], "efalrts::", 9);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_char(vm, context[24], '_');
      refalrts::alloc_ident(vm, context[25], identifiers[ident_ElNumber]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::alloc_chars(vm, context[27], context[28], "(context[", 9);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::alloc_chars(vm, context[32], context[33], "], ", 3);
      refalrts::alloc_open_call(vm, context[34]);
      refalrts::alloc_chars(vm, context[35], context[36], "UL);", 4);
      refalrts::alloc_close_bracket(vm, context[37]);
      refalrts::reinit_char(context[8], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
      refalrts::reinit_name(context[11], functions[efunc_Symb]);
      refalrts::link_brackets( context[7], context[37] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[35], context[37] );
      res = refalrts::splice_evar( res, context[11], context[1] );
      res = refalrts::splice_evar( res, context[31], context[34] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[25], context[30] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PrintCreateElem/4 (/7 e.Indent/17 )/8 s.CreateMode/9 s.ElemNumber/10 # ElIdent/11 s.Num/16 e./19 >/1
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      context[20] = context[15];
      if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[11] ) )
        continue;
      // closed e.Indent as range 17
      // closed e. as range 19
      //DEBUG: s.CreateMode: 9
      //DEBUG: s.ElemNumber: 10
      //DEBUG: s.Num: 16
      //DEBUG: e.Indent: 17
      //DEBUG: e.: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Num/16 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/17 HalfReuse: 'r'/8 }"efalrts::"/21 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/9 } >/23 '_'/24 </25 & AllocatorFuncName*12/26 # ElIdent/27 >/28"(context["/29 </31 & Symb/32 Tile{ AsIs: s.ElemNumber/10 HalfReuse: >/11 }"], identifiers[ident_"/33 </35 & CName/36 Tile{ AsIs: e./19 } >/37"]);"/38 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_chars(vm, context[21], context[22], "efalrts::", 9);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_char(vm, context[24], '_');
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_gen_AllocatorFuncName_D12]);
      refalrts::alloc_ident(vm, context[27], identifiers[ident_ElIdent]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "(context[", 9);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[33], context[34], "], identifiers[ident_", 21);
      refalrts::alloc_open_call(vm, context[35]);
      refalrts::alloc_name(vm, context[36], functions[efunc_CName]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::alloc_chars(vm, context[38], context[39], "]);", 3);
      refalrts::reinit_char(context[8], 'r');
      refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
      refalrts::reinit_close_call(context[11]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[37], context[39] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[33], context[36] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      res = refalrts::splice_evar( res, context[23], context[32] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintCreateElem/4 (/7 e.Indent/17 )/8 s.CreateMode/9 s.ElemNumber/10 # ElUnwrappedClosure/11 s.HeadOffset/16 >/1
    context[17] = context[12];
    context[18] = context[13];
    if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[11] ) )
      continue;
    if( ! refalrts::empty_seq( context[14], context[15] ) )
      continue;
    // closed e.Indent as range 17
    //DEBUG: s.CreateMode: 9
    //DEBUG: s.ElemNumber: 10
    //DEBUG: s.HeadOffset: 16
    //DEBUG: e.Indent: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/17 HalfReuse: 'r'/8 }"efalrts::"/19 </21 & AllocatorMode*2/22 Tile{ AsIs: s.CreateMode/9 } >/23 '_'/24 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } # ElUnwrappedClosure/25 >/26"(context["/27 </29 & Symb/30 Tile{ AsIs: s.ElemNumber/10 } >/31"], context["/32 </34 Tile{ HalfReuse: & Symb/11 AsIs: s.HeadOffset/16 AsIs: >/1 }"]);"/35 )/37 Tile{ ]] }
    refalrts::alloc_chars(vm, context[19], context[20], "efalrts::", 9);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_AllocatorMode_D2]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::alloc_char(vm, context[24], '_');
    refalrts::alloc_ident(vm, context[25], identifiers[ident_ElUnwrappedClosure]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::alloc_chars(vm, context[27], context[28], "(context[", 9);
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[31]);
    refalrts::alloc_chars(vm, context[32], context[33], "], context[", 11);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_chars(vm, context[35], context[36], "]);", 3);
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::reinit_char(context[8], 'r');
    refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
    refalrts::reinit_name(context[11], functions[efunc_Symb]);
    refalrts::link_brackets( context[7], context[37] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[35], context[37] );
    res = refalrts::splice_evar( res, context[11], context[1] );
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[25], context[30] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[19], context[22] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintCreateElem/4 (/7 e.Indent/12 )/8 s.CreateMode/9 s.ElemNumber/10 s.ElementType/11 >/1
    context[12] = context[5];
    context[13] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Indent as range 12
    //DEBUG: s.CreateMode: 9
    //DEBUG: s.ElemNumber: 10
    //DEBUG: s.ElementType: 11
    //DEBUG: e.Indent: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/12 HalfReuse: 'r'/8 }"efalrts::"/14 Tile{ AsIs: </0 Reuse: & AllocatorMode*2/4 } Tile{ AsIs: s.CreateMode/9 } >/16 '_'/17 </18 & AllocatorFuncName*12/19 Tile{ AsIs: s.ElementType/11 AsIs: >/1 }"(context["/20 </22 & Symb/23 Tile{ AsIs: s.ElemNumber/10 } >/24"]);"/25 )/27 Tile{ ]] }
    refalrts::alloc_chars(vm, context[14], context[15], "efalrts::", 9);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::alloc_char(vm, context[17], '_');
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[19], functions[efunc_gen_AllocatorFuncName_D12]);
    refalrts::alloc_chars(vm, context[20], context[21], "(context[", 9);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_chars(vm, context[25], context[26], "]);", 3);
    refalrts::alloc_close_bracket(vm, context[27]);
    refalrts::reinit_char(context[8], 'r');
    refalrts::update_name(context[4], functions[efunc_gen_AllocatorMode_D2]);
    refalrts::link_brackets( context[7], context[27] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[11], context[1] );
    res = refalrts::splice_evar( res, context[16], context[19] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintCreateElem/4 (/7 e.Indent/5 )/8 s.CreateMode/9 s.ElemNumber/10 s.ElementType/11 e.Info/2 >/1
  // closed e.Indent as range 5
  // closed e.Info as range 2
  //DEBUG: s.CreateMode: 9
  //DEBUG: s.ElemNumber: 10
  //DEBUG: s.ElementType: 11
  //DEBUG: e.Indent: 5
  //DEBUG: e.Info: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Indent/5 HalfReuse: 'r'/8 }"efalrts::"/12 </14 & AllocatorMode*2/15 Tile{ AsIs: s.CreateMode/9 } >/16 '_'/17 Tile{ AsIs: </0 Reuse: & AllocatorFuncName*12/4 } s.ElementType/11/18 >/19"(context["/20 </22 & Symb/23 Tile{ AsIs: s.ElemNumber/10 } >/24 ']'/25 </26 & AllocatorFuncArgument*6/27 Tile{ AsIs: s.ElementType/11 AsIs: e.Info/2 AsIs: >/1 }");"/28 )/30 Tile{ ]] }
  refalrts::alloc_chars(vm, context[12], context[13], "efalrts::", 9);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_AllocatorMode_D2]);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::alloc_char(vm, context[17], '_');
  refalrts::copy_stvar(vm, context[18], context[11]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::alloc_chars(vm, context[20], context[21], "(context[", 9);
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::alloc_name(vm, context[23], functions[efunc_Symb]);
  refalrts::alloc_close_call(vm, context[24]);
  refalrts::alloc_char(vm, context[25], ']');
  refalrts::alloc_open_call(vm, context[26]);
  refalrts::alloc_name(vm, context[27], functions[efunc_gen_AllocatorFuncArgument_D6]);
  refalrts::alloc_chars(vm, context[28], context[29], ");", 2);
  refalrts::alloc_close_bracket(vm, context[30]);
  refalrts::reinit_char(context[8], 'r');
  refalrts::update_name(context[4], functions[efunc_gen_AllocatorFuncName_D12]);
  refalrts::link_brackets( context[7], context[30] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[26] );
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[22] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[28], context[30] );
  res = refalrts::splice_evar( res, context[11], context[1] );
  res = refalrts::splice_evar( res, context[24], context[27] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_evar( res, context[18], context[23] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PrintCreateElem("PrintCreateElem", COOKIE1_, COOKIE2_, func_PrintCreateElem);


static refalrts::FnResult func_AllocatorMode(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & AllocatorMode/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & AllocatorMode/4 s.new1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & AllocatorMode/4 # Reinit/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Reinit], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'r'/0 HalfReuse: 'e'/4 HalfReuse: 'i'/5 HalfReuse: 'n'/1 }"it"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "it", 2);
    refalrts::reinit_char(context[0], 'r');
    refalrts::reinit_char(context[4], 'e');
    refalrts::reinit_char(context[5], 'i');
    refalrts::reinit_char(context[1], 'n');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AllocatorMode/4 # Update/5 >/1
  if( ! refalrts::ident_term( identifiers[ident_Update], context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: 'u'/0 HalfReuse: 'p'/4 HalfReuse: 'd'/5 HalfReuse: 'a'/1 }"te"/6 Tile{ ]] }
  refalrts::alloc_chars(vm, context[6], context[7], "te", 2);
  refalrts::reinit_char(context[0], 'u');
  refalrts::reinit_char(context[4], 'p');
  refalrts::reinit_char(context[5], 'd');
  refalrts::reinit_char(context[1], 'a');
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_AllocatorMode("AllocatorMode", COOKIE1_, COOKIE2_, func_AllocatorMode);


static refalrts::FnResult func_AllocatorFuncName(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & AllocatorFuncName/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & AllocatorFuncName/4 s.new1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & AllocatorFuncName/4 # ElChar/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElChar], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'c'/0 HalfReuse: 'h'/4 HalfReuse: 'a'/5 HalfReuse: 'r'/1 ]] }
    refalrts::reinit_char(context[0], 'c');
    refalrts::reinit_char(context[4], 'h');
    refalrts::reinit_char(context[5], 'a');
    refalrts::reinit_char(context[1], 'r');
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & AllocatorFuncName/4 # ElName/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElName], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'n'/0 HalfReuse: 'a'/4 HalfReuse: 'm'/5 HalfReuse: 'e'/1 ]] }
    refalrts::reinit_char(context[0], 'n');
    refalrts::reinit_char(context[4], 'a');
    refalrts::reinit_char(context[5], 'm');
    refalrts::reinit_char(context[1], 'e');
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & AllocatorFuncName/4 # ElNumber/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'n'/0 HalfReuse: 'u'/4 HalfReuse: 'm'/5 HalfReuse: 'b'/1 }"er"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "er", 2);
    refalrts::reinit_char(context[0], 'n');
    refalrts::reinit_char(context[4], 'u');
    refalrts::reinit_char(context[5], 'm');
    refalrts::reinit_char(context[1], 'b');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & AllocatorFuncName/4 # ElIdent/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'i'/0 HalfReuse: 'd'/4 HalfReuse: 'e'/5 HalfReuse: 'n'/1 } 't'/6 Tile{ ]] }
    refalrts::alloc_char(vm, context[6], 't');
    refalrts::reinit_char(context[0], 'i');
    refalrts::reinit_char(context[4], 'd');
    refalrts::reinit_char(context[5], 'e');
    refalrts::reinit_char(context[1], 'n');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[6] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & AllocatorFuncName/4 # ElOpenADT/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElOpenADT], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'o'/0 HalfReuse: 'p'/4 HalfReuse: 'e'/5 HalfReuse: 'n'/1 }"_adt"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "_adt", 4);
    refalrts::reinit_char(context[0], 'o');
    refalrts::reinit_char(context[4], 'p');
    refalrts::reinit_char(context[5], 'e');
    refalrts::reinit_char(context[1], 'n');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & AllocatorFuncName/4 # ElCloseADT/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElCloseADT], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'c'/0 HalfReuse: 'l'/4 HalfReuse: 'o'/5 HalfReuse: 's'/1 }"e_adt"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "e_adt", 5);
    refalrts::reinit_char(context[0], 'c');
    refalrts::reinit_char(context[4], 'l');
    refalrts::reinit_char(context[5], 'o');
    refalrts::reinit_char(context[1], 's');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & AllocatorFuncName/4 # ElOpenBracket/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElOpenBracket], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'o'/0 HalfReuse: 'p'/4 HalfReuse: 'e'/5 HalfReuse: 'n'/1 }"_bracket"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "_bracket", 8);
    refalrts::reinit_char(context[0], 'o');
    refalrts::reinit_char(context[4], 'p');
    refalrts::reinit_char(context[5], 'e');
    refalrts::reinit_char(context[1], 'n');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & AllocatorFuncName/4 # ElCloseBracket/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElCloseBracket], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'c'/0 HalfReuse: 'l'/4 HalfReuse: 'o'/5 HalfReuse: 's'/1 }"e_bracket"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "e_bracket", 9);
    refalrts::reinit_char(context[0], 'c');
    refalrts::reinit_char(context[4], 'l');
    refalrts::reinit_char(context[5], 'o');
    refalrts::reinit_char(context[1], 's');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & AllocatorFuncName/4 # ElOpenCall/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElOpenCall], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'o'/0 HalfReuse: 'p'/4 HalfReuse: 'e'/5 HalfReuse: 'n'/1 }"_call"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "_call", 5);
    refalrts::reinit_char(context[0], 'o');
    refalrts::reinit_char(context[4], 'p');
    refalrts::reinit_char(context[5], 'e');
    refalrts::reinit_char(context[1], 'n');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & AllocatorFuncName/4 # ElCloseCall/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElCloseCall], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'c'/0 HalfReuse: 'l'/4 HalfReuse: 'o'/5 HalfReuse: 's'/1 }"e_call"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "e_call", 6);
    refalrts::reinit_char(context[0], 'c');
    refalrts::reinit_char(context[4], 'l');
    refalrts::reinit_char(context[5], 'o');
    refalrts::reinit_char(context[1], 's');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & AllocatorFuncName/4 # ElClosureHead/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElClosureHead], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 'c'/0 HalfReuse: 'l'/4 HalfReuse: 'o'/5 HalfReuse: 's'/1 }"ure_head"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "ure_head", 8);
    refalrts::reinit_char(context[0], 'c');
    refalrts::reinit_char(context[4], 'l');
    refalrts::reinit_char(context[5], 'o');
    refalrts::reinit_char(context[1], 's');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AllocatorFuncName/4 # ElUnwrappedClosure/5 >/1
  if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: 'u'/0 HalfReuse: 'n'/4 HalfReuse: 'w'/5 HalfReuse: 'r'/1 }"apped_closure"/6 Tile{ ]] }
  refalrts::alloc_chars(vm, context[6], context[7], "apped_closure", 13);
  refalrts::reinit_char(context[0], 'u');
  refalrts::reinit_char(context[4], 'n');
  refalrts::reinit_char(context[5], 'w');
  refalrts::reinit_char(context[1], 'r');
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_AllocatorFuncName("AllocatorFuncName", COOKIE1_, COOKIE2_, func_AllocatorFuncName);


static refalrts::FnResult func_AllocatorFuncArgument(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & AllocatorFuncArgument/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & AllocatorFuncArgument/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & AllocatorFuncArgument/4 s.new3/5 s.new4/8 e.new5/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    // closed e.new5 as range 6
    do {
      // </0 & AllocatorFuncArgument/4 # ElChar/5 s.Char/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_ElChar], context[5] ) )
        continue;
      if( ! refalrts::empty_seq( context[6], context[7] ) )
        continue;
      //DEBUG: s.Char: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ }", "/9 Tile{ HalfReuse: '\''/0 HalfReuse: </4 HalfReuse: & EscapeChar/5 AsIs: s.Char/8 AsIs: >/1 } '\''/11 Tile{ ]] }
      refalrts::alloc_chars(vm, context[9], context[10], ", ", 2);
      refalrts::alloc_char(vm, context[11], '\'');
      refalrts::reinit_char(context[0], '\'');
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[5], functions[efunc_EscapeChar]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[0], context[1] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & AllocatorFuncArgument/4 # ElName/5 s.Num/8 e.Name/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::ident_term( identifiers[ident_ElName], context[5] ) )
        continue;
      // closed e.Name as range 9
      //DEBUG: s.Num: 8
      //DEBUG: e.Name: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Num/8 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: ','/0 HalfReuse: ' '/4 HalfReuse: 'f'/5 }"unctions[efunc_"/11 </13 & CName/14 Tile{ AsIs: e.Name/9 } >/15 Tile{ HalfReuse: ']'/1 ]] }
      refalrts::alloc_chars(vm, context[11], context[12], "unctions[efunc_", 15);
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_CName]);
      refalrts::alloc_close_call(vm, context[15]);
      refalrts::reinit_char(context[0], ',');
      refalrts::reinit_char(context[4], ' ');
      refalrts::reinit_char(context[5], 'f');
      refalrts::reinit_char(context[1], ']');
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[11], context[14] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & AllocatorFuncArgument/4 # ElNumber/5 s.Number/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[5] ) )
        continue;
      if( ! refalrts::empty_seq( context[6], context[7] ) )
        continue;
      //DEBUG: s.Number: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } ','/9 Tile{ HalfReuse: ' '/0 HalfReuse: </4 HalfReuse: & Symb/5 AsIs: s.Number/8 AsIs: >/1 }"UL"/10 Tile{ ]] }
      refalrts::alloc_char(vm, context[9], ',');
      refalrts::alloc_chars(vm, context[10], context[11], "UL", 2);
      refalrts::reinit_char(context[0], ' ');
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[5], functions[efunc_Symb]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[10], context[11] );
      res = refalrts::splice_evar( res, context[0], context[1] );
      res = refalrts::splice_elem( res, context[9] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & AllocatorFuncArgument/4 # ElIdent/5 s.Num/8 e.Name/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[5] ) )
        continue;
      // closed e.Name as range 9
      //DEBUG: s.Num: 8
      //DEBUG: e.Name: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Num/8 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: ','/0 HalfReuse: ' '/4 HalfReuse: 'i'/5 }"dentifiers[ident_"/11 </13 & CName/14 Tile{ AsIs: e.Name/9 } >/15 Tile{ HalfReuse: ']'/1 ]] }
      refalrts::alloc_chars(vm, context[11], context[12], "dentifiers[ident_", 17);
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_CName]);
      refalrts::alloc_close_call(vm, context[15]);
      refalrts::reinit_char(context[0], ',');
      refalrts::reinit_char(context[4], ' ');
      refalrts::reinit_char(context[5], 'i');
      refalrts::reinit_char(context[1], ']');
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[11], context[14] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & AllocatorFuncArgument/4 # ElUnwrappedClosure/5 s.HeadOffset/8 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[5] ) )
      continue;
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    //DEBUG: s.HeadOffset: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ }", context"/9 Tile{ HalfReuse: '['/0 HalfReuse: </4 HalfReuse: & Symb/5 AsIs: s.HeadOffset/8 AsIs: >/1 } ']'/11 Tile{ ]] }
    refalrts::alloc_chars(vm, context[9], context[10], ", context", 9);
    refalrts::alloc_char(vm, context[11], ']');
    refalrts::reinit_char(context[0], '[');
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Symb]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AllocatorFuncArgument/4 s.Other/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Other: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & AllocatorFuncArgument/4 s.Other/5 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_AllocatorFuncArgument("AllocatorFuncArgument", COOKIE1_, COOKIE2_, func_AllocatorFuncArgument);


static refalrts::FnResult func_gen_Apply_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@2/4 t.new1/5 t.new2/7 t.new3/9 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Apply@2/4 s.Fn/5 t.Acc/7 t.Next/9 >/1
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 9
    //DEBUG: s.Fn: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: t.Acc/7 AsIs: t.Next/9 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@2/4 (/5 t.Closure/13 e.Bounded/11 )/6 t.Acc/7 t.Next/9 >/1
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded as range 11
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 9
    //DEBUG: t.Closure: 13
    //DEBUG: e.Bounded: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@4/4 } Tile{ AsIs: t.Closure/13 } Tile{ AsIs: e.Bounded/11 } Tile{ AsIs: t.Acc/7 AsIs: t.Next/9 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@2/4 t.dyn0/5 t.Acc/7 t.Next/9 >/1
  //DEBUG: t.dyn0: 5
  //DEBUG: t.Acc: 7
  //DEBUG: t.Next: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: t.Acc/7 AsIs: t.Next/9 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z2("Apply@2", COOKIE1_, COOKIE2_, func_gen_Apply_Z2);


static refalrts::FnResult func_gen_SetLineNumbers_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 73 elems
  refalrts::Iter context[73];
  refalrts::zeros( context, 73 );
  // </0 & SetLineNumbers@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SetLineNumbers@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & SetLineNumbers@1/4 (/7 e.new6/13 )/8 (/11 e.new7/15 )/12 (/21 e.new4/19 )/22 e.new5/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.new6 as range 13
    // closed e.new7 as range 15
    // closed e.new4 as range 19
    // closed e.new5 as range 17
    do {
      // </0 & SetLineNumbers@1/4 (/7 e.new11/23 )/8 (/11 e.new12/25 )/12 (/21 s.new9/31 e.new10/27 )/22 e.new8/29 >/1
      context[23] = context[13];
      context[24] = context[14];
      context[25] = context[15];
      context[26] = context[16];
      context[27] = context[19];
      context[28] = context[20];
      context[29] = context[17];
      context[30] = context[18];
      // closed e.new11 as range 23
      // closed e.new12 as range 25
      // closed e.new8 as range 29
      if( ! refalrts::svar_left( context[31], context[27], context[28] ) )
        continue;
      // closed e.new10 as range 27
      do {
        // </0 & SetLineNumbers@1/4 (/7 e.new15/32 )/8 (/11 e.new16/34 )/12 (/21 # NativeInsertBegin/31 t.new14/40 )/22 e.new13/38 >/1
        context[32] = context[23];
        context[33] = context[24];
        context[34] = context[25];
        context[35] = context[26];
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_NativeInsertBegin], context[31] ) )
          continue;
        // closed e.new15 as range 32
        // closed e.new16 as range 34
        // closed e.new13 as range 38
        context[41] = refalrts::tvar_left( context[40], context[36], context[37] );
        if( ! context[41] )
          continue;
        if( ! refalrts::empty_seq( context[36], context[37] ) )
          continue;
        do {
          // </0 & SetLineNumbers@1/4 (/7 e.SourceFileName/42 )/8 (/11 e.TargetFileName/44 )/12 (/21 # NativeInsertBegin/31 s.SrcLineNum/40 )/22 e.Lines/46 >/1
          context[42] = context[32];
          context[43] = context[33];
          context[44] = context[34];
          context[45] = context[35];
          context[46] = context[38];
          context[47] = context[39];
          if( ! refalrts::svar_term( context[40], context[40] ) )
            continue;
          // closed e.SourceFileName as range 42
          // closed e.TargetFileName as range 44
          // closed e.Lines as range 46
          //DEBUG: s.SrcLineNum: 40
          //DEBUG: e.SourceFileName: 42
          //DEBUG: e.TargetFileName: 44
          //DEBUG: e.Lines: 46

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } (/48"#line "/49 </51 Tile{ HalfReuse: & Symb/31 AsIs: s.SrcLineNum/40 HalfReuse: >/22 }" \""/52 </54 & EscapeString/55 e.SourceFileName/42/56 >/58 '\"'/59 )/60 Tile{ AsIs: </0 Reuse: & SetLineNumbers/4 AsIs: (/7 AsIs: e.SourceFileName/42 AsIs: )/8 AsIs: (/11 AsIs: e.TargetFileName/44 AsIs: )/12 HalfReuse: 2/21 } Tile{ AsIs: e.Lines/46 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[48]);
          refalrts::alloc_chars(vm, context[49], context[50], "#line ", 6);
          refalrts::alloc_open_call(vm, context[51]);
          refalrts::alloc_chars(vm, context[52], context[53], " \"", 2);
          refalrts::alloc_open_call(vm, context[54]);
          refalrts::alloc_name(vm, context[55], functions[efunc_EscapeString]);
          refalrts::copy_evar(vm, context[56], context[57], context[42], context[43]);
          refalrts::alloc_close_call(vm, context[58]);
          refalrts::alloc_char(vm, context[59], '\"');
          refalrts::alloc_close_bracket(vm, context[60]);
          refalrts::reinit_name(context[31], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[22]);
          refalrts::update_name(context[4], functions[efunc_SetLineNumbers]);
          refalrts::reinit_number(context[21], 2UL);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[48], context[60] );
          refalrts::push_stack( vm, context[58] );
          refalrts::push_stack( vm, context[54] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[51] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[0], context[21] );
          res = refalrts::splice_evar( res, context[52], context[60] );
          res = refalrts::splice_evar( res, context[31], context[22] );
          res = refalrts::splice_evar( res, context[48], context[51] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & SetLineNumbers@1/4 (/7 e.new21/42 )/8 (/11 e.new22/44 )/12 (/21 # NativeInsertBegin/31 (/40 s.new18/50 t.new19/51 e.new20/48 )/41 )/22 e.new17/46 >/1
        context[42] = context[32];
        context[43] = context[33];
        context[44] = context[34];
        context[45] = context[35];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = 0;
        context[49] = 0;
        if( ! refalrts::brackets_term( context[48], context[49], context[40] ) )
          continue;
        // closed e.new21 as range 42
        // closed e.new22 as range 44
        // closed e.new17 as range 46
        if( ! refalrts::svar_left( context[50], context[48], context[49] ) )
          continue;
        context[52] = refalrts::tvar_left( context[51], context[48], context[49] );
        if( ! context[52] )
          continue;
        // closed e.new20 as range 48
        do {
          // </0 & SetLineNumbers@1/4 (/7 e.SourceFileName/53 )/8 (/11 e.TargetFileName/55 )/12 (/21 # NativeInsertBegin/31 (/40 # FileLine/50 s.Line/51 e.File/57 )/41 )/22 e.Lines/59 >/1
          context[53] = context[42];
          context[54] = context[43];
          context[55] = context[44];
          context[56] = context[45];
          context[57] = context[48];
          context[58] = context[49];
          context[59] = context[46];
          context[60] = context[47];
          if( ! refalrts::svar_term( context[51], context[51] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_FileLine], context[50] ) )
            continue;
          // closed e.SourceFileName as range 53
          // closed e.TargetFileName as range 55
          // closed e.File as range 57
          // closed e.Lines as range 59
          //DEBUG: s.Line: 51
          //DEBUG: e.SourceFileName: 53
          //DEBUG: e.TargetFileName: 55
          //DEBUG: e.File: 57
          //DEBUG: e.Lines: 59

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } (/61"#line"/62 Tile{ HalfReuse: ' '/31 HalfReuse: </40 HalfReuse: & Symb/50 AsIs: s.Line/51 } >/64" \""/65 </67 & EscapeString/68 Tile{ AsIs: e.File/57 } >/69 Tile{ HalfReuse: '\"'/41 AsIs: )/22 } Tile{ AsIs: </0 Reuse: & SetLineNumbers/4 AsIs: (/7 AsIs: e.SourceFileName/53 AsIs: )/8 AsIs: (/11 AsIs: e.TargetFileName/55 AsIs: )/12 HalfReuse: 2/21 } Tile{ AsIs: e.Lines/59 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[61]);
          refalrts::alloc_chars(vm, context[62], context[63], "#line", 5);
          refalrts::alloc_close_call(vm, context[64]);
          refalrts::alloc_chars(vm, context[65], context[66], " \"", 2);
          refalrts::alloc_open_call(vm, context[67]);
          refalrts::alloc_name(vm, context[68], functions[efunc_EscapeString]);
          refalrts::alloc_close_call(vm, context[69]);
          refalrts::reinit_char(context[31], ' ');
          refalrts::reinit_open_call(context[40]);
          refalrts::reinit_name(context[50], functions[efunc_Symb]);
          refalrts::reinit_char(context[41], '\"');
          refalrts::update_name(context[4], functions[efunc_SetLineNumbers]);
          refalrts::reinit_number(context[21], 2UL);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[61], context[22] );
          refalrts::push_stack( vm, context[69] );
          refalrts::push_stack( vm, context[67] );
          refalrts::push_stack( vm, context[64] );
          refalrts::push_stack( vm, context[40] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[59], context[60] );
          res = refalrts::splice_evar( res, context[0], context[21] );
          res = refalrts::splice_evar( res, context[41], context[22] );
          res = refalrts::splice_elem( res, context[69] );
          res = refalrts::splice_evar( res, context[57], context[58] );
          res = refalrts::splice_evar( res, context[64], context[68] );
          res = refalrts::splice_evar( res, context[31], context[51] );
          res = refalrts::splice_evar( res, context[61], context[63] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & SetLineNumbers@1/4 (/7 e.SourceFileName/53 )/8 (/11 e.TargetFileName/55 )/12 (/21 # NativeInsertBegin/31 (/40 # FileRowCol/50 (/51 s.Line/63 s.Col/64 )/52 e.File/57 )/41 )/22 e.Lines/59 >/1
        context[53] = context[42];
        context[54] = context[43];
        context[55] = context[44];
        context[56] = context[45];
        context[57] = context[48];
        context[58] = context[49];
        context[59] = context[46];
        context[60] = context[47];
        context[61] = 0;
        context[62] = 0;
        if( ! refalrts::brackets_term( context[61], context[62], context[51] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_FileRowCol], context[50] ) )
          continue;
        // closed e.SourceFileName as range 53
        // closed e.TargetFileName as range 55
        // closed e.File as range 57
        // closed e.Lines as range 59
        if( ! refalrts::svar_left( context[63], context[61], context[62] ) )
          continue;
        if( ! refalrts::svar_left( context[64], context[61], context[62] ) )
          continue;
        if( ! refalrts::empty_seq( context[61], context[62] ) )
          continue;
        //DEBUG: e.SourceFileName: 53
        //DEBUG: e.TargetFileName: 55
        //DEBUG: e.File: 57
        //DEBUG: e.Lines: 59
        //DEBUG: s.Line: 63
        //DEBUG: s.Col: 64

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Col/64 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/65"#lin"/66 Tile{ HalfReuse: 'e'/31 HalfReuse: ' '/40 HalfReuse: </50 HalfReuse: & Symb/51 AsIs: s.Line/63 } >/68" \""/69 </71 Tile{ HalfReuse: & EscapeString/52 AsIs: e.File/57 HalfReuse: >/41 HalfReuse: '\"'/22 } )/72 Tile{ AsIs: </0 Reuse: & SetLineNumbers/4 AsIs: (/7 AsIs: e.SourceFileName/53 AsIs: )/8 AsIs: (/11 AsIs: e.TargetFileName/55 AsIs: )/12 HalfReuse: 2/21 } Tile{ AsIs: e.Lines/59 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[65]);
        refalrts::alloc_chars(vm, context[66], context[67], "#lin", 4);
        refalrts::alloc_close_call(vm, context[68]);
        refalrts::alloc_chars(vm, context[69], context[70], " \"", 2);
        refalrts::alloc_open_call(vm, context[71]);
        refalrts::alloc_close_bracket(vm, context[72]);
        refalrts::reinit_char(context[31], 'e');
        refalrts::reinit_char(context[40], ' ');
        refalrts::reinit_open_call(context[50]);
        refalrts::reinit_name(context[51], functions[efunc_Symb]);
        refalrts::reinit_name(context[52], functions[efunc_EscapeString]);
        refalrts::reinit_close_call(context[41]);
        refalrts::reinit_char(context[22], '\"');
        refalrts::update_name(context[4], functions[efunc_SetLineNumbers]);
        refalrts::reinit_number(context[21], 2UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[65], context[72] );
        refalrts::push_stack( vm, context[41] );
        refalrts::push_stack( vm, context[71] );
        refalrts::push_stack( vm, context[68] );
        refalrts::push_stack( vm, context[50] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[59], context[60] );
        res = refalrts::splice_evar( res, context[0], context[21] );
        res = refalrts::splice_elem( res, context[72] );
        res = refalrts::splice_evar( res, context[52], context[22] );
        res = refalrts::splice_evar( res, context[68], context[71] );
        res = refalrts::splice_evar( res, context[31], context[63] );
        res = refalrts::splice_evar( res, context[65], context[67] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & SetLineNumbers@1/4 (/7 e.SourceFileName/32 )/8 (/11 e.TargetFileName/34 )/12 (/21 # NativeInsertEnd/31 )/22 e.Lines/36 >/1
      context[32] = context[23];
      context[33] = context[24];
      context[34] = context[25];
      context[35] = context[26];
      context[36] = context[29];
      context[37] = context[30];
      if( ! refalrts::ident_term( identifiers[ident_NativeInsertEnd], context[31] ) )
        continue;
      if( ! refalrts::empty_seq( context[27], context[28] ) )
        continue;
      // closed e.SourceFileName as range 32
      // closed e.TargetFileName as range 34
      // closed e.Lines as range 36
      //DEBUG: e.SourceFileName: 32
      //DEBUG: e.TargetFileName: 34
      //DEBUG: e.Lines: 36

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/38"#line 2 \""/39 </41 & EscapeString/42 e.TargetFileName/34/43 >/45 Tile{ HalfReuse: '\"'/31 AsIs: )/22 } Tile{ AsIs: </0 Reuse: & SetLineNumbers/4 AsIs: (/7 AsIs: e.SourceFileName/32 AsIs: )/8 AsIs: (/11 AsIs: e.TargetFileName/34 AsIs: )/12 HalfReuse: 2/21 } Tile{ AsIs: e.Lines/36 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[38]);
      refalrts::alloc_chars(vm, context[39], context[40], "#line 2 \"", 9);
      refalrts::alloc_open_call(vm, context[41]);
      refalrts::alloc_name(vm, context[42], functions[efunc_EscapeString]);
      refalrts::copy_evar(vm, context[43], context[44], context[34], context[35]);
      refalrts::alloc_close_call(vm, context[45]);
      refalrts::reinit_char(context[31], '\"');
      refalrts::update_name(context[4], functions[efunc_SetLineNumbers]);
      refalrts::reinit_number(context[21], 2UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[38], context[22] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[41] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[0], context[21] );
      res = refalrts::splice_evar( res, context[31], context[22] );
      res = refalrts::splice_evar( res, context[38], context[45] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & SetLineNumbers@1/4 (/7 e.SourceFileName/23 )/8 (/11 e.TargetFileName/25 )/12 (/21 e.OtherLine/27 )/22 e.Lines/29 >/1
    context[23] = context[13];
    context[24] = context[14];
    context[25] = context[15];
    context[26] = context[16];
    context[27] = context[19];
    context[28] = context[20];
    context[29] = context[17];
    context[30] = context[18];
    // closed e.SourceFileName as range 23
    // closed e.TargetFileName as range 25
    // closed e.OtherLine as range 27
    // closed e.Lines as range 29
    //DEBUG: e.SourceFileName: 23
    //DEBUG: e.TargetFileName: 25
    //DEBUG: e.OtherLine: 27
    //DEBUG: e.Lines: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/31 Tile{ AsIs: e.OtherLine/27 } Tile{ AsIs: )/22 } Tile{ AsIs: </0 Reuse: & SetLineNumbers/4 AsIs: (/7 AsIs: e.SourceFileName/23 AsIs: )/8 AsIs: (/11 AsIs: e.TargetFileName/25 AsIs: )/12 HalfReuse: 2/21 } Tile{ AsIs: e.Lines/29 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[31]);
    refalrts::update_name(context[4], functions[efunc_SetLineNumbers]);
    refalrts::reinit_number(context[21], 2UL);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[31], context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[0], context[21] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & SetLineNumbers@1/4 (/7 e.SourceFileName/13 )/8 (/11 e.TargetFileName/15 )/12 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.SourceFileName as range 13
    // closed e.TargetFileName as range 15
    //DEBUG: e.SourceFileName: 13
    //DEBUG: e.TargetFileName: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & SetLineNumbers@1/4 (/7 e.SourceFileName/13 )/8 (/11 e.TargetFileName/15 )/12 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SetLineNumbers@1/4 (/7 e.SourceFileName/5 )/8 (/11 e.TargetFileName/9 )/12 e.dyn2/2 >/1
  // closed e.SourceFileName as range 5
  // closed e.TargetFileName as range 9
  // closed e.dyn2 as range 2
  //DEBUG: e.SourceFileName: 5
  //DEBUG: e.TargetFileName: 9
  //DEBUG: e.dyn2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & SetLineNumbers@0/4 AsIs: (/7 AsIs: e.SourceFileName/5 AsIs: )/8 AsIs: (/11 AsIs: e.TargetFileName/9 AsIs: )/12 } 1/13 Tile{ AsIs: e.dyn2/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_number(vm, context[13], 1UL);
  refalrts::update_name(context[4], functions[efunc_gen_SetLineNumbers_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_SetLineNumbers_Z1("SetLineNumbers@1", COOKIE1_, COOKIE2_, func_gen_SetLineNumbers_Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@1/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@1/4 t.Acc/5 (/9 e.Scanned/11 )/10 t.Next/15 e.Tail/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Scanned as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail as range 13
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11
    //DEBUG: t.Next: 15
    //DEBUG: e.Tail: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@1/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/11 AsIs: )/10 } (/17 Tile{ AsIs: e.Tail/13 } )/18 </19 & GenCommand-Native/20 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_GenCommandm_Native]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@1/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@1/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@1/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & GenCommand-Native@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_GenCommandm_Native_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z1("DoMapAccum@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z1);


static refalrts::FnResult func_gen_PrintMatch_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & PrintMatch@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrintMatch@1/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & PrintMatch@1/4 (/7 e.new7/11 )/8 # AlgTerm/9 s.new5/10 e.new6/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[9] ) )
      continue;
    // closed e.new7 as range 11
    // closed e.new6 as range 13
    do {
      // </0 & PrintMatch@1/4 (/7 ' '/19 ' '/20 )/8 # AlgTerm/9 s.BracketNumber0/10 e.Call/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[19] )
        continue;
      context[20] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[20] )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.Call as range 17
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/21"  if( ! refalrts::char_term( \'"/22 Tile{ AsIs: e.Call/17 }"\', context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"] ) "/29 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/19 AsIs: ' '/20 HalfReuse: ' '/8 HalfReuse: ' '/9 }"return refalrts::cRecognitionImpossible;"/31 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_chars(vm, context[22], context[23], "  if( ! refalrts::char_term( \'", 30);
      refalrts::alloc_chars(vm, context[24], context[25], "\', context[", 11);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "] ) ", 4);
      refalrts::alloc_chars(vm, context[31], context[32], "return refalrts::cRecognitionImpossible;", 40);
      refalrts::reinit_char(context[0], ')');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], ' ');
      refalrts::reinit_char(context[9], ' ');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[21], context[4] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[30] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[24], context[27] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@1/4 (/7 e.Indent0/15 )/8 # AlgTerm/9 s.BracketNumber0/10 e.Call/17 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    // closed e.Indent0 as range 15
    // closed e.Call as range 17
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 15
    //DEBUG: e.Call: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/19 e.Indent0/15/20"if( ! refalrts::char_term( \'"/22 Tile{ AsIs: e.Call/17 }"\', context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"] ) "/29 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/15 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/31 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::copy_evar(vm, context[20], context[21], context[15], context[16]);
    refalrts::alloc_chars(vm, context[22], context[23], "if( ! refalrts::char_term( \'", 28);
    refalrts::alloc_chars(vm, context[24], context[25], "\', context[", 11);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "] ) ", 4);
    refalrts::alloc_chars(vm, context[31], context[32], "continue;", 9);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[19], context[4] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@1/4 (/7 e.new7/11 )/8 # AlgLeft/9 s.new5/10 e.new6/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[9] ) )
      continue;
    // closed e.new7 as range 11
    // closed e.new6 as range 13
    do {
      // </0 & PrintMatch@1/4 (/7 ' '/19 ' '/20 )/8 # AlgLeft/9 s.BracketNumber0/10 e.Call/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[19] )
        continue;
      context[20] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[20] )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.Call as range 17
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/21"  if( ! refalrts::char_left( \'"/22 Tile{ AsIs: e.Call/17 }"\', context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"], context["/29 </31 & Symb/32 </33 & Add/34 1/35 s.BracketNumber0/10/36 >/37 >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/19 AsIs: ' '/20 HalfReuse: ' '/8 HalfReuse: ' '/9 }"return refalrts::cRecognitionImpossible;"/41 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_chars(vm, context[22], context[23], "  if( ! refalrts::char_left( \'", 30);
      refalrts::alloc_chars(vm, context[24], context[25], "\', context[", 11);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[35], 1UL);
      refalrts::copy_stvar(vm, context[36], context[10]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
      refalrts::alloc_chars(vm, context[41], context[42], "return refalrts::cRecognitionImpossible;", 40);
      refalrts::reinit_char(context[0], ')');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], ' ');
      refalrts::reinit_char(context[9], ' ');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[21], context[4] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[40] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[24], context[27] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@1/4 (/7 e.Indent0/15 )/8 # AlgLeft/9 s.BracketNumber0/10 e.Call/17 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    // closed e.Indent0 as range 15
    // closed e.Call as range 17
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 15
    //DEBUG: e.Call: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/19 e.Indent0/15/20"if( ! refalrts::char_left( \'"/22 Tile{ AsIs: e.Call/17 }"\', context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"], context["/29 </31 & Symb/32 </33 & Add/34 1/35 s.BracketNumber0/10/36 >/37 >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/15 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/41 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::copy_evar(vm, context[20], context[21], context[15], context[16]);
    refalrts::alloc_chars(vm, context[22], context[23], "if( ! refalrts::char_left( \'", 28);
    refalrts::alloc_chars(vm, context[24], context[25], "\', context[", 11);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[35], 1UL);
    refalrts::copy_stvar(vm, context[36], context[10]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
    refalrts::alloc_chars(vm, context[41], context[42], "continue;", 9);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[19], context[4] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[28], context[40] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@1/4 (/7 e.new7/11 )/8 # AlgRight/9 s.new5/10 e.new6/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[9] ) )
      continue;
    // closed e.new7 as range 11
    // closed e.new6 as range 13
    do {
      // </0 & PrintMatch@1/4 (/7 ' '/19 ' '/20 )/8 # AlgRight/9 s.BracketNumber0/10 e.Call/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[19] )
        continue;
      context[20] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[20] )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.Call as range 17
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/21"  if( ! refalrts::char_right( \'"/22 Tile{ AsIs: e.Call/17 }"\', context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"], context["/29 </31 & Symb/32 </33 & Add/34 1/35 s.BracketNumber0/10/36 >/37 >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/19 AsIs: ' '/20 HalfReuse: ' '/8 HalfReuse: ' '/9 }"return refalrts::cRecognitionImpossible;"/41 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_chars(vm, context[22], context[23], "  if( ! refalrts::char_right( \'", 31);
      refalrts::alloc_chars(vm, context[24], context[25], "\', context[", 11);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[35], 1UL);
      refalrts::copy_stvar(vm, context[36], context[10]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
      refalrts::alloc_chars(vm, context[41], context[42], "return refalrts::cRecognitionImpossible;", 40);
      refalrts::reinit_char(context[0], ')');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], ' ');
      refalrts::reinit_char(context[9], ' ');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[21], context[4] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[40] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[24], context[27] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@1/4 (/7 e.Indent0/15 )/8 # AlgRight/9 s.BracketNumber0/10 e.Call/17 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    // closed e.Indent0 as range 15
    // closed e.Call as range 17
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 15
    //DEBUG: e.Call: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/19 e.Indent0/15/20"if( ! refalrts::char_right( \'"/22 Tile{ AsIs: e.Call/17 }"\', context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"], context["/29 </31 & Symb/32 </33 & Add/34 1/35 s.BracketNumber0/10/36 >/37 >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/15 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/41 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::copy_evar(vm, context[20], context[21], context[15], context[16]);
    refalrts::alloc_chars(vm, context[22], context[23], "if( ! refalrts::char_right( \'", 29);
    refalrts::alloc_chars(vm, context[24], context[25], "\', context[", 11);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[35], 1UL);
    refalrts::copy_stvar(vm, context[36], context[10]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
    refalrts::alloc_chars(vm, context[41], context[42], "continue;", 9);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[19], context[4] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[28], context[40] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@1/4 (/7 ' '/15 ' '/16 )/8 s.Direction/9 s.BracketNumber0/10 e.Call/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    context[15] = refalrts::char_left( ' ', context[11], context[12] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( ' ', context[11], context[12] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    // closed e.Call as range 13
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Call: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/17"  if( ! refalrts::char_"/18 </20 & StrFromDirection*2/21 Tile{ AsIs: s.Direction/9 } >/22"( \'"/23 Tile{ AsIs: e.Call/13 }"\', context["/25 </27 & Symb/28 Tile{ AsIs: s.BracketNumber0/10 } >/29"], context["/30 </32 & Symb/33 </34 & Add/35 1/36 s.BracketNumber0/10/37 >/38 >/39"] ) "/40 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/15 AsIs: ' '/16 HalfReuse: ' '/8 }" return refalrts::cRecognitionImpossible;"/42 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_chars(vm, context[18], context[19], "  if( ! refalrts::char_", 23);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::alloc_chars(vm, context[23], context[24], "( \'", 3);
    refalrts::alloc_chars(vm, context[25], context[26], "\', context[", 11);
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_chars(vm, context[30], context[31], "], context[", 11);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[36], 1UL);
    refalrts::copy_stvar(vm, context[37], context[10]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::alloc_chars(vm, context[40], context[41], "] ) ", 4);
    refalrts::alloc_chars(vm, context[42], context[43], " return refalrts::cRecognitionImpossible;", 41);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[17], context[4] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[29], context[41] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[25], context[28] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[17], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@1/4 (/7 e.Indent0/11 )/8 s.Direction/9 s.BracketNumber0/10 e.Call/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Indent0 as range 11
    // closed e.Call as range 13
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 11
    //DEBUG: e.Call: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/15 e.Indent0/11/16"if( ! refalrts::char_"/18 </20 & StrFromDirection*2/21 Tile{ AsIs: s.Direction/9 } >/22"( \'"/23 Tile{ AsIs: e.Call/13 }"\', context["/25 </27 & Symb/28 Tile{ AsIs: s.BracketNumber0/10 } >/29"], context["/30 </32 & Symb/33 </34 & Add/35 1/36 s.BracketNumber0/10/37 >/38 >/39"] ) "/40 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/11 HalfReuse: ' '/8 }" continue;"/42 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::copy_evar(vm, context[16], context[17], context[11], context[12]);
    refalrts::alloc_chars(vm, context[18], context[19], "if( ! refalrts::char_", 21);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::alloc_chars(vm, context[23], context[24], "( \'", 3);
    refalrts::alloc_chars(vm, context[25], context[26], "\', context[", 11);
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_chars(vm, context[30], context[31], "], context[", 11);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[36], 1UL);
    refalrts::copy_stvar(vm, context[37], context[10]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::alloc_chars(vm, context[40], context[41], "] ) ", 4);
    refalrts::alloc_chars(vm, context[42], context[43], " continue;", 10);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[15], context[4] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[29], context[41] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[25], context[28] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[15], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintMatch@1/4 (/7 e.Indent0/5 )/8 s.dyn0/9 s.BracketNumber0/10 e.Call/2 >/1
  // closed e.Indent0 as range 5
  // closed e.Call as range 2
  //DEBUG: s.dyn0: 9
  //DEBUG: s.BracketNumber0: 10
  //DEBUG: e.Indent0: 5
  //DEBUG: e.Call: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch@0/4 AsIs: (/7 AsIs: e.Indent0/5 AsIs: )/8 AsIs: s.dyn0/9 AsIs: s.BracketNumber0/10 } (/11"char"/12 )/14 '\''/15 Tile{ AsIs: e.Call/2 } '\''/16 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_chars(vm, context[12], context[13], "char", 4);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_char(vm, context[15], '\'');
  refalrts::alloc_char(vm, context[16], '\'');
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrintMatch_Z1("PrintMatch@1", COOKIE1_, COOKIE2_, func_gen_PrintMatch_Z1);


static refalrts::FnResult func_gen_PrintMatchSave_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 62 elems
  refalrts::Iter context[62];
  refalrts::zeros( context, 62 );
  // </0 & PrintMatchSave@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrintMatchSave@1/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 s.new4/11 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 2
  do {
    // </0 & PrintMatchSave@1/4 (/7 e.new9/12 )/8 s.new6/9 # AlgLeft/10 s.new7/11 e.new8/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[10] ) )
      continue;
    // closed e.new9 as range 12
    // closed e.new8 as range 14
    do {
      // </0 & PrintMatchSave@1/4 (/7 ' '/20 ' '/21 )/8 s.Offset0/9 # AlgLeft/10 s.BracketNumber0/11 e.Call/18 >/1
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = context[15];
      context[20] = refalrts::char_left( ' ', context[16], context[17] );
      if( ! context[20] )
        continue;
      context[21] = refalrts::char_left( ' ', context[16], context[17] );
      if( ! context[21] )
        continue;
      if( ! refalrts::empty_seq( context[16], context[17] ) )
        continue;
      // closed e.Call as range 18
      //DEBUG: s.Offset0: 9
      //DEBUG: s.BracketNumber0: 11
      //DEBUG: e.Call: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/22"  context["/23 </25 & Symb/26 Tile{ AsIs: s.Offset0/9 HalfReuse: >/10 }"] = refalrts::char_left( \'"/27 Tile{ AsIs: e.Call/18 }"\', context["/29 </31 & Symb/32 Tile{ AsIs: s.BracketNumber0/11 } >/33"], context["/34 </36 & Symb/37 </38 & Add/39 1/40 s.BracketNumber0/11/41 >/42 >/43"] )"/44 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/20 AsIs: ' '/21 HalfReuse: 'i'/8 }"f( ! context["/46 </48 & Symb/49 s.Offset0/9/50 >/51"] )"/52 )/54 (/55"    return refalrts::cRecognitionImpossible;"/56 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[22]);
      refalrts::alloc_chars(vm, context[23], context[24], "  context[", 10);
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[27], context[28], "] = refalrts::char_left( \'", 26);
      refalrts::alloc_chars(vm, context[29], context[30], "\', context[", 11);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[40], 1UL);
      refalrts::copy_stvar(vm, context[41], context[11]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_chars(vm, context[44], context[45], "] )", 3);
      refalrts::alloc_chars(vm, context[46], context[47], "f( ! context[", 13);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[49], functions[efunc_Symb]);
      refalrts::copy_stvar(vm, context[50], context[9]);
      refalrts::alloc_close_call(vm, context[51]);
      refalrts::alloc_chars(vm, context[52], context[53], "] )", 3);
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::alloc_open_bracket(vm, context[55]);
      refalrts::alloc_chars(vm, context[56], context[57], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::reinit_close_call(context[10]);
      refalrts::reinit_char(context[0], ';');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], 'i');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[55], context[1] );
      refalrts::link_brackets( context[7], context[54] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[48] );
      refalrts::link_brackets( context[22], context[4] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[25] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[46], context[57] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[33], context[45] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[22], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatchSave@1/4 (/7 e.Indent0/16 )/8 s.Offset0/9 # AlgLeft/10 s.BracketNumber0/11 e.Call/18 >/1
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    context[19] = context[15];
    // closed e.Indent0 as range 16
    // closed e.Call as range 18
    //DEBUG: s.Offset0: 9
    //DEBUG: s.BracketNumber0: 11
    //DEBUG: e.Indent0: 16
    //DEBUG: e.Call: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/20 e.Indent0/16/21"context["/23 </25 & Symb/26 Tile{ AsIs: s.Offset0/9 HalfReuse: >/10 }"] = refalrts::char_left( \'"/27 Tile{ AsIs: e.Call/18 }"\', context["/29 </31 & Symb/32 Tile{ AsIs: s.BracketNumber0/11 } >/33"], context["/34 </36 & Symb/37 </38 & Add/39 1/40 s.BracketNumber0/11/41 >/42 >/43"] )"/44 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/16 HalfReuse: 'i'/8 }"f( ! context["/46 </48 & Symb/49 s.Offset0/9/50 >/51"] )"/52 )/54 (/55 e.Indent0/16/56"  continue;"/58 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::copy_evar(vm, context[21], context[22], context[16], context[17]);
    refalrts::alloc_chars(vm, context[23], context[24], "context[", 8);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_Symb]);
    refalrts::alloc_chars(vm, context[27], context[28], "] = refalrts::char_left( \'", 26);
    refalrts::alloc_chars(vm, context[29], context[30], "\', context[", 11);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[40], 1UL);
    refalrts::copy_stvar(vm, context[41], context[11]);
    refalrts::alloc_close_call(vm, context[42]);
    refalrts::alloc_close_call(vm, context[43]);
    refalrts::alloc_chars(vm, context[44], context[45], "] )", 3);
    refalrts::alloc_chars(vm, context[46], context[47], "f( ! context[", 13);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_name(vm, context[49], functions[efunc_Symb]);
    refalrts::copy_stvar(vm, context[50], context[9]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::alloc_chars(vm, context[52], context[53], "] )", 3);
    refalrts::alloc_close_bracket(vm, context[54]);
    refalrts::alloc_open_bracket(vm, context[55]);
    refalrts::copy_evar(vm, context[56], context[57], context[16], context[17]);
    refalrts::alloc_chars(vm, context[58], context[59], "  continue;", 11);
    refalrts::reinit_close_call(context[10]);
    refalrts::reinit_char(context[0], ';');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[55], context[1] );
    refalrts::link_brackets( context[7], context[54] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[48] );
    refalrts::link_brackets( context[20], context[4] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[46], context[59] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[33], context[45] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[29], context[32] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[20], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatchSave@1/4 (/7 e.new9/12 )/8 s.new6/9 # AlgRight/10 s.new7/11 e.new8/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[10] ) )
      continue;
    // closed e.new9 as range 12
    // closed e.new8 as range 14
    do {
      // </0 & PrintMatchSave@1/4 (/7 ' '/20 ' '/21 )/8 s.Offset0/9 # AlgRight/10 s.BracketNumber0/11 e.Call/18 >/1
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = context[15];
      context[20] = refalrts::char_left( ' ', context[16], context[17] );
      if( ! context[20] )
        continue;
      context[21] = refalrts::char_left( ' ', context[16], context[17] );
      if( ! context[21] )
        continue;
      if( ! refalrts::empty_seq( context[16], context[17] ) )
        continue;
      // closed e.Call as range 18
      //DEBUG: s.Offset0: 9
      //DEBUG: s.BracketNumber0: 11
      //DEBUG: e.Call: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/22"  context["/23 </25 & Symb/26 Tile{ AsIs: s.Offset0/9 HalfReuse: >/10 }"] = refalrts::char_right( \'"/27 Tile{ AsIs: e.Call/18 }"\', context["/29 </31 & Symb/32 Tile{ AsIs: s.BracketNumber0/11 } >/33"], context["/34 </36 & Symb/37 </38 & Add/39 1/40 s.BracketNumber0/11/41 >/42 >/43"] )"/44 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/20 AsIs: ' '/21 HalfReuse: 'i'/8 }"f( ! context["/46 </48 & Symb/49 s.Offset0/9/50 >/51"] )"/52 )/54 (/55"    return refalrts::cRecognitionImpossible;"/56 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[22]);
      refalrts::alloc_chars(vm, context[23], context[24], "  context[", 10);
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[27], context[28], "] = refalrts::char_right( \'", 27);
      refalrts::alloc_chars(vm, context[29], context[30], "\', context[", 11);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[40], 1UL);
      refalrts::copy_stvar(vm, context[41], context[11]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_chars(vm, context[44], context[45], "] )", 3);
      refalrts::alloc_chars(vm, context[46], context[47], "f( ! context[", 13);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[49], functions[efunc_Symb]);
      refalrts::copy_stvar(vm, context[50], context[9]);
      refalrts::alloc_close_call(vm, context[51]);
      refalrts::alloc_chars(vm, context[52], context[53], "] )", 3);
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::alloc_open_bracket(vm, context[55]);
      refalrts::alloc_chars(vm, context[56], context[57], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::reinit_close_call(context[10]);
      refalrts::reinit_char(context[0], ';');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], 'i');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[55], context[1] );
      refalrts::link_brackets( context[7], context[54] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[48] );
      refalrts::link_brackets( context[22], context[4] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[25] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[46], context[57] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[33], context[45] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[22], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatchSave@1/4 (/7 e.Indent0/16 )/8 s.Offset0/9 # AlgRight/10 s.BracketNumber0/11 e.Call/18 >/1
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    context[19] = context[15];
    // closed e.Indent0 as range 16
    // closed e.Call as range 18
    //DEBUG: s.Offset0: 9
    //DEBUG: s.BracketNumber0: 11
    //DEBUG: e.Indent0: 16
    //DEBUG: e.Call: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/20 e.Indent0/16/21"context["/23 </25 & Symb/26 Tile{ AsIs: s.Offset0/9 HalfReuse: >/10 }"] = refalrts::char_right( \'"/27 Tile{ AsIs: e.Call/18 }"\', context["/29 </31 & Symb/32 Tile{ AsIs: s.BracketNumber0/11 } >/33"], context["/34 </36 & Symb/37 </38 & Add/39 1/40 s.BracketNumber0/11/41 >/42 >/43"] )"/44 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/16 HalfReuse: 'i'/8 }"f( ! context["/46 </48 & Symb/49 s.Offset0/9/50 >/51"] )"/52 )/54 (/55 e.Indent0/16/56"  continue;"/58 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::copy_evar(vm, context[21], context[22], context[16], context[17]);
    refalrts::alloc_chars(vm, context[23], context[24], "context[", 8);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_Symb]);
    refalrts::alloc_chars(vm, context[27], context[28], "] = refalrts::char_right( \'", 27);
    refalrts::alloc_chars(vm, context[29], context[30], "\', context[", 11);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[40], 1UL);
    refalrts::copy_stvar(vm, context[41], context[11]);
    refalrts::alloc_close_call(vm, context[42]);
    refalrts::alloc_close_call(vm, context[43]);
    refalrts::alloc_chars(vm, context[44], context[45], "] )", 3);
    refalrts::alloc_chars(vm, context[46], context[47], "f( ! context[", 13);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_name(vm, context[49], functions[efunc_Symb]);
    refalrts::copy_stvar(vm, context[50], context[9]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::alloc_chars(vm, context[52], context[53], "] )", 3);
    refalrts::alloc_close_bracket(vm, context[54]);
    refalrts::alloc_open_bracket(vm, context[55]);
    refalrts::copy_evar(vm, context[56], context[57], context[16], context[17]);
    refalrts::alloc_chars(vm, context[58], context[59], "  continue;", 11);
    refalrts::reinit_close_call(context[10]);
    refalrts::reinit_char(context[0], ';');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[55], context[1] );
    refalrts::link_brackets( context[7], context[54] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[48] );
    refalrts::link_brackets( context[20], context[4] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[46], context[59] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[33], context[45] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[29], context[32] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[20], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatchSave@1/4 (/7 ' '/16 ' '/17 )/8 s.Offset0/9 s.Direction0/10 s.BracketNumber0/11 e.Call/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    context[16] = refalrts::char_left( ' ', context[12], context[13] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( ' ', context[12], context[13] );
    if( ! context[17] )
      continue;
    if( ! refalrts::empty_seq( context[12], context[13] ) )
      continue;
    // closed e.Call as range 14
    //DEBUG: s.Offset0: 9
    //DEBUG: s.Direction0: 10
    //DEBUG: s.BracketNumber0: 11
    //DEBUG: e.Call: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/18"  context["/19 </21 & Symb/22 Tile{ AsIs: s.Offset0/9 } >/23"] = refalrts::char_"/24 </26 & StrFromDirection*2/27 Tile{ AsIs: s.Direction0/10 } >/28"( \'"/29 Tile{ AsIs: e.Call/14 }"\', context["/31 </33 & Symb/34 Tile{ AsIs: s.BracketNumber0/11 } >/35"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.BracketNumber0/11/43 >/44 >/45"] )"/46 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/16 AsIs: ' '/17 HalfReuse: 'i'/8 }"f( ! context["/48 </50 & Symb/51 s.Offset0/9/52 >/53"] )"/54 )/56 (/57"    return refalrts::cRecognitionImpossible;"/58 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[18]);
    refalrts::alloc_chars(vm, context[19], context[20], "  context[", 10);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::alloc_chars(vm, context[24], context[25], "] = refalrts::char_", 19);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "( \'", 3);
    refalrts::alloc_chars(vm, context[31], context[32], "\', context[", 11);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[42], 1UL);
    refalrts::copy_stvar(vm, context[43], context[11]);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::alloc_chars(vm, context[46], context[47], "] )", 3);
    refalrts::alloc_chars(vm, context[48], context[49], "f( ! context[", 13);
    refalrts::alloc_open_call(vm, context[50]);
    refalrts::alloc_name(vm, context[51], functions[efunc_Symb]);
    refalrts::copy_stvar(vm, context[52], context[9]);
    refalrts::alloc_close_call(vm, context[53]);
    refalrts::alloc_chars(vm, context[54], context[55], "] )", 3);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::alloc_chars(vm, context[58], context[59], "    return refalrts::cRecognitionImpossible;", 44);
    refalrts::reinit_char(context[0], ';');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[57], context[1] );
    refalrts::link_brackets( context[7], context[56] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[50] );
    refalrts::link_brackets( context[18], context[4] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[48], context[59] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[35], context[47] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[23], context[27] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[18], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatchSave@1/4 (/7 e.Indent0/12 )/8 s.Offset0/9 s.Direction0/10 s.BracketNumber0/11 e.Call/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    // closed e.Indent0 as range 12
    // closed e.Call as range 14
    //DEBUG: s.Offset0: 9
    //DEBUG: s.Direction0: 10
    //DEBUG: s.BracketNumber0: 11
    //DEBUG: e.Indent0: 12
    //DEBUG: e.Call: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/16 e.Indent0/12/17"context["/19 </21 & Symb/22 Tile{ AsIs: s.Offset0/9 } >/23"] = refalrts::char_"/24 </26 & StrFromDirection*2/27 Tile{ AsIs: s.Direction0/10 } >/28"( \'"/29 Tile{ AsIs: e.Call/14 }"\', context["/31 </33 & Symb/34 Tile{ AsIs: s.BracketNumber0/11 } >/35"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.BracketNumber0/11/43 >/44 >/45"] )"/46 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/12 HalfReuse: 'i'/8 }"f( ! context["/48 </50 & Symb/51 s.Offset0/9/52 >/53"] )"/54 )/56 (/57 e.Indent0/12/58"  continue;"/60 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[16]);
    refalrts::copy_evar(vm, context[17], context[18], context[12], context[13]);
    refalrts::alloc_chars(vm, context[19], context[20], "context[", 8);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::alloc_chars(vm, context[24], context[25], "] = refalrts::char_", 19);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "( \'", 3);
    refalrts::alloc_chars(vm, context[31], context[32], "\', context[", 11);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[42], 1UL);
    refalrts::copy_stvar(vm, context[43], context[11]);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::alloc_chars(vm, context[46], context[47], "] )", 3);
    refalrts::alloc_chars(vm, context[48], context[49], "f( ! context[", 13);
    refalrts::alloc_open_call(vm, context[50]);
    refalrts::alloc_name(vm, context[51], functions[efunc_Symb]);
    refalrts::copy_stvar(vm, context[52], context[9]);
    refalrts::alloc_close_call(vm, context[53]);
    refalrts::alloc_chars(vm, context[54], context[55], "] )", 3);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::copy_evar(vm, context[58], context[59], context[12], context[13]);
    refalrts::alloc_chars(vm, context[60], context[61], "  continue;", 11);
    refalrts::reinit_char(context[0], ';');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[57], context[1] );
    refalrts::link_brackets( context[7], context[56] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[50] );
    refalrts::link_brackets( context[16], context[4] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[48], context[61] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[35], context[47] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[23], context[27] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[16], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintMatchSave@1/4 (/7 e.Indent0/5 )/8 s.Offset0/9 s.Direction0/10 s.BracketNumber0/11 e.Call/2 >/1
  // closed e.Indent0 as range 5
  // closed e.Call as range 2
  //DEBUG: s.Offset0: 9
  //DEBUG: s.Direction0: 10
  //DEBUG: s.BracketNumber0: 11
  //DEBUG: e.Indent0: 5
  //DEBUG: e.Call: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave@0/4 AsIs: (/7 AsIs: e.Indent0/5 AsIs: )/8 AsIs: s.Offset0/9 AsIs: s.Direction0/10 AsIs: s.BracketNumber0/11 } (/12"char"/13 )/15 '\''/16 Tile{ AsIs: e.Call/2 } '\''/17 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_chars(vm, context[13], context[14], "char", 4);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_char(vm, context[16], '\'');
  refalrts::alloc_char(vm, context[17], '\'');
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatchSave_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[12], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrintMatchSave_Z1("PrintMatchSave@1", COOKIE1_, COOKIE2_, func_gen_PrintMatchSave_Z1);


static refalrts::FnResult func_gen_PrintMatch_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & PrintMatch@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrintMatch@2/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & PrintMatch@2/4 (/7 e.new7/11 )/8 # AlgTerm/9 s.new5/10 e.new6/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[9] ) )
      continue;
    // closed e.new7 as range 11
    // closed e.new6 as range 13
    do {
      // </0 & PrintMatch@2/4 (/7 ' '/19 ' '/20 )/8 # AlgTerm/9 s.BracketNumber0/10 e.Call/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[19] )
        continue;
      context[20] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[20] )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.Call as range 17
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/21"  if( ! refalrts::number_term( "/22 Tile{ AsIs: e.Call/17 }"UL, context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"] ) "/29 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/19 AsIs: ' '/20 HalfReuse: ' '/8 HalfReuse: ' '/9 }"return refalrts::cRecognitionImpossible;"/31 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_chars(vm, context[22], context[23], "  if( ! refalrts::number_term( ", 31);
      refalrts::alloc_chars(vm, context[24], context[25], "UL, context[", 12);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "] ) ", 4);
      refalrts::alloc_chars(vm, context[31], context[32], "return refalrts::cRecognitionImpossible;", 40);
      refalrts::reinit_char(context[0], ')');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], ' ');
      refalrts::reinit_char(context[9], ' ');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[21], context[4] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[30] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[24], context[27] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@2/4 (/7 e.Indent0/15 )/8 # AlgTerm/9 s.BracketNumber0/10 e.Call/17 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    // closed e.Indent0 as range 15
    // closed e.Call as range 17
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 15
    //DEBUG: e.Call: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/19 e.Indent0/15/20"if( ! refalrts::number_term( "/22 Tile{ AsIs: e.Call/17 }"UL, context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"] ) "/29 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/15 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/31 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::copy_evar(vm, context[20], context[21], context[15], context[16]);
    refalrts::alloc_chars(vm, context[22], context[23], "if( ! refalrts::number_term( ", 29);
    refalrts::alloc_chars(vm, context[24], context[25], "UL, context[", 12);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "] ) ", 4);
    refalrts::alloc_chars(vm, context[31], context[32], "continue;", 9);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[19], context[4] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@2/4 (/7 e.new7/11 )/8 # AlgLeft/9 s.new5/10 e.new6/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[9] ) )
      continue;
    // closed e.new7 as range 11
    // closed e.new6 as range 13
    do {
      // </0 & PrintMatch@2/4 (/7 ' '/19 ' '/20 )/8 # AlgLeft/9 s.BracketNumber0/10 e.Call/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[19] )
        continue;
      context[20] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[20] )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.Call as range 17
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/21"  if( ! refalrts::number_left( "/22 Tile{ AsIs: e.Call/17 }"UL, context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"], context["/29 </31 & Symb/32 </33 & Add/34 1/35 s.BracketNumber0/10/36 >/37 >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/19 AsIs: ' '/20 HalfReuse: ' '/8 HalfReuse: ' '/9 }"return refalrts::cRecognitionImpossible;"/41 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_chars(vm, context[22], context[23], "  if( ! refalrts::number_left( ", 31);
      refalrts::alloc_chars(vm, context[24], context[25], "UL, context[", 12);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[35], 1UL);
      refalrts::copy_stvar(vm, context[36], context[10]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
      refalrts::alloc_chars(vm, context[41], context[42], "return refalrts::cRecognitionImpossible;", 40);
      refalrts::reinit_char(context[0], ')');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], ' ');
      refalrts::reinit_char(context[9], ' ');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[21], context[4] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[40] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[24], context[27] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@2/4 (/7 e.Indent0/15 )/8 # AlgLeft/9 s.BracketNumber0/10 e.Call/17 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    // closed e.Indent0 as range 15
    // closed e.Call as range 17
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 15
    //DEBUG: e.Call: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/19 e.Indent0/15/20"if( ! refalrts::number_left( "/22 Tile{ AsIs: e.Call/17 }"UL, context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"], context["/29 </31 & Symb/32 </33 & Add/34 1/35 s.BracketNumber0/10/36 >/37 >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/15 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/41 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::copy_evar(vm, context[20], context[21], context[15], context[16]);
    refalrts::alloc_chars(vm, context[22], context[23], "if( ! refalrts::number_left( ", 29);
    refalrts::alloc_chars(vm, context[24], context[25], "UL, context[", 12);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[35], 1UL);
    refalrts::copy_stvar(vm, context[36], context[10]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
    refalrts::alloc_chars(vm, context[41], context[42], "continue;", 9);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[19], context[4] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[28], context[40] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@2/4 (/7 e.new7/11 )/8 # AlgRight/9 s.new5/10 e.new6/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[9] ) )
      continue;
    // closed e.new7 as range 11
    // closed e.new6 as range 13
    do {
      // </0 & PrintMatch@2/4 (/7 ' '/19 ' '/20 )/8 # AlgRight/9 s.BracketNumber0/10 e.Call/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[19] )
        continue;
      context[20] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[20] )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.Call as range 17
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/21"  if( ! refalrts::number_right( "/22 Tile{ AsIs: e.Call/17 }"UL, context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"], context["/29 </31 & Symb/32 </33 & Add/34 1/35 s.BracketNumber0/10/36 >/37 >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/19 AsIs: ' '/20 HalfReuse: ' '/8 HalfReuse: ' '/9 }"return refalrts::cRecognitionImpossible;"/41 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_chars(vm, context[22], context[23], "  if( ! refalrts::number_right( ", 32);
      refalrts::alloc_chars(vm, context[24], context[25], "UL, context[", 12);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[35], 1UL);
      refalrts::copy_stvar(vm, context[36], context[10]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
      refalrts::alloc_chars(vm, context[41], context[42], "return refalrts::cRecognitionImpossible;", 40);
      refalrts::reinit_char(context[0], ')');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], ' ');
      refalrts::reinit_char(context[9], ' ');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[21], context[4] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[40] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[24], context[27] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@2/4 (/7 e.Indent0/15 )/8 # AlgRight/9 s.BracketNumber0/10 e.Call/17 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    // closed e.Indent0 as range 15
    // closed e.Call as range 17
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 15
    //DEBUG: e.Call: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/19 e.Indent0/15/20"if( ! refalrts::number_right( "/22 Tile{ AsIs: e.Call/17 }"UL, context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"], context["/29 </31 & Symb/32 </33 & Add/34 1/35 s.BracketNumber0/10/36 >/37 >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/15 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/41 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::copy_evar(vm, context[20], context[21], context[15], context[16]);
    refalrts::alloc_chars(vm, context[22], context[23], "if( ! refalrts::number_right( ", 30);
    refalrts::alloc_chars(vm, context[24], context[25], "UL, context[", 12);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[35], 1UL);
    refalrts::copy_stvar(vm, context[36], context[10]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
    refalrts::alloc_chars(vm, context[41], context[42], "continue;", 9);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[19], context[4] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[28], context[40] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@2/4 (/7 ' '/15 ' '/16 )/8 s.Direction/9 s.BracketNumber0/10 e.Call/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    context[15] = refalrts::char_left( ' ', context[11], context[12] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( ' ', context[11], context[12] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    // closed e.Call as range 13
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Call: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/17"  if( ! refalrts::number_"/18 </20 & StrFromDirection*2/21 Tile{ AsIs: s.Direction/9 } >/22"( "/23 Tile{ AsIs: e.Call/13 }"UL, context["/25 </27 & Symb/28 Tile{ AsIs: s.BracketNumber0/10 } >/29"], context["/30 </32 & Symb/33 </34 & Add/35 1/36 s.BracketNumber0/10/37 >/38 >/39"] ) "/40 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/15 AsIs: ' '/16 HalfReuse: ' '/8 }" return refalrts::cRecognitionImpossible;"/42 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_chars(vm, context[18], context[19], "  if( ! refalrts::number_", 25);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::alloc_chars(vm, context[23], context[24], "( ", 2);
    refalrts::alloc_chars(vm, context[25], context[26], "UL, context[", 12);
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_chars(vm, context[30], context[31], "], context[", 11);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[36], 1UL);
    refalrts::copy_stvar(vm, context[37], context[10]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::alloc_chars(vm, context[40], context[41], "] ) ", 4);
    refalrts::alloc_chars(vm, context[42], context[43], " return refalrts::cRecognitionImpossible;", 41);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[17], context[4] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[29], context[41] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[25], context[28] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[17], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@2/4 (/7 e.Indent0/11 )/8 s.Direction/9 s.BracketNumber0/10 e.Call/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Indent0 as range 11
    // closed e.Call as range 13
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 11
    //DEBUG: e.Call: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/15 e.Indent0/11/16"if( ! refalrts::number_"/18 </20 & StrFromDirection*2/21 Tile{ AsIs: s.Direction/9 } >/22"( "/23 Tile{ AsIs: e.Call/13 }"UL, context["/25 </27 & Symb/28 Tile{ AsIs: s.BracketNumber0/10 } >/29"], context["/30 </32 & Symb/33 </34 & Add/35 1/36 s.BracketNumber0/10/37 >/38 >/39"] ) "/40 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/11 HalfReuse: ' '/8 }" continue;"/42 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::copy_evar(vm, context[16], context[17], context[11], context[12]);
    refalrts::alloc_chars(vm, context[18], context[19], "if( ! refalrts::number_", 23);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::alloc_chars(vm, context[23], context[24], "( ", 2);
    refalrts::alloc_chars(vm, context[25], context[26], "UL, context[", 12);
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_chars(vm, context[30], context[31], "], context[", 11);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[36], 1UL);
    refalrts::copy_stvar(vm, context[37], context[10]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::alloc_chars(vm, context[40], context[41], "] ) ", 4);
    refalrts::alloc_chars(vm, context[42], context[43], " continue;", 10);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[15], context[4] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[29], context[41] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[25], context[28] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[15], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintMatch@2/4 (/7 e.Indent0/5 )/8 s.dyn0/9 s.BracketNumber0/10 e.Call/2 >/1
  // closed e.Indent0 as range 5
  // closed e.Call as range 2
  //DEBUG: s.dyn0: 9
  //DEBUG: s.BracketNumber0: 10
  //DEBUG: e.Indent0: 5
  //DEBUG: e.Call: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch@0/4 AsIs: (/7 AsIs: e.Indent0/5 AsIs: )/8 AsIs: s.dyn0/9 AsIs: s.BracketNumber0/10 } (/11"number"/12 )/14 Tile{ AsIs: e.Call/2 }"UL"/15 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_chars(vm, context[12], context[13], "number", 6);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_chars(vm, context[15], context[16], "UL", 2);
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrintMatch_Z2("PrintMatch@2", COOKIE1_, COOKIE2_, func_gen_PrintMatch_Z2);


static refalrts::FnResult func_gen_PrintMatchSave_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 62 elems
  refalrts::Iter context[62];
  refalrts::zeros( context, 62 );
  // </0 & PrintMatchSave@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrintMatchSave@2/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 s.new4/11 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 2
  do {
    // </0 & PrintMatchSave@2/4 (/7 e.new9/12 )/8 s.new6/9 # AlgLeft/10 s.new7/11 e.new8/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[10] ) )
      continue;
    // closed e.new9 as range 12
    // closed e.new8 as range 14
    do {
      // </0 & PrintMatchSave@2/4 (/7 ' '/20 ' '/21 )/8 s.Offset0/9 # AlgLeft/10 s.BracketNumber0/11 e.Call/18 >/1
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = context[15];
      context[20] = refalrts::char_left( ' ', context[16], context[17] );
      if( ! context[20] )
        continue;
      context[21] = refalrts::char_left( ' ', context[16], context[17] );
      if( ! context[21] )
        continue;
      if( ! refalrts::empty_seq( context[16], context[17] ) )
        continue;
      // closed e.Call as range 18
      //DEBUG: s.Offset0: 9
      //DEBUG: s.BracketNumber0: 11
      //DEBUG: e.Call: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/22"  context["/23 </25 & Symb/26 Tile{ AsIs: s.Offset0/9 HalfReuse: >/10 }"] = refalrts::number_left( "/27 Tile{ AsIs: e.Call/18 }"UL, context["/29 </31 & Symb/32 Tile{ AsIs: s.BracketNumber0/11 } >/33"], context["/34 </36 & Symb/37 </38 & Add/39 1/40 s.BracketNumber0/11/41 >/42 >/43"] )"/44 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/20 AsIs: ' '/21 HalfReuse: 'i'/8 }"f( ! context["/46 </48 & Symb/49 s.Offset0/9/50 >/51"] )"/52 )/54 (/55"    return refalrts::cRecognitionImpossible;"/56 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[22]);
      refalrts::alloc_chars(vm, context[23], context[24], "  context[", 10);
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[27], context[28], "] = refalrts::number_left( ", 27);
      refalrts::alloc_chars(vm, context[29], context[30], "UL, context[", 12);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[40], 1UL);
      refalrts::copy_stvar(vm, context[41], context[11]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_chars(vm, context[44], context[45], "] )", 3);
      refalrts::alloc_chars(vm, context[46], context[47], "f( ! context[", 13);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[49], functions[efunc_Symb]);
      refalrts::copy_stvar(vm, context[50], context[9]);
      refalrts::alloc_close_call(vm, context[51]);
      refalrts::alloc_chars(vm, context[52], context[53], "] )", 3);
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::alloc_open_bracket(vm, context[55]);
      refalrts::alloc_chars(vm, context[56], context[57], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::reinit_close_call(context[10]);
      refalrts::reinit_char(context[0], ';');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], 'i');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[55], context[1] );
      refalrts::link_brackets( context[7], context[54] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[48] );
      refalrts::link_brackets( context[22], context[4] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[25] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[46], context[57] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[33], context[45] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[22], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatchSave@2/4 (/7 e.Indent0/16 )/8 s.Offset0/9 # AlgLeft/10 s.BracketNumber0/11 e.Call/18 >/1
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    context[19] = context[15];
    // closed e.Indent0 as range 16
    // closed e.Call as range 18
    //DEBUG: s.Offset0: 9
    //DEBUG: s.BracketNumber0: 11
    //DEBUG: e.Indent0: 16
    //DEBUG: e.Call: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/20 e.Indent0/16/21"context["/23 </25 & Symb/26 Tile{ AsIs: s.Offset0/9 HalfReuse: >/10 }"] = refalrts::number_left( "/27 Tile{ AsIs: e.Call/18 }"UL, context["/29 </31 & Symb/32 Tile{ AsIs: s.BracketNumber0/11 } >/33"], context["/34 </36 & Symb/37 </38 & Add/39 1/40 s.BracketNumber0/11/41 >/42 >/43"] )"/44 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/16 HalfReuse: 'i'/8 }"f( ! context["/46 </48 & Symb/49 s.Offset0/9/50 >/51"] )"/52 )/54 (/55 e.Indent0/16/56"  continue;"/58 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::copy_evar(vm, context[21], context[22], context[16], context[17]);
    refalrts::alloc_chars(vm, context[23], context[24], "context[", 8);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_Symb]);
    refalrts::alloc_chars(vm, context[27], context[28], "] = refalrts::number_left( ", 27);
    refalrts::alloc_chars(vm, context[29], context[30], "UL, context[", 12);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[40], 1UL);
    refalrts::copy_stvar(vm, context[41], context[11]);
    refalrts::alloc_close_call(vm, context[42]);
    refalrts::alloc_close_call(vm, context[43]);
    refalrts::alloc_chars(vm, context[44], context[45], "] )", 3);
    refalrts::alloc_chars(vm, context[46], context[47], "f( ! context[", 13);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_name(vm, context[49], functions[efunc_Symb]);
    refalrts::copy_stvar(vm, context[50], context[9]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::alloc_chars(vm, context[52], context[53], "] )", 3);
    refalrts::alloc_close_bracket(vm, context[54]);
    refalrts::alloc_open_bracket(vm, context[55]);
    refalrts::copy_evar(vm, context[56], context[57], context[16], context[17]);
    refalrts::alloc_chars(vm, context[58], context[59], "  continue;", 11);
    refalrts::reinit_close_call(context[10]);
    refalrts::reinit_char(context[0], ';');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[55], context[1] );
    refalrts::link_brackets( context[7], context[54] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[48] );
    refalrts::link_brackets( context[20], context[4] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[46], context[59] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[33], context[45] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[29], context[32] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[20], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatchSave@2/4 (/7 e.new9/12 )/8 s.new6/9 # AlgRight/10 s.new7/11 e.new8/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[10] ) )
      continue;
    // closed e.new9 as range 12
    // closed e.new8 as range 14
    do {
      // </0 & PrintMatchSave@2/4 (/7 ' '/20 ' '/21 )/8 s.Offset0/9 # AlgRight/10 s.BracketNumber0/11 e.Call/18 >/1
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = context[15];
      context[20] = refalrts::char_left( ' ', context[16], context[17] );
      if( ! context[20] )
        continue;
      context[21] = refalrts::char_left( ' ', context[16], context[17] );
      if( ! context[21] )
        continue;
      if( ! refalrts::empty_seq( context[16], context[17] ) )
        continue;
      // closed e.Call as range 18
      //DEBUG: s.Offset0: 9
      //DEBUG: s.BracketNumber0: 11
      //DEBUG: e.Call: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/22"  context["/23 </25 & Symb/26 Tile{ AsIs: s.Offset0/9 HalfReuse: >/10 }"] = refalrts::number_right( "/27 Tile{ AsIs: e.Call/18 }"UL, context["/29 </31 & Symb/32 Tile{ AsIs: s.BracketNumber0/11 } >/33"], context["/34 </36 & Symb/37 </38 & Add/39 1/40 s.BracketNumber0/11/41 >/42 >/43"] )"/44 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/20 AsIs: ' '/21 HalfReuse: 'i'/8 }"f( ! context["/46 </48 & Symb/49 s.Offset0/9/50 >/51"] )"/52 )/54 (/55"    return refalrts::cRecognitionImpossible;"/56 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[22]);
      refalrts::alloc_chars(vm, context[23], context[24], "  context[", 10);
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[27], context[28], "] = refalrts::number_right( ", 28);
      refalrts::alloc_chars(vm, context[29], context[30], "UL, context[", 12);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[40], 1UL);
      refalrts::copy_stvar(vm, context[41], context[11]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_chars(vm, context[44], context[45], "] )", 3);
      refalrts::alloc_chars(vm, context[46], context[47], "f( ! context[", 13);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[49], functions[efunc_Symb]);
      refalrts::copy_stvar(vm, context[50], context[9]);
      refalrts::alloc_close_call(vm, context[51]);
      refalrts::alloc_chars(vm, context[52], context[53], "] )", 3);
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::alloc_open_bracket(vm, context[55]);
      refalrts::alloc_chars(vm, context[56], context[57], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::reinit_close_call(context[10]);
      refalrts::reinit_char(context[0], ';');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], 'i');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[55], context[1] );
      refalrts::link_brackets( context[7], context[54] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[48] );
      refalrts::link_brackets( context[22], context[4] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[25] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[46], context[57] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[33], context[45] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[22], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatchSave@2/4 (/7 e.Indent0/16 )/8 s.Offset0/9 # AlgRight/10 s.BracketNumber0/11 e.Call/18 >/1
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    context[19] = context[15];
    // closed e.Indent0 as range 16
    // closed e.Call as range 18
    //DEBUG: s.Offset0: 9
    //DEBUG: s.BracketNumber0: 11
    //DEBUG: e.Indent0: 16
    //DEBUG: e.Call: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/20 e.Indent0/16/21"context["/23 </25 & Symb/26 Tile{ AsIs: s.Offset0/9 HalfReuse: >/10 }"] = refalrts::number_right( "/27 Tile{ AsIs: e.Call/18 }"UL, context["/29 </31 & Symb/32 Tile{ AsIs: s.BracketNumber0/11 } >/33"], context["/34 </36 & Symb/37 </38 & Add/39 1/40 s.BracketNumber0/11/41 >/42 >/43"] )"/44 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/16 HalfReuse: 'i'/8 }"f( ! context["/46 </48 & Symb/49 s.Offset0/9/50 >/51"] )"/52 )/54 (/55 e.Indent0/16/56"  continue;"/58 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::copy_evar(vm, context[21], context[22], context[16], context[17]);
    refalrts::alloc_chars(vm, context[23], context[24], "context[", 8);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_Symb]);
    refalrts::alloc_chars(vm, context[27], context[28], "] = refalrts::number_right( ", 28);
    refalrts::alloc_chars(vm, context[29], context[30], "UL, context[", 12);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[40], 1UL);
    refalrts::copy_stvar(vm, context[41], context[11]);
    refalrts::alloc_close_call(vm, context[42]);
    refalrts::alloc_close_call(vm, context[43]);
    refalrts::alloc_chars(vm, context[44], context[45], "] )", 3);
    refalrts::alloc_chars(vm, context[46], context[47], "f( ! context[", 13);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_name(vm, context[49], functions[efunc_Symb]);
    refalrts::copy_stvar(vm, context[50], context[9]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::alloc_chars(vm, context[52], context[53], "] )", 3);
    refalrts::alloc_close_bracket(vm, context[54]);
    refalrts::alloc_open_bracket(vm, context[55]);
    refalrts::copy_evar(vm, context[56], context[57], context[16], context[17]);
    refalrts::alloc_chars(vm, context[58], context[59], "  continue;", 11);
    refalrts::reinit_close_call(context[10]);
    refalrts::reinit_char(context[0], ';');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[55], context[1] );
    refalrts::link_brackets( context[7], context[54] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[48] );
    refalrts::link_brackets( context[20], context[4] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[46], context[59] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[33], context[45] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[29], context[32] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[20], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatchSave@2/4 (/7 ' '/16 ' '/17 )/8 s.Offset0/9 s.Direction0/10 s.BracketNumber0/11 e.Call/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    context[16] = refalrts::char_left( ' ', context[12], context[13] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( ' ', context[12], context[13] );
    if( ! context[17] )
      continue;
    if( ! refalrts::empty_seq( context[12], context[13] ) )
      continue;
    // closed e.Call as range 14
    //DEBUG: s.Offset0: 9
    //DEBUG: s.Direction0: 10
    //DEBUG: s.BracketNumber0: 11
    //DEBUG: e.Call: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/18"  context["/19 </21 & Symb/22 Tile{ AsIs: s.Offset0/9 } >/23"] = refalrts::number_"/24 </26 & StrFromDirection*2/27 Tile{ AsIs: s.Direction0/10 } >/28"( "/29 Tile{ AsIs: e.Call/14 }"UL, context["/31 </33 & Symb/34 Tile{ AsIs: s.BracketNumber0/11 } >/35"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.BracketNumber0/11/43 >/44 >/45"] )"/46 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/16 AsIs: ' '/17 HalfReuse: 'i'/8 }"f( ! context["/48 </50 & Symb/51 s.Offset0/9/52 >/53"] )"/54 )/56 (/57"    return refalrts::cRecognitionImpossible;"/58 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[18]);
    refalrts::alloc_chars(vm, context[19], context[20], "  context[", 10);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::alloc_chars(vm, context[24], context[25], "] = refalrts::number_", 21);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "( ", 2);
    refalrts::alloc_chars(vm, context[31], context[32], "UL, context[", 12);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[42], 1UL);
    refalrts::copy_stvar(vm, context[43], context[11]);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::alloc_chars(vm, context[46], context[47], "] )", 3);
    refalrts::alloc_chars(vm, context[48], context[49], "f( ! context[", 13);
    refalrts::alloc_open_call(vm, context[50]);
    refalrts::alloc_name(vm, context[51], functions[efunc_Symb]);
    refalrts::copy_stvar(vm, context[52], context[9]);
    refalrts::alloc_close_call(vm, context[53]);
    refalrts::alloc_chars(vm, context[54], context[55], "] )", 3);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::alloc_chars(vm, context[58], context[59], "    return refalrts::cRecognitionImpossible;", 44);
    refalrts::reinit_char(context[0], ';');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[57], context[1] );
    refalrts::link_brackets( context[7], context[56] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[50] );
    refalrts::link_brackets( context[18], context[4] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[48], context[59] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[35], context[47] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[23], context[27] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[18], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatchSave@2/4 (/7 e.Indent0/12 )/8 s.Offset0/9 s.Direction0/10 s.BracketNumber0/11 e.Call/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    // closed e.Indent0 as range 12
    // closed e.Call as range 14
    //DEBUG: s.Offset0: 9
    //DEBUG: s.Direction0: 10
    //DEBUG: s.BracketNumber0: 11
    //DEBUG: e.Indent0: 12
    //DEBUG: e.Call: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/16 e.Indent0/12/17"context["/19 </21 & Symb/22 Tile{ AsIs: s.Offset0/9 } >/23"] = refalrts::number_"/24 </26 & StrFromDirection*2/27 Tile{ AsIs: s.Direction0/10 } >/28"( "/29 Tile{ AsIs: e.Call/14 }"UL, context["/31 </33 & Symb/34 Tile{ AsIs: s.BracketNumber0/11 } >/35"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.BracketNumber0/11/43 >/44 >/45"] )"/46 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/12 HalfReuse: 'i'/8 }"f( ! context["/48 </50 & Symb/51 s.Offset0/9/52 >/53"] )"/54 )/56 (/57 e.Indent0/12/58"  continue;"/60 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[16]);
    refalrts::copy_evar(vm, context[17], context[18], context[12], context[13]);
    refalrts::alloc_chars(vm, context[19], context[20], "context[", 8);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::alloc_chars(vm, context[24], context[25], "] = refalrts::number_", 21);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "( ", 2);
    refalrts::alloc_chars(vm, context[31], context[32], "UL, context[", 12);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[42], 1UL);
    refalrts::copy_stvar(vm, context[43], context[11]);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::alloc_chars(vm, context[46], context[47], "] )", 3);
    refalrts::alloc_chars(vm, context[48], context[49], "f( ! context[", 13);
    refalrts::alloc_open_call(vm, context[50]);
    refalrts::alloc_name(vm, context[51], functions[efunc_Symb]);
    refalrts::copy_stvar(vm, context[52], context[9]);
    refalrts::alloc_close_call(vm, context[53]);
    refalrts::alloc_chars(vm, context[54], context[55], "] )", 3);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::copy_evar(vm, context[58], context[59], context[12], context[13]);
    refalrts::alloc_chars(vm, context[60], context[61], "  continue;", 11);
    refalrts::reinit_char(context[0], ';');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[57], context[1] );
    refalrts::link_brackets( context[7], context[56] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[50] );
    refalrts::link_brackets( context[16], context[4] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[48], context[61] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[35], context[47] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[23], context[27] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[16], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintMatchSave@2/4 (/7 e.Indent0/5 )/8 s.Offset0/9 s.Direction0/10 s.BracketNumber0/11 e.Call/2 >/1
  // closed e.Indent0 as range 5
  // closed e.Call as range 2
  //DEBUG: s.Offset0: 9
  //DEBUG: s.Direction0: 10
  //DEBUG: s.BracketNumber0: 11
  //DEBUG: e.Indent0: 5
  //DEBUG: e.Call: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave@0/4 AsIs: (/7 AsIs: e.Indent0/5 AsIs: )/8 AsIs: s.Offset0/9 AsIs: s.Direction0/10 AsIs: s.BracketNumber0/11 } (/12"number"/13 )/15 Tile{ AsIs: e.Call/2 }"UL"/16 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_chars(vm, context[13], context[14], "number", 6);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_chars(vm, context[16], context[17], "UL", 2);
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatchSave_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrintMatchSave_Z2("PrintMatchSave@2", COOKIE1_, COOKIE2_, func_gen_PrintMatchSave_Z2);


static refalrts::FnResult func_gen_PrintMatch_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & PrintMatch@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrintMatch@3/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & PrintMatch@3/4 (/7 e.new7/11 )/8 # AlgTerm/9 s.new5/10 e.new6/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[9] ) )
      continue;
    // closed e.new7 as range 11
    // closed e.new6 as range 13
    do {
      // </0 & PrintMatch@3/4 (/7 ' '/19 ' '/20 )/8 # AlgTerm/9 s.BracketNumber0/10 e.Call/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[19] )
        continue;
      context[20] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[20] )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.Call as range 17
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/21"  if( ! refalrts::function_term( functions[efunc_"/22 Tile{ AsIs: e.Call/17 }"], context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"] ) "/29 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/19 AsIs: ' '/20 HalfReuse: ' '/8 HalfReuse: ' '/9 }"return refalrts::cRecognitionImpossible;"/31 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_chars(vm, context[22], context[23], "  if( ! refalrts::function_term( functions[efunc_", 49);
      refalrts::alloc_chars(vm, context[24], context[25], "], context[", 11);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "] ) ", 4);
      refalrts::alloc_chars(vm, context[31], context[32], "return refalrts::cRecognitionImpossible;", 40);
      refalrts::reinit_char(context[0], ')');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], ' ');
      refalrts::reinit_char(context[9], ' ');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[21], context[4] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[30] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[24], context[27] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@3/4 (/7 e.Indent0/15 )/8 # AlgTerm/9 s.BracketNumber0/10 e.Call/17 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    // closed e.Indent0 as range 15
    // closed e.Call as range 17
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 15
    //DEBUG: e.Call: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/19 e.Indent0/15/20"if( ! refalrts::function_term( functions[efunc_"/22 Tile{ AsIs: e.Call/17 }"], context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"] ) "/29 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/15 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/31 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::copy_evar(vm, context[20], context[21], context[15], context[16]);
    refalrts::alloc_chars(vm, context[22], context[23], "if( ! refalrts::function_term( functions[efunc_", 47);
    refalrts::alloc_chars(vm, context[24], context[25], "], context[", 11);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "] ) ", 4);
    refalrts::alloc_chars(vm, context[31], context[32], "continue;", 9);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[19], context[4] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@3/4 (/7 e.new7/11 )/8 # AlgLeft/9 s.new5/10 e.new6/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[9] ) )
      continue;
    // closed e.new7 as range 11
    // closed e.new6 as range 13
    do {
      // </0 & PrintMatch@3/4 (/7 ' '/19 ' '/20 )/8 # AlgLeft/9 s.BracketNumber0/10 e.Call/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[19] )
        continue;
      context[20] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[20] )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.Call as range 17
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/21"  if( ! refalrts::function_left( functions[efunc_"/22 Tile{ AsIs: e.Call/17 }"], context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"], context["/29 </31 & Symb/32 </33 & Add/34 1/35 s.BracketNumber0/10/36 >/37 >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/19 AsIs: ' '/20 HalfReuse: ' '/8 HalfReuse: ' '/9 }"return refalrts::cRecognitionImpossible;"/41 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_chars(vm, context[22], context[23], "  if( ! refalrts::function_left( functions[efunc_", 49);
      refalrts::alloc_chars(vm, context[24], context[25], "], context[", 11);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[35], 1UL);
      refalrts::copy_stvar(vm, context[36], context[10]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
      refalrts::alloc_chars(vm, context[41], context[42], "return refalrts::cRecognitionImpossible;", 40);
      refalrts::reinit_char(context[0], ')');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], ' ');
      refalrts::reinit_char(context[9], ' ');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[21], context[4] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[40] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[24], context[27] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@3/4 (/7 e.Indent0/15 )/8 # AlgLeft/9 s.BracketNumber0/10 e.Call/17 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    // closed e.Indent0 as range 15
    // closed e.Call as range 17
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 15
    //DEBUG: e.Call: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/19 e.Indent0/15/20"if( ! refalrts::function_left( functions[efunc_"/22 Tile{ AsIs: e.Call/17 }"], context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"], context["/29 </31 & Symb/32 </33 & Add/34 1/35 s.BracketNumber0/10/36 >/37 >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/15 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/41 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::copy_evar(vm, context[20], context[21], context[15], context[16]);
    refalrts::alloc_chars(vm, context[22], context[23], "if( ! refalrts::function_left( functions[efunc_", 47);
    refalrts::alloc_chars(vm, context[24], context[25], "], context[", 11);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[35], 1UL);
    refalrts::copy_stvar(vm, context[36], context[10]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
    refalrts::alloc_chars(vm, context[41], context[42], "continue;", 9);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[19], context[4] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[28], context[40] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@3/4 (/7 e.new7/11 )/8 # AlgRight/9 s.new5/10 e.new6/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[9] ) )
      continue;
    // closed e.new7 as range 11
    // closed e.new6 as range 13
    do {
      // </0 & PrintMatch@3/4 (/7 ' '/19 ' '/20 )/8 # AlgRight/9 s.BracketNumber0/10 e.Call/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[19] )
        continue;
      context[20] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[20] )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.Call as range 17
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/21"  if( ! refalrts::function_right( functions[efunc_"/22 Tile{ AsIs: e.Call/17 }"], context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"], context["/29 </31 & Symb/32 </33 & Add/34 1/35 s.BracketNumber0/10/36 >/37 >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/19 AsIs: ' '/20 HalfReuse: ' '/8 HalfReuse: ' '/9 }"return refalrts::cRecognitionImpossible;"/41 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_chars(vm, context[22], context[23], "  if( ! refalrts::function_right( functions[efunc_", 50);
      refalrts::alloc_chars(vm, context[24], context[25], "], context[", 11);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[35], 1UL);
      refalrts::copy_stvar(vm, context[36], context[10]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
      refalrts::alloc_chars(vm, context[41], context[42], "return refalrts::cRecognitionImpossible;", 40);
      refalrts::reinit_char(context[0], ')');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], ' ');
      refalrts::reinit_char(context[9], ' ');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[21], context[4] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[40] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[24], context[27] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@3/4 (/7 e.Indent0/15 )/8 # AlgRight/9 s.BracketNumber0/10 e.Call/17 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    // closed e.Indent0 as range 15
    // closed e.Call as range 17
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 15
    //DEBUG: e.Call: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/19 e.Indent0/15/20"if( ! refalrts::function_right( functions[efunc_"/22 Tile{ AsIs: e.Call/17 }"], context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"], context["/29 </31 & Symb/32 </33 & Add/34 1/35 s.BracketNumber0/10/36 >/37 >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/15 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/41 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::copy_evar(vm, context[20], context[21], context[15], context[16]);
    refalrts::alloc_chars(vm, context[22], context[23], "if( ! refalrts::function_right( functions[efunc_", 48);
    refalrts::alloc_chars(vm, context[24], context[25], "], context[", 11);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[35], 1UL);
    refalrts::copy_stvar(vm, context[36], context[10]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
    refalrts::alloc_chars(vm, context[41], context[42], "continue;", 9);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[19], context[4] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[28], context[40] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@3/4 (/7 ' '/15 ' '/16 )/8 s.Direction/9 s.BracketNumber0/10 e.Call/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    context[15] = refalrts::char_left( ' ', context[11], context[12] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( ' ', context[11], context[12] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    // closed e.Call as range 13
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Call: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/17"  if( ! refalrts::function_"/18 </20 & StrFromDirection*2/21 Tile{ AsIs: s.Direction/9 } >/22"( functions[efunc_"/23 Tile{ AsIs: e.Call/13 }"], context["/25 </27 & Symb/28 Tile{ AsIs: s.BracketNumber0/10 } >/29"], context["/30 </32 & Symb/33 </34 & Add/35 1/36 s.BracketNumber0/10/37 >/38 >/39"] ) "/40 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/15 AsIs: ' '/16 HalfReuse: ' '/8 }" return refalrts::cRecognitionImpossible;"/42 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_chars(vm, context[18], context[19], "  if( ! refalrts::function_", 27);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::alloc_chars(vm, context[23], context[24], "( functions[efunc_", 18);
    refalrts::alloc_chars(vm, context[25], context[26], "], context[", 11);
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_chars(vm, context[30], context[31], "], context[", 11);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[36], 1UL);
    refalrts::copy_stvar(vm, context[37], context[10]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::alloc_chars(vm, context[40], context[41], "] ) ", 4);
    refalrts::alloc_chars(vm, context[42], context[43], " return refalrts::cRecognitionImpossible;", 41);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[17], context[4] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[29], context[41] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[25], context[28] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[17], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@3/4 (/7 e.Indent0/11 )/8 s.Direction/9 s.BracketNumber0/10 e.Call/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Indent0 as range 11
    // closed e.Call as range 13
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 11
    //DEBUG: e.Call: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/15 e.Indent0/11/16"if( ! refalrts::function_"/18 </20 & StrFromDirection*2/21 Tile{ AsIs: s.Direction/9 } >/22"( functions[efunc_"/23 Tile{ AsIs: e.Call/13 }"], context["/25 </27 & Symb/28 Tile{ AsIs: s.BracketNumber0/10 } >/29"], context["/30 </32 & Symb/33 </34 & Add/35 1/36 s.BracketNumber0/10/37 >/38 >/39"] ) "/40 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/11 HalfReuse: ' '/8 }" continue;"/42 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::copy_evar(vm, context[16], context[17], context[11], context[12]);
    refalrts::alloc_chars(vm, context[18], context[19], "if( ! refalrts::function_", 25);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::alloc_chars(vm, context[23], context[24], "( functions[efunc_", 18);
    refalrts::alloc_chars(vm, context[25], context[26], "], context[", 11);
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_chars(vm, context[30], context[31], "], context[", 11);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[36], 1UL);
    refalrts::copy_stvar(vm, context[37], context[10]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::alloc_chars(vm, context[40], context[41], "] ) ", 4);
    refalrts::alloc_chars(vm, context[42], context[43], " continue;", 10);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[15], context[4] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[29], context[41] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[25], context[28] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[15], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintMatch@3/4 (/7 e.Indent0/5 )/8 s.dyn0/9 s.BracketNumber0/10 e.Call/2 >/1
  // closed e.Indent0 as range 5
  // closed e.Call as range 2
  //DEBUG: s.dyn0: 9
  //DEBUG: s.BracketNumber0: 10
  //DEBUG: e.Indent0: 5
  //DEBUG: e.Call: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch@0/4 AsIs: (/7 AsIs: e.Indent0/5 AsIs: )/8 AsIs: s.dyn0/9 AsIs: s.BracketNumber0/10 } (/11"function"/12 )/14"functions[efunc_"/15 Tile{ AsIs: e.Call/2 } ']'/17 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_chars(vm, context[12], context[13], "function", 8);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_chars(vm, context[15], context[16], "functions[efunc_", 16);
  refalrts::alloc_char(vm, context[17], ']');
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrintMatch_Z3("PrintMatch@3", COOKIE1_, COOKIE2_, func_gen_PrintMatch_Z3);


static refalrts::FnResult func_gen_PrintMatchSave_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 62 elems
  refalrts::Iter context[62];
  refalrts::zeros( context, 62 );
  // </0 & PrintMatchSave@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrintMatchSave@3/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 s.new4/11 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 2
  do {
    // </0 & PrintMatchSave@3/4 (/7 e.new9/12 )/8 s.new6/9 # AlgLeft/10 s.new7/11 e.new8/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[10] ) )
      continue;
    // closed e.new9 as range 12
    // closed e.new8 as range 14
    do {
      // </0 & PrintMatchSave@3/4 (/7 ' '/20 ' '/21 )/8 s.Offset0/9 # AlgLeft/10 s.BracketNumber0/11 e.Call/18 >/1
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = context[15];
      context[20] = refalrts::char_left( ' ', context[16], context[17] );
      if( ! context[20] )
        continue;
      context[21] = refalrts::char_left( ' ', context[16], context[17] );
      if( ! context[21] )
        continue;
      if( ! refalrts::empty_seq( context[16], context[17] ) )
        continue;
      // closed e.Call as range 18
      //DEBUG: s.Offset0: 9
      //DEBUG: s.BracketNumber0: 11
      //DEBUG: e.Call: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/22"  context["/23 </25 & Symb/26 Tile{ AsIs: s.Offset0/9 HalfReuse: >/10 }"] = refalrts::function_left( functions[efunc_"/27 Tile{ AsIs: e.Call/18 }"], context["/29 </31 & Symb/32 Tile{ AsIs: s.BracketNumber0/11 } >/33"], context["/34 </36 & Symb/37 </38 & Add/39 1/40 s.BracketNumber0/11/41 >/42 >/43"] )"/44 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/20 AsIs: ' '/21 HalfReuse: 'i'/8 }"f( ! context["/46 </48 & Symb/49 s.Offset0/9/50 >/51"] )"/52 )/54 (/55"    return refalrts::cRecognitionImpossible;"/56 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[22]);
      refalrts::alloc_chars(vm, context[23], context[24], "  context[", 10);
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[27], context[28], "] = refalrts::function_left( functions[efunc_", 45);
      refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[40], 1UL);
      refalrts::copy_stvar(vm, context[41], context[11]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_chars(vm, context[44], context[45], "] )", 3);
      refalrts::alloc_chars(vm, context[46], context[47], "f( ! context[", 13);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[49], functions[efunc_Symb]);
      refalrts::copy_stvar(vm, context[50], context[9]);
      refalrts::alloc_close_call(vm, context[51]);
      refalrts::alloc_chars(vm, context[52], context[53], "] )", 3);
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::alloc_open_bracket(vm, context[55]);
      refalrts::alloc_chars(vm, context[56], context[57], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::reinit_close_call(context[10]);
      refalrts::reinit_char(context[0], ';');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], 'i');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[55], context[1] );
      refalrts::link_brackets( context[7], context[54] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[48] );
      refalrts::link_brackets( context[22], context[4] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[25] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[46], context[57] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[33], context[45] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[22], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatchSave@3/4 (/7 e.Indent0/16 )/8 s.Offset0/9 # AlgLeft/10 s.BracketNumber0/11 e.Call/18 >/1
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    context[19] = context[15];
    // closed e.Indent0 as range 16
    // closed e.Call as range 18
    //DEBUG: s.Offset0: 9
    //DEBUG: s.BracketNumber0: 11
    //DEBUG: e.Indent0: 16
    //DEBUG: e.Call: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/20 e.Indent0/16/21"context["/23 </25 & Symb/26 Tile{ AsIs: s.Offset0/9 HalfReuse: >/10 }"] = refalrts::function_left( functions[efunc_"/27 Tile{ AsIs: e.Call/18 }"], context["/29 </31 & Symb/32 Tile{ AsIs: s.BracketNumber0/11 } >/33"], context["/34 </36 & Symb/37 </38 & Add/39 1/40 s.BracketNumber0/11/41 >/42 >/43"] )"/44 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/16 HalfReuse: 'i'/8 }"f( ! context["/46 </48 & Symb/49 s.Offset0/9/50 >/51"] )"/52 )/54 (/55 e.Indent0/16/56"  continue;"/58 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::copy_evar(vm, context[21], context[22], context[16], context[17]);
    refalrts::alloc_chars(vm, context[23], context[24], "context[", 8);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_Symb]);
    refalrts::alloc_chars(vm, context[27], context[28], "] = refalrts::function_left( functions[efunc_", 45);
    refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[40], 1UL);
    refalrts::copy_stvar(vm, context[41], context[11]);
    refalrts::alloc_close_call(vm, context[42]);
    refalrts::alloc_close_call(vm, context[43]);
    refalrts::alloc_chars(vm, context[44], context[45], "] )", 3);
    refalrts::alloc_chars(vm, context[46], context[47], "f( ! context[", 13);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_name(vm, context[49], functions[efunc_Symb]);
    refalrts::copy_stvar(vm, context[50], context[9]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::alloc_chars(vm, context[52], context[53], "] )", 3);
    refalrts::alloc_close_bracket(vm, context[54]);
    refalrts::alloc_open_bracket(vm, context[55]);
    refalrts::copy_evar(vm, context[56], context[57], context[16], context[17]);
    refalrts::alloc_chars(vm, context[58], context[59], "  continue;", 11);
    refalrts::reinit_close_call(context[10]);
    refalrts::reinit_char(context[0], ';');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[55], context[1] );
    refalrts::link_brackets( context[7], context[54] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[48] );
    refalrts::link_brackets( context[20], context[4] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[46], context[59] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[33], context[45] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[29], context[32] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[20], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatchSave@3/4 (/7 e.new9/12 )/8 s.new6/9 # AlgRight/10 s.new7/11 e.new8/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[10] ) )
      continue;
    // closed e.new9 as range 12
    // closed e.new8 as range 14
    do {
      // </0 & PrintMatchSave@3/4 (/7 ' '/20 ' '/21 )/8 s.Offset0/9 # AlgRight/10 s.BracketNumber0/11 e.Call/18 >/1
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = context[15];
      context[20] = refalrts::char_left( ' ', context[16], context[17] );
      if( ! context[20] )
        continue;
      context[21] = refalrts::char_left( ' ', context[16], context[17] );
      if( ! context[21] )
        continue;
      if( ! refalrts::empty_seq( context[16], context[17] ) )
        continue;
      // closed e.Call as range 18
      //DEBUG: s.Offset0: 9
      //DEBUG: s.BracketNumber0: 11
      //DEBUG: e.Call: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/22"  context["/23 </25 & Symb/26 Tile{ AsIs: s.Offset0/9 HalfReuse: >/10 }"] = refalrts::function_right( functions[efunc_"/27 Tile{ AsIs: e.Call/18 }"], context["/29 </31 & Symb/32 Tile{ AsIs: s.BracketNumber0/11 } >/33"], context["/34 </36 & Symb/37 </38 & Add/39 1/40 s.BracketNumber0/11/41 >/42 >/43"] )"/44 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/20 AsIs: ' '/21 HalfReuse: 'i'/8 }"f( ! context["/46 </48 & Symb/49 s.Offset0/9/50 >/51"] )"/52 )/54 (/55"    return refalrts::cRecognitionImpossible;"/56 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[22]);
      refalrts::alloc_chars(vm, context[23], context[24], "  context[", 10);
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[27], context[28], "] = refalrts::function_right( functions[efunc_", 46);
      refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[40], 1UL);
      refalrts::copy_stvar(vm, context[41], context[11]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_chars(vm, context[44], context[45], "] )", 3);
      refalrts::alloc_chars(vm, context[46], context[47], "f( ! context[", 13);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[49], functions[efunc_Symb]);
      refalrts::copy_stvar(vm, context[50], context[9]);
      refalrts::alloc_close_call(vm, context[51]);
      refalrts::alloc_chars(vm, context[52], context[53], "] )", 3);
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::alloc_open_bracket(vm, context[55]);
      refalrts::alloc_chars(vm, context[56], context[57], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::reinit_close_call(context[10]);
      refalrts::reinit_char(context[0], ';');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], 'i');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[55], context[1] );
      refalrts::link_brackets( context[7], context[54] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[48] );
      refalrts::link_brackets( context[22], context[4] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[25] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[46], context[57] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[33], context[45] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[22], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatchSave@3/4 (/7 e.Indent0/16 )/8 s.Offset0/9 # AlgRight/10 s.BracketNumber0/11 e.Call/18 >/1
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    context[19] = context[15];
    // closed e.Indent0 as range 16
    // closed e.Call as range 18
    //DEBUG: s.Offset0: 9
    //DEBUG: s.BracketNumber0: 11
    //DEBUG: e.Indent0: 16
    //DEBUG: e.Call: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/20 e.Indent0/16/21"context["/23 </25 & Symb/26 Tile{ AsIs: s.Offset0/9 HalfReuse: >/10 }"] = refalrts::function_right( functions[efunc_"/27 Tile{ AsIs: e.Call/18 }"], context["/29 </31 & Symb/32 Tile{ AsIs: s.BracketNumber0/11 } >/33"], context["/34 </36 & Symb/37 </38 & Add/39 1/40 s.BracketNumber0/11/41 >/42 >/43"] )"/44 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/16 HalfReuse: 'i'/8 }"f( ! context["/46 </48 & Symb/49 s.Offset0/9/50 >/51"] )"/52 )/54 (/55 e.Indent0/16/56"  continue;"/58 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::copy_evar(vm, context[21], context[22], context[16], context[17]);
    refalrts::alloc_chars(vm, context[23], context[24], "context[", 8);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_Symb]);
    refalrts::alloc_chars(vm, context[27], context[28], "] = refalrts::function_right( functions[efunc_", 46);
    refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[40], 1UL);
    refalrts::copy_stvar(vm, context[41], context[11]);
    refalrts::alloc_close_call(vm, context[42]);
    refalrts::alloc_close_call(vm, context[43]);
    refalrts::alloc_chars(vm, context[44], context[45], "] )", 3);
    refalrts::alloc_chars(vm, context[46], context[47], "f( ! context[", 13);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_name(vm, context[49], functions[efunc_Symb]);
    refalrts::copy_stvar(vm, context[50], context[9]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::alloc_chars(vm, context[52], context[53], "] )", 3);
    refalrts::alloc_close_bracket(vm, context[54]);
    refalrts::alloc_open_bracket(vm, context[55]);
    refalrts::copy_evar(vm, context[56], context[57], context[16], context[17]);
    refalrts::alloc_chars(vm, context[58], context[59], "  continue;", 11);
    refalrts::reinit_close_call(context[10]);
    refalrts::reinit_char(context[0], ';');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[55], context[1] );
    refalrts::link_brackets( context[7], context[54] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[48] );
    refalrts::link_brackets( context[20], context[4] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[46], context[59] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[33], context[45] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[29], context[32] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[20], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatchSave@3/4 (/7 ' '/16 ' '/17 )/8 s.Offset0/9 s.Direction0/10 s.BracketNumber0/11 e.Call/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    context[16] = refalrts::char_left( ' ', context[12], context[13] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( ' ', context[12], context[13] );
    if( ! context[17] )
      continue;
    if( ! refalrts::empty_seq( context[12], context[13] ) )
      continue;
    // closed e.Call as range 14
    //DEBUG: s.Offset0: 9
    //DEBUG: s.Direction0: 10
    //DEBUG: s.BracketNumber0: 11
    //DEBUG: e.Call: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/18"  context["/19 </21 & Symb/22 Tile{ AsIs: s.Offset0/9 } >/23"] = refalrts::function_"/24 </26 & StrFromDirection*2/27 Tile{ AsIs: s.Direction0/10 } >/28"( functions[efunc_"/29 Tile{ AsIs: e.Call/14 }"], context["/31 </33 & Symb/34 Tile{ AsIs: s.BracketNumber0/11 } >/35"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.BracketNumber0/11/43 >/44 >/45"] )"/46 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/16 AsIs: ' '/17 HalfReuse: 'i'/8 }"f( ! context["/48 </50 & Symb/51 s.Offset0/9/52 >/53"] )"/54 )/56 (/57"    return refalrts::cRecognitionImpossible;"/58 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[18]);
    refalrts::alloc_chars(vm, context[19], context[20], "  context[", 10);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::alloc_chars(vm, context[24], context[25], "] = refalrts::function_", 23);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "( functions[efunc_", 18);
    refalrts::alloc_chars(vm, context[31], context[32], "], context[", 11);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[42], 1UL);
    refalrts::copy_stvar(vm, context[43], context[11]);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::alloc_chars(vm, context[46], context[47], "] )", 3);
    refalrts::alloc_chars(vm, context[48], context[49], "f( ! context[", 13);
    refalrts::alloc_open_call(vm, context[50]);
    refalrts::alloc_name(vm, context[51], functions[efunc_Symb]);
    refalrts::copy_stvar(vm, context[52], context[9]);
    refalrts::alloc_close_call(vm, context[53]);
    refalrts::alloc_chars(vm, context[54], context[55], "] )", 3);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::alloc_chars(vm, context[58], context[59], "    return refalrts::cRecognitionImpossible;", 44);
    refalrts::reinit_char(context[0], ';');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[57], context[1] );
    refalrts::link_brackets( context[7], context[56] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[50] );
    refalrts::link_brackets( context[18], context[4] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[48], context[59] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[35], context[47] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[23], context[27] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[18], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatchSave@3/4 (/7 e.Indent0/12 )/8 s.Offset0/9 s.Direction0/10 s.BracketNumber0/11 e.Call/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    // closed e.Indent0 as range 12
    // closed e.Call as range 14
    //DEBUG: s.Offset0: 9
    //DEBUG: s.Direction0: 10
    //DEBUG: s.BracketNumber0: 11
    //DEBUG: e.Indent0: 12
    //DEBUG: e.Call: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/16 e.Indent0/12/17"context["/19 </21 & Symb/22 Tile{ AsIs: s.Offset0/9 } >/23"] = refalrts::function_"/24 </26 & StrFromDirection*2/27 Tile{ AsIs: s.Direction0/10 } >/28"( functions[efunc_"/29 Tile{ AsIs: e.Call/14 }"], context["/31 </33 & Symb/34 Tile{ AsIs: s.BracketNumber0/11 } >/35"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.BracketNumber0/11/43 >/44 >/45"] )"/46 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/12 HalfReuse: 'i'/8 }"f( ! context["/48 </50 & Symb/51 s.Offset0/9/52 >/53"] )"/54 )/56 (/57 e.Indent0/12/58"  continue;"/60 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[16]);
    refalrts::copy_evar(vm, context[17], context[18], context[12], context[13]);
    refalrts::alloc_chars(vm, context[19], context[20], "context[", 8);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::alloc_chars(vm, context[24], context[25], "] = refalrts::function_", 23);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "( functions[efunc_", 18);
    refalrts::alloc_chars(vm, context[31], context[32], "], context[", 11);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[42], 1UL);
    refalrts::copy_stvar(vm, context[43], context[11]);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::alloc_chars(vm, context[46], context[47], "] )", 3);
    refalrts::alloc_chars(vm, context[48], context[49], "f( ! context[", 13);
    refalrts::alloc_open_call(vm, context[50]);
    refalrts::alloc_name(vm, context[51], functions[efunc_Symb]);
    refalrts::copy_stvar(vm, context[52], context[9]);
    refalrts::alloc_close_call(vm, context[53]);
    refalrts::alloc_chars(vm, context[54], context[55], "] )", 3);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::copy_evar(vm, context[58], context[59], context[12], context[13]);
    refalrts::alloc_chars(vm, context[60], context[61], "  continue;", 11);
    refalrts::reinit_char(context[0], ';');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[57], context[1] );
    refalrts::link_brackets( context[7], context[56] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[50] );
    refalrts::link_brackets( context[16], context[4] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[48], context[61] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[35], context[47] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[23], context[27] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[16], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintMatchSave@3/4 (/7 e.Indent0/5 )/8 s.Offset0/9 s.Direction0/10 s.BracketNumber0/11 e.Call/2 >/1
  // closed e.Indent0 as range 5
  // closed e.Call as range 2
  //DEBUG: s.Offset0: 9
  //DEBUG: s.Direction0: 10
  //DEBUG: s.BracketNumber0: 11
  //DEBUG: e.Indent0: 5
  //DEBUG: e.Call: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave@0/4 AsIs: (/7 AsIs: e.Indent0/5 AsIs: )/8 AsIs: s.Offset0/9 AsIs: s.Direction0/10 AsIs: s.BracketNumber0/11 } (/12"function"/13 )/15"functions[efunc_"/16 Tile{ AsIs: e.Call/2 } ']'/18 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_chars(vm, context[13], context[14], "function", 8);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_chars(vm, context[16], context[17], "functions[efunc_", 16);
  refalrts::alloc_char(vm, context[18], ']');
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatchSave_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[12], context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrintMatchSave_Z3("PrintMatchSave@3", COOKIE1_, COOKIE2_, func_gen_PrintMatchSave_Z3);


static refalrts::FnResult func_gen_PrintMatch_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & PrintMatch@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrintMatch@4/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & PrintMatch@4/4 (/7 e.new7/11 )/8 # AlgTerm/9 s.new5/10 e.new6/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[9] ) )
      continue;
    // closed e.new7 as range 11
    // closed e.new6 as range 13
    do {
      // </0 & PrintMatch@4/4 (/7 ' '/19 ' '/20 )/8 # AlgTerm/9 s.BracketNumber0/10 e.Call/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[19] )
        continue;
      context[20] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[20] )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.Call as range 17
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/21"  if( ! refalrts::ident_term( identifiers[ident_"/22 Tile{ AsIs: e.Call/17 }"], context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"] ) "/29 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/19 AsIs: ' '/20 HalfReuse: ' '/8 HalfReuse: ' '/9 }"return refalrts::cRecognitionImpossible;"/31 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_chars(vm, context[22], context[23], "  if( ! refalrts::ident_term( identifiers[ident_", 48);
      refalrts::alloc_chars(vm, context[24], context[25], "], context[", 11);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "] ) ", 4);
      refalrts::alloc_chars(vm, context[31], context[32], "return refalrts::cRecognitionImpossible;", 40);
      refalrts::reinit_char(context[0], ')');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], ' ');
      refalrts::reinit_char(context[9], ' ');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[21], context[4] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[30] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[24], context[27] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@4/4 (/7 e.Indent0/15 )/8 # AlgTerm/9 s.BracketNumber0/10 e.Call/17 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    // closed e.Indent0 as range 15
    // closed e.Call as range 17
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 15
    //DEBUG: e.Call: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/19 e.Indent0/15/20"if( ! refalrts::ident_term( identifiers[ident_"/22 Tile{ AsIs: e.Call/17 }"], context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"] ) "/29 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/15 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/31 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::copy_evar(vm, context[20], context[21], context[15], context[16]);
    refalrts::alloc_chars(vm, context[22], context[23], "if( ! refalrts::ident_term( identifiers[ident_", 46);
    refalrts::alloc_chars(vm, context[24], context[25], "], context[", 11);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "] ) ", 4);
    refalrts::alloc_chars(vm, context[31], context[32], "continue;", 9);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[19], context[4] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@4/4 (/7 e.new7/11 )/8 # AlgLeft/9 s.new5/10 e.new6/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[9] ) )
      continue;
    // closed e.new7 as range 11
    // closed e.new6 as range 13
    do {
      // </0 & PrintMatch@4/4 (/7 ' '/19 ' '/20 )/8 # AlgLeft/9 s.BracketNumber0/10 e.Call/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[19] )
        continue;
      context[20] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[20] )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.Call as range 17
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/21"  if( ! refalrts::ident_left( identifiers[ident_"/22 Tile{ AsIs: e.Call/17 }"], context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"], context["/29 </31 & Symb/32 </33 & Add/34 1/35 s.BracketNumber0/10/36 >/37 >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/19 AsIs: ' '/20 HalfReuse: ' '/8 HalfReuse: ' '/9 }"return refalrts::cRecognitionImpossible;"/41 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_chars(vm, context[22], context[23], "  if( ! refalrts::ident_left( identifiers[ident_", 48);
      refalrts::alloc_chars(vm, context[24], context[25], "], context[", 11);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[35], 1UL);
      refalrts::copy_stvar(vm, context[36], context[10]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
      refalrts::alloc_chars(vm, context[41], context[42], "return refalrts::cRecognitionImpossible;", 40);
      refalrts::reinit_char(context[0], ')');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], ' ');
      refalrts::reinit_char(context[9], ' ');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[21], context[4] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[40] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[24], context[27] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@4/4 (/7 e.Indent0/15 )/8 # AlgLeft/9 s.BracketNumber0/10 e.Call/17 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    // closed e.Indent0 as range 15
    // closed e.Call as range 17
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 15
    //DEBUG: e.Call: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/19 e.Indent0/15/20"if( ! refalrts::ident_left( identifiers[ident_"/22 Tile{ AsIs: e.Call/17 }"], context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"], context["/29 </31 & Symb/32 </33 & Add/34 1/35 s.BracketNumber0/10/36 >/37 >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/15 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/41 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::copy_evar(vm, context[20], context[21], context[15], context[16]);
    refalrts::alloc_chars(vm, context[22], context[23], "if( ! refalrts::ident_left( identifiers[ident_", 46);
    refalrts::alloc_chars(vm, context[24], context[25], "], context[", 11);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[35], 1UL);
    refalrts::copy_stvar(vm, context[36], context[10]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
    refalrts::alloc_chars(vm, context[41], context[42], "continue;", 9);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[19], context[4] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[28], context[40] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@4/4 (/7 e.new7/11 )/8 # AlgRight/9 s.new5/10 e.new6/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[9] ) )
      continue;
    // closed e.new7 as range 11
    // closed e.new6 as range 13
    do {
      // </0 & PrintMatch@4/4 (/7 ' '/19 ' '/20 )/8 # AlgRight/9 s.BracketNumber0/10 e.Call/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[19] )
        continue;
      context[20] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[20] )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.Call as range 17
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/21"  if( ! refalrts::ident_right( identifiers[ident_"/22 Tile{ AsIs: e.Call/17 }"], context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"], context["/29 </31 & Symb/32 </33 & Add/34 1/35 s.BracketNumber0/10/36 >/37 >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/19 AsIs: ' '/20 HalfReuse: ' '/8 HalfReuse: ' '/9 }"return refalrts::cRecognitionImpossible;"/41 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_chars(vm, context[22], context[23], "  if( ! refalrts::ident_right( identifiers[ident_", 49);
      refalrts::alloc_chars(vm, context[24], context[25], "], context[", 11);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[35], 1UL);
      refalrts::copy_stvar(vm, context[36], context[10]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
      refalrts::alloc_chars(vm, context[41], context[42], "return refalrts::cRecognitionImpossible;", 40);
      refalrts::reinit_char(context[0], ')');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], ' ');
      refalrts::reinit_char(context[9], ' ');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[21], context[4] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[40] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[24], context[27] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@4/4 (/7 e.Indent0/15 )/8 # AlgRight/9 s.BracketNumber0/10 e.Call/17 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    // closed e.Indent0 as range 15
    // closed e.Call as range 17
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 15
    //DEBUG: e.Call: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/19 e.Indent0/15/20"if( ! refalrts::ident_right( identifiers[ident_"/22 Tile{ AsIs: e.Call/17 }"], context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"], context["/29 </31 & Symb/32 </33 & Add/34 1/35 s.BracketNumber0/10/36 >/37 >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/15 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/41 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::copy_evar(vm, context[20], context[21], context[15], context[16]);
    refalrts::alloc_chars(vm, context[22], context[23], "if( ! refalrts::ident_right( identifiers[ident_", 47);
    refalrts::alloc_chars(vm, context[24], context[25], "], context[", 11);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[35], 1UL);
    refalrts::copy_stvar(vm, context[36], context[10]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
    refalrts::alloc_chars(vm, context[41], context[42], "continue;", 9);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[19], context[4] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[28], context[40] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@4/4 (/7 ' '/15 ' '/16 )/8 s.Direction/9 s.BracketNumber0/10 e.Call/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    context[15] = refalrts::char_left( ' ', context[11], context[12] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( ' ', context[11], context[12] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    // closed e.Call as range 13
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Call: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/17"  if( ! refalrts::ident_"/18 </20 & StrFromDirection*2/21 Tile{ AsIs: s.Direction/9 } >/22"( identifiers[ident_"/23 Tile{ AsIs: e.Call/13 }"], context["/25 </27 & Symb/28 Tile{ AsIs: s.BracketNumber0/10 } >/29"], context["/30 </32 & Symb/33 </34 & Add/35 1/36 s.BracketNumber0/10/37 >/38 >/39"] ) "/40 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/15 AsIs: ' '/16 HalfReuse: ' '/8 }" return refalrts::cRecognitionImpossible;"/42 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_chars(vm, context[18], context[19], "  if( ! refalrts::ident_", 24);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::alloc_chars(vm, context[23], context[24], "( identifiers[ident_", 20);
    refalrts::alloc_chars(vm, context[25], context[26], "], context[", 11);
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_chars(vm, context[30], context[31], "], context[", 11);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[36], 1UL);
    refalrts::copy_stvar(vm, context[37], context[10]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::alloc_chars(vm, context[40], context[41], "] ) ", 4);
    refalrts::alloc_chars(vm, context[42], context[43], " return refalrts::cRecognitionImpossible;", 41);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[17], context[4] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[29], context[41] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[25], context[28] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[17], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@4/4 (/7 e.Indent0/11 )/8 s.Direction/9 s.BracketNumber0/10 e.Call/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Indent0 as range 11
    // closed e.Call as range 13
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 11
    //DEBUG: e.Call: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/15 e.Indent0/11/16"if( ! refalrts::ident_"/18 </20 & StrFromDirection*2/21 Tile{ AsIs: s.Direction/9 } >/22"( identifiers[ident_"/23 Tile{ AsIs: e.Call/13 }"], context["/25 </27 & Symb/28 Tile{ AsIs: s.BracketNumber0/10 } >/29"], context["/30 </32 & Symb/33 </34 & Add/35 1/36 s.BracketNumber0/10/37 >/38 >/39"] ) "/40 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/11 HalfReuse: ' '/8 }" continue;"/42 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::copy_evar(vm, context[16], context[17], context[11], context[12]);
    refalrts::alloc_chars(vm, context[18], context[19], "if( ! refalrts::ident_", 22);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::alloc_chars(vm, context[23], context[24], "( identifiers[ident_", 20);
    refalrts::alloc_chars(vm, context[25], context[26], "], context[", 11);
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_chars(vm, context[30], context[31], "], context[", 11);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[36], 1UL);
    refalrts::copy_stvar(vm, context[37], context[10]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::alloc_chars(vm, context[40], context[41], "] ) ", 4);
    refalrts::alloc_chars(vm, context[42], context[43], " continue;", 10);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[15], context[4] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[29], context[41] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[25], context[28] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[15], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintMatch@4/4 (/7 e.Indent0/5 )/8 s.dyn0/9 s.BracketNumber0/10 e.Call/2 >/1
  // closed e.Indent0 as range 5
  // closed e.Call as range 2
  //DEBUG: s.dyn0: 9
  //DEBUG: s.BracketNumber0: 10
  //DEBUG: e.Indent0: 5
  //DEBUG: e.Call: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch@0/4 AsIs: (/7 AsIs: e.Indent0/5 AsIs: )/8 AsIs: s.dyn0/9 AsIs: s.BracketNumber0/10 } (/11"ident"/12 )/14"identifiers[ident_"/15 Tile{ AsIs: e.Call/2 } ']'/17 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_chars(vm, context[12], context[13], "ident", 5);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_chars(vm, context[15], context[16], "identifiers[ident_", 18);
  refalrts::alloc_char(vm, context[17], ']');
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrintMatch_Z4("PrintMatch@4", COOKIE1_, COOKIE2_, func_gen_PrintMatch_Z4);


static refalrts::FnResult func_gen_PrintMatchSave_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 62 elems
  refalrts::Iter context[62];
  refalrts::zeros( context, 62 );
  // </0 & PrintMatchSave@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrintMatchSave@4/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 s.new4/11 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 2
  do {
    // </0 & PrintMatchSave@4/4 (/7 e.new9/12 )/8 s.new6/9 # AlgLeft/10 s.new7/11 e.new8/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[10] ) )
      continue;
    // closed e.new9 as range 12
    // closed e.new8 as range 14
    do {
      // </0 & PrintMatchSave@4/4 (/7 ' '/20 ' '/21 )/8 s.Offset0/9 # AlgLeft/10 s.BracketNumber0/11 e.Call/18 >/1
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = context[15];
      context[20] = refalrts::char_left( ' ', context[16], context[17] );
      if( ! context[20] )
        continue;
      context[21] = refalrts::char_left( ' ', context[16], context[17] );
      if( ! context[21] )
        continue;
      if( ! refalrts::empty_seq( context[16], context[17] ) )
        continue;
      // closed e.Call as range 18
      //DEBUG: s.Offset0: 9
      //DEBUG: s.BracketNumber0: 11
      //DEBUG: e.Call: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/22"  context["/23 </25 & Symb/26 Tile{ AsIs: s.Offset0/9 HalfReuse: >/10 }"] = refalrts::ident_left( identifiers[ident_"/27 Tile{ AsIs: e.Call/18 }"], context["/29 </31 & Symb/32 Tile{ AsIs: s.BracketNumber0/11 } >/33"], context["/34 </36 & Symb/37 </38 & Add/39 1/40 s.BracketNumber0/11/41 >/42 >/43"] )"/44 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/20 AsIs: ' '/21 HalfReuse: 'i'/8 }"f( ! context["/46 </48 & Symb/49 s.Offset0/9/50 >/51"] )"/52 )/54 (/55"    return refalrts::cRecognitionImpossible;"/56 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[22]);
      refalrts::alloc_chars(vm, context[23], context[24], "  context[", 10);
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[27], context[28], "] = refalrts::ident_left( identifiers[ident_", 44);
      refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[40], 1UL);
      refalrts::copy_stvar(vm, context[41], context[11]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_chars(vm, context[44], context[45], "] )", 3);
      refalrts::alloc_chars(vm, context[46], context[47], "f( ! context[", 13);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[49], functions[efunc_Symb]);
      refalrts::copy_stvar(vm, context[50], context[9]);
      refalrts::alloc_close_call(vm, context[51]);
      refalrts::alloc_chars(vm, context[52], context[53], "] )", 3);
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::alloc_open_bracket(vm, context[55]);
      refalrts::alloc_chars(vm, context[56], context[57], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::reinit_close_call(context[10]);
      refalrts::reinit_char(context[0], ';');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], 'i');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[55], context[1] );
      refalrts::link_brackets( context[7], context[54] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[48] );
      refalrts::link_brackets( context[22], context[4] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[25] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[46], context[57] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[33], context[45] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[22], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatchSave@4/4 (/7 e.Indent0/16 )/8 s.Offset0/9 # AlgLeft/10 s.BracketNumber0/11 e.Call/18 >/1
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    context[19] = context[15];
    // closed e.Indent0 as range 16
    // closed e.Call as range 18
    //DEBUG: s.Offset0: 9
    //DEBUG: s.BracketNumber0: 11
    //DEBUG: e.Indent0: 16
    //DEBUG: e.Call: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/20 e.Indent0/16/21"context["/23 </25 & Symb/26 Tile{ AsIs: s.Offset0/9 HalfReuse: >/10 }"] = refalrts::ident_left( identifiers[ident_"/27 Tile{ AsIs: e.Call/18 }"], context["/29 </31 & Symb/32 Tile{ AsIs: s.BracketNumber0/11 } >/33"], context["/34 </36 & Symb/37 </38 & Add/39 1/40 s.BracketNumber0/11/41 >/42 >/43"] )"/44 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/16 HalfReuse: 'i'/8 }"f( ! context["/46 </48 & Symb/49 s.Offset0/9/50 >/51"] )"/52 )/54 (/55 e.Indent0/16/56"  continue;"/58 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::copy_evar(vm, context[21], context[22], context[16], context[17]);
    refalrts::alloc_chars(vm, context[23], context[24], "context[", 8);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_Symb]);
    refalrts::alloc_chars(vm, context[27], context[28], "] = refalrts::ident_left( identifiers[ident_", 44);
    refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[40], 1UL);
    refalrts::copy_stvar(vm, context[41], context[11]);
    refalrts::alloc_close_call(vm, context[42]);
    refalrts::alloc_close_call(vm, context[43]);
    refalrts::alloc_chars(vm, context[44], context[45], "] )", 3);
    refalrts::alloc_chars(vm, context[46], context[47], "f( ! context[", 13);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_name(vm, context[49], functions[efunc_Symb]);
    refalrts::copy_stvar(vm, context[50], context[9]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::alloc_chars(vm, context[52], context[53], "] )", 3);
    refalrts::alloc_close_bracket(vm, context[54]);
    refalrts::alloc_open_bracket(vm, context[55]);
    refalrts::copy_evar(vm, context[56], context[57], context[16], context[17]);
    refalrts::alloc_chars(vm, context[58], context[59], "  continue;", 11);
    refalrts::reinit_close_call(context[10]);
    refalrts::reinit_char(context[0], ';');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[55], context[1] );
    refalrts::link_brackets( context[7], context[54] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[48] );
    refalrts::link_brackets( context[20], context[4] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[46], context[59] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[33], context[45] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[29], context[32] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[20], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatchSave@4/4 (/7 e.new9/12 )/8 s.new6/9 # AlgRight/10 s.new7/11 e.new8/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[10] ) )
      continue;
    // closed e.new9 as range 12
    // closed e.new8 as range 14
    do {
      // </0 & PrintMatchSave@4/4 (/7 ' '/20 ' '/21 )/8 s.Offset0/9 # AlgRight/10 s.BracketNumber0/11 e.Call/18 >/1
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = context[15];
      context[20] = refalrts::char_left( ' ', context[16], context[17] );
      if( ! context[20] )
        continue;
      context[21] = refalrts::char_left( ' ', context[16], context[17] );
      if( ! context[21] )
        continue;
      if( ! refalrts::empty_seq( context[16], context[17] ) )
        continue;
      // closed e.Call as range 18
      //DEBUG: s.Offset0: 9
      //DEBUG: s.BracketNumber0: 11
      //DEBUG: e.Call: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/22"  context["/23 </25 & Symb/26 Tile{ AsIs: s.Offset0/9 HalfReuse: >/10 }"] = refalrts::ident_right( identifiers[ident_"/27 Tile{ AsIs: e.Call/18 }"], context["/29 </31 & Symb/32 Tile{ AsIs: s.BracketNumber0/11 } >/33"], context["/34 </36 & Symb/37 </38 & Add/39 1/40 s.BracketNumber0/11/41 >/42 >/43"] )"/44 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/20 AsIs: ' '/21 HalfReuse: 'i'/8 }"f( ! context["/46 </48 & Symb/49 s.Offset0/9/50 >/51"] )"/52 )/54 (/55"    return refalrts::cRecognitionImpossible;"/56 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[22]);
      refalrts::alloc_chars(vm, context[23], context[24], "  context[", 10);
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_Symb]);
      refalrts::alloc_chars(vm, context[27], context[28], "] = refalrts::ident_right( identifiers[ident_", 45);
      refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
      refalrts::alloc_open_call(vm, context[36]);
      refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[40], 1UL);
      refalrts::copy_stvar(vm, context[41], context[11]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_chars(vm, context[44], context[45], "] )", 3);
      refalrts::alloc_chars(vm, context[46], context[47], "f( ! context[", 13);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[49], functions[efunc_Symb]);
      refalrts::copy_stvar(vm, context[50], context[9]);
      refalrts::alloc_close_call(vm, context[51]);
      refalrts::alloc_chars(vm, context[52], context[53], "] )", 3);
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::alloc_open_bracket(vm, context[55]);
      refalrts::alloc_chars(vm, context[56], context[57], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::reinit_close_call(context[10]);
      refalrts::reinit_char(context[0], ';');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], 'i');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[55], context[1] );
      refalrts::link_brackets( context[7], context[54] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[48] );
      refalrts::link_brackets( context[22], context[4] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[25] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[46], context[57] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[33], context[45] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[22], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatchSave@4/4 (/7 e.Indent0/16 )/8 s.Offset0/9 # AlgRight/10 s.BracketNumber0/11 e.Call/18 >/1
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    context[19] = context[15];
    // closed e.Indent0 as range 16
    // closed e.Call as range 18
    //DEBUG: s.Offset0: 9
    //DEBUG: s.BracketNumber0: 11
    //DEBUG: e.Indent0: 16
    //DEBUG: e.Call: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/20 e.Indent0/16/21"context["/23 </25 & Symb/26 Tile{ AsIs: s.Offset0/9 HalfReuse: >/10 }"] = refalrts::ident_right( identifiers[ident_"/27 Tile{ AsIs: e.Call/18 }"], context["/29 </31 & Symb/32 Tile{ AsIs: s.BracketNumber0/11 } >/33"], context["/34 </36 & Symb/37 </38 & Add/39 1/40 s.BracketNumber0/11/41 >/42 >/43"] )"/44 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/16 HalfReuse: 'i'/8 }"f( ! context["/46 </48 & Symb/49 s.Offset0/9/50 >/51"] )"/52 )/54 (/55 e.Indent0/16/56"  continue;"/58 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::copy_evar(vm, context[21], context[22], context[16], context[17]);
    refalrts::alloc_chars(vm, context[23], context[24], "context[", 8);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_Symb]);
    refalrts::alloc_chars(vm, context[27], context[28], "] = refalrts::ident_right( identifiers[ident_", 45);
    refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[40], 1UL);
    refalrts::copy_stvar(vm, context[41], context[11]);
    refalrts::alloc_close_call(vm, context[42]);
    refalrts::alloc_close_call(vm, context[43]);
    refalrts::alloc_chars(vm, context[44], context[45], "] )", 3);
    refalrts::alloc_chars(vm, context[46], context[47], "f( ! context[", 13);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_name(vm, context[49], functions[efunc_Symb]);
    refalrts::copy_stvar(vm, context[50], context[9]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::alloc_chars(vm, context[52], context[53], "] )", 3);
    refalrts::alloc_close_bracket(vm, context[54]);
    refalrts::alloc_open_bracket(vm, context[55]);
    refalrts::copy_evar(vm, context[56], context[57], context[16], context[17]);
    refalrts::alloc_chars(vm, context[58], context[59], "  continue;", 11);
    refalrts::reinit_close_call(context[10]);
    refalrts::reinit_char(context[0], ';');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[55], context[1] );
    refalrts::link_brackets( context[7], context[54] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[48] );
    refalrts::link_brackets( context[20], context[4] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[25] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[46], context[59] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[33], context[45] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[29], context[32] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[20], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatchSave@4/4 (/7 ' '/16 ' '/17 )/8 s.Offset0/9 s.Direction0/10 s.BracketNumber0/11 e.Call/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    context[16] = refalrts::char_left( ' ', context[12], context[13] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::char_left( ' ', context[12], context[13] );
    if( ! context[17] )
      continue;
    if( ! refalrts::empty_seq( context[12], context[13] ) )
      continue;
    // closed e.Call as range 14
    //DEBUG: s.Offset0: 9
    //DEBUG: s.Direction0: 10
    //DEBUG: s.BracketNumber0: 11
    //DEBUG: e.Call: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/18"  context["/19 </21 & Symb/22 Tile{ AsIs: s.Offset0/9 } >/23"] = refalrts::ident_"/24 </26 & StrFromDirection*2/27 Tile{ AsIs: s.Direction0/10 } >/28"( identifiers[ident_"/29 Tile{ AsIs: e.Call/14 }"], context["/31 </33 & Symb/34 Tile{ AsIs: s.BracketNumber0/11 } >/35"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.BracketNumber0/11/43 >/44 >/45"] )"/46 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/16 AsIs: ' '/17 HalfReuse: 'i'/8 }"f( ! context["/48 </50 & Symb/51 s.Offset0/9/52 >/53"] )"/54 )/56 (/57"    return refalrts::cRecognitionImpossible;"/58 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[18]);
    refalrts::alloc_chars(vm, context[19], context[20], "  context[", 10);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::alloc_chars(vm, context[24], context[25], "] = refalrts::ident_", 20);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "( identifiers[ident_", 20);
    refalrts::alloc_chars(vm, context[31], context[32], "], context[", 11);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[42], 1UL);
    refalrts::copy_stvar(vm, context[43], context[11]);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::alloc_chars(vm, context[46], context[47], "] )", 3);
    refalrts::alloc_chars(vm, context[48], context[49], "f( ! context[", 13);
    refalrts::alloc_open_call(vm, context[50]);
    refalrts::alloc_name(vm, context[51], functions[efunc_Symb]);
    refalrts::copy_stvar(vm, context[52], context[9]);
    refalrts::alloc_close_call(vm, context[53]);
    refalrts::alloc_chars(vm, context[54], context[55], "] )", 3);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::alloc_chars(vm, context[58], context[59], "    return refalrts::cRecognitionImpossible;", 44);
    refalrts::reinit_char(context[0], ';');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[57], context[1] );
    refalrts::link_brackets( context[7], context[56] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[50] );
    refalrts::link_brackets( context[18], context[4] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[48], context[59] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[35], context[47] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[23], context[27] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[18], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatchSave@4/4 (/7 e.Indent0/12 )/8 s.Offset0/9 s.Direction0/10 s.BracketNumber0/11 e.Call/14 >/1
    context[12] = context[5];
    context[13] = context[6];
    context[14] = context[2];
    context[15] = context[3];
    // closed e.Indent0 as range 12
    // closed e.Call as range 14
    //DEBUG: s.Offset0: 9
    //DEBUG: s.Direction0: 10
    //DEBUG: s.BracketNumber0: 11
    //DEBUG: e.Indent0: 12
    //DEBUG: e.Call: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/16 e.Indent0/12/17"context["/19 </21 & Symb/22 Tile{ AsIs: s.Offset0/9 } >/23"] = refalrts::ident_"/24 </26 & StrFromDirection*2/27 Tile{ AsIs: s.Direction0/10 } >/28"( identifiers[ident_"/29 Tile{ AsIs: e.Call/14 }"], context["/31 </33 & Symb/34 Tile{ AsIs: s.BracketNumber0/11 } >/35"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.BracketNumber0/11/43 >/44 >/45"] )"/46 Tile{ HalfReuse: ';'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/12 HalfReuse: 'i'/8 }"f( ! context["/48 </50 & Symb/51 s.Offset0/9/52 >/53"] )"/54 )/56 (/57 e.Indent0/12/58"  continue;"/60 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[16]);
    refalrts::copy_evar(vm, context[17], context[18], context[12], context[13]);
    refalrts::alloc_chars(vm, context[19], context[20], "context[", 8);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::alloc_chars(vm, context[24], context[25], "] = refalrts::ident_", 20);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "( identifiers[ident_", 20);
    refalrts::alloc_chars(vm, context[31], context[32], "], context[", 11);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[42], 1UL);
    refalrts::copy_stvar(vm, context[43], context[11]);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::alloc_chars(vm, context[46], context[47], "] )", 3);
    refalrts::alloc_chars(vm, context[48], context[49], "f( ! context[", 13);
    refalrts::alloc_open_call(vm, context[50]);
    refalrts::alloc_name(vm, context[51], functions[efunc_Symb]);
    refalrts::copy_stvar(vm, context[52], context[9]);
    refalrts::alloc_close_call(vm, context[53]);
    refalrts::alloc_chars(vm, context[54], context[55], "] )", 3);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::copy_evar(vm, context[58], context[59], context[12], context[13]);
    refalrts::alloc_chars(vm, context[60], context[61], "  continue;", 11);
    refalrts::reinit_char(context[0], ';');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], 'i');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[57], context[1] );
    refalrts::link_brackets( context[7], context[56] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[50] );
    refalrts::link_brackets( context[16], context[4] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[48], context[61] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[35], context[47] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[23], context[27] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[16], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintMatchSave@4/4 (/7 e.Indent0/5 )/8 s.Offset0/9 s.Direction0/10 s.BracketNumber0/11 e.Call/2 >/1
  // closed e.Indent0 as range 5
  // closed e.Call as range 2
  //DEBUG: s.Offset0: 9
  //DEBUG: s.Direction0: 10
  //DEBUG: s.BracketNumber0: 11
  //DEBUG: e.Indent0: 5
  //DEBUG: e.Call: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatchSave@0/4 AsIs: (/7 AsIs: e.Indent0/5 AsIs: )/8 AsIs: s.Offset0/9 AsIs: s.Direction0/10 AsIs: s.BracketNumber0/11 } (/12"ident"/13 )/15"identifiers[ident_"/16 Tile{ AsIs: e.Call/2 } ']'/18 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_chars(vm, context[13], context[14], "ident", 5);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_chars(vm, context[16], context[17], "identifiers[ident_", 18);
  refalrts::alloc_char(vm, context[18], ']');
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatchSave_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[12], context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrintMatchSave_Z4("PrintMatchSave@4", COOKIE1_, COOKIE2_, func_gen_PrintMatchSave_Z4);


static refalrts::FnResult func_gen_PrintMatch_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  // </0 & PrintMatch@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrintMatch@5/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 (/13 e.new4/11 )/14 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new4 as range 11
  // closed e.new5 as range 2
  do {
    // </0 & PrintMatch@5/4 (/7 e.new8/15 )/8 # AlgTerm/9 s.new6/10 (/13 e.new9/17 )/14 e.new7/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[9] ) )
      continue;
    // closed e.new8 as range 15
    // closed e.new9 as range 17
    // closed e.new7 as range 19
    do {
      // </0 & PrintMatch@5/4 (/7 ' '/27 ' '/28 )/8 # AlgTerm/9 s.BracketNumber0/10 (/13 e.Call/23 )/14 e.Call0/25 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[27] )
        continue;
      context[28] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[28] )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.Call as range 23
      // closed e.Call0 as range 25
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 23
      //DEBUG: e.Call0: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/29"  if( ! refalrts::brackets_term( context["/30 Tile{ AsIs: e.Call/23 }"], context"/32 Tile{ HalfReuse: '['/14 AsIs: e.Call0/25 HalfReuse: ']'/1 }", con"/34 Tile{ HalfReuse: 't'/0 HalfReuse: 'e'/4 HalfReuse: 'x'/7 Reuse: 't'/27 Reuse: '['/28 HalfReuse: </8 HalfReuse: & Symb/9 AsIs: s.BracketNumber0/10 HalfReuse: >/13 }"] ) )"/36 )/38 (/39"    return refalrts::cRecognitionImpossible;"/40 )/42 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_chars(vm, context[30], context[31], "  if( ! refalrts::brackets_term( context[", 41);
      refalrts::alloc_chars(vm, context[32], context[33], "], context", 10);
      refalrts::alloc_chars(vm, context[34], context[35], ", con", 5);
      refalrts::alloc_chars(vm, context[36], context[37], "] ) )", 5);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_chars(vm, context[40], context[41], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::reinit_char(context[14], '[');
      refalrts::reinit_char(context[1], ']');
      refalrts::reinit_char(context[0], 't');
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_char(context[7], 'x');
      refalrts::update_char(context[27], 't');
      refalrts::update_char(context[28], '[');
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[9], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[13]);
      refalrts::link_brackets( context[39], context[42] );
      refalrts::link_brackets( context[29], context[38] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[36], context[42] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[14], context[1] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@5/4 (/7 e.Indent0/21 )/8 # AlgTerm/9 s.BracketNumber0/10 (/13 e.Call/23 )/14 e.Call0/25 >/1
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    // closed e.Indent0 as range 21
    // closed e.Call as range 23
    // closed e.Call0 as range 25
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 21
    //DEBUG: e.Call: 23
    //DEBUG: e.Call0: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/27 e.Indent0/21/28"if( ! refalrts::brackets_term( context"/30 Tile{ HalfReuse: '['/13 AsIs: e.Call/23 HalfReuse: ']'/14 }", context["/32 Tile{ AsIs: e.Call0/25 }"], context["/34 </36 & Symb/37 Tile{ AsIs: s.BracketNumber0/10 } >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/21 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/41 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::copy_evar(vm, context[28], context[29], context[21], context[22]);
    refalrts::alloc_chars(vm, context[30], context[31], "if( ! refalrts::brackets_term( context", 38);
    refalrts::alloc_chars(vm, context[32], context[33], ", context[", 10);
    refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
    refalrts::alloc_chars(vm, context[41], context[42], "continue;", 9);
    refalrts::reinit_char(context[13], '[');
    refalrts::reinit_char(context[14], ']');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[27], context[4] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[36] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[38], context[40] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[34], context[37] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[27], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@5/4 (/7 e.new8/15 )/8 # AlgLeft/9 s.new6/10 (/13 e.new9/17 )/14 e.new7/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[9] ) )
      continue;
    // closed e.new8 as range 15
    // closed e.new9 as range 17
    // closed e.new7 as range 19
    do {
      // </0 & PrintMatch@5/4 (/7 ' '/27 ' '/28 )/8 # AlgLeft/9 s.BracketNumber0/10 (/13 e.Call/23 )/14 e.Call0/25 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[27] )
        continue;
      context[28] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[28] )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.Call as range 23
      // closed e.Call0 as range 25
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 23
      //DEBUG: e.Call0: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/29"  if( ! refalrts::brackets_left( context["/30 Tile{ AsIs: e.Call/23 }"], context"/32 Tile{ HalfReuse: '['/14 AsIs: e.Call0/25 HalfReuse: ']'/1 }", con"/34 Tile{ HalfReuse: 't'/0 HalfReuse: 'e'/4 HalfReuse: 'x'/7 Reuse: 't'/27 Reuse: '['/28 HalfReuse: </8 HalfReuse: & Symb/9 AsIs: s.BracketNumber0/10 HalfReuse: >/13 }"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.BracketNumber0/10/43 >/44 >/45"] ) )"/46 )/48 (/49"    return refalrts::cRecognitionImpossible;"/50 )/52 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_chars(vm, context[30], context[31], "  if( ! refalrts::brackets_left( context[", 41);
      refalrts::alloc_chars(vm, context[32], context[33], "], context", 10);
      refalrts::alloc_chars(vm, context[34], context[35], ", con", 5);
      refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[42], 1UL);
      refalrts::copy_stvar(vm, context[43], context[10]);
      refalrts::alloc_close_call(vm, context[44]);
      refalrts::alloc_close_call(vm, context[45]);
      refalrts::alloc_chars(vm, context[46], context[47], "] ) )", 5);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::alloc_chars(vm, context[50], context[51], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::reinit_char(context[14], '[');
      refalrts::reinit_char(context[1], ']');
      refalrts::reinit_char(context[0], 't');
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_char(context[7], 'x');
      refalrts::update_char(context[27], 't');
      refalrts::update_char(context[28], '[');
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[9], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[13]);
      refalrts::link_brackets( context[49], context[52] );
      refalrts::link_brackets( context[29], context[48] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[36], context[52] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[14], context[1] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@5/4 (/7 e.Indent0/21 )/8 # AlgLeft/9 s.BracketNumber0/10 (/13 e.Call/23 )/14 e.Call0/25 >/1
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    // closed e.Indent0 as range 21
    // closed e.Call as range 23
    // closed e.Call0 as range 25
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 21
    //DEBUG: e.Call: 23
    //DEBUG: e.Call0: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/27 e.Indent0/21/28"if( ! refalrts::brackets_left( context"/30 Tile{ HalfReuse: '['/13 AsIs: e.Call/23 HalfReuse: ']'/14 }", context["/32 Tile{ AsIs: e.Call0/25 }"], context["/34 </36 & Symb/37 Tile{ AsIs: s.BracketNumber0/10 } >/38"], context["/39 </41 & Symb/42 </43 & Add/44 1/45 s.BracketNumber0/10/46 >/47 >/48"] ) "/49 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/21 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/51 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::copy_evar(vm, context[28], context[29], context[21], context[22]);
    refalrts::alloc_chars(vm, context[30], context[31], "if( ! refalrts::brackets_left( context", 38);
    refalrts::alloc_chars(vm, context[32], context[33], ", context[", 10);
    refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "], context[", 11);
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_name(vm, context[42], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[43]);
    refalrts::alloc_name(vm, context[44], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[45], 1UL);
    refalrts::copy_stvar(vm, context[46], context[10]);
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::alloc_close_call(vm, context[48]);
    refalrts::alloc_chars(vm, context[49], context[50], "] ) ", 4);
    refalrts::alloc_chars(vm, context[51], context[52], "continue;", 9);
    refalrts::reinit_char(context[13], '[');
    refalrts::reinit_char(context[14], ']');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[27], context[4] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[36] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[38], context[50] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[34], context[37] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[27], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@5/4 (/7 e.new8/15 )/8 # AlgRight/9 s.new6/10 (/13 e.new9/17 )/14 e.new7/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[9] ) )
      continue;
    // closed e.new8 as range 15
    // closed e.new9 as range 17
    // closed e.new7 as range 19
    do {
      // </0 & PrintMatch@5/4 (/7 ' '/27 ' '/28 )/8 # AlgRight/9 s.BracketNumber0/10 (/13 e.Call/23 )/14 e.Call0/25 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[27] )
        continue;
      context[28] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[28] )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.Call as range 23
      // closed e.Call0 as range 25
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 23
      //DEBUG: e.Call0: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/29"  if( ! refalrts::brackets_right( context["/30 Tile{ AsIs: e.Call/23 }"], context"/32 Tile{ HalfReuse: '['/14 AsIs: e.Call0/25 HalfReuse: ']'/1 }", con"/34 Tile{ HalfReuse: 't'/0 HalfReuse: 'e'/4 HalfReuse: 'x'/7 Reuse: 't'/27 Reuse: '['/28 HalfReuse: </8 HalfReuse: & Symb/9 AsIs: s.BracketNumber0/10 HalfReuse: >/13 }"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.BracketNumber0/10/43 >/44 >/45"] ) )"/46 )/48 (/49"    return refalrts::cRecognitionImpossible;"/50 )/52 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_chars(vm, context[30], context[31], "  if( ! refalrts::brackets_right( context[", 42);
      refalrts::alloc_chars(vm, context[32], context[33], "], context", 10);
      refalrts::alloc_chars(vm, context[34], context[35], ", con", 5);
      refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[42], 1UL);
      refalrts::copy_stvar(vm, context[43], context[10]);
      refalrts::alloc_close_call(vm, context[44]);
      refalrts::alloc_close_call(vm, context[45]);
      refalrts::alloc_chars(vm, context[46], context[47], "] ) )", 5);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::alloc_chars(vm, context[50], context[51], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::reinit_char(context[14], '[');
      refalrts::reinit_char(context[1], ']');
      refalrts::reinit_char(context[0], 't');
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_char(context[7], 'x');
      refalrts::update_char(context[27], 't');
      refalrts::update_char(context[28], '[');
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[9], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[13]);
      refalrts::link_brackets( context[49], context[52] );
      refalrts::link_brackets( context[29], context[48] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[36], context[52] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[14], context[1] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@5/4 (/7 e.Indent0/21 )/8 # AlgRight/9 s.BracketNumber0/10 (/13 e.Call/23 )/14 e.Call0/25 >/1
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    // closed e.Indent0 as range 21
    // closed e.Call as range 23
    // closed e.Call0 as range 25
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 21
    //DEBUG: e.Call: 23
    //DEBUG: e.Call0: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/27 e.Indent0/21/28"if( ! refalrts::brackets_right( context"/30 Tile{ HalfReuse: '['/13 AsIs: e.Call/23 HalfReuse: ']'/14 }", context["/32 Tile{ AsIs: e.Call0/25 }"], context["/34 </36 & Symb/37 Tile{ AsIs: s.BracketNumber0/10 } >/38"], context["/39 </41 & Symb/42 </43 & Add/44 1/45 s.BracketNumber0/10/46 >/47 >/48"] ) "/49 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/21 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/51 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::copy_evar(vm, context[28], context[29], context[21], context[22]);
    refalrts::alloc_chars(vm, context[30], context[31], "if( ! refalrts::brackets_right( context", 39);
    refalrts::alloc_chars(vm, context[32], context[33], ", context[", 10);
    refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "], context[", 11);
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_name(vm, context[42], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[43]);
    refalrts::alloc_name(vm, context[44], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[45], 1UL);
    refalrts::copy_stvar(vm, context[46], context[10]);
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::alloc_close_call(vm, context[48]);
    refalrts::alloc_chars(vm, context[49], context[50], "] ) ", 4);
    refalrts::alloc_chars(vm, context[51], context[52], "continue;", 9);
    refalrts::reinit_char(context[13], '[');
    refalrts::reinit_char(context[14], ']');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[27], context[4] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[36] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[38], context[50] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[34], context[37] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[27], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@5/4 (/7 ' '/21 ' '/22 )/8 s.Direction/9 s.BracketNumber0/10 (/13 e.Call/17 )/14 e.Call0/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    context[21] = refalrts::char_left( ' ', context[15], context[16] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( ' ', context[15], context[16] );
    if( ! context[22] )
      continue;
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    // closed e.Call as range 17
    // closed e.Call0 as range 19
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Call: 17
    //DEBUG: e.Call0: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/23"  if( ! refalrts::brackets_"/24 </26 & StrFromDirection*2/27 Tile{ AsIs: s.Direction/9 } >/28"( context"/29 Tile{ HalfReuse: '['/13 AsIs: e.Call/17 HalfReuse: ']'/14 }", context["/31 Tile{ AsIs: e.Call0/19 }"], context["/33 </35 & Symb/36 Tile{ AsIs: s.BracketNumber0/10 } >/37"], context["/38 </40 & Symb/41 </42 & Add/43 1/44 s.BracketNumber0/10/45 >/46 >/47"] ) "/48 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/21 AsIs: ' '/22 HalfReuse: ' '/8 }" return refalrts::cRecognitionImpossible;"/50 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_chars(vm, context[24], context[25], "  if( ! refalrts::brackets_", 27);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "( context", 9);
    refalrts::alloc_chars(vm, context[31], context[32], ", context[", 10);
    refalrts::alloc_chars(vm, context[33], context[34], "], context[", 11);
    refalrts::alloc_open_call(vm, context[35]);
    refalrts::alloc_name(vm, context[36], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_chars(vm, context[38], context[39], "], context[", 11);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[42]);
    refalrts::alloc_name(vm, context[43], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[44], 1UL);
    refalrts::copy_stvar(vm, context[45], context[10]);
    refalrts::alloc_close_call(vm, context[46]);
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::alloc_chars(vm, context[48], context[49], "] ) ", 4);
    refalrts::alloc_chars(vm, context[50], context[51], " return refalrts::cRecognitionImpossible;", 41);
    refalrts::reinit_char(context[13], '[');
    refalrts::reinit_char(context[14], ']');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[23], context[4] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[37], context[49] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[33], context[36] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[23], context[27] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@5/4 (/7 e.Indent0/15 )/8 s.Direction/9 s.BracketNumber0/10 (/13 e.Call/17 )/14 e.Call0/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.Indent0 as range 15
    // closed e.Call as range 17
    // closed e.Call0 as range 19
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 15
    //DEBUG: e.Call: 17
    //DEBUG: e.Call0: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/21 e.Indent0/15/22"if( ! refalrts::brackets_"/24 </26 & StrFromDirection*2/27 Tile{ AsIs: s.Direction/9 } >/28"( context"/29 Tile{ HalfReuse: '['/13 AsIs: e.Call/17 HalfReuse: ']'/14 }", context["/31 Tile{ AsIs: e.Call0/19 }"], context["/33 </35 & Symb/36 Tile{ AsIs: s.BracketNumber0/10 } >/37"], context["/38 </40 & Symb/41 </42 & Add/43 1/44 s.BracketNumber0/10/45 >/46 >/47"] ) "/48 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/15 HalfReuse: ' '/8 }" continue;"/50 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::copy_evar(vm, context[22], context[23], context[15], context[16]);
    refalrts::alloc_chars(vm, context[24], context[25], "if( ! refalrts::brackets_", 25);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "( context", 9);
    refalrts::alloc_chars(vm, context[31], context[32], ", context[", 10);
    refalrts::alloc_chars(vm, context[33], context[34], "], context[", 11);
    refalrts::alloc_open_call(vm, context[35]);
    refalrts::alloc_name(vm, context[36], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_chars(vm, context[38], context[39], "], context[", 11);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[42]);
    refalrts::alloc_name(vm, context[43], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[44], 1UL);
    refalrts::copy_stvar(vm, context[45], context[10]);
    refalrts::alloc_close_call(vm, context[46]);
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::alloc_chars(vm, context[48], context[49], "] ) ", 4);
    refalrts::alloc_chars(vm, context[50], context[51], " continue;", 10);
    refalrts::reinit_char(context[13], '[');
    refalrts::reinit_char(context[14], ']');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[21], context[4] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[37], context[49] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[33], context[36] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[21], context[27] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintMatch@5/4 (/7 e.Indent0/5 )/8 s.dyn0/9 s.BracketNumber0/10 (/13 e.Call/11 )/14 e.Call0/2 >/1
  // closed e.Indent0 as range 5
  // closed e.Call as range 11
  // closed e.Call0 as range 2
  //DEBUG: s.dyn0: 9
  //DEBUG: s.BracketNumber0: 10
  //DEBUG: e.Indent0: 5
  //DEBUG: e.Call: 11
  //DEBUG: e.Call0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch@0/4 AsIs: (/7 AsIs: e.Indent0/5 AsIs: )/8 AsIs: s.dyn0/9 AsIs: s.BracketNumber0/10 AsIs: (/13 }"brackets"/15 Tile{ AsIs: )/14 }"context["/17 Tile{ AsIs: e.Call/11 }"], context["/19 Tile{ AsIs: e.Call0/2 } ']'/21 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_chars(vm, context[15], context[16], "brackets", 8);
  refalrts::alloc_chars(vm, context[17], context[18], "context[", 8);
  refalrts::alloc_chars(vm, context[19], context[20], "], context[", 11);
  refalrts::alloc_char(vm, context[21], ']');
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrintMatch_Z5("PrintMatch@5", COOKIE1_, COOKIE2_, func_gen_PrintMatch_Z5);


static refalrts::FnResult func_gen_PrintMatch_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 64 elems
  refalrts::Iter context[64];
  refalrts::zeros( context, 64 );
  // </0 & PrintMatch@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrintMatch@6/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 (/13 e.new4/11 )/14 (/17 e.new5/15 )/18 e.new6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new4 as range 11
  // closed e.new5 as range 15
  // closed e.new6 as range 2
  do {
    // </0 & PrintMatch@6/4 (/7 e.new9/19 )/8 # AlgTerm/9 s.new7/10 (/13 e.new10/21 )/14 (/17 e.new11/23 )/18 e.new8/25 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[2];
    context[26] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[9] ) )
      continue;
    // closed e.new9 as range 19
    // closed e.new10 as range 21
    // closed e.new11 as range 23
    // closed e.new8 as range 25
    do {
      // </0 & PrintMatch@6/4 (/7 ' '/35 ' '/36 )/8 # AlgTerm/9 s.BracketNumber0/10 (/13 e.Call/29 )/14 (/17 e.Call0/31 )/18 e.Call1/33 >/1
      context[27] = context[19];
      context[28] = context[20];
      context[29] = context[21];
      context[30] = context[22];
      context[31] = context[23];
      context[32] = context[24];
      context[33] = context[25];
      context[34] = context[26];
      context[35] = refalrts::char_left( ' ', context[27], context[28] );
      if( ! context[35] )
        continue;
      context[36] = refalrts::char_left( ' ', context[27], context[28] );
      if( ! context[36] )
        continue;
      if( ! refalrts::empty_seq( context[27], context[28] ) )
        continue;
      // closed e.Call as range 29
      // closed e.Call0 as range 31
      // closed e.Call1 as range 33
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 29
      //DEBUG: e.Call0: 31
      //DEBUG: e.Call1: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/37"  if( ! refalrts::adt_term( context["/38 Tile{ AsIs: e.Call/29 }"], contex"/40 Tile{ HalfReuse: 't'/14 HalfReuse: '['/17 AsIs: e.Call0/31 HalfReuse: ']'/18 }", functions[efunc_"/42 Tile{ AsIs: e.Call1/33 }"], con"/44 Tile{ HalfReuse: 't'/0 HalfReuse: 'e'/4 HalfReuse: 'x'/7 Reuse: 't'/35 Reuse: '['/36 HalfReuse: </8 HalfReuse: & Symb/9 AsIs: s.BracketNumber0/10 HalfReuse: >/13 }"] ) )"/46 )/48 (/49"    return refalrts::cRecognitionImpossible;"/50 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_chars(vm, context[38], context[39], "  if( ! refalrts::adt_term( context[", 36);
      refalrts::alloc_chars(vm, context[40], context[41], "], contex", 9);
      refalrts::alloc_chars(vm, context[42], context[43], ", functions[efunc_", 18);
      refalrts::alloc_chars(vm, context[44], context[45], "], con", 6);
      refalrts::alloc_chars(vm, context[46], context[47], "] ) )", 5);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::alloc_chars(vm, context[50], context[51], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::reinit_char(context[14], 't');
      refalrts::reinit_char(context[17], '[');
      refalrts::reinit_char(context[18], ']');
      refalrts::reinit_char(context[0], 't');
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_char(context[7], 'x');
      refalrts::update_char(context[35], 't');
      refalrts::update_char(context[36], '[');
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[9], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[13]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[49], context[1] );
      refalrts::link_brackets( context[37], context[48] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[46], context[51] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[14], context[18] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[37], context[39] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@6/4 (/7 e.Indent0/27 )/8 # AlgTerm/9 s.BracketNumber0/10 (/13 e.Call/29 )/14 (/17 e.Call0/31 )/18 e.Call1/33 >/1
    context[27] = context[19];
    context[28] = context[20];
    context[29] = context[21];
    context[30] = context[22];
    context[31] = context[23];
    context[32] = context[24];
    context[33] = context[25];
    context[34] = context[26];
    // closed e.Indent0 as range 27
    // closed e.Call as range 29
    // closed e.Call0 as range 31
    // closed e.Call1 as range 33
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 27
    //DEBUG: e.Call: 29
    //DEBUG: e.Call0: 31
    //DEBUG: e.Call1: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/35 e.Indent0/27/36"if( ! refalrts::adt_term( context"/38 Tile{ HalfReuse: '['/13 AsIs: e.Call/29 HalfReuse: ']'/14 HalfReuse: ','/17 }" context["/40 Tile{ AsIs: e.Call0/31 }"], functions[efunc"/42 Tile{ HalfReuse: '_'/18 AsIs: e.Call1/33 HalfReuse: ']'/1 }", context["/44 </46 & Symb/47 Tile{ AsIs: s.BracketNumber0/10 } >/48"] ) "/49 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/27 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/51 )/53 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[35]);
    refalrts::copy_evar(vm, context[36], context[37], context[27], context[28]);
    refalrts::alloc_chars(vm, context[38], context[39], "if( ! refalrts::adt_term( context", 33);
    refalrts::alloc_chars(vm, context[40], context[41], " context[", 9);
    refalrts::alloc_chars(vm, context[42], context[43], "], functions[efunc", 18);
    refalrts::alloc_chars(vm, context[44], context[45], ", context[", 10);
    refalrts::alloc_open_call(vm, context[46]);
    refalrts::alloc_name(vm, context[47], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[48]);
    refalrts::alloc_chars(vm, context[49], context[50], "] ) ", 4);
    refalrts::alloc_chars(vm, context[51], context[52], "continue;", 9);
    refalrts::alloc_close_bracket(vm, context[53]);
    refalrts::reinit_char(context[13], '[');
    refalrts::reinit_char(context[14], ']');
    refalrts::reinit_char(context[17], ',');
    refalrts::reinit_char(context[18], '_');
    refalrts::reinit_char(context[1], ']');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::link_brackets( context[7], context[53] );
    refalrts::link_brackets( context[35], context[4] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[46] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[51], context[53] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[48], context[50] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[44], context[47] );
    res = refalrts::splice_evar( res, context[18], context[1] );
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    res = refalrts::splice_evar( res, context[35], context[39] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@6/4 (/7 e.new9/19 )/8 # AlgLeft/9 s.new7/10 (/13 e.new10/21 )/14 (/17 e.new11/23 )/18 e.new8/25 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[2];
    context[26] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[9] ) )
      continue;
    // closed e.new9 as range 19
    // closed e.new10 as range 21
    // closed e.new11 as range 23
    // closed e.new8 as range 25
    do {
      // </0 & PrintMatch@6/4 (/7 ' '/35 ' '/36 )/8 # AlgLeft/9 s.BracketNumber0/10 (/13 e.Call/29 )/14 (/17 e.Call0/31 )/18 e.Call1/33 >/1
      context[27] = context[19];
      context[28] = context[20];
      context[29] = context[21];
      context[30] = context[22];
      context[31] = context[23];
      context[32] = context[24];
      context[33] = context[25];
      context[34] = context[26];
      context[35] = refalrts::char_left( ' ', context[27], context[28] );
      if( ! context[35] )
        continue;
      context[36] = refalrts::char_left( ' ', context[27], context[28] );
      if( ! context[36] )
        continue;
      if( ! refalrts::empty_seq( context[27], context[28] ) )
        continue;
      // closed e.Call as range 29
      // closed e.Call0 as range 31
      // closed e.Call1 as range 33
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 29
      //DEBUG: e.Call0: 31
      //DEBUG: e.Call1: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/37"  if( ! refalrts::adt_left( context["/38 Tile{ AsIs: e.Call/29 }"], contex"/40 Tile{ HalfReuse: 't'/14 HalfReuse: '['/17 AsIs: e.Call0/31 HalfReuse: ']'/18 }", functions[efunc_"/42 Tile{ AsIs: e.Call1/33 }"], con"/44 Tile{ HalfReuse: 't'/0 HalfReuse: 'e'/4 HalfReuse: 'x'/7 Reuse: 't'/35 Reuse: '['/36 HalfReuse: </8 HalfReuse: & Symb/9 AsIs: s.BracketNumber0/10 HalfReuse: >/13 }"], context["/46 </48 & Symb/49 </50 & Add/51 1/52 s.BracketNumber0/10/53 >/54 >/55"] ) )"/56 )/58 (/59"    return refalrts::cRecognitionImpossible;"/60 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_chars(vm, context[38], context[39], "  if( ! refalrts::adt_left( context[", 36);
      refalrts::alloc_chars(vm, context[40], context[41], "], contex", 9);
      refalrts::alloc_chars(vm, context[42], context[43], ", functions[efunc_", 18);
      refalrts::alloc_chars(vm, context[44], context[45], "], con", 6);
      refalrts::alloc_chars(vm, context[46], context[47], "], context[", 11);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[49], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[52], 1UL);
      refalrts::copy_stvar(vm, context[53], context[10]);
      refalrts::alloc_close_call(vm, context[54]);
      refalrts::alloc_close_call(vm, context[55]);
      refalrts::alloc_chars(vm, context[56], context[57], "] ) )", 5);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_open_bracket(vm, context[59]);
      refalrts::alloc_chars(vm, context[60], context[61], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::reinit_char(context[14], 't');
      refalrts::reinit_char(context[17], '[');
      refalrts::reinit_char(context[18], ']');
      refalrts::reinit_char(context[0], 't');
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_char(context[7], 'x');
      refalrts::update_char(context[35], 't');
      refalrts::update_char(context[36], '[');
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[9], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[13]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[59], context[1] );
      refalrts::link_brackets( context[37], context[58] );
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[54] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[46], context[61] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[14], context[18] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[37], context[39] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@6/4 (/7 e.Indent0/27 )/8 # AlgLeft/9 s.BracketNumber0/10 (/13 e.Call/29 )/14 (/17 e.Call0/31 )/18 e.Call1/33 >/1
    context[27] = context[19];
    context[28] = context[20];
    context[29] = context[21];
    context[30] = context[22];
    context[31] = context[23];
    context[32] = context[24];
    context[33] = context[25];
    context[34] = context[26];
    // closed e.Indent0 as range 27
    // closed e.Call as range 29
    // closed e.Call0 as range 31
    // closed e.Call1 as range 33
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 27
    //DEBUG: e.Call: 29
    //DEBUG: e.Call0: 31
    //DEBUG: e.Call1: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/35 e.Indent0/27/36"if( ! refalrts::adt_left( context"/38 Tile{ HalfReuse: '['/13 AsIs: e.Call/29 HalfReuse: ']'/14 HalfReuse: ','/17 }" context["/40 Tile{ AsIs: e.Call0/31 }"], functions[efunc"/42 Tile{ HalfReuse: '_'/18 AsIs: e.Call1/33 HalfReuse: ']'/1 }", context["/44 </46 & Symb/47 Tile{ AsIs: s.BracketNumber0/10 } >/48"], context["/49 </51 & Symb/52 </53 & Add/54 1/55 s.BracketNumber0/10/56 >/57 >/58"] ) "/59 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/27 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/61 )/63 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[35]);
    refalrts::copy_evar(vm, context[36], context[37], context[27], context[28]);
    refalrts::alloc_chars(vm, context[38], context[39], "if( ! refalrts::adt_left( context", 33);
    refalrts::alloc_chars(vm, context[40], context[41], " context[", 9);
    refalrts::alloc_chars(vm, context[42], context[43], "], functions[efunc", 18);
    refalrts::alloc_chars(vm, context[44], context[45], ", context[", 10);
    refalrts::alloc_open_call(vm, context[46]);
    refalrts::alloc_name(vm, context[47], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[48]);
    refalrts::alloc_chars(vm, context[49], context[50], "], context[", 11);
    refalrts::alloc_open_call(vm, context[51]);
    refalrts::alloc_name(vm, context[52], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[53]);
    refalrts::alloc_name(vm, context[54], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[55], 1UL);
    refalrts::copy_stvar(vm, context[56], context[10]);
    refalrts::alloc_close_call(vm, context[57]);
    refalrts::alloc_close_call(vm, context[58]);
    refalrts::alloc_chars(vm, context[59], context[60], "] ) ", 4);
    refalrts::alloc_chars(vm, context[61], context[62], "continue;", 9);
    refalrts::alloc_close_bracket(vm, context[63]);
    refalrts::reinit_char(context[13], '[');
    refalrts::reinit_char(context[14], ']');
    refalrts::reinit_char(context[17], ',');
    refalrts::reinit_char(context[18], '_');
    refalrts::reinit_char(context[1], ']');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::link_brackets( context[7], context[63] );
    refalrts::link_brackets( context[35], context[4] );
    refalrts::push_stack( vm, context[58] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[57] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[46] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[61], context[63] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[48], context[60] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[44], context[47] );
    res = refalrts::splice_evar( res, context[18], context[1] );
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    res = refalrts::splice_evar( res, context[35], context[39] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@6/4 (/7 e.new9/19 )/8 # AlgRight/9 s.new7/10 (/13 e.new10/21 )/14 (/17 e.new11/23 )/18 e.new8/25 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[2];
    context[26] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[9] ) )
      continue;
    // closed e.new9 as range 19
    // closed e.new10 as range 21
    // closed e.new11 as range 23
    // closed e.new8 as range 25
    do {
      // </0 & PrintMatch@6/4 (/7 ' '/35 ' '/36 )/8 # AlgRight/9 s.BracketNumber0/10 (/13 e.Call/29 )/14 (/17 e.Call0/31 )/18 e.Call1/33 >/1
      context[27] = context[19];
      context[28] = context[20];
      context[29] = context[21];
      context[30] = context[22];
      context[31] = context[23];
      context[32] = context[24];
      context[33] = context[25];
      context[34] = context[26];
      context[35] = refalrts::char_left( ' ', context[27], context[28] );
      if( ! context[35] )
        continue;
      context[36] = refalrts::char_left( ' ', context[27], context[28] );
      if( ! context[36] )
        continue;
      if( ! refalrts::empty_seq( context[27], context[28] ) )
        continue;
      // closed e.Call as range 29
      // closed e.Call0 as range 31
      // closed e.Call1 as range 33
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 29
      //DEBUG: e.Call0: 31
      //DEBUG: e.Call1: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/37"  if( ! refalrts::adt_right( context["/38 Tile{ AsIs: e.Call/29 }"], contex"/40 Tile{ HalfReuse: 't'/14 HalfReuse: '['/17 AsIs: e.Call0/31 HalfReuse: ']'/18 }", functions[efunc_"/42 Tile{ AsIs: e.Call1/33 }"], con"/44 Tile{ HalfReuse: 't'/0 HalfReuse: 'e'/4 HalfReuse: 'x'/7 Reuse: 't'/35 Reuse: '['/36 HalfReuse: </8 HalfReuse: & Symb/9 AsIs: s.BracketNumber0/10 HalfReuse: >/13 }"], context["/46 </48 & Symb/49 </50 & Add/51 1/52 s.BracketNumber0/10/53 >/54 >/55"] ) )"/56 )/58 (/59"    return refalrts::cRecognitionImpossible;"/60 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_chars(vm, context[38], context[39], "  if( ! refalrts::adt_right( context[", 37);
      refalrts::alloc_chars(vm, context[40], context[41], "], contex", 9);
      refalrts::alloc_chars(vm, context[42], context[43], ", functions[efunc_", 18);
      refalrts::alloc_chars(vm, context[44], context[45], "], con", 6);
      refalrts::alloc_chars(vm, context[46], context[47], "], context[", 11);
      refalrts::alloc_open_call(vm, context[48]);
      refalrts::alloc_name(vm, context[49], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[52], 1UL);
      refalrts::copy_stvar(vm, context[53], context[10]);
      refalrts::alloc_close_call(vm, context[54]);
      refalrts::alloc_close_call(vm, context[55]);
      refalrts::alloc_chars(vm, context[56], context[57], "] ) )", 5);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_open_bracket(vm, context[59]);
      refalrts::alloc_chars(vm, context[60], context[61], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::reinit_char(context[14], 't');
      refalrts::reinit_char(context[17], '[');
      refalrts::reinit_char(context[18], ']');
      refalrts::reinit_char(context[0], 't');
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_char(context[7], 'x');
      refalrts::update_char(context[35], 't');
      refalrts::update_char(context[36], '[');
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[9], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[13]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[59], context[1] );
      refalrts::link_brackets( context[37], context[58] );
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[54] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[46], context[61] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[14], context[18] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[37], context[39] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@6/4 (/7 e.Indent0/27 )/8 # AlgRight/9 s.BracketNumber0/10 (/13 e.Call/29 )/14 (/17 e.Call0/31 )/18 e.Call1/33 >/1
    context[27] = context[19];
    context[28] = context[20];
    context[29] = context[21];
    context[30] = context[22];
    context[31] = context[23];
    context[32] = context[24];
    context[33] = context[25];
    context[34] = context[26];
    // closed e.Indent0 as range 27
    // closed e.Call as range 29
    // closed e.Call0 as range 31
    // closed e.Call1 as range 33
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 27
    //DEBUG: e.Call: 29
    //DEBUG: e.Call0: 31
    //DEBUG: e.Call1: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/35 e.Indent0/27/36"if( ! refalrts::adt_right( context"/38 Tile{ HalfReuse: '['/13 AsIs: e.Call/29 HalfReuse: ']'/14 HalfReuse: ','/17 }" context["/40 Tile{ AsIs: e.Call0/31 }"], functions[efunc"/42 Tile{ HalfReuse: '_'/18 AsIs: e.Call1/33 HalfReuse: ']'/1 }", context["/44 </46 & Symb/47 Tile{ AsIs: s.BracketNumber0/10 } >/48"], context["/49 </51 & Symb/52 </53 & Add/54 1/55 s.BracketNumber0/10/56 >/57 >/58"] ) "/59 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/27 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/61 )/63 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[35]);
    refalrts::copy_evar(vm, context[36], context[37], context[27], context[28]);
    refalrts::alloc_chars(vm, context[38], context[39], "if( ! refalrts::adt_right( context", 34);
    refalrts::alloc_chars(vm, context[40], context[41], " context[", 9);
    refalrts::alloc_chars(vm, context[42], context[43], "], functions[efunc", 18);
    refalrts::alloc_chars(vm, context[44], context[45], ", context[", 10);
    refalrts::alloc_open_call(vm, context[46]);
    refalrts::alloc_name(vm, context[47], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[48]);
    refalrts::alloc_chars(vm, context[49], context[50], "], context[", 11);
    refalrts::alloc_open_call(vm, context[51]);
    refalrts::alloc_name(vm, context[52], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[53]);
    refalrts::alloc_name(vm, context[54], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[55], 1UL);
    refalrts::copy_stvar(vm, context[56], context[10]);
    refalrts::alloc_close_call(vm, context[57]);
    refalrts::alloc_close_call(vm, context[58]);
    refalrts::alloc_chars(vm, context[59], context[60], "] ) ", 4);
    refalrts::alloc_chars(vm, context[61], context[62], "continue;", 9);
    refalrts::alloc_close_bracket(vm, context[63]);
    refalrts::reinit_char(context[13], '[');
    refalrts::reinit_char(context[14], ']');
    refalrts::reinit_char(context[17], ',');
    refalrts::reinit_char(context[18], '_');
    refalrts::reinit_char(context[1], ']');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::link_brackets( context[7], context[63] );
    refalrts::link_brackets( context[35], context[4] );
    refalrts::push_stack( vm, context[58] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[57] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[46] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[61], context[63] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[48], context[60] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[44], context[47] );
    res = refalrts::splice_evar( res, context[18], context[1] );
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    res = refalrts::splice_evar( res, context[35], context[39] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@6/4 (/7 ' '/27 ' '/28 )/8 s.Direction/9 s.BracketNumber0/10 (/13 e.Call/21 )/14 (/17 e.Call0/23 )/18 e.Call1/25 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[2];
    context[26] = context[3];
    context[27] = refalrts::char_left( ' ', context[19], context[20] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( ' ', context[19], context[20] );
    if( ! context[28] )
      continue;
    if( ! refalrts::empty_seq( context[19], context[20] ) )
      continue;
    // closed e.Call as range 21
    // closed e.Call0 as range 23
    // closed e.Call1 as range 25
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Call: 21
    //DEBUG: e.Call0: 23
    //DEBUG: e.Call1: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/29"  if( ! refalrts::adt_"/30 </32 & StrFromDirection*2/33 Tile{ AsIs: s.Direction/9 } >/34"( context"/35 Tile{ HalfReuse: '['/13 AsIs: e.Call/21 HalfReuse: ']'/14 HalfReuse: ','/17 }" context["/37 Tile{ AsIs: e.Call0/23 }"], functions[efunc"/39 Tile{ HalfReuse: '_'/18 AsIs: e.Call1/25 HalfReuse: ']'/1 }", context["/41 </43 & Symb/44 Tile{ AsIs: s.BracketNumber0/10 } >/45"], context["/46 </48 & Symb/49 </50 & Add/51 1/52 s.BracketNumber0/10/53 >/54 >/55"] ) "/56 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/27 AsIs: ' '/28 HalfReuse: ' '/8 }" return refalrts::cRecognitionImpossible;"/58 )/60 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_chars(vm, context[30], context[31], "  if( ! refalrts::adt_", 22);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[34]);
    refalrts::alloc_chars(vm, context[35], context[36], "( context", 9);
    refalrts::alloc_chars(vm, context[37], context[38], " context[", 9);
    refalrts::alloc_chars(vm, context[39], context[40], "], functions[efunc", 18);
    refalrts::alloc_chars(vm, context[41], context[42], ", context[", 10);
    refalrts::alloc_open_call(vm, context[43]);
    refalrts::alloc_name(vm, context[44], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::alloc_chars(vm, context[46], context[47], "], context[", 11);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_name(vm, context[49], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[50]);
    refalrts::alloc_name(vm, context[51], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[52], 1UL);
    refalrts::copy_stvar(vm, context[53], context[10]);
    refalrts::alloc_close_call(vm, context[54]);
    refalrts::alloc_close_call(vm, context[55]);
    refalrts::alloc_chars(vm, context[56], context[57], "] ) ", 4);
    refalrts::alloc_chars(vm, context[58], context[59], " return refalrts::cRecognitionImpossible;", 41);
    refalrts::alloc_close_bracket(vm, context[60]);
    refalrts::reinit_char(context[13], '[');
    refalrts::reinit_char(context[14], ']');
    refalrts::reinit_char(context[17], ',');
    refalrts::reinit_char(context[18], '_');
    refalrts::reinit_char(context[1], ']');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::link_brackets( context[7], context[60] );
    refalrts::link_brackets( context[29], context[4] );
    refalrts::push_stack( vm, context[55] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[54] );
    refalrts::push_stack( vm, context[50] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[32] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[58], context[60] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[45], context[57] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[41], context[44] );
    res = refalrts::splice_evar( res, context[18], context[1] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    res = refalrts::splice_evar( res, context[34], context[36] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[29], context[33] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@6/4 (/7 e.Indent0/19 )/8 s.Direction/9 s.BracketNumber0/10 (/13 e.Call/21 )/14 (/17 e.Call0/23 )/18 e.Call1/25 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[2];
    context[26] = context[3];
    // closed e.Indent0 as range 19
    // closed e.Call as range 21
    // closed e.Call0 as range 23
    // closed e.Call1 as range 25
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 19
    //DEBUG: e.Call: 21
    //DEBUG: e.Call0: 23
    //DEBUG: e.Call1: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/27 e.Indent0/19/28"if( ! refalrts::adt_"/30 </32 & StrFromDirection*2/33 Tile{ AsIs: s.Direction/9 } >/34"( context"/35 Tile{ HalfReuse: '['/13 AsIs: e.Call/21 HalfReuse: ']'/14 HalfReuse: ','/17 }" context["/37 Tile{ AsIs: e.Call0/23 }"], functions[efunc"/39 Tile{ HalfReuse: '_'/18 AsIs: e.Call1/25 HalfReuse: ']'/1 }", context["/41 </43 & Symb/44 Tile{ AsIs: s.BracketNumber0/10 } >/45"], context["/46 </48 & Symb/49 </50 & Add/51 1/52 s.BracketNumber0/10/53 >/54 >/55"] ) "/56 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/19 HalfReuse: ' '/8 }" continue;"/58 )/60 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::copy_evar(vm, context[28], context[29], context[19], context[20]);
    refalrts::alloc_chars(vm, context[30], context[31], "if( ! refalrts::adt_", 20);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[34]);
    refalrts::alloc_chars(vm, context[35], context[36], "( context", 9);
    refalrts::alloc_chars(vm, context[37], context[38], " context[", 9);
    refalrts::alloc_chars(vm, context[39], context[40], "], functions[efunc", 18);
    refalrts::alloc_chars(vm, context[41], context[42], ", context[", 10);
    refalrts::alloc_open_call(vm, context[43]);
    refalrts::alloc_name(vm, context[44], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::alloc_chars(vm, context[46], context[47], "], context[", 11);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_name(vm, context[49], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[50]);
    refalrts::alloc_name(vm, context[51], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[52], 1UL);
    refalrts::copy_stvar(vm, context[53], context[10]);
    refalrts::alloc_close_call(vm, context[54]);
    refalrts::alloc_close_call(vm, context[55]);
    refalrts::alloc_chars(vm, context[56], context[57], "] ) ", 4);
    refalrts::alloc_chars(vm, context[58], context[59], " continue;", 10);
    refalrts::alloc_close_bracket(vm, context[60]);
    refalrts::reinit_char(context[13], '[');
    refalrts::reinit_char(context[14], ']');
    refalrts::reinit_char(context[17], ',');
    refalrts::reinit_char(context[18], '_');
    refalrts::reinit_char(context[1], ']');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::link_brackets( context[7], context[60] );
    refalrts::link_brackets( context[27], context[4] );
    refalrts::push_stack( vm, context[55] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[54] );
    refalrts::push_stack( vm, context[50] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[32] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[58], context[60] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[45], context[57] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[41], context[44] );
    res = refalrts::splice_evar( res, context[18], context[1] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    res = refalrts::splice_evar( res, context[34], context[36] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[27], context[33] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintMatch@6/4 (/7 e.Indent0/5 )/8 s.dyn0/9 s.BracketNumber0/10 (/13 e.Call/11 )/14 (/17 e.Call0/15 )/18 e.Call1/2 >/1
  // closed e.Indent0 as range 5
  // closed e.Call as range 11
  // closed e.Call0 as range 15
  // closed e.Call1 as range 2
  //DEBUG: s.dyn0: 9
  //DEBUG: s.BracketNumber0: 10
  //DEBUG: e.Indent0: 5
  //DEBUG: e.Call: 11
  //DEBUG: e.Call0: 15
  //DEBUG: e.Call1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch@0/4 AsIs: (/7 AsIs: e.Indent0/5 AsIs: )/8 AsIs: s.dyn0/9 AsIs: s.BracketNumber0/10 AsIs: (/13 }"adt"/19 )/21"context["/22 Tile{ AsIs: e.Call/11 }"], contex"/24 Tile{ HalfReuse: 't'/14 HalfReuse: '['/17 AsIs: e.Call0/15 HalfReuse: ']'/18 }", functions[efunc_"/26 Tile{ AsIs: e.Call1/2 } ']'/28 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_chars(vm, context[19], context[20], "adt", 3);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_chars(vm, context[22], context[23], "context[", 8);
  refalrts::alloc_chars(vm, context[24], context[25], "], contex", 9);
  refalrts::alloc_chars(vm, context[26], context[27], ", functions[efunc_", 18);
  refalrts::alloc_char(vm, context[28], ']');
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z0]);
  refalrts::reinit_char(context[14], 't');
  refalrts::reinit_char(context[17], '[');
  refalrts::reinit_char(context[18], ']');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[21] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_evar( res, context[14], context[18] );
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[19], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrintMatch_Z6("PrintMatch@6", COOKIE1_, COOKIE2_, func_gen_PrintMatch_Z6);


static refalrts::FnResult func_gen_PrintMatch_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & PrintMatch@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrintMatch@7/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & PrintMatch@7/4 (/7 e.new7/11 )/8 # AlgTerm/9 s.new5/10 e.new6/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[9] ) )
      continue;
    // closed e.new7 as range 11
    // closed e.new6 as range 13
    do {
      // </0 & PrintMatch@7/4 (/7 ' '/19 ' '/20 )/8 # AlgTerm/9 s.BracketNumber0/10 e.Call/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[19] )
        continue;
      context[20] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[20] )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.Call as range 17
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/21"  if( ! refalrts::svar_term( context["/22 Tile{ AsIs: e.Call/17 }"], context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"] ) "/29 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/19 AsIs: ' '/20 HalfReuse: ' '/8 HalfReuse: ' '/9 }"return refalrts::cRecognitionImpossible;"/31 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_chars(vm, context[22], context[23], "  if( ! refalrts::svar_term( context[", 37);
      refalrts::alloc_chars(vm, context[24], context[25], "], context[", 11);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "] ) ", 4);
      refalrts::alloc_chars(vm, context[31], context[32], "return refalrts::cRecognitionImpossible;", 40);
      refalrts::reinit_char(context[0], ')');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], ' ');
      refalrts::reinit_char(context[9], ' ');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[21], context[4] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[30] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[24], context[27] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@7/4 (/7 e.Indent0/15 )/8 # AlgTerm/9 s.BracketNumber0/10 e.Call/17 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    // closed e.Indent0 as range 15
    // closed e.Call as range 17
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 15
    //DEBUG: e.Call: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/19 e.Indent0/15/20"if( ! refalrts::svar_term( context["/22 Tile{ AsIs: e.Call/17 }"], context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"] ) "/29 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/15 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/31 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::copy_evar(vm, context[20], context[21], context[15], context[16]);
    refalrts::alloc_chars(vm, context[22], context[23], "if( ! refalrts::svar_term( context[", 35);
    refalrts::alloc_chars(vm, context[24], context[25], "], context[", 11);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "] ) ", 4);
    refalrts::alloc_chars(vm, context[31], context[32], "continue;", 9);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[19], context[4] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@7/4 (/7 e.new7/11 )/8 # AlgLeft/9 s.new5/10 e.new6/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[9] ) )
      continue;
    // closed e.new7 as range 11
    // closed e.new6 as range 13
    do {
      // </0 & PrintMatch@7/4 (/7 ' '/19 ' '/20 )/8 # AlgLeft/9 s.BracketNumber0/10 e.Call/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[19] )
        continue;
      context[20] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[20] )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.Call as range 17
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/21"  if( ! refalrts::svar_left( context["/22 Tile{ AsIs: e.Call/17 }"], context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"], context["/29 </31 & Symb/32 </33 & Add/34 1/35 s.BracketNumber0/10/36 >/37 >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/19 AsIs: ' '/20 HalfReuse: ' '/8 HalfReuse: ' '/9 }"return refalrts::cRecognitionImpossible;"/41 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_chars(vm, context[22], context[23], "  if( ! refalrts::svar_left( context[", 37);
      refalrts::alloc_chars(vm, context[24], context[25], "], context[", 11);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[35], 1UL);
      refalrts::copy_stvar(vm, context[36], context[10]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
      refalrts::alloc_chars(vm, context[41], context[42], "return refalrts::cRecognitionImpossible;", 40);
      refalrts::reinit_char(context[0], ')');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], ' ');
      refalrts::reinit_char(context[9], ' ');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[21], context[4] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[40] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[24], context[27] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@7/4 (/7 e.Indent0/15 )/8 # AlgLeft/9 s.BracketNumber0/10 e.Call/17 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    // closed e.Indent0 as range 15
    // closed e.Call as range 17
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 15
    //DEBUG: e.Call: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/19 e.Indent0/15/20"if( ! refalrts::svar_left( context["/22 Tile{ AsIs: e.Call/17 }"], context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"], context["/29 </31 & Symb/32 </33 & Add/34 1/35 s.BracketNumber0/10/36 >/37 >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/15 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/41 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::copy_evar(vm, context[20], context[21], context[15], context[16]);
    refalrts::alloc_chars(vm, context[22], context[23], "if( ! refalrts::svar_left( context[", 35);
    refalrts::alloc_chars(vm, context[24], context[25], "], context[", 11);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[35], 1UL);
    refalrts::copy_stvar(vm, context[36], context[10]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
    refalrts::alloc_chars(vm, context[41], context[42], "continue;", 9);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[19], context[4] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[28], context[40] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@7/4 (/7 e.new7/11 )/8 # AlgRight/9 s.new5/10 e.new6/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[9] ) )
      continue;
    // closed e.new7 as range 11
    // closed e.new6 as range 13
    do {
      // </0 & PrintMatch@7/4 (/7 ' '/19 ' '/20 )/8 # AlgRight/9 s.BracketNumber0/10 e.Call/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[19] )
        continue;
      context[20] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[20] )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.Call as range 17
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/21"  if( ! refalrts::svar_right( context["/22 Tile{ AsIs: e.Call/17 }"], context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"], context["/29 </31 & Symb/32 </33 & Add/34 1/35 s.BracketNumber0/10/36 >/37 >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/19 AsIs: ' '/20 HalfReuse: ' '/8 HalfReuse: ' '/9 }"return refalrts::cRecognitionImpossible;"/41 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_chars(vm, context[22], context[23], "  if( ! refalrts::svar_right( context[", 38);
      refalrts::alloc_chars(vm, context[24], context[25], "], context[", 11);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[35], 1UL);
      refalrts::copy_stvar(vm, context[36], context[10]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
      refalrts::alloc_chars(vm, context[41], context[42], "return refalrts::cRecognitionImpossible;", 40);
      refalrts::reinit_char(context[0], ')');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], ' ');
      refalrts::reinit_char(context[9], ' ');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[21], context[4] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[40] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[24], context[27] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@7/4 (/7 e.Indent0/15 )/8 # AlgRight/9 s.BracketNumber0/10 e.Call/17 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    // closed e.Indent0 as range 15
    // closed e.Call as range 17
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 15
    //DEBUG: e.Call: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/19 e.Indent0/15/20"if( ! refalrts::svar_right( context["/22 Tile{ AsIs: e.Call/17 }"], context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"], context["/29 </31 & Symb/32 </33 & Add/34 1/35 s.BracketNumber0/10/36 >/37 >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/15 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/41 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::copy_evar(vm, context[20], context[21], context[15], context[16]);
    refalrts::alloc_chars(vm, context[22], context[23], "if( ! refalrts::svar_right( context[", 36);
    refalrts::alloc_chars(vm, context[24], context[25], "], context[", 11);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[35], 1UL);
    refalrts::copy_stvar(vm, context[36], context[10]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
    refalrts::alloc_chars(vm, context[41], context[42], "continue;", 9);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[19], context[4] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[28], context[40] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@7/4 (/7 ' '/15 ' '/16 )/8 s.Direction/9 s.BracketNumber0/10 e.Call/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    context[15] = refalrts::char_left( ' ', context[11], context[12] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( ' ', context[11], context[12] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    // closed e.Call as range 13
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Call: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/17"  if( ! refalrts::svar_"/18 </20 & StrFromDirection*2/21 Tile{ AsIs: s.Direction/9 } >/22"( context["/23 Tile{ AsIs: e.Call/13 }"], context["/25 </27 & Symb/28 Tile{ AsIs: s.BracketNumber0/10 } >/29"], context["/30 </32 & Symb/33 </34 & Add/35 1/36 s.BracketNumber0/10/37 >/38 >/39"] ) "/40 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/15 AsIs: ' '/16 HalfReuse: ' '/8 }" return refalrts::cRecognitionImpossible;"/42 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_chars(vm, context[18], context[19], "  if( ! refalrts::svar_", 23);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::alloc_chars(vm, context[23], context[24], "( context[", 10);
    refalrts::alloc_chars(vm, context[25], context[26], "], context[", 11);
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_chars(vm, context[30], context[31], "], context[", 11);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[36], 1UL);
    refalrts::copy_stvar(vm, context[37], context[10]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::alloc_chars(vm, context[40], context[41], "] ) ", 4);
    refalrts::alloc_chars(vm, context[42], context[43], " return refalrts::cRecognitionImpossible;", 41);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[17], context[4] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[29], context[41] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[25], context[28] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[17], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@7/4 (/7 e.Indent0/11 )/8 s.Direction/9 s.BracketNumber0/10 e.Call/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Indent0 as range 11
    // closed e.Call as range 13
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 11
    //DEBUG: e.Call: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/15 e.Indent0/11/16"if( ! refalrts::svar_"/18 </20 & StrFromDirection*2/21 Tile{ AsIs: s.Direction/9 } >/22"( context["/23 Tile{ AsIs: e.Call/13 }"], context["/25 </27 & Symb/28 Tile{ AsIs: s.BracketNumber0/10 } >/29"], context["/30 </32 & Symb/33 </34 & Add/35 1/36 s.BracketNumber0/10/37 >/38 >/39"] ) "/40 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/11 HalfReuse: ' '/8 }" continue;"/42 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::copy_evar(vm, context[16], context[17], context[11], context[12]);
    refalrts::alloc_chars(vm, context[18], context[19], "if( ! refalrts::svar_", 21);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::alloc_chars(vm, context[23], context[24], "( context[", 10);
    refalrts::alloc_chars(vm, context[25], context[26], "], context[", 11);
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_chars(vm, context[30], context[31], "], context[", 11);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[36], 1UL);
    refalrts::copy_stvar(vm, context[37], context[10]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::alloc_chars(vm, context[40], context[41], "] ) ", 4);
    refalrts::alloc_chars(vm, context[42], context[43], " continue;", 10);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[15], context[4] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[29], context[41] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[25], context[28] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[15], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintMatch@7/4 (/7 e.Indent0/5 )/8 s.dyn0/9 s.BracketNumber0/10 e.Call/2 >/1
  // closed e.Indent0 as range 5
  // closed e.Call as range 2
  //DEBUG: s.dyn0: 9
  //DEBUG: s.BracketNumber0: 10
  //DEBUG: e.Indent0: 5
  //DEBUG: e.Call: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch@0/4 AsIs: (/7 AsIs: e.Indent0/5 AsIs: )/8 AsIs: s.dyn0/9 AsIs: s.BracketNumber0/10 } (/11"svar"/12 )/14"context["/15 Tile{ AsIs: e.Call/2 } ']'/17 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_chars(vm, context[12], context[13], "svar", 4);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_chars(vm, context[15], context[16], "context[", 8);
  refalrts::alloc_char(vm, context[17], ']');
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrintMatch_Z7("PrintMatch@7", COOKIE1_, COOKIE2_, func_gen_PrintMatch_Z7);


static refalrts::FnResult func_gen_PrintMatch_Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & PrintMatch@8/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrintMatch@8/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & PrintMatch@8/4 (/7 e.new7/11 )/8 # AlgTerm/9 s.new5/10 e.new6/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[9] ) )
      continue;
    // closed e.new7 as range 11
    // closed e.new6 as range 13
    do {
      // </0 & PrintMatch@8/4 (/7 ' '/19 ' '/20 )/8 # AlgTerm/9 s.BracketNumber0/10 e.Call/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[19] )
        continue;
      context[20] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[20] )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.Call as range 17
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/21"  if( ! refalrts::tvar_term( context["/22 Tile{ AsIs: e.Call/17 }"], context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"] ) "/29 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/19 AsIs: ' '/20 HalfReuse: ' '/8 HalfReuse: ' '/9 }"return refalrts::cRecognitionImpossible;"/31 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_chars(vm, context[22], context[23], "  if( ! refalrts::tvar_term( context[", 37);
      refalrts::alloc_chars(vm, context[24], context[25], "], context[", 11);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "] ) ", 4);
      refalrts::alloc_chars(vm, context[31], context[32], "return refalrts::cRecognitionImpossible;", 40);
      refalrts::reinit_char(context[0], ')');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], ' ');
      refalrts::reinit_char(context[9], ' ');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[21], context[4] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[30] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[24], context[27] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@8/4 (/7 e.Indent0/15 )/8 # AlgTerm/9 s.BracketNumber0/10 e.Call/17 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    // closed e.Indent0 as range 15
    // closed e.Call as range 17
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 15
    //DEBUG: e.Call: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/19 e.Indent0/15/20"if( ! refalrts::tvar_term( context["/22 Tile{ AsIs: e.Call/17 }"], context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"] ) "/29 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/15 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/31 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::copy_evar(vm, context[20], context[21], context[15], context[16]);
    refalrts::alloc_chars(vm, context[22], context[23], "if( ! refalrts::tvar_term( context[", 35);
    refalrts::alloc_chars(vm, context[24], context[25], "], context[", 11);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "] ) ", 4);
    refalrts::alloc_chars(vm, context[31], context[32], "continue;", 9);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[19], context[4] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@8/4 (/7 e.new7/11 )/8 # AlgLeft/9 s.new5/10 e.new6/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[9] ) )
      continue;
    // closed e.new7 as range 11
    // closed e.new6 as range 13
    do {
      // </0 & PrintMatch@8/4 (/7 ' '/19 ' '/20 )/8 # AlgLeft/9 s.BracketNumber0/10 e.Call/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[19] )
        continue;
      context[20] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[20] )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.Call as range 17
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/21"  if( ! refalrts::tvar_left( context["/22 Tile{ AsIs: e.Call/17 }"], context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"], context["/29 </31 & Symb/32 </33 & Add/34 1/35 s.BracketNumber0/10/36 >/37 >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/19 AsIs: ' '/20 HalfReuse: ' '/8 HalfReuse: ' '/9 }"return refalrts::cRecognitionImpossible;"/41 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_chars(vm, context[22], context[23], "  if( ! refalrts::tvar_left( context[", 37);
      refalrts::alloc_chars(vm, context[24], context[25], "], context[", 11);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[35], 1UL);
      refalrts::copy_stvar(vm, context[36], context[10]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
      refalrts::alloc_chars(vm, context[41], context[42], "return refalrts::cRecognitionImpossible;", 40);
      refalrts::reinit_char(context[0], ')');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], ' ');
      refalrts::reinit_char(context[9], ' ');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[21], context[4] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[40] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[24], context[27] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@8/4 (/7 e.Indent0/15 )/8 # AlgLeft/9 s.BracketNumber0/10 e.Call/17 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    // closed e.Indent0 as range 15
    // closed e.Call as range 17
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 15
    //DEBUG: e.Call: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/19 e.Indent0/15/20"if( ! refalrts::tvar_left( context["/22 Tile{ AsIs: e.Call/17 }"], context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"], context["/29 </31 & Symb/32 </33 & Add/34 1/35 s.BracketNumber0/10/36 >/37 >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/15 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/41 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::copy_evar(vm, context[20], context[21], context[15], context[16]);
    refalrts::alloc_chars(vm, context[22], context[23], "if( ! refalrts::tvar_left( context[", 35);
    refalrts::alloc_chars(vm, context[24], context[25], "], context[", 11);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[35], 1UL);
    refalrts::copy_stvar(vm, context[36], context[10]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
    refalrts::alloc_chars(vm, context[41], context[42], "continue;", 9);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[19], context[4] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[28], context[40] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@8/4 (/7 e.new7/11 )/8 # AlgRight/9 s.new5/10 e.new6/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[9] ) )
      continue;
    // closed e.new7 as range 11
    // closed e.new6 as range 13
    do {
      // </0 & PrintMatch@8/4 (/7 ' '/19 ' '/20 )/8 # AlgRight/9 s.BracketNumber0/10 e.Call/17 >/1
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = context[14];
      context[19] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[19] )
        continue;
      context[20] = refalrts::char_left( ' ', context[15], context[16] );
      if( ! context[20] )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.Call as range 17
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/21"  if( ! refalrts::tvar_right( context["/22 Tile{ AsIs: e.Call/17 }"], context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"], context["/29 </31 & Symb/32 </33 & Add/34 1/35 s.BracketNumber0/10/36 >/37 >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/19 AsIs: ' '/20 HalfReuse: ' '/8 HalfReuse: ' '/9 }"return refalrts::cRecognitionImpossible;"/41 Tile{ HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_chars(vm, context[22], context[23], "  if( ! refalrts::tvar_right( context[", 38);
      refalrts::alloc_chars(vm, context[24], context[25], "], context[", 11);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[35], 1UL);
      refalrts::copy_stvar(vm, context[36], context[10]);
      refalrts::alloc_close_call(vm, context[37]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
      refalrts::alloc_chars(vm, context[41], context[42], "return refalrts::cRecognitionImpossible;", 40);
      refalrts::reinit_char(context[0], ')');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_char(context[8], ' ');
      refalrts::reinit_char(context[9], ' ');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[21], context[4] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[37] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_evar( res, context[28], context[40] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[24], context[27] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@8/4 (/7 e.Indent0/15 )/8 # AlgRight/9 s.BracketNumber0/10 e.Call/17 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[13];
    context[18] = context[14];
    // closed e.Indent0 as range 15
    // closed e.Call as range 17
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 15
    //DEBUG: e.Call: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/19 e.Indent0/15/20"if( ! refalrts::tvar_right( context["/22 Tile{ AsIs: e.Call/17 }"], context["/24 </26 & Symb/27 Tile{ AsIs: s.BracketNumber0/10 } >/28"], context["/29 </31 & Symb/32 </33 & Add/34 1/35 s.BracketNumber0/10/36 >/37 >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/15 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/41 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::copy_evar(vm, context[20], context[21], context[15], context[16]);
    refalrts::alloc_chars(vm, context[22], context[23], "if( ! refalrts::tvar_right( context[", 36);
    refalrts::alloc_chars(vm, context[24], context[25], "], context[", 11);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "], context[", 11);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[35], 1UL);
    refalrts::copy_stvar(vm, context[36], context[10]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
    refalrts::alloc_chars(vm, context[41], context[42], "continue;", 9);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[19], context[4] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[28], context[40] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@8/4 (/7 ' '/15 ' '/16 )/8 s.Direction/9 s.BracketNumber0/10 e.Call/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    context[15] = refalrts::char_left( ' ', context[11], context[12] );
    if( ! context[15] )
      continue;
    context[16] = refalrts::char_left( ' ', context[11], context[12] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    // closed e.Call as range 13
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Call: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/17"  if( ! refalrts::tvar_"/18 </20 & StrFromDirection*2/21 Tile{ AsIs: s.Direction/9 } >/22"( context["/23 Tile{ AsIs: e.Call/13 }"], context["/25 </27 & Symb/28 Tile{ AsIs: s.BracketNumber0/10 } >/29"], context["/30 </32 & Symb/33 </34 & Add/35 1/36 s.BracketNumber0/10/37 >/38 >/39"] ) "/40 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/15 AsIs: ' '/16 HalfReuse: ' '/8 }" return refalrts::cRecognitionImpossible;"/42 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_chars(vm, context[18], context[19], "  if( ! refalrts::tvar_", 23);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::alloc_chars(vm, context[23], context[24], "( context[", 10);
    refalrts::alloc_chars(vm, context[25], context[26], "], context[", 11);
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_chars(vm, context[30], context[31], "], context[", 11);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[36], 1UL);
    refalrts::copy_stvar(vm, context[37], context[10]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::alloc_chars(vm, context[40], context[41], "] ) ", 4);
    refalrts::alloc_chars(vm, context[42], context[43], " return refalrts::cRecognitionImpossible;", 41);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[17], context[4] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[29], context[41] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[25], context[28] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[17], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@8/4 (/7 e.Indent0/11 )/8 s.Direction/9 s.BracketNumber0/10 e.Call/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Indent0 as range 11
    // closed e.Call as range 13
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 11
    //DEBUG: e.Call: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/15 e.Indent0/11/16"if( ! refalrts::tvar_"/18 </20 & StrFromDirection*2/21 Tile{ AsIs: s.Direction/9 } >/22"( context["/23 Tile{ AsIs: e.Call/13 }"], context["/25 </27 & Symb/28 Tile{ AsIs: s.BracketNumber0/10 } >/29"], context["/30 </32 & Symb/33 </34 & Add/35 1/36 s.BracketNumber0/10/37 >/38 >/39"] ) "/40 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/11 HalfReuse: ' '/8 }" continue;"/42 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::copy_evar(vm, context[16], context[17], context[11], context[12]);
    refalrts::alloc_chars(vm, context[18], context[19], "if( ! refalrts::tvar_", 21);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::alloc_chars(vm, context[23], context[24], "( context[", 10);
    refalrts::alloc_chars(vm, context[25], context[26], "], context[", 11);
    refalrts::alloc_open_call(vm, context[27]);
    refalrts::alloc_name(vm, context[28], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_chars(vm, context[30], context[31], "], context[", 11);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[34]);
    refalrts::alloc_name(vm, context[35], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[36], 1UL);
    refalrts::copy_stvar(vm, context[37], context[10]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::alloc_chars(vm, context[40], context[41], "] ) ", 4);
    refalrts::alloc_chars(vm, context[42], context[43], " continue;", 10);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[15], context[4] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[29], context[41] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[25], context[28] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[15], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintMatch@8/4 (/7 e.Indent0/5 )/8 s.dyn0/9 s.BracketNumber0/10 e.Call/2 >/1
  // closed e.Indent0 as range 5
  // closed e.Call as range 2
  //DEBUG: s.dyn0: 9
  //DEBUG: s.BracketNumber0: 10
  //DEBUG: e.Indent0: 5
  //DEBUG: e.Call: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch@0/4 AsIs: (/7 AsIs: e.Indent0/5 AsIs: )/8 AsIs: s.dyn0/9 AsIs: s.BracketNumber0/10 } (/11"tvar"/12 )/14"context["/15 Tile{ AsIs: e.Call/2 } ']'/17 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_chars(vm, context[12], context[13], "tvar", 4);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_chars(vm, context[15], context[16], "context[", 8);
  refalrts::alloc_char(vm, context[17], ']');
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrintMatch_Z8("PrintMatch@8", COOKIE1_, COOKIE2_, func_gen_PrintMatch_Z8);


static refalrts::FnResult func_gen_PrintMatch_Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  // </0 & PrintMatch@9/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrintMatch@9/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 (/13 e.new4/11 )/14 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new4 as range 11
  // closed e.new5 as range 2
  do {
    // </0 & PrintMatch@9/4 (/7 e.new8/15 )/8 # AlgTerm/9 s.new6/10 (/13 e.new9/17 )/14 e.new7/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[9] ) )
      continue;
    // closed e.new8 as range 15
    // closed e.new9 as range 17
    // closed e.new7 as range 19
    do {
      // </0 & PrintMatch@9/4 (/7 ' '/27 ' '/28 )/8 # AlgTerm/9 s.BracketNumber0/10 (/13 e.Call0/23 )/14 e.Call/25 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[27] )
        continue;
      context[28] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[28] )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.Call0 as range 23
      // closed e.Call as range 25
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call0: 23
      //DEBUG: e.Call: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/29"  if( ! refalrts::"/30 Tile{ AsIs: e.Call0/23 }"_term( context"/32 Tile{ HalfReuse: '['/14 AsIs: e.Call/25 HalfReuse: ']'/1 }", con"/34 Tile{ HalfReuse: 't'/0 HalfReuse: 'e'/4 HalfReuse: 'x'/7 Reuse: 't'/27 Reuse: '['/28 HalfReuse: </8 HalfReuse: & Symb/9 AsIs: s.BracketNumber0/10 HalfReuse: >/13 }"] ) )"/36 )/38 (/39"    return refalrts::cRecognitionImpossible;"/40 )/42 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_chars(vm, context[30], context[31], "  if( ! refalrts::", 18);
      refalrts::alloc_chars(vm, context[32], context[33], "_term( context", 14);
      refalrts::alloc_chars(vm, context[34], context[35], ", con", 5);
      refalrts::alloc_chars(vm, context[36], context[37], "] ) )", 5);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_chars(vm, context[40], context[41], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::reinit_char(context[14], '[');
      refalrts::reinit_char(context[1], ']');
      refalrts::reinit_char(context[0], 't');
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_char(context[7], 'x');
      refalrts::update_char(context[27], 't');
      refalrts::update_char(context[28], '[');
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[9], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[13]);
      refalrts::link_brackets( context[39], context[42] );
      refalrts::link_brackets( context[29], context[38] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[36], context[42] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[14], context[1] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@9/4 (/7 e.Indent0/21 )/8 # AlgTerm/9 s.BracketNumber0/10 (/13 e.Call0/23 )/14 e.Call/25 >/1
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    // closed e.Indent0 as range 21
    // closed e.Call0 as range 23
    // closed e.Call as range 25
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 21
    //DEBUG: e.Call0: 23
    //DEBUG: e.Call: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/27 e.Indent0/21/28"if( ! refalrts:"/30 Tile{ HalfReuse: ':'/13 AsIs: e.Call0/23 HalfReuse: '_'/14 }"term( context["/32 Tile{ AsIs: e.Call/25 }"], context["/34 </36 & Symb/37 Tile{ AsIs: s.BracketNumber0/10 } >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/21 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/41 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::copy_evar(vm, context[28], context[29], context[21], context[22]);
    refalrts::alloc_chars(vm, context[30], context[31], "if( ! refalrts:", 15);
    refalrts::alloc_chars(vm, context[32], context[33], "term( context[", 14);
    refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
    refalrts::alloc_chars(vm, context[41], context[42], "continue;", 9);
    refalrts::reinit_char(context[13], ':');
    refalrts::reinit_char(context[14], '_');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[27], context[4] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[36] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[38], context[40] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[34], context[37] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[27], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@9/4 (/7 e.new8/15 )/8 # AlgLeft/9 s.new6/10 (/13 e.new9/17 )/14 e.new7/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[9] ) )
      continue;
    // closed e.new8 as range 15
    // closed e.new9 as range 17
    // closed e.new7 as range 19
    do {
      // </0 & PrintMatch@9/4 (/7 ' '/27 ' '/28 )/8 # AlgLeft/9 s.BracketNumber0/10 (/13 e.Call0/23 )/14 e.Call/25 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[27] )
        continue;
      context[28] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[28] )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.Call0 as range 23
      // closed e.Call as range 25
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call0: 23
      //DEBUG: e.Call: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/29"  if( ! refalrts::"/30 Tile{ AsIs: e.Call0/23 }"_left( context"/32 Tile{ HalfReuse: '['/14 AsIs: e.Call/25 HalfReuse: ']'/1 }", con"/34 Tile{ HalfReuse: 't'/0 HalfReuse: 'e'/4 HalfReuse: 'x'/7 Reuse: 't'/27 Reuse: '['/28 HalfReuse: </8 HalfReuse: & Symb/9 AsIs: s.BracketNumber0/10 HalfReuse: >/13 }"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.BracketNumber0/10/43 >/44 >/45"] ) )"/46 )/48 (/49"    return refalrts::cRecognitionImpossible;"/50 )/52 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_chars(vm, context[30], context[31], "  if( ! refalrts::", 18);
      refalrts::alloc_chars(vm, context[32], context[33], "_left( context", 14);
      refalrts::alloc_chars(vm, context[34], context[35], ", con", 5);
      refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[42], 1UL);
      refalrts::copy_stvar(vm, context[43], context[10]);
      refalrts::alloc_close_call(vm, context[44]);
      refalrts::alloc_close_call(vm, context[45]);
      refalrts::alloc_chars(vm, context[46], context[47], "] ) )", 5);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::alloc_chars(vm, context[50], context[51], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::reinit_char(context[14], '[');
      refalrts::reinit_char(context[1], ']');
      refalrts::reinit_char(context[0], 't');
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_char(context[7], 'x');
      refalrts::update_char(context[27], 't');
      refalrts::update_char(context[28], '[');
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[9], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[13]);
      refalrts::link_brackets( context[49], context[52] );
      refalrts::link_brackets( context[29], context[48] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[36], context[52] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[14], context[1] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@9/4 (/7 e.Indent0/21 )/8 # AlgLeft/9 s.BracketNumber0/10 (/13 e.Call0/23 )/14 e.Call/25 >/1
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    // closed e.Indent0 as range 21
    // closed e.Call0 as range 23
    // closed e.Call as range 25
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 21
    //DEBUG: e.Call0: 23
    //DEBUG: e.Call: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/27 e.Indent0/21/28"if( ! refalrts:"/30 Tile{ HalfReuse: ':'/13 AsIs: e.Call0/23 HalfReuse: '_'/14 }"left( context["/32 Tile{ AsIs: e.Call/25 }"], context["/34 </36 & Symb/37 Tile{ AsIs: s.BracketNumber0/10 } >/38"], context["/39 </41 & Symb/42 </43 & Add/44 1/45 s.BracketNumber0/10/46 >/47 >/48"] ) "/49 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/21 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/51 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::copy_evar(vm, context[28], context[29], context[21], context[22]);
    refalrts::alloc_chars(vm, context[30], context[31], "if( ! refalrts:", 15);
    refalrts::alloc_chars(vm, context[32], context[33], "left( context[", 14);
    refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "], context[", 11);
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_name(vm, context[42], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[43]);
    refalrts::alloc_name(vm, context[44], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[45], 1UL);
    refalrts::copy_stvar(vm, context[46], context[10]);
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::alloc_close_call(vm, context[48]);
    refalrts::alloc_chars(vm, context[49], context[50], "] ) ", 4);
    refalrts::alloc_chars(vm, context[51], context[52], "continue;", 9);
    refalrts::reinit_char(context[13], ':');
    refalrts::reinit_char(context[14], '_');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[27], context[4] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[36] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[38], context[50] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[34], context[37] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[27], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@9/4 (/7 e.new8/15 )/8 # AlgRight/9 s.new6/10 (/13 e.new9/17 )/14 e.new7/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[9] ) )
      continue;
    // closed e.new8 as range 15
    // closed e.new9 as range 17
    // closed e.new7 as range 19
    do {
      // </0 & PrintMatch@9/4 (/7 ' '/27 ' '/28 )/8 # AlgRight/9 s.BracketNumber0/10 (/13 e.Call0/23 )/14 e.Call/25 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[27] )
        continue;
      context[28] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[28] )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.Call0 as range 23
      // closed e.Call as range 25
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call0: 23
      //DEBUG: e.Call: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/29"  if( ! refalrts::"/30 Tile{ AsIs: e.Call0/23 }"_right( context"/32 Tile{ HalfReuse: '['/14 AsIs: e.Call/25 HalfReuse: ']'/1 }", con"/34 Tile{ HalfReuse: 't'/0 HalfReuse: 'e'/4 HalfReuse: 'x'/7 Reuse: 't'/27 Reuse: '['/28 HalfReuse: </8 HalfReuse: & Symb/9 AsIs: s.BracketNumber0/10 HalfReuse: >/13 }"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.BracketNumber0/10/43 >/44 >/45"] ) )"/46 )/48 (/49"    return refalrts::cRecognitionImpossible;"/50 )/52 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_chars(vm, context[30], context[31], "  if( ! refalrts::", 18);
      refalrts::alloc_chars(vm, context[32], context[33], "_right( context", 15);
      refalrts::alloc_chars(vm, context[34], context[35], ", con", 5);
      refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[42], 1UL);
      refalrts::copy_stvar(vm, context[43], context[10]);
      refalrts::alloc_close_call(vm, context[44]);
      refalrts::alloc_close_call(vm, context[45]);
      refalrts::alloc_chars(vm, context[46], context[47], "] ) )", 5);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::alloc_chars(vm, context[50], context[51], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::reinit_char(context[14], '[');
      refalrts::reinit_char(context[1], ']');
      refalrts::reinit_char(context[0], 't');
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_char(context[7], 'x');
      refalrts::update_char(context[27], 't');
      refalrts::update_char(context[28], '[');
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[9], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[13]);
      refalrts::link_brackets( context[49], context[52] );
      refalrts::link_brackets( context[29], context[48] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[36], context[52] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[14], context[1] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch@9/4 (/7 e.Indent0/21 )/8 # AlgRight/9 s.BracketNumber0/10 (/13 e.Call0/23 )/14 e.Call/25 >/1
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    // closed e.Indent0 as range 21
    // closed e.Call0 as range 23
    // closed e.Call as range 25
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 21
    //DEBUG: e.Call0: 23
    //DEBUG: e.Call: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/27 e.Indent0/21/28"if( ! refalrts:"/30 Tile{ HalfReuse: ':'/13 AsIs: e.Call0/23 HalfReuse: '_'/14 }"right( context["/32 Tile{ AsIs: e.Call/25 }"], context["/34 </36 & Symb/37 Tile{ AsIs: s.BracketNumber0/10 } >/38"], context["/39 </41 & Symb/42 </43 & Add/44 1/45 s.BracketNumber0/10/46 >/47 >/48"] ) "/49 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/21 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/51 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::copy_evar(vm, context[28], context[29], context[21], context[22]);
    refalrts::alloc_chars(vm, context[30], context[31], "if( ! refalrts:", 15);
    refalrts::alloc_chars(vm, context[32], context[33], "right( context[", 15);
    refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "], context[", 11);
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_name(vm, context[42], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[43]);
    refalrts::alloc_name(vm, context[44], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[45], 1UL);
    refalrts::copy_stvar(vm, context[46], context[10]);
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::alloc_close_call(vm, context[48]);
    refalrts::alloc_chars(vm, context[49], context[50], "] ) ", 4);
    refalrts::alloc_chars(vm, context[51], context[52], "continue;", 9);
    refalrts::reinit_char(context[13], ':');
    refalrts::reinit_char(context[14], '_');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[27], context[4] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[36] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[38], context[50] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[34], context[37] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[27], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@9/4 (/7 ' '/21 ' '/22 )/8 s.Direction/9 s.BracketNumber0/10 (/13 e.Call0/17 )/14 e.Call/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    context[21] = refalrts::char_left( ' ', context[15], context[16] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( ' ', context[15], context[16] );
    if( ! context[22] )
      continue;
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    // closed e.Call0 as range 17
    // closed e.Call as range 19
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Call0: 17
    //DEBUG: e.Call: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/23"  if( ! refalrts:"/24 Tile{ HalfReuse: ':'/13 AsIs: e.Call0/17 HalfReuse: '_'/14 } </26 & StrFromDirection*2/27 Tile{ AsIs: s.Direction/9 } >/28"( context["/29 Tile{ AsIs: e.Call/19 }"], context["/31 </33 & Symb/34 Tile{ AsIs: s.BracketNumber0/10 } >/35"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.BracketNumber0/10/43 >/44 >/45"] ) "/46 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/21 AsIs: ' '/22 HalfReuse: ' '/8 }" return refalrts::cRecognitionImpossible;"/48 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_chars(vm, context[24], context[25], "  if( ! refalrts:", 17);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "( context[", 10);
    refalrts::alloc_chars(vm, context[31], context[32], "], context[", 11);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[42], 1UL);
    refalrts::copy_stvar(vm, context[43], context[10]);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::alloc_chars(vm, context[46], context[47], "] ) ", 4);
    refalrts::alloc_chars(vm, context[48], context[49], " return refalrts::cRecognitionImpossible;", 41);
    refalrts::reinit_char(context[13], ':');
    refalrts::reinit_char(context[14], '_');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[23], context[4] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[35], context[47] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[23], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch@9/4 (/7 e.Indent0/15 )/8 s.Direction/9 s.BracketNumber0/10 (/13 e.Call0/17 )/14 e.Call/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.Indent0 as range 15
    // closed e.Call0 as range 17
    // closed e.Call as range 19
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 15
    //DEBUG: e.Call0: 17
    //DEBUG: e.Call: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/21 e.Indent0/15/22"if( ! refalrts:"/24 Tile{ HalfReuse: ':'/13 AsIs: e.Call0/17 HalfReuse: '_'/14 } </26 & StrFromDirection*2/27 Tile{ AsIs: s.Direction/9 } >/28"( context["/29 Tile{ AsIs: e.Call/19 }"], context["/31 </33 & Symb/34 Tile{ AsIs: s.BracketNumber0/10 } >/35"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.BracketNumber0/10/43 >/44 >/45"] ) "/46 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/15 HalfReuse: ' '/8 }" continue;"/48 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::copy_evar(vm, context[22], context[23], context[15], context[16]);
    refalrts::alloc_chars(vm, context[24], context[25], "if( ! refalrts:", 15);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "( context[", 10);
    refalrts::alloc_chars(vm, context[31], context[32], "], context[", 11);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[42], 1UL);
    refalrts::copy_stvar(vm, context[43], context[10]);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::alloc_chars(vm, context[46], context[47], "] ) ", 4);
    refalrts::alloc_chars(vm, context[48], context[49], " continue;", 10);
    refalrts::reinit_char(context[13], ':');
    refalrts::reinit_char(context[14], '_');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[21], context[4] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[35], context[47] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[21], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintMatch@9/4 (/7 e.Indent0/5 )/8 s.dyn0/9 s.BracketNumber0/10 (/13 e.Call0/11 )/14 e.Call/2 >/1
  // closed e.Indent0 as range 5
  // closed e.Call0 as range 11
  // closed e.Call as range 2
  //DEBUG: s.dyn0: 9
  //DEBUG: s.BracketNumber0: 10
  //DEBUG: e.Indent0: 5
  //DEBUG: e.Call0: 11
  //DEBUG: e.Call: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch@0/4 AsIs: (/7 AsIs: e.Indent0/5 AsIs: )/8 AsIs: s.dyn0/9 AsIs: s.BracketNumber0/10 AsIs: (/13 AsIs: e.Call0/11 AsIs: )/14 }"context["/15 Tile{ AsIs: e.Call/2 } ']'/17 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_chars(vm, context[15], context[16], "context[", 8);
  refalrts::alloc_char(vm, context[17], ']');
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatch_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrintMatch_Z9("PrintMatch@9", COOKIE1_, COOKIE2_, func_gen_PrintMatch_Z9);


static refalrts::FnResult func_gen_PrintMatchm_VM_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 73 elems
  refalrts::Iter context[73];
  refalrts::zeros( context, 73 );
  // </0 & PrintMatch-VM@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrintMatch-VM@1/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 (/13 e.new4/11 )/14 (/17 e.new5/15 )/18 (/21 e.new6/19 )/22 e.new7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new4 as range 11
  // closed e.new5 as range 15
  // closed e.new6 as range 19
  // closed e.new7 as range 2
  do {
    // </0 & PrintMatch-VM@1/4 (/7 e.new10/23 )/8 # AlgTerm/9 s.new8/10 (/13 e.new11/25 )/14 (/17 e.new12/27 )/18 (/21 e.new13/29 )/22 e.new9/31 >/1
    context[23] = context[5];
    context[24] = context[6];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[9] ) )
      continue;
    // closed e.new10 as range 23
    // closed e.new11 as range 25
    // closed e.new12 as range 27
    // closed e.new13 as range 29
    // closed e.new9 as range 31
    do {
      // </0 & PrintMatch-VM@1/4 (/7 ' '/43 ' '/44 )/8 # AlgTerm/9 s.BracketNumber0/10 (/13 e.Call/35 )/14 (/17 e.Call0/37 )/18 (/21 e.Call1/39 )/22 e.Call2/41 >/1
      context[33] = context[23];
      context[34] = context[24];
      context[35] = context[25];
      context[36] = context[26];
      context[37] = context[27];
      context[38] = context[28];
      context[39] = context[29];
      context[40] = context[30];
      context[41] = context[31];
      context[42] = context[32];
      context[43] = refalrts::char_left( ' ', context[33], context[34] );
      if( ! context[43] )
        continue;
      context[44] = refalrts::char_left( ' ', context[33], context[34] );
      if( ! context[44] )
        continue;
      if( ! refalrts::empty_seq( context[33], context[34] ) )
        continue;
      // closed e.Call as range 35
      // closed e.Call0 as range 37
      // closed e.Call1 as range 39
      // closed e.Call2 as range 41
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 35
      //DEBUG: e.Call0: 37
      //DEBUG: e.Call1: 39
      //DEBUG: e.Call2: 41

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/45"  if( ! refalrts::repeated_evar_term( vm, context["/46 Tile{ AsIs: e.Call/35 }"], contex"/48 Tile{ HalfReuse: 't'/14 HalfReuse: '['/17 AsIs: e.Call0/37 HalfReuse: ']'/18 HalfReuse: ','/21 }" context["/50 Tile{ AsIs: e.Call1/39 }"], context"/52 Tile{ HalfReuse: '['/22 AsIs: e.Call2/41 HalfReuse: ']'/1 }", con"/54 Tile{ HalfReuse: 't'/0 HalfReuse: 'e'/4 HalfReuse: 'x'/7 Reuse: 't'/43 Reuse: '['/44 HalfReuse: </8 HalfReuse: & Symb/9 AsIs: s.BracketNumber0/10 HalfReuse: >/13 }"] ) )"/56 )/58 (/59"    return refalrts::cRecognitionImpossible;"/60 )/62 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::alloc_chars(vm, context[46], context[47], "  if( ! refalrts::repeated_evar_term( vm, context[", 50);
      refalrts::alloc_chars(vm, context[48], context[49], "], contex", 9);
      refalrts::alloc_chars(vm, context[50], context[51], " context[", 9);
      refalrts::alloc_chars(vm, context[52], context[53], "], context", 10);
      refalrts::alloc_chars(vm, context[54], context[55], ", con", 5);
      refalrts::alloc_chars(vm, context[56], context[57], "] ) )", 5);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_open_bracket(vm, context[59]);
      refalrts::alloc_chars(vm, context[60], context[61], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::alloc_close_bracket(vm, context[62]);
      refalrts::reinit_char(context[14], 't');
      refalrts::reinit_char(context[17], '[');
      refalrts::reinit_char(context[18], ']');
      refalrts::reinit_char(context[21], ',');
      refalrts::reinit_char(context[22], '[');
      refalrts::reinit_char(context[1], ']');
      refalrts::reinit_char(context[0], 't');
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_char(context[7], 'x');
      refalrts::update_char(context[43], 't');
      refalrts::update_char(context[44], '[');
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[9], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[13]);
      refalrts::link_brackets( context[59], context[62] );
      refalrts::link_brackets( context[45], context[58] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[56], context[62] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[22], context[1] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_evar( res, context[14], context[21] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[45], context[47] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch-VM@1/4 (/7 e.Indent0/33 )/8 # AlgTerm/9 s.BracketNumber0/10 (/13 e.Call/35 )/14 (/17 e.Call0/37 )/18 (/21 e.Call1/39 )/22 e.Call2/41 >/1
    context[33] = context[23];
    context[34] = context[24];
    context[35] = context[25];
    context[36] = context[26];
    context[37] = context[27];
    context[38] = context[28];
    context[39] = context[29];
    context[40] = context[30];
    context[41] = context[31];
    context[42] = context[32];
    // closed e.Indent0 as range 33
    // closed e.Call as range 35
    // closed e.Call0 as range 37
    // closed e.Call1 as range 39
    // closed e.Call2 as range 41
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 33
    //DEBUG: e.Call: 35
    //DEBUG: e.Call0: 37
    //DEBUG: e.Call1: 39
    //DEBUG: e.Call2: 41

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/43 e.Indent0/33/44"if( ! refalrts::repeated_evar_term( vm, context["/46 Tile{ AsIs: e.Call/35 }"], contex"/48 Tile{ HalfReuse: 't'/14 HalfReuse: '['/17 AsIs: e.Call0/37 HalfReuse: ']'/18 HalfReuse: ','/21 }" context["/50 Tile{ AsIs: e.Call1/39 }"], context"/52 Tile{ HalfReuse: '['/22 AsIs: e.Call2/41 HalfReuse: ']'/1 }", context["/54 </56 & Symb/57 Tile{ AsIs: s.BracketNumber0/10 HalfReuse: >/13 }"] ) "/58 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/33 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/60 )/62 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[43]);
    refalrts::copy_evar(vm, context[44], context[45], context[33], context[34]);
    refalrts::alloc_chars(vm, context[46], context[47], "if( ! refalrts::repeated_evar_term( vm, context[", 48);
    refalrts::alloc_chars(vm, context[48], context[49], "], contex", 9);
    refalrts::alloc_chars(vm, context[50], context[51], " context[", 9);
    refalrts::alloc_chars(vm, context[52], context[53], "], context", 10);
    refalrts::alloc_chars(vm, context[54], context[55], ", context[", 10);
    refalrts::alloc_open_call(vm, context[56]);
    refalrts::alloc_name(vm, context[57], functions[efunc_Symb]);
    refalrts::alloc_chars(vm, context[58], context[59], "] ) ", 4);
    refalrts::alloc_chars(vm, context[60], context[61], "continue;", 9);
    refalrts::alloc_close_bracket(vm, context[62]);
    refalrts::reinit_char(context[14], 't');
    refalrts::reinit_char(context[17], '[');
    refalrts::reinit_char(context[18], ']');
    refalrts::reinit_char(context[21], ',');
    refalrts::reinit_char(context[22], '[');
    refalrts::reinit_char(context[1], ']');
    refalrts::reinit_close_call(context[13]);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::link_brackets( context[7], context[62] );
    refalrts::link_brackets( context[43], context[4] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[56] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[60], context[62] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[58], context[59] );
    res = refalrts::splice_evar( res, context[10], context[13] );
    res = refalrts::splice_evar( res, context[54], context[57] );
    res = refalrts::splice_evar( res, context[22], context[1] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_evar( res, context[14], context[21] );
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[43], context[47] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch-VM@1/4 (/7 e.new10/23 )/8 # AlgLeft/9 s.new8/10 (/13 e.new11/25 )/14 (/17 e.new12/27 )/18 (/21 e.new13/29 )/22 e.new9/31 >/1
    context[23] = context[5];
    context[24] = context[6];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[9] ) )
      continue;
    // closed e.new10 as range 23
    // closed e.new11 as range 25
    // closed e.new12 as range 27
    // closed e.new13 as range 29
    // closed e.new9 as range 31
    do {
      // </0 & PrintMatch-VM@1/4 (/7 ' '/43 ' '/44 )/8 # AlgLeft/9 s.BracketNumber0/10 (/13 e.Call/35 )/14 (/17 e.Call0/37 )/18 (/21 e.Call1/39 )/22 e.Call2/41 >/1
      context[33] = context[23];
      context[34] = context[24];
      context[35] = context[25];
      context[36] = context[26];
      context[37] = context[27];
      context[38] = context[28];
      context[39] = context[29];
      context[40] = context[30];
      context[41] = context[31];
      context[42] = context[32];
      context[43] = refalrts::char_left( ' ', context[33], context[34] );
      if( ! context[43] )
        continue;
      context[44] = refalrts::char_left( ' ', context[33], context[34] );
      if( ! context[44] )
        continue;
      if( ! refalrts::empty_seq( context[33], context[34] ) )
        continue;
      // closed e.Call as range 35
      // closed e.Call0 as range 37
      // closed e.Call1 as range 39
      // closed e.Call2 as range 41
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 35
      //DEBUG: e.Call0: 37
      //DEBUG: e.Call1: 39
      //DEBUG: e.Call2: 41

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/45"  if( ! refalrts::repeated_evar_left( vm, context["/46 Tile{ AsIs: e.Call/35 }"], contex"/48 Tile{ HalfReuse: 't'/14 HalfReuse: '['/17 AsIs: e.Call0/37 HalfReuse: ']'/18 HalfReuse: ','/21 }" context["/50 Tile{ AsIs: e.Call1/39 }"], context"/52 Tile{ HalfReuse: '['/22 AsIs: e.Call2/41 HalfReuse: ']'/1 }", con"/54 Tile{ HalfReuse: 't'/0 HalfReuse: 'e'/4 HalfReuse: 'x'/7 Reuse: 't'/43 Reuse: '['/44 HalfReuse: </8 HalfReuse: & Symb/9 AsIs: s.BracketNumber0/10 HalfReuse: >/13 }"], context["/56 </58 & Symb/59 </60 & Add/61 1/62 s.BracketNumber0/10/63 >/64 >/65"] ) )"/66 )/68 (/69"    return refalrts::cRecognitionImpossible;"/70 )/72 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::alloc_chars(vm, context[46], context[47], "  if( ! refalrts::repeated_evar_left( vm, context[", 50);
      refalrts::alloc_chars(vm, context[48], context[49], "], contex", 9);
      refalrts::alloc_chars(vm, context[50], context[51], " context[", 9);
      refalrts::alloc_chars(vm, context[52], context[53], "], context", 10);
      refalrts::alloc_chars(vm, context[54], context[55], ", con", 5);
      refalrts::alloc_chars(vm, context[56], context[57], "], context[", 11);
      refalrts::alloc_open_call(vm, context[58]);
      refalrts::alloc_name(vm, context[59], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[60]);
      refalrts::alloc_name(vm, context[61], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[62], 1UL);
      refalrts::copy_stvar(vm, context[63], context[10]);
      refalrts::alloc_close_call(vm, context[64]);
      refalrts::alloc_close_call(vm, context[65]);
      refalrts::alloc_chars(vm, context[66], context[67], "] ) )", 5);
      refalrts::alloc_close_bracket(vm, context[68]);
      refalrts::alloc_open_bracket(vm, context[69]);
      refalrts::alloc_chars(vm, context[70], context[71], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::alloc_close_bracket(vm, context[72]);
      refalrts::reinit_char(context[14], 't');
      refalrts::reinit_char(context[17], '[');
      refalrts::reinit_char(context[18], ']');
      refalrts::reinit_char(context[21], ',');
      refalrts::reinit_char(context[22], '[');
      refalrts::reinit_char(context[1], ']');
      refalrts::reinit_char(context[0], 't');
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_char(context[7], 'x');
      refalrts::update_char(context[43], 't');
      refalrts::update_char(context[44], '[');
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[9], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[13]);
      refalrts::link_brackets( context[69], context[72] );
      refalrts::link_brackets( context[45], context[68] );
      refalrts::push_stack( vm, context[65] );
      refalrts::push_stack( vm, context[58] );
      refalrts::push_stack( vm, context[64] );
      refalrts::push_stack( vm, context[60] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[56], context[72] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[22], context[1] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_evar( res, context[14], context[21] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[45], context[47] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch-VM@1/4 (/7 e.Indent0/33 )/8 # AlgLeft/9 s.BracketNumber0/10 (/13 e.Call/35 )/14 (/17 e.Call0/37 )/18 (/21 e.Call1/39 )/22 e.Call2/41 >/1
    context[33] = context[23];
    context[34] = context[24];
    context[35] = context[25];
    context[36] = context[26];
    context[37] = context[27];
    context[38] = context[28];
    context[39] = context[29];
    context[40] = context[30];
    context[41] = context[31];
    context[42] = context[32];
    // closed e.Indent0 as range 33
    // closed e.Call as range 35
    // closed e.Call0 as range 37
    // closed e.Call1 as range 39
    // closed e.Call2 as range 41
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 33
    //DEBUG: e.Call: 35
    //DEBUG: e.Call0: 37
    //DEBUG: e.Call1: 39
    //DEBUG: e.Call2: 41

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/43 e.Indent0/33/44"if( ! refalrts::repeated_evar_left( vm, context["/46 Tile{ AsIs: e.Call/35 }"], contex"/48 Tile{ HalfReuse: 't'/14 HalfReuse: '['/17 AsIs: e.Call0/37 HalfReuse: ']'/18 HalfReuse: ','/21 }" context["/50 Tile{ AsIs: e.Call1/39 }"], context"/52 Tile{ HalfReuse: '['/22 AsIs: e.Call2/41 HalfReuse: ']'/1 }", context["/54 </56 & Symb/57 Tile{ AsIs: s.BracketNumber0/10 HalfReuse: >/13 }"], context["/58 </60 & Symb/61 </62 & Add/63 1/64 s.BracketNumber0/10/65 >/66 >/67"] ) "/68 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/33 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/70 )/72 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[43]);
    refalrts::copy_evar(vm, context[44], context[45], context[33], context[34]);
    refalrts::alloc_chars(vm, context[46], context[47], "if( ! refalrts::repeated_evar_left( vm, context[", 48);
    refalrts::alloc_chars(vm, context[48], context[49], "], contex", 9);
    refalrts::alloc_chars(vm, context[50], context[51], " context[", 9);
    refalrts::alloc_chars(vm, context[52], context[53], "], context", 10);
    refalrts::alloc_chars(vm, context[54], context[55], ", context[", 10);
    refalrts::alloc_open_call(vm, context[56]);
    refalrts::alloc_name(vm, context[57], functions[efunc_Symb]);
    refalrts::alloc_chars(vm, context[58], context[59], "], context[", 11);
    refalrts::alloc_open_call(vm, context[60]);
    refalrts::alloc_name(vm, context[61], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[62]);
    refalrts::alloc_name(vm, context[63], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[64], 1UL);
    refalrts::copy_stvar(vm, context[65], context[10]);
    refalrts::alloc_close_call(vm, context[66]);
    refalrts::alloc_close_call(vm, context[67]);
    refalrts::alloc_chars(vm, context[68], context[69], "] ) ", 4);
    refalrts::alloc_chars(vm, context[70], context[71], "continue;", 9);
    refalrts::alloc_close_bracket(vm, context[72]);
    refalrts::reinit_char(context[14], 't');
    refalrts::reinit_char(context[17], '[');
    refalrts::reinit_char(context[18], ']');
    refalrts::reinit_char(context[21], ',');
    refalrts::reinit_char(context[22], '[');
    refalrts::reinit_char(context[1], ']');
    refalrts::reinit_close_call(context[13]);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::link_brackets( context[7], context[72] );
    refalrts::link_brackets( context[43], context[4] );
    refalrts::push_stack( vm, context[67] );
    refalrts::push_stack( vm, context[60] );
    refalrts::push_stack( vm, context[66] );
    refalrts::push_stack( vm, context[62] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[56] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[70], context[72] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[58], context[69] );
    res = refalrts::splice_evar( res, context[10], context[13] );
    res = refalrts::splice_evar( res, context[54], context[57] );
    res = refalrts::splice_evar( res, context[22], context[1] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_evar( res, context[14], context[21] );
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[43], context[47] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch-VM@1/4 (/7 e.new10/23 )/8 # AlgRight/9 s.new8/10 (/13 e.new11/25 )/14 (/17 e.new12/27 )/18 (/21 e.new13/29 )/22 e.new9/31 >/1
    context[23] = context[5];
    context[24] = context[6];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[9] ) )
      continue;
    // closed e.new10 as range 23
    // closed e.new11 as range 25
    // closed e.new12 as range 27
    // closed e.new13 as range 29
    // closed e.new9 as range 31
    do {
      // </0 & PrintMatch-VM@1/4 (/7 ' '/43 ' '/44 )/8 # AlgRight/9 s.BracketNumber0/10 (/13 e.Call/35 )/14 (/17 e.Call0/37 )/18 (/21 e.Call1/39 )/22 e.Call2/41 >/1
      context[33] = context[23];
      context[34] = context[24];
      context[35] = context[25];
      context[36] = context[26];
      context[37] = context[27];
      context[38] = context[28];
      context[39] = context[29];
      context[40] = context[30];
      context[41] = context[31];
      context[42] = context[32];
      context[43] = refalrts::char_left( ' ', context[33], context[34] );
      if( ! context[43] )
        continue;
      context[44] = refalrts::char_left( ' ', context[33], context[34] );
      if( ! context[44] )
        continue;
      if( ! refalrts::empty_seq( context[33], context[34] ) )
        continue;
      // closed e.Call as range 35
      // closed e.Call0 as range 37
      // closed e.Call1 as range 39
      // closed e.Call2 as range 41
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 35
      //DEBUG: e.Call0: 37
      //DEBUG: e.Call1: 39
      //DEBUG: e.Call2: 41

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/45"  if( ! refalrts::repeated_evar_right( vm, context["/46 Tile{ AsIs: e.Call/35 }"], contex"/48 Tile{ HalfReuse: 't'/14 HalfReuse: '['/17 AsIs: e.Call0/37 HalfReuse: ']'/18 HalfReuse: ','/21 }" context["/50 Tile{ AsIs: e.Call1/39 }"], context"/52 Tile{ HalfReuse: '['/22 AsIs: e.Call2/41 HalfReuse: ']'/1 }", con"/54 Tile{ HalfReuse: 't'/0 HalfReuse: 'e'/4 HalfReuse: 'x'/7 Reuse: 't'/43 Reuse: '['/44 HalfReuse: </8 HalfReuse: & Symb/9 AsIs: s.BracketNumber0/10 HalfReuse: >/13 }"], context["/56 </58 & Symb/59 </60 & Add/61 1/62 s.BracketNumber0/10/63 >/64 >/65"] ) )"/66 )/68 (/69"    return refalrts::cRecognitionImpossible;"/70 )/72 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::alloc_chars(vm, context[46], context[47], "  if( ! refalrts::repeated_evar_right( vm, context[", 51);
      refalrts::alloc_chars(vm, context[48], context[49], "], contex", 9);
      refalrts::alloc_chars(vm, context[50], context[51], " context[", 9);
      refalrts::alloc_chars(vm, context[52], context[53], "], context", 10);
      refalrts::alloc_chars(vm, context[54], context[55], ", con", 5);
      refalrts::alloc_chars(vm, context[56], context[57], "], context[", 11);
      refalrts::alloc_open_call(vm, context[58]);
      refalrts::alloc_name(vm, context[59], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[60]);
      refalrts::alloc_name(vm, context[61], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[62], 1UL);
      refalrts::copy_stvar(vm, context[63], context[10]);
      refalrts::alloc_close_call(vm, context[64]);
      refalrts::alloc_close_call(vm, context[65]);
      refalrts::alloc_chars(vm, context[66], context[67], "] ) )", 5);
      refalrts::alloc_close_bracket(vm, context[68]);
      refalrts::alloc_open_bracket(vm, context[69]);
      refalrts::alloc_chars(vm, context[70], context[71], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::alloc_close_bracket(vm, context[72]);
      refalrts::reinit_char(context[14], 't');
      refalrts::reinit_char(context[17], '[');
      refalrts::reinit_char(context[18], ']');
      refalrts::reinit_char(context[21], ',');
      refalrts::reinit_char(context[22], '[');
      refalrts::reinit_char(context[1], ']');
      refalrts::reinit_char(context[0], 't');
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_char(context[7], 'x');
      refalrts::update_char(context[43], 't');
      refalrts::update_char(context[44], '[');
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[9], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[13]);
      refalrts::link_brackets( context[69], context[72] );
      refalrts::link_brackets( context[45], context[68] );
      refalrts::push_stack( vm, context[65] );
      refalrts::push_stack( vm, context[58] );
      refalrts::push_stack( vm, context[64] );
      refalrts::push_stack( vm, context[60] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[56], context[72] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_evar( res, context[54], context[55] );
      res = refalrts::splice_evar( res, context[22], context[1] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_evar( res, context[14], context[21] );
      res = refalrts::splice_evar( res, context[48], context[49] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[45], context[47] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch-VM@1/4 (/7 e.Indent0/33 )/8 # AlgRight/9 s.BracketNumber0/10 (/13 e.Call/35 )/14 (/17 e.Call0/37 )/18 (/21 e.Call1/39 )/22 e.Call2/41 >/1
    context[33] = context[23];
    context[34] = context[24];
    context[35] = context[25];
    context[36] = context[26];
    context[37] = context[27];
    context[38] = context[28];
    context[39] = context[29];
    context[40] = context[30];
    context[41] = context[31];
    context[42] = context[32];
    // closed e.Indent0 as range 33
    // closed e.Call as range 35
    // closed e.Call0 as range 37
    // closed e.Call1 as range 39
    // closed e.Call2 as range 41
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 33
    //DEBUG: e.Call: 35
    //DEBUG: e.Call0: 37
    //DEBUG: e.Call1: 39
    //DEBUG: e.Call2: 41

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/43 e.Indent0/33/44"if( ! refalrts::repeated_evar_right( vm, context["/46 Tile{ AsIs: e.Call/35 }"], contex"/48 Tile{ HalfReuse: 't'/14 HalfReuse: '['/17 AsIs: e.Call0/37 HalfReuse: ']'/18 HalfReuse: ','/21 }" context["/50 Tile{ AsIs: e.Call1/39 }"], context"/52 Tile{ HalfReuse: '['/22 AsIs: e.Call2/41 HalfReuse: ']'/1 }", context["/54 </56 & Symb/57 Tile{ AsIs: s.BracketNumber0/10 HalfReuse: >/13 }"], context["/58 </60 & Symb/61 </62 & Add/63 1/64 s.BracketNumber0/10/65 >/66 >/67"] ) "/68 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/33 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/70 )/72 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[43]);
    refalrts::copy_evar(vm, context[44], context[45], context[33], context[34]);
    refalrts::alloc_chars(vm, context[46], context[47], "if( ! refalrts::repeated_evar_right( vm, context[", 49);
    refalrts::alloc_chars(vm, context[48], context[49], "], contex", 9);
    refalrts::alloc_chars(vm, context[50], context[51], " context[", 9);
    refalrts::alloc_chars(vm, context[52], context[53], "], context", 10);
    refalrts::alloc_chars(vm, context[54], context[55], ", context[", 10);
    refalrts::alloc_open_call(vm, context[56]);
    refalrts::alloc_name(vm, context[57], functions[efunc_Symb]);
    refalrts::alloc_chars(vm, context[58], context[59], "], context[", 11);
    refalrts::alloc_open_call(vm, context[60]);
    refalrts::alloc_name(vm, context[61], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[62]);
    refalrts::alloc_name(vm, context[63], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[64], 1UL);
    refalrts::copy_stvar(vm, context[65], context[10]);
    refalrts::alloc_close_call(vm, context[66]);
    refalrts::alloc_close_call(vm, context[67]);
    refalrts::alloc_chars(vm, context[68], context[69], "] ) ", 4);
    refalrts::alloc_chars(vm, context[70], context[71], "continue;", 9);
    refalrts::alloc_close_bracket(vm, context[72]);
    refalrts::reinit_char(context[14], 't');
    refalrts::reinit_char(context[17], '[');
    refalrts::reinit_char(context[18], ']');
    refalrts::reinit_char(context[21], ',');
    refalrts::reinit_char(context[22], '[');
    refalrts::reinit_char(context[1], ']');
    refalrts::reinit_close_call(context[13]);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::link_brackets( context[7], context[72] );
    refalrts::link_brackets( context[43], context[4] );
    refalrts::push_stack( vm, context[67] );
    refalrts::push_stack( vm, context[60] );
    refalrts::push_stack( vm, context[66] );
    refalrts::push_stack( vm, context[62] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[56] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[70], context[72] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[58], context[69] );
    res = refalrts::splice_evar( res, context[10], context[13] );
    res = refalrts::splice_evar( res, context[54], context[57] );
    res = refalrts::splice_evar( res, context[22], context[1] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_evar( res, context[14], context[21] );
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[43], context[47] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch-VM@1/4 (/7 ' '/33 ' '/34 )/8 s.Direction/9 s.BracketNumber0/10 (/13 e.Call/25 )/14 (/17 e.Call0/27 )/18 (/21 e.Call1/29 )/22 e.Call2/31 >/1
    context[23] = context[5];
    context[24] = context[6];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    context[33] = refalrts::char_left( ' ', context[23], context[24] );
    if( ! context[33] )
      continue;
    context[34] = refalrts::char_left( ' ', context[23], context[24] );
    if( ! context[34] )
      continue;
    if( ! refalrts::empty_seq( context[23], context[24] ) )
      continue;
    // closed e.Call as range 25
    // closed e.Call0 as range 27
    // closed e.Call1 as range 29
    // closed e.Call2 as range 31
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Call: 25
    //DEBUG: e.Call0: 27
    //DEBUG: e.Call1: 29
    //DEBUG: e.Call2: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/35"  if( ! refalrts::repeated_evar_"/36 </38 & StrFromDirection*2/39 Tile{ AsIs: s.Direction/9 } >/40"( vm, context["/41 Tile{ AsIs: e.Call/25 }"], contex"/43 Tile{ HalfReuse: 't'/14 HalfReuse: '['/17 AsIs: e.Call0/27 HalfReuse: ']'/18 HalfReuse: ','/21 }" context["/45 Tile{ AsIs: e.Call1/29 }"], context"/47 Tile{ HalfReuse: '['/22 AsIs: e.Call2/31 HalfReuse: ']'/1 }", context["/49 </51 & Symb/52 Tile{ AsIs: s.BracketNumber0/10 HalfReuse: >/13 }"], context["/53 </55 & Symb/56 </57 & Add/58 1/59 s.BracketNumber0/10/60 >/61 >/62"] ) "/63 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/33 AsIs: ' '/34 HalfReuse: ' '/8 }" return refalrts::cRecognitionImpossible;"/65 )/67 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[35]);
    refalrts::alloc_chars(vm, context[36], context[37], "  if( ! refalrts::repeated_evar_", 32);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[40]);
    refalrts::alloc_chars(vm, context[41], context[42], "( vm, context[", 14);
    refalrts::alloc_chars(vm, context[43], context[44], "], contex", 9);
    refalrts::alloc_chars(vm, context[45], context[46], " context[", 9);
    refalrts::alloc_chars(vm, context[47], context[48], "], context", 10);
    refalrts::alloc_chars(vm, context[49], context[50], ", context[", 10);
    refalrts::alloc_open_call(vm, context[51]);
    refalrts::alloc_name(vm, context[52], functions[efunc_Symb]);
    refalrts::alloc_chars(vm, context[53], context[54], "], context[", 11);
    refalrts::alloc_open_call(vm, context[55]);
    refalrts::alloc_name(vm, context[56], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[57]);
    refalrts::alloc_name(vm, context[58], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[59], 1UL);
    refalrts::copy_stvar(vm, context[60], context[10]);
    refalrts::alloc_close_call(vm, context[61]);
    refalrts::alloc_close_call(vm, context[62]);
    refalrts::alloc_chars(vm, context[63], context[64], "] ) ", 4);
    refalrts::alloc_chars(vm, context[65], context[66], " return refalrts::cRecognitionImpossible;", 41);
    refalrts::alloc_close_bracket(vm, context[67]);
    refalrts::reinit_char(context[14], 't');
    refalrts::reinit_char(context[17], '[');
    refalrts::reinit_char(context[18], ']');
    refalrts::reinit_char(context[21], ',');
    refalrts::reinit_char(context[22], '[');
    refalrts::reinit_char(context[1], ']');
    refalrts::reinit_close_call(context[13]);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::link_brackets( context[7], context[67] );
    refalrts::link_brackets( context[35], context[4] );
    refalrts::push_stack( vm, context[62] );
    refalrts::push_stack( vm, context[55] );
    refalrts::push_stack( vm, context[61] );
    refalrts::push_stack( vm, context[57] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[38] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[65], context[67] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[53], context[64] );
    res = refalrts::splice_evar( res, context[10], context[13] );
    res = refalrts::splice_evar( res, context[49], context[52] );
    res = refalrts::splice_evar( res, context[22], context[1] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_evar( res, context[14], context[21] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[40], context[42] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[35], context[39] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch-VM@1/4 (/7 e.Indent0/23 )/8 s.Direction/9 s.BracketNumber0/10 (/13 e.Call/25 )/14 (/17 e.Call0/27 )/18 (/21 e.Call1/29 )/22 e.Call2/31 >/1
    context[23] = context[5];
    context[24] = context[6];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.Indent0 as range 23
    // closed e.Call as range 25
    // closed e.Call0 as range 27
    // closed e.Call1 as range 29
    // closed e.Call2 as range 31
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 23
    //DEBUG: e.Call: 25
    //DEBUG: e.Call0: 27
    //DEBUG: e.Call1: 29
    //DEBUG: e.Call2: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/33 e.Indent0/23/34"if( ! refalrts::repeated_evar_"/36 </38 & StrFromDirection*2/39 Tile{ AsIs: s.Direction/9 } >/40"( vm, context["/41 Tile{ AsIs: e.Call/25 }"], contex"/43 Tile{ HalfReuse: 't'/14 HalfReuse: '['/17 AsIs: e.Call0/27 HalfReuse: ']'/18 HalfReuse: ','/21 }" context["/45 Tile{ AsIs: e.Call1/29 }"], context"/47 Tile{ HalfReuse: '['/22 AsIs: e.Call2/31 HalfReuse: ']'/1 }", context["/49 </51 & Symb/52 Tile{ AsIs: s.BracketNumber0/10 HalfReuse: >/13 }"], context["/53 </55 & Symb/56 </57 & Add/58 1/59 s.BracketNumber0/10/60 >/61 >/62"] ) "/63 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/23 HalfReuse: ' '/8 }" continue;"/65 )/67 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::copy_evar(vm, context[34], context[35], context[23], context[24]);
    refalrts::alloc_chars(vm, context[36], context[37], "if( ! refalrts::repeated_evar_", 30);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[40]);
    refalrts::alloc_chars(vm, context[41], context[42], "( vm, context[", 14);
    refalrts::alloc_chars(vm, context[43], context[44], "], contex", 9);
    refalrts::alloc_chars(vm, context[45], context[46], " context[", 9);
    refalrts::alloc_chars(vm, context[47], context[48], "], context", 10);
    refalrts::alloc_chars(vm, context[49], context[50], ", context[", 10);
    refalrts::alloc_open_call(vm, context[51]);
    refalrts::alloc_name(vm, context[52], functions[efunc_Symb]);
    refalrts::alloc_chars(vm, context[53], context[54], "], context[", 11);
    refalrts::alloc_open_call(vm, context[55]);
    refalrts::alloc_name(vm, context[56], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[57]);
    refalrts::alloc_name(vm, context[58], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[59], 1UL);
    refalrts::copy_stvar(vm, context[60], context[10]);
    refalrts::alloc_close_call(vm, context[61]);
    refalrts::alloc_close_call(vm, context[62]);
    refalrts::alloc_chars(vm, context[63], context[64], "] ) ", 4);
    refalrts::alloc_chars(vm, context[65], context[66], " continue;", 10);
    refalrts::alloc_close_bracket(vm, context[67]);
    refalrts::reinit_char(context[14], 't');
    refalrts::reinit_char(context[17], '[');
    refalrts::reinit_char(context[18], ']');
    refalrts::reinit_char(context[21], ',');
    refalrts::reinit_char(context[22], '[');
    refalrts::reinit_char(context[1], ']');
    refalrts::reinit_close_call(context[13]);
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::link_brackets( context[7], context[67] );
    refalrts::link_brackets( context[33], context[4] );
    refalrts::push_stack( vm, context[62] );
    refalrts::push_stack( vm, context[55] );
    refalrts::push_stack( vm, context[61] );
    refalrts::push_stack( vm, context[57] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[38] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[65], context[67] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[53], context[64] );
    res = refalrts::splice_evar( res, context[10], context[13] );
    res = refalrts::splice_evar( res, context[49], context[52] );
    res = refalrts::splice_evar( res, context[22], context[1] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_evar( res, context[14], context[21] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[40], context[42] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[33], context[39] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintMatch-VM@1/4 (/7 e.Indent0/5 )/8 s.dyn0/9 s.BracketNumber0/10 (/13 e.Call/11 )/14 (/17 e.Call0/15 )/18 (/21 e.Call1/19 )/22 e.Call2/2 >/1
  // closed e.Indent0 as range 5
  // closed e.Call as range 11
  // closed e.Call0 as range 15
  // closed e.Call1 as range 19
  // closed e.Call2 as range 2
  //DEBUG: s.dyn0: 9
  //DEBUG: s.BracketNumber0: 10
  //DEBUG: e.Indent0: 5
  //DEBUG: e.Call: 11
  //DEBUG: e.Call0: 15
  //DEBUG: e.Call1: 19
  //DEBUG: e.Call2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch-VM@0/4 AsIs: (/7 AsIs: e.Indent0/5 AsIs: )/8 AsIs: s.dyn0/9 AsIs: s.BracketNumber0/10 AsIs: (/13 }"repeated_evar"/23 Tile{ AsIs: )/22 }"context["/25 Tile{ AsIs: e.Call/11 }"], contex"/27 Tile{ HalfReuse: 't'/14 HalfReuse: '['/17 AsIs: e.Call0/15 HalfReuse: ']'/18 HalfReuse: ','/21 }" context["/29 Tile{ AsIs: e.Call1/19 }"], context["/31 Tile{ AsIs: e.Call2/2 } ']'/33 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_chars(vm, context[23], context[24], "repeated_evar", 13);
  refalrts::alloc_chars(vm, context[25], context[26], "context[", 8);
  refalrts::alloc_chars(vm, context[27], context[28], "], contex", 9);
  refalrts::alloc_chars(vm, context[29], context[30], " context[", 9);
  refalrts::alloc_chars(vm, context[31], context[32], "], context[", 11);
  refalrts::alloc_char(vm, context[33], ']');
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatchm_VM_Z0]);
  refalrts::reinit_char(context[14], 't');
  refalrts::reinit_char(context[17], '[');
  refalrts::reinit_char(context[18], ']');
  refalrts::reinit_char(context[21], ',');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[22] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[33] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[14], context[21] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrintMatchm_VM_Z1("PrintMatch-VM@1", COOKIE1_, COOKIE2_, func_gen_PrintMatchm_VM_Z1);


static refalrts::FnResult func_gen_PrintMatchm_VM_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  // </0 & PrintMatch-VM@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PrintMatch-VM@2/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 (/13 e.new4/11 )/14 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new4 as range 11
  // closed e.new5 as range 2
  do {
    // </0 & PrintMatch-VM@2/4 (/7 e.new8/15 )/8 # AlgTerm/9 s.new6/10 (/13 e.new9/17 )/14 e.new7/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[9] ) )
      continue;
    // closed e.new8 as range 15
    // closed e.new9 as range 17
    // closed e.new7 as range 19
    do {
      // </0 & PrintMatch-VM@2/4 (/7 ' '/27 ' '/28 )/8 # AlgTerm/9 s.BracketNumber0/10 (/13 e.Call/23 )/14 e.Call0/25 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[27] )
        continue;
      context[28] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[28] )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.Call as range 23
      // closed e.Call0 as range 25
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 23
      //DEBUG: e.Call0: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/29"  if( ! refalrts::repeated_stvar_term( vm, context["/30 Tile{ AsIs: e.Call/23 }"], context"/32 Tile{ HalfReuse: '['/14 AsIs: e.Call0/25 HalfReuse: ']'/1 }", con"/34 Tile{ HalfReuse: 't'/0 HalfReuse: 'e'/4 HalfReuse: 'x'/7 Reuse: 't'/27 Reuse: '['/28 HalfReuse: </8 HalfReuse: & Symb/9 AsIs: s.BracketNumber0/10 HalfReuse: >/13 }"] ) )"/36 )/38 (/39"    return refalrts::cRecognitionImpossible;"/40 )/42 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_chars(vm, context[30], context[31], "  if( ! refalrts::repeated_stvar_term( vm, context[", 51);
      refalrts::alloc_chars(vm, context[32], context[33], "], context", 10);
      refalrts::alloc_chars(vm, context[34], context[35], ", con", 5);
      refalrts::alloc_chars(vm, context[36], context[37], "] ) )", 5);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_chars(vm, context[40], context[41], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::reinit_char(context[14], '[');
      refalrts::reinit_char(context[1], ']');
      refalrts::reinit_char(context[0], 't');
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_char(context[7], 'x');
      refalrts::update_char(context[27], 't');
      refalrts::update_char(context[28], '[');
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[9], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[13]);
      refalrts::link_brackets( context[39], context[42] );
      refalrts::link_brackets( context[29], context[38] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[36], context[42] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[14], context[1] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch-VM@2/4 (/7 e.Indent0/21 )/8 # AlgTerm/9 s.BracketNumber0/10 (/13 e.Call/23 )/14 e.Call0/25 >/1
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    // closed e.Indent0 as range 21
    // closed e.Call as range 23
    // closed e.Call0 as range 25
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 21
    //DEBUG: e.Call: 23
    //DEBUG: e.Call0: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/27 e.Indent0/21/28"if( ! refalrts::repeated_stvar_term( vm, context"/30 Tile{ HalfReuse: '['/13 AsIs: e.Call/23 HalfReuse: ']'/14 }", context["/32 Tile{ AsIs: e.Call0/25 }"], context["/34 </36 & Symb/37 Tile{ AsIs: s.BracketNumber0/10 } >/38"] ) "/39 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/21 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/41 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::copy_evar(vm, context[28], context[29], context[21], context[22]);
    refalrts::alloc_chars(vm, context[30], context[31], "if( ! refalrts::repeated_stvar_term( vm, context", 48);
    refalrts::alloc_chars(vm, context[32], context[33], ", context[", 10);
    refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "] ) ", 4);
    refalrts::alloc_chars(vm, context[41], context[42], "continue;", 9);
    refalrts::reinit_char(context[13], '[');
    refalrts::reinit_char(context[14], ']');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[27], context[4] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[36] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[38], context[40] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[34], context[37] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[27], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch-VM@2/4 (/7 e.new8/15 )/8 # AlgLeft/9 s.new6/10 (/13 e.new9/17 )/14 e.new7/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[9] ) )
      continue;
    // closed e.new8 as range 15
    // closed e.new9 as range 17
    // closed e.new7 as range 19
    do {
      // </0 & PrintMatch-VM@2/4 (/7 ' '/27 ' '/28 )/8 # AlgLeft/9 s.BracketNumber0/10 (/13 e.Call/23 )/14 e.Call0/25 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[27] )
        continue;
      context[28] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[28] )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.Call as range 23
      // closed e.Call0 as range 25
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 23
      //DEBUG: e.Call0: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/29"  if( ! refalrts::repeated_stvar_left( vm, context["/30 Tile{ AsIs: e.Call/23 }"], context"/32 Tile{ HalfReuse: '['/14 AsIs: e.Call0/25 HalfReuse: ']'/1 }", con"/34 Tile{ HalfReuse: 't'/0 HalfReuse: 'e'/4 HalfReuse: 'x'/7 Reuse: 't'/27 Reuse: '['/28 HalfReuse: </8 HalfReuse: & Symb/9 AsIs: s.BracketNumber0/10 HalfReuse: >/13 }"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.BracketNumber0/10/43 >/44 >/45"] ) )"/46 )/48 (/49"    return refalrts::cRecognitionImpossible;"/50 )/52 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_chars(vm, context[30], context[31], "  if( ! refalrts::repeated_stvar_left( vm, context[", 51);
      refalrts::alloc_chars(vm, context[32], context[33], "], context", 10);
      refalrts::alloc_chars(vm, context[34], context[35], ", con", 5);
      refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[42], 1UL);
      refalrts::copy_stvar(vm, context[43], context[10]);
      refalrts::alloc_close_call(vm, context[44]);
      refalrts::alloc_close_call(vm, context[45]);
      refalrts::alloc_chars(vm, context[46], context[47], "] ) )", 5);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::alloc_chars(vm, context[50], context[51], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::reinit_char(context[14], '[');
      refalrts::reinit_char(context[1], ']');
      refalrts::reinit_char(context[0], 't');
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_char(context[7], 'x');
      refalrts::update_char(context[27], 't');
      refalrts::update_char(context[28], '[');
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[9], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[13]);
      refalrts::link_brackets( context[49], context[52] );
      refalrts::link_brackets( context[29], context[48] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[36], context[52] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[14], context[1] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch-VM@2/4 (/7 e.Indent0/21 )/8 # AlgLeft/9 s.BracketNumber0/10 (/13 e.Call/23 )/14 e.Call0/25 >/1
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    // closed e.Indent0 as range 21
    // closed e.Call as range 23
    // closed e.Call0 as range 25
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 21
    //DEBUG: e.Call: 23
    //DEBUG: e.Call0: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/27 e.Indent0/21/28"if( ! refalrts::repeated_stvar_left( vm, context"/30 Tile{ HalfReuse: '['/13 AsIs: e.Call/23 HalfReuse: ']'/14 }", context["/32 Tile{ AsIs: e.Call0/25 }"], context["/34 </36 & Symb/37 Tile{ AsIs: s.BracketNumber0/10 } >/38"], context["/39 </41 & Symb/42 </43 & Add/44 1/45 s.BracketNumber0/10/46 >/47 >/48"] ) "/49 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/21 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/51 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::copy_evar(vm, context[28], context[29], context[21], context[22]);
    refalrts::alloc_chars(vm, context[30], context[31], "if( ! refalrts::repeated_stvar_left( vm, context", 48);
    refalrts::alloc_chars(vm, context[32], context[33], ", context[", 10);
    refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "], context[", 11);
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_name(vm, context[42], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[43]);
    refalrts::alloc_name(vm, context[44], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[45], 1UL);
    refalrts::copy_stvar(vm, context[46], context[10]);
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::alloc_close_call(vm, context[48]);
    refalrts::alloc_chars(vm, context[49], context[50], "] ) ", 4);
    refalrts::alloc_chars(vm, context[51], context[52], "continue;", 9);
    refalrts::reinit_char(context[13], '[');
    refalrts::reinit_char(context[14], ']');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[27], context[4] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[36] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[38], context[50] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[34], context[37] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[27], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch-VM@2/4 (/7 e.new8/15 )/8 # AlgRight/9 s.new6/10 (/13 e.new9/17 )/14 e.new7/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[9] ) )
      continue;
    // closed e.new8 as range 15
    // closed e.new9 as range 17
    // closed e.new7 as range 19
    do {
      // </0 & PrintMatch-VM@2/4 (/7 ' '/27 ' '/28 )/8 # AlgRight/9 s.BracketNumber0/10 (/13 e.Call/23 )/14 e.Call0/25 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[27] )
        continue;
      context[28] = refalrts::char_left( ' ', context[21], context[22] );
      if( ! context[28] )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.Call as range 23
      // closed e.Call0 as range 25
      //DEBUG: s.BracketNumber0: 10
      //DEBUG: e.Call: 23
      //DEBUG: e.Call0: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/29"  if( ! refalrts::repeated_stvar_right( vm, context["/30 Tile{ AsIs: e.Call/23 }"], context"/32 Tile{ HalfReuse: '['/14 AsIs: e.Call0/25 HalfReuse: ']'/1 }", con"/34 Tile{ HalfReuse: 't'/0 HalfReuse: 'e'/4 HalfReuse: 'x'/7 Reuse: 't'/27 Reuse: '['/28 HalfReuse: </8 HalfReuse: & Symb/9 AsIs: s.BracketNumber0/10 HalfReuse: >/13 }"], context["/36 </38 & Symb/39 </40 & Add/41 1/42 s.BracketNumber0/10/43 >/44 >/45"] ) )"/46 )/48 (/49"    return refalrts::cRecognitionImpossible;"/50 )/52 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_chars(vm, context[30], context[31], "  if( ! refalrts::repeated_stvar_right( vm, context[", 52);
      refalrts::alloc_chars(vm, context[32], context[33], "], context", 10);
      refalrts::alloc_chars(vm, context[34], context[35], ", con", 5);
      refalrts::alloc_chars(vm, context[36], context[37], "], context[", 11);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::alloc_name(vm, context[39], functions[efunc_Symb]);
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[42], 1UL);
      refalrts::copy_stvar(vm, context[43], context[10]);
      refalrts::alloc_close_call(vm, context[44]);
      refalrts::alloc_close_call(vm, context[45]);
      refalrts::alloc_chars(vm, context[46], context[47], "] ) )", 5);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::alloc_chars(vm, context[50], context[51], "    return refalrts::cRecognitionImpossible;", 44);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::reinit_char(context[14], '[');
      refalrts::reinit_char(context[1], ']');
      refalrts::reinit_char(context[0], 't');
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_char(context[7], 'x');
      refalrts::update_char(context[27], 't');
      refalrts::update_char(context[28], '[');
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[9], functions[efunc_Symb]);
      refalrts::reinit_close_call(context[13]);
      refalrts::link_brackets( context[49], context[52] );
      refalrts::link_brackets( context[29], context[48] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[40] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[36], context[52] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[14], context[1] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PrintMatch-VM@2/4 (/7 e.Indent0/21 )/8 # AlgRight/9 s.BracketNumber0/10 (/13 e.Call/23 )/14 e.Call0/25 >/1
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    // closed e.Indent0 as range 21
    // closed e.Call as range 23
    // closed e.Call0 as range 25
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 21
    //DEBUG: e.Call: 23
    //DEBUG: e.Call0: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/27 e.Indent0/21/28"if( ! refalrts::repeated_stvar_right( vm, context"/30 Tile{ HalfReuse: '['/13 AsIs: e.Call/23 HalfReuse: ']'/14 }", context["/32 Tile{ AsIs: e.Call0/25 }"], context["/34 </36 & Symb/37 Tile{ AsIs: s.BracketNumber0/10 } >/38"], context["/39 </41 & Symb/42 </43 & Add/44 1/45 s.BracketNumber0/10/46 >/47 >/48"] ) "/49 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/21 HalfReuse: ' '/8 HalfReuse: ' '/9 }"continue;"/51 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::copy_evar(vm, context[28], context[29], context[21], context[22]);
    refalrts::alloc_chars(vm, context[30], context[31], "if( ! refalrts::repeated_stvar_right( vm, context", 49);
    refalrts::alloc_chars(vm, context[32], context[33], ", context[", 10);
    refalrts::alloc_chars(vm, context[34], context[35], "], context[", 11);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_chars(vm, context[39], context[40], "], context[", 11);
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_name(vm, context[42], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[43]);
    refalrts::alloc_name(vm, context[44], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[45], 1UL);
    refalrts::copy_stvar(vm, context[46], context[10]);
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::alloc_close_call(vm, context[48]);
    refalrts::alloc_chars(vm, context[49], context[50], "] ) ", 4);
    refalrts::alloc_chars(vm, context[51], context[52], "continue;", 9);
    refalrts::reinit_char(context[13], '[');
    refalrts::reinit_char(context[14], ']');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_char(context[9], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[27], context[4] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[36] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[38], context[50] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[34], context[37] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[27], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch-VM@2/4 (/7 ' '/21 ' '/22 )/8 s.Direction/9 s.BracketNumber0/10 (/13 e.Call/17 )/14 e.Call0/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    context[21] = refalrts::char_left( ' ', context[15], context[16] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( ' ', context[15], context[16] );
    if( ! context[22] )
      continue;
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    // closed e.Call as range 17
    // closed e.Call0 as range 19
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Call: 17
    //DEBUG: e.Call0: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/23"  if( ! refalrts::repeated_stvar_"/24 </26 & StrFromDirection*2/27 Tile{ AsIs: s.Direction/9 } >/28"( vm, context"/29 Tile{ HalfReuse: '['/13 AsIs: e.Call/17 HalfReuse: ']'/14 }", context["/31 Tile{ AsIs: e.Call0/19 }"], context["/33 </35 & Symb/36 Tile{ AsIs: s.BracketNumber0/10 } >/37"], context["/38 </40 & Symb/41 </42 & Add/43 1/44 s.BracketNumber0/10/45 >/46 >/47"] ) "/48 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: ' '/21 AsIs: ' '/22 HalfReuse: ' '/8 }" return refalrts::cRecognitionImpossible;"/50 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_chars(vm, context[24], context[25], "  if( ! refalrts::repeated_stvar_", 33);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "( vm, context", 13);
    refalrts::alloc_chars(vm, context[31], context[32], ", context[", 10);
    refalrts::alloc_chars(vm, context[33], context[34], "], context[", 11);
    refalrts::alloc_open_call(vm, context[35]);
    refalrts::alloc_name(vm, context[36], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_chars(vm, context[38], context[39], "], context[", 11);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[42]);
    refalrts::alloc_name(vm, context[43], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[44], 1UL);
    refalrts::copy_stvar(vm, context[45], context[10]);
    refalrts::alloc_close_call(vm, context[46]);
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::alloc_chars(vm, context[48], context[49], "] ) ", 4);
    refalrts::alloc_chars(vm, context[50], context[51], " return refalrts::cRecognitionImpossible;", 41);
    refalrts::reinit_char(context[13], '[');
    refalrts::reinit_char(context[14], ']');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[23], context[4] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[37], context[49] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[33], context[36] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[23], context[27] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PrintMatch-VM@2/4 (/7 e.Indent0/15 )/8 s.Direction/9 s.BracketNumber0/10 (/13 e.Call/17 )/14 e.Call0/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.Indent0 as range 15
    // closed e.Call as range 17
    // closed e.Call0 as range 19
    //DEBUG: s.Direction: 9
    //DEBUG: s.BracketNumber0: 10
    //DEBUG: e.Indent0: 15
    //DEBUG: e.Call: 17
    //DEBUG: e.Call0: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/21 e.Indent0/15/22"if( ! refalrts::repeated_stvar_"/24 </26 & StrFromDirection*2/27 Tile{ AsIs: s.Direction/9 } >/28"( vm, context"/29 Tile{ HalfReuse: '['/13 AsIs: e.Call/17 HalfReuse: ']'/14 }", context["/31 Tile{ AsIs: e.Call0/19 }"], context["/33 </35 & Symb/36 Tile{ AsIs: s.BracketNumber0/10 } >/37"], context["/38 </40 & Symb/41 </42 & Add/43 1/44 s.BracketNumber0/10/45 >/46 >/47"] ) "/48 Tile{ HalfReuse: ')'/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Indent0/15 HalfReuse: ' '/8 }" continue;"/50 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::copy_evar(vm, context[22], context[23], context[15], context[16]);
    refalrts::alloc_chars(vm, context[24], context[25], "if( ! refalrts::repeated_stvar_", 31);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_gen_StrFromDirection_D2]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_chars(vm, context[29], context[30], "( vm, context", 13);
    refalrts::alloc_chars(vm, context[31], context[32], ", context[", 10);
    refalrts::alloc_chars(vm, context[33], context[34], "], context[", 11);
    refalrts::alloc_open_call(vm, context[35]);
    refalrts::alloc_name(vm, context[36], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_chars(vm, context[38], context[39], "], context[", 11);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_Symb]);
    refalrts::alloc_open_call(vm, context[42]);
    refalrts::alloc_name(vm, context[43], functions[efunc_Add]);
    refalrts::alloc_number(vm, context[44], 1UL);
    refalrts::copy_stvar(vm, context[45], context[10]);
    refalrts::alloc_close_call(vm, context[46]);
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::alloc_chars(vm, context[48], context[49], "] ) ", 4);
    refalrts::alloc_chars(vm, context[50], context[51], " continue;", 10);
    refalrts::reinit_char(context[13], '[');
    refalrts::reinit_char(context[14], ']');
    refalrts::reinit_char(context[0], ')');
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_char(context[8], ' ');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::link_brackets( context[21], context[4] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[37], context[49] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[33], context[36] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[21], context[27] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PrintMatch-VM@2/4 (/7 e.Indent0/5 )/8 s.dyn0/9 s.BracketNumber0/10 (/13 e.Call/11 )/14 e.Call0/2 >/1
  // closed e.Indent0 as range 5
  // closed e.Call as range 11
  // closed e.Call0 as range 2
  //DEBUG: s.dyn0: 9
  //DEBUG: s.BracketNumber0: 10
  //DEBUG: e.Indent0: 5
  //DEBUG: e.Call: 11
  //DEBUG: e.Call0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintMatch-VM@0/4 AsIs: (/7 AsIs: e.Indent0/5 AsIs: )/8 AsIs: s.dyn0/9 AsIs: s.BracketNumber0/10 AsIs: (/13 }"repeated_stvar"/15 Tile{ AsIs: )/14 }"context["/17 Tile{ AsIs: e.Call/11 }"], context["/19 Tile{ AsIs: e.Call0/2 } ']'/21 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_chars(vm, context[15], context[16], "repeated_stvar", 14);
  refalrts::alloc_chars(vm, context[17], context[18], "context[", 8);
  refalrts::alloc_chars(vm, context[19], context[20], "], context[", 11);
  refalrts::alloc_char(vm, context[21], ']');
  refalrts::update_name(context[4], functions[efunc_gen_PrintMatchm_VM_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PrintMatchm_VM_Z2("PrintMatch-VM@2", COOKIE1_, COOKIE2_, func_gen_PrintMatchm_VM_Z2);


static refalrts::FnResult func_gen_Apply_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@3/4 t.new1/5 e.new2/2 t.new3/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply@3/4 s.Fn/5 e.X/9 t.X/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X as range 9
    //DEBUG: t.X: 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.X: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.X/9 AsIs: t.X/7 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@3/4 (/5 t.Closure/13 e.Bounded/11 )/6 e.X/9 t.X/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    // closed e.X as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded as range 11
    //DEBUG: t.X: 7
    //DEBUG: e.X: 9
    //DEBUG: t.Closure: 13
    //DEBUG: e.Bounded: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@3/4 } Tile{ AsIs: t.Closure/13 } Tile{ AsIs: e.Bounded/11 } Tile{ AsIs: e.X/9 } Tile{ AsIs: t.X/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@3/4 t.dyn0/5 e.X/2 t.X/7 >/1
  // closed e.X as range 2
  //DEBUG: t.dyn0: 5
  //DEBUG: t.X: 7
  //DEBUG: e.X: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: e.X/2 AsIs: t.X/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z3("Apply@3", COOKIE1_, COOKIE2_, func_gen_Apply_Z3);


static refalrts::FnResult func_gen_Apply_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Apply@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@4/4 t.new1/5 e.new2/2 t.new3/9 t.new4/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_right( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply@4/4 s.Fn/5 e.X/11 t.X/9 t.X0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X as range 11
    //DEBUG: t.X: 9
    //DEBUG: t.X0: 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.X: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.X/11 AsIs: t.X/9 AsIs: t.X0/7 HalfReuse: & $table/1 } >/13 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@4/4 (/5 t.Closure/15 e.Bounded/13 )/6 e.X/11 t.X/9 t.X0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
      continue;
    // closed e.X as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Bounded as range 13
    //DEBUG: t.X: 9
    //DEBUG: t.X0: 7
    //DEBUG: e.X: 11
    //DEBUG: t.Closure: 15
    //DEBUG: e.Bounded: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@4/4 } Tile{ AsIs: t.Closure/15 } Tile{ AsIs: e.Bounded/13 } Tile{ AsIs: e.X/11 } Tile{ AsIs: t.X/9 AsIs: t.X0/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@4/4 t.dyn0/5 e.X/2 t.X/9 t.X0/7 >/1
  // closed e.X as range 2
  //DEBUG: t.dyn0: 5
  //DEBUG: t.X: 9
  //DEBUG: t.X0: 7
  //DEBUG: e.X: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: e.X/2 AsIs: t.X/9 AsIs: t.X0/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z4("Apply@4", COOKIE1_, COOKIE2_, func_gen_Apply_Z4);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@1/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@1/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@1/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & GenCommand-Native@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_GenCommandm_Native_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z1("DoMapAccum$1=1@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z1);


//End of file
