// This file automatically generated from 'OptTree-Drive-Expr.ref'
// Don't edit! Edit 'OptTree-Drive-Expr.ref' and recompile it

#include "refalrts.h"

#define cookie_ns cookie_ns_1402091233_3660287485
#define COOKIE1_ 1402091233U
#define COOKIE2_ 3660287485U

enum efunc {
  efunc_u_u_Stepm_Drop = 0,
  efunc_u_u_Metau_Mu = 1,
  efunc_d_table = 2,
  efunc_Map = 3,
  efunc_gen_Apply_Z3 = 4,
  efunc_gen_Apply_Z0 = 5,
  efunc_Reduce = 6,
  efunc_gen_Reduce_S1A1 = 7,
  efunc_gen_Apply_Z2 = 8,
  efunc_Apply = 9,
  efunc_DoMapAccum = 10,
  efunc_gen_DoMapAccum_S1A1 = 11,
  efunc_Add = 12,
  efunc_Sub = 13,
  efunc_Fetch = 14,
  efunc_Pipe = 15,
  efunc_gen_Pipe_S2L1 = 16,
  efunc_gen_Pipe_S3L1 = 17,
  efunc_gen_Reduce_Z1 = 18,
  efunc_gen_OptTreem_Drivem_Expr_B1S2A1 = 19,
  efunc_gen_OptExprm_Aux_A1 = 20,
  efunc_gen_FindOptInfom_Aux_Z1 = 21,
  efunc_gen_FindOptInfom_Aux_Z2 = 22,
  efunc_gen_FindOptInfom_Aux_Z3 = 23,
  efunc_gen_OptExprm_Aux_D3 = 24,
  efunc_gen_OptTreem_Drivem_Expr_B1 = 25,
  efunc_gen_DoMapAccum_Z1 = 26,
  efunc_gen_DoMapAccum_Z2 = 27,
  efunc_gen_OptExprm_Aux_A2 = 28,
  efunc_OptExprm_MakeSubstitutions = 29,
  efunc_MakeColdSolution = 30,
  efunc_gen_IntrinsicCall_S1B1 = 31,
  efunc_Intrinsicm_Mu = 32,
  efunc_gen_IntrinsicCall_S2A2B1 = 33,
  efunc_gen_IntrinsicCall_S2A2 = 34,
  efunc_gen_Intrinsicm_Add_B1 = 35,
  efunc_ArithmArgs = 36,
  efunc_gen_Intrinsicm_Sub_B1 = 37,
  efunc_gen_Intrinsicm_Mul_B1 = 38,
  efunc_gen_Intrinsicm_Div_B1 = 39,
  efunc_gen_Intrinsicm_Mod_B1 = 40,
  efunc_gen_Intrinsicm_Divmod_B1 = 41,
  efunc_Intrinsicm_Compare = 42,
  efunc_Intrinsicm_Chr = 43,
  efunc_Intrinsicm_Ord = 44,
  efunc_Intrinsicm_Upper = 45,
  efunc_Intrinsicm_Lower = 46,
  efunc_Intrinsicm_Numb = 47,
  efunc_Intrinsicm_Symb = 48,
  efunc_Intrinsicm_Implode = 49,
  efunc_Intrinsicm_Implodeu_Ext = 50,
  efunc_gen_IntrinsicCall_S2A2B1Z1 = 51,
  efunc_gen_Map_Z2 = 52,
  efunc_gen_IntrinsicCall_S2A2B1Z2 = 53,
  efunc_gen_Intrinsicm_Type_S4A1Z1 = 54,
  efunc_Type = 55,
  efunc_gen_Intrinsicm_Type_S4A1Z2 = 56,
  efunc_gen_IntrinsicCall_S2A2B1Z3 = 57,
  efunc_Implodeu_Ext = 58,
  efunc_gen_Intrinsicm_Type_S4A1B1D7 = 59,
  efunc_gen_IntrinsicCall_S2A2B1Z4 = 60,
  efunc_gen_Intrinsicm_Type_S4A1 = 61,
  efunc_gen_Intrinsicm_Type_D5 = 62,
  efunc_Intrinsicm_Lenw = 63,
  efunc_Intrinsicm_First = 64,
  efunc_Intrinsicm_Last = 65,
  efunc_gen_Intrinsicm_Mu_S1B1S3C1 = 66,
  efunc_ArithmeticSymbolToFunction = 67,
  efunc_gen_Intrinsicm_Mu_S1B1S4C1 = 68,
  efunc_gen_MakeSubstitutionm_FromMetatables_B1 = 69,
  efunc_gen_Intrinsicm_Mu_S1B1S6C1 = 70,
  efunc_AllChars = 71,
  efunc_MakeSubstitutionm_FromMetatables = 72,
  efunc_gen_Intrinsicm_Mu_S1C1 = 73,
  efunc_gen_Intrinsicm_Mu_S1B1 = 74,
  efunc_DoAllChars = 75,
  efunc_gen_MakeSubstitutionm_FromMetatables_B1S1A1 = 76,
  efunc_gen_MakeSubstitutionm_FromMetatables_B1S1A1B1 = 77,
  efunc_NumberToSymbols = 78,
  efunc_gen_ArithmArgs_S1C1 = 79,
  efunc_ArithmOneArg = 80,
  efunc_gen_ArithmArgs_S1C2 = 81,
  efunc_gen_ArithmArgs_S2C1 = 82,
  efunc_gen_ArithmArgs_S3C1 = 83,
  efunc_gen_ArithmOneArg_S1C1 = 84,
  efunc_ArithmeticFunctions = 85,
  efunc_gen_ArithmOneArg_S2C1 = 86,
  efunc_Numberm_Check = 87,
  efunc_SymbolsToNumber = 88,
  efunc_Numberm_Checkm_AllNumbers = 89,
  efunc_gen_Map_Z3 = 90,
  efunc_gen_Map_Z4 = 91,
  efunc_Mul = 92,
  efunc_Div = 93,
  efunc_Mod = 94,
  efunc_gen_Intrinsicm_Divmod_B1S2A1 = 95,
  efunc_Divmod = 96,
  efunc_gen_Intrinsicm_Compare_S1C1 = 97,
  efunc_Compare = 98,
  efunc_gen_Intrinsicm_Chr_S1C1 = 99,
  efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z1 = 100,
  efunc_gen_Intrinsicm_Chr_S1A2 = 101,
  efunc_gen_StaticSubstitution_Z1 = 102,
  efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_B1D5 = 103,
  efunc_gen_Map_Z5 = 104,
  efunc_gen_Intrinsicm_Ord_S1C1 = 105,
  efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z2 = 106,
  efunc_gen_Intrinsicm_Ord_S1A2 = 107,
  efunc_gen_StaticSubstitution_Z2 = 108,
  efunc_gen_Intrinsicm_Upper_S1C1 = 109,
  efunc_gen_Intrinsicm_Upper_S1A2 = 110,
  efunc_gen_StaticSubstitution_Z3 = 111,
  efunc_gen_Intrinsicm_Lower_S1C1 = 112,
  efunc_gen_Intrinsicm_Lower_S1A2 = 113,
  efunc_gen_StaticSubstitution_Z4 = 114,
  efunc_gen_Intrinsicm_Numb_S1C1 = 115,
  efunc_gen_Intrinsicm_Numb_S1A2 = 116,
  efunc_Numb = 117,
  efunc_gen_Intrinsicm_Symb_S1A3 = 118,
  efunc_gen_Intrinsicm_Symb_S1C1 = 119,
  efunc_Symb = 120,
  efunc_gen_Intrinsicm_Symb_S1A2 = 121,
  efunc_Explode = 122,
  efunc_gen_Intrinsicm_Implode_S1A3 = 123,
  efunc_gen_Intrinsicm_Implode_S1C1 = 124,
  efunc_gen_Intrinsicm_Implode_S1A2 = 125,
  efunc_Implode = 126,
  efunc_gen_Intrinsicm_Implodeu_Ext_S1C1 = 127,
  efunc_gen_Intrinsicm_Lenw_S1C1 = 128,
  efunc_FixedLength = 129,
  efunc_gen_Intrinsicm_Lenw_S1A2 = 130,
  efunc_Lenw = 131,
  efunc_gen_Intrinsicm_First_S1C1 = 132,
  efunc_First = 133,
  efunc_gen_Intrinsicm_First_S1C2 = 134,
  efunc_gen_Intrinsicm_Last_S1C1 = 135,
  efunc_Last = 136,
  efunc_gen_Intrinsicm_Last_S1C2 = 137,
  efunc_gen_DoOptExprm_MakeSubstitutions_Z1 = 138,
  efunc_gen_OptExprm_MakeSubstitutions_S1C1 = 139,
  efunc_IntrinsicCall = 140,
  efunc_gen_OptExprm_MakeSubstitutions_S2C1 = 141,
  efunc_IsPassiveCall = 142,
  efunc_gen_OptExprm_MakeSubstitutions_S3C1 = 143,
  efunc_OneOf = 144,
  efunc_gen_OptExprm_MakeSubstitutions_S3A2 = 145,
  efunc_DecreaseMode = 146,
  efunc_gen_MakeColdSolution_S1C1 = 147,
  efunc_eDRIVEN = 148,
  efunc_RemainderFuncIncName = 149,
  efunc_gen_DoOptExprm_MakeSubstitutions_Z2 = 150,
  efunc_gen_DoOptExprm_MakeSubstitutions_S1B1S1A1 = 151,
  efunc_gen_Map_Z6 = 152,
  efunc_gen_DoOptExprm_MakeSubstitutions_S1B1S2C1 = 153,
  efunc_gen_DoOptExprm_MakeSubstitutions_S1B1S2A2 = 154,
  efunc_gen_Map_Z7 = 155,
  efunc_DoOptExprm_MakeSubstitutions = 156,
  efunc_gen_MakeColdSolution_Z1 = 157,
  efunc_gen_DoOptExprm_MakeSubstitutions_S1B1 = 158,
  efunc_Solve = 159,
  efunc_DropLeft = 160,
  efunc_gen_FindOptInfom_Aux_S2A1 = 161,
  efunc_gen_FindOptimizedCallm_Term_S3B1S1B1 = 162,
  efunc_HashName = 163,
  efunc_gen_FindOptimizedCallm_Term_S3B1S1A2 = 164,
  efunc_gen_FindOptimizedCallm_Term_S3B1S1A1D1 = 165,
  efunc_gen_FindOptimizedCallm_Term_S1A1 = 166,
  efunc_gen_FindOptimizedCallm_Term_S2A1 = 167,
  efunc_gen_FindOptimizedCallm_Term_S3B1 = 168,
  efunc_gen_FindOptimizedCallm_Term_S4A1 = 169,
  efunc_gen_Map_Z1 = 170,
  efunc_gen_ApplyContractionsm_Term_S3B1 = 171,
  efunc_gen_Map_Z8 = 172,
  efunc_Mu = 173,
  efunc_Up = 174,
  efunc_Evm_met = 175,
  efunc_Residue = 176,
  efunc_u_u_Metau_Residue = 177,
  efunc_MapAccum = 178,
  efunc_UnBracket = 179,
  efunc_DelAccumulator = 180,
  efunc_Inc = 181,
  efunc_Dec = 182,
  efunc_IsPassiveCallm_Aux = 183,
  efunc_OptTreem_Drivem_Expr = 184,
  efunc_OptExprm_Aux = 185,
  efunc_Intrinsicm_Add = 186,
  efunc_Intrinsicm_Sub = 187,
  efunc_Intrinsicm_Mul = 188,
  efunc_Intrinsicm_Div = 189,
  efunc_Intrinsicm_Mod = 190,
  efunc_Intrinsicm_Divmod = 191,
  efunc_CheckArgsm_Intrinsicm_StaticSubstitution = 192,
  efunc_StaticSubstitution = 193,
  efunc_CharToNode = 194,
  efunc_Intrinsicm_Explode = 195,
  efunc_Intrinsicm_Type = 196,
  efunc_Cleanupm_Stepm_Drop = 197,
  efunc_FindOptInfo = 198,
  efunc_FindOptInfom_Aux = 199,
  efunc_CutSUF = 200,
  efunc_FindOptimizedCall = 201,
  efunc_FindOptimizedCallm_Term = 202,
  efunc_ApplyAssigns = 203,
  efunc_ApplyAssignsm_Term = 204,
  efunc_ApplyContractions = 205,
  efunc_ApplyContractionsm_Term = 206,
  efunc_gen_Apply_Z4 = 207,
  efunc_gen_Reduce_S1A1Z1 = 208,
  efunc_gen_IsPassiveCall_L1D2 = 209,
  efunc_gen_Reduce_Z0 = 210,
  efunc_gen_IsPassiveCall_L1Z0 = 211,
  efunc_gen_DoMapAccum_S1A1Z1 = 212,
  efunc_gen_FindOptimizedCallm_Term_D5 = 213,
  efunc_gen_DoMapAccum_Z0 = 214,
  efunc_gen_FindOptimizedCallm_Term_Z0 = 215,
  efunc_gen_ApplyContractionsm_Term_D5 = 216,
  efunc_gen_Map_Z0 = 217,
  efunc_gen_ApplyContractions_L1Z0 = 218,
  efunc_gen_DoMapAccum_S1A1Z2 = 219,
  efunc_gen_OptExprm_Aux_L1D1 = 220,
  efunc_gen_OptExprm_Aux_L1Z0 = 221,
  efunc_gen_FindOptInfom_Aux_S2A1Z1 = 222,
  efunc_gen_FindOptInfom_Aux_Z0 = 223,
  efunc_gen_FindOptInfom_Aux_S2A1Z2 = 224,
  efunc_gen_FindOptInfom_Aux_S2A1Z3 = 225,
  efunc_gen_CharToNode_L1D1 = 226,
  efunc_gen_CharToNode_L1Z0 = 227,
  efunc_gen_IntrinsicCall_S2A2B1Z0 = 228,
  efunc_gen_Intrinsicm_Type_S4A1Z0 = 229,
  efunc_gen_SymbolsToNumber_L1D3 = 230,
  efunc_gen_SymbolsToNumber_L1Z0 = 231,
  efunc_gen_NumberToSymbols_L1D3 = 232,
  efunc_gen_NumberToSymbols_L1Z0 = 233,
  efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z0 = 234,
  efunc_gen_Map_Z9 = 235,
  efunc_gen_Chr_Z0 = 236,
  efunc_gen_StaticSubstitution_Z0 = 237,
  efunc_gen_StaticSubstitution_L1D3 = 238,
  efunc_gen_StaticSubstitution_L1Z0 = 239,
  efunc_gen_Map_Z10 = 240,
  efunc_gen_Ord_Z0 = 241,
  efunc_gen_Map_Z11 = 242,
  efunc_gen_Upper_Z0 = 243,
  efunc_gen_Map_Z12 = 244,
  efunc_gen_Lower_Z0 = 245,
  efunc_gen_DoOptExprm_MakeSubstitutions_S1B1Z1 = 246,
  efunc_gen_DoOptExprm_MakeSubstitutions_Z0 = 247,
  efunc_gen_DoOptExprm_MakeSubstitutions_S1B1Z2 = 248,
  efunc_gen_ApplyAssignsm_Term_D5 = 249,
  efunc_gen_ApplyAssigns_L1Z0 = 250,
  efunc_gen_DoOptExprm_MakeSubstitutions_S1B1S2A2L1A1 = 251,
  efunc_gen_DoOptExprm_MakeSubstitutions_S1B1S2A2L1D1 = 252,
  efunc_gen_DoOptExprm_MakeSubstitutions_S1B1S2A2L1Z0 = 253,
  efunc_gen_MakeColdSolution_Z1S1C1 = 254,
  efunc_gen_MakeColdSolution_Z0 = 255,
  efunc_gen_Reduce_S1A1Z0 = 256,
  efunc_gen_DoMapAccum_S1A1Z0 = 257,
  efunc_gen_FindOptInfom_Aux_S2A1Z0 = 258,
  efunc_Chr = 259,
  efunc_Ord = 260,
  efunc_Upper = 261,
  efunc_Lower = 262,
  efunc_gen_DoOptExprm_MakeSubstitutions_S1B1S1A1Z1 = 263,
  efunc_gen_DoOptExprm_MakeSubstitutions_S1B1Z1S2C1 = 264,
  efunc_gen_DoOptExprm_MakeSubstitutions_S1B1S2A2Z1 = 265,
  efunc_gen_DoOptExprm_MakeSubstitutions_S1B1Z0 = 266,
  efunc_gen_DoOptExprm_MakeSubstitutions_S1B1S1A1Z2 = 267,
  efunc_gen_DoOptExprm_MakeSubstitutions_S1B1Z2S2C1 = 268,
  efunc_gen_DoOptExprm_MakeSubstitutions_S1B1S1A1Z0 = 269,
  efunc_gen_DoOptExprm_MakeSubstitutions_S1B1S2A2Z0 = 270,
};


enum ident {
  ident_True = 0,
  ident_Brackets = 1,
  ident_ADTm_Brackets = 2,
  ident_CallBrackets = 3,
  ident_False = 4,
  ident_ColdCallBrackets = 5,
  ident_None = 6,
  ident_Symbol = 7,
  ident_Name = 8,
  ident_SUF = 9,
  ident_Ok = 10,
  ident_DRIVEN = 11,
  ident_Var = 12,
  ident_MakeColdCall = 13,
  ident_Identifier = 14,
  ident_Number = 15,
  ident_Char = 16,
  ident_ClosureBrackets = 17,
  ident_Fails = 18,
  ident_Metatables = 19,
  ident_Metatable = 20,
  ident_Const = 21,
  ident_ArithmResult = 22,
  ident_Function = 23,
  ident_Sentences = 24,
  ident_Intrinsic = 25,
  ident_Drive = 26,
  ident_Inline = 27,
  ident_NewFunction = 28,
  ident_GNm_Local = 29,
  ident_Success = 30,
  ident_Failure = 31,
  ident_Mu = 32,
  ident_Up = 33,
  ident_Evm_met = 34,
  ident_Residue = 35,
  ident_u_u_Metau_Residue = 36,
  ident_Apply = 37,
  ident_Map = 38,
  ident_Reduce = 39,
  ident_Fetch = 40,
  ident_MapAccum = 41,
  ident_DoMapAccum = 42,
  ident_UnBracket = 43,
  ident_DelAccumulator = 44,
  ident_Inc = 45,
  ident_Dec = 46,
  ident_Pipe = 47,
  ident_IsPassiveCall = 48,
  ident_IsPassiveCallm_Aux = 49,
  ident_OptTreem_Drivem_Expr = 50,
  ident_OptExprm_Aux = 51,
  ident_IntrinsicCall = 52,
  ident_eDRIVEN = 53,
  ident_Intrinsicm_Mu = 54,
  ident_ArithmeticSymbolToFunction = 55,
  ident_AllChars = 56,
  ident_DoAllChars = 57,
  ident_MakeSubstitutionm_FromMetatables = 58,
  ident_Intrinsicm_Add = 59,
  ident_ArithmArgs = 60,
  ident_ArithmOneArg = 61,
  ident_Numberm_Check = 62,
  ident_Numberm_Checkm_AllNumbers = 63,
  ident_SymbolsToNumber = 64,
  ident_NumberToSymbols = 65,
  ident_ArithmeticFunctions = 66,
  ident_Intrinsicm_Sub = 67,
  ident_Intrinsicm_Mul = 68,
  ident_Intrinsicm_Div = 69,
  ident_Intrinsicm_Mod = 70,
  ident_Intrinsicm_Divmod = 71,
  ident_Intrinsicm_Compare = 72,
  ident_Intrinsicm_Chr = 73,
  ident_CheckArgsm_Intrinsicm_StaticSubstitution = 74,
  ident_StaticSubstitution = 75,
  ident_Intrinsicm_Ord = 76,
  ident_Intrinsicm_Upper = 77,
  ident_Intrinsicm_Lower = 78,
  ident_Intrinsicm_Numb = 79,
  ident_Intrinsicm_Symb = 80,
  ident_CharToNode = 81,
  ident_Intrinsicm_Implode = 82,
  ident_Intrinsicm_Implodeu_Ext = 83,
  ident_Intrinsicm_Explode = 84,
  ident_Intrinsicm_Type = 85,
  ident_Intrinsicm_Lenw = 86,
  ident_FixedLength = 87,
  ident_Intrinsicm_First = 88,
  ident_Intrinsicm_Last = 89,
  ident_OptExprm_MakeSubstitutions = 90,
  ident_MakeColdSolution = 91,
  ident_DecreaseMode = 92,
  ident_DoOptExprm_MakeSubstitutions = 93,
  ident_Cleanupm_Stepm_Drop = 94,
  ident_DropLeft = 95,
  ident_FindOptInfo = 96,
  ident_FindOptInfom_Aux = 97,
  ident_CutSUF = 98,
  ident_FindOptimizedCall = 99,
  ident_FindOptimizedCallm_Term = 100,
  ident_ApplyAssigns = 101,
  ident_ApplyAssignsm_Term = 102,
  ident_ApplyContractions = 103,
  ident_ApplyContractionsm_Term = 104,
  ident_RemainderFuncIncName = 105,
};


static refalrts::FnResult func_Mu(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Mu/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Mu("Mu", COOKIE1_, COOKIE2_, func_Mu);


static refalrts::FnResult func_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Residue("Residue", COOKIE1_, COOKIE2_, func_Residue);


static refalrts::FnResult func_u_u_Metau_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & __Meta_Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_Metau_Residue("__Meta_Residue", COOKIE1_, COOKIE2_, func_u_u_Metau_Residue);


static refalrts::FnResult func_Apply(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Apply/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply/4 s.Fn/5 e.Argument/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.Argument as range 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.Argument: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.Argument/7 HalfReuse: & $table/1 } >/9 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply/4 (/5 t.Closure/9 e.Bounded/7 )/6 e.Argument/2 >/1
  context[7] = 0;
  context[8] = 0;
  if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument as range 2
  context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.Bounded as range 7
  //DEBUG: e.Argument: 2
  //DEBUG: t.Closure: 9
  //DEBUG: e.Bounded: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply/4 } Tile{ AsIs: t.Closure/9 } Tile{ AsIs: e.Bounded/7 } Tile{ AsIs: e.Argument/2 } Tile{ AsIs: >/1 ]] }
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Apply("Apply", COOKIE1_, COOKIE2_, func_Apply);


static refalrts::FnResult func_Map(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Map/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Map/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Map/4 s.Fn/5 t.Next/9 e.Tail/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      if( ! refalrts::svar_term( context[5], context[5] ) )
        continue;
      // closed e.Tail as range 11
      //DEBUG: t.Next: 9
      //DEBUG: s.Fn: 5
      //DEBUG: e.Tail: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: t.Next/9 } & $table/13 >/14 </15 & Map/16 s.Fn/5/17 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[13], functions[efunc_d_table]);
      refalrts::alloc_close_call(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_Map]);
      refalrts::copy_stvar(vm, context[17], context[5]);
      refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[13], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Map/4 (/5 t./15 e.0/13 )/6 t.Next/9 e.Tail/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      // closed e.Tail as range 11
      context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
      if( ! context[16] )
        continue;
      // closed e.0 as range 13
      //DEBUG: t.Next: 9
      //DEBUG: e.Tail: 11
      //DEBUG: t.: 15
      //DEBUG: e.0: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </17 & Apply@3/18 t./15/19 e.0/13/21 Tile{ AsIs: t.Next/9 } >/23 Tile{ AsIs: </0 AsIs: & Map/4 AsIs: (/5 AsIs: t./15 AsIs: e.0/13 AsIs: )/6 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_gen_Apply_Z3]);
      refalrts::copy_evar(vm, context[19], context[20], context[15], context[16]);
      refalrts::copy_evar(vm, context[21], context[22], context[13], context[14]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[17], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map/4 t.Fn/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Fn: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.Fn/5 AsIs: t.Next/9 } >/13 </14 & Map/15 t.Fn/5/16 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_Map]);
    refalrts::copy_evar(vm, context[16], context[17], context[5], context[6]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map/4 t.Fn/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Map/4 t.Fn/5 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Map("Map", COOKIE1_, COOKIE2_, func_Map);


static refalrts::FnResult func_gen_Reduce_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Reduce$1=1/4 t.Fn/5 (/9 e.Tail/7 )/10 t.Acc$a/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Tail as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5
  //DEBUG: e.Tail: 7
  //DEBUG: t.Acc$a: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce/4 AsIs: t.Fn/5 } Tile{ AsIs: t.Acc$a/11 } Tile{ AsIs: e.Tail/7 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Reduce]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1("Reduce$1=1", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1);


static refalrts::FnResult func_Reduce(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Reduce/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce/4 t.new1/5 t.new2/7 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Reduce/4 t.Fn/5 t.Acc/7 t.Next/11 e.Tail/9 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[12] = refalrts::tvar_left( context[11], context[9], context[10] );
    if( ! context[12] )
      continue;
    // closed e.Tail as range 9
    //DEBUG: t.Fn: 5
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 11
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & Reduce$1=1/14 t.Fn/5/15 (/17 Tile{ AsIs: e.Tail/9 } )/18 Tile{ AsIs: </0 Reuse: & Apply@2/4 AsIs: t.Fn/5 AsIs: t.Acc/7 AsIs: t.Next/11 } >/19 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Reduce_S1A1]);
    refalrts::copy_evar(vm, context[15], context[16], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce/4 t.Fn/5 t.Acc/7 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Reduce/4 t.Fn/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Reduce("Reduce", COOKIE1_, COOKIE2_, func_Reduce);


static refalrts::FnResult func_Fetch(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & Fetch/4 e.Argument/2 t.Function/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_right( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument as range 2
  //DEBUG: t.Function: 5
  //DEBUG: e.Argument: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply/4 } Tile{ AsIs: t.Function/5 } Tile{ AsIs: e.Argument/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Apply]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Fetch("Fetch", COOKIE1_, COOKIE2_, func_Fetch);


static refalrts::FnResult func_MapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & MapAccum/4 t.Fn/5 t.Acc/7 e.Tail/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail as range 2
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn/5 AsIs: t.Acc/7 } (/9 )/10 Tile{ AsIs: e.Tail/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MapAccum("MapAccum", COOKIE1_, COOKIE2_, func_MapAccum);


static refalrts::FnResult func_gen_DoMapAccum_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DoMapAccum$1=1/4 t.Fn/5 (/9 e.Scanned/7 )/10 (/13 e.Tail/11 )/14 t.Acc$a/15 e.StepScanned/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Scanned as range 7
  // closed e.Tail as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  // closed e.StepScanned as range 2
  //DEBUG: t.Fn: 5
  //DEBUG: e.Scanned: 7
  //DEBUG: e.Tail: 11
  //DEBUG: t.Acc$a: 15
  //DEBUG: e.StepScanned: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn/5 } Tile{ AsIs: t.Acc$a/15 } Tile{ AsIs: (/13 } Tile{ AsIs: e.Scanned/7 } Tile{ AsIs: e.StepScanned/2 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1("DoMapAccum$1=1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1);


static refalrts::FnResult func_DoMapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & DoMapAccum/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum/4 t.new1/5 t.new2/7 (/11 e.new3/9 )/12 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new3 as range 9
  // closed e.new4 as range 2
  do {
    // </0 & DoMapAccum/4 t.Fn/5 t.Acc/7 (/11 e.Scanned/13 )/12 t.Next/17 e.Tail/15 >/1
    context[13] = context[9];
    context[14] = context[10];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.Scanned as range 13
    context[18] = refalrts::tvar_left( context[17], context[15], context[16] );
    if( ! context[18] )
      continue;
    // closed e.Tail as range 15
    //DEBUG: t.Fn: 5
    //DEBUG: t.Acc: 7
    //DEBUG: e.Scanned: 13
    //DEBUG: t.Next: 17
    //DEBUG: e.Tail: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1/4 AsIs: t.Fn/5 } Tile{ AsIs: (/11 AsIs: e.Scanned/13 AsIs: )/12 } (/19 Tile{ AsIs: e.Tail/15 } )/20 </21 & Apply@2/22 t.Fn/5/23 Tile{ AsIs: t.Acc/7 } Tile{ AsIs: t.Next/17 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_Apply_Z2]);
    refalrts::copy_evar(vm, context[23], context[24], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[20], context[24] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum/4 t.Fn/5 t.Acc/7 (/11 e.Scanned/9 )/12 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Scanned as range 9
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7
  //DEBUG: e.Scanned: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoMapAccum/4 t.Fn/5 {REMOVED TILE} (/11 {REMOVED TILE} )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ AsIs: e.Scanned/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoMapAccum("DoMapAccum", COOKIE1_, COOKIE2_, func_DoMapAccum);


static refalrts::FnResult func_UnBracket(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & UnBracket/4 (/7 e.Expr/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr as range 5
  //DEBUG: e.Expr: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & UnBracket/4 (/7 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Expr/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnBracket("UnBracket", COOKIE1_, COOKIE2_, func_UnBracket);


static refalrts::FnResult func_DelAccumulator(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & DelAccumulator/4 t.Acc/5 e.Tail/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail as range 2
  //DEBUG: t.Acc: 5
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DelAccumulator/4 t.Acc/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Tail/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DelAccumulator("DelAccumulator", COOKIE1_, COOKIE2_, func_DelAccumulator);


static refalrts::FnResult func_Inc(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Inc/4 e.Num/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Num as range 2
  //DEBUG: e.Num: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: e.Num/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_Add]);
  refalrts::reinit_number(context[4], 1UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Inc("Inc", COOKIE1_, COOKIE2_, func_Inc);


static refalrts::FnResult func_Dec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Dec/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Dec/4 s.Num/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.Num: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 AsIs: s.Num/7 HalfReuse: 1/1 } >/8 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::update_name(context[4], functions[efunc_Sub]);
    refalrts::reinit_number(context[1], 1UL);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Dec/4 e.Num/2 >/1
  // closed e.Num as range 2
  //DEBUG: e.Num: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 } (/5 Tile{ AsIs: e.Num/2 } )/6 1/7 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_number(vm, context[7], 1UL);
  refalrts::update_name(context[4], functions[efunc_Sub]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Dec("Dec", COOKIE1_, COOKIE2_, func_Dec);


static refalrts::FnResult func_gen_Pipe_S2L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Pipe$2\1/4 t.Func/5 (/9 e.Funcs/7 )/10 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Funcs as range 7
  // closed e.Arg as range 2
  //DEBUG: t.Func: 5
  //DEBUG: e.Funcs: 7
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch/4 } </11 & Apply/12 Tile{ AsIs: t.Func/5 } Tile{ AsIs: e.Arg/2 } >/13 </14 Tile{ HalfReuse: & Pipe/9 AsIs: e.Funcs/7 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_Apply]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_Fetch]);
  refalrts::reinit_name(context[9], functions[efunc_Pipe]);
  refalrts::reinit_close_call(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S2L1("Pipe$2\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S2L1);


static refalrts::FnResult func_gen_Pipe_S3L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Pipe$3\1/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe$3\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Arg/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S3L1("Pipe$3\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S3L1);


static refalrts::FnResult func_Pipe(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Pipe/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Pipe/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Pipe/4 t.Func/7 >/1
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;
      //DEBUG: t.Func: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.Func/7 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Pipe/4 t.Func/7 e.Funcs/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Funcs as range 9
    //DEBUG: t.Func: 7
    //DEBUG: e.Funcs: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: [*]/0 Reuse: & Pipe$2\1/4 AsIs: t.Func/7 } (/11 Tile{ AsIs: e.Funcs/9 } )/12 Tile{ HalfReuse: {*}/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::reinit_closure_head(context[0]);
    refalrts::update_name(context[4], functions[efunc_gen_Pipe_S2L1]);
    refalrts::reinit_unwrapped_closure(context[1], context[0]);
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    refalrts::wrap_closure( context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Pipe/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: & Pipe$3\1/1 ]] }
  refalrts::reinit_name(context[1], functions[efunc_gen_Pipe_S3L1]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Pipe("Pipe", COOKIE1_, COOKIE2_, func_Pipe);


static refalrts::FnResult func_IsPassiveCall(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & IsPassiveCall/4 e.Expr/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Expr as range 2
  //DEBUG: e.Expr: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Reduce@1/0 HalfReuse: # True/4 AsIs: e.Expr/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Reduce_Z1]);
  refalrts::reinit_ident(context[4], identifiers[ident_True]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IsPassiveCall("IsPassiveCall", COOKIE1_, COOKIE2_, func_IsPassiveCall);


static refalrts::FnResult func_IsPassiveCallm_Aux(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & IsPassiveCall-Aux/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & IsPassiveCall-Aux/4 t.new1/5 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & IsPassiveCall-Aux/4 (/5 s.new2/9 e.new3/7 )/6 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    if( ! refalrts::svar_left( context[9], context[7], context[8] ) )
      continue;
    // closed e.new3 as range 7
    do {
      // </0 & IsPassiveCall-Aux/4 (/5 # Brackets/9 e.Expr/10 )/6 >/1
      context[10] = context[7];
      context[11] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[9] ) )
        continue;
      // closed e.Expr as range 10
      //DEBUG: e.Expr: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} # Brackets/9 {REMOVED TILE} )/6 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@1/4 HalfReuse: # True/5 } Tile{ AsIs: e.Expr/10 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z1]);
      refalrts::reinit_ident(context[5], identifiers[ident_True]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & IsPassiveCall-Aux/4 (/5 # ADT-Brackets/9 e.Expr/10 )/6 >/1
      context[10] = context[7];
      context[11] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[9] ) )
        continue;
      // closed e.Expr as range 10
      //DEBUG: e.Expr: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} # ADT-Brackets/9 {REMOVED TILE} )/6 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@1/4 HalfReuse: # True/5 } Tile{ AsIs: e.Expr/10 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z1]);
      refalrts::reinit_ident(context[5], identifiers[ident_True]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[10], context[11] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & IsPassiveCall-Aux/4 (/5 # CallBrackets/9 e.Expr/10 )/6 >/1
      context[10] = context[7];
      context[11] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[9] ) )
        continue;
      // closed e.Expr as range 10
      //DEBUG: e.Expr: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & IsPassiveCall-Aux/4 (/5 # CallBrackets/9 e.Expr/10 )/6 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_False]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & IsPassiveCall-Aux/4 (/5 # ColdCallBrackets/9 e.Expr/10 )/6 >/1
    context[10] = context[7];
    context[11] = context[8];
    if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[9] ) )
      continue;
    // closed e.Expr as range 10
    //DEBUG: e.Expr: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & IsPassiveCall-Aux/4 (/5 # ColdCallBrackets/9 e.Expr/10 )/6 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_False]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IsPassiveCall-Aux/4 t.Other/5 >/1
  //DEBUG: t.Other: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & IsPassiveCall-Aux/4 t.Other/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_True]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IsPassiveCallm_Aux("IsPassiveCall-Aux", COOKIE1_, COOKIE2_, func_IsPassiveCallm_Aux);


static refalrts::FnResult func_gen_OptTreem_Drivem_Expr_B1S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & OptTree-Drive-Expr:1$2=1/4 (/7 e.OptFuncNames$a/5 )/8 (/11 e.OptFuncs$a/9 )/12 (/15 e.NewFunctions/13 )/16 e.Branches/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.OptFuncNames$a as range 5
  // closed e.OptFuncs$a as range 9
  // closed e.NewFunctions as range 13
  // closed e.Branches as range 2
  //DEBUG: e.OptFuncNames$a: 5
  //DEBUG: e.OptFuncs$a: 9
  //DEBUG: e.NewFunctions: 13
  //DEBUG: e.Branches: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} (/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: (/7 AsIs: e.OptFuncNames$a/5 AsIs: )/8 } Tile{ AsIs: e.OptFuncs$a/9 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Branches/2 } Tile{ AsIs: (/15 AsIs: e.NewFunctions/13 AsIs: )/16 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[4]);
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[4], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[4], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptTreem_Drivem_Expr_B1S2A1("OptTree-Drive-Expr:1$2=1", COOKIE1_, COOKIE2_, func_gen_OptTreem_Drivem_Expr_B1S2A1);


static refalrts::FnResult func_gen_OptTreem_Drivem_Expr_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 72 elems
  refalrts::Iter context[72];
  refalrts::zeros( context, 72 );
  // </0 & OptTree-Drive-Expr:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & OptTree-Drive-Expr:1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 t.new3/13 (/17 e.new4/15 t.new5/19 )/18 e.new6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new6 as range 2
  context[20] = refalrts::tvar_right( context[19], context[15], context[16] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 15
  do {
    // </0 & OptTree-Drive-Expr:1/4 (/7 e.OptFuncs/21 )/8 (/11 e.UsedVars/23 )/12 t.Mode/13 (/17 e.OptFuncNames$a/25 # None/19 )/18 e.Expr$a/27 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[15];
    context[26] = context[16];
    context[27] = context[2];
    context[28] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_None], context[19] ) )
      continue;
    // closed e.OptFuncs as range 21
    // closed e.UsedVars as range 23
    // closed e.OptFuncNames$a as range 25
    // closed e.Expr$a as range 27
    //DEBUG: t.Mode: 13
    //DEBUG: e.OptFuncs: 21
    //DEBUG: e.UsedVars: 23
    //DEBUG: e.OptFuncNames$a: 25
    //DEBUG: e.Expr$a: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.UsedVars/23 {REMOVED TILE} t.Mode/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.OptFuncNames$a/25 } Tile{ HalfReuse: )/7 AsIs: e.OptFuncs/21 AsIs: )/8 AsIs: (/11 } Tile{ HalfReuse: (/18 AsIs: e.Expr$a/27 HalfReuse: )/1 } Tile{ AsIs: )/12 } Tile{ AsIs: (/17 } Tile{ HalfReuse: )/19 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_close_bracket(context[7]);
    refalrts::reinit_open_bracket(context[18]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::reinit_close_bracket(context[19]);
    refalrts::link_brackets( context[17], context[19] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[18], context[1] );
    refalrts::link_brackets( context[0], context[8] );
    refalrts::link_brackets( context[4], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[18], context[1] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & OptTree-Drive-Expr:1/4 (/7 t.new10/42 e.new11/21 )/8 (/11 e.new12/23 )/12 (/13 s.new7/40 s.new8/41 )/14 (/17 e.new15/25 (/19 # CallBrackets/33 (/36 # Symbol/38 # Name/39 e.new13/34 )/37 e.new14/31 )/20 )/18 e.new9/27 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[15];
    context[26] = context[16];
    context[27] = context[2];
    context[28] = context[3];
    context[29] = 0;
    context[30] = 0;
    if( ! refalrts::brackets_term( context[29], context[30], context[13] ) )
      continue;
    context[31] = 0;
    context[32] = 0;
    if( ! refalrts::brackets_term( context[31], context[32], context[19] ) )
      continue;
    context[33] = refalrts::ident_left( identifiers[ident_CallBrackets], context[31], context[32] );
    if( ! context[33] )
      continue;
    context[34] = 0;
    context[35] = 0;
    context[36] = refalrts::brackets_left( context[34], context[35], context[31], context[32] );
    if( ! context[36] )
      continue;
    refalrts::bracket_pointers(context[36], context[37]);
    context[38] = refalrts::ident_left( identifiers[ident_Symbol], context[34], context[35] );
    if( ! context[38] )
      continue;
    context[39] = refalrts::ident_left( identifiers[ident_Name], context[34], context[35] );
    if( ! context[39] )
      continue;
    // closed e.new12 as range 23
    // closed e.new15 as range 25
    // closed e.new13 as range 34
    // closed e.new14 as range 31
    // closed e.new9 as range 27
    if( ! refalrts::svar_left( context[40], context[29], context[30] ) )
      continue;
    if( ! refalrts::svar_left( context[41], context[29], context[30] ) )
      continue;
    if( ! refalrts::empty_seq( context[29], context[30] ) )
      continue;
    context[43] = refalrts::tvar_left( context[42], context[21], context[22] );
    if( ! context[43] )
      continue;
    // closed e.new11 as range 21
    do {
      // </0 & OptTree-Drive-Expr:1/4 (/7 t.new19/42 e.new20/44 )/8 (/11 e.new21/46 )/12 (/13 s.new16/40 s.new17/41 )/14 (/17 e.new25/48 (/19 # CallBrackets/33 (/36 # Symbol/38 # Name/39 e.new23/50 '*'/57 s.new24/56 )/37 e.new22/52 )/20 )/18 e.new18/54 >/1
      context[44] = context[21];
      context[45] = context[22];
      context[46] = context[23];
      context[47] = context[24];
      context[48] = context[25];
      context[49] = context[26];
      context[50] = context[34];
      context[51] = context[35];
      context[52] = context[31];
      context[53] = context[32];
      context[54] = context[27];
      context[55] = context[28];
      // closed e.new20 as range 44
      // closed e.new21 as range 46
      // closed e.new25 as range 48
      // closed e.new22 as range 52
      // closed e.new18 as range 54
      if( ! refalrts::svar_right( context[56], context[50], context[51] ) )
        continue;
      context[57] = refalrts::char_right( '*', context[50], context[51] );
      if( ! context[57] )
        continue;
      // closed e.new23 as range 50
      do {
        // </0 & OptTree-Drive-Expr:1/4 (/7 t./42 e.1/58 )/8 (/11 e.UsedVars/60 )/12 (/13 s.DriveMode/40 s.IntrinsicMode/41 )/14 (/17 e.OptFuncNames$a/62 (/19 # CallBrackets/33 (/36 # Symbol/38 # Name/39 e.01/64 # SUF/70 '*'/57 s.N/56 )/37 e.5/66 )/20 )/18 e.Expr$a/68 >/1
        context[58] = context[44];
        context[59] = context[45];
        context[60] = context[46];
        context[61] = context[47];
        context[62] = context[48];
        context[63] = context[49];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[52];
        context[67] = context[53];
        context[68] = context[54];
        context[69] = context[55];
        context[70] = refalrts::ident_right( identifiers[ident_SUF], context[64], context[65] );
        if( ! context[70] )
          continue;
        // closed e.1 as range 58
        // closed e.UsedVars as range 60
        // closed e.OptFuncNames$a as range 62
        // closed e.01 as range 64
        // closed e.5 as range 66
        // closed e.Expr$a as range 68
        //DEBUG: t.: 42
        //DEBUG: s.DriveMode: 40
        //DEBUG: s.IntrinsicMode: 41
        //DEBUG: s.N: 56
        //DEBUG: e.1: 58
        //DEBUG: e.UsedVars: 60
        //DEBUG: e.OptFuncNames$a: 62
        //DEBUG: e.01: 64
        //DEBUG: e.5: 66
        //DEBUG: e.Expr$a: 68

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.DriveMode/40 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.N/56 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptTree-Drive-Expr:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames$a/62 } Tile{ AsIs: )/14 HalfReuse: </17 } Tile{ HalfReuse: & OptExpr-Aux=1/18 } Tile{ HalfReuse: (/38 } Tile{ AsIs: e.Expr$a/68 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.UsedVars/60 AsIs: )/12 HalfReuse: s.DriveMode40 /13 } Tile{ AsIs: s.IntrinsicMode/41 } Tile{ HalfReuse: (/37 AsIs: e.5/66 AsIs: )/20 } Tile{ AsIs: t./42 } Tile{ HalfReuse: </19 HalfReuse: & FindOptInfo-Aux@1/33 AsIs: (/36 } Tile{ AsIs: e.1/58 } Tile{ HalfReuse: )/39 AsIs: e.01/64 HalfReuse: s.N56 /70 HalfReuse: >/57 } >/71 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[71]);
        refalrts::update_name(context[4], functions[efunc_gen_OptTreem_Drivem_Expr_B1S2A1]);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[18], functions[efunc_gen_OptExprm_Aux_A1]);
        refalrts::reinit_open_bracket(context[38]);
        refalrts::reinit_svar( context[13], context[40] );
        refalrts::reinit_open_bracket(context[37]);
        refalrts::reinit_open_call(context[19]);
        refalrts::reinit_name(context[33], functions[efunc_gen_FindOptInfom_Aux_Z1]);
        refalrts::reinit_close_bracket(context[39]);
        refalrts::reinit_svar( context[70], context[56] );
        refalrts::reinit_close_call(context[57]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[71] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[57] );
        refalrts::push_stack( vm, context[19] );
        refalrts::link_brackets( context[36], context[39] );
        refalrts::link_brackets( context[37], context[20] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[38], context[8] );
        refalrts::link_brackets( context[7], context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[71] );
        res = refalrts::splice_evar( res, context[39], context[57] );
        res = refalrts::splice_evar( res, context[58], context[59] );
        res = refalrts::splice_evar( res, context[19], context[36] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[37], context[20] );
        res = refalrts::splice_elem( res, context[41] );
        res = refalrts::splice_evar( res, context[8], context[13] );
        res = refalrts::splice_evar( res, context[68], context[69] );
        res = refalrts::splice_elem( res, context[38] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_evar( res, context[62], context[63] );
        refalrts::splice_to_freelist_open( vm, context[7], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & OptTree-Drive-Expr:1/4 (/7 t./42 e.1/58 )/8 (/11 e.UsedVars/60 )/12 (/13 s.DriveMode/40 s.IntrinsicMode/41 )/14 (/17 e.OptFuncNames$a/62 (/19 # CallBrackets/33 (/36 # Symbol/38 # Name/39 e.00/64 '*'/57 s.N/56 )/37 e.5/66 )/20 )/18 e.Expr$a/68 >/1
      context[58] = context[44];
      context[59] = context[45];
      context[60] = context[46];
      context[61] = context[47];
      context[62] = context[48];
      context[63] = context[49];
      context[64] = context[50];
      context[65] = context[51];
      context[66] = context[52];
      context[67] = context[53];
      context[68] = context[54];
      context[69] = context[55];
      // closed e.1 as range 58
      // closed e.UsedVars as range 60
      // closed e.OptFuncNames$a as range 62
      // closed e.00 as range 64
      // closed e.5 as range 66
      // closed e.Expr$a as range 68
      //DEBUG: t.: 42
      //DEBUG: s.DriveMode: 40
      //DEBUG: s.IntrinsicMode: 41
      //DEBUG: s.N: 56
      //DEBUG: e.1: 58
      //DEBUG: e.UsedVars: 60
      //DEBUG: e.OptFuncNames$a: 62
      //DEBUG: e.00: 64
      //DEBUG: e.5: 66
      //DEBUG: e.Expr$a: 68

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.DriveMode/40 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.N/56 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptTree-Drive-Expr:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames$a/62 } Tile{ AsIs: )/18 } Tile{ HalfReuse: </19 HalfReuse: & OptExpr-Aux=1/33 AsIs: (/36 } Tile{ AsIs: e.Expr$a/68 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.UsedVars/60 AsIs: )/12 HalfReuse: s.DriveMode40 /13 } Tile{ AsIs: s.IntrinsicMode/41 } Tile{ HalfReuse: (/37 AsIs: e.5/66 AsIs: )/20 } Tile{ AsIs: t./42 } </70 Tile{ HalfReuse: & FindOptInfo-Aux@2/14 AsIs: (/17 } Tile{ AsIs: e.1/58 } Tile{ HalfReuse: )/39 AsIs: e.00/64 HalfReuse: s.N56 /57 } >/71 Tile{ HalfReuse: >/38 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[70]);
      refalrts::alloc_close_call(vm, context[71]);
      refalrts::update_name(context[4], functions[efunc_gen_OptTreem_Drivem_Expr_B1S2A1]);
      refalrts::reinit_open_call(context[19]);
      refalrts::reinit_name(context[33], functions[efunc_gen_OptExprm_Aux_A1]);
      refalrts::reinit_svar( context[13], context[40] );
      refalrts::reinit_open_bracket(context[37]);
      refalrts::reinit_name(context[14], functions[efunc_gen_FindOptInfom_Aux_Z2]);
      refalrts::reinit_close_bracket(context[39]);
      refalrts::reinit_svar( context[57], context[56] );
      refalrts::reinit_close_call(context[38]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[71] );
      refalrts::push_stack( vm, context[70] );
      refalrts::link_brackets( context[17], context[39] );
      refalrts::link_brackets( context[37], context[20] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[36], context[8] );
      refalrts::link_brackets( context[7], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_elem( res, context[71] );
      res = refalrts::splice_evar( res, context[39], context[57] );
      res = refalrts::splice_evar( res, context[58], context[59] );
      res = refalrts::splice_evar( res, context[14], context[17] );
      res = refalrts::splice_elem( res, context[70] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[37], context[20] );
      res = refalrts::splice_elem( res, context[41] );
      res = refalrts::splice_evar( res, context[8], context[13] );
      res = refalrts::splice_evar( res, context[68], context[69] );
      res = refalrts::splice_evar( res, context[19], context[36] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[62], context[63] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptTree-Drive-Expr:1/4 (/7 t./42 e.1/44 )/8 (/11 e.UsedVars/46 )/12 (/13 s.DriveMode/40 s.IntrinsicMode/41 )/14 (/17 e.OptFuncNames$a/48 (/19 # CallBrackets/33 (/36 # Symbol/38 # Name/39 e.8/50 )/37 e.5/52 )/20 )/18 e.Expr$a/54 >/1
    context[44] = context[21];
    context[45] = context[22];
    context[46] = context[23];
    context[47] = context[24];
    context[48] = context[25];
    context[49] = context[26];
    context[50] = context[34];
    context[51] = context[35];
    context[52] = context[31];
    context[53] = context[32];
    context[54] = context[27];
    context[55] = context[28];
    // closed e.1 as range 44
    // closed e.UsedVars as range 46
    // closed e.OptFuncNames$a as range 48
    // closed e.8 as range 50
    // closed e.5 as range 52
    // closed e.Expr$a as range 54
    //DEBUG: t.: 42
    //DEBUG: s.DriveMode: 40
    //DEBUG: s.IntrinsicMode: 41
    //DEBUG: e.1: 44
    //DEBUG: e.UsedVars: 46
    //DEBUG: e.OptFuncNames$a: 48
    //DEBUG: e.8: 50
    //DEBUG: e.5: 52
    //DEBUG: e.Expr$a: 54

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.DriveMode/40 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptTree-Drive-Expr:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames$a/48 } )/56 Tile{ HalfReuse: </19 HalfReuse: & OptExpr-Aux=1/33 AsIs: (/36 } Tile{ AsIs: e.Expr$a/54 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.UsedVars/46 AsIs: )/12 HalfReuse: s.DriveMode40 /13 } Tile{ AsIs: s.IntrinsicMode/41 } Tile{ HalfReuse: (/37 AsIs: e.5/52 AsIs: )/20 } Tile{ AsIs: t./42 } </57 Tile{ HalfReuse: & FindOptInfo-Aux@3/14 AsIs: (/17 } Tile{ AsIs: e.1/44 } Tile{ AsIs: )/18 } Tile{ AsIs: e.8/50 } Tile{ HalfReuse: >/38 HalfReuse: >/39 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_open_call(vm, context[57]);
    refalrts::update_name(context[4], functions[efunc_gen_OptTreem_Drivem_Expr_B1S2A1]);
    refalrts::reinit_open_call(context[19]);
    refalrts::reinit_name(context[33], functions[efunc_gen_OptExprm_Aux_A1]);
    refalrts::reinit_svar( context[13], context[40] );
    refalrts::reinit_open_bracket(context[37]);
    refalrts::reinit_name(context[14], functions[efunc_gen_FindOptInfom_Aux_Z3]);
    refalrts::reinit_close_call(context[38]);
    refalrts::reinit_close_call(context[39]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[57] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[37], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[36], context[8] );
    refalrts::link_brackets( context[7], context[56] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[44], context[45] );
    res = refalrts::splice_evar( res, context[14], context[17] );
    res = refalrts::splice_elem( res, context[57] );
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[37], context[20] );
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[8], context[13] );
    res = refalrts::splice_evar( res, context[54], context[55] );
    res = refalrts::splice_evar( res, context[19], context[36] );
    res = refalrts::splice_elem( res, context[56] );
    res = refalrts::splice_evar( res, context[48], context[49] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptTree-Drive-Expr:1/4 (/7 e.OptFuncs/5 )/8 (/11 e.UsedVars/9 )/12 t.Mode/13 (/17 e.OptFuncNames$a/15 t.Call/19 )/18 e.Expr$a/2 >/1
  // closed e.OptFuncs as range 5
  // closed e.UsedVars as range 9
  // closed e.OptFuncNames$a as range 15
  // closed e.Expr$a as range 2
  //DEBUG: t.Mode: 13
  //DEBUG: t.Call: 19
  //DEBUG: e.OptFuncs: 5
  //DEBUG: e.UsedVars: 9
  //DEBUG: e.OptFuncNames$a: 15
  //DEBUG: e.Expr$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptTree-Drive-Expr:1$2=1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncNames$a/15 } )/21 </22 Tile{ HalfReuse: & OptExpr-Aux*3/8 AsIs: (/11 AsIs: e.UsedVars/9 AsIs: )/12 AsIs: t.Mode/13 AsIs: (/17 } Tile{ AsIs: e.Expr$a/2 } Tile{ AsIs: )/18 } Tile{ AsIs: t.Call/19 } Tile{ AsIs: e.OptFuncs/5 } >/23 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::update_name(context[4], functions[efunc_gen_OptTreem_Drivem_Expr_B1S2A1]);
  refalrts::reinit_name(context[8], functions[efunc_gen_OptExprm_Aux_D3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[21] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[8], context[17] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptTreem_Drivem_Expr_B1("OptTree-Drive-Expr:1", COOKIE1_, COOKIE2_, func_gen_OptTreem_Drivem_Expr_B1);


static refalrts::FnResult func_OptTreem_Drivem_Expr(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & OptTree-Drive-Expr/4 (/7 e.UsedVars/5 )/8 (/11 (/15 e.OptFuncNames/13 )/16 e.OptFuncs/9 )/12 e.Expr/2 t.Mode/17 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[9], context[10] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.UsedVars as range 5
  // closed e.OptFuncNames as range 13
  // closed e.OptFuncs as range 9
  context[18] = refalrts::tvar_right( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr as range 2
  //DEBUG: e.UsedVars: 5
  //DEBUG: e.OptFuncNames: 13
  //DEBUG: e.OptFuncs: 9
  //DEBUG: t.Mode: 17
  //DEBUG: e.Expr: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptTree-Drive-Expr:1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncs/9 } Tile{ AsIs: )/12 } (/19 Tile{ AsIs: e.UsedVars/5 } )/20 Tile{ AsIs: t.Mode/17 } Tile{ HalfReuse: </8 HalfReuse: & DoMapAccum@1/11 AsIs: (/15 AsIs: e.OptFuncNames/13 HalfReuse: # None/16 } )/21 (/22 )/23 Tile{ AsIs: e.Expr/2 } >/24 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::alloc_close_call(vm, context[24]);
  refalrts::update_name(context[4], functions[efunc_gen_OptTreem_Drivem_Expr_B1]);
  refalrts::reinit_open_call(context[8]);
  refalrts::reinit_name(context[11], functions[efunc_gen_DoMapAccum_Z1]);
  refalrts::reinit_ident(context[16], identifiers[ident_None]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[8] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[15], context[21] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[21], context[23] );
  res = refalrts::splice_evar( res, context[8], context[16] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_OptTreem_Drivem_Expr("OptTree-Drive-Expr", 0U, 0U, func_OptTreem_Drivem_Expr);


static refalrts::FnResult func_gen_OptExprm_Aux_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & OptExpr-Aux=2/4 (/7 e.OptFuncs$a/5 )/8 (/11 e.Expr/9 )/12 t.Metatables$a/13 e.SubstitutionPacks/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.OptFuncs$a as range 5
  // closed e.Expr as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.SubstitutionPacks as range 2
  //DEBUG: e.OptFuncs$a: 5
  //DEBUG: e.Expr: 9
  //DEBUG: t.Metatables$a: 13
  //DEBUG: e.SubstitutionPacks: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/15 Tile{ AsIs: t.Metatables$a/13 } Tile{ AsIs: e.OptFuncs$a/5 } )/16 </17 Tile{ HalfReuse: & DoMapAccum@2/8 AsIs: (/11 AsIs: e.Expr/9 AsIs: )/12 } Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 } )/18 Tile{ AsIs: e.SubstitutionPacks/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z2]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[7], context[18] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[8], context[12] );
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptExprm_Aux_A2("OptExpr-Aux=2", COOKIE1_, COOKIE2_, func_gen_OptExprm_Aux_A2);


static refalrts::FnResult func_gen_OptExprm_Aux_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & OptExpr-Aux=1/4 (/7 e.Expr/5 )/8 (/11 e.UsedVars/9 )/12 s.DriveMode/13 s.IntrinsicMode/14 (/17 e.Args/15 )/18 t.Metatables/19 e.OptFuncs$a/2 t.FunctionForDrive/21 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Expr as range 5
  // closed e.UsedVars as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.Args as range 15
  context[20] = refalrts::tvar_left( context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  context[22] = refalrts::tvar_right( context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  // closed e.OptFuncs$a as range 2
  //DEBUG: e.Expr: 5
  //DEBUG: e.UsedVars: 9
  //DEBUG: s.DriveMode: 13
  //DEBUG: s.IntrinsicMode: 14
  //DEBUG: e.Args: 15
  //DEBUG: t.Metatables: 19
  //DEBUG: t.FunctionForDrive: 21
  //DEBUG: e.OptFuncs$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.IntrinsicMode/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </23 & OptExpr-Aux=2/24 (/25 Tile{ AsIs: e.OptFuncs$a/2 } )/26 Tile{ AsIs: (/17 } e.Expr/5/27 Tile{ AsIs: )/18 } </29 & OptExpr-MakeSubstitutions/30 (/31 Tile{ AsIs: e.UsedVars/9 } )/32 Tile{ HalfReuse: (/12 AsIs: s.DriveMode/13 } Tile{ HalfReuse: s.IntrinsicMode14 /0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Expr/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Args/15 } )/33 Tile{ AsIs: t.FunctionForDrive/21 } Tile{ AsIs: t.Metatables/19 } >/34 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_gen_OptExprm_Aux_A2]);
  refalrts::alloc_open_bracket(vm, context[25]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::copy_evar(vm, context[27], context[28], context[5], context[6]);
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_OptExprm_MakeSubstitutions]);
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::alloc_close_bracket(vm, context[33]);
  refalrts::alloc_close_call(vm, context[34]);
  refalrts::reinit_open_bracket(context[12]);
  refalrts::reinit_svar( context[0], context[14] );
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[34] );
  refalrts::push_stack( vm, context[29] );
  refalrts::link_brackets( context[11], context[33] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[12], context[4] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[34] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_elem( res, context[33] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_elem( res, context[32] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[29], context[31] );
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[23], context[25] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptExprm_Aux_A1("OptExpr-Aux=1", COOKIE1_, COOKIE2_, func_gen_OptExprm_Aux_A1);


static refalrts::FnResult func_OptExprm_Aux(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & OptExpr-Aux/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & OptExpr-Aux/4 (/7 e.new1/5 )/8 (/11 s.new2/28 s.new3/29 )/12 (/15 e.new4/13 )/16 (/19 # CallBrackets/21 (/24 # Symbol/26 # Name/27 e.new5/22 )/25 e.new6/17 )/20 t.new7/30 e.new8/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = refalrts::ident_left( identifiers[ident_CallBrackets], context[17], context[18] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[17], context[18] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = refalrts::ident_left( identifiers[ident_Symbol], context[22], context[23] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  context[27] = refalrts::ident_left( identifiers[ident_Name], context[22], context[23] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  // closed e.new4 as range 13
  // closed e.new5 as range 22
  // closed e.new6 as range 17
  if( ! refalrts::svar_left( context[28], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[29], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  context[31] = refalrts::tvar_left( context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  // closed e.new8 as range 2
  do {
    // </0 & OptExpr-Aux/4 (/7 e.new11/32 )/8 (/11 s.new12/28 s.new13/29 )/12 (/15 e.new14/34 )/16 (/19 # CallBrackets/21 (/24 # Symbol/26 # Name/27 e.new16/36 '*'/43 s.new17/42 )/25 e.new15/38 )/20 t.new9/30 e.new10/40 >/1
    context[32] = context[5];
    context[33] = context[6];
    context[34] = context[13];
    context[35] = context[14];
    context[36] = context[22];
    context[37] = context[23];
    context[38] = context[17];
    context[39] = context[18];
    context[40] = context[2];
    context[41] = context[3];
    // closed e.new11 as range 32
    // closed e.new14 as range 34
    // closed e.new15 as range 38
    // closed e.new10 as range 40
    if( ! refalrts::svar_right( context[42], context[36], context[37] ) )
      continue;
    context[43] = refalrts::char_right( '*', context[36], context[37] );
    if( ! context[43] )
      continue;
    // closed e.new16 as range 36
    do {
      // </0 & OptExpr-Aux/4 (/7 e.UsedVars/44 )/8 (/11 s.DriveMode/28 s.IntrinsicMode/29 )/12 (/15 e.Expr/46 )/16 (/19 # CallBrackets/21 (/24 # Symbol/26 # Name/27 e./48 # SUF/54 '*'/43 s.N/42 )/25 e.Args/50 )/20 t.Metatables/30 e.OptFuncs/52 >/1
      context[44] = context[32];
      context[45] = context[33];
      context[46] = context[34];
      context[47] = context[35];
      context[48] = context[36];
      context[49] = context[37];
      context[50] = context[38];
      context[51] = context[39];
      context[52] = context[40];
      context[53] = context[41];
      context[54] = refalrts::ident_right( identifiers[ident_SUF], context[48], context[49] );
      if( ! context[54] )
        continue;
      // closed e.UsedVars as range 44
      // closed e.Expr as range 46
      // closed e. as range 48
      // closed e.Args as range 50
      // closed e.OptFuncs as range 52
      //DEBUG: t.Metatables: 30
      //DEBUG: s.DriveMode: 28
      //DEBUG: s.IntrinsicMode: 29
      //DEBUG: s.N: 42
      //DEBUG: e.UsedVars: 44
      //DEBUG: e.Expr: 46
      //DEBUG: e.: 48
      //DEBUG: e.Args: 50
      //DEBUG: e.OptFuncs: 52

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} # CallBrackets/21 (/24 {REMOVED TILE} {REMOVED TILE} s.N/42 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </26 } Tile{ HalfReuse: & OptExpr-Aux=1/12 AsIs: (/15 AsIs: e.Expr/46 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.UsedVars/44 } Tile{ HalfReuse: )/11 AsIs: s.DriveMode/28 AsIs: s.IntrinsicMode/29 } Tile{ HalfReuse: (/25 AsIs: e.Args/50 AsIs: )/20 AsIs: t.Metatables/30 } Tile{ AsIs: </0 Reuse: & FindOptInfo-Aux@1/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncs/52 } Tile{ HalfReuse: )/27 AsIs: e./48 HalfReuse: s.N42 /54 HalfReuse: >/43 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[26]);
      refalrts::reinit_name(context[12], functions[efunc_gen_OptExprm_Aux_A1]);
      refalrts::reinit_close_bracket(context[11]);
      refalrts::reinit_open_bracket(context[25]);
      refalrts::update_name(context[4], functions[efunc_gen_FindOptInfom_Aux_Z1]);
      refalrts::reinit_close_bracket(context[27]);
      refalrts::reinit_svar( context[54], context[42] );
      refalrts::reinit_close_call(context[43]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[27] );
      refalrts::link_brackets( context[25], context[20] );
      refalrts::link_brackets( context[19], context[11] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[43] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_evar( res, context[25], context[31] );
      res = refalrts::splice_evar( res, context[11], context[29] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[12], context[19] );
      res = refalrts::splice_elem( res, context[26] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptExpr-Aux/4 (/7 e.UsedVars/44 )/8 (/11 s.DriveMode/28 s.IntrinsicMode/29 )/12 (/15 e.Expr/46 )/16 (/19 # CallBrackets/21 (/24 # Symbol/26 # Name/27 e.0/48 '*'/43 s.N/42 )/25 e.Args/50 )/20 t.Metatables/30 e.OptFuncs/52 >/1
    context[44] = context[32];
    context[45] = context[33];
    context[46] = context[34];
    context[47] = context[35];
    context[48] = context[36];
    context[49] = context[37];
    context[50] = context[38];
    context[51] = context[39];
    context[52] = context[40];
    context[53] = context[41];
    // closed e.UsedVars as range 44
    // closed e.Expr as range 46
    // closed e.0 as range 48
    // closed e.Args as range 50
    // closed e.OptFuncs as range 52
    //DEBUG: t.Metatables: 30
    //DEBUG: s.DriveMode: 28
    //DEBUG: s.IntrinsicMode: 29
    //DEBUG: s.N: 42
    //DEBUG: e.UsedVars: 44
    //DEBUG: e.Expr: 46
    //DEBUG: e.0: 48
    //DEBUG: e.Args: 50
    //DEBUG: e.OptFuncs: 52

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} # CallBrackets/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.N/42 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </26 } Tile{ HalfReuse: & OptExpr-Aux=1/12 AsIs: (/15 AsIs: e.Expr/46 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.UsedVars/44 } Tile{ HalfReuse: )/11 AsIs: s.DriveMode/28 AsIs: s.IntrinsicMode/29 } Tile{ HalfReuse: (/25 AsIs: e.Args/50 AsIs: )/20 AsIs: t.Metatables/30 } Tile{ AsIs: </0 Reuse: & FindOptInfo-Aux@2/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncs/52 } Tile{ HalfReuse: )/27 AsIs: e.0/48 HalfReuse: s.N42 /43 } Tile{ HalfReuse: >/24 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_open_call(context[26]);
    refalrts::reinit_name(context[12], functions[efunc_gen_OptExprm_Aux_A1]);
    refalrts::reinit_close_bracket(context[11]);
    refalrts::reinit_open_bracket(context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_FindOptInfom_Aux_Z2]);
    refalrts::reinit_close_bracket(context[27]);
    refalrts::reinit_svar( context[43], context[42] );
    refalrts::reinit_close_call(context[24]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[27] );
    refalrts::link_brackets( context[25], context[20] );
    refalrts::link_brackets( context[19], context[11] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[27], context[43] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_evar( res, context[25], context[31] );
    res = refalrts::splice_evar( res, context[11], context[29] );
    res = refalrts::splice_evar( res, context[44], context[45] );
    res = refalrts::splice_evar( res, context[12], context[19] );
    res = refalrts::splice_elem( res, context[26] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptExpr-Aux/4 (/7 e.UsedVars/5 )/8 (/11 s.DriveMode/28 s.IntrinsicMode/29 )/12 (/15 e.Expr/13 )/16 (/19 # CallBrackets/21 (/24 # Symbol/26 # Name/27 e.Name/22 )/25 e.Args/17 )/20 t.Metatables/30 e.OptFuncs/2 >/1
  // closed e.UsedVars as range 5
  // closed e.Expr as range 13
  // closed e.Name as range 22
  // closed e.Args as range 17
  // closed e.OptFuncs as range 2
  //DEBUG: t.Metatables: 30
  //DEBUG: s.DriveMode: 28
  //DEBUG: s.IntrinsicMode: 29
  //DEBUG: e.UsedVars: 5
  //DEBUG: e.Expr: 13
  //DEBUG: e.Name: 22
  //DEBUG: e.Args: 17
  //DEBUG: e.OptFuncs: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # CallBrackets/21 {REMOVED TILE} # Symbol/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </24 } Tile{ HalfReuse: & OptExpr-Aux=1/12 AsIs: (/15 AsIs: e.Expr/13 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.UsedVars/5 } Tile{ HalfReuse: )/11 AsIs: s.DriveMode/28 AsIs: s.IntrinsicMode/29 } Tile{ HalfReuse: (/25 AsIs: e.Args/17 AsIs: )/20 AsIs: t.Metatables/30 } Tile{ AsIs: </0 Reuse: & FindOptInfo-Aux@3/4 AsIs: (/7 } Tile{ AsIs: e.OptFuncs/2 } Tile{ AsIs: )/8 } Tile{ AsIs: e.Name/22 } Tile{ HalfReuse: >/27 } Tile{ AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[24]);
  refalrts::reinit_name(context[12], functions[efunc_gen_OptExprm_Aux_A1]);
  refalrts::reinit_close_bracket(context[11]);
  refalrts::reinit_open_bracket(context[25]);
  refalrts::update_name(context[4], functions[efunc_gen_FindOptInfom_Aux_Z3]);
  refalrts::reinit_close_call(context[27]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[25], context[20] );
  refalrts::link_brackets( context[19], context[11] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[27] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[25], context[31] );
  res = refalrts::splice_evar( res, context[11], context[29] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[12], context[19] );
  res = refalrts::splice_elem( res, context[24] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_OptExprm_Aux("OptExpr-Aux", COOKIE1_, COOKIE2_, func_OptExprm_Aux);


static refalrts::FnResult func_gen_IntrinsicCall_S1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & IntrinsicCall$1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & IntrinsicCall$1:1/4 t.new1/5 (/9 e.new2/7 )/10 t.new3/11 s.new4/13 e.new5/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 2
  do {
    // </0 & IntrinsicCall$1:1/4 t.IntrinsicFunction/5 (/9 e.Args/14 )/10 t.Metatables$a/11 # Ok/13 e.Result/16 >/1
    context[14] = context[7];
    context[15] = context[8];
    context[16] = context[2];
    context[17] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Ok], context[13] ) )
      continue;
    // closed e.Args as range 14
    // closed e.Result as range 16
    //DEBUG: t.IntrinsicFunction: 5
    //DEBUG: t.Metatables$a: 11
    //DEBUG: e.Args: 14
    //DEBUG: e.Result: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} t.IntrinsicFunction/5 {REMOVED TILE} e.Args/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables$a/11 } Tile{ AsIs: (/9 } (/18 Tile{ HalfReuse: (/0 HalfReuse: # Var/4 } 'e'/19 # DRIVEN/20 Tile{ AsIs: )/10 } Tile{ HalfReuse: ':'/13 AsIs: e.Result/16 HalfReuse: )/1 } (/21 )/22 )/23 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[18]);
    refalrts::alloc_char(vm, context[19], 'e');
    refalrts::alloc_ident(vm, context[20], identifiers[ident_DRIVEN]);
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_close_bracket(vm, context[23]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Var]);
    refalrts::reinit_char(context[13], ':');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[9], context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[18], context[1] );
    refalrts::link_brackets( context[0], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[21], context[23] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IntrinsicCall$1:1/4 t.IntrinsicFunction/5 (/9 e.Args/7 )/10 t.Metatables$a/11 # MakeColdCall/13 >/1
  if( ! refalrts::ident_term( identifiers[ident_MakeColdCall], context[13] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Args as range 7
  //DEBUG: t.IntrinsicFunction: 5
  //DEBUG: t.Metatables$a: 11
  //DEBUG: e.Args: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} # MakeColdCall/13 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables$a/11 } Tile{ AsIs: </0 Reuse: & MakeColdSolution/4 AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: e.Args/7 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_MakeColdSolution]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[0], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_IntrinsicCall_S1B1("IntrinsicCall$1:1", COOKIE1_, COOKIE2_, func_gen_IntrinsicCall_S1B1);


static refalrts::FnResult func_gen_IntrinsicCall_S2A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & IntrinsicCall$2=2/4 t.Metatables/5 e.Substitutions/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Substitutions as range 2
  //DEBUG: t.Metatables: 5
  //DEBUG: e.Substitutions: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & IntrinsicCall$2=2/4 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables/5 } Tile{ AsIs: e.Substitutions/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_IntrinsicCall_S2A2("IntrinsicCall$2=2", COOKIE1_, COOKIE2_, func_gen_IntrinsicCall_S2A2);


static refalrts::FnResult func_gen_IntrinsicCall_S2A2B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & IntrinsicCall$2=2:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & IntrinsicCall$2=2:1/4 t.new1/5 (/9 e.new2/7 )/10 s.new3/11 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & IntrinsicCall$2=2:1/4 t.IntrinsicFunction/5 (/9 e.Args/12 )/10 # Ok/11 e.Result/14 >/1
    context[12] = context[7];
    context[13] = context[8];
    context[14] = context[2];
    context[15] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Ok], context[11] ) )
      continue;
    // closed e.Args as range 12
    // closed e.Result as range 14
    //DEBUG: t.IntrinsicFunction: 5
    //DEBUG: e.Args: 12
    //DEBUG: e.Result: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} t.IntrinsicFunction/5 {REMOVED TILE} e.Args/12 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: (/9 } # Var/16 'e'/17 # DRIVEN/18 Tile{ AsIs: )/10 HalfReuse: ':'/11 AsIs: e.Result/14 HalfReuse: )/1 } (/19 )/20 )/21 Tile{ ]] }
    refalrts::alloc_ident(vm, context[16], identifiers[ident_Var]);
    refalrts::alloc_char(vm, context[17], 'e');
    refalrts::alloc_ident(vm, context[18], identifiers[ident_DRIVEN]);
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_char(context[11], ':');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[21] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[4], context[1] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[19], context[21] );
    res = refalrts::splice_evar( res, context[10], context[1] );
    res = refalrts::splice_evar( res, context[16], context[18] );
    res = refalrts::splice_elem( res, context[9] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IntrinsicCall$2=2:1/4 t.IntrinsicFunction/5 (/9 e.Args/7 )/10 # MakeColdCall/11 >/1
  if( ! refalrts::ident_term( identifiers[ident_MakeColdCall], context[11] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Args as range 7
  //DEBUG: t.IntrinsicFunction: 5
  //DEBUG: e.Args: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 # MakeColdCall/11 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeColdSolution/4 AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: e.Args/7 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_MakeColdSolution]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_IntrinsicCall_S2A2B1("IntrinsicCall$2=2:1", COOKIE1_, COOKIE2_, func_gen_IntrinsicCall_S2A2B1);


static refalrts::FnResult func_IntrinsicCall(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 63 elems
  refalrts::Iter context[63];
  refalrts::zeros( context, 63 );
  // </0 & IntrinsicCall/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & IntrinsicCall/4 t.new1/5 t.new2/7 (/11 e.new3/9 )/12 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new3 as range 9
  // closed e.new4 as range 2
  do {
    // </0 & IntrinsicCall/4 t.new5/5 t.new6/7 (/11 e.new11/13 )/12 e.new7/15 s.new8/19 s.new9/18 s.new10/17 >/1
    context[13] = context[9];
    context[14] = context[10];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.new11 as range 13
    if( ! refalrts::svar_right( context[17], context[15], context[16] ) )
      continue;
    if( ! refalrts::svar_right( context[18], context[15], context[16] ) )
      continue;
    if( ! refalrts::svar_right( context[19], context[15], context[16] ) )
      continue;
    // closed e.new7 as range 15
    do {
      // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 e.Args/20 )/12 '_'/24 '_'/25 'M'/26 'e'/27 't'/28 'a'/29 '_'/19 'M'/18 'u'/17 >/1
      context[20] = context[13];
      context[21] = context[14];
      context[22] = context[15];
      context[23] = context[16];
      if( ! refalrts::char_term( '_', context[19] ) )
        continue;
      if( ! refalrts::char_term( 'M', context[18] ) )
        continue;
      if( ! refalrts::char_term( 'u', context[17] ) )
        continue;
      context[24] = refalrts::char_left( '_', context[22], context[23] );
      if( ! context[24] )
        continue;
      context[25] = refalrts::char_left( '_', context[22], context[23] );
      if( ! context[25] )
        continue;
      context[26] = refalrts::char_left( 'M', context[22], context[23] );
      if( ! context[26] )
        continue;
      context[27] = refalrts::char_left( 'e', context[22], context[23] );
      if( ! context[27] )
        continue;
      context[28] = refalrts::char_left( 't', context[22], context[23] );
      if( ! context[28] )
        continue;
      context[29] = refalrts::char_left( 'a', context[22], context[23] );
      if( ! context[29] )
        continue;
      if( ! refalrts::empty_seq( context[22], context[23] ) )
        continue;
      // closed e.Args as range 20
      //DEBUG: t.IntrinsicFunction: 5
      //DEBUG: t.Metatables: 7
      //DEBUG: e.Args: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} 'M'/26 'e'/27 't'/28 'a'/29 '_'/19 'M'/18 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$1:1/4 AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: (/11 AsIs: e.Args/20 AsIs: )/12 HalfReuse: </24 HalfReuse: & Intrinsic-Mu/25 } e.Args/20/30 Tile{ AsIs: t.Metatables/7 } Tile{ HalfReuse: >/17 AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[30], context[31], context[20], context[21]);
      refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S1B1]);
      refalrts::reinit_open_call(context[24]);
      refalrts::reinit_name(context[25], functions[efunc_Intrinsicm_Mu]);
      refalrts::reinit_close_call(context[17]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[24] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[17];
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[11], context[25] );
      refalrts::splice_to_freelist_open( vm, context[6], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & IntrinsicCall/4 t.new12/5 t.new13/7 (/11 e.new17/20 )/12 s.new16/19 s.new15/18 s.new14/17 >/1
      context[20] = context[13];
      context[21] = context[14];
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.new17 as range 20
      do {
        // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 e.Args/22 )/12 'A'/19 'd'/18 'd'/17 >/1
        context[22] = context[20];
        context[23] = context[21];
        if( ! refalrts::char_term( 'A', context[19] ) )
          continue;
        if( ! refalrts::char_term( 'd', context[18] ) )
          continue;
        if( ! refalrts::char_term( 'd', context[17] ) )
          continue;
        // closed e.Args as range 22
        //DEBUG: t.IntrinsicFunction: 5
        //DEBUG: t.Metatables: 7
        //DEBUG: e.Args: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 } </24 & IntrinsicCall$2=2:1/25 Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: (/11 AsIs: e.Args/22 AsIs: )/12 HalfReuse: </19 HalfReuse: & Intrinsic-Add:1/18 HalfReuse: </17 HalfReuse: & ArithmArgs/1 } e.Args/22/26 >/28 >/29 >/30 >/31 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_gen_IntrinsicCall_S2A2B1]);
        refalrts::copy_evar(vm, context[26], context[27], context[22], context[23]);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::alloc_close_call(vm, context[30]);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
        refalrts::reinit_open_call(context[19]);
        refalrts::reinit_name(context[18], functions[efunc_gen_Intrinsicm_Add_B1]);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[1], functions[efunc_ArithmArgs]);
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[17] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[28], context[31] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[11], context[1] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & IntrinsicCall/4 t.new18/5 t.new19/7 (/11 e.new22/22 )/12 s.new21/19 'u'/18 s.new20/17 >/1
        context[22] = context[20];
        context[23] = context[21];
        if( ! refalrts::char_term( 'u', context[18] ) )
          continue;
        // closed e.new22 as range 22
        do {
          // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 e.Args/24 )/12 'S'/19 'u'/18 'b'/17 >/1
          context[24] = context[22];
          context[25] = context[23];
          if( ! refalrts::char_term( 'S', context[19] ) )
            continue;
          if( ! refalrts::char_term( 'b', context[17] ) )
            continue;
          // closed e.Args as range 24
          //DEBUG: t.IntrinsicFunction: 5
          //DEBUG: t.Metatables: 7
          //DEBUG: e.Args: 24

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 } </26 & IntrinsicCall$2=2:1/27 Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: (/11 AsIs: e.Args/24 AsIs: )/12 HalfReuse: </19 HalfReuse: & Intrinsic-Sub:1/18 HalfReuse: </17 HalfReuse: & ArithmArgs/1 } e.Args/24/28 >/30 >/31 >/32 >/33 Tile{ ]] }
          refalrts::alloc_open_call(vm, context[26]);
          refalrts::alloc_name(vm, context[27], functions[efunc_gen_IntrinsicCall_S2A2B1]);
          refalrts::copy_evar(vm, context[28], context[29], context[24], context[25]);
          refalrts::alloc_close_call(vm, context[30]);
          refalrts::alloc_close_call(vm, context[31]);
          refalrts::alloc_close_call(vm, context[32]);
          refalrts::alloc_close_call(vm, context[33]);
          refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
          refalrts::reinit_open_call(context[19]);
          refalrts::reinit_name(context[18], functions[efunc_gen_Intrinsicm_Sub_B1]);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[1], functions[efunc_ArithmArgs]);
          refalrts::push_stack( vm, context[33] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[31] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[17] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[30], context[33] );
          res = refalrts::splice_evar( res, context[28], context[29] );
          res = refalrts::splice_evar( res, context[11], context[1] );
          res = refalrts::splice_evar( res, context[5], context[6] );
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[7], context[8] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 e.Args/24 )/12 'M'/19 'u'/18 'l'/17 >/1
        context[24] = context[22];
        context[25] = context[23];
        if( ! refalrts::char_term( 'M', context[19] ) )
          continue;
        if( ! refalrts::char_term( 'l', context[17] ) )
          continue;
        // closed e.Args as range 24
        //DEBUG: t.IntrinsicFunction: 5
        //DEBUG: t.Metatables: 7
        //DEBUG: e.Args: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 } </26 & IntrinsicCall$2=2:1/27 Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: (/11 AsIs: e.Args/24 AsIs: )/12 HalfReuse: </19 HalfReuse: & Intrinsic-Mul:1/18 HalfReuse: </17 HalfReuse: & ArithmArgs/1 } e.Args/24/28 >/30 >/31 >/32 >/33 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[26]);
        refalrts::alloc_name(vm, context[27], functions[efunc_gen_IntrinsicCall_S2A2B1]);
        refalrts::copy_evar(vm, context[28], context[29], context[24], context[25]);
        refalrts::alloc_close_call(vm, context[30]);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_close_call(vm, context[32]);
        refalrts::alloc_close_call(vm, context[33]);
        refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
        refalrts::reinit_open_call(context[19]);
        refalrts::reinit_name(context[18], functions[efunc_gen_Intrinsicm_Mul_B1]);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[1], functions[efunc_ArithmArgs]);
        refalrts::push_stack( vm, context[33] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[32] );
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[17] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[30], context[33] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[11], context[1] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 e.Args/22 )/12 'D'/19 'i'/18 'v'/17 >/1
        context[22] = context[20];
        context[23] = context[21];
        if( ! refalrts::char_term( 'D', context[19] ) )
          continue;
        if( ! refalrts::char_term( 'i', context[18] ) )
          continue;
        if( ! refalrts::char_term( 'v', context[17] ) )
          continue;
        // closed e.Args as range 22
        //DEBUG: t.IntrinsicFunction: 5
        //DEBUG: t.Metatables: 7
        //DEBUG: e.Args: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 } </24 & IntrinsicCall$2=2:1/25 Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: (/11 AsIs: e.Args/22 AsIs: )/12 HalfReuse: </19 HalfReuse: & Intrinsic-Div:1/18 HalfReuse: </17 HalfReuse: & ArithmArgs/1 } e.Args/22/26 >/28 >/29 >/30 >/31 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_gen_IntrinsicCall_S2A2B1]);
        refalrts::copy_evar(vm, context[26], context[27], context[22], context[23]);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::alloc_close_call(vm, context[30]);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
        refalrts::reinit_open_call(context[19]);
        refalrts::reinit_name(context[18], functions[efunc_gen_Intrinsicm_Div_B1]);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[1], functions[efunc_ArithmArgs]);
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[17] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[28], context[31] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[11], context[1] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 e.Args/22 )/12 'M'/19 'o'/18 'd'/17 >/1
      context[22] = context[20];
      context[23] = context[21];
      if( ! refalrts::char_term( 'M', context[19] ) )
        continue;
      if( ! refalrts::char_term( 'o', context[18] ) )
        continue;
      if( ! refalrts::char_term( 'd', context[17] ) )
        continue;
      // closed e.Args as range 22
      //DEBUG: t.IntrinsicFunction: 5
      //DEBUG: t.Metatables: 7
      //DEBUG: e.Args: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 } </24 & IntrinsicCall$2=2:1/25 Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: (/11 AsIs: e.Args/22 AsIs: )/12 HalfReuse: </19 HalfReuse: & Intrinsic-Mod:1/18 HalfReuse: </17 HalfReuse: & ArithmArgs/1 } e.Args/22/26 >/28 >/29 >/30 >/31 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_name(vm, context[25], functions[efunc_gen_IntrinsicCall_S2A2B1]);
      refalrts::copy_evar(vm, context[26], context[27], context[22], context[23]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
      refalrts::reinit_open_call(context[19]);
      refalrts::reinit_name(context[18], functions[efunc_gen_Intrinsicm_Mod_B1]);
      refalrts::reinit_open_call(context[17]);
      refalrts::reinit_name(context[1], functions[efunc_ArithmArgs]);
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[17] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[11], context[1] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & IntrinsicCall/4 t.new12/5 t.new13/7 (/11 e.new21/20 )/12 e.new17/22 s.new18/26 s.new19/25 s.new20/24 s.new16/19 s.new15/18 s.new14/17 >/1
      context[20] = context[13];
      context[21] = context[14];
      context[22] = context[15];
      context[23] = context[16];
      // closed e.new21 as range 20
      if( ! refalrts::svar_right( context[24], context[22], context[23] ) )
        continue;
      if( ! refalrts::svar_right( context[25], context[22], context[23] ) )
        continue;
      if( ! refalrts::svar_right( context[26], context[22], context[23] ) )
        continue;
      // closed e.new17 as range 22
      do {
        // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 e.Args/27 )/12 'D'/26 'i'/25 'v'/24 'm'/19 'o'/18 'd'/17 >/1
        context[27] = context[20];
        context[28] = context[21];
        if( ! refalrts::char_term( 'D', context[26] ) )
          continue;
        if( ! refalrts::char_term( 'i', context[25] ) )
          continue;
        if( ! refalrts::char_term( 'v', context[24] ) )
          continue;
        if( ! refalrts::char_term( 'm', context[19] ) )
          continue;
        if( ! refalrts::char_term( 'o', context[18] ) )
          continue;
        if( ! refalrts::char_term( 'd', context[17] ) )
          continue;
        if( ! refalrts::empty_seq( context[22], context[23] ) )
          continue;
        // closed e.Args as range 27
        //DEBUG: t.IntrinsicFunction: 5
        //DEBUG: t.Metatables: 7
        //DEBUG: e.Args: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 } </29 & IntrinsicCall$2=2:1/30 Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: (/11 AsIs: e.Args/27 AsIs: )/12 HalfReuse: </26 HalfReuse: & Intrinsic-Divmod:1/25 HalfReuse: </24 HalfReuse: & ArithmArgs/19 } e.Args/27/31 >/33 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[29]);
        refalrts::alloc_name(vm, context[30], functions[efunc_gen_IntrinsicCall_S2A2B1]);
        refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
        refalrts::alloc_close_call(vm, context[33]);
        refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
        refalrts::reinit_open_call(context[26]);
        refalrts::reinit_name(context[25], functions[efunc_gen_Intrinsicm_Divmod_B1]);
        refalrts::reinit_open_call(context[24]);
        refalrts::reinit_name(context[19], functions[efunc_ArithmArgs]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_close_call(context[17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[33] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[18];
        res = refalrts::splice_elem( res, context[33] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[11], context[19] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 e.Args/27 )/12 'C'/31 'o'/26 'm'/25 'p'/24 'a'/19 'r'/18 'e'/17 >/1
      context[27] = context[20];
      context[28] = context[21];
      context[29] = context[22];
      context[30] = context[23];
      if( ! refalrts::char_term( 'o', context[26] ) )
        continue;
      if( ! refalrts::char_term( 'm', context[25] ) )
        continue;
      if( ! refalrts::char_term( 'p', context[24] ) )
        continue;
      if( ! refalrts::char_term( 'a', context[19] ) )
        continue;
      if( ! refalrts::char_term( 'r', context[18] ) )
        continue;
      if( ! refalrts::char_term( 'e', context[17] ) )
        continue;
      context[31] = refalrts::char_left( 'C', context[29], context[30] );
      if( ! context[31] )
        continue;
      if( ! refalrts::empty_seq( context[29], context[30] ) )
        continue;
      // closed e.Args as range 27
      //DEBUG: t.IntrinsicFunction: 5
      //DEBUG: t.Metatables: 7
      //DEBUG: e.Args: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} 'm'/25 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 } Tile{ HalfReuse: </24 HalfReuse: & IntrinsicCall$2=2:1/19 } Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: (/11 AsIs: e.Args/27 AsIs: )/12 HalfReuse: </31 HalfReuse: & Intrinsic-Compare/26 } e.Args/27/32 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[32], context[33], context[27], context[28]);
      refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
      refalrts::reinit_open_call(context[24]);
      refalrts::reinit_name(context[19], functions[efunc_gen_IntrinsicCall_S2A2B1]);
      refalrts::reinit_open_call(context[31]);
      refalrts::reinit_name(context[26], functions[efunc_Intrinsicm_Compare]);
      refalrts::reinit_close_call(context[18]);
      refalrts::reinit_close_call(context[17]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[31] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[11], context[26] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[24], context[19] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & IntrinsicCall/4 t.new12/5 t.new13/7 (/11 e.new17/20 )/12 s.new16/19 s.new15/18 s.new14/17 >/1
      context[20] = context[13];
      context[21] = context[14];
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      // closed e.new17 as range 20
      do {
        // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 e.Args/22 )/12 'C'/19 'h'/18 'r'/17 >/1
        context[22] = context[20];
        context[23] = context[21];
        if( ! refalrts::char_term( 'C', context[19] ) )
          continue;
        if( ! refalrts::char_term( 'h', context[18] ) )
          continue;
        if( ! refalrts::char_term( 'r', context[17] ) )
          continue;
        // closed e.Args as range 22
        //DEBUG: t.IntrinsicFunction: 5
        //DEBUG: t.Metatables: 7
        //DEBUG: e.Args: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 } </24 & IntrinsicCall$2=2:1/25 Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: (/11 AsIs: e.Args/22 AsIs: )/12 HalfReuse: </19 HalfReuse: & Intrinsic-Chr/18 } e.Args/22/26 >/28 Tile{ HalfReuse: >/17 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_gen_IntrinsicCall_S2A2B1]);
        refalrts::copy_evar(vm, context[26], context[27], context[22], context[23]);
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
        refalrts::reinit_open_call(context[19]);
        refalrts::reinit_name(context[18], functions[efunc_Intrinsicm_Chr]);
        refalrts::reinit_close_call(context[17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[19] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[17];
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[11], context[18] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 e.Args/22 )/12 'O'/19 'r'/18 'd'/17 >/1
      context[22] = context[20];
      context[23] = context[21];
      if( ! refalrts::char_term( 'O', context[19] ) )
        continue;
      if( ! refalrts::char_term( 'r', context[18] ) )
        continue;
      if( ! refalrts::char_term( 'd', context[17] ) )
        continue;
      // closed e.Args as range 22
      //DEBUG: t.IntrinsicFunction: 5
      //DEBUG: t.Metatables: 7
      //DEBUG: e.Args: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 } </24 & IntrinsicCall$2=2:1/25 Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: (/11 AsIs: e.Args/22 AsIs: )/12 HalfReuse: </19 HalfReuse: & Intrinsic-Ord/18 } e.Args/22/26 >/28 Tile{ HalfReuse: >/17 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_name(vm, context[25], functions[efunc_gen_IntrinsicCall_S2A2B1]);
      refalrts::copy_evar(vm, context[26], context[27], context[22], context[23]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
      refalrts::reinit_open_call(context[19]);
      refalrts::reinit_name(context[18], functions[efunc_Intrinsicm_Ord]);
      refalrts::reinit_close_call(context[17]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[17];
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[11], context[18] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & IntrinsicCall/4 t.new12/5 t.new13/7 (/11 e.new19/20 )/12 e.new17/22 s.new18/24 s.new16/19 s.new15/18 s.new14/17 >/1
    context[20] = context[13];
    context[21] = context[14];
    context[22] = context[15];
    context[23] = context[16];
    // closed e.new19 as range 20
    if( ! refalrts::svar_right( context[24], context[22], context[23] ) )
      continue;
    // closed e.new17 as range 22
    do {
      // </0 & IntrinsicCall/4 t.new20/5 t.new21/7 (/11 e.new25/25 )/12 s.new24/29 s.new23/24 s.new22/19 'e'/18 'r'/17 >/1
      context[25] = context[20];
      context[26] = context[21];
      context[27] = context[22];
      context[28] = context[23];
      if( ! refalrts::char_term( 'e', context[18] ) )
        continue;
      if( ! refalrts::char_term( 'r', context[17] ) )
        continue;
      // closed e.new25 as range 25
      if( ! refalrts::svar_left( context[29], context[27], context[28] ) )
        continue;
      if( ! refalrts::empty_seq( context[27], context[28] ) )
        continue;
      do {
        // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 e.Args/30 )/12 'U'/29 'p'/24 'p'/19 'e'/18 'r'/17 >/1
        context[30] = context[25];
        context[31] = context[26];
        if( ! refalrts::char_term( 'U', context[29] ) )
          continue;
        if( ! refalrts::char_term( 'p', context[24] ) )
          continue;
        if( ! refalrts::char_term( 'p', context[19] ) )
          continue;
        // closed e.Args as range 30
        //DEBUG: t.IntrinsicFunction: 5
        //DEBUG: t.Metatables: 7
        //DEBUG: e.Args: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 } Tile{ HalfReuse: </19 } & IntrinsicCall$2=2:1/32 Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: (/11 AsIs: e.Args/30 AsIs: )/12 HalfReuse: </29 HalfReuse: & Intrinsic-Upper/24 } e.Args/30/33 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[32], functions[efunc_gen_IntrinsicCall_S2A2B1]);
        refalrts::copy_evar(vm, context[33], context[34], context[30], context[31]);
        refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
        refalrts::reinit_open_call(context[19]);
        refalrts::reinit_open_call(context[29]);
        refalrts::reinit_name(context[24], functions[efunc_Intrinsicm_Upper]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_close_call(context[17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[29] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[18];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[11], context[24] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_elem( res, context[32] );
        res = refalrts::splice_elem( res, context[19] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 e.Args/30 )/12 'L'/29 'o'/24 'w'/19 'e'/18 'r'/17 >/1
      context[30] = context[25];
      context[31] = context[26];
      if( ! refalrts::char_term( 'L', context[29] ) )
        continue;
      if( ! refalrts::char_term( 'o', context[24] ) )
        continue;
      if( ! refalrts::char_term( 'w', context[19] ) )
        continue;
      // closed e.Args as range 30
      //DEBUG: t.IntrinsicFunction: 5
      //DEBUG: t.Metatables: 7
      //DEBUG: e.Args: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 } Tile{ HalfReuse: </19 } & IntrinsicCall$2=2:1/32 Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: (/11 AsIs: e.Args/30 AsIs: )/12 HalfReuse: </29 HalfReuse: & Intrinsic-Lower/24 } e.Args/30/33 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[32], functions[efunc_gen_IntrinsicCall_S2A2B1]);
      refalrts::copy_evar(vm, context[33], context[34], context[30], context[31]);
      refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
      refalrts::reinit_open_call(context[19]);
      refalrts::reinit_open_call(context[29]);
      refalrts::reinit_name(context[24], functions[efunc_Intrinsicm_Lower]);
      refalrts::reinit_close_call(context[18]);
      refalrts::reinit_close_call(context[17]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[11], context[24] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & IntrinsicCall/4 t.new20/5 t.new21/7 (/11 e.new24/25 )/12 s.new23/24 s.new22/19 'm'/18 'b'/17 >/1
      context[25] = context[20];
      context[26] = context[21];
      if( ! refalrts::char_term( 'm', context[18] ) )
        continue;
      if( ! refalrts::char_term( 'b', context[17] ) )
        continue;
      if( ! refalrts::empty_seq( context[22], context[23] ) )
        continue;
      // closed e.new24 as range 25
      do {
        // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 e.Args/27 )/12 'N'/24 'u'/19 'm'/18 'b'/17 >/1
        context[27] = context[25];
        context[28] = context[26];
        if( ! refalrts::char_term( 'N', context[24] ) )
          continue;
        if( ! refalrts::char_term( 'u', context[19] ) )
          continue;
        // closed e.Args as range 27
        //DEBUG: t.IntrinsicFunction: 5
        //DEBUG: t.Metatables: 7
        //DEBUG: e.Args: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 } </29 & IntrinsicCall$2=2:1/30 Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: (/11 AsIs: e.Args/27 AsIs: )/12 HalfReuse: </24 HalfReuse: & Intrinsic-Numb/19 } e.Args/27/31 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[29]);
        refalrts::alloc_name(vm, context[30], functions[efunc_gen_IntrinsicCall_S2A2B1]);
        refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
        refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
        refalrts::reinit_open_call(context[24]);
        refalrts::reinit_name(context[19], functions[efunc_Intrinsicm_Numb]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_close_call(context[17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[18];
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[11], context[19] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 e.Args/27 )/12 'S'/24 'y'/19 'm'/18 'b'/17 >/1
      context[27] = context[25];
      context[28] = context[26];
      if( ! refalrts::char_term( 'S', context[24] ) )
        continue;
      if( ! refalrts::char_term( 'y', context[19] ) )
        continue;
      // closed e.Args as range 27
      //DEBUG: t.IntrinsicFunction: 5
      //DEBUG: t.Metatables: 7
      //DEBUG: e.Args: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 } </29 & IntrinsicCall$2=2:1/30 Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: (/11 AsIs: e.Args/27 AsIs: )/12 HalfReuse: </24 HalfReuse: & Intrinsic-Symb/19 } e.Args/27/31 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_IntrinsicCall_S2A2B1]);
      refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
      refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
      refalrts::reinit_open_call(context[24]);
      refalrts::reinit_name(context[19], functions[efunc_Intrinsicm_Symb]);
      refalrts::reinit_close_call(context[18]);
      refalrts::reinit_close_call(context[17]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[24] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[11], context[19] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & IntrinsicCall/4 t.new20/5 t.new21/7 (/11 e.new29/25 )/12 s.new26/29 s.new27/30 'p'/31 e.new28/27 s.new25/24 s.new24/19 s.new23/18 s.new22/17 >/1
      context[25] = context[20];
      context[26] = context[21];
      context[27] = context[22];
      context[28] = context[23];
      // closed e.new29 as range 25
      if( ! refalrts::svar_left( context[29], context[27], context[28] ) )
        continue;
      if( ! refalrts::svar_left( context[30], context[27], context[28] ) )
        continue;
      context[31] = refalrts::char_left( 'p', context[27], context[28] );
      if( ! context[31] )
        continue;
      // closed e.new28 as range 27
      do {
        // </0 & IntrinsicCall/4 t.new30/5 t.new31/7 (/11 e.new37/32 )/12 'I'/29 'm'/30 'p'/31 e.new36/34 s.new35/24 s.new34/19 s.new33/18 s.new32/17 >/1
        context[32] = context[25];
        context[33] = context[26];
        context[34] = context[27];
        context[35] = context[28];
        if( ! refalrts::char_term( 'I', context[29] ) )
          continue;
        if( ! refalrts::char_term( 'm', context[30] ) )
          continue;
        // closed e.new37 as range 32
        // closed e.new36 as range 34
        do {
          // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 e.Args/36 )/12 'I'/29 'm'/30 'p'/31 'l'/24 'o'/19 'd'/18 'e'/17 >/1
          context[36] = context[32];
          context[37] = context[33];
          if( ! refalrts::char_term( 'l', context[24] ) )
            continue;
          if( ! refalrts::char_term( 'o', context[19] ) )
            continue;
          if( ! refalrts::char_term( 'd', context[18] ) )
            continue;
          if( ! refalrts::char_term( 'e', context[17] ) )
            continue;
          if( ! refalrts::empty_seq( context[34], context[35] ) )
            continue;
          // closed e.Args as range 36
          //DEBUG: t.IntrinsicFunction: 5
          //DEBUG: t.Metatables: 7
          //DEBUG: e.Args: 36

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} 'p'/31 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 } Tile{ HalfReuse: </24 HalfReuse: & IntrinsicCall$2=2:1/19 } Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: (/11 AsIs: e.Args/36 AsIs: )/12 HalfReuse: </29 HalfReuse: & Intrinsic-Implode/30 } e.Args/36/38 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
          refalrts::copy_evar(vm, context[38], context[39], context[36], context[37]);
          refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
          refalrts::reinit_open_call(context[24]);
          refalrts::reinit_name(context[19], functions[efunc_gen_IntrinsicCall_S2A2B1]);
          refalrts::reinit_open_call(context[29]);
          refalrts::reinit_name(context[30], functions[efunc_Intrinsicm_Implode]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_close_call(context[17]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[17] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[29] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[18];
          res = refalrts::splice_evar( res, context[38], context[39] );
          res = refalrts::splice_evar( res, context[11], context[30] );
          res = refalrts::splice_evar( res, context[5], context[6] );
          res = refalrts::splice_evar( res, context[24], context[19] );
          res = refalrts::splice_evar( res, context[7], context[8] );
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 e.Args/36 )/12 'I'/29 'm'/30 'p'/31 'l'/40 'o'/41 'd'/42 'e'/43 '_'/24 'E'/19 'x'/18 't'/17 >/1
        context[36] = context[32];
        context[37] = context[33];
        context[38] = context[34];
        context[39] = context[35];
        if( ! refalrts::char_term( '_', context[24] ) )
          continue;
        if( ! refalrts::char_term( 'E', context[19] ) )
          continue;
        if( ! refalrts::char_term( 'x', context[18] ) )
          continue;
        if( ! refalrts::char_term( 't', context[17] ) )
          continue;
        context[40] = refalrts::char_left( 'l', context[38], context[39] );
        if( ! context[40] )
          continue;
        context[41] = refalrts::char_left( 'o', context[38], context[39] );
        if( ! context[41] )
          continue;
        context[42] = refalrts::char_left( 'd', context[38], context[39] );
        if( ! context[42] )
          continue;
        context[43] = refalrts::char_left( 'e', context[38], context[39] );
        if( ! context[43] )
          continue;
        if( ! refalrts::empty_seq( context[38], context[39] ) )
          continue;
        // closed e.Args as range 36
        //DEBUG: t.IntrinsicFunction: 5
        //DEBUG: t.Metatables: 7
        //DEBUG: e.Args: 36

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} 'p'/31 'l'/40 'o'/41 {REMOVED TILE} '_'/24 'E'/19 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 } Tile{ HalfReuse: </42 HalfReuse: & IntrinsicCall$2=2:1/43 } Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: (/11 AsIs: e.Args/36 AsIs: )/12 HalfReuse: </29 HalfReuse: & Intrinsic-Implode_Ext/30 } e.Args/36/44 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[44], context[45], context[36], context[37]);
        refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
        refalrts::reinit_open_call(context[42]);
        refalrts::reinit_name(context[43], functions[efunc_gen_IntrinsicCall_S2A2B1]);
        refalrts::reinit_open_call(context[29]);
        refalrts::reinit_name(context[30], functions[efunc_Intrinsicm_Implodeu_Ext]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_close_call(context[17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[29] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[18];
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_evar( res, context[11], context[30] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & IntrinsicCall/4 t.new30/5 t.new31/7 (/11 e.new37/32 )/12 'E'/29 'x'/30 'p'/31 e.new36/34 s.new35/24 s.new34/19 s.new33/18 s.new32/17 >/1
      context[32] = context[25];
      context[33] = context[26];
      context[34] = context[27];
      context[35] = context[28];
      if( ! refalrts::char_term( 'E', context[29] ) )
        continue;
      if( ! refalrts::char_term( 'x', context[30] ) )
        continue;
      // closed e.new37 as range 32
      // closed e.new36 as range 34
      do {
        // </0 & IntrinsicCall/4 t.new38/5 t.new39/7 (/11 e.new40/36 )/12 'E'/29 'x'/30 'p'/31 'l'/24 'o'/19 'd'/18 'e'/17 >/1
        context[36] = context[32];
        context[37] = context[33];
        if( ! refalrts::char_term( 'l', context[24] ) )
          continue;
        if( ! refalrts::char_term( 'o', context[19] ) )
          continue;
        if( ! refalrts::char_term( 'd', context[18] ) )
          continue;
        if( ! refalrts::char_term( 'e', context[17] ) )
          continue;
        if( ! refalrts::empty_seq( context[34], context[35] ) )
          continue;
        // closed e.new40 as range 36
        do {
          // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 (/42 # Symbol/44 # Identifier/45 e.2/40 )/43 )/12 'E'/29 'x'/30 'p'/31 'l'/24 'o'/19 'd'/18 'e'/17 >/1
          context[38] = context[36];
          context[39] = context[37];
          context[40] = 0;
          context[41] = 0;
          context[42] = refalrts::brackets_left( context[40], context[41], context[38], context[39] );
          if( ! context[42] )
            continue;
          refalrts::bracket_pointers(context[42], context[43]);
          context[44] = refalrts::ident_left( identifiers[ident_Symbol], context[40], context[41] );
          if( ! context[44] )
            continue;
          context[45] = refalrts::ident_left( identifiers[ident_Identifier], context[40], context[41] );
          if( ! context[45] )
            continue;
          if( ! refalrts::empty_seq( context[38], context[39] ) )
            continue;
          // closed e.2 as range 40
          //DEBUG: t.IntrinsicFunction: 5
          //DEBUG: t.Metatables: 7
          //DEBUG: e.2: 40

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Symbol/44 {REMOVED TILE} 'p'/31 'l'/24 'o'/19 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 HalfReuse: </11 HalfReuse: & IntrinsicCall$2=2:1@1/42 } Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ HalfReuse: (/45 AsIs: e.2/40 AsIs: )/43 HalfReuse: # Ok/12 HalfReuse: </29 HalfReuse: & Map@2/30 } e.2/40/46 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
          refalrts::copy_evar(vm, context[46], context[47], context[40], context[41]);
          refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
          refalrts::reinit_open_call(context[11]);
          refalrts::reinit_name(context[42], functions[efunc_gen_IntrinsicCall_S2A2B1Z1]);
          refalrts::reinit_open_bracket(context[45]);
          refalrts::reinit_ident(context[12], identifiers[ident_Ok]);
          refalrts::reinit_open_call(context[29]);
          refalrts::reinit_name(context[30], functions[efunc_gen_Map_Z2]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_close_call(context[17]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[17] );
          refalrts::push_stack( vm, context[11] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[29] );
          refalrts::link_brackets( context[45], context[43] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[18];
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_evar( res, context[45], context[30] );
          res = refalrts::splice_evar( res, context[5], context[6] );
          res = refalrts::splice_evar( res, context[7], context[42] );
          refalrts::splice_to_freelist_open( vm, context[4], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 e.Args/38 )/12 'E'/29 'x'/30 'p'/31 'l'/24 'o'/19 'd'/18 'e'/17 >/1
        context[38] = context[36];
        context[39] = context[37];
        // closed e.Args as range 38
        //DEBUG: t.IntrinsicFunction: 5
        //DEBUG: t.Metatables: 7
        //DEBUG: e.Args: 38

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/12 'E'/29 'x'/30 {REMOVED TILE} 'l'/24 'o'/19 'd'/18 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 HalfReuse: </11 } Tile{ HalfReuse: & MakeColdSolution/31 } Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: e.Args/38 } Tile{ HalfReuse: >/17 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
        refalrts::reinit_open_call(context[11]);
        refalrts::reinit_name(context[31], functions[efunc_MakeColdSolution]);
        refalrts::reinit_close_call(context[17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[11] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[17];
        res = refalrts::splice_evar( res, context[38], context[39] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_evar( res, context[7], context[11] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & IntrinsicCall/4 t.new38/5 t.new39/7 (/11 e.new40/36 )/12 'E'/29 'x'/30 'p'/31 'l'/40 'o'/41 'd'/42 'e'/43 '_'/24 'E'/19 'x'/18 't'/17 >/1
      context[36] = context[32];
      context[37] = context[33];
      context[38] = context[34];
      context[39] = context[35];
      if( ! refalrts::char_term( '_', context[24] ) )
        continue;
      if( ! refalrts::char_term( 'E', context[19] ) )
        continue;
      if( ! refalrts::char_term( 'x', context[18] ) )
        continue;
      if( ! refalrts::char_term( 't', context[17] ) )
        continue;
      context[40] = refalrts::char_left( 'l', context[38], context[39] );
      if( ! context[40] )
        continue;
      context[41] = refalrts::char_left( 'o', context[38], context[39] );
      if( ! context[41] )
        continue;
      context[42] = refalrts::char_left( 'd', context[38], context[39] );
      if( ! context[42] )
        continue;
      context[43] = refalrts::char_left( 'e', context[38], context[39] );
      if( ! context[43] )
        continue;
      if( ! refalrts::empty_seq( context[38], context[39] ) )
        continue;
      // closed e.new40 as range 36
      do {
        // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 (/48 # Symbol/50 # Identifier/51 e.2/46 )/49 )/12 'E'/29 'x'/30 'p'/31 'l'/40 'o'/41 'd'/42 'e'/43 '_'/24 'E'/19 'x'/18 't'/17 >/1
        context[44] = context[36];
        context[45] = context[37];
        context[46] = 0;
        context[47] = 0;
        context[48] = refalrts::brackets_left( context[46], context[47], context[44], context[45] );
        if( ! context[48] )
          continue;
        refalrts::bracket_pointers(context[48], context[49]);
        context[50] = refalrts::ident_left( identifiers[ident_Symbol], context[46], context[47] );
        if( ! context[50] )
          continue;
        context[51] = refalrts::ident_left( identifiers[ident_Identifier], context[46], context[47] );
        if( ! context[51] )
          continue;
        if( ! refalrts::empty_seq( context[44], context[45] ) )
          continue;
        // closed e.2 as range 46
        //DEBUG: t.IntrinsicFunction: 5
        //DEBUG: t.Metatables: 7
        //DEBUG: e.2: 46

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Symbol/50 {REMOVED TILE} 'p'/31 'l'/40 'o'/41 'd'/42 'e'/43 '_'/24 'E'/19 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 HalfReuse: </11 HalfReuse: & IntrinsicCall$2=2:1@1/48 } Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ HalfReuse: (/51 AsIs: e.2/46 AsIs: )/49 HalfReuse: # Ok/12 HalfReuse: </29 HalfReuse: & Map@2/30 } e.2/46/52 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[52], context[53], context[46], context[47]);
        refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
        refalrts::reinit_open_call(context[11]);
        refalrts::reinit_name(context[48], functions[efunc_gen_IntrinsicCall_S2A2B1Z1]);
        refalrts::reinit_open_bracket(context[51]);
        refalrts::reinit_ident(context[12], identifiers[ident_Ok]);
        refalrts::reinit_open_call(context[29]);
        refalrts::reinit_name(context[30], functions[efunc_gen_Map_Z2]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_close_call(context[17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[11] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[29] );
        refalrts::link_brackets( context[51], context[49] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[18];
        res = refalrts::splice_evar( res, context[52], context[53] );
        res = refalrts::splice_evar( res, context[51], context[30] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[7], context[48] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 e.Args/44 )/12 'E'/29 'x'/30 'p'/31 'l'/40 'o'/41 'd'/42 'e'/43 '_'/24 'E'/19 'x'/18 't'/17 >/1
      context[44] = context[36];
      context[45] = context[37];
      // closed e.Args as range 44
      //DEBUG: t.IntrinsicFunction: 5
      //DEBUG: t.Metatables: 7
      //DEBUG: e.Args: 44

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/12 'E'/29 'x'/30 'p'/31 'l'/40 'o'/41 'd'/42 {REMOVED TILE} '_'/24 'E'/19 'x'/18 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 HalfReuse: </11 } Tile{ HalfReuse: & MakeColdSolution/43 } Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: e.Args/44 } Tile{ HalfReuse: >/17 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[43], functions[efunc_MakeColdSolution]);
      refalrts::reinit_close_call(context[17]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[17];
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_evar( res, context[7], context[11] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & IntrinsicCall/4 t.new20/5 t.new21/7 (/11 e.new26/25 )/12 s.new25/24 s.new24/19 s.new23/18 s.new22/17 >/1
      context[25] = context[20];
      context[26] = context[21];
      if( ! refalrts::empty_seq( context[22], context[23] ) )
        continue;
      // closed e.new26 as range 25
      do {
        // </0 & IntrinsicCall/4 t.new27/5 t.new28/7 (/11 e.new29/27 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
        context[27] = context[25];
        context[28] = context[26];
        if( ! refalrts::char_term( 'T', context[24] ) )
          continue;
        if( ! refalrts::char_term( 'y', context[19] ) )
          continue;
        if( ! refalrts::char_term( 'p', context[18] ) )
          continue;
        if( ! refalrts::char_term( 'e', context[17] ) )
          continue;
        // closed e.new29 as range 27
        do {
          // </0 & IntrinsicCall/4 t.new30/5 t.new31/7 (/11 t.new32/31 e.new33/29 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
          context[29] = context[27];
          context[30] = context[28];
          context[32] = refalrts::tvar_left( context[31], context[29], context[30] );
          if( ! context[32] )
            continue;
          // closed e.new33 as range 29
          do {
            // </0 & IntrinsicCall/4 t.new34/5 t.new35/7 (/11 (/31 s.new36/37 e.new37/35 )/32 e.new38/33 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
            context[33] = context[29];
            context[34] = context[30];
            context[35] = 0;
            context[36] = 0;
            if( ! refalrts::brackets_term( context[35], context[36], context[31] ) )
              continue;
            // closed e.new38 as range 33
            if( ! refalrts::svar_left( context[37], context[35], context[36] ) )
              continue;
            // closed e.new37 as range 35
            do {
              // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 (/31 # CallBrackets/37 e.1/38 )/32 e./40 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
              context[38] = context[35];
              context[39] = context[36];
              context[40] = context[33];
              context[41] = context[34];
              if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[37] ) )
                continue;
              // closed e.1 as range 38
              // closed e. as range 40
              //DEBUG: t.IntrinsicFunction: 5
              //DEBUG: t.Metatables: 7
              //DEBUG: e.1: 38
              //DEBUG: e.: 40

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} 'p'/18 'e'/17 >/1 {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 HalfReuse: </11 } Tile{ HalfReuse: & MakeColdSolution/19 } Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: (/31 AsIs: # CallBrackets/37 AsIs: e.1/38 AsIs: )/32 AsIs: e./40 HalfReuse: >/12 HalfReuse: >/24 } Tile{ ]] }
              refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
              refalrts::reinit_open_call(context[11]);
              refalrts::reinit_name(context[19], functions[efunc_MakeColdSolution]);
              refalrts::reinit_close_call(context[12]);
              refalrts::reinit_close_call(context[24]);
              refalrts::push_stack( vm, context[24] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[12] );
              refalrts::push_stack( vm, context[11] );
              refalrts::link_brackets( context[31], context[32] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[31], context[24] );
              res = refalrts::splice_evar( res, context[5], context[6] );
              res = refalrts::splice_elem( res, context[19] );
              res = refalrts::splice_evar( res, context[7], context[11] );
              refalrts::splice_to_freelist_open( vm, context[4], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 (/31 # ColdCallBrackets/37 e.1/38 )/32 e./40 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
              context[38] = context[35];
              context[39] = context[36];
              context[40] = context[33];
              context[41] = context[34];
              if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[37] ) )
                continue;
              // closed e.1 as range 38
              // closed e. as range 40
              //DEBUG: t.IntrinsicFunction: 5
              //DEBUG: t.Metatables: 7
              //DEBUG: e.1: 38
              //DEBUG: e.: 40

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} 'p'/18 'e'/17 >/1 {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 HalfReuse: </11 } Tile{ HalfReuse: & MakeColdSolution/19 } Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: (/31 AsIs: # ColdCallBrackets/37 AsIs: e.1/38 AsIs: )/32 AsIs: e./40 HalfReuse: >/12 HalfReuse: >/24 } Tile{ ]] }
              refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
              refalrts::reinit_open_call(context[11]);
              refalrts::reinit_name(context[19], functions[efunc_MakeColdSolution]);
              refalrts::reinit_close_call(context[12]);
              refalrts::reinit_close_call(context[24]);
              refalrts::push_stack( vm, context[24] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[12] );
              refalrts::push_stack( vm, context[11] );
              refalrts::link_brackets( context[31], context[32] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[31], context[24] );
              res = refalrts::splice_evar( res, context[5], context[6] );
              res = refalrts::splice_elem( res, context[19] );
              res = refalrts::splice_evar( res, context[7], context[11] );
              refalrts::splice_to_freelist_open( vm, context[4], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 (/31 # Var/37 e.1/38 )/32 e./40 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
              context[38] = context[35];
              context[39] = context[36];
              context[40] = context[33];
              context[41] = context[34];
              if( ! refalrts::ident_term( identifiers[ident_Var], context[37] ) )
                continue;
              // closed e.1 as range 38
              // closed e. as range 40
              //DEBUG: t.IntrinsicFunction: 5
              //DEBUG: t.Metatables: 7
              //DEBUG: e.1: 38
              //DEBUG: e.: 40

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} 'p'/18 'e'/17 >/1 {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 HalfReuse: </11 } Tile{ HalfReuse: & MakeColdSolution/19 } Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: (/31 AsIs: # Var/37 AsIs: e.1/38 AsIs: )/32 AsIs: e./40 HalfReuse: >/12 HalfReuse: >/24 } Tile{ ]] }
              refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
              refalrts::reinit_open_call(context[11]);
              refalrts::reinit_name(context[19], functions[efunc_MakeColdSolution]);
              refalrts::reinit_close_call(context[12]);
              refalrts::reinit_close_call(context[24]);
              refalrts::push_stack( vm, context[24] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[12] );
              refalrts::push_stack( vm, context[11] );
              refalrts::link_brackets( context[31], context[32] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[31], context[24] );
              res = refalrts::splice_evar( res, context[5], context[6] );
              res = refalrts::splice_elem( res, context[19] );
              res = refalrts::splice_evar( res, context[7], context[11] );
              refalrts::splice_to_freelist_open( vm, context[4], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & IntrinsicCall/4 t.new39/5 t.new40/7 (/11 (/31 # Symbol/37 s.new41/42 e.new42/38 )/32 e.new43/40 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
              context[38] = context[35];
              context[39] = context[36];
              context[40] = context[33];
              context[41] = context[34];
              if( ! refalrts::ident_term( identifiers[ident_Symbol], context[37] ) )
                continue;
              // closed e.new43 as range 40
              if( ! refalrts::svar_left( context[42], context[38], context[39] ) )
                continue;
              // closed e.new42 as range 38
              do {
                // </0 & IntrinsicCall/4 t.new44/5 t.new45/7 (/11 (/31 # Symbol/37 s.new46/42 s.new47/47 )/32 e.new48/45 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
                context[43] = context[38];
                context[44] = context[39];
                context[45] = context[40];
                context[46] = context[41];
                // closed e.new48 as range 45
                if( ! refalrts::svar_left( context[47], context[43], context[44] ) )
                  continue;
                if( ! refalrts::empty_seq( context[43], context[44] ) )
                  continue;
                do {
                  // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 (/31 # Symbol/37 # Number/42 s._/47 )/32 e./48 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
                  context[48] = context[45];
                  context[49] = context[46];
                  if( ! refalrts::ident_term( identifiers[ident_Number], context[42] ) )
                    continue;
                  // closed e. as range 48
                  //DEBUG: t.IntrinsicFunction: 5
                  //DEBUG: t.Metatables: 7
                  //DEBUG: s._: 47
                  //DEBUG: e.: 48

                  refalrts::reset_allocator(vm);
                  //TRASH: {REMOVED TILE} {REMOVED TILE} t.IntrinsicFunction/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
                  //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables/7 } (/50 (/51 Tile{ HalfReuse: (/0 HalfReuse: # Var/4 } Tile{ AsIs: 'e'/17 HalfReuse: # DRIVEN/1 } )/52 ':'/53 (/54 # Symbol/55 # Char/56 'N'/57 )/58 (/59 # Symbol/60 # Char/61 '0'/62 Tile{ HalfReuse: )/11 AsIs: (/31 AsIs: # Symbol/37 AsIs: # Number/42 AsIs: s._/47 AsIs: )/32 AsIs: e./48 AsIs: )/12 HalfReuse: (/24 HalfReuse: )/19 HalfReuse: )/18 } Tile{ ]] }
                  refalrts::alloc_open_bracket(vm, context[50]);
                  refalrts::alloc_open_bracket(vm, context[51]);
                  refalrts::alloc_close_bracket(vm, context[52]);
                  refalrts::alloc_char(vm, context[53], ':');
                  refalrts::alloc_open_bracket(vm, context[54]);
                  refalrts::alloc_ident(vm, context[55], identifiers[ident_Symbol]);
                  refalrts::alloc_ident(vm, context[56], identifiers[ident_Char]);
                  refalrts::alloc_char(vm, context[57], 'N');
                  refalrts::alloc_close_bracket(vm, context[58]);
                  refalrts::alloc_open_bracket(vm, context[59]);
                  refalrts::alloc_ident(vm, context[60], identifiers[ident_Symbol]);
                  refalrts::alloc_ident(vm, context[61], identifiers[ident_Char]);
                  refalrts::alloc_char(vm, context[62], '0');
                  refalrts::reinit_open_bracket(context[0]);
                  refalrts::reinit_ident(context[4], identifiers[ident_Var]);
                  refalrts::reinit_ident(context[1], identifiers[ident_DRIVEN]);
                  refalrts::reinit_close_bracket(context[11]);
                  refalrts::reinit_open_bracket(context[24]);
                  refalrts::reinit_close_bracket(context[19]);
                  refalrts::reinit_close_bracket(context[18]);
                  refalrts::link_brackets( context[50], context[18] );
                  refalrts::link_brackets( context[24], context[19] );
                  refalrts::link_brackets( context[51], context[12] );
                  refalrts::link_brackets( context[31], context[32] );
                  refalrts::link_brackets( context[59], context[11] );
                  refalrts::link_brackets( context[54], context[58] );
                  refalrts::link_brackets( context[0], context[52] );
                  refalrts::Iter trash_prev = arg_begin->prev;
                  refalrts::use(trash_prev);
                  refalrts::Iter res = arg_end->next;
                  res = refalrts::splice_evar( res, context[11], context[18] );
                  res = refalrts::splice_evar( res, context[52], context[62] );
                  res = refalrts::splice_evar( res, context[17], context[1] );
                  res = refalrts::splice_evar( res, context[0], context[4] );
                  res = refalrts::splice_evar( res, context[50], context[51] );
                  res = refalrts::splice_evar( res, context[7], context[8] );
                  refalrts::splice_to_freelist_open( vm, trash_prev, res );
                  return refalrts::cSuccess;
                } while ( 0 );
                refalrts::stop_sentence(vm);

                // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 (/31 # Symbol/37 # Char/42 s.Char/47 )/32 e./48 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
                context[48] = context[45];
                context[49] = context[46];
                if( ! refalrts::ident_term( identifiers[ident_Char], context[42] ) )
                  continue;
                // closed e. as range 48
                //DEBUG: t.IntrinsicFunction: 5
                //DEBUG: t.Metatables: 7
                //DEBUG: s.Char: 47
                //DEBUG: e.: 48

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 HalfReuse: </11 } & IntrinsicCall$2=2:1@2/50 Tile{ AsIs: t.IntrinsicFunction/5 } s.Char/47/51 (/52 e./48/53 Tile{ HalfReuse: )/31 HalfReuse: </37 HalfReuse: & Intrinsic-Type$4=1@1/42 AsIs: s.Char/47 HalfReuse: (/32 AsIs: e./48 AsIs: )/12 HalfReuse: </24 HalfReuse: & Type/19 HalfReuse: s.Char47 /18 HalfReuse: >/17 AsIs: >/1 } >/55 >/56 Tile{ ]] }
                refalrts::alloc_name(vm, context[50], functions[efunc_gen_IntrinsicCall_S2A2B1Z2]);
                refalrts::copy_stvar(vm, context[51], context[47]);
                refalrts::alloc_open_bracket(vm, context[52]);
                refalrts::copy_evar(vm, context[53], context[54], context[48], context[49]);
                refalrts::alloc_close_call(vm, context[55]);
                refalrts::alloc_close_call(vm, context[56]);
                refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
                refalrts::reinit_open_call(context[11]);
                refalrts::reinit_close_bracket(context[31]);
                refalrts::reinit_open_call(context[37]);
                refalrts::reinit_name(context[42], functions[efunc_gen_Intrinsicm_Type_S4A1Z1]);
                refalrts::reinit_open_bracket(context[32]);
                refalrts::reinit_open_call(context[24]);
                refalrts::reinit_name(context[19], functions[efunc_Type]);
                refalrts::reinit_svar( context[18], context[47] );
                refalrts::reinit_close_call(context[17]);
                refalrts::push_stack( vm, context[56] );
                refalrts::push_stack( vm, context[0] );
                refalrts::push_stack( vm, context[55] );
                refalrts::push_stack( vm, context[11] );
                refalrts::push_stack( vm, context[1] );
                refalrts::push_stack( vm, context[37] );
                refalrts::push_stack( vm, context[17] );
                refalrts::push_stack( vm, context[24] );
                refalrts::link_brackets( context[32], context[12] );
                refalrts::link_brackets( context[52], context[31] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[55], context[56] );
                res = refalrts::splice_evar( res, context[31], context[1] );
                res = refalrts::splice_evar( res, context[53], context[54] );
                res = refalrts::splice_evar( res, context[51], context[52] );
                res = refalrts::splice_evar( res, context[5], context[6] );
                res = refalrts::splice_elem( res, context[50] );
                res = refalrts::splice_evar( res, context[7], context[11] );
                refalrts::use( res );
                return refalrts::cSuccess;
              } while ( 0 );
              refalrts::stop_sentence(vm);

              do {
                // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 (/31 # Symbol/37 # Identifier/42 e.2/43 )/32 e./45 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
                context[43] = context[38];
                context[44] = context[39];
                context[45] = context[40];
                context[46] = context[41];
                if( ! refalrts::ident_term( identifiers[ident_Identifier], context[42] ) )
                  continue;
                // closed e.2 as range 43
                // closed e. as range 45
                //DEBUG: t.IntrinsicFunction: 5
                //DEBUG: t.Metatables: 7
                //DEBUG: e.2: 43
                //DEBUG: e.: 45

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 HalfReuse: </11 HalfReuse: & IntrinsicCall$2=2:1@3/31 } Tile{ AsIs: t.IntrinsicFunction/5 } (/47 Tile{ AsIs: e.2/43 } Tile{ HalfReuse: )/37 HalfReuse: (/42 } e./45/48 )/50 </51 & Intrinsic-Type$4=1@2/52 (/53 e.2/43/54 )/56 Tile{ HalfReuse: (/32 AsIs: e./45 AsIs: )/12 HalfReuse: </24 HalfReuse: & Type/19 HalfReuse: </18 HalfReuse: & Implode_Ext/17 } e.2/43/57 >/59 >/60 >/61 >/62 Tile{ AsIs: >/1 ]] }
                refalrts::alloc_open_bracket(vm, context[47]);
                refalrts::copy_evar(vm, context[48], context[49], context[45], context[46]);
                refalrts::alloc_close_bracket(vm, context[50]);
                refalrts::alloc_open_call(vm, context[51]);
                refalrts::alloc_name(vm, context[52], functions[efunc_gen_Intrinsicm_Type_S4A1Z2]);
                refalrts::alloc_open_bracket(vm, context[53]);
                refalrts::copy_evar(vm, context[54], context[55], context[43], context[44]);
                refalrts::alloc_close_bracket(vm, context[56]);
                refalrts::copy_evar(vm, context[57], context[58], context[43], context[44]);
                refalrts::alloc_close_call(vm, context[59]);
                refalrts::alloc_close_call(vm, context[60]);
                refalrts::alloc_close_call(vm, context[61]);
                refalrts::alloc_close_call(vm, context[62]);
                refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
                refalrts::reinit_open_call(context[11]);
                refalrts::reinit_name(context[31], functions[efunc_gen_IntrinsicCall_S2A2B1Z3]);
                refalrts::reinit_close_bracket(context[37]);
                refalrts::reinit_open_bracket(context[42]);
                refalrts::reinit_open_bracket(context[32]);
                refalrts::reinit_open_call(context[24]);
                refalrts::reinit_name(context[19], functions[efunc_Type]);
                refalrts::reinit_open_call(context[18]);
                refalrts::reinit_name(context[17], functions[efunc_Implodeu_Ext]);
                refalrts::push_stack( vm, context[1] );
                refalrts::push_stack( vm, context[0] );
                refalrts::push_stack( vm, context[62] );
                refalrts::push_stack( vm, context[11] );
                refalrts::push_stack( vm, context[61] );
                refalrts::push_stack( vm, context[51] );
                refalrts::push_stack( vm, context[60] );
                refalrts::push_stack( vm, context[24] );
                refalrts::push_stack( vm, context[59] );
                refalrts::push_stack( vm, context[18] );
                refalrts::link_brackets( context[32], context[12] );
                refalrts::link_brackets( context[53], context[56] );
                refalrts::link_brackets( context[42], context[50] );
                refalrts::link_brackets( context[47], context[37] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = context[1];
                res = refalrts::splice_evar( res, context[59], context[62] );
                res = refalrts::splice_evar( res, context[57], context[58] );
                res = refalrts::splice_evar( res, context[32], context[17] );
                res = refalrts::splice_evar( res, context[50], context[56] );
                res = refalrts::splice_evar( res, context[48], context[49] );
                res = refalrts::splice_evar( res, context[37], context[42] );
                res = refalrts::splice_evar( res, context[43], context[44] );
                res = refalrts::splice_elem( res, context[47] );
                res = refalrts::splice_evar( res, context[5], context[6] );
                res = refalrts::splice_evar( res, context[7], context[31] );
                refalrts::use( res );
                return refalrts::cSuccess;
              } while ( 0 );
              refalrts::stop_sentence(vm);

              // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 (/31 # Symbol/37 # Name/42 e.2/43 )/32 e./45 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
              context[43] = context[38];
              context[44] = context[39];
              context[45] = context[40];
              context[46] = context[41];
              if( ! refalrts::ident_term( identifiers[ident_Name], context[42] ) )
                continue;
              // closed e.2 as range 43
              // closed e. as range 45
              //DEBUG: t.IntrinsicFunction: 5
              //DEBUG: t.Metatables: 7
              //DEBUG: e.2: 43
              //DEBUG: e.: 45

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} t.IntrinsicFunction/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables/7 } (/47 (/48 Tile{ HalfReuse: (/0 HalfReuse: # Var/4 } Tile{ AsIs: 'e'/17 HalfReuse: # DRIVEN/1 } )/49 ':'/50 (/51 # Symbol/52 # Char/53 'F'/54 )/55 (/56 # Symbol/57 # Char/58 'g'/59 Tile{ HalfReuse: )/11 AsIs: (/31 AsIs: # Symbol/37 AsIs: # Name/42 AsIs: e.2/43 AsIs: )/32 AsIs: e./45 AsIs: )/12 HalfReuse: (/24 HalfReuse: )/19 HalfReuse: )/18 } Tile{ ]] }
              refalrts::alloc_open_bracket(vm, context[47]);
              refalrts::alloc_open_bracket(vm, context[48]);
              refalrts::alloc_close_bracket(vm, context[49]);
              refalrts::alloc_char(vm, context[50], ':');
              refalrts::alloc_open_bracket(vm, context[51]);
              refalrts::alloc_ident(vm, context[52], identifiers[ident_Symbol]);
              refalrts::alloc_ident(vm, context[53], identifiers[ident_Char]);
              refalrts::alloc_char(vm, context[54], 'F');
              refalrts::alloc_close_bracket(vm, context[55]);
              refalrts::alloc_open_bracket(vm, context[56]);
              refalrts::alloc_ident(vm, context[57], identifiers[ident_Symbol]);
              refalrts::alloc_ident(vm, context[58], identifiers[ident_Char]);
              refalrts::alloc_char(vm, context[59], 'g');
              refalrts::reinit_open_bracket(context[0]);
              refalrts::reinit_ident(context[4], identifiers[ident_Var]);
              refalrts::reinit_ident(context[1], identifiers[ident_DRIVEN]);
              refalrts::reinit_close_bracket(context[11]);
              refalrts::reinit_open_bracket(context[24]);
              refalrts::reinit_close_bracket(context[19]);
              refalrts::reinit_close_bracket(context[18]);
              refalrts::link_brackets( context[47], context[18] );
              refalrts::link_brackets( context[24], context[19] );
              refalrts::link_brackets( context[48], context[12] );
              refalrts::link_brackets( context[31], context[32] );
              refalrts::link_brackets( context[56], context[11] );
              refalrts::link_brackets( context[51], context[55] );
              refalrts::link_brackets( context[0], context[49] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[11], context[18] );
              res = refalrts::splice_evar( res, context[49], context[59] );
              res = refalrts::splice_evar( res, context[17], context[1] );
              res = refalrts::splice_evar( res, context[0], context[4] );
              res = refalrts::splice_evar( res, context[47], context[48] );
              res = refalrts::splice_evar( res, context[7], context[8] );
              refalrts::splice_to_freelist_open( vm, trash_prev, res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 (/31 # ClosureBrackets/37 e.1/38 )/32 e./40 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
              context[38] = context[35];
              context[39] = context[36];
              context[40] = context[33];
              context[41] = context[34];
              if( ! refalrts::ident_term( identifiers[ident_ClosureBrackets], context[37] ) )
                continue;
              // closed e.1 as range 38
              // closed e. as range 40
              //DEBUG: t.IntrinsicFunction: 5
              //DEBUG: t.Metatables: 7
              //DEBUG: e.1: 38
              //DEBUG: e.: 40

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} t.IntrinsicFunction/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables/7 } (/42 (/43 Tile{ HalfReuse: (/0 HalfReuse: # Var/4 } Tile{ AsIs: 'e'/17 HalfReuse: # DRIVEN/1 } )/44 ':'/45 (/46 # Symbol/47 # Char/48 'F'/49 )/50 (/51 # Symbol/52 # Char/53 'c'/54 Tile{ HalfReuse: )/11 AsIs: (/31 AsIs: # ClosureBrackets/37 AsIs: e.1/38 AsIs: )/32 AsIs: e./40 AsIs: )/12 HalfReuse: (/24 HalfReuse: )/19 HalfReuse: )/18 } Tile{ ]] }
              refalrts::alloc_open_bracket(vm, context[42]);
              refalrts::alloc_open_bracket(vm, context[43]);
              refalrts::alloc_close_bracket(vm, context[44]);
              refalrts::alloc_char(vm, context[45], ':');
              refalrts::alloc_open_bracket(vm, context[46]);
              refalrts::alloc_ident(vm, context[47], identifiers[ident_Symbol]);
              refalrts::alloc_ident(vm, context[48], identifiers[ident_Char]);
              refalrts::alloc_char(vm, context[49], 'F');
              refalrts::alloc_close_bracket(vm, context[50]);
              refalrts::alloc_open_bracket(vm, context[51]);
              refalrts::alloc_ident(vm, context[52], identifiers[ident_Symbol]);
              refalrts::alloc_ident(vm, context[53], identifiers[ident_Char]);
              refalrts::alloc_char(vm, context[54], 'c');
              refalrts::reinit_open_bracket(context[0]);
              refalrts::reinit_ident(context[4], identifiers[ident_Var]);
              refalrts::reinit_ident(context[1], identifiers[ident_DRIVEN]);
              refalrts::reinit_close_bracket(context[11]);
              refalrts::reinit_open_bracket(context[24]);
              refalrts::reinit_close_bracket(context[19]);
              refalrts::reinit_close_bracket(context[18]);
              refalrts::link_brackets( context[42], context[18] );
              refalrts::link_brackets( context[24], context[19] );
              refalrts::link_brackets( context[43], context[12] );
              refalrts::link_brackets( context[31], context[32] );
              refalrts::link_brackets( context[51], context[11] );
              refalrts::link_brackets( context[46], context[50] );
              refalrts::link_brackets( context[0], context[44] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[11], context[18] );
              res = refalrts::splice_evar( res, context[44], context[54] );
              res = refalrts::splice_evar( res, context[17], context[1] );
              res = refalrts::splice_evar( res, context[0], context[4] );
              res = refalrts::splice_evar( res, context[42], context[43] );
              res = refalrts::splice_evar( res, context[7], context[8] );
              refalrts::splice_to_freelist_open( vm, trash_prev, res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 (/31 # Brackets/37 e.1/38 )/32 e./40 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
              context[38] = context[35];
              context[39] = context[36];
              context[40] = context[33];
              context[41] = context[34];
              if( ! refalrts::ident_term( identifiers[ident_Brackets], context[37] ) )
                continue;
              // closed e.1 as range 38
              // closed e. as range 40
              //DEBUG: t.IntrinsicFunction: 5
              //DEBUG: t.Metatables: 7
              //DEBUG: e.1: 38
              //DEBUG: e.: 40

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} t.IntrinsicFunction/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables/7 } (/42 (/43 Tile{ HalfReuse: (/0 HalfReuse: # Var/4 } Tile{ AsIs: 'e'/17 HalfReuse: # DRIVEN/1 } )/44 ':'/45 (/46 # Symbol/47 # Char/48 'B'/49 )/50 (/51 # Symbol/52 # Char/53 '0'/54 Tile{ HalfReuse: )/11 AsIs: (/31 AsIs: # Brackets/37 AsIs: e.1/38 AsIs: )/32 AsIs: e./40 AsIs: )/12 HalfReuse: (/24 HalfReuse: )/19 HalfReuse: )/18 } Tile{ ]] }
              refalrts::alloc_open_bracket(vm, context[42]);
              refalrts::alloc_open_bracket(vm, context[43]);
              refalrts::alloc_close_bracket(vm, context[44]);
              refalrts::alloc_char(vm, context[45], ':');
              refalrts::alloc_open_bracket(vm, context[46]);
              refalrts::alloc_ident(vm, context[47], identifiers[ident_Symbol]);
              refalrts::alloc_ident(vm, context[48], identifiers[ident_Char]);
              refalrts::alloc_char(vm, context[49], 'B');
              refalrts::alloc_close_bracket(vm, context[50]);
              refalrts::alloc_open_bracket(vm, context[51]);
              refalrts::alloc_ident(vm, context[52], identifiers[ident_Symbol]);
              refalrts::alloc_ident(vm, context[53], identifiers[ident_Char]);
              refalrts::alloc_char(vm, context[54], '0');
              refalrts::reinit_open_bracket(context[0]);
              refalrts::reinit_ident(context[4], identifiers[ident_Var]);
              refalrts::reinit_ident(context[1], identifiers[ident_DRIVEN]);
              refalrts::reinit_close_bracket(context[11]);
              refalrts::reinit_open_bracket(context[24]);
              refalrts::reinit_close_bracket(context[19]);
              refalrts::reinit_close_bracket(context[18]);
              refalrts::link_brackets( context[42], context[18] );
              refalrts::link_brackets( context[24], context[19] );
              refalrts::link_brackets( context[43], context[12] );
              refalrts::link_brackets( context[31], context[32] );
              refalrts::link_brackets( context[51], context[11] );
              refalrts::link_brackets( context[46], context[50] );
              refalrts::link_brackets( context[0], context[44] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[11], context[18] );
              res = refalrts::splice_evar( res, context[44], context[54] );
              res = refalrts::splice_evar( res, context[17], context[1] );
              res = refalrts::splice_evar( res, context[0], context[4] );
              res = refalrts::splice_evar( res, context[42], context[43] );
              res = refalrts::splice_evar( res, context[7], context[8] );
              refalrts::splice_to_freelist_open( vm, trash_prev, res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 (/31 # ADT-Brackets/37 (/44 e.3/42 )/45 e.2/38 )/32 e./40 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
            context[38] = context[35];
            context[39] = context[36];
            context[40] = context[33];
            context[41] = context[34];
            if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[37] ) )
              continue;
            context[42] = 0;
            context[43] = 0;
            context[44] = refalrts::brackets_left( context[42], context[43], context[38], context[39] );
            if( ! context[44] )
              continue;
            refalrts::bracket_pointers(context[44], context[45]);
            // closed e.3 as range 42
            // closed e.2 as range 38
            // closed e. as range 40
            //DEBUG: t.IntrinsicFunction: 5
            //DEBUG: t.Metatables: 7
            //DEBUG: e.3: 42
            //DEBUG: e.2: 38
            //DEBUG: e.: 40

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} t.IntrinsicFunction/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables/7 } (/46 (/47 Tile{ HalfReuse: (/0 HalfReuse: # Var/4 } Tile{ AsIs: 'e'/17 HalfReuse: # DRIVEN/1 } )/48 ':'/49 (/50 # Symbol/51 # Char/52 'B'/53 )/54 (/55 # Symbol/56 # Char/57 'a'/58 Tile{ HalfReuse: )/11 AsIs: (/31 AsIs: # ADT-Brackets/37 AsIs: (/44 AsIs: e.3/42 AsIs: )/45 AsIs: e.2/38 AsIs: )/32 AsIs: e./40 AsIs: )/12 HalfReuse: (/24 HalfReuse: )/19 HalfReuse: )/18 } Tile{ ]] }
            refalrts::alloc_open_bracket(vm, context[46]);
            refalrts::alloc_open_bracket(vm, context[47]);
            refalrts::alloc_close_bracket(vm, context[48]);
            refalrts::alloc_char(vm, context[49], ':');
            refalrts::alloc_open_bracket(vm, context[50]);
            refalrts::alloc_ident(vm, context[51], identifiers[ident_Symbol]);
            refalrts::alloc_ident(vm, context[52], identifiers[ident_Char]);
            refalrts::alloc_char(vm, context[53], 'B');
            refalrts::alloc_close_bracket(vm, context[54]);
            refalrts::alloc_open_bracket(vm, context[55]);
            refalrts::alloc_ident(vm, context[56], identifiers[ident_Symbol]);
            refalrts::alloc_ident(vm, context[57], identifiers[ident_Char]);
            refalrts::alloc_char(vm, context[58], 'a');
            refalrts::reinit_open_bracket(context[0]);
            refalrts::reinit_ident(context[4], identifiers[ident_Var]);
            refalrts::reinit_ident(context[1], identifiers[ident_DRIVEN]);
            refalrts::reinit_close_bracket(context[11]);
            refalrts::reinit_open_bracket(context[24]);
            refalrts::reinit_close_bracket(context[19]);
            refalrts::reinit_close_bracket(context[18]);
            refalrts::link_brackets( context[46], context[18] );
            refalrts::link_brackets( context[24], context[19] );
            refalrts::link_brackets( context[47], context[12] );
            refalrts::link_brackets( context[31], context[32] );
            refalrts::link_brackets( context[44], context[45] );
            refalrts::link_brackets( context[55], context[11] );
            refalrts::link_brackets( context[50], context[54] );
            refalrts::link_brackets( context[0], context[48] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[11], context[18] );
            res = refalrts::splice_evar( res, context[48], context[58] );
            res = refalrts::splice_evar( res, context[17], context[1] );
            res = refalrts::splice_evar( res, context[0], context[4] );
            res = refalrts::splice_evar( res, context[46], context[47] );
            res = refalrts::splice_evar( res, context[7], context[8] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 t./31 e./33 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
          context[33] = context[29];
          context[34] = context[30];
          // closed e. as range 33
          //DEBUG: t.IntrinsicFunction: 5
          //DEBUG: t.Metatables: 7
          //DEBUG: t.: 31
          //DEBUG: e.: 33

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </35 & IntrinsicCall$2=2/36 Tile{ AsIs: t.Metatables/7 } Tile{ AsIs: </0 Reuse: & IntrinsicCall$2=2:1@4/4 AsIs: t.IntrinsicFunction/5 } t./31/37 (/39 Tile{ AsIs: e./33 } Tile{ AsIs: )/12 HalfReuse: </24 } Tile{ HalfReuse: & Intrinsic-Type$4=1/11 AsIs: t./31 } (/40 e./33/41 )/43 </44 & Intrinsic-Type$4=1:1*7/45 t./31/46 Tile{ HalfReuse: >/19 HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[35]);
          refalrts::alloc_name(vm, context[36], functions[efunc_gen_IntrinsicCall_S2A2]);
          refalrts::copy_evar(vm, context[37], context[38], context[31], context[32]);
          refalrts::alloc_open_bracket(vm, context[39]);
          refalrts::alloc_open_bracket(vm, context[40]);
          refalrts::copy_evar(vm, context[41], context[42], context[33], context[34]);
          refalrts::alloc_close_bracket(vm, context[43]);
          refalrts::alloc_open_call(vm, context[44]);
          refalrts::alloc_name(vm, context[45], functions[efunc_gen_Intrinsicm_Type_S4A1B1D7]);
          refalrts::copy_evar(vm, context[46], context[47], context[31], context[32]);
          refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2B1Z4]);
          refalrts::reinit_open_call(context[24]);
          refalrts::reinit_name(context[11], functions[efunc_gen_Intrinsicm_Type_S4A1]);
          refalrts::reinit_close_call(context[19]);
          refalrts::reinit_close_call(context[18]);
          refalrts::reinit_close_call(context[17]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[35] );
          refalrts::push_stack( vm, context[17] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[18] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[44] );
          refalrts::link_brackets( context[40], context[43] );
          refalrts::link_brackets( context[39], context[12] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[19];
          res = refalrts::splice_evar( res, context[40], context[47] );
          res = refalrts::splice_evar( res, context[11], context[32] );
          res = refalrts::splice_evar( res, context[12], context[24] );
          res = refalrts::splice_evar( res, context[33], context[34] );
          res = refalrts::splice_evar( res, context[37], context[39] );
          res = refalrts::splice_evar( res, context[0], context[6] );
          res = refalrts::splice_evar( res, context[7], context[8] );
          res = refalrts::splice_evar( res, context[35], context[36] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
          if( ! refalrts::empty_seq( context[27], context[28] ) )
            continue;
          //DEBUG: t.IntrinsicFunction: 5
          //DEBUG: t.Metatables: 7

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} t.IntrinsicFunction/5 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables/7 AsIs: (/11 HalfReuse: (/12 HalfReuse: (/24 HalfReuse: # Var/19 Reuse: 'e'/18 HalfReuse: # DRIVEN/17 HalfReuse: )/1 } ':'/29 Tile{ HalfReuse: (/0 HalfReuse: # Symbol/4 } # Char/30 '*'/31 )/32 (/33 # Symbol/34 # Char/35 '0'/36 )/37 )/38 (/39 )/40 )/41 Tile{ ]] }
          refalrts::alloc_char(vm, context[29], ':');
          refalrts::alloc_ident(vm, context[30], identifiers[ident_Char]);
          refalrts::alloc_char(vm, context[31], '*');
          refalrts::alloc_close_bracket(vm, context[32]);
          refalrts::alloc_open_bracket(vm, context[33]);
          refalrts::alloc_ident(vm, context[34], identifiers[ident_Symbol]);
          refalrts::alloc_ident(vm, context[35], identifiers[ident_Char]);
          refalrts::alloc_char(vm, context[36], '0');
          refalrts::alloc_close_bracket(vm, context[37]);
          refalrts::alloc_close_bracket(vm, context[38]);
          refalrts::alloc_open_bracket(vm, context[39]);
          refalrts::alloc_close_bracket(vm, context[40]);
          refalrts::alloc_close_bracket(vm, context[41]);
          refalrts::reinit_open_bracket(context[12]);
          refalrts::reinit_open_bracket(context[24]);
          refalrts::reinit_ident(context[19], identifiers[ident_Var]);
          refalrts::update_char(context[18], 'e');
          refalrts::reinit_ident(context[17], identifiers[ident_DRIVEN]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::reinit_open_bracket(context[0]);
          refalrts::reinit_ident(context[4], identifiers[ident_Symbol]);
          refalrts::link_brackets( context[11], context[41] );
          refalrts::link_brackets( context[39], context[40] );
          refalrts::link_brackets( context[12], context[38] );
          refalrts::link_brackets( context[33], context[37] );
          refalrts::link_brackets( context[0], context[32] );
          refalrts::link_brackets( context[24], context[1] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[30], context[41] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[29] );
          res = refalrts::splice_evar( res, context[7], context[1] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 e.Args/29 )/12 'T'/24 'y'/19 'p'/18 'e'/17 >/1
        context[29] = context[27];
        context[30] = context[28];
        // closed e.Args as range 29
        //DEBUG: t.IntrinsicFunction: 5
        //DEBUG: t.Metatables: 7
        //DEBUG: e.Args: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 } </31 & IntrinsicCall$2=2:1/32 Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: (/11 AsIs: e.Args/29 AsIs: )/12 HalfReuse: </24 HalfReuse: & Intrinsic-Type*5/19 } e.Args/29/33 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[31]);
        refalrts::alloc_name(vm, context[32], functions[efunc_gen_IntrinsicCall_S2A2B1]);
        refalrts::copy_evar(vm, context[33], context[34], context[29], context[30]);
        refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
        refalrts::reinit_open_call(context[24]);
        refalrts::reinit_name(context[19], functions[efunc_gen_Intrinsicm_Type_D5]);
        refalrts::reinit_close_call(context[18]);
        refalrts::reinit_close_call(context[17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[18];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[11], context[19] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 e.Args/27 )/12 'L'/24 'e'/19 'n'/18 'w'/17 >/1
      context[27] = context[25];
      context[28] = context[26];
      if( ! refalrts::char_term( 'L', context[24] ) )
        continue;
      if( ! refalrts::char_term( 'e', context[19] ) )
        continue;
      if( ! refalrts::char_term( 'n', context[18] ) )
        continue;
      if( ! refalrts::char_term( 'w', context[17] ) )
        continue;
      // closed e.Args as range 27
      //DEBUG: t.IntrinsicFunction: 5
      //DEBUG: t.Metatables: 7
      //DEBUG: e.Args: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 } </29 & IntrinsicCall$2=2:1/30 Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: (/11 AsIs: e.Args/27 AsIs: )/12 HalfReuse: </24 HalfReuse: & Intrinsic-Lenw/19 } e.Args/27/31 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_IntrinsicCall_S2A2B1]);
      refalrts::copy_evar(vm, context[31], context[32], context[27], context[28]);
      refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
      refalrts::reinit_open_call(context[24]);
      refalrts::reinit_name(context[19], functions[efunc_Intrinsicm_Lenw]);
      refalrts::reinit_close_call(context[18]);
      refalrts::reinit_close_call(context[17]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[24] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[11], context[19] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & IntrinsicCall/4 t.new20/5 t.new21/7 (/11 e.new25/25 )/12 e.new24/27 s.new23/24 s.new22/19 's'/18 't'/17 >/1
    context[25] = context[20];
    context[26] = context[21];
    context[27] = context[22];
    context[28] = context[23];
    if( ! refalrts::char_term( 's', context[18] ) )
      continue;
    if( ! refalrts::char_term( 't', context[17] ) )
      continue;
    // closed e.new25 as range 25
    // closed e.new24 as range 27
    do {
      // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 e.Args/29 )/12 'F'/33 'i'/24 'r'/19 's'/18 't'/17 >/1
      context[29] = context[25];
      context[30] = context[26];
      context[31] = context[27];
      context[32] = context[28];
      if( ! refalrts::char_term( 'i', context[24] ) )
        continue;
      if( ! refalrts::char_term( 'r', context[19] ) )
        continue;
      context[33] = refalrts::char_left( 'F', context[31], context[32] );
      if( ! context[33] )
        continue;
      if( ! refalrts::empty_seq( context[31], context[32] ) )
        continue;
      // closed e.Args as range 29
      //DEBUG: t.IntrinsicFunction: 5
      //DEBUG: t.Metatables: 7
      //DEBUG: e.Args: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 } Tile{ HalfReuse: </19 } & IntrinsicCall$2=2:1/34 Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: (/11 AsIs: e.Args/29 AsIs: )/12 HalfReuse: </33 HalfReuse: & Intrinsic-First/24 } e.Args/29/35 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[34], functions[efunc_gen_IntrinsicCall_S2A2B1]);
      refalrts::copy_evar(vm, context[35], context[36], context[29], context[30]);
      refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
      refalrts::reinit_open_call(context[19]);
      refalrts::reinit_open_call(context[33]);
      refalrts::reinit_name(context[24], functions[efunc_Intrinsicm_First]);
      refalrts::reinit_close_call(context[18]);
      refalrts::reinit_close_call(context[17]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[33] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[11], context[24] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 e.Args/29 )/12 'L'/24 'a'/19 's'/18 't'/17 >/1
    context[29] = context[25];
    context[30] = context[26];
    if( ! refalrts::char_term( 'L', context[24] ) )
      continue;
    if( ! refalrts::char_term( 'a', context[19] ) )
      continue;
    if( ! refalrts::empty_seq( context[27], context[28] ) )
      continue;
    // closed e.Args as range 29
    //DEBUG: t.IntrinsicFunction: 5
    //DEBUG: t.Metatables: 7
    //DEBUG: e.Args: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 } </31 & IntrinsicCall$2=2:1/32 Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: (/11 AsIs: e.Args/29 AsIs: )/12 HalfReuse: </24 HalfReuse: & Intrinsic-Last/19 } e.Args/29/33 Tile{ HalfReuse: >/18 HalfReuse: >/17 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_gen_IntrinsicCall_S2A2B1]);
    refalrts::copy_evar(vm, context[33], context[34], context[29], context[30]);
    refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
    refalrts::reinit_open_call(context[24]);
    refalrts::reinit_name(context[19], functions[efunc_Intrinsicm_Last]);
    refalrts::reinit_close_call(context[18]);
    refalrts::reinit_close_call(context[17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[24] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[18];
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[11], context[19] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IntrinsicCall/4 t.IntrinsicFunction/5 t.Metatables/7 (/11 e.Args/9 )/12 e.BehaviorName/2 >/1
  // closed e.Args as range 9
  // closed e.BehaviorName as range 2
  //DEBUG: t.IntrinsicFunction: 5
  //DEBUG: t.Metatables: 7
  //DEBUG: e.Args: 9
  //DEBUG: e.BehaviorName: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.BehaviorName/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2/4 } Tile{ AsIs: t.Metatables/7 HalfReuse: </11 } & MakeColdSolution/13 Tile{ AsIs: t.IntrinsicFunction/5 } Tile{ AsIs: e.Args/9 } Tile{ HalfReuse: >/12 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[13], functions[efunc_MakeColdSolution]);
  refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2]);
  refalrts::reinit_open_call(context[11]);
  refalrts::reinit_close_call(context[12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[7], context[11] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IntrinsicCall("IntrinsicCall", COOKIE1_, COOKIE2_, func_IntrinsicCall);


static refalrts::FnResult func_eDRIVEN(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & eDRIVEN/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Var/4 HalfReuse: 'e'/1 } # DRIVEN/5 )/6 Tile{ ]] }
  refalrts::alloc_ident(vm, context[5], identifiers[ident_DRIVEN]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Var]);
  refalrts::reinit_char(context[1], 'e');
  refalrts::link_brackets( context[0], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_eDRIVEN("eDRIVEN", COOKIE1_, COOKIE2_, func_eDRIVEN);


static refalrts::FnResult func_gen_Intrinsicm_Mu_S1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 49 elems
  refalrts::Iter context[49];
  refalrts::zeros( context, 49 );
  // </0 & Intrinsic-Mu$1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Intrinsic-Mu$1:1/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 t.new4/15 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Intrinsic-Mu$1:1/4 t.new5/5 (/9 e.new8/17 )/10 (/13 e.new9/19 )/14 (/15 s.new6/23 e.new7/21 )/16 >/1
    context[17] = context[7];
    context[18] = context[8];
    context[19] = context[11];
    context[20] = context[12];
    context[21] = 0;
    context[22] = 0;
    if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
      continue;
    // closed e.new8 as range 17
    // closed e.new9 as range 19
    if( ! refalrts::svar_left( context[23], context[21], context[22] ) )
      continue;
    // closed e.new7 as range 21
    do {
      // </0 & Intrinsic-Mu$1:1/4 t.Metatables/5 (/9 e.MuArg/24 )/10 (/13 e.MetatableName/26 )/14 (/15 # Symbol/23 # Name/30 e.Name/28 )/16 >/1
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[19];
      context[27] = context[20];
      context[28] = context[21];
      context[29] = context[22];
      if( ! refalrts::ident_term( identifiers[ident_Symbol], context[23] ) )
        continue;
      context[30] = refalrts::ident_left( identifiers[ident_Name], context[28], context[29] );
      if( ! context[30] )
        continue;
      // closed e.MuArg as range 24
      // closed e.MetatableName as range 26
      // closed e.Name as range 28
      //DEBUG: t.Metatables: 5
      //DEBUG: e.MuArg: 24
      //DEBUG: e.MetatableName: 26
      //DEBUG: e.Name: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Intrinsic-Mu$1:1/4 {REMOVED TILE} (/9 {REMOVED TILE} {REMOVED TILE} e.MetatableName/26 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables/5 } Tile{ HalfReuse: # Ok/10 AsIs: (/13 } Tile{ HalfReuse: # CallBrackets/14 AsIs: (/15 AsIs: # Symbol/23 AsIs: # Name/30 AsIs: e.Name/28 AsIs: )/16 } Tile{ AsIs: e.MuArg/24 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_ident(context[10], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[14], identifiers[ident_CallBrackets]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[13], context[1] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[14], context[16] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Intrinsic-Mu$1:1/4 t.Metatables/5 (/9 e.MuArg/24 )/10 (/13 e.MetatableName/26 )/14 (/15 # ClosureBrackets/23 e.Body/28 )/16 >/1
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[19];
      context[27] = context[20];
      context[28] = context[21];
      context[29] = context[22];
      if( ! refalrts::ident_term( identifiers[ident_ClosureBrackets], context[23] ) )
        continue;
      // closed e.MuArg as range 24
      // closed e.MetatableName as range 26
      // closed e.Body as range 28
      //DEBUG: t.Metatables: 5
      //DEBUG: e.MuArg: 24
      //DEBUG: e.MetatableName: 26
      //DEBUG: e.Body: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Intrinsic-Mu$1:1/4 {REMOVED TILE} (/9 {REMOVED TILE} {REMOVED TILE} e.MetatableName/26 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables/5 } Tile{ HalfReuse: # Ok/10 AsIs: (/13 } Tile{ HalfReuse: # CallBrackets/14 AsIs: (/15 AsIs: # ClosureBrackets/23 AsIs: e.Body/28 AsIs: )/16 } Tile{ AsIs: e.MuArg/24 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_ident(context[10], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[14], identifiers[ident_CallBrackets]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[13], context[1] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[14], context[16] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Intrinsic-Mu$1:1/4 t.new10/5 (/9 e.new13/24 )/10 (/13 e.new14/26 )/14 (/15 # Symbol/23 s.new11/30 e.new12/28 )/16 >/1
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[19];
      context[27] = context[20];
      context[28] = context[21];
      context[29] = context[22];
      if( ! refalrts::ident_term( identifiers[ident_Symbol], context[23] ) )
        continue;
      // closed e.new13 as range 24
      // closed e.new14 as range 26
      if( ! refalrts::svar_left( context[30], context[28], context[29] ) )
        continue;
      // closed e.new12 as range 28
      do {
        // </0 & Intrinsic-Mu$1:1/4 t.new15/5 (/9 e.new18/31 )/10 (/13 e.new19/33 )/14 (/15 # Symbol/23 s.new16/30 s.new17/37 )/16 >/1
        context[31] = context[24];
        context[32] = context[25];
        context[33] = context[26];
        context[34] = context[27];
        context[35] = context[28];
        context[36] = context[29];
        // closed e.new18 as range 31
        // closed e.new19 as range 33
        if( ! refalrts::svar_left( context[37], context[35], context[36] ) )
          continue;
        if( ! refalrts::empty_seq( context[35], context[36] ) )
          continue;
        do {
          // </0 & Intrinsic-Mu$1:1/4 t.Metatables/5 (/9 e.MuArg/38 )/10 (/13 e.MetatableName/40 )/14 (/15 # Symbol/23 # Identifier/30 s.Name/37 )/16 >/1
          context[38] = context[31];
          context[39] = context[32];
          context[40] = context[33];
          context[41] = context[34];
          if( ! refalrts::ident_term( identifiers[ident_Identifier], context[30] ) )
            continue;
          // closed e.MuArg as range 38
          // closed e.MetatableName as range 40
          //DEBUG: t.Metatables: 5
          //DEBUG: s.Name: 37
          //DEBUG: e.MuArg: 38
          //DEBUG: e.MetatableName: 40
          //5: t.Metatables
          //37: s.Name
          //38: e.MuArg
          //40: e.MetatableName
          //47: s.Name

          refalrts::reset_allocator(vm);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::alloc_open_call(vm, context[42]);
          refalrts::alloc_name(vm, context[44], functions[efunc_gen_Intrinsicm_Mu_S1B1S3C1]);
          refalrts::alloc_open_call(vm, context[45]);
          refalrts::alloc_name(vm, context[46], functions[efunc_ArithmeticSymbolToFunction]);
          refalrts::copy_stvar(vm, context[47], context[37]);
          refalrts::alloc_close_call(vm, context[48]);
          refalrts::alloc_close_call(vm, context[43]);
          refalrts::push_stack( vm, context[43] );
          refalrts::push_stack( vm, context[42] );
          res = refalrts::splice_elem( res, context[43] );
          refalrts::push_stack( vm, context[48] );
          refalrts::push_stack( vm, context[45] );
          res = refalrts::splice_elem( res, context[48] );
          res = refalrts::splice_stvar( res, context[47] );
          res = refalrts::splice_elem( res, context[46] );
          res = refalrts::splice_elem( res, context[45] );
          res = refalrts::splice_elem( res, context[44] );
          res = refalrts::splice_elem( res, context[42] );
          refalrts::use( res );
          refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
          if (rec_res != refalrts::cSuccess)
            return rec_res;
          refalrts::this_is_generated_function(vm);
          do {
            // </42 & Intrinsic-Mu$1:1$3?1/46 # True/47 e.FunctionName/44 >/43
            context[44] = 0;
            context[45] = 0;
            context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
            context[47] = refalrts::ident_left( identifiers[ident_True], context[44], context[45] );
            if( ! context[47] )
              continue;
            // closed e.FunctionName as range 44
            //DEBUG: t.Metatables: 5
            //DEBUG: s.Name: 37
            //DEBUG: e.MuArg: 38
            //DEBUG: e.MetatableName: 40
            //DEBUG: e.FunctionName: 44

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & Intrinsic-Mu$1:1/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 (/13 e.MetatableName/40 {REMOVED TILE} # Symbol/23 # Identifier/30 s.Name/37 {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables/5 } Tile{ HalfReuse: # Ok/14 AsIs: (/15 } Tile{ HalfReuse: # CallBrackets/16 HalfReuse: (/42 HalfReuse: # Symbol/46 Reuse: # Name/47 AsIs: e.FunctionName/44 HalfReuse: )/43 } Tile{ AsIs: e.MuArg/38 } Tile{ HalfReuse: )/1 ]] }
            refalrts::reinit_ident(context[14], identifiers[ident_Ok]);
            refalrts::reinit_ident(context[16], identifiers[ident_CallBrackets]);
            refalrts::reinit_open_bracket(context[42]);
            refalrts::reinit_ident(context[46], identifiers[ident_Symbol]);
            refalrts::update_ident(context[47], identifiers[ident_Name]);
            refalrts::reinit_close_bracket(context[43]);
            refalrts::reinit_close_bracket(context[1]);
            refalrts::link_brackets( context[15], context[1] );
            refalrts::link_brackets( context[42], context[43] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[38], context[39] );
            res = refalrts::splice_evar( res, context[16], context[43] );
            res = refalrts::splice_evar( res, context[14], context[15] );
            res = refalrts::splice_evar( res, context[5], context[6] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          refalrts::splice_to_freelist(vm, context[42], context[43]);
          continue;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Intrinsic-Mu$1:1/4 t.Metatables/5 (/9 e.MuArg/38 )/10 (/13 e.MetatableName/40 )/14 (/15 # Symbol/23 # Char/30 s.Name/37 )/16 >/1
        context[38] = context[31];
        context[39] = context[32];
        context[40] = context[33];
        context[41] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_Char], context[30] ) )
          continue;
        // closed e.MuArg as range 38
        // closed e.MetatableName as range 40
        //DEBUG: t.Metatables: 5
        //DEBUG: s.Name: 37
        //DEBUG: e.MuArg: 38
        //DEBUG: e.MetatableName: 40
        //5: t.Metatables
        //37: s.Name
        //38: e.MuArg
        //40: e.MetatableName
        //47: s.Name

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_Intrinsicm_Mu_S1B1S4C1]);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_ArithmeticSymbolToFunction]);
        refalrts::copy_stvar(vm, context[47], context[37]);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::alloc_close_call(vm, context[43]);
        refalrts::push_stack( vm, context[43] );
        refalrts::push_stack( vm, context[42] );
        res = refalrts::splice_elem( res, context[43] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[45] );
        res = refalrts::splice_elem( res, context[48] );
        res = refalrts::splice_stvar( res, context[47] );
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_elem( res, context[42] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </42 & Intrinsic-Mu$1:1$4?1/46 # True/47 e.FunctionName/44 >/43
          context[44] = 0;
          context[45] = 0;
          context[46] = refalrts::call_left( context[44], context[45], context[42], context[43] );
          context[47] = refalrts::ident_left( identifiers[ident_True], context[44], context[45] );
          if( ! context[47] )
            continue;
          // closed e.FunctionName as range 44
          //DEBUG: t.Metatables: 5
          //DEBUG: s.Name: 37
          //DEBUG: e.MuArg: 38
          //DEBUG: e.MetatableName: 40
          //DEBUG: e.FunctionName: 44

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & Intrinsic-Mu$1:1/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 (/13 e.MetatableName/40 {REMOVED TILE} # Symbol/23 # Char/30 s.Name/37 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables/5 } Tile{ HalfReuse: # Ok/14 AsIs: (/15 } Tile{ HalfReuse: # CallBrackets/16 HalfReuse: (/42 HalfReuse: # Symbol/46 Reuse: # Name/47 AsIs: e.FunctionName/44 HalfReuse: )/43 } Tile{ AsIs: e.MuArg/38 } Tile{ HalfReuse: )/1 ]] }
          refalrts::reinit_ident(context[14], identifiers[ident_Ok]);
          refalrts::reinit_ident(context[16], identifiers[ident_CallBrackets]);
          refalrts::reinit_open_bracket(context[42]);
          refalrts::reinit_ident(context[46], identifiers[ident_Symbol]);
          refalrts::update_ident(context[47], identifiers[ident_Name]);
          refalrts::reinit_close_bracket(context[43]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[15], context[1] );
          refalrts::link_brackets( context[42], context[43] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[38], context[39] );
          res = refalrts::splice_evar( res, context[16], context[43] );
          res = refalrts::splice_evar( res, context[14], context[15] );
          res = refalrts::splice_evar( res, context[5], context[6] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[42], context[43]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Intrinsic-Mu$1:1/4 t.Metatables/5 (/9 e.MuArg/31 )/10 (/13 e.MetatableName/33 )/14 (/15 # Symbol/23 # Identifier/30 e.Name/35 )/16 >/1
      context[31] = context[24];
      context[32] = context[25];
      context[33] = context[26];
      context[34] = context[27];
      context[35] = context[28];
      context[36] = context[29];
      if( ! refalrts::ident_term( identifiers[ident_Identifier], context[30] ) )
        continue;
      // closed e.MuArg as range 31
      // closed e.MetatableName as range 33
      // closed e.Name as range 35
      //DEBUG: t.Metatables: 5
      //DEBUG: e.MuArg: 31
      //DEBUG: e.MetatableName: 33
      //DEBUG: e.Name: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Symbol/23 # Identifier/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & MakeSubstitution-FromMetatables:1/10 AsIs: (/13 AsIs: e.MetatableName/33 AsIs: )/14 AsIs: (/15 } Tile{ AsIs: e.Name/35 } Tile{ AsIs: )/16 } Tile{ AsIs: (/9 } Tile{ AsIs: e.MuArg/31 } Tile{ HalfReuse: )/4 AsIs: t.Metatables/5 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_name(context[10], functions[efunc_gen_MakeSubstitutionm_FromMetatables_B1]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[4] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[4], context[6] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[10], context[15] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Intrinsic-Mu$1:1/4 t.Metatables/5 (/9 e.MuArg/24 )/10 (/13 e.MetatableName/26 )/14 (/15 # Brackets/23 e.Chars/28 )/16 >/1
    context[24] = context[17];
    context[25] = context[18];
    context[26] = context[19];
    context[27] = context[20];
    context[28] = context[21];
    context[29] = context[22];
    if( ! refalrts::ident_term( identifiers[ident_Brackets], context[23] ) )
      continue;
    // closed e.MuArg as range 24
    // closed e.MetatableName as range 26
    // closed e.Chars as range 28
    //DEBUG: t.Metatables: 5
    //DEBUG: e.MuArg: 24
    //DEBUG: e.MetatableName: 26
    //DEBUG: e.Chars: 28
    //5: t.Metatables
    //24: e.MuArg
    //26: e.MetatableName
    //28: e.Chars
    //35: e.Chars

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[30]);
    refalrts::alloc_name(vm, context[32], functions[efunc_gen_Intrinsicm_Mu_S1B1S6C1]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_AllChars]);
    refalrts::copy_evar(vm, context[35], context[36], context[28], context[29]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_close_call(vm, context[31]);
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[30] );
    res = refalrts::splice_elem( res, context[31] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[33] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_elem( res, context[32] );
    res = refalrts::splice_elem( res, context[30] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </30 & Intrinsic-Mu$1:1$6?1/34 # Ok/35 e.Name/32 >/31
      context[32] = 0;
      context[33] = 0;
      context[34] = refalrts::call_left( context[32], context[33], context[30], context[31] );
      context[35] = refalrts::ident_left( identifiers[ident_Ok], context[32], context[33] );
      if( ! context[35] )
        continue;
      // closed e.Name as range 32
      //DEBUG: t.Metatables: 5
      //DEBUG: e.MuArg: 24
      //DEBUG: e.MetatableName: 26
      //DEBUG: e.Chars: 28
      //DEBUG: e.Name: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} )/10 (/13 {REMOVED TILE} {REMOVED TILE} # Brackets/23 e.Chars/28 )/16 </30 & Intrinsic-Mu$1:1$6?1/34 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeSubstitution-FromMetatables/4 AsIs: t.Metatables/5 AsIs: (/9 } Tile{ AsIs: e.MetatableName/26 } Tile{ AsIs: )/14 AsIs: (/15 } Tile{ AsIs: e.MuArg/24 } Tile{ HalfReuse: )/35 AsIs: e.Name/32 AsIs: >/31 } Tile{ ]] }
      refalrts::update_name(context[4], functions[efunc_MakeSubstitutionm_FromMetatables]);
      refalrts::reinit_close_bracket(context[35]);
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[35] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[35], context[31] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      refalrts::splice_to_freelist_open( vm, context[9], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[30], context[31]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Mu$1:1/4 t.Metatables/5 (/9 e.MuArg/7 )/10 (/13 e.MetatableName/11 )/14 t._/15 >/1
  // closed e.MuArg as range 7
  // closed e.MetatableName as range 11
  //DEBUG: t.Metatables: 5
  //DEBUG: t._: 15
  //DEBUG: e.MuArg: 7
  //DEBUG: e.MetatableName: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Mu$1:1/4 {REMOVED TILE} (/9 e.MuArg/7 )/10 (/13 e.MetatableName/11 )/14 t._/15 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables/5 } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Mu_S1B1("Intrinsic-Mu$1:1", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Mu_S1B1);


static refalrts::FnResult func_Intrinsicm_Mu(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & Intrinsic-Mu/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Intrinsic-Mu/4 e.new1/2 t.new2/5 >/1
  context[6] = refalrts::tvar_right( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 2
  do {
    // </0 & Intrinsic-Mu/4 e.Args/7 t.Metatables/5 >/1
    context[7] = context[2];
    context[8] = context[3];
    // closed e.Args as range 7
    //DEBUG: t.Metatables: 5
    //DEBUG: e.Args: 7
    //5: t.Metatables
    //7: e.Args
    //12: e.Args

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_Intrinsicm_Mu_S1C1]);
    refalrts::copy_evar(vm, context[12], context[13], context[7], context[8]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </9 & Intrinsic-Mu$1?1/13 t.Function/20 e.MuArg/11 (/16 # Symbol/18 # Name/19 e.MetatableName/14 )/17 >/10
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::call_left( context[11], context[12], context[9], context[10] );
      context[14] = 0;
      context[15] = 0;
      context[16] = refalrts::brackets_right( context[14], context[15], context[11], context[12] );
      if( ! context[16] )
        continue;
      refalrts::bracket_pointers(context[16], context[17]);
      context[18] = refalrts::ident_left( identifiers[ident_Symbol], context[14], context[15] );
      if( ! context[18] )
        continue;
      context[19] = refalrts::ident_left( identifiers[ident_Name], context[14], context[15] );
      if( ! context[19] )
        continue;
      // closed e.MetatableName as range 14
      context[21] = refalrts::tvar_left( context[20], context[11], context[12] );
      if( ! context[21] )
        continue;
      // closed e.MuArg as range 11
      //DEBUG: t.Metatables: 5
      //DEBUG: e.Args: 7
      //DEBUG: e.MetatableName: 14
      //DEBUG: t.Function: 20
      //DEBUG: e.MuArg: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Args/7 {REMOVED TILE} & Intrinsic-Mu$1?1/13 {REMOVED TILE} {REMOVED TILE} (/16 {REMOVED TILE} >/10 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Intrinsic-Mu$1:1/4 } Tile{ AsIs: t.Metatables/5 HalfReuse: (/9 } Tile{ AsIs: e.MuArg/11 } Tile{ HalfReuse: )/18 HalfReuse: (/19 AsIs: e.MetatableName/14 AsIs: )/17 } Tile{ AsIs: t.Function/20 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Intrinsicm_Mu_S1B1]);
      refalrts::reinit_open_bracket(context[9]);
      refalrts::reinit_close_bracket(context[18]);
      refalrts::reinit_open_bracket(context[19]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[19], context[17] );
      refalrts::link_brackets( context[9], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[18], context[17] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[5], context[9] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[9], context[10]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Mu/4 e._/2 t.Metatables/5 >/1
  // closed e._ as range 2
  //DEBUG: t.Metatables: 5
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Mu/4 e._/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables/5 HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[5];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Mu("Intrinsic-Mu", COOKIE1_, COOKIE2_, func_Intrinsicm_Mu);


static refalrts::FnResult func_ArithmeticSymbolToFunction(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & ArithmeticSymbolToFunction/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ArithmeticSymbolToFunction/4 s.new1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ArithmeticSymbolToFunction/4 '+'/5 >/1
    if( ! refalrts::char_term( '+', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: # True/0 HalfReuse: 'A'/4 Reuse: 'd'/5 HalfReuse: 'd'/1 ]] }
    refalrts::reinit_ident(context[0], identifiers[ident_True]);
    refalrts::reinit_char(context[4], 'A');
    refalrts::update_char(context[5], 'd');
    refalrts::reinit_char(context[1], 'd');
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ArithmeticSymbolToFunction/4 '-'/5 >/1
    if( ! refalrts::char_term( '-', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: # True/0 HalfReuse: 'S'/4 Reuse: 'u'/5 HalfReuse: 'b'/1 ]] }
    refalrts::reinit_ident(context[0], identifiers[ident_True]);
    refalrts::reinit_char(context[4], 'S');
    refalrts::update_char(context[5], 'u');
    refalrts::reinit_char(context[1], 'b');
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ArithmeticSymbolToFunction/4 '/'/5 >/1
    if( ! refalrts::char_term( '/', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: # True/0 HalfReuse: 'D'/4 Reuse: 'i'/5 HalfReuse: 'v'/1 ]] }
    refalrts::reinit_ident(context[0], identifiers[ident_True]);
    refalrts::reinit_char(context[4], 'D');
    refalrts::update_char(context[5], 'i');
    refalrts::reinit_char(context[1], 'v');
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ArithmeticSymbolToFunction/4 '*'/5 >/1
    if( ! refalrts::char_term( '*', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: # True/0 HalfReuse: 'M'/4 Reuse: 'u'/5 HalfReuse: 'l'/1 ]] }
    refalrts::reinit_ident(context[0], identifiers[ident_True]);
    refalrts::reinit_char(context[4], 'M');
    refalrts::update_char(context[5], 'u');
    refalrts::reinit_char(context[1], 'l');
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ArithmeticSymbolToFunction/4 '%'/5 >/1
    if( ! refalrts::char_term( '%', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: # True/0 HalfReuse: 'M'/4 Reuse: 'o'/5 HalfReuse: 'd'/1 ]] }
    refalrts::reinit_ident(context[0], identifiers[ident_True]);
    refalrts::reinit_char(context[4], 'M');
    refalrts::update_char(context[5], 'o');
    refalrts::reinit_char(context[1], 'd');
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ArithmeticSymbolToFunction/4 '?'/5 >/1
    if( ! refalrts::char_term( '?', context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: # True/0 HalfReuse: 'R'/4 Reuse: 'e'/5 HalfReuse: 's'/1 }"idue"/6 Tile{ ]] }
    refalrts::alloc_chars(vm, context[6], context[7], "idue", 4);
    refalrts::reinit_ident(context[0], identifiers[ident_True]);
    refalrts::reinit_char(context[4], 'R');
    refalrts::update_char(context[5], 'e');
    refalrts::reinit_char(context[1], 's');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ArithmeticSymbolToFunction/4 s._/5 >/1
  //DEBUG: s._: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ArithmeticSymbolToFunction/4 s._/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ArithmeticSymbolToFunction("ArithmeticSymbolToFunction", COOKIE1_, COOKIE2_, func_ArithmeticSymbolToFunction);


static refalrts::FnResult func_AllChars(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & AllChars/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & AllChars/4 (/9 # Symbol/11 # Char/12 s.Char/13 )/10 e./5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = refalrts::ident_left( identifiers[ident_Symbol], context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::ident_left( identifiers[ident_Char], context[7], context[8] );
    if( ! context[12] )
      continue;
    // closed e. as range 5
    if( ! refalrts::svar_left( context[13], context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    //DEBUG: e.: 5
    //DEBUG: s.Char: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & AllChars/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </9 HalfReuse: & DoAllChars/11 HalfReuse: (/12 AsIs: s.Char/13 AsIs: )/10 AsIs: e./5 AsIs: >/1 ]] }
    refalrts::reinit_open_call(context[9]);
    refalrts::reinit_name(context[11], functions[efunc_DoAllChars]);
    refalrts::reinit_open_bracket(context[12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[9] );
    refalrts::link_brackets( context[12], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & AllChars/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & AllChars/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_Ok]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AllChars/4 e.Terms/2 >/1
  // closed e.Terms as range 2
  //DEBUG: e.Terms: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & AllChars/4 e.Terms/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Fails/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_Fails]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_AllChars("AllChars", COOKIE1_, COOKIE2_, func_AllChars);


static refalrts::FnResult func_DoAllChars(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & DoAllChars/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoAllChars/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DoAllChars/4 (/7 e.Chars/9 )/8 (/15 # Symbol/17 # Char/18 s.Char/19 )/16 e.Rest/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    context[17] = refalrts::ident_left( identifiers[ident_Symbol], context[13], context[14] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::ident_left( identifiers[ident_Char], context[13], context[14] );
    if( ! context[18] )
      continue;
    // closed e.Chars as range 9
    // closed e.Rest as range 11
    if( ! refalrts::svar_left( context[19], context[13], context[14] ) )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    //DEBUG: e.Chars: 9
    //DEBUG: e.Rest: 11
    //DEBUG: s.Char: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} # Symbol/17 # Char/18 s.Char/19 )/16 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoAllChars/4 AsIs: (/7 AsIs: e.Chars/9 HalfReuse: s.Char19 /8 HalfReuse: )/15 } Tile{ AsIs: e.Rest/11 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_svar( context[8], context[19] );
    refalrts::reinit_close_bracket(context[15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::splice_to_freelist_open( vm, context[15], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoAllChars/4 (/7 e.Chars/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Chars as range 9
    //DEBUG: e.Chars: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & DoAllChars/4 (/7 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: # Ok/0 } Tile{ AsIs: e.Chars/9 } Tile{ ]] }
    refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoAllChars/4 (/7 e.Chars/5 )/8 e.Rest/2 >/1
  // closed e.Chars as range 5
  // closed e.Rest as range 2
  //DEBUG: e.Chars: 5
  //DEBUG: e.Rest: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoAllChars/4 (/7 e.Chars/5 )/8 e.Rest/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Fails/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_Fails]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoAllChars("DoAllChars", COOKIE1_, COOKIE2_, func_DoAllChars);


static refalrts::FnResult func_gen_MakeSubstitutionm_FromMetatables_B1S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & MakeSubstitution-FromMetatables:1$1=1/4 (/7 e.Tables-B/5 )/8 (/11 e.MetatableName/9 )/12 (/15 e.Map/13 )/16 (/19 e.Tables-E/17 )/20 e.Result/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.Tables-B as range 5
  // closed e.MetatableName as range 9
  // closed e.Map as range 13
  // closed e.Tables-E as range 17
  // closed e.Result as range 2
  //DEBUG: e.Tables-B: 5
  //DEBUG: e.MetatableName: 9
  //DEBUG: e.Map: 13
  //DEBUG: e.Tables-E: 17
  //DEBUG: e.Result: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} (/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 HalfReuse: # Metatables/7 AsIs: e.Tables-B/5 HalfReuse: (/8 AsIs: (/11 AsIs: e.MetatableName/9 AsIs: )/12 HalfReuse: # Metatable/15 AsIs: e.Map/13 AsIs: )/16 } Tile{ AsIs: e.Tables-E/17 } Tile{ AsIs: )/20 } Tile{ AsIs: e.Result/2 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_ident(context[7], identifiers[ident_Metatables]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_ident(context[15], identifiers[ident_Metatable]);
  refalrts::link_brackets( context[4], context[20] );
  refalrts::link_brackets( context[8], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[4], context[16] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeSubstitutionm_FromMetatables_B1S1A1("MakeSubstitution-FromMetatables:1$1=1", COOKIE1_, COOKIE2_, func_gen_MakeSubstitutionm_FromMetatables_B1S1A1);


static refalrts::FnResult func_gen_MakeSubstitutionm_FromMetatables_B1S1A1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & MakeSubstitution-FromMetatables:1$1=1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & MakeSubstitution-FromMetatables:1$1=1:1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & MakeSubstitution-FromMetatables:1$1=1:1/4 (/7 e.Name/13 )/8 (/11 e.MuArg/15 )/12 e._/19 (/25 (/29 # Symbol/31 # Identifier/32 e.Name/33 )/30 t.Pointer/35 )/26 e._0/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Name as range 13
    // closed e.MuArg as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = 0;
      context[28] = 0;
      context[29] = refalrts::brackets_left( context[27], context[28], context[23], context[24] );
      if( ! context[29] )
        continue;
      refalrts::bracket_pointers(context[29], context[30]);
      context[31] = refalrts::ident_left( identifiers[ident_Symbol], context[27], context[28] );
      if( ! context[31] )
        continue;
      context[32] = refalrts::ident_left( identifiers[ident_Identifier], context[27], context[28] );
      if( ! context[32] )
        continue;
      if( ! refalrts::repeated_evar_left( vm, context[33], context[34], context[13], context[14], context[27], context[28] ) )
        continue;
      if( ! refalrts::empty_seq( context[27], context[28] ) )
        continue;
      // closed e._0 as range 21
      context[36] = refalrts::tvar_left( context[35], context[23], context[24] );
      if( ! context[36] )
        continue;
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      //DEBUG: e.Name: 13
      //DEBUG: e.MuArg: 15
      //DEBUG: e._: 19
      //DEBUG: e._0: 21
      //DEBUG: t.Pointer: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & MakeSubstitution-FromMetatables:1$1=1:1/4 (/7 e.Name/13 )/8 (/11 {REMOVED TILE} )/12 e._/19 {REMOVED TILE} # Identifier/32 e.Name/33 )/30 {REMOVED TILE} )/26 e._0/21 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/25 AsIs: (/29 Reuse: # CallBrackets/31 } Tile{ AsIs: t.Pointer/35 } Tile{ AsIs: e.MuArg/15 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_ident(context[25], identifiers[ident_Ok]);
      refalrts::update_ident(context[31], identifiers[ident_CallBrackets]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[29], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[25], context[31] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MakeSubstitution-FromMetatables:1$1=1:1/4 (/7 e.Name/5 )/8 (/11 e.MuArg/9 )/12 e.Other/2 >/1
  // closed e.Name as range 5
  // closed e.MuArg as range 9
  // closed e.Other as range 2
  //DEBUG: e.Name: 5
  //DEBUG: e.MuArg: 9
  //DEBUG: e.Other: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & MakeSubstitution-FromMetatables:1$1=1:1/4 (/7 e.Name/5 )/8 (/11 e.MuArg/9 )/12 e.Other/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeSubstitutionm_FromMetatables_B1S1A1B1("MakeSubstitution-FromMetatables:1$1=1:1", COOKIE1_, COOKIE2_, func_gen_MakeSubstitutionm_FromMetatables_B1S1A1B1);


static refalrts::FnResult func_gen_MakeSubstitutionm_FromMetatables_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & MakeSubstitution-FromMetatables:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & MakeSubstitution-FromMetatables:1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 t.new4/17 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & MakeSubstitution-FromMetatables:1/4 (/7 e.MetatableName/19 )/8 (/11 e.Name/21 )/12 (/15 e.MuArg/23 )/16 (/17 # Metatables/27 e.Tables-B/28 (/34 (/38 e.MetatableName/41 )/39 # Metatable/40 e.Map/32 )/35 e.Tables-E/30 )/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    context[23] = context[13];
    context[24] = context[14];
    context[25] = 0;
    context[26] = 0;
    if( ! refalrts::brackets_term( context[25], context[26], context[17] ) )
      continue;
    context[27] = refalrts::ident_left( identifiers[ident_Metatables], context[25], context[26] );
    if( ! context[27] )
      continue;
    // closed e.MetatableName as range 19
    // closed e.Name as range 21
    // closed e.MuArg as range 23
    context[28] = 0;
    context[29] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[30] = context[25];
      context[31] = context[26];
      context[32] = 0;
      context[33] = 0;
      context[34] = refalrts::brackets_left( context[32], context[33], context[30], context[31] );
      if( ! context[34] )
        continue;
      refalrts::bracket_pointers(context[34], context[35]);
      context[36] = 0;
      context[37] = 0;
      context[38] = refalrts::brackets_left( context[36], context[37], context[32], context[33] );
      if( ! context[38] )
        continue;
      refalrts::bracket_pointers(context[38], context[39]);
      context[40] = refalrts::ident_left( identifiers[ident_Metatable], context[32], context[33] );
      if( ! context[40] )
        continue;
      if( ! refalrts::repeated_evar_left( vm, context[41], context[42], context[19], context[20], context[36], context[37] ) )
        continue;
      if( ! refalrts::empty_seq( context[36], context[37] ) )
        continue;
      // closed e.Map as range 32
      // closed e.Tables-E as range 30
      //DEBUG: e.MetatableName: 19
      //DEBUG: e.Name: 21
      //DEBUG: e.MuArg: 23
      //DEBUG: e.Tables-B: 28
      //DEBUG: e.Map: 32
      //DEBUG: e.Tables-E: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.MetatableName/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </16 HalfReuse: & MakeSubstitution-FromMetatables:1$1=1/17 HalfReuse: (/27 AsIs: e.Tables-B/28 HalfReuse: )/34 AsIs: (/38 AsIs: e.MetatableName/41 AsIs: )/39 HalfReuse: (/40 AsIs: e.Map/32 AsIs: )/35 } Tile{ AsIs: (/7 } Tile{ AsIs: e.Tables-E/30 } Tile{ HalfReuse: )/4 } Tile{ AsIs: </0 } Tile{ HalfReuse: & MakeSubstitution-FromMetatables:1$1=1:1/8 AsIs: (/11 AsIs: e.Name/21 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.MuArg/23 } )/43 e.Map/32/44 Tile{ HalfReuse: >/18 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::copy_evar(vm, context[44], context[45], context[32], context[33]);
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[17], functions[efunc_gen_MakeSubstitutionm_FromMetatables_B1S1A1]);
      refalrts::reinit_open_bracket(context[27]);
      refalrts::reinit_close_bracket(context[34]);
      refalrts::reinit_open_bracket(context[40]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_name(context[8], functions[efunc_gen_MakeSubstitutionm_FromMetatables_B1S1A1B1]);
      refalrts::reinit_close_call(context[18]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[43] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[4] );
      refalrts::link_brackets( context[40], context[35] );
      refalrts::link_brackets( context[38], context[39] );
      refalrts::link_brackets( context[27], context[34] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[16], context[35] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[28], context[29], context[25], context[26] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MakeSubstitution-FromMetatables:1/4 (/7 e.MetatableName/5 )/8 (/11 e.Name/9 )/12 (/15 e.MuArg/13 )/16 t.Metatables$a/17 >/1
  // closed e.MetatableName as range 5
  // closed e.Name as range 9
  // closed e.MuArg as range 13
  //DEBUG: t.Metatables$a: 17
  //DEBUG: e.MetatableName: 5
  //DEBUG: e.Name: 9
  //DEBUG: e.MuArg: 13

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & MakeSubstitution-FromMetatables:1/4 (/7 e.MetatableName/5 )/8 (/11 e.Name/9 )/12 (/15 e.MuArg/13 )/16 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables$a/17 HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeSubstitutionm_FromMetatables_B1("MakeSubstitution-FromMetatables:1", COOKIE1_, COOKIE2_, func_gen_MakeSubstitutionm_FromMetatables_B1);


static refalrts::FnResult func_MakeSubstitutionm_FromMetatables(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & MakeSubstitution-FromMetatables/4 t.Metatables/5 (/9 e.MetatableName/7 )/10 (/13 e.MuArg/11 )/14 e.Name/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.MetatableName as range 7
  // closed e.MuArg as range 11
  // closed e.Name as range 2
  //DEBUG: t.Metatables: 5
  //DEBUG: e.MetatableName: 7
  //DEBUG: e.MuArg: 11
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeSubstitution-FromMetatables:1/4 } Tile{ AsIs: (/9 AsIs: e.MetatableName/7 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Name/2 } )/15 (/16 Tile{ AsIs: e.MuArg/11 } Tile{ AsIs: )/14 } Tile{ AsIs: t.Metatables/5 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_MakeSubstitutionm_FromMetatables_B1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[14] );
  refalrts::link_brackets( context[13], context[15] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MakeSubstitutionm_FromMetatables("MakeSubstitution-FromMetatables", COOKIE1_, COOKIE2_, func_MakeSubstitutionm_FromMetatables);


static refalrts::FnResult func_gen_Intrinsicm_Add_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & Intrinsic-Add:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Intrinsic-Add:1/4 # Ok/7 (/10 s.new1/16 e.new2/8 )/11 (/14 s.new3/17 e.new4/12 )/15 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = refalrts::ident_left( identifiers[ident_Ok], context[5], context[6] );
    if( ! context[7] )
      continue;
    context[8] = 0;
    context[9] = 0;
    context[10] = refalrts::brackets_left( context[8], context[9], context[5], context[6] );
    if( ! context[10] )
      continue;
    refalrts::bracket_pointers(context[10], context[11]);
    context[12] = 0;
    context[13] = 0;
    context[14] = refalrts::brackets_left( context[12], context[13], context[5], context[6] );
    if( ! context[14] )
      continue;
    refalrts::bracket_pointers(context[14], context[15]);
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[8], context[9] ) )
      continue;
    // closed e.new2 as range 8
    if( ! refalrts::svar_left( context[17], context[12], context[13] ) )
      continue;
    // closed e.new4 as range 12
    do {
      // </0 & Intrinsic-Add:1/4 # Ok/7 (/10 # Const/16 e.new5/18 )/11 (/14 s.new6/17 e.new7/20 )/15 >/1
      context[18] = context[8];
      context[19] = context[9];
      context[20] = context[12];
      context[21] = context[13];
      if( ! refalrts::ident_term( identifiers[ident_Const], context[16] ) )
        continue;
      // closed e.new5 as range 18
      // closed e.new7 as range 20
      do {
        // </0 & Intrinsic-Add:1/4 # Ok/7 (/10 # Const/16 e.Left/22 )/11 (/14 # Const/17 e.Right/24 )/15 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        if( ! refalrts::ident_term( identifiers[ident_Const], context[17] ) )
          continue;
        // closed e.Left as range 22
        // closed e.Right as range 24
        //DEBUG: e.Left: 22
        //DEBUG: e.Right: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ Reuse: # Ok/17 } Tile{ AsIs: </0 Reuse: & NumberToSymbols/4 HalfReuse: </7 HalfReuse: & Add/10 HalfReuse: (/16 AsIs: e.Left/22 AsIs: )/11 } Tile{ AsIs: e.Right/24 } Tile{ HalfReuse: >/15 AsIs: >/1 ]] }
        refalrts::update_ident(context[17], identifiers[ident_Ok]);
        refalrts::update_name(context[4], functions[efunc_NumberToSymbols]);
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[10], functions[efunc_Add]);
        refalrts::reinit_open_bracket(context[16]);
        refalrts::reinit_close_call(context[15]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[7] );
        refalrts::link_brackets( context[16], context[11] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[15];
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[0], context[11] );
        res = refalrts::splice_elem( res, context[17] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Intrinsic-Add:1/4 # Ok/7 (/10 # Const/16 0/26 )/11 (/14 # ArithmResult/17 t.ArithmCall/27 )/15 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_ArithmResult], context[17] ) )
        continue;
      context[26] = refalrts::number_left( 0UL, context[22], context[23] );
      if( ! context[26] )
        continue;
      if( ! refalrts::empty_seq( context[22], context[23] ) )
        continue;
      context[28] = refalrts::tvar_left( context[27], context[24], context[25] );
      if( ! context[28] )
        continue;
      if( ! refalrts::empty_seq( context[24], context[25] ) )
        continue;
      //DEBUG: t.ArithmCall: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Intrinsic-Add:1/4 # Ok/7 (/10 # Const/16 0/26 )/11 (/14 {REMOVED TILE} )/15 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ Reuse: # Ok/17 AsIs: t.ArithmCall/27 } Tile{ ]] }
      refalrts::update_ident(context[17], identifiers[ident_Ok]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[17], context[28] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Intrinsic-Add:1/4 # Ok/7 (/10 # ArithmResult/16 t.ArithmCall/23 )/11 (/14 # Const/17 0/22 )/15 >/1
    context[18] = context[8];
    context[19] = context[9];
    context[20] = context[12];
    context[21] = context[13];
    if( ! refalrts::ident_term( identifiers[ident_ArithmResult], context[16] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_Const], context[17] ) )
      continue;
    context[22] = refalrts::number_left( 0UL, context[20], context[21] );
    if( ! context[22] )
      continue;
    if( ! refalrts::empty_seq( context[20], context[21] ) )
      continue;
    context[24] = refalrts::tvar_left( context[23], context[18], context[19] );
    if( ! context[24] )
      continue;
    if( ! refalrts::empty_seq( context[18], context[19] ) )
      continue;
    //DEBUG: t.ArithmCall: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Intrinsic-Add:1/4 # Ok/7 (/10 {REMOVED TILE} )/11 (/14 # Const/17 0/22 )/15 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: # Ok/16 AsIs: t.ArithmCall/23 } Tile{ ]] }
    refalrts::update_ident(context[16], identifiers[ident_Ok]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[16], context[24] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Add:1/4 e._/2 >/1
  // closed e._ as range 2
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Add:1/4 e._/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Add_B1("Intrinsic-Add:1", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Add_B1);


static refalrts::FnResult func_Intrinsicm_Add(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Intrinsic-Add/4 e.Args/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Args as range 2
  //DEBUG: e.Args: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Intrinsic-Add:1/6 Tile{ AsIs: </0 Reuse: & ArithmArgs/4 AsIs: e.Args/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Intrinsicm_Add_B1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_ArithmArgs]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Add("Intrinsic-Add", COOKIE1_, COOKIE2_, func_Intrinsicm_Add);


static refalrts::FnResult func_ArithmArgs(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & ArithmArgs/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & ArithmArgs/4 (/9 s.new1/11 e.new2/7 )/10 e.new3/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.new3 as range 5
    if( ! refalrts::svar_left( context[11], context[7], context[8] ) )
      continue;
    // closed e.new2 as range 7
    do {
      // </0 & ArithmArgs/4 (/9 # Brackets/11 e.Left/12 )/10 e.Right/14 >/1
      context[12] = context[7];
      context[13] = context[8];
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[11] ) )
        continue;
      // closed e.Left as range 12
      // closed e.Right as range 14
      //DEBUG: e.Left: 12
      //DEBUG: e.Right: 14
      //12: e.Left
      //14: e.Right
      //21: e.Left

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[18], functions[efunc_gen_ArithmArgs_S1C1]);
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_ArithmOneArg]);
      refalrts::copy_evar(vm, context[21], context[22], context[12], context[13]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_call(vm, context[17]);
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      res = refalrts::splice_elem( res, context[17] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[19] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_elem( res, context[16] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </16 & ArithmArgs$1?1/20 # Ok/21 e.Left$a/18 >/17
        context[18] = 0;
        context[19] = 0;
        context[20] = refalrts::call_left( context[18], context[19], context[16], context[17] );
        context[21] = refalrts::ident_left( identifiers[ident_Ok], context[18], context[19] );
        if( ! context[21] )
          continue;
        // closed e.Left$a as range 18
        //DEBUG: e.Left: 12
        //DEBUG: e.Right: 14
        //DEBUG: e.Left$a: 18
        //12: e.Left
        //14: e.Right
        //18: e.Left$a
        //27: e.Right

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[24], functions[efunc_gen_ArithmArgs_S1C2]);
        refalrts::alloc_open_call(vm, context[25]);
        refalrts::alloc_name(vm, context[26], functions[efunc_ArithmOneArg]);
        refalrts::copy_evar(vm, context[27], context[28], context[14], context[15]);
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[22] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[25] );
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_elem( res, context[26] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_elem( res, context[24] );
        res = refalrts::splice_elem( res, context[22] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </22 & ArithmArgs$1?2/26 # Ok/27 e.Right$a/24 >/23
          context[24] = 0;
          context[25] = 0;
          context[26] = refalrts::call_left( context[24], context[25], context[22], context[23] );
          context[27] = refalrts::ident_left( identifiers[ident_Ok], context[24], context[25] );
          if( ! context[27] )
            continue;
          // closed e.Right$a as range 24
          //DEBUG: e.Left: 12
          //DEBUG: e.Right: 14
          //DEBUG: e.Left$a: 18
          //DEBUG: e.Right$a: 24

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & ArithmArgs/4 (/9 # Brackets/11 e.Left/12 )/10 e.Right/14 </16 {REMOVED TILE} & ArithmArgs$1?2/26 # Ok/27 {REMOVED TILE} >/23 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/20 HalfReuse: (/21 AsIs: e.Left$a/18 HalfReuse: )/17 HalfReuse: (/22 } Tile{ AsIs: e.Right$a/24 } Tile{ HalfReuse: )/1 ]] }
          refalrts::reinit_ident(context[20], identifiers[ident_Ok]);
          refalrts::reinit_open_bracket(context[21]);
          refalrts::reinit_close_bracket(context[17]);
          refalrts::reinit_open_bracket(context[22]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[22], context[1] );
          refalrts::link_brackets( context[21], context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[20], context[22] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[22], context[23]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[16], context[17]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ArithmArgs/4 (/9 # Symbol/11 s.new5/16 s.new6/17 )/10 e.new4/14 >/1
    context[12] = context[7];
    context[13] = context[8];
    context[14] = context[5];
    context[15] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_Symbol], context[11] ) )
      continue;
    // closed e.new4 as range 14
    if( ! refalrts::svar_left( context[16], context[12], context[13] ) )
      continue;
    if( ! refalrts::svar_left( context[17], context[12], context[13] ) )
      continue;
    if( ! refalrts::empty_seq( context[12], context[13] ) )
      continue;
    do {
      // </0 & ArithmArgs/4 (/9 # Symbol/11 # Char/16 s.Sign/17 )/10 (/22 # Symbol/24 # Number/25 s.Left/26 )/23 e.Right/18 >/1
      context[18] = context[14];
      context[19] = context[15];
      if( ! refalrts::ident_term( identifiers[ident_Char], context[16] ) )
        continue;
      context[20] = 0;
      context[21] = 0;
      context[22] = refalrts::brackets_left( context[20], context[21], context[18], context[19] );
      if( ! context[22] )
        continue;
      refalrts::bracket_pointers(context[22], context[23]);
      context[24] = refalrts::ident_left( identifiers[ident_Symbol], context[20], context[21] );
      if( ! context[24] )
        continue;
      context[25] = refalrts::ident_left( identifiers[ident_Number], context[20], context[21] );
      if( ! context[25] )
        continue;
      // closed e.Right as range 18
      if( ! refalrts::svar_left( context[26], context[20], context[21] ) )
        continue;
      if( ! refalrts::empty_seq( context[20], context[21] ) )
        continue;
      //DEBUG: s.Sign: 17
      //DEBUG: e.Right: 18
      //DEBUG: s.Left: 26
      //17: s.Sign
      //18: e.Right
      //26: s.Left
      //32: e.Right

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[27]);
      refalrts::alloc_name(vm, context[29], functions[efunc_gen_ArithmArgs_S2C1]);
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_ArithmOneArg]);
      refalrts::copy_evar(vm, context[32], context[33], context[18], context[19]);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[27] );
      res = refalrts::splice_elem( res, context[28] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[30] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[27] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </27 & ArithmArgs$2?1/31 # Ok/32 e.Right$a/29 >/28
        context[29] = 0;
        context[30] = 0;
        context[31] = refalrts::call_left( context[29], context[30], context[27], context[28] );
        context[32] = refalrts::ident_left( identifiers[ident_Ok], context[29], context[30] );
        if( ! context[32] )
          continue;
        // closed e.Right$a as range 29
        //DEBUG: s.Sign: 17
        //DEBUG: e.Right: 18
        //DEBUG: s.Left: 26
        //DEBUG: e.Right$a: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & ArithmArgs/4 (/9 # Symbol/11 # Char/16 s.Sign/17 {REMOVED TILE} e.Right/18 </27 & ArithmArgs$2?1/31 {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/10 AsIs: (/22 Reuse: # Const/24 HalfReuse: s.Sign17 /25 AsIs: s.Left/26 AsIs: )/23 } Tile{ HalfReuse: (/32 AsIs: e.Right$a/29 HalfReuse: )/28 } Tile{ ]] }
        refalrts::reinit_ident(context[10], identifiers[ident_Ok]);
        refalrts::update_ident(context[24], identifiers[ident_Const]);
        refalrts::reinit_svar( context[25], context[17] );
        refalrts::reinit_open_bracket(context[32]);
        refalrts::reinit_close_bracket(context[28]);
        refalrts::link_brackets( context[32], context[28] );
        refalrts::link_brackets( context[22], context[23] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[32], context[28] );
        res = refalrts::splice_evar( res, context[10], context[23] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[27], context[28]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ArithmArgs/4 (/9 # Symbol/11 # Number/16 s.Left/17 )/10 e.Right/18 >/1
    context[18] = context[14];
    context[19] = context[15];
    if( ! refalrts::ident_term( identifiers[ident_Number], context[16] ) )
      continue;
    // closed e.Right as range 18
    //DEBUG: s.Left: 17
    //DEBUG: e.Right: 18
    //17: s.Left
    //18: e.Right
    //25: e.Right

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_ArithmArgs_S3C1]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_ArithmOneArg]);
    refalrts::copy_evar(vm, context[25], context[26], context[18], context[19]);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[20] );
    res = refalrts::splice_elem( res, context[21] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[23] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_elem( res, context[20] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </20 & ArithmArgs$3?1/24 # Ok/25 e.Right$a/22 >/21
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::call_left( context[22], context[23], context[20], context[21] );
      context[25] = refalrts::ident_left( identifiers[ident_Ok], context[22], context[23] );
      if( ! context[25] )
        continue;
      // closed e.Right$a as range 22
      //DEBUG: s.Left: 17
      //DEBUG: e.Right: 18
      //DEBUG: e.Right$a: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & ArithmArgs/4 {REMOVED TILE} e.Right/18 </20 & ArithmArgs$3?1/24 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/9 HalfReuse: (/11 Reuse: # Const/16 AsIs: s.Left/17 AsIs: )/10 } Tile{ HalfReuse: (/25 AsIs: e.Right$a/22 HalfReuse: )/21 } Tile{ ]] }
      refalrts::reinit_ident(context[9], identifiers[ident_Ok]);
      refalrts::reinit_open_bracket(context[11]);
      refalrts::update_ident(context[16], identifiers[ident_Const]);
      refalrts::reinit_open_bracket(context[25]);
      refalrts::reinit_close_bracket(context[21]);
      refalrts::link_brackets( context[25], context[21] );
      refalrts::link_brackets( context[11], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[21] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[20], context[21]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ArithmArgs/4 e._/2 >/1
  // closed e._ as range 2
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ArithmArgs/4 e._/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Fails/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_Fails]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ArithmArgs("ArithmArgs", COOKIE1_, COOKIE2_, func_ArithmArgs);


static refalrts::FnResult func_ArithmOneArg(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & ArithmOneArg/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & ArithmOneArg/4 (/9 # ColdCallBrackets/11 (/14 # Symbol/16 # Name/17 e.Name/12 )/15 e.Arg/7 )/10 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = refalrts::ident_left( identifiers[ident_ColdCallBrackets], context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = 0;
    context[13] = 0;
    context[14] = refalrts::brackets_left( context[12], context[13], context[7], context[8] );
    if( ! context[14] )
      continue;
    refalrts::bracket_pointers(context[14], context[15]);
    context[16] = refalrts::ident_left( identifiers[ident_Symbol], context[12], context[13] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::ident_left( identifiers[ident_Name], context[12], context[13] );
    if( ! context[17] )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    // closed e.Name as range 12
    // closed e.Arg as range 7
    //DEBUG: e.Name: 12
    //DEBUG: e.Arg: 7
    //7: e.Arg
    //12: e.Name

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_ArithmOneArg_S1C1]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_ArithmeticFunctions]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[18] );
    res = refalrts::splice_elem( res, context[19] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[21] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_elem( res, context[18] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </18 & ArithmOneArg$1?1/22 e._/23 (/29 e.Name/31 )/30 e._0/25 >/19
      context[20] = 0;
      context[21] = 0;
      context[22] = refalrts::call_left( context[20], context[21], context[18], context[19] );
      context[23] = 0;
      context[24] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[25] = context[20];
        context[26] = context[21];
        context[27] = 0;
        context[28] = 0;
        context[29] = refalrts::brackets_left( context[27], context[28], context[25], context[26] );
        if( ! context[29] )
          continue;
        refalrts::bracket_pointers(context[29], context[30]);
        if( ! refalrts::repeated_evar_left( vm, context[31], context[32], context[12], context[13], context[27], context[28] ) )
          continue;
        if( ! refalrts::empty_seq( context[27], context[28] ) )
          continue;
        // closed e._0 as range 25
        //DEBUG: e.Name: 12
        //DEBUG: e.Arg: 7
        //DEBUG: e._: 23
        //DEBUG: e._0: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </18 & ArithmOneArg$1?1/22 e._/23 (/29 e.Name/31 )/30 e._0/25 >/19 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: # ArithmResult/4 AsIs: (/9 AsIs: # ColdCallBrackets/11 AsIs: (/14 AsIs: # Symbol/16 AsIs: # Name/17 AsIs: e.Name/12 AsIs: )/15 AsIs: e.Arg/7 AsIs: )/10 } Tile{ ]] }
        refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
        refalrts::reinit_ident(context[4], identifiers[ident_ArithmResult]);
        refalrts::link_brackets( context[9], context[10] );
        refalrts::link_brackets( context[14], context[15] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[23], context[24], context[20], context[21] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[18], context[19]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ArithmOneArg/4 e.Number/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Number as range 5
    //DEBUG: e.Number: 5
    //5: e.Number
    //12: e.Number

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_ArithmOneArg_S2C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_Numberm_Check]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & ArithmOneArg$2?1/11 # True/12 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::ident_left( identifiers[ident_True], context[9], context[10] );
      if( ! context[12] )
        continue;
      if( ! refalrts::empty_seq( context[9], context[10] ) )
        continue;
      //DEBUG: e.Number: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ Reuse: # Ok/12 HalfReuse: # Const/8 HalfReuse: </1 } & Add/13 0/14 Tile{ AsIs: </0 Reuse: & SymbolsToNumber/4 AsIs: e.Number/5 HalfReuse: >/7 HalfReuse: >/11 } Tile{ ]] }
      refalrts::alloc_name(vm, context[13], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[14], 0UL);
      refalrts::update_ident(context[12], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[8], identifiers[ident_Const]);
      refalrts::reinit_open_call(context[1]);
      refalrts::update_name(context[4], functions[efunc_SymbolsToNumber]);
      refalrts::reinit_close_call(context[7]);
      refalrts::reinit_close_call(context[11]);
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_evar( res, context[12], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ArithmOneArg/4 e._/2 >/1
  // closed e._ as range 2
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ArithmOneArg/4 e._/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Fails/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_Fails]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ArithmOneArg("ArithmOneArg", COOKIE1_, COOKIE2_, func_ArithmOneArg);


static refalrts::FnResult func_Numberm_Check(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Number-Check/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Number-Check/4 (/9 # Symbol/11 # Char/12 s.new1/13 )/10 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = refalrts::ident_left( identifiers[ident_Symbol], context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::ident_left( identifiers[ident_Char], context[7], context[8] );
    if( ! context[12] )
      continue;
    // closed e.new2 as range 5
    if( ! refalrts::svar_left( context[13], context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    do {
      // </0 & Number-Check/4 (/9 # Symbol/11 # Char/12 '+'/13 )/10 e.Rest/14 >/1
      context[14] = context[5];
      context[15] = context[6];
      if( ! refalrts::char_term( '+', context[13] ) )
        continue;
      // closed e.Rest as range 14
      //DEBUG: e.Rest: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Number-Check/4 (/9 # Symbol/11 # Char/12 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </13 HalfReuse: & Number-Check-AllNumbers/10 AsIs: e.Rest/14 AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[13]);
      refalrts::reinit_name(context[10], functions[efunc_Numberm_Checkm_AllNumbers]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[13];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Number-Check/4 (/9 # Symbol/11 # Char/12 '-'/13 )/10 e.Rest/14 >/1
    context[14] = context[5];
    context[15] = context[6];
    if( ! refalrts::char_term( '-', context[13] ) )
      continue;
    // closed e.Rest as range 14
    //DEBUG: e.Rest: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Number-Check/4 (/9 # Symbol/11 # Char/12 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </13 HalfReuse: & Number-Check-AllNumbers/10 AsIs: e.Rest/14 AsIs: >/1 ]] }
    refalrts::reinit_open_call(context[13]);
    refalrts::reinit_name(context[10], functions[efunc_Numberm_Checkm_AllNumbers]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Number-Check/4 e.Rest/2 >/1
  // closed e.Rest as range 2
  //DEBUG: e.Rest: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Number-Check-AllNumbers/4 AsIs: e.Rest/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Numberm_Checkm_AllNumbers]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Numberm_Check("Number-Check", COOKIE1_, COOKIE2_, func_Numberm_Check);


static refalrts::FnResult func_Numberm_Checkm_AllNumbers(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Number-Check-AllNumbers/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Number-Check-AllNumbers/4 (/9 # Symbol/11 # Number/12 s.new1/13 )/10 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = refalrts::ident_left( identifiers[ident_Symbol], context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::ident_left( identifiers[ident_Number], context[7], context[8] );
    if( ! context[12] )
      continue;
    // closed e.new2 as range 5
    if( ! refalrts::svar_left( context[13], context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    do {
      // </0 & Number-Check-AllNumbers/4 (/9 # Symbol/11 # Number/12 s._/13 )/10 >/1
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;
      //DEBUG: s._: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Number-Check-AllNumbers/4 (/9 # Symbol/11 # Number/12 s._/13 )/10 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_True]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Number-Check-AllNumbers/4 (/9 # Symbol/11 # Number/12 s._/13 )/10 e.Rest/14 >/1
    context[14] = context[5];
    context[15] = context[6];
    // closed e.Rest as range 14
    //DEBUG: s._: 13
    //DEBUG: e.Rest: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & Number-Check-AllNumbers/4 (/9 # Symbol/11 # Number/12 s._/13 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & Number-Check-AllNumbers/10 AsIs: e.Rest/14 AsIs: >/1 ]] }
    refalrts::reinit_name(context[10], functions[efunc_Numberm_Checkm_AllNumbers]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Number-Check-AllNumbers/4 e._/2 >/1
  // closed e._ as range 2
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Number-Check-AllNumbers/4 e._/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Numberm_Checkm_AllNumbers("Number-Check-AllNumbers", COOKIE1_, COOKIE2_, func_Numberm_Checkm_AllNumbers);


static refalrts::FnResult func_SymbolsToNumber(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & SymbolsToNumber/4 e.Symbols/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Symbols as range 2
  //DEBUG: e.Symbols: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@3/4 AsIs: e.Symbols/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_SymbolsToNumber("SymbolsToNumber", COOKIE1_, COOKIE2_, func_SymbolsToNumber);


static refalrts::FnResult func_NumberToSymbols(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & NumberToSymbols/4 e.Number/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Number as range 2
  //DEBUG: e.Number: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@4/4 AsIs: e.Number/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NumberToSymbols("NumberToSymbols", COOKIE1_, COOKIE2_, func_NumberToSymbols);


static refalrts::FnResult func_ArithmeticFunctions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & ArithmeticFunctions/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 'A'/4 HalfReuse: 'd'/1 } 'd'/5 )/6 (/7"Div"/8 )/10 (/11"Divmod"/12 )/14 (/15"Mod"/16 )/18 (/19"Mul"/20 )/22 (/23"Sub"/24 )/26 (/27"Numb"/28 )/30 Tile{ ]] }
  refalrts::alloc_char(vm, context[5], 'd');
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_chars(vm, context[8], context[9], "Div", 3);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_chars(vm, context[12], context[13], "Divmod", 6);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_chars(vm, context[16], context[17], "Mod", 3);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_chars(vm, context[20], context[21], "Mul", 3);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_chars(vm, context[24], context[25], "Sub", 3);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_chars(vm, context[28], context[29], "Numb", 4);
  refalrts::alloc_close_bracket(vm, context[30]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_char(context[4], 'A');
  refalrts::reinit_char(context[1], 'd');
  refalrts::link_brackets( context[27], context[30] );
  refalrts::link_brackets( context[23], context[26] );
  refalrts::link_brackets( context[19], context[22] );
  refalrts::link_brackets( context[15], context[18] );
  refalrts::link_brackets( context[11], context[14] );
  refalrts::link_brackets( context[7], context[10] );
  refalrts::link_brackets( context[0], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[30] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ArithmeticFunctions("ArithmeticFunctions", COOKIE1_, COOKIE2_, func_ArithmeticFunctions);


static refalrts::FnResult func_gen_Intrinsicm_Sub_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & Intrinsic-Sub:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Intrinsic-Sub:1/4 # Ok/7 (/10 s.new1/17 e.new2/8 )/11 (/14 # Const/16 e.new3/12 )/15 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = refalrts::ident_left( identifiers[ident_Ok], context[5], context[6] );
    if( ! context[7] )
      continue;
    context[8] = 0;
    context[9] = 0;
    context[10] = refalrts::brackets_left( context[8], context[9], context[5], context[6] );
    if( ! context[10] )
      continue;
    refalrts::bracket_pointers(context[10], context[11]);
    context[12] = 0;
    context[13] = 0;
    context[14] = refalrts::brackets_left( context[12], context[13], context[5], context[6] );
    if( ! context[14] )
      continue;
    refalrts::bracket_pointers(context[14], context[15]);
    context[16] = refalrts::ident_left( identifiers[ident_Const], context[12], context[13] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    // closed e.new3 as range 12
    if( ! refalrts::svar_left( context[17], context[8], context[9] ) )
      continue;
    // closed e.new2 as range 8
    do {
      // </0 & Intrinsic-Sub:1/4 # Ok/7 (/10 # Const/17 e.Left/18 )/11 (/14 # Const/16 e.Right/20 )/15 >/1
      context[18] = context[8];
      context[19] = context[9];
      context[20] = context[12];
      context[21] = context[13];
      if( ! refalrts::ident_term( identifiers[ident_Const], context[17] ) )
        continue;
      // closed e.Left as range 18
      // closed e.Right as range 20
      //DEBUG: e.Left: 18
      //DEBUG: e.Right: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} (/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ Reuse: # Ok/16 } Tile{ AsIs: </0 Reuse: & NumberToSymbols/4 HalfReuse: </7 HalfReuse: & Sub/10 HalfReuse: (/17 AsIs: e.Left/18 AsIs: )/11 } Tile{ AsIs: e.Right/20 } Tile{ HalfReuse: >/15 AsIs: >/1 ]] }
      refalrts::update_ident(context[16], identifiers[ident_Ok]);
      refalrts::update_name(context[4], functions[efunc_NumberToSymbols]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[10], functions[efunc_Sub]);
      refalrts::reinit_open_bracket(context[17]);
      refalrts::reinit_close_call(context[15]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[7] );
      refalrts::link_brackets( context[17], context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[15];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_elem( res, context[16] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Intrinsic-Sub:1/4 # Ok/7 (/10 # ArithmResult/17 t.ArithmCall/23 )/11 (/14 # Const/16 0/22 )/15 >/1
    context[18] = context[8];
    context[19] = context[9];
    context[20] = context[12];
    context[21] = context[13];
    if( ! refalrts::ident_term( identifiers[ident_ArithmResult], context[17] ) )
      continue;
    context[22] = refalrts::number_left( 0UL, context[20], context[21] );
    if( ! context[22] )
      continue;
    if( ! refalrts::empty_seq( context[20], context[21] ) )
      continue;
    context[24] = refalrts::tvar_left( context[23], context[18], context[19] );
    if( ! context[24] )
      continue;
    if( ! refalrts::empty_seq( context[18], context[19] ) )
      continue;
    //DEBUG: t.ArithmCall: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Intrinsic-Sub:1/4 # Ok/7 (/10 {REMOVED TILE} )/11 (/14 # Const/16 0/22 )/15 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: # Ok/17 AsIs: t.ArithmCall/23 } Tile{ ]] }
    refalrts::update_ident(context[17], identifiers[ident_Ok]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[24] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Sub:1/4 e._/2 >/1
  // closed e._ as range 2
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Sub:1/4 e._/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Sub_B1("Intrinsic-Sub:1", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Sub_B1);


static refalrts::FnResult func_Intrinsicm_Sub(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Intrinsic-Sub/4 e.Args/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Args as range 2
  //DEBUG: e.Args: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Intrinsic-Sub:1/6 Tile{ AsIs: </0 Reuse: & ArithmArgs/4 AsIs: e.Args/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Intrinsicm_Sub_B1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_ArithmArgs]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Sub("Intrinsic-Sub", COOKIE1_, COOKIE2_, func_Intrinsicm_Sub);


static refalrts::FnResult func_gen_Intrinsicm_Mul_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & Intrinsic-Mul:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Intrinsic-Mul:1/4 # Ok/7 (/10 s.new1/16 e.new2/8 )/11 (/14 s.new3/17 e.new4/12 )/15 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = refalrts::ident_left( identifiers[ident_Ok], context[5], context[6] );
    if( ! context[7] )
      continue;
    context[8] = 0;
    context[9] = 0;
    context[10] = refalrts::brackets_left( context[8], context[9], context[5], context[6] );
    if( ! context[10] )
      continue;
    refalrts::bracket_pointers(context[10], context[11]);
    context[12] = 0;
    context[13] = 0;
    context[14] = refalrts::brackets_left( context[12], context[13], context[5], context[6] );
    if( ! context[14] )
      continue;
    refalrts::bracket_pointers(context[14], context[15]);
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[8], context[9] ) )
      continue;
    // closed e.new2 as range 8
    if( ! refalrts::svar_left( context[17], context[12], context[13] ) )
      continue;
    // closed e.new4 as range 12
    do {
      // </0 & Intrinsic-Mul:1/4 # Ok/7 (/10 # Const/16 e.new5/18 )/11 (/14 s.new6/17 e.new7/20 )/15 >/1
      context[18] = context[8];
      context[19] = context[9];
      context[20] = context[12];
      context[21] = context[13];
      if( ! refalrts::ident_term( identifiers[ident_Const], context[16] ) )
        continue;
      // closed e.new5 as range 18
      // closed e.new7 as range 20
      do {
        // </0 & Intrinsic-Mul:1/4 # Ok/7 (/10 # Const/16 e.Left/22 )/11 (/14 # Const/17 e.Right/24 )/15 >/1
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = context[21];
        if( ! refalrts::ident_term( identifiers[ident_Const], context[17] ) )
          continue;
        // closed e.Left as range 22
        // closed e.Right as range 24
        //DEBUG: e.Left: 22
        //DEBUG: e.Right: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ Reuse: # Ok/17 } Tile{ AsIs: </0 Reuse: & NumberToSymbols/4 HalfReuse: </7 HalfReuse: & Mul/10 HalfReuse: (/16 AsIs: e.Left/22 AsIs: )/11 } Tile{ AsIs: e.Right/24 } Tile{ HalfReuse: >/15 AsIs: >/1 ]] }
        refalrts::update_ident(context[17], identifiers[ident_Ok]);
        refalrts::update_name(context[4], functions[efunc_NumberToSymbols]);
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[10], functions[efunc_Mul]);
        refalrts::reinit_open_bracket(context[16]);
        refalrts::reinit_close_call(context[15]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[7] );
        refalrts::link_brackets( context[16], context[11] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[15];
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[0], context[11] );
        res = refalrts::splice_elem( res, context[17] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Intrinsic-Mul:1/4 # Ok/7 (/10 # Const/16 1/26 )/11 (/14 # ArithmResult/17 t.ArithmCall/27 )/15 >/1
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      context[25] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_ArithmResult], context[17] ) )
        continue;
      context[26] = refalrts::number_left( 1UL, context[22], context[23] );
      if( ! context[26] )
        continue;
      if( ! refalrts::empty_seq( context[22], context[23] ) )
        continue;
      context[28] = refalrts::tvar_left( context[27], context[24], context[25] );
      if( ! context[28] )
        continue;
      if( ! refalrts::empty_seq( context[24], context[25] ) )
        continue;
      //DEBUG: t.ArithmCall: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Intrinsic-Mul:1/4 # Ok/7 (/10 # Const/16 1/26 )/11 (/14 {REMOVED TILE} )/15 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ Reuse: # Ok/17 AsIs: t.ArithmCall/27 } Tile{ ]] }
      refalrts::update_ident(context[17], identifiers[ident_Ok]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[17], context[28] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Intrinsic-Mul:1/4 # Ok/7 (/10 # ArithmResult/16 t.ArithmCall/23 )/11 (/14 # Const/17 1/22 )/15 >/1
    context[18] = context[8];
    context[19] = context[9];
    context[20] = context[12];
    context[21] = context[13];
    if( ! refalrts::ident_term( identifiers[ident_ArithmResult], context[16] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_Const], context[17] ) )
      continue;
    context[22] = refalrts::number_left( 1UL, context[20], context[21] );
    if( ! context[22] )
      continue;
    if( ! refalrts::empty_seq( context[20], context[21] ) )
      continue;
    context[24] = refalrts::tvar_left( context[23], context[18], context[19] );
    if( ! context[24] )
      continue;
    if( ! refalrts::empty_seq( context[18], context[19] ) )
      continue;
    //DEBUG: t.ArithmCall: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Intrinsic-Mul:1/4 # Ok/7 (/10 {REMOVED TILE} )/11 (/14 # Const/17 1/22 )/15 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: # Ok/16 AsIs: t.ArithmCall/23 } Tile{ ]] }
    refalrts::update_ident(context[16], identifiers[ident_Ok]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[16], context[24] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Mul:1/4 e._/2 >/1
  // closed e._ as range 2
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Mul:1/4 e._/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Mul_B1("Intrinsic-Mul:1", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Mul_B1);


static refalrts::FnResult func_Intrinsicm_Mul(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Intrinsic-Mul/4 e.Args/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Args as range 2
  //DEBUG: e.Args: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Intrinsic-Mul:1/6 Tile{ AsIs: </0 Reuse: & ArithmArgs/4 AsIs: e.Args/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Intrinsicm_Mul_B1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_ArithmArgs]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Mul("Intrinsic-Mul", COOKIE1_, COOKIE2_, func_Intrinsicm_Mul);


static refalrts::FnResult func_gen_Intrinsicm_Div_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & Intrinsic-Div:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Intrinsic-Div:1/4 # Ok/7 (/10 e.new1/8 )/11 (/14 # Const/16 e.new2/12 )/15 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = refalrts::ident_left( identifiers[ident_Ok], context[5], context[6] );
    if( ! context[7] )
      continue;
    context[8] = 0;
    context[9] = 0;
    context[10] = refalrts::brackets_left( context[8], context[9], context[5], context[6] );
    if( ! context[10] )
      continue;
    refalrts::bracket_pointers(context[10], context[11]);
    context[12] = 0;
    context[13] = 0;
    context[14] = refalrts::brackets_left( context[12], context[13], context[5], context[6] );
    if( ! context[14] )
      continue;
    refalrts::bracket_pointers(context[14], context[15]);
    context[16] = refalrts::ident_left( identifiers[ident_Const], context[12], context[13] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    // closed e.new1 as range 8
    // closed e.new2 as range 12
    do {
      // </0 & Intrinsic-Div:1/4 # Ok/7 (/10 e._/17 )/11 (/14 # Const/16 0/21 )/15 >/1
      context[17] = context[8];
      context[18] = context[9];
      context[19] = context[12];
      context[20] = context[13];
      context[21] = refalrts::number_left( 0UL, context[19], context[20] );
      if( ! context[21] )
        continue;
      if( ! refalrts::empty_seq( context[19], context[20] ) )
        continue;
      // closed e._ as range 17
      //DEBUG: e._: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Intrinsic-Div:1/4 # Ok/7 (/10 e._/17 )/11 (/14 # Const/16 0/21 )/15 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Intrinsic-Div:1/4 # Ok/7 (/10 s.new3/21 e.new4/17 )/11 (/14 # Const/16 e.new5/19 )/15 >/1
    context[17] = context[8];
    context[18] = context[9];
    context[19] = context[12];
    context[20] = context[13];
    // closed e.new5 as range 19
    if( ! refalrts::svar_left( context[21], context[17], context[18] ) )
      continue;
    // closed e.new4 as range 17
    do {
      // </0 & Intrinsic-Div:1/4 # Ok/7 (/10 # Const/21 e.Left/22 )/11 (/14 # Const/16 e.Right/24 )/15 >/1
      context[22] = context[17];
      context[23] = context[18];
      context[24] = context[19];
      context[25] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_Const], context[21] ) )
        continue;
      // closed e.Left as range 22
      // closed e.Right as range 24
      //DEBUG: e.Left: 22
      //DEBUG: e.Right: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} (/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ Reuse: # Ok/16 } Tile{ AsIs: </0 Reuse: & NumberToSymbols/4 HalfReuse: </7 HalfReuse: & Div/10 HalfReuse: (/21 AsIs: e.Left/22 AsIs: )/11 } Tile{ AsIs: e.Right/24 } Tile{ HalfReuse: >/15 AsIs: >/1 ]] }
      refalrts::update_ident(context[16], identifiers[ident_Ok]);
      refalrts::update_name(context[4], functions[efunc_NumberToSymbols]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[10], functions[efunc_Div]);
      refalrts::reinit_open_bracket(context[21]);
      refalrts::reinit_close_call(context[15]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[7] );
      refalrts::link_brackets( context[21], context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[15];
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_elem( res, context[16] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Intrinsic-Div:1/4 # Ok/7 (/10 # ArithmResult/21 t.ArithmCall/27 )/11 (/14 # Const/16 1/26 )/15 >/1
    context[22] = context[17];
    context[23] = context[18];
    context[24] = context[19];
    context[25] = context[20];
    if( ! refalrts::ident_term( identifiers[ident_ArithmResult], context[21] ) )
      continue;
    context[26] = refalrts::number_left( 1UL, context[24], context[25] );
    if( ! context[26] )
      continue;
    if( ! refalrts::empty_seq( context[24], context[25] ) )
      continue;
    context[28] = refalrts::tvar_left( context[27], context[22], context[23] );
    if( ! context[28] )
      continue;
    if( ! refalrts::empty_seq( context[22], context[23] ) )
      continue;
    //DEBUG: t.ArithmCall: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Intrinsic-Div:1/4 # Ok/7 (/10 {REMOVED TILE} )/11 (/14 # Const/16 1/26 )/15 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: # Ok/21 AsIs: t.ArithmCall/27 } Tile{ ]] }
    refalrts::update_ident(context[21], identifiers[ident_Ok]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[21], context[28] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Div:1/4 e._/2 >/1
  // closed e._ as range 2
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Div:1/4 e._/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Div_B1("Intrinsic-Div:1", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Div_B1);


static refalrts::FnResult func_Intrinsicm_Div(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Intrinsic-Div/4 e.Args/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Args as range 2
  //DEBUG: e.Args: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Intrinsic-Div:1/6 Tile{ AsIs: </0 Reuse: & ArithmArgs/4 AsIs: e.Args/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Intrinsicm_Div_B1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_ArithmArgs]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Div("Intrinsic-Div", COOKIE1_, COOKIE2_, func_Intrinsicm_Div);


static refalrts::FnResult func_gen_Intrinsicm_Mod_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & Intrinsic-Mod:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Intrinsic-Mod:1/4 # Ok/7 (/10 e.new1/8 )/11 (/14 # Const/16 e.new2/12 )/15 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = refalrts::ident_left( identifiers[ident_Ok], context[5], context[6] );
    if( ! context[7] )
      continue;
    context[8] = 0;
    context[9] = 0;
    context[10] = refalrts::brackets_left( context[8], context[9], context[5], context[6] );
    if( ! context[10] )
      continue;
    refalrts::bracket_pointers(context[10], context[11]);
    context[12] = 0;
    context[13] = 0;
    context[14] = refalrts::brackets_left( context[12], context[13], context[5], context[6] );
    if( ! context[14] )
      continue;
    refalrts::bracket_pointers(context[14], context[15]);
    context[16] = refalrts::ident_left( identifiers[ident_Const], context[12], context[13] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    // closed e.new1 as range 8
    // closed e.new2 as range 12
    do {
      // </0 & Intrinsic-Mod:1/4 # Ok/7 (/10 e._/17 )/11 (/14 # Const/16 0/21 )/15 >/1
      context[17] = context[8];
      context[18] = context[9];
      context[19] = context[12];
      context[20] = context[13];
      context[21] = refalrts::number_left( 0UL, context[19], context[20] );
      if( ! context[21] )
        continue;
      if( ! refalrts::empty_seq( context[19], context[20] ) )
        continue;
      // closed e._ as range 17
      //DEBUG: e._: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Intrinsic-Mod:1/4 # Ok/7 (/10 e._/17 )/11 (/14 # Const/16 0/21 )/15 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Intrinsic-Mod:1/4 # Ok/7 (/10 # Const/21 e.Left/17 )/11 (/14 # Const/16 e.Right/19 )/15 >/1
    context[17] = context[8];
    context[18] = context[9];
    context[19] = context[12];
    context[20] = context[13];
    context[21] = refalrts::ident_left( identifiers[ident_Const], context[17], context[18] );
    if( ! context[21] )
      continue;
    // closed e.Left as range 17
    // closed e.Right as range 19
    //DEBUG: e.Left: 17
    //DEBUG: e.Right: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} (/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: # Ok/16 } Tile{ AsIs: </0 Reuse: & NumberToSymbols/4 HalfReuse: </7 HalfReuse: & Mod/10 HalfReuse: (/21 AsIs: e.Left/17 AsIs: )/11 } Tile{ AsIs: e.Right/19 } Tile{ HalfReuse: >/15 AsIs: >/1 ]] }
    refalrts::update_ident(context[16], identifiers[ident_Ok]);
    refalrts::update_name(context[4], functions[efunc_NumberToSymbols]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[10], functions[efunc_Mod]);
    refalrts::reinit_open_bracket(context[21]);
    refalrts::reinit_close_call(context[15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[21], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[0], context[11] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Mod:1/4 e._/2 >/1
  // closed e._ as range 2
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Mod:1/4 e._/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Mod_B1("Intrinsic-Mod:1", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Mod_B1);


static refalrts::FnResult func_Intrinsicm_Mod(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Intrinsic-Mod/4 e.Args/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Args as range 2
  //DEBUG: e.Args: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Intrinsic-Mod:1/6 Tile{ AsIs: </0 Reuse: & ArithmArgs/4 AsIs: e.Args/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Intrinsicm_Mod_B1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_ArithmArgs]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Mod("Intrinsic-Mod", COOKIE1_, COOKIE2_, func_Intrinsicm_Mod);


static refalrts::FnResult func_gen_Intrinsicm_Divmod_B1S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Intrinsic-Divmod:1$2=1/4 (/7 e.Q/5 )/8 e.R/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Q as range 5
  // closed e.R as range 2
  //DEBUG: e.Q: 5
  //DEBUG: e.R: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: (/4 HalfReuse: # Brackets/7 } </9 & Map@4/10 Tile{ AsIs: e.Q/5 } >/11 )/12 </13 Tile{ HalfReuse: & Map@4/8 AsIs: e.R/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z4]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_ident(context[7], identifiers[ident_Brackets]);
  refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[4], context[12] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[11], context[13] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Divmod_B1S2A1("Intrinsic-Divmod:1$2=1", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Divmod_B1S2A1);


static refalrts::FnResult func_gen_Intrinsicm_Divmod_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & Intrinsic-Divmod:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Intrinsic-Divmod:1/4 # Ok/7 (/10 e.new1/8 )/11 (/14 # Const/16 e.new2/12 )/15 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = refalrts::ident_left( identifiers[ident_Ok], context[5], context[6] );
    if( ! context[7] )
      continue;
    context[8] = 0;
    context[9] = 0;
    context[10] = refalrts::brackets_left( context[8], context[9], context[5], context[6] );
    if( ! context[10] )
      continue;
    refalrts::bracket_pointers(context[10], context[11]);
    context[12] = 0;
    context[13] = 0;
    context[14] = refalrts::brackets_left( context[12], context[13], context[5], context[6] );
    if( ! context[14] )
      continue;
    refalrts::bracket_pointers(context[14], context[15]);
    context[16] = refalrts::ident_left( identifiers[ident_Const], context[12], context[13] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    // closed e.new1 as range 8
    // closed e.new2 as range 12
    do {
      // </0 & Intrinsic-Divmod:1/4 # Ok/7 (/10 e._/17 )/11 (/14 # Const/16 0/21 )/15 >/1
      context[17] = context[8];
      context[18] = context[9];
      context[19] = context[12];
      context[20] = context[13];
      context[21] = refalrts::number_left( 0UL, context[19], context[20] );
      if( ! context[21] )
        continue;
      if( ! refalrts::empty_seq( context[19], context[20] ) )
        continue;
      // closed e._ as range 17
      //DEBUG: e._: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Intrinsic-Divmod:1/4 # Ok/7 (/10 e._/17 )/11 (/14 # Const/16 0/21 )/15 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Intrinsic-Divmod:1/4 # Ok/7 (/10 s.new3/21 e.new4/17 )/11 (/14 # Const/16 e.new5/19 )/15 >/1
    context[17] = context[8];
    context[18] = context[9];
    context[19] = context[12];
    context[20] = context[13];
    // closed e.new5 as range 19
    if( ! refalrts::svar_left( context[21], context[17], context[18] ) )
      continue;
    // closed e.new4 as range 17
    do {
      // </0 & Intrinsic-Divmod:1/4 # Ok/7 (/10 # Const/21 e.Left/22 )/11 (/14 # Const/16 e.Right/24 )/15 >/1
      context[22] = context[17];
      context[23] = context[18];
      context[24] = context[19];
      context[25] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_Const], context[21] ) )
        continue;
      // closed e.Left as range 22
      // closed e.Right as range 24
      //DEBUG: e.Left: 22
      //DEBUG: e.Right: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/14 # Const/16 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Intrinsic-Divmod:1$2=1/4 HalfReuse: </7 HalfReuse: & Divmod/10 HalfReuse: (/21 AsIs: e.Left/22 AsIs: )/11 } Tile{ AsIs: e.Right/24 } Tile{ HalfReuse: >/15 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Intrinsicm_Divmod_B1S2A1]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[10], functions[efunc_Divmod]);
      refalrts::reinit_open_bracket(context[21]);
      refalrts::reinit_close_call(context[15]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[7] );
      refalrts::link_brackets( context[21], context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[15];
      res = refalrts::splice_evar( res, context[24], context[25] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Intrinsic-Divmod:1/4 # Ok/7 (/10 # ArithmResult/21 t.ArithmCall/27 )/11 (/14 # Const/16 1/26 )/15 >/1
    context[22] = context[17];
    context[23] = context[18];
    context[24] = context[19];
    context[25] = context[20];
    if( ! refalrts::ident_term( identifiers[ident_ArithmResult], context[21] ) )
      continue;
    context[26] = refalrts::number_left( 1UL, context[24], context[25] );
    if( ! context[26] )
      continue;
    if( ! refalrts::empty_seq( context[24], context[25] ) )
      continue;
    context[28] = refalrts::tvar_left( context[27], context[22], context[23] );
    if( ! context[28] )
      continue;
    if( ! refalrts::empty_seq( context[22], context[23] ) )
      continue;
    //DEBUG: t.ArithmCall: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Intrinsic-Divmod:1/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: # Ok/7 AsIs: (/10 Reuse: # Brackets/21 AsIs: t.ArithmCall/27 AsIs: )/11 AsIs: (/14 Reuse: # Symbol/16 HalfReuse: # Number/26 HalfReuse: 0/15 HalfReuse: )/1 ]] }
    refalrts::update_ident(context[21], identifiers[ident_Brackets]);
    refalrts::update_ident(context[16], identifiers[ident_Symbol]);
    refalrts::reinit_ident(context[26], identifiers[ident_Number]);
    refalrts::reinit_number(context[15], 0UL);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[14], context[1] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Divmod:1/4 e._/2 >/1
  // closed e._ as range 2
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Divmod:1/4 e._/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Divmod_B1("Intrinsic-Divmod:1", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Divmod_B1);


static refalrts::FnResult func_Intrinsicm_Divmod(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Intrinsic-Divmod/4 e.Args/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Args as range 2
  //DEBUG: e.Args: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Intrinsic-Divmod:1/6 Tile{ AsIs: </0 Reuse: & ArithmArgs/4 AsIs: e.Args/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Intrinsicm_Divmod_B1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_ArithmArgs]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Divmod("Intrinsic-Divmod", COOKIE1_, COOKIE2_, func_Intrinsicm_Divmod);


static refalrts::FnResult func_Intrinsicm_Compare(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & Intrinsic-Compare/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Intrinsic-Compare/4 e.Args/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args as range 5
    //DEBUG: e.Args: 5
    //5: e.Args
    //12: e.Args

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Intrinsicm_Compare_S1C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_ArithmArgs]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & Intrinsic-Compare$1?1/11 # Ok/12 (/15 # Const/17 e.Left/13 )/16 (/20 # Const/22 e.Right/18 )/21 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::ident_left( identifiers[ident_Ok], context[9], context[10] );
      if( ! context[12] )
        continue;
      context[13] = 0;
      context[14] = 0;
      context[15] = refalrts::brackets_left( context[13], context[14], context[9], context[10] );
      if( ! context[15] )
        continue;
      refalrts::bracket_pointers(context[15], context[16]);
      context[17] = refalrts::ident_left( identifiers[ident_Const], context[13], context[14] );
      if( ! context[17] )
        continue;
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[9], context[10] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      context[22] = refalrts::ident_left( identifiers[ident_Const], context[18], context[19] );
      if( ! context[22] )
        continue;
      if( ! refalrts::empty_seq( context[9], context[10] ) )
        continue;
      // closed e.Left as range 13
      // closed e.Right as range 18
      //DEBUG: e.Args: 5
      //DEBUG: e.Left: 13
      //DEBUG: e.Right: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Args/5 {REMOVED TILE} (/20 # Const/22 {REMOVED TILE} )/21 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: (/4 } Tile{ HalfReuse: # Symbol/7 HalfReuse: # Char/11 HalfReuse: </12 HalfReuse: & Compare/15 HalfReuse: (/17 AsIs: e.Left/13 AsIs: )/16 } Tile{ AsIs: e.Right/18 } Tile{ AsIs: >/8 HalfReuse: )/1 ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_ident(context[7], identifiers[ident_Symbol]);
      refalrts::reinit_ident(context[11], identifiers[ident_Char]);
      refalrts::reinit_open_call(context[12]);
      refalrts::reinit_name(context[15], functions[efunc_Compare]);
      refalrts::reinit_open_bracket(context[17]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[4], context[1] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[12] );
      refalrts::link_brackets( context[17], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[7], context[16] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Compare/4 e._/2 >/1
  // closed e._ as range 2
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Compare/4 e._/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Compare("Intrinsic-Compare", COOKIE1_, COOKIE2_, func_Intrinsicm_Compare);


static refalrts::FnResult func_gen_Intrinsicm_Chr_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Intrinsic-Chr$1=2/4 e.Substitution/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Substitution as range 2
  //DEBUG: e.Substitution: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & Intrinsic-Chr$1=2/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Ok/0 } Tile{ AsIs: e.Substitution/2 } Tile{ ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Chr_S1A2("Intrinsic-Chr$1=2", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Chr_S1A2);


static refalrts::FnResult func_Intrinsicm_Chr(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Intrinsic-Chr/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Intrinsic-Chr/4 e.Args/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args as range 5
    //DEBUG: e.Args: 5
    //5: e.Args
    //12: e.Args

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Intrinsicm_Chr_S1C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z1]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & Intrinsic-Chr$1?1/11 # True/12 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::ident_left( identifiers[ident_True], context[9], context[10] );
      if( ! context[12] )
        continue;
      if( ! refalrts::empty_seq( context[9], context[10] ) )
        continue;
      //DEBUG: e.Args: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} # True/12 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </8 HalfReuse: & Intrinsic-Chr$1=2/1 } Tile{ AsIs: </0 Reuse: & StaticSubstitution@1/4 AsIs: e.Args/5 HalfReuse: >/7 HalfReuse: >/11 } Tile{ ]] }
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[1], functions[efunc_gen_Intrinsicm_Chr_S1A2]);
      refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_Z1]);
      refalrts::reinit_close_call(context[7]);
      refalrts::reinit_close_call(context[11]);
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Chr/4 e.Args/2 >/1
  // closed e.Args as range 2
  //DEBUG: e.Args: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Chr/4 e.Args/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Chr("Intrinsic-Chr", COOKIE1_, COOKIE2_, func_Intrinsicm_Chr);


static refalrts::FnResult func_CheckArgsm_Intrinsicm_StaticSubstitution(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & CheckArgs-Intrinsic-StaticSubstitution/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckArgs-Intrinsic-StaticSubstitution/4 (/7 e.new1/5 )/8 s.new2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & CheckArgs-Intrinsic-StaticSubstitution/4 (/7 t.new4/12 e.new5/10 )/8 s.new3/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[13] = refalrts::tvar_left( context[12], context[10], context[11] );
    if( ! context[13] )
      continue;
    // closed e.new5 as range 10
    do {
      // </0 & CheckArgs-Intrinsic-StaticSubstitution/4 (/7 (/12 s.new7/18 e.new8/16 )/13 e.new9/14 )/8 s.new6/9 >/1
      context[14] = context[10];
      context[15] = context[11];
      context[16] = 0;
      context[17] = 0;
      if( ! refalrts::brackets_term( context[16], context[17], context[12] ) )
        continue;
      // closed e.new9 as range 14
      if( ! refalrts::svar_left( context[18], context[16], context[17] ) )
        continue;
      // closed e.new8 as range 16
      do {
        // </0 & CheckArgs-Intrinsic-StaticSubstitution/4 (/7 (/12 # Symbol/18 s.SymbolName/23 e.2/19 )/13 e./21 )/8 s.SymbolName/9 >/1
        context[19] = context[16];
        context[20] = context[17];
        context[21] = context[14];
        context[22] = context[15];
        if( ! refalrts::ident_term( identifiers[ident_Symbol], context[18] ) )
          continue;
        if( ! refalrts::repeated_stvar_left( vm, context[23], context[9], context[19], context[20] ) )
          continue;
        // closed e.2 as range 19
        // closed e. as range 21
        //DEBUG: s.SymbolName: 9
        //DEBUG: e.2: 19
        //DEBUG: e.: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/7 (/12 # Symbol/18 s.SymbolName/23 e.2/19 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckArgs-Intrinsic-StaticSubstitution/4 } Tile{ HalfReuse: (/13 AsIs: e./21 AsIs: )/8 AsIs: s.SymbolName/9 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[13]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[13];
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & CheckArgs-Intrinsic-StaticSubstitution/4 (/7 (/12 # Var/18 e.1/19 )/13 e./21 )/8 s.SymbolName/9 >/1
        context[19] = context[16];
        context[20] = context[17];
        context[21] = context[14];
        context[22] = context[15];
        if( ! refalrts::ident_term( identifiers[ident_Var], context[18] ) )
          continue;
        // closed e.1 as range 19
        // closed e. as range 21
        //DEBUG: s.SymbolName: 9
        //DEBUG: e.1: 19
        //DEBUG: e.: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/7 (/12 # Var/18 e.1/19 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckArgs-Intrinsic-StaticSubstitution/4 } Tile{ HalfReuse: (/13 AsIs: e./21 AsIs: )/8 AsIs: s.SymbolName/9 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[13]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[13];
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & CheckArgs-Intrinsic-StaticSubstitution/4 (/7 (/12 # ColdCallBrackets/18 e.1/19 )/13 e./21 )/8 s.SymbolName/9 >/1
      context[19] = context[16];
      context[20] = context[17];
      context[21] = context[14];
      context[22] = context[15];
      if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[18] ) )
        continue;
      // closed e.1 as range 19
      // closed e. as range 21
      //DEBUG: s.SymbolName: 9
      //DEBUG: e.1: 19
      //DEBUG: e.: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/7 (/12 # ColdCallBrackets/18 e.1/19 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & CheckArgs-Intrinsic-StaticSubstitution/4 } Tile{ HalfReuse: (/13 AsIs: e./21 AsIs: )/8 AsIs: s.SymbolName/9 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[13];
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckArgs-Intrinsic-StaticSubstitution/4 (/7 t./12 e./14 )/8 s.SymbolName/9 >/1
    context[14] = context[10];
    context[15] = context[11];
    // closed e. as range 14
    //DEBUG: t.: 12
    //DEBUG: s.SymbolName: 9
    //DEBUG: e.: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckArgs-Intrinsic-StaticSubstitution/4 (/7 t./12 e./14 )/8 s.SymbolName/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_False]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckArgs-Intrinsic-StaticSubstitution/4 (/7 )/8 s.SymbolName/9 >/1
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.SymbolName: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckArgs-Intrinsic-StaticSubstitution/4 (/7 )/8 s.SymbolName/9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_True]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckArgs-Intrinsic-StaticSubstitution/4 (/7 e.Args/5 )/8 s.SymbolName/9 >/1
  // closed e.Args as range 5
  //DEBUG: s.SymbolName: 9
  //DEBUG: e.Args: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.SymbolName/9 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckArgs-Intrinsic-StaticSubstitution:1*5/4 HalfReuse: s.SymbolName9 /7 AsIs: e.Args/5 HalfReuse: >/8 } Tile{ ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_B1D5]);
  refalrts::reinit_svar( context[7], context[9] );
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, context[8], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckArgsm_Intrinsicm_StaticSubstitution("CheckArgs-Intrinsic-StaticSubstitution", COOKIE1_, COOKIE2_, func_CheckArgsm_Intrinsicm_StaticSubstitution);


static refalrts::FnResult func_StaticSubstitution(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & StaticSubstitution/4 (/7 e.Args/5 )/8 (/11 e.FuncName/9 )/12 s.Func/13 s.SymbolFrom/14 s.SymbolTo/15 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Args as range 5
  // closed e.FuncName as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[15], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Args: 5
  //DEBUG: e.FuncName: 9
  //DEBUG: s.Func: 13
  //DEBUG: s.SymbolFrom: 14
  //DEBUG: s.SymbolTo: 15

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Func/13 s.SymbolFrom/14 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@5/4 HalfReuse: s.SymbolFrom14 /7 } Tile{ AsIs: s.SymbolTo/15 } Tile{ HalfReuse: s.Func13 /8 AsIs: (/11 AsIs: e.FuncName/9 AsIs: )/12 } Tile{ AsIs: e.Args/5 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z5]);
  refalrts::reinit_svar( context[7], context[14] );
  refalrts::reinit_svar( context[8], context[13] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[8], context[12] );
  res = refalrts::splice_elem( res, context[15] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_StaticSubstitution("StaticSubstitution", COOKIE1_, COOKIE2_, func_StaticSubstitution);


static refalrts::FnResult func_gen_Intrinsicm_Ord_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Intrinsic-Ord$1=2/4 e.Substitution/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Substitution as range 2
  //DEBUG: e.Substitution: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & Intrinsic-Ord$1=2/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Ok/0 } Tile{ AsIs: e.Substitution/2 } Tile{ ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Ord_S1A2("Intrinsic-Ord$1=2", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Ord_S1A2);


static refalrts::FnResult func_Intrinsicm_Ord(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Intrinsic-Ord/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Intrinsic-Ord/4 e.Args/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args as range 5
    //DEBUG: e.Args: 5
    //5: e.Args
    //12: e.Args

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Intrinsicm_Ord_S1C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z2]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & Intrinsic-Ord$1?1/11 # True/12 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::ident_left( identifiers[ident_True], context[9], context[10] );
      if( ! context[12] )
        continue;
      if( ! refalrts::empty_seq( context[9], context[10] ) )
        continue;
      //DEBUG: e.Args: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} # True/12 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </8 HalfReuse: & Intrinsic-Ord$1=2/1 } Tile{ AsIs: </0 Reuse: & StaticSubstitution@2/4 AsIs: e.Args/5 HalfReuse: >/7 HalfReuse: >/11 } Tile{ ]] }
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[1], functions[efunc_gen_Intrinsicm_Ord_S1A2]);
      refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_Z2]);
      refalrts::reinit_close_call(context[7]);
      refalrts::reinit_close_call(context[11]);
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Ord/4 e.Args/2 >/1
  // closed e.Args as range 2
  //DEBUG: e.Args: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Ord/4 e.Args/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Ord("Intrinsic-Ord", COOKIE1_, COOKIE2_, func_Intrinsicm_Ord);


static refalrts::FnResult func_gen_Intrinsicm_Upper_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Intrinsic-Upper$1=2/4 e.Substitution/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Substitution as range 2
  //DEBUG: e.Substitution: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & Intrinsic-Upper$1=2/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Ok/0 } Tile{ AsIs: e.Substitution/2 } Tile{ ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Upper_S1A2("Intrinsic-Upper$1=2", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Upper_S1A2);


static refalrts::FnResult func_Intrinsicm_Upper(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Intrinsic-Upper/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Intrinsic-Upper/4 e.Args/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args as range 5
    //DEBUG: e.Args: 5
    //5: e.Args
    //12: e.Args

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Intrinsicm_Upper_S1C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z2]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & Intrinsic-Upper$1?1/11 # True/12 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::ident_left( identifiers[ident_True], context[9], context[10] );
      if( ! context[12] )
        continue;
      if( ! refalrts::empty_seq( context[9], context[10] ) )
        continue;
      //DEBUG: e.Args: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} # True/12 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </8 HalfReuse: & Intrinsic-Upper$1=2/1 } Tile{ AsIs: </0 Reuse: & StaticSubstitution@3/4 AsIs: e.Args/5 HalfReuse: >/7 HalfReuse: >/11 } Tile{ ]] }
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[1], functions[efunc_gen_Intrinsicm_Upper_S1A2]);
      refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_Z3]);
      refalrts::reinit_close_call(context[7]);
      refalrts::reinit_close_call(context[11]);
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Upper/4 e.Args/2 >/1
  // closed e.Args as range 2
  //DEBUG: e.Args: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Upper/4 e.Args/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Upper("Intrinsic-Upper", COOKIE1_, COOKIE2_, func_Intrinsicm_Upper);


static refalrts::FnResult func_gen_Intrinsicm_Lower_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Intrinsic-Lower$1=2/4 e.Substitution/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Substitution as range 2
  //DEBUG: e.Substitution: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & Intrinsic-Lower$1=2/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Ok/0 } Tile{ AsIs: e.Substitution/2 } Tile{ ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Lower_S1A2("Intrinsic-Lower$1=2", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Lower_S1A2);


static refalrts::FnResult func_Intrinsicm_Lower(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Intrinsic-Lower/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Intrinsic-Lower/4 e.Args/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args as range 5
    //DEBUG: e.Args: 5
    //5: e.Args
    //12: e.Args

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Intrinsicm_Lower_S1C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z2]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & Intrinsic-Lower$1?1/11 # True/12 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::ident_left( identifiers[ident_True], context[9], context[10] );
      if( ! context[12] )
        continue;
      if( ! refalrts::empty_seq( context[9], context[10] ) )
        continue;
      //DEBUG: e.Args: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} # True/12 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </8 HalfReuse: & Intrinsic-Lower$1=2/1 } Tile{ AsIs: </0 Reuse: & StaticSubstitution@4/4 AsIs: e.Args/5 HalfReuse: >/7 HalfReuse: >/11 } Tile{ ]] }
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[1], functions[efunc_gen_Intrinsicm_Lower_S1A2]);
      refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_Z4]);
      refalrts::reinit_close_call(context[7]);
      refalrts::reinit_close_call(context[11]);
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Lower/4 e.Args/2 >/1
  // closed e.Args as range 2
  //DEBUG: e.Args: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Lower/4 e.Args/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Lower("Intrinsic-Lower", COOKIE1_, COOKIE2_, func_Intrinsicm_Lower);


static refalrts::FnResult func_gen_Intrinsicm_Numb_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Intrinsic-Numb$1=2/4 e.Result/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Result as range 2
  //DEBUG: e.Result: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & Intrinsic-Numb$1=2/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Ok/0 } Tile{ AsIs: e.Result/2 } Tile{ ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Numb_S1A2("Intrinsic-Numb$1=2", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Numb_S1A2);


static refalrts::FnResult func_Intrinsicm_Numb(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Intrinsic-Numb/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Intrinsic-Numb/4 e.Args/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args as range 5
    //DEBUG: e.Args: 5
    //5: e.Args
    //12: e.Args

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Intrinsicm_Numb_S1C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_AllChars]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & Intrinsic-Numb$1?1/11 # Ok/12 e.Chars/9 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::ident_left( identifiers[ident_Ok], context[9], context[10] );
      if( ! context[12] )
        continue;
      // closed e.Chars as range 9
      //DEBUG: e.Args: 5
      //DEBUG: e.Chars: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e.Args/5 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Intrinsic-Numb$1=2/4 } </13 Tile{ HalfReuse: & NumberToSymbols/7 HalfReuse: </11 HalfReuse: & Numb/12 AsIs: e.Chars/9 AsIs: >/8 AsIs: >/1 } >/14 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_close_call(vm, context[14]);
      refalrts::update_name(context[4], functions[efunc_gen_Intrinsicm_Numb_S1A2]);
      refalrts::reinit_name(context[7], functions[efunc_NumberToSymbols]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[12], functions[efunc_Numb]);
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[7], context[1] );
      res = refalrts::splice_elem( res, context[13] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Numb/4 e.Args/2 >/1
  // closed e.Args as range 2
  //DEBUG: e.Args: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Numb/4 e.Args/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Numb("Intrinsic-Numb", COOKIE1_, COOKIE2_, func_Intrinsicm_Numb);


static refalrts::FnResult func_gen_Intrinsicm_Symb_S1A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Intrinsic-Symb$1=3/4 e.Result/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Result as range 2
  //DEBUG: e.Result: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & Intrinsic-Symb$1=3/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Ok/0 } Tile{ AsIs: e.Result/2 } Tile{ ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Symb_S1A3("Intrinsic-Symb$1=3", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Symb_S1A3);


static refalrts::FnResult func_gen_Intrinsicm_Symb_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Intrinsic-Symb$1=2/4 e.Numbers/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Numbers as range 2
  //DEBUG: e.Numbers: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Intrinsic-Symb$1=3/6 Tile{ AsIs: </0 Reuse: & Map@2/4 AsIs: e.Numbers/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Intrinsicm_Symb_S1A3]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z2]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Symb_S1A2("Intrinsic-Symb$1=2", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Symb_S1A2);


static refalrts::FnResult func_Intrinsicm_Symb(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Intrinsic-Symb/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Intrinsic-Symb/4 e.Args/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args as range 5
    //DEBUG: e.Args: 5
    //5: e.Args
    //12: e.Args

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Intrinsicm_Symb_S1C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_ArithmOneArg]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & Intrinsic-Symb$1?1/11 # Ok/12 # Const/13 e._/9 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::ident_left( identifiers[ident_Ok], context[9], context[10] );
      if( ! context[12] )
        continue;
      context[13] = refalrts::ident_left( identifiers[ident_Const], context[9], context[10] );
      if( ! context[13] )
        continue;
      // closed e._ as range 9
      //DEBUG: e.Args: 5
      //DEBUG: e._: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e._/9 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </8 HalfReuse: & Intrinsic-Symb$1=2/1 } Tile{ HalfReuse: </13 } & Symb/14 Tile{ AsIs: </0 Reuse: & SymbolsToNumber/4 AsIs: e.Args/5 HalfReuse: >/7 HalfReuse: >/11 HalfReuse: >/12 } Tile{ ]] }
      refalrts::alloc_name(vm, context[14], functions[efunc_Symb]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[1], functions[efunc_gen_Intrinsicm_Symb_S1A2]);
      refalrts::reinit_open_call(context[13]);
      refalrts::update_name(context[4], functions[efunc_SymbolsToNumber]);
      refalrts::reinit_close_call(context[7]);
      refalrts::reinit_close_call(context[11]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[0], context[12] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Symb/4 e.Args/2 >/1
  // closed e.Args as range 2
  //DEBUG: e.Args: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Symb/4 e.Args/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Symb("Intrinsic-Symb", COOKIE1_, COOKIE2_, func_Intrinsicm_Symb);


static refalrts::FnResult func_CharToNode(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & CharToNode/4 e.Char/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Char as range 2
  //DEBUG: e.Char: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@2/4 AsIs: e.Char/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CharToNode("CharToNode", COOKIE1_, COOKIE2_, func_CharToNode);


static refalrts::FnResult func_gen_Intrinsicm_Implode_S1A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Intrinsic-Implode$1=3/4 (/7 e.NonIdent/5 )/8 e.Result/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.NonIdent as range 5
  // closed e.Result as range 2
  //DEBUG: e.NonIdent: 5
  //DEBUG: e.Result: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 } Tile{ AsIs: e.Result/2 } Tile{ AsIs: </0 Reuse: & Map@2/4 } Tile{ AsIs: e.NonIdent/5 } Tile{ AsIs: >/1 ]] }
  refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Implode_S1A3("Intrinsic-Implode$1=3", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Implode_S1A3);


static refalrts::FnResult func_gen_Intrinsicm_Implode_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Intrinsic-Implode$1=2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Intrinsic-Implode$1=2/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Intrinsic-Implode$1=2/4 0/5 e.NonIdent/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::number_term( 0UL, context[5] ) )
      continue;
    // closed e.NonIdent as range 6
    //DEBUG: e.NonIdent: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } # Ok/8 (/9 # Symbol/10 # Number/11 0/12 Tile{ HalfReuse: )/0 HalfReuse: </4 HalfReuse: & Map@2/5 AsIs: e.NonIdent/6 AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[8], identifiers[ident_Ok]);
    refalrts::alloc_open_bracket(vm, context[9]);
    refalrts::alloc_ident(vm, context[10], identifiers[ident_Symbol]);
    refalrts::alloc_ident(vm, context[11], identifiers[ident_Number]);
    refalrts::alloc_number(vm, context[12], 0UL);
    refalrts::reinit_close_bracket(context[0]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_gen_Map_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::link_brackets( context[9], context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[8], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Implode$1=2/4 s.Ident/5 e.NonIdent/2 >/1
  // closed e.NonIdent as range 2
  //DEBUG: s.Ident: 5
  //DEBUG: e.NonIdent: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Intrinsic-Implode$1=3/4 } (/6 Tile{ AsIs: e.NonIdent/2 } )/7 (/8 # Symbol/9 # Identifier/10 </11 & Explode/12 Tile{ AsIs: s.Ident/5 } >/13 )/14 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[6]);
  refalrts::alloc_close_bracket(vm, context[7]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Symbol]);
  refalrts::alloc_ident(vm, context[10], identifiers[ident_Identifier]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_Explode]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_Intrinsicm_Implode_S1A3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[8], context[14] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[6], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[7], context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Implode_S1A2("Intrinsic-Implode$1=2", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Implode_S1A2);


static refalrts::FnResult func_Intrinsicm_Implode(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Intrinsic-Implode/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Intrinsic-Implode/4 e.Args/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args as range 5
    //DEBUG: e.Args: 5
    //5: e.Args
    //12: e.Args

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Intrinsicm_Implode_S1C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_AllChars]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & Intrinsic-Implode$1?1/11 # Ok/12 e.Chars/9 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::ident_left( identifiers[ident_Ok], context[9], context[10] );
      if( ! context[12] )
        continue;
      // closed e.Chars as range 9
      //DEBUG: e.Args: 5
      //DEBUG: e.Chars: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & Intrinsic-Implode/4 e.Args/5 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & Intrinsic-Implode$1=2/7 HalfReuse: </11 HalfReuse: & Implode/12 AsIs: e.Chars/9 AsIs: >/8 AsIs: >/1 ]] }
      refalrts::reinit_name(context[7], functions[efunc_gen_Intrinsicm_Implode_S1A2]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[12], functions[efunc_Implode]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Implode/4 e.Args/2 >/1
  // closed e.Args as range 2
  //DEBUG: e.Args: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Implode/4 e.Args/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Implode("Intrinsic-Implode", COOKIE1_, COOKIE2_, func_Intrinsicm_Implode);


static refalrts::FnResult func_Intrinsicm_Implodeu_Ext(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Intrinsic-Implode_Ext/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Intrinsic-Implode_Ext/4 e.Args/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args as range 5
    //DEBUG: e.Args: 5
    //5: e.Args
    //12: e.Args

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Intrinsicm_Implodeu_Ext_S1C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_AllChars]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & Intrinsic-Implode_Ext$1?1/11 # Ok/12 e.Chars/9 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::ident_left( identifiers[ident_Ok], context[9], context[10] );
      if( ! context[12] )
        continue;
      // closed e.Chars as range 9
      //DEBUG: e.Args: 5
      //DEBUG: e.Chars: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & Intrinsic-Implode_Ext/4 e.Args/5 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # Ok/0 } Tile{ HalfReuse: (/7 HalfReuse: # Symbol/11 Reuse: # Identifier/12 AsIs: e.Chars/9 HalfReuse: )/8 } Tile{ ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
      refalrts::reinit_open_bracket(context[7]);
      refalrts::reinit_ident(context[11], identifiers[ident_Symbol]);
      refalrts::update_ident(context[12], identifiers[ident_Identifier]);
      refalrts::reinit_close_bracket(context[8]);
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Implode_Ext/4 e.Args/2 >/1
  // closed e.Args as range 2
  //DEBUG: e.Args: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Implode_Ext/4 e.Args/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Implodeu_Ext("Intrinsic-Implode_Ext", COOKIE1_, COOKIE2_, func_Intrinsicm_Implodeu_Ext);


static refalrts::FnResult func_Intrinsicm_Explode(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Intrinsic-Explode/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Intrinsic-Explode/4 (/9 # Symbol/11 # Identifier/12 e.Name/7 )/10 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = refalrts::ident_left( identifiers[ident_Symbol], context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::ident_left( identifiers[ident_Identifier], context[7], context[8] );
    if( ! context[12] )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    // closed e.Name as range 7
    //DEBUG: e.Name: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Intrinsic-Explode/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/9 HalfReuse: </11 HalfReuse: & Map@2/12 AsIs: e.Name/7 HalfReuse: >/10 } Tile{ ]] }
    refalrts::reinit_ident(context[9], identifiers[ident_Ok]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[12], functions[efunc_gen_Map_Z2]);
    refalrts::reinit_close_call(context[10]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Explode/4 e._/2 >/1
  // closed e._ as range 2
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Explode/4 e._/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Explode("Intrinsic-Explode", COOKIE1_, COOKIE2_, func_Intrinsicm_Explode);


static refalrts::FnResult func_gen_Intrinsicm_Type_S4A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Intrinsic-Type$4=1/4 t.Term/5 (/9 e.Rest/7 )/10 s.Type/11 s.SubType/12 e._/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Rest as range 7
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e._ as range 2
  //DEBUG: t.Term: 5
  //DEBUG: e.Rest: 7
  //DEBUG: s.Type: 11
  //DEBUG: s.SubType: 12
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e._/2 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: (/4 } # Symbol/13 Tile{ HalfReuse: # Char/10 AsIs: s.Type/11 } )/14 Tile{ AsIs: (/9 } # Symbol/15 # Char/16 Tile{ AsIs: s.SubType/12 } Tile{ HalfReuse: )/1 } Tile{ AsIs: t.Term/5 } Tile{ AsIs: e.Rest/7 } Tile{ ]] }
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Symbol]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Symbol]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Char]);
  refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_ident(context[10], identifiers[ident_Char]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[9], context[1] );
  refalrts::link_brackets( context[4], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_elem( res, context[13] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Type_S4A1("Intrinsic-Type$4=1", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Type_S4A1);


static refalrts::FnResult func_Intrinsicm_Type(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & Intrinsic-Type/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Intrinsic-Type/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Intrinsic-Type/4 (/7 s.new3/13 e.new4/11 )/8 e.new5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new4 as range 11
      do {
        // </0 & Intrinsic-Type/4 (/7 # CallBrackets/13 e._/14 )/8 e._0/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[13] ) )
          continue;
        // closed e._ as range 14
        // closed e._0 as range 16
        //DEBUG: e._: 14
        //DEBUG: e._0: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Intrinsic-Type/4 (/7 # CallBrackets/13 e._/14 )/8 e._0/16 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
        refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Intrinsic-Type/4 (/7 # ColdCallBrackets/13 e._/14 )/8 e._0/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[13] ) )
          continue;
        // closed e._ as range 14
        // closed e._0 as range 16
        //DEBUG: e._: 14
        //DEBUG: e._0: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Intrinsic-Type/4 (/7 # ColdCallBrackets/13 e._/14 )/8 e._0/16 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
        refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Intrinsic-Type/4 (/7 # Var/13 e._/14 )/8 e._0/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Var], context[13] ) )
          continue;
        // closed e._ as range 14
        // closed e._0 as range 16
        //DEBUG: e._: 14
        //DEBUG: e._0: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Intrinsic-Type/4 (/7 # Var/13 e._/14 )/8 e._0/16 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
        refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Intrinsic-Type/4 (/7 # Symbol/13 s.new6/18 e.new7/14 )/8 e.new8/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Symbol], context[13] ) )
          continue;
        // closed e.new8 as range 16
        if( ! refalrts::svar_left( context[18], context[14], context[15] ) )
          continue;
        // closed e.new7 as range 14
        do {
          // </0 & Intrinsic-Type/4 (/7 # Symbol/13 s.new9/18 s.new10/23 )/8 e.new11/21 >/1
          context[19] = context[14];
          context[20] = context[15];
          context[21] = context[16];
          context[22] = context[17];
          // closed e.new11 as range 21
          if( ! refalrts::svar_left( context[23], context[19], context[20] ) )
            continue;
          if( ! refalrts::empty_seq( context[19], context[20] ) )
            continue;
          do {
            // </0 & Intrinsic-Type/4 (/7 # Symbol/13 # Number/18 s._/23 )/8 e.Rest/24 >/1
            context[24] = context[21];
            context[25] = context[22];
            if( ! refalrts::ident_term( identifiers[ident_Number], context[18] ) )
              continue;
            // closed e.Rest as range 24
            //DEBUG: s._: 23
            //DEBUG: e.Rest: 24

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/1 } (/26 # Symbol/27 # Char/28 'N'/29 )/30 (/31 # Symbol/32 # Char/33 Tile{ HalfReuse: '0'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # Symbol/13 AsIs: # Number/18 AsIs: s._/23 AsIs: )/8 } Tile{ AsIs: e.Rest/24 } Tile{ ]] }
            refalrts::alloc_open_bracket(vm, context[26]);
            refalrts::alloc_ident(vm, context[27], identifiers[ident_Symbol]);
            refalrts::alloc_ident(vm, context[28], identifiers[ident_Char]);
            refalrts::alloc_char(vm, context[29], 'N');
            refalrts::alloc_close_bracket(vm, context[30]);
            refalrts::alloc_open_bracket(vm, context[31]);
            refalrts::alloc_ident(vm, context[32], identifiers[ident_Symbol]);
            refalrts::alloc_ident(vm, context[33], identifiers[ident_Char]);
            refalrts::reinit_ident(context[1], identifiers[ident_Ok]);
            refalrts::reinit_char(context[0], '0');
            refalrts::reinit_close_bracket(context[4]);
            refalrts::link_brackets( context[7], context[8] );
            refalrts::link_brackets( context[31], context[4] );
            refalrts::link_brackets( context[26], context[30] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[24], context[25] );
            res = refalrts::splice_evar( res, context[0], context[8] );
            res = refalrts::splice_evar( res, context[26], context[33] );
            res = refalrts::splice_elem( res, context[1] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & Intrinsic-Type/4 (/7 # Symbol/13 # Char/18 s.Char/23 )/8 e.Rest/24 >/1
          context[24] = context[21];
          context[25] = context[22];
          if( ! refalrts::ident_term( identifiers[ident_Char], context[18] ) )
            continue;
          // closed e.Rest as range 24
          //DEBUG: s.Char: 23
          //DEBUG: e.Rest: 24

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: </13 HalfReuse: & Intrinsic-Type$4=1@1/18 AsIs: s.Char/23 HalfReuse: (/8 AsIs: e.Rest/24 HalfReuse: )/1 } Tile{ AsIs: </0 Reuse: & Type/4 HalfReuse: s.Char23 /7 } >/26 >/27 Tile{ ]] }
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::reinit_open_call(context[13]);
          refalrts::reinit_name(context[18], functions[efunc_gen_Intrinsicm_Type_S4A1Z1]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::update_name(context[4], functions[efunc_Type]);
          refalrts::reinit_svar( context[7], context[23] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[8], context[1] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[0], context[7] );
          res = refalrts::splice_evar( res, context[13], context[1] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Intrinsic-Type/4 (/7 # Symbol/13 # Identifier/18 e.1/19 )/8 e.Rest/21 >/1
          context[19] = context[14];
          context[20] = context[15];
          context[21] = context[16];
          context[22] = context[17];
          if( ! refalrts::ident_term( identifiers[ident_Identifier], context[18] ) )
            continue;
          // closed e.1 as range 19
          // closed e.Rest as range 21
          //DEBUG: e.1: 19
          //DEBUG: e.Rest: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & Intrinsic-Type$4=1@2/4 AsIs: (/7 } e.1/19/23 )/25 (/26 Tile{ AsIs: e.Rest/21 } )/27 </28 & Type/29 Tile{ HalfReuse: </13 HalfReuse: & Implode_Ext/18 AsIs: e.1/19 HalfReuse: >/8 } >/30 Tile{ AsIs: >/1 ]] }
          refalrts::copy_evar(vm, context[23], context[24], context[19], context[20]);
          refalrts::alloc_close_bracket(vm, context[25]);
          refalrts::alloc_open_bracket(vm, context[26]);
          refalrts::alloc_close_bracket(vm, context[27]);
          refalrts::alloc_open_call(vm, context[28]);
          refalrts::alloc_name(vm, context[29], functions[efunc_Type]);
          refalrts::alloc_close_call(vm, context[30]);
          refalrts::update_name(context[4], functions[efunc_gen_Intrinsicm_Type_S4A1Z2]);
          refalrts::reinit_open_call(context[13]);
          refalrts::reinit_name(context[18], functions[efunc_Implodeu_Ext]);
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[13] );
          refalrts::link_brackets( context[26], context[27] );
          refalrts::link_brackets( context[7], context[25] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[30] );
          res = refalrts::splice_evar( res, context[13], context[8] );
          res = refalrts::splice_evar( res, context[27], context[29] );
          res = refalrts::splice_evar( res, context[21], context[22] );
          res = refalrts::splice_evar( res, context[25], context[26] );
          res = refalrts::splice_evar( res, context[23], context[24] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Intrinsic-Type/4 (/7 # Symbol/13 # Name/18 e.1/19 )/8 e.Rest/21 >/1
        context[19] = context[14];
        context[20] = context[15];
        context[21] = context[16];
        context[22] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_Name], context[18] ) )
          continue;
        // closed e.1 as range 19
        // closed e.Rest as range 21
        //DEBUG: e.1: 19
        //DEBUG: e.Rest: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/1 } (/23 # Symbol/24 # Char/25 'F'/26 )/27 (/28 # Symbol/29 # Char/30 Tile{ HalfReuse: 'g'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # Symbol/13 AsIs: # Name/18 AsIs: e.1/19 AsIs: )/8 } Tile{ AsIs: e.Rest/21 } Tile{ ]] }
        refalrts::alloc_open_bracket(vm, context[23]);
        refalrts::alloc_ident(vm, context[24], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[25], identifiers[ident_Char]);
        refalrts::alloc_char(vm, context[26], 'F');
        refalrts::alloc_close_bracket(vm, context[27]);
        refalrts::alloc_open_bracket(vm, context[28]);
        refalrts::alloc_ident(vm, context[29], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[30], identifiers[ident_Char]);
        refalrts::reinit_ident(context[1], identifiers[ident_Ok]);
        refalrts::reinit_char(context[0], 'g');
        refalrts::reinit_close_bracket(context[4]);
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[28], context[4] );
        refalrts::link_brackets( context[23], context[27] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[23], context[30] );
        res = refalrts::splice_elem( res, context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Intrinsic-Type/4 (/7 # ClosureBrackets/13 e.0/14 )/8 e.Rest/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_ClosureBrackets], context[13] ) )
          continue;
        // closed e.0 as range 14
        // closed e.Rest as range 16
        //DEBUG: e.0: 14
        //DEBUG: e.Rest: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/1 } (/18 # Symbol/19 # Char/20 'F'/21 )/22 (/23 # Symbol/24 # Char/25 Tile{ HalfReuse: 'c'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # ClosureBrackets/13 AsIs: e.0/14 AsIs: )/8 } Tile{ AsIs: e.Rest/16 } Tile{ ]] }
        refalrts::alloc_open_bracket(vm, context[18]);
        refalrts::alloc_ident(vm, context[19], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[20], identifiers[ident_Char]);
        refalrts::alloc_char(vm, context[21], 'F');
        refalrts::alloc_close_bracket(vm, context[22]);
        refalrts::alloc_open_bracket(vm, context[23]);
        refalrts::alloc_ident(vm, context[24], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[25], identifiers[ident_Char]);
        refalrts::reinit_ident(context[1], identifiers[ident_Ok]);
        refalrts::reinit_char(context[0], 'c');
        refalrts::reinit_close_bracket(context[4]);
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[23], context[4] );
        refalrts::link_brackets( context[18], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[18], context[25] );
        res = refalrts::splice_elem( res, context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Intrinsic-Type/4 (/7 # Brackets/13 e.0/14 )/8 e.Rest/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[13] ) )
          continue;
        // closed e.0 as range 14
        // closed e.Rest as range 16
        //DEBUG: e.0: 14
        //DEBUG: e.Rest: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/1 } (/18 # Symbol/19 # Char/20 'B'/21 )/22 (/23 # Symbol/24 # Char/25 Tile{ HalfReuse: '0'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # Brackets/13 AsIs: e.0/14 AsIs: )/8 } Tile{ AsIs: e.Rest/16 } Tile{ ]] }
        refalrts::alloc_open_bracket(vm, context[18]);
        refalrts::alloc_ident(vm, context[19], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[20], identifiers[ident_Char]);
        refalrts::alloc_char(vm, context[21], 'B');
        refalrts::alloc_close_bracket(vm, context[22]);
        refalrts::alloc_open_bracket(vm, context[23]);
        refalrts::alloc_ident(vm, context[24], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[25], identifiers[ident_Char]);
        refalrts::reinit_ident(context[1], identifiers[ident_Ok]);
        refalrts::reinit_char(context[0], '0');
        refalrts::reinit_close_bracket(context[4]);
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[23], context[4] );
        refalrts::link_brackets( context[18], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[18], context[25] );
        res = refalrts::splice_elem( res, context[1] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Intrinsic-Type/4 (/7 # ADT-Brackets/13 (/20 e.2/18 )/21 e.1/14 )/8 e.Rest/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[13] ) )
        continue;
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[14], context[15] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      // closed e.2 as range 18
      // closed e.1 as range 14
      // closed e.Rest as range 16
      //DEBUG: e.2: 18
      //DEBUG: e.1: 14
      //DEBUG: e.Rest: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } # Ok/22 (/23 # Symbol/24 # Char/25 Tile{ HalfReuse: 'B'/1 } )/26 (/27 # Symbol/28 # Char/29 Tile{ HalfReuse: 'a'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # ADT-Brackets/13 AsIs: (/20 AsIs: e.2/18 AsIs: )/21 AsIs: e.1/14 AsIs: )/8 } Tile{ AsIs: e.Rest/16 } Tile{ ]] }
      refalrts::alloc_ident(vm, context[22], identifiers[ident_Ok]);
      refalrts::alloc_open_bracket(vm, context[23]);
      refalrts::alloc_ident(vm, context[24], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[25], identifiers[ident_Char]);
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::alloc_open_bracket(vm, context[27]);
      refalrts::alloc_ident(vm, context[28], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[29], identifiers[ident_Char]);
      refalrts::reinit_char(context[1], 'B');
      refalrts::reinit_char(context[0], 'a');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::link_brackets( context[27], context[4] );
      refalrts::link_brackets( context[23], context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[26], context[29] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[22], context[25] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Intrinsic-Type/4 t.Term/7 e.Rest/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Rest as range 9
    //DEBUG: t.Term: 7
    //DEBUG: e.Rest: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Intrinsic-Type$4=1/4 AsIs: t.Term/7 } (/11 Tile{ AsIs: e.Rest/9 } )/12 </13 & Intrinsic-Type$4=1:1*7/14 t.Term/7/15 >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Intrinsicm_Type_S4A1B1D7]);
    refalrts::copy_evar(vm, context[15], context[16], context[7], context[8]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_Intrinsicm_Type_S4A1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[13] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[12], context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Type/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: (/4 HalfReuse: # Symbol/1 } # Char/5 '*'/6 )/7 (/8 # Symbol/9 # Char/10 '0'/11 )/12 Tile{ ]] }
  refalrts::alloc_ident(vm, context[5], identifiers[ident_Char]);
  refalrts::alloc_char(vm, context[6], '*');
  refalrts::alloc_close_bracket(vm, context[7]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Symbol]);
  refalrts::alloc_ident(vm, context[10], identifiers[ident_Char]);
  refalrts::alloc_char(vm, context[11], '0');
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_ident(context[1], identifiers[ident_Symbol]);
  refalrts::link_brackets( context[8], context[12] );
  refalrts::link_brackets( context[4], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Type("Intrinsic-Type", COOKIE1_, COOKIE2_, func_Intrinsicm_Type);


static refalrts::FnResult func_gen_Intrinsicm_Lenw_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Intrinsic-Lenw$1=2/4 s.Len/5 e.Args$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Args$a as range 2
  //DEBUG: s.Len: 5
  //DEBUG: e.Args$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: (/4 } Tile{ HalfReuse: # Symbol/1 } # Number/6 Tile{ AsIs: s.Len/5 } )/7 Tile{ AsIs: e.Args$a/2 } Tile{ ]] }
  refalrts::alloc_ident(vm, context[6], identifiers[ident_Number]);
  refalrts::alloc_close_bracket(vm, context[7]);
  refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_ident(context[1], identifiers[ident_Symbol]);
  refalrts::link_brackets( context[4], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_elem( res, context[6] );
  res = refalrts::splice_elem( res, context[1] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Lenw_S1A2("Intrinsic-Lenw$1=2", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Lenw_S1A2);


static refalrts::FnResult func_Intrinsicm_Lenw(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Intrinsic-Lenw/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Intrinsic-Lenw/4 e.Args/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args as range 5
    //DEBUG: e.Args: 5
    //5: e.Args
    //12: e.Args

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Intrinsicm_Lenw_S1C1]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_FixedLength]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </7 & Intrinsic-Lenw$1?1/11 # True/12 >/8
      context[9] = 0;
      context[10] = 0;
      context[11] = refalrts::call_left( context[9], context[10], context[7], context[8] );
      context[12] = refalrts::ident_left( identifiers[ident_True], context[9], context[10] );
      if( ! context[12] )
        continue;
      if( ! refalrts::empty_seq( context[9], context[10] ) )
        continue;
      //DEBUG: e.Args: 5

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} # True/12 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </8 HalfReuse: & Intrinsic-Lenw$1=2/1 } Tile{ AsIs: </0 Reuse: & Lenw/4 AsIs: e.Args/5 HalfReuse: >/7 HalfReuse: >/11 } Tile{ ]] }
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[1], functions[efunc_gen_Intrinsicm_Lenw_S1A2]);
      refalrts::update_name(context[4], functions[efunc_Lenw]);
      refalrts::reinit_close_call(context[7]);
      refalrts::reinit_close_call(context[11]);
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_evar( res, context[8], context[1] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[7], context[8]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Lenw/4 e._/2 >/1
  // closed e._ as range 2
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Lenw/4 e._/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Lenw("Intrinsic-Lenw", COOKIE1_, COOKIE2_, func_Intrinsicm_Lenw);


static refalrts::FnResult func_FixedLength(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & FixedLength/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & FixedLength/4 e._/7 (/13 # Var/15 'e'/16 e._0/11 )/14 e._1/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Var], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[16] = refalrts::char_left( 'e', context[11], context[12] );
      if( ! context[16] )
        continue;
      // closed e._0 as range 11
      // closed e._1 as range 9
      //DEBUG: e._: 7
      //DEBUG: e._0: 11
      //DEBUG: e._1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & FixedLength/4 e._/7 (/13 # Var/15 'e'/16 e._0/11 )/14 e._1/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_False]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & FixedLength/4 e._/7 (/13 # CallBrackets/15 e._0/11 )/14 e._1/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_CallBrackets], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e._0 as range 11
      // closed e._1 as range 9
      //DEBUG: e._: 7
      //DEBUG: e._0: 11
      //DEBUG: e._1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & FixedLength/4 e._/7 (/13 # CallBrackets/15 e._0/11 )/14 e._1/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_False]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & FixedLength/4 e._/7 (/13 # ColdCallBrackets/15 e._0/11 )/14 e._1/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_ColdCallBrackets], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e._0 as range 11
      // closed e._1 as range 9
      //DEBUG: e._: 7
      //DEBUG: e._0: 11
      //DEBUG: e._1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & FixedLength/4 e._/7 (/13 # ColdCallBrackets/15 e._0/11 )/14 e._1/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_False]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FixedLength/4 e._/2 >/1
  // closed e._ as range 2
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & FixedLength/4 e._/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_True]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FixedLength("FixedLength", COOKIE1_, COOKIE2_, func_FixedLength);


static refalrts::FnResult func_Intrinsicm_First(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & Intrinsic-First/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Intrinsic-First/4 (/9 # Symbol/11 # Number/12 s.N/13 )/10 e.Expr/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = refalrts::ident_left( identifiers[ident_Symbol], context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::ident_left( identifiers[ident_Number], context[7], context[8] );
    if( ! context[12] )
      continue;
    // closed e.Expr as range 5
    if( ! refalrts::svar_left( context[13], context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    //DEBUG: e.Expr: 5
    //DEBUG: s.N: 13
    //5: e.Expr
    //13: s.N
    //19: s.N
    //20: e.Expr

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_Intrinsicm_First_S1C1]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_First]);
    refalrts::copy_stvar(vm, context[19], context[13]);
    refalrts::copy_evar(vm, context[20], context[21], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[14] );
    res = refalrts::splice_elem( res, context[15] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[17] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_stvar( res, context[19] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_elem( res, context[14] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </14 & Intrinsic-First$1?1/18 (/21 e.Prefix/19 )/22 e.Suffix/16 >/15
      context[16] = 0;
      context[17] = 0;
      context[18] = refalrts::call_left( context[16], context[17], context[14], context[15] );
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_left( context[19], context[20], context[16], context[17] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.Prefix as range 19
      // closed e.Suffix as range 16
      //DEBUG: e.Expr: 5
      //DEBUG: s.N: 13
      //DEBUG: e.Prefix: 19
      //DEBUG: e.Suffix: 16
      //5: e.Expr
      //13: s.N
      //16: e.Suffix
      //19: e.Prefix
      //28: e.Prefix

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[25], functions[efunc_gen_Intrinsicm_First_S1C2]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_FixedLength]);
      refalrts::copy_evar(vm, context[28], context[29], context[19], context[20]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[23] );
      res = refalrts::splice_elem( res, context[24] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[26] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[23] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </23 & Intrinsic-First$1?2/27 # True/28 >/24
        context[25] = 0;
        context[26] = 0;
        context[27] = refalrts::call_left( context[25], context[26], context[23], context[24] );
        context[28] = refalrts::ident_left( identifiers[ident_True], context[25], context[26] );
        if( ! context[28] )
          continue;
        if( ! refalrts::empty_seq( context[25], context[26] ) )
          continue;
        //DEBUG: e.Expr: 5
        //DEBUG: s.N: 13
        //DEBUG: e.Prefix: 19
        //DEBUG: e.Suffix: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Intrinsic-First/4 (/9 # Symbol/11 # Number/12 s.N/13 )/10 e.Expr/5 {REMOVED TILE} {REMOVED TILE} >/15 </23 & Intrinsic-First$1?2/27 # True/28 >/24 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/14 HalfReuse: (/18 HalfReuse: # Brackets/21 AsIs: e.Prefix/19 AsIs: )/22 } Tile{ AsIs: e.Suffix/16 } Tile{ ]] }
        refalrts::reinit_ident(context[14], identifiers[ident_Ok]);
        refalrts::reinit_open_bracket(context[18]);
        refalrts::reinit_ident(context[21], identifiers[ident_Brackets]);
        refalrts::link_brackets( context[18], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[14], context[22] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[23], context[24]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[14], context[15]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-First/4 e._/2 >/1
  // closed e._ as range 2
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-First/4 e._/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_First("Intrinsic-First", COOKIE1_, COOKIE2_, func_Intrinsicm_First);


static refalrts::FnResult func_Intrinsicm_Last(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & Intrinsic-Last/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Intrinsic-Last/4 (/9 # Symbol/11 # Number/12 s.N/13 )/10 e.Expr/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = refalrts::ident_left( identifiers[ident_Symbol], context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::ident_left( identifiers[ident_Number], context[7], context[8] );
    if( ! context[12] )
      continue;
    // closed e.Expr as range 5
    if( ! refalrts::svar_left( context[13], context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    //DEBUG: e.Expr: 5
    //DEBUG: s.N: 13
    //5: e.Expr
    //13: s.N
    //19: s.N
    //20: e.Expr

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_Intrinsicm_Last_S1C1]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_Last]);
    refalrts::copy_stvar(vm, context[19], context[13]);
    refalrts::copy_evar(vm, context[20], context[21], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[14] );
    res = refalrts::splice_elem( res, context[15] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[17] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_stvar( res, context[19] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_elem( res, context[14] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </14 & Intrinsic-Last$1?1/18 (/21 e.Prefix/19 )/22 e.Suffix/16 >/15
      context[16] = 0;
      context[17] = 0;
      context[18] = refalrts::call_left( context[16], context[17], context[14], context[15] );
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_left( context[19], context[20], context[16], context[17] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.Prefix as range 19
      // closed e.Suffix as range 16
      //DEBUG: e.Expr: 5
      //DEBUG: s.N: 13
      //DEBUG: e.Prefix: 19
      //DEBUG: e.Suffix: 16
      //5: e.Expr
      //13: s.N
      //16: e.Suffix
      //19: e.Prefix
      //28: e.Suffix

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[25], functions[efunc_gen_Intrinsicm_Last_S1C2]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_FixedLength]);
      refalrts::copy_evar(vm, context[28], context[29], context[16], context[17]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[23] );
      res = refalrts::splice_elem( res, context[24] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[26] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[23] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </23 & Intrinsic-Last$1?2/27 # True/28 >/24
        context[25] = 0;
        context[26] = 0;
        context[27] = refalrts::call_left( context[25], context[26], context[23], context[24] );
        context[28] = refalrts::ident_left( identifiers[ident_True], context[25], context[26] );
        if( ! context[28] )
          continue;
        if( ! refalrts::empty_seq( context[25], context[26] ) )
          continue;
        //DEBUG: e.Expr: 5
        //DEBUG: s.N: 13
        //DEBUG: e.Prefix: 19
        //DEBUG: e.Suffix: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Intrinsic-Last/4 (/9 # Symbol/11 # Number/12 s.N/13 )/10 e.Expr/5 {REMOVED TILE} {REMOVED TILE} >/15 </23 & Intrinsic-Last$1?2/27 # True/28 >/24 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/14 HalfReuse: (/18 HalfReuse: # Brackets/21 AsIs: e.Prefix/19 AsIs: )/22 } Tile{ AsIs: e.Suffix/16 } Tile{ ]] }
        refalrts::reinit_ident(context[14], identifiers[ident_Ok]);
        refalrts::reinit_open_bracket(context[18]);
        refalrts::reinit_ident(context[21], identifiers[ident_Brackets]);
        refalrts::link_brackets( context[18], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[14], context[22] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[23], context[24]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[14], context[15]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Last/4 e._/2 >/1
  // closed e._ as range 2
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Intrinsic-Last/4 e._/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # MakeColdCall/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_MakeColdCall]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Intrinsicm_Last("Intrinsic-Last", COOKIE1_, COOKIE2_, func_Intrinsicm_Last);


static refalrts::FnResult func_gen_OptExprm_MakeSubstitutions_S3A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & OptExpr-MakeSubstitutions$3=2/4 t.Metatables/5 (/9 e.UsedVars/7 )/10 (/13 e.Args/11 )/14 (/17 e.Name/15 )/18 (/21 e.Body/19 )/22 s.DriveMode$a/23 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.UsedVars as range 7
  // closed e.Args as range 11
  // closed e.Name as range 15
  // closed e.Body as range 19
  if( ! refalrts::svar_left( context[23], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Metatables: 5
  //DEBUG: e.UsedVars: 7
  //DEBUG: e.Args: 11
  //DEBUG: e.Name: 15
  //DEBUG: e.Body: 19
  //DEBUG: s.DriveMode$a: 23

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables/5 } Tile{ AsIs: </0 Reuse: & DoOptExpr-MakeSubstitutions@1/4 } Tile{ AsIs: s.DriveMode$a/23 } Tile{ AsIs: (/9 AsIs: e.UsedVars/7 AsIs: )/10 } Tile{ AsIs: e.Args/11 } Tile{ AsIs: (/13 } Tile{ HalfReuse: # Function/14 AsIs: (/17 AsIs: e.Name/15 AsIs: )/18 HalfReuse: # Sentences/21 AsIs: e.Body/19 AsIs: )/22 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoOptExprm_MakeSubstitutions_Z1]);
  refalrts::reinit_ident(context[14], identifiers[ident_Function]);
  refalrts::reinit_ident(context[21], identifiers[ident_Sentences]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[14], context[22] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptExprm_MakeSubstitutions_S3A2("OptExpr-MakeSubstitutions$3=2", COOKIE1_, COOKIE2_, func_gen_OptExprm_MakeSubstitutions_S3A2);


static refalrts::FnResult func_OptExprm_MakeSubstitutions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 50 elems
  refalrts::Iter context[50];
  refalrts::zeros( context, 50 );
  // </0 & OptExpr-MakeSubstitutions/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & OptExpr-MakeSubstitutions/4 (/7 e.new1/5 )/8 t.new2/9 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 t.new5/19 t.new6/21 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  context[20] = refalrts::tvar_left( context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  context[22] = refalrts::tvar_left( context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & OptExpr-MakeSubstitutions/4 (/7 e.UsedVars/23 )/8 (/9 s.DriveMode/32 # Intrinsic/31 )/10 (/13 e.Expr/25 )/14 (/17 e.Args/27 )/18 t.IntrinsicFunction/19 t.Metatables/21 >/1
    context[23] = context[5];
    context[24] = context[6];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = 0;
    context[30] = 0;
    if( ! refalrts::brackets_term( context[29], context[30], context[9] ) )
      continue;
    context[31] = refalrts::ident_right( identifiers[ident_Intrinsic], context[29], context[30] );
    if( ! context[31] )
      continue;
    // closed e.UsedVars as range 23
    // closed e.Expr as range 25
    // closed e.Args as range 27
    if( ! refalrts::svar_left( context[32], context[29], context[30] ) )
      continue;
    if( ! refalrts::empty_seq( context[29], context[30] ) )
      continue;
    //DEBUG: t.IntrinsicFunction: 19
    //DEBUG: t.Metatables: 21
    //DEBUG: e.UsedVars: 23
    //DEBUG: e.Expr: 25
    //DEBUG: e.Args: 27
    //DEBUG: s.DriveMode: 32
    //19: t.IntrinsicFunction
    //21: t.Metatables
    //23: e.UsedVars
    //25: e.Expr
    //27: e.Args
    //32: s.DriveMode
    //36: t.IntrinsicFunction

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[35], functions[efunc_gen_OptExprm_MakeSubstitutions_S1C1]);
    refalrts::copy_stvar(vm, context[36], context[19]);
    refalrts::alloc_close_call(vm, context[34]);
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[33] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_stvar( res, context[36] );
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_elem( res, context[33] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </33 & OptExpr-MakeSubstitutions$1?1/37 (/40 # Intrinsic/42 (/45 e._/43 )/46 # Intrinsic/47 e.BehaviorName/38 )/41 >/34
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::call_left( context[35], context[36], context[33], context[34] );
      context[38] = 0;
      context[39] = 0;
      context[40] = refalrts::brackets_left( context[38], context[39], context[35], context[36] );
      if( ! context[40] )
        continue;
      refalrts::bracket_pointers(context[40], context[41]);
      context[42] = refalrts::ident_left( identifiers[ident_Intrinsic], context[38], context[39] );
      if( ! context[42] )
        continue;
      context[43] = 0;
      context[44] = 0;
      context[45] = refalrts::brackets_left( context[43], context[44], context[38], context[39] );
      if( ! context[45] )
        continue;
      refalrts::bracket_pointers(context[45], context[46]);
      context[47] = refalrts::ident_left( identifiers[ident_Intrinsic], context[38], context[39] );
      if( ! context[47] )
        continue;
      if( ! refalrts::empty_seq( context[35], context[36] ) )
        continue;
      // closed e._ as range 43
      // closed e.BehaviorName as range 38
      //DEBUG: t.IntrinsicFunction: 19
      //DEBUG: t.Metatables: 21
      //DEBUG: e.UsedVars: 23
      //DEBUG: e.Expr: 25
      //DEBUG: e.Args: 27
      //DEBUG: s.DriveMode: 32
      //DEBUG: e._: 43
      //DEBUG: e.BehaviorName: 38

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/7 e.UsedVars/23 )/8 (/9 s.DriveMode/32 # Intrinsic/31 )/10 (/13 e.Expr/25 )/14 {REMOVED TILE} {REMOVED TILE} </33 & OptExpr-MakeSubstitutions$1?1/37 (/40 # Intrinsic/42 (/45 e._/43 )/46 # Intrinsic/47 {REMOVED TILE} )/41 >/34 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall/4 } Tile{ AsIs: t.IntrinsicFunction/19 AsIs: t.Metatables/21 } Tile{ AsIs: (/17 AsIs: e.Args/27 AsIs: )/18 } Tile{ AsIs: e.BehaviorName/38 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_IntrinsicCall]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[33], context[34]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & OptExpr-MakeSubstitutions/4 (/7 e.UsedVars/23 )/8 t.Mode/9 (/13 e.Expr/25 )/14 (/17 e.Args/27 )/18 t.Function/19 t.Metatables/21 >/1
    context[23] = context[5];
    context[24] = context[6];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    // closed e.UsedVars as range 23
    // closed e.Expr as range 25
    // closed e.Args as range 27
    //DEBUG: t.Mode: 9
    //DEBUG: t.Function: 19
    //DEBUG: t.Metatables: 21
    //DEBUG: e.UsedVars: 23
    //DEBUG: e.Expr: 25
    //DEBUG: e.Args: 27
    //9: t.Mode
    //19: t.Function
    //21: t.Metatables
    //23: e.UsedVars
    //25: e.Expr
    //27: e.Args
    //34: e.Args

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptExprm_MakeSubstitutions_S2C1]);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_IsPassiveCall]);
    refalrts::copy_evar(vm, context[34], context[35], context[27], context[28]);
    refalrts::alloc_close_call(vm, context[36]);
    refalrts::alloc_close_call(vm, context[30]);
    refalrts::push_stack( vm, context[30] );
    refalrts::push_stack( vm, context[29] );
    res = refalrts::splice_elem( res, context[30] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[32] );
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_elem( res, context[32] );
    res = refalrts::splice_elem( res, context[31] );
    res = refalrts::splice_elem( res, context[29] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </29 & OptExpr-MakeSubstitutions$2?1/33 # False/34 >/30
      context[31] = 0;
      context[32] = 0;
      context[33] = refalrts::call_left( context[31], context[32], context[29], context[30] );
      context[34] = refalrts::ident_left( identifiers[ident_False], context[31], context[32] );
      if( ! context[34] )
        continue;
      if( ! refalrts::empty_seq( context[31], context[32] ) )
        continue;
      //DEBUG: t.Mode: 9
      //DEBUG: t.Function: 19
      //DEBUG: t.Metatables: 21
      //DEBUG: e.UsedVars: 23
      //DEBUG: e.Expr: 25
      //DEBUG: e.Args: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & OptExpr-MakeSubstitutions/4 (/7 e.UsedVars/23 )/8 t.Mode/9 (/13 e.Expr/25 )/14 (/17 {REMOVED TILE} )/18 {REMOVED TILE} {REMOVED TILE} # False/34 >/30 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables/21 AsIs: </29 Reuse: & MakeColdSolution/33 } Tile{ AsIs: t.Function/19 } Tile{ AsIs: e.Args/27 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[33], functions[efunc_MakeColdSolution]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[29] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[21], context[33] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[29], context[30]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & OptExpr-MakeSubstitutions/4 (/7 e.UsedVars/23 )/8 (/9 s.DriveMode/33 s.IntrinsicMode/34 )/10 (/13 e.Expr/25 )/14 (/17 e.Args/27 )/18 (/19 s.FuncMode/35 (/38 e.Name/36 )/39 # Sentences/40 e.Body/31 )/20 t.Metatables/21 >/1
    context[23] = context[5];
    context[24] = context[6];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = 0;
    context[30] = 0;
    if( ! refalrts::brackets_term( context[29], context[30], context[9] ) )
      continue;
    context[31] = 0;
    context[32] = 0;
    if( ! refalrts::brackets_term( context[31], context[32], context[19] ) )
      continue;
    // closed e.UsedVars as range 23
    // closed e.Expr as range 25
    // closed e.Args as range 27
    if( ! refalrts::svar_left( context[33], context[29], context[30] ) )
      continue;
    if( ! refalrts::svar_left( context[34], context[29], context[30] ) )
      continue;
    if( ! refalrts::empty_seq( context[29], context[30] ) )
      continue;
    if( ! refalrts::svar_left( context[35], context[31], context[32] ) )
      continue;
    context[36] = 0;
    context[37] = 0;
    context[38] = refalrts::brackets_left( context[36], context[37], context[31], context[32] );
    if( ! context[38] )
      continue;
    refalrts::bracket_pointers(context[38], context[39]);
    context[40] = refalrts::ident_left( identifiers[ident_Sentences], context[31], context[32] );
    if( ! context[40] )
      continue;
    // closed e.Name as range 36
    // closed e.Body as range 31
    //DEBUG: t.Metatables: 21
    //DEBUG: e.UsedVars: 23
    //DEBUG: e.Expr: 25
    //DEBUG: e.Args: 27
    //DEBUG: s.DriveMode: 33
    //DEBUG: s.IntrinsicMode: 34
    //DEBUG: s.FuncMode: 35
    //DEBUG: e.Name: 36
    //DEBUG: e.Body: 31
    //21: t.Metatables
    //23: e.UsedVars
    //25: e.Expr
    //27: e.Args
    //31: e.Body
    //33: s.DriveMode
    //34: s.IntrinsicMode
    //35: s.FuncMode
    //36: e.Name
    //46: s.DriveMode

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_name(vm, context[43], functions[efunc_gen_OptExprm_MakeSubstitutions_S3C1]);
    refalrts::alloc_open_call(vm, context[44]);
    refalrts::alloc_name(vm, context[45], functions[efunc_OneOf]);
    refalrts::copy_stvar(vm, context[46], context[33]);
    refalrts::alloc_ident(vm, context[47], identifiers[ident_Drive]);
    refalrts::alloc_ident(vm, context[48], identifiers[ident_Inline]);
    refalrts::alloc_close_call(vm, context[49]);
    refalrts::alloc_close_call(vm, context[42]);
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[41] );
    res = refalrts::splice_elem( res, context[42] );
    refalrts::push_stack( vm, context[49] );
    refalrts::push_stack( vm, context[44] );
    res = refalrts::splice_elem( res, context[49] );
    res = refalrts::splice_elem( res, context[48] );
    res = refalrts::splice_elem( res, context[47] );
    res = refalrts::splice_stvar( res, context[46] );
    res = refalrts::splice_elem( res, context[45] );
    res = refalrts::splice_elem( res, context[44] );
    res = refalrts::splice_elem( res, context[43] );
    res = refalrts::splice_elem( res, context[41] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </41 & OptExpr-MakeSubstitutions$3?1/45 # True/46 >/42
      context[43] = 0;
      context[44] = 0;
      context[45] = refalrts::call_left( context[43], context[44], context[41], context[42] );
      context[46] = refalrts::ident_left( identifiers[ident_True], context[43], context[44] );
      if( ! context[46] )
        continue;
      if( ! refalrts::empty_seq( context[43], context[44] ) )
        continue;
      //DEBUG: t.Metatables: 21
      //DEBUG: e.UsedVars: 23
      //DEBUG: e.Expr: 25
      //DEBUG: e.Args: 27
      //DEBUG: s.DriveMode: 33
      //DEBUG: s.IntrinsicMode: 34
      //DEBUG: s.FuncMode: 35
      //DEBUG: e.Name: 36
      //DEBUG: e.Body: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 (/9 s.DriveMode/33 s.IntrinsicMode/34 )/10 {REMOVED TILE} e.Expr/25 {REMOVED TILE} {REMOVED TILE} s.FuncMode/35 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptExpr-MakeSubstitutions$3=2/4 } Tile{ AsIs: t.Metatables/21 } Tile{ AsIs: (/19 } Tile{ AsIs: e.UsedVars/23 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Args/27 AsIs: )/18 } Tile{ AsIs: (/38 AsIs: e.Name/36 AsIs: )/39 HalfReuse: (/40 AsIs: e.Body/31 AsIs: )/20 } Tile{ HalfReuse: </13 } Tile{ HalfReuse: & DecreaseMode/41 HalfReuse: s.DriveMode33 /45 HalfReuse: s.FuncMode35 /46 AsIs: >/42 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_OptExprm_MakeSubstitutions_S3A2]);
      refalrts::reinit_open_bracket(context[40]);
      refalrts::reinit_open_call(context[13]);
      refalrts::reinit_name(context[41], functions[efunc_DecreaseMode]);
      refalrts::reinit_svar( context[45], context[33] );
      refalrts::reinit_svar( context[46], context[35] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[13] );
      refalrts::link_brackets( context[40], context[20] );
      refalrts::link_brackets( context[38], context[39] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[19], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[41];
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[38], context[20] );
      res = refalrts::splice_evar( res, context[14], context[18] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[41], context[42]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptExpr-MakeSubstitutions/4 (/7 e.UsedVars/5 )/8 t.Mode/9 (/13 e.Expr/11 )/14 (/17 e.Args/15 )/18 t.Function/19 t.Metatables/21 >/1
  // closed e.UsedVars as range 5
  // closed e.Expr as range 11
  // closed e.Args as range 15
  //DEBUG: t.Mode: 9
  //DEBUG: t.Function: 19
  //DEBUG: t.Metatables: 21
  //DEBUG: e.UsedVars: 5
  //DEBUG: e.Expr: 11
  //DEBUG: e.Args: 15

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} (/7 e.UsedVars/5 )/8 t.Mode/9 (/13 e.Expr/11 )/14 (/17 {REMOVED TILE} )/18 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Metatables/21 } Tile{ AsIs: </0 Reuse: & MakeColdSolution/4 } Tile{ AsIs: t.Function/19 } Tile{ AsIs: e.Args/15 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_MakeColdSolution]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_OptExprm_MakeSubstitutions("OptExpr-MakeSubstitutions", COOKIE1_, COOKIE2_, func_OptExprm_MakeSubstitutions);


static refalrts::FnResult func_MakeColdSolution(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & MakeColdSolution/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & MakeColdSolution/4 (/7 s.new1/9 (/12 e.new2/10 )/13 s.new3/14 e.new4/5 )/8 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new5 as range 2
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[5], context[6] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new2 as range 10
  if( ! refalrts::svar_left( context[14], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 5
  do {
    // </0 & MakeColdSolution/4 (/7 s.FuncMode/9 (/12 e.Name/15 )/13 s.BodyLabel/14 e.Body/17 )/8 e.Args/19 >/1
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.Name as range 15
    // closed e.Body as range 17
    // closed e.Args as range 19
    //DEBUG: s.FuncMode: 9
    //DEBUG: s.BodyLabel: 14
    //DEBUG: e.Name: 15
    //DEBUG: e.Body: 17
    //DEBUG: e.Args: 19
    //9: s.FuncMode
    //14: s.BodyLabel
    //15: e.Name
    //17: e.Body
    //19: e.Args
    //24: e.Name

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_MakeColdSolution_S1C1]);
    refalrts::copy_evar(vm, context[24], context[25], context[15], context[16]);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[21] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_elem( res, context[21] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </21 & MakeColdSolution$1?1/25 e.Prefix/23 '*'/27 s.Num/26 >/22
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::call_left( context[23], context[24], context[21], context[22] );
      if( ! refalrts::svar_right( context[26], context[23], context[24] ) )
        continue;
      context[27] = refalrts::char_right( '*', context[23], context[24] );
      if( ! context[27] )
        continue;
      // closed e.Prefix as range 23
      //DEBUG: s.FuncMode: 9
      //DEBUG: s.BodyLabel: 14
      //DEBUG: e.Name: 15
      //DEBUG: e.Body: 17
      //DEBUG: e.Args: 19
      //DEBUG: s.Num: 26
      //DEBUG: e.Prefix: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.FuncMode/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Prefix/23 {REMOVED TILE} s.Num/26 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/27 } (/28 Tile{ AsIs: </0 Reuse: & eDRIVEN/4 HalfReuse: >/7 } Tile{ HalfReuse: ':'/21 HalfReuse: (/25 } # ColdCallBrackets/29 (/30 # Symbol/31 # Name/32 e.Name/15/33 )/35 Tile{ AsIs: e.Args/19 } )/36 )/37 (/38 (/39 # NewFunction/40 # GN-Local/41 Tile{ AsIs: (/12 AsIs: e.Name/15 AsIs: )/13 AsIs: s.BodyLabel/14 AsIs: e.Body/17 AsIs: )/8 } Tile{ HalfReuse: )/22 HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_ident(vm, context[29], identifiers[ident_ColdCallBrackets]);
      refalrts::alloc_open_bracket(vm, context[30]);
      refalrts::alloc_ident(vm, context[31], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Name]);
      refalrts::copy_evar(vm, context[33], context[34], context[15], context[16]);
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::alloc_close_bracket(vm, context[37]);
      refalrts::alloc_open_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_ident(vm, context[40], identifiers[ident_NewFunction]);
      refalrts::alloc_ident(vm, context[41], identifiers[ident_GNm_Local]);
      refalrts::reinit_open_bracket(context[27]);
      refalrts::update_name(context[4], functions[efunc_eDRIVEN]);
      refalrts::reinit_close_call(context[7]);
      refalrts::reinit_char(context[21], ':');
      refalrts::reinit_open_bracket(context[25]);
      refalrts::reinit_close_bracket(context[22]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[27], context[1] );
      refalrts::link_brackets( context[38], context[22] );
      refalrts::link_brackets( context[39], context[8] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[28], context[37] );
      refalrts::link_brackets( context[25], context[36] );
      refalrts::link_brackets( context[30], context[35] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[22];
      res = refalrts::splice_evar( res, context[12], context[8] );
      res = refalrts::splice_evar( res, context[36], context[41] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[29], context[35] );
      res = refalrts::splice_evar( res, context[21], context[25] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_elem( res, context[27] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[21], context[22]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MakeColdSolution/4 (/7 s.FuncMode/9 (/12 e.Name/10 )/13 s.BodyLabel/14 e.Body/5 )/8 e.Args/2 >/1
  // closed e.Name as range 10
  // closed e.Body as range 5
  // closed e.Args as range 2
  //DEBUG: s.FuncMode: 9
  //DEBUG: s.BodyLabel: 14
  //DEBUG: e.Name: 10
  //DEBUG: e.Body: 5
  //DEBUG: e.Args: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.FuncMode/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.BodyLabel/14 e.Body/5 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 AsIs: (/7 } # Var/15 'e'/16 # DRIVEN/17 Tile{ AsIs: )/13 } ':'/18 Tile{ AsIs: (/12 } # ColdCallBrackets/19 (/20 # Symbol/21 # Name/22 Tile{ AsIs: e.Name/10 } Tile{ AsIs: )/8 AsIs: e.Args/2 HalfReuse: )/1 } )/23 (/24 )/25 )/26 Tile{ ]] }
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Var]);
  refalrts::alloc_char(vm, context[16], 'e');
  refalrts::alloc_ident(vm, context[17], identifiers[ident_DRIVEN]);
  refalrts::alloc_char(vm, context[18], ':');
  refalrts::alloc_ident(vm, context[19], identifiers[ident_ColdCallBrackets]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::alloc_ident(vm, context[21], identifiers[ident_Symbol]);
  refalrts::alloc_ident(vm, context[22], identifiers[ident_Name]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::alloc_open_bracket(vm, context[24]);
  refalrts::alloc_close_bracket(vm, context[25]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[26] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[4], context[23] );
  refalrts::link_brackets( context[12], context[1] );
  refalrts::link_brackets( context[20], context[8] );
  refalrts::link_brackets( context[7], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[23], context[26] );
  res = refalrts::splice_evar( res, context[8], context[1] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[19], context[22] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[15], context[17] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MakeColdSolution("MakeColdSolution", COOKIE1_, COOKIE2_, func_MakeColdSolution);


static refalrts::FnResult func_DecreaseMode(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & DecreaseMode/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DecreaseMode/4 s.new1/5 s.new2/6 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & DecreaseMode/4 # Inline/5 s.Mode/6 >/1
    if( ! refalrts::ident_term( identifiers[ident_Inline], context[5] ) )
      continue;
    //DEBUG: s.Mode: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DecreaseMode/4 # Inline/5 s.Mode/6 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # Inline/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_Inline]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DecreaseMode/4 # Drive/5 s.Mode/6 >/1
  if( ! refalrts::ident_term( identifiers[ident_Drive], context[5] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Mode: 6

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DecreaseMode/4 # Drive/5 s.Mode/6 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: s.Mode6 /1 ]] }
  refalrts::reinit_svar( context[1], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DecreaseMode("DecreaseMode", COOKIE1_, COOKIE2_, func_DecreaseMode);


static refalrts::FnResult func_gen_DoOptExprm_MakeSubstitutions_S1B1S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & DoOptExpr-MakeSubstitutions$1:1$1=1/4 (/7 e.Substitutions/5 )/8 e.CallReplacer/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Substitutions as range 5
  // closed e.CallReplacer as range 2
  //DEBUG: e.Substitutions: 5
  //DEBUG: e.CallReplacer: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Substitutions/5 } Tile{ HalfReuse: (/0 HalfReuse: (/4 AsIs: (/7 } # Var/9 'e'/10 # DRIVEN/11 )/12 Tile{ HalfReuse: ':'/8 AsIs: e.CallReplacer/2 HalfReuse: )/1 } (/13 )/14 )/15 Tile{ ]] }
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Var]);
  refalrts::alloc_char(vm, context[10], 'e');
  refalrts::alloc_ident(vm, context[11], identifiers[ident_DRIVEN]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_char(context[8], ':');
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[15] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[4], context[1] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[13], context[15] );
  res = refalrts::splice_evar( res, context[8], context[1] );
  res = refalrts::splice_evar( res, context[9], context[12] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptExprm_MakeSubstitutions_S1B1S1A1("DoOptExpr-MakeSubstitutions$1:1$1=1", COOKIE1_, COOKIE2_, func_gen_DoOptExprm_MakeSubstitutions_S1B1S1A1);


static refalrts::FnResult func_gen_DoOptExprm_MakeSubstitutions_S1B1S2A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & DoOptExpr-MakeSubstitutions$1:1$2=2/4 s.Mode/5 (/8 e.SentenceVars/6 )/9 (/12 e.Args/10 )/13 (/16 e.Substitutions/14 )/17 (/20 e.Name/18 )/21 (/24 e.Rest/22 )/25 e.NewSubsts/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.SentenceVars as range 6
  // closed e.Args as range 10
  // closed e.Substitutions as range 14
  // closed e.Name as range 18
  // closed e.Rest as range 22
  // closed e.NewSubsts as range 2
  //DEBUG: s.Mode: 5
  //DEBUG: e.SentenceVars: 6
  //DEBUG: e.Args: 10
  //DEBUG: e.Substitutions: 14
  //DEBUG: e.Name: 18
  //DEBUG: e.Rest: 22
  //DEBUG: e.NewSubsts: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptExpr-MakeSubstitutions@2/4 AsIs: s.Mode/5 AsIs: (/8 AsIs: e.SentenceVars/6 AsIs: )/9 AsIs: (/12 AsIs: e.Args/10 AsIs: )/13 AsIs: (/16 AsIs: e.Substitutions/14 AsIs: )/17 } Tile{ AsIs: e.NewSubsts/2 } Tile{ AsIs: (/20 } # Function/26 (/27 </28 & RemainderFuncIncName/29 Tile{ AsIs: e.Name/18 } >/30 Tile{ AsIs: )/21 HalfReuse: # Sentences/24 AsIs: e.Rest/22 AsIs: )/25 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[26], identifiers[ident_Function]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_open_call(vm, context[28]);
  refalrts::alloc_name(vm, context[29], functions[efunc_RemainderFuncIncName]);
  refalrts::alloc_close_call(vm, context[30]);
  refalrts::update_name(context[4], functions[efunc_gen_DoOptExprm_MakeSubstitutions_Z2]);
  refalrts::reinit_ident(context[24], identifiers[ident_Sentences]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[25] );
  refalrts::link_brackets( context[27], context[21] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[28] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[21], context[25] );
  res = refalrts::splice_elem( res, context[30] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[26], context[29] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptExprm_MakeSubstitutions_S1B1S2A2("DoOptExpr-MakeSubstitutions$1:1$2=2", COOKIE1_, COOKIE2_, func_gen_DoOptExprm_MakeSubstitutions_S1B1S2A2);


static refalrts::FnResult func_gen_DoOptExprm_MakeSubstitutions_S1B1S2A2L1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & DoOptExpr-MakeSubstitutions$1:1$2=2\1=1/4 (/7 e.Contrs/5 )/8 e.CallReplacer/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Contrs as range 5
  // closed e.CallReplacer as range 2
  //DEBUG: e.Contrs: 5
  //DEBUG: e.CallReplacer: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Contrs/5 HalfReuse: (/8 } Tile{ HalfReuse: (/0 HalfReuse: # Var/4 } 'e'/9 # DRIVEN/10 )/11 ':'/12 Tile{ AsIs: e.CallReplacer/2 } )/13 (/14 )/15 Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_char(vm, context[9], 'e');
  refalrts::alloc_ident(vm, context[10], identifiers[ident_DRIVEN]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::alloc_char(vm, context[12], ':');
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Var]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[7], context[1] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[8], context[13] );
  refalrts::link_brackets( context[0], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[13], context[15] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[12] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptExprm_MakeSubstitutions_S1B1S2A2L1A1("DoOptExpr-MakeSubstitutions$1:1$2=2\\1=1", COOKIE1_, COOKIE2_, func_gen_DoOptExprm_MakeSubstitutions_S1B1S2A2L1A1);


static refalrts::FnResult func_gen_DoOptExprm_MakeSubstitutions_S1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 95 elems
  refalrts::Iter context[95];
  refalrts::zeros( context, 95 );
  // </0 & DoOptExpr-MakeSubstitutions$1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoOptExpr-MakeSubstitutions$1:1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 s.new3/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 (/24 e.new6/22 )/25 (/28 e.new7/26 )/29 (/32 e.new8/30 )/33 e.new9/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 22
  // closed e.new7 as range 26
  // closed e.new8 as range 30
  // closed e.new9 as range 2
  do {
    // </0 & DoOptExpr-MakeSubstitutions$1:1/4 (/7 e.new13/34 )/8 (/11 e.new14/36 )/12 s.new10/13 (/16 e.new15/38 )/17 (/20 e.new16/40 )/21 (/24 e.new17/42 )/25 (/28 e.new18/44 )/29 (/32 e.new19/46 )/33 s.new11/50 e.new12/48 >/1
    context[34] = context[5];
    context[35] = context[6];
    context[36] = context[9];
    context[37] = context[10];
    context[38] = context[14];
    context[39] = context[15];
    context[40] = context[18];
    context[41] = context[19];
    context[42] = context[22];
    context[43] = context[23];
    context[44] = context[26];
    context[45] = context[27];
    context[46] = context[30];
    context[47] = context[31];
    context[48] = context[2];
    context[49] = context[3];
    // closed e.new13 as range 34
    // closed e.new14 as range 36
    // closed e.new15 as range 38
    // closed e.new16 as range 40
    // closed e.new17 as range 42
    // closed e.new18 as range 44
    // closed e.new19 as range 46
    if( ! refalrts::svar_left( context[50], context[48], context[49] ) )
      continue;
    // closed e.new12 as range 48
    do {
      // </0 & DoOptExpr-MakeSubstitutions$1:1/4 (/7 e.new22/51 )/8 (/11 e.new23/53 )/12 s.new20/13 (/16 e.new24/55 )/17 (/20 e.new25/57 )/21 (/24 e.new26/59 )/25 (/28 e.new27/61 )/29 (/32 e.new28/63 )/33 # Success/50 e.new21/65 >/1
      context[51] = context[34];
      context[52] = context[35];
      context[53] = context[36];
      context[54] = context[37];
      context[55] = context[38];
      context[56] = context[39];
      context[57] = context[40];
      context[58] = context[41];
      context[59] = context[42];
      context[60] = context[43];
      context[61] = context[44];
      context[62] = context[45];
      context[63] = context[46];
      context[64] = context[47];
      context[65] = context[48];
      context[66] = context[49];
      if( ! refalrts::ident_term( identifiers[ident_Success], context[50] ) )
        continue;
      // closed e.new22 as range 51
      // closed e.new23 as range 53
      // closed e.new24 as range 55
      // closed e.new25 as range 57
      // closed e.new26 as range 59
      // closed e.new27 as range 61
      // closed e.new28 as range 63
      // closed e.new21 as range 65
      do {
        // </0 & DoOptExpr-MakeSubstitutions$1:1/4 (/7 e.Substitutions/67 )/8 (/11 e.RS$a/69 )/12 s.Mode/13 (/16 e.SentenceVars/71 )/17 (/20 e.Args/73 )/21 (/24 e.Name/75 )/25 (/28 e.Rest/77 )/29 (/32 e.LS/79 )/33 # Success/50 (/85 (/89 )/90 (/93 e.Assigns/91 )/94 )/86 >/1
        context[67] = context[51];
        context[68] = context[52];
        context[69] = context[53];
        context[70] = context[54];
        context[71] = context[55];
        context[72] = context[56];
        context[73] = context[57];
        context[74] = context[58];
        context[75] = context[59];
        context[76] = context[60];
        context[77] = context[61];
        context[78] = context[62];
        context[79] = context[63];
        context[80] = context[64];
        context[81] = context[65];
        context[82] = context[66];
        context[83] = 0;
        context[84] = 0;
        context[85] = refalrts::brackets_left( context[83], context[84], context[81], context[82] );
        if( ! context[85] )
          continue;
        refalrts::bracket_pointers(context[85], context[86]);
        context[87] = 0;
        context[88] = 0;
        context[89] = refalrts::brackets_left( context[87], context[88], context[83], context[84] );
        if( ! context[89] )
          continue;
        refalrts::bracket_pointers(context[89], context[90]);
        context[91] = 0;
        context[92] = 0;
        context[93] = refalrts::brackets_left( context[91], context[92], context[83], context[84] );
        if( ! context[93] )
          continue;
        refalrts::bracket_pointers(context[93], context[94]);
        if( ! refalrts::empty_seq( context[87], context[88] ) )
          continue;
        if( ! refalrts::empty_seq( context[83], context[84] ) )
          continue;
        if( ! refalrts::empty_seq( context[81], context[82] ) )
          continue;
        // closed e.Substitutions as range 67
        // closed e.RS$a as range 69
        // closed e.SentenceVars as range 71
        // closed e.Args as range 73
        // closed e.Name as range 75
        // closed e.Rest as range 77
        // closed e.LS as range 79
        // closed e.Assigns as range 91
        //DEBUG: s.Mode: 13
        //DEBUG: e.Substitutions: 67
        //DEBUG: e.RS$a: 69
        //DEBUG: e.SentenceVars: 71
        //DEBUG: e.Args: 73
        //DEBUG: e.Name: 75
        //DEBUG: e.Rest: 77
        //DEBUG: e.LS: 79
        //DEBUG: e.Assigns: 91

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} )/12 s.Mode/13 (/16 e.SentenceVars/71 )/17 (/20 e.Args/73 )/21 (/24 e.Name/75 )/25 (/28 e.Rest/77 )/29 (/32 e.LS/79 )/33 # Success/50 (/85 (/89 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptExpr-MakeSubstitutions$1:1$1=1/4 AsIs: (/7 AsIs: e.Substitutions/67 AsIs: )/8 HalfReuse: </11 } Tile{ HalfReuse: & Map@6/90 AsIs: (/93 AsIs: e.Assigns/91 AsIs: )/94 } Tile{ AsIs: e.RS$a/69 } Tile{ HalfReuse: >/86 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_gen_DoOptExprm_MakeSubstitutions_S1B1S1A1]);
        refalrts::reinit_open_call(context[11]);
        refalrts::reinit_name(context[90], functions[efunc_gen_Map_Z6]);
        refalrts::reinit_close_call(context[86]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[86] );
        refalrts::push_stack( vm, context[11] );
        refalrts::link_brackets( context[93], context[94] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[86];
        res = refalrts::splice_evar( res, context[69], context[70] );
        res = refalrts::splice_evar( res, context[90], context[94] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoOptExpr-MakeSubstitutions$1:1/4 (/7 e.Substitutions/67 )/8 (/11 e.RS$a/69 )/12 s.Mode/13 (/16 e.SentenceVars/71 )/17 (/20 e.Args/73 )/21 (/24 e.Name/75 )/25 (/28 e.Rest/77 )/29 (/32 e.LS/79 )/33 # Success/50 e.M/81 >/1
      context[67] = context[51];
      context[68] = context[52];
      context[69] = context[53];
      context[70] = context[54];
      context[71] = context[55];
      context[72] = context[56];
      context[73] = context[57];
      context[74] = context[58];
      context[75] = context[59];
      context[76] = context[60];
      context[77] = context[61];
      context[78] = context[62];
      context[79] = context[63];
      context[80] = context[64];
      context[81] = context[65];
      context[82] = context[66];
      // closed e.Substitutions as range 67
      // closed e.RS$a as range 69
      // closed e.SentenceVars as range 71
      // closed e.Args as range 73
      // closed e.Name as range 75
      // closed e.Rest as range 77
      // closed e.LS as range 79
      // closed e.M as range 81
      //DEBUG: s.Mode: 13
      //DEBUG: e.Substitutions: 67
      //DEBUG: e.RS$a: 69
      //DEBUG: e.SentenceVars: 71
      //DEBUG: e.Args: 73
      //DEBUG: e.Name: 75
      //DEBUG: e.Rest: 77
      //DEBUG: e.LS: 79
      //DEBUG: e.M: 81
      //13: s.Mode
      //67: e.Substitutions
      //69: e.RS$a
      //71: e.SentenceVars
      //73: e.Args
      //75: e.Name
      //77: e.Rest
      //79: e.LS
      //81: e.M
      //86: s.Mode

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[83]);
      refalrts::alloc_name(vm, context[85], functions[efunc_gen_DoOptExprm_MakeSubstitutions_S1B1S2C1]);
      refalrts::copy_stvar(vm, context[86], context[13]);
      refalrts::alloc_close_call(vm, context[84]);
      refalrts::push_stack( vm, context[84] );
      refalrts::push_stack( vm, context[83] );
      res = refalrts::splice_elem( res, context[84] );
      res = refalrts::splice_stvar( res, context[86] );
      res = refalrts::splice_elem( res, context[85] );
      res = refalrts::splice_elem( res, context[83] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </83 & DoOptExpr-MakeSubstitutions$1:1$2?1/87 # Drive/88 >/84
        context[85] = 0;
        context[86] = 0;
        context[87] = refalrts::call_left( context[85], context[86], context[83], context[84] );
        context[88] = refalrts::ident_left( identifiers[ident_Drive], context[85], context[86] );
        if( ! context[88] )
          continue;
        if( ! refalrts::empty_seq( context[85], context[86] ) )
          continue;
        //DEBUG: s.Mode: 13
        //DEBUG: e.Substitutions: 67
        //DEBUG: e.RS$a: 69
        //DEBUG: e.SentenceVars: 71
        //DEBUG: e.Args: 73
        //DEBUG: e.Name: 75
        //DEBUG: e.Rest: 77
        //DEBUG: e.LS: 79
        //DEBUG: e.M: 81

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.LS/79 {REMOVED TILE} # Success/50 {REMOVED TILE} </83 & DoOptExpr-MakeSubstitutions$1:1$2?1/87 # Drive/88 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoOptExpr-MakeSubstitutions$1:1$2=2/12 AsIs: s.Mode/13 AsIs: (/16 AsIs: e.SentenceVars/71 AsIs: )/17 AsIs: (/20 AsIs: e.Args/73 AsIs: )/21 AsIs: (/24 } Tile{ AsIs: e.Substitutions/67 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Name/75 } Tile{ AsIs: )/25 AsIs: (/28 AsIs: e.Rest/77 AsIs: )/29 HalfReuse: </32 } Tile{ Reuse: & Map@7/4 AsIs: (/7 } Tile{ AsIs: e.RS$a/69 } Tile{ AsIs: )/33 } Tile{ AsIs: e.M/81 } Tile{ AsIs: >/84 AsIs: >/1 ]] }
        refalrts::reinit_name(context[12], functions[efunc_gen_DoOptExprm_MakeSubstitutions_S1B1S2A2]);
        refalrts::reinit_open_call(context[32]);
        refalrts::update_name(context[4], functions[efunc_gen_Map_Z7]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[84] );
        refalrts::push_stack( vm, context[32] );
        refalrts::link_brackets( context[7], context[33] );
        refalrts::link_brackets( context[28], context[29] );
        refalrts::link_brackets( context[11], context[25] );
        refalrts::link_brackets( context[24], context[8] );
        refalrts::link_brackets( context[20], context[21] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[84];
        res = refalrts::splice_evar( res, context[81], context[82] );
        res = refalrts::splice_elem( res, context[33] );
        res = refalrts::splice_evar( res, context[69], context[70] );
        res = refalrts::splice_evar( res, context[4], context[7] );
        res = refalrts::splice_evar( res, context[25], context[32] );
        res = refalrts::splice_evar( res, context[75], context[76] );
        res = refalrts::splice_evar( res, context[8], context[11] );
        res = refalrts::splice_evar( res, context[67], context[68] );
        res = refalrts::splice_evar( res, context[12], context[24] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[83], context[84]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoOptExpr-MakeSubstitutions$1:1/4 (/7 e.Substitutions/51 )/8 (/11 e.RS$a/53 )/12 s.Mode/13 (/16 e.SentenceVars/55 )/17 (/20 e.Args/57 )/21 (/24 e.Name/59 )/25 (/28 e.Rest/61 )/29 (/32 e.LS/63 )/33 # Failure/50 >/1
    context[51] = context[34];
    context[52] = context[35];
    context[53] = context[36];
    context[54] = context[37];
    context[55] = context[38];
    context[56] = context[39];
    context[57] = context[40];
    context[58] = context[41];
    context[59] = context[42];
    context[60] = context[43];
    context[61] = context[44];
    context[62] = context[45];
    context[63] = context[46];
    context[64] = context[47];
    if( ! refalrts::ident_term( identifiers[ident_Failure], context[50] ) )
      continue;
    if( ! refalrts::empty_seq( context[48], context[49] ) )
      continue;
    // closed e.Substitutions as range 51
    // closed e.RS$a as range 53
    // closed e.SentenceVars as range 55
    // closed e.Args as range 57
    // closed e.Name as range 59
    // closed e.Rest as range 61
    // closed e.LS as range 63
    //DEBUG: s.Mode: 13
    //DEBUG: e.Substitutions: 51
    //DEBUG: e.RS$a: 53
    //DEBUG: e.SentenceVars: 55
    //DEBUG: e.Args: 57
    //DEBUG: e.Name: 59
    //DEBUG: e.Rest: 61
    //DEBUG: e.LS: 63

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.RS$a/53 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.LS/63 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoOptExpr-MakeSubstitutions/12 AsIs: s.Mode/13 AsIs: (/16 AsIs: e.SentenceVars/55 AsIs: )/17 AsIs: (/20 AsIs: e.Args/57 AsIs: )/21 AsIs: (/24 } Tile{ AsIs: e.Substitutions/51 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ HalfReuse: # Function/4 AsIs: (/7 } Tile{ HalfReuse: </33 HalfReuse: & RemainderFuncIncName/50 } Tile{ AsIs: e.Name/59 } Tile{ AsIs: >/1 } Tile{ AsIs: )/25 HalfReuse: # Sentences/28 AsIs: e.Rest/61 AsIs: )/29 HalfReuse: >/32 } Tile{ ]] }
    refalrts::reinit_name(context[12], functions[efunc_DoOptExprm_MakeSubstitutions]);
    refalrts::reinit_ident(context[4], identifiers[ident_Function]);
    refalrts::reinit_open_call(context[33]);
    refalrts::reinit_name(context[50], functions[efunc_RemainderFuncIncName]);
    refalrts::reinit_ident(context[28], identifiers[ident_Sentences]);
    refalrts::reinit_close_call(context[32]);
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[29] );
    refalrts::link_brackets( context[7], context[25] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[33] );
    refalrts::link_brackets( context[24], context[8] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[32] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[59], context[60] );
    res = refalrts::splice_evar( res, context[33], context[50] );
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[12], context[24] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptExpr-MakeSubstitutions$1:1/4 (/7 e.Substitutions/5 )/8 (/11 e.RS$a/9 )/12 s.Mode/13 (/16 e.SentenceVars/14 )/17 (/20 e.Args/18 )/21 (/24 e.Name/22 )/25 (/28 e.Rest/26 )/29 (/32 e.LS/30 )/33 e.Other/2 >/1
  // closed e.Substitutions as range 5
  // closed e.RS$a as range 9
  // closed e.SentenceVars as range 14
  // closed e.Args as range 18
  // closed e.Name as range 22
  // closed e.Rest as range 26
  // closed e.LS as range 30
  // closed e.Other as range 2
  //DEBUG: s.Mode: 13
  //DEBUG: e.Substitutions: 5
  //DEBUG: e.RS$a: 9
  //DEBUG: e.SentenceVars: 14
  //DEBUG: e.Args: 18
  //DEBUG: e.Name: 22
  //DEBUG: e.Rest: 26
  //DEBUG: e.LS: 30
  //DEBUG: e.Other: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} & DoOptExpr-MakeSubstitutions$1:1/4 (/7 {REMOVED TILE} {REMOVED TILE} s.Mode/13 (/16 e.SentenceVars/14 )/17 (/20 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Other/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Substitutions/5 } Tile{ AsIs: </0 } Tile{ HalfReuse: & MakeColdSolution@1/21 AsIs: (/24 AsIs: e.Name/22 AsIs: )/25 AsIs: (/28 } Tile{ AsIs: e.LS/30 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.RS$a/9 AsIs: )/12 } Tile{ AsIs: (/32 } Tile{ AsIs: e.Rest/26 } Tile{ AsIs: )/33 } Tile{ AsIs: e.Args/18 } Tile{ AsIs: >/1 ]] }
  refalrts::reinit_name(context[21], functions[efunc_gen_MakeColdSolution_Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[32], context[33] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[28], context[8] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_elem( res, context[33] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_elem( res, context[32] );
  res = refalrts::splice_evar( res, context[8], context[12] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  res = refalrts::splice_evar( res, context[21], context[28] );
  res = refalrts::splice_elem( res, context[0] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptExprm_MakeSubstitutions_S1B1("DoOptExpr-MakeSubstitutions$1:1", COOKIE1_, COOKIE2_, func_gen_DoOptExprm_MakeSubstitutions_S1B1);


static refalrts::FnResult func_DoOptExprm_MakeSubstitutions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 88 elems
  refalrts::Iter context[88];
  refalrts::zeros( context, 88 );
  // </0 & DoOptExpr-MakeSubstitutions/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoOptExpr-MakeSubstitutions/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 t.new5/18 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  context[19] = refalrts::tvar_left( context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & DoOptExpr-MakeSubstitutions/4 s.new6/5 (/8 e.new11/20 )/9 (/12 e.new12/22 )/13 (/16 e.new13/24 )/17 (/18 # Function/28 (/31 e.new7/29 )/32 # Sentences/33 (/36 (/40 e.new8/38 )/41 (/44 e.new9/42 )/45 )/37 e.new10/26 )/19 >/1
    context[20] = context[6];
    context[21] = context[7];
    context[22] = context[10];
    context[23] = context[11];
    context[24] = context[14];
    context[25] = context[15];
    context[26] = 0;
    context[27] = 0;
    if( ! refalrts::brackets_term( context[26], context[27], context[18] ) )
      continue;
    context[28] = refalrts::ident_left( identifiers[ident_Function], context[26], context[27] );
    if( ! context[28] )
      continue;
    context[29] = 0;
    context[30] = 0;
    context[31] = refalrts::brackets_left( context[29], context[30], context[26], context[27] );
    if( ! context[31] )
      continue;
    refalrts::bracket_pointers(context[31], context[32]);
    context[33] = refalrts::ident_left( identifiers[ident_Sentences], context[26], context[27] );
    if( ! context[33] )
      continue;
    context[34] = 0;
    context[35] = 0;
    context[36] = refalrts::brackets_left( context[34], context[35], context[26], context[27] );
    if( ! context[36] )
      continue;
    refalrts::bracket_pointers(context[36], context[37]);
    context[38] = 0;
    context[39] = 0;
    context[40] = refalrts::brackets_left( context[38], context[39], context[34], context[35] );
    if( ! context[40] )
      continue;
    refalrts::bracket_pointers(context[40], context[41]);
    context[42] = 0;
    context[43] = 0;
    context[44] = refalrts::brackets_left( context[42], context[43], context[34], context[35] );
    if( ! context[44] )
      continue;
    refalrts::bracket_pointers(context[44], context[45]);
    if( ! refalrts::empty_seq( context[34], context[35] ) )
      continue;
    // closed e.new11 as range 20
    // closed e.new12 as range 22
    // closed e.new13 as range 24
    // closed e.new7 as range 29
    // closed e.new8 as range 38
    // closed e.new9 as range 42
    // closed e.new10 as range 26
    do {
      // </0 & DoOptExpr-MakeSubstitutions/4 s.Mode/5 (/8 e.SentenceVars/46 )/9 (/12 e.Args/48 )/13 (/16 e.Substitutions/50 )/17 (/18 # Function/28 (/31 e.Name/52 )/32 # Sentences/33 (/36 (/40 e.LS/54 )/41 (/44 (/62 # CallBrackets/64 (/67 # Symbol/69 # Name/70 '_'/71 '_'/72 'S'/73 't'/74 'e'/75 'p'/76 '-'/77 'D'/78 'r'/79 'o'/80 'p'/81 )/68 )/63 e./56 )/45 )/37 e.Rest/58 )/19 >/1
      context[46] = context[20];
      context[47] = context[21];
      context[48] = context[22];
      context[49] = context[23];
      context[50] = context[24];
      context[51] = context[25];
      context[52] = context[29];
      context[53] = context[30];
      context[54] = context[38];
      context[55] = context[39];
      context[56] = context[42];
      context[57] = context[43];
      context[58] = context[26];
      context[59] = context[27];
      context[60] = 0;
      context[61] = 0;
      context[62] = refalrts::brackets_left( context[60], context[61], context[56], context[57] );
      if( ! context[62] )
        continue;
      refalrts::bracket_pointers(context[62], context[63]);
      context[64] = refalrts::ident_left( identifiers[ident_CallBrackets], context[60], context[61] );
      if( ! context[64] )
        continue;
      context[65] = 0;
      context[66] = 0;
      context[67] = refalrts::brackets_left( context[65], context[66], context[60], context[61] );
      if( ! context[67] )
        continue;
      refalrts::bracket_pointers(context[67], context[68]);
      context[69] = refalrts::ident_left( identifiers[ident_Symbol], context[65], context[66] );
      if( ! context[69] )
        continue;
      context[70] = refalrts::ident_left( identifiers[ident_Name], context[65], context[66] );
      if( ! context[70] )
        continue;
      context[71] = refalrts::char_left( '_', context[65], context[66] );
      if( ! context[71] )
        continue;
      context[72] = refalrts::char_left( '_', context[65], context[66] );
      if( ! context[72] )
        continue;
      context[73] = refalrts::char_left( 'S', context[65], context[66] );
      if( ! context[73] )
        continue;
      context[74] = refalrts::char_left( 't', context[65], context[66] );
      if( ! context[74] )
        continue;
      context[75] = refalrts::char_left( 'e', context[65], context[66] );
      if( ! context[75] )
        continue;
      context[76] = refalrts::char_left( 'p', context[65], context[66] );
      if( ! context[76] )
        continue;
      context[77] = refalrts::char_left( '-', context[65], context[66] );
      if( ! context[77] )
        continue;
      context[78] = refalrts::char_left( 'D', context[65], context[66] );
      if( ! context[78] )
        continue;
      context[79] = refalrts::char_left( 'r', context[65], context[66] );
      if( ! context[79] )
        continue;
      context[80] = refalrts::char_left( 'o', context[65], context[66] );
      if( ! context[80] )
        continue;
      context[81] = refalrts::char_left( 'p', context[65], context[66] );
      if( ! context[81] )
        continue;
      if( ! refalrts::empty_seq( context[65], context[66] ) )
        continue;
      if( ! refalrts::empty_seq( context[60], context[61] ) )
        continue;
      // closed e.SentenceVars as range 46
      // closed e.Args as range 48
      // closed e.Substitutions as range 50
      // closed e.Name as range 52
      // closed e.LS as range 54
      // closed e. as range 56
      // closed e.Rest as range 58
      //DEBUG: s.Mode: 5
      //DEBUG: e.SentenceVars: 46
      //DEBUG: e.Args: 48
      //DEBUG: e.Substitutions: 50
      //DEBUG: e.Name: 52
      //DEBUG: e.LS: 54
      //DEBUG: e.: 56
      //DEBUG: e.Rest: 58

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Name/70 '_'/71 '_'/72 {REMOVED TILE} 'e'/75 'p'/76 '-'/77 'D'/78 'r'/79 'o'/80 'p'/81 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoOptExpr-MakeSubstitutions$1:1/73 HalfReuse: (/74 } Tile{ AsIs: e.Substitutions/50 } Tile{ AsIs: )/68 HalfReuse: (/63 } Tile{ AsIs: e./56 } Tile{ HalfReuse: )/4 AsIs: s.Mode/5 AsIs: (/8 AsIs: e.SentenceVars/46 AsIs: )/9 AsIs: (/12 AsIs: e.Args/48 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Name/52 } Tile{ AsIs: )/45 HalfReuse: (/37 AsIs: e.Rest/58 AsIs: )/19 HalfReuse: (/1 } e.LS/54/82 Tile{ AsIs: )/17 HalfReuse: </18 HalfReuse: & Solve/28 AsIs: (/31 } e.SentenceVars/46/84 Tile{ AsIs: )/32 } Tile{ AsIs: (/67 HalfReuse: (/69 } e.Args/48/86 Tile{ HalfReuse: )/33 HalfReuse: ':'/36 AsIs: (/40 AsIs: e.LS/54 AsIs: )/41 HalfReuse: )/44 HalfReuse: >/62 HalfReuse: >/64 } Tile{ ]] }
      refalrts::copy_evar(vm, context[82], context[83], context[54], context[55]);
      refalrts::copy_evar(vm, context[84], context[85], context[46], context[47]);
      refalrts::copy_evar(vm, context[86], context[87], context[48], context[49]);
      refalrts::reinit_name(context[73], functions[efunc_gen_DoOptExprm_MakeSubstitutions_S1B1]);
      refalrts::reinit_open_bracket(context[74]);
      refalrts::reinit_open_bracket(context[63]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_open_bracket(context[37]);
      refalrts::reinit_open_bracket(context[1]);
      refalrts::reinit_open_call(context[18]);
      refalrts::reinit_name(context[28], functions[efunc_Solve]);
      refalrts::reinit_open_bracket(context[69]);
      refalrts::reinit_close_bracket(context[33]);
      refalrts::reinit_char(context[36], ':');
      refalrts::reinit_close_bracket(context[44]);
      refalrts::reinit_close_call(context[62]);
      refalrts::reinit_close_call(context[64]);
      refalrts::push_stack( vm, context[64] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[62] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[67], context[44] );
      refalrts::link_brackets( context[40], context[41] );
      refalrts::link_brackets( context[69], context[33] );
      refalrts::link_brackets( context[31], context[32] );
      refalrts::link_brackets( context[1], context[17] );
      refalrts::link_brackets( context[37], context[19] );
      refalrts::link_brackets( context[16], context[45] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[63], context[4] );
      refalrts::link_brackets( context[74], context[68] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[33], context[64] );
      res = refalrts::splice_evar( res, context[86], context[87] );
      res = refalrts::splice_evar( res, context[67], context[69] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_evar( res, context[84], context[85] );
      res = refalrts::splice_evar( res, context[17], context[31] );
      res = refalrts::splice_evar( res, context[82], context[83] );
      res = refalrts::splice_evar( res, context[45], context[1] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[4], context[16] );
      res = refalrts::splice_evar( res, context[56], context[57] );
      res = refalrts::splice_evar( res, context[68], context[63] );
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_evar( res, context[73], context[74] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoOptExpr-MakeSubstitutions/4 s.Mode/5 (/8 e.SentenceVars/46 )/9 (/12 e.Args/48 )/13 (/16 e.Substitutions/50 )/17 (/18 # Function/28 (/31 e.Name/52 )/32 # Sentences/33 (/36 (/40 e.LS/54 )/41 (/44 e.RS/56 )/45 )/37 e.Rest/58 )/19 >/1
    context[46] = context[20];
    context[47] = context[21];
    context[48] = context[22];
    context[49] = context[23];
    context[50] = context[24];
    context[51] = context[25];
    context[52] = context[29];
    context[53] = context[30];
    context[54] = context[38];
    context[55] = context[39];
    context[56] = context[42];
    context[57] = context[43];
    context[58] = context[26];
    context[59] = context[27];
    // closed e.SentenceVars as range 46
    // closed e.Args as range 48
    // closed e.Substitutions as range 50
    // closed e.Name as range 52
    // closed e.LS as range 54
    // closed e.RS as range 56
    // closed e.Rest as range 58
    //DEBUG: s.Mode: 5
    //DEBUG: e.SentenceVars: 46
    //DEBUG: e.Args: 48
    //DEBUG: e.Substitutions: 50
    //DEBUG: e.Name: 52
    //DEBUG: e.LS: 54
    //DEBUG: e.RS: 56
    //DEBUG: e.Rest: 58

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & DoOptExpr-MakeSubstitutions$1:1/60 (/61 Tile{ AsIs: e.Substitutions/50 } )/62 (/63 Tile{ AsIs: e.RS/56 } Tile{ HalfReuse: )/4 AsIs: s.Mode/5 AsIs: (/8 AsIs: e.SentenceVars/46 AsIs: )/9 AsIs: (/12 AsIs: e.Args/48 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Name/52 } Tile{ AsIs: )/45 HalfReuse: (/37 AsIs: e.Rest/58 AsIs: )/19 HalfReuse: (/1 } e.LS/54/64 Tile{ AsIs: )/17 HalfReuse: </18 HalfReuse: & Solve/28 AsIs: (/31 } e.SentenceVars/46/66 Tile{ AsIs: )/32 } (/68 (/69 e.Args/48/70 Tile{ HalfReuse: )/33 HalfReuse: ':'/36 AsIs: (/40 AsIs: e.LS/54 AsIs: )/41 HalfReuse: )/44 } >/72 >/73 Tile{ ]] }
    refalrts::alloc_name(vm, context[60], functions[efunc_gen_DoOptExprm_MakeSubstitutions_S1B1]);
    refalrts::alloc_open_bracket(vm, context[61]);
    refalrts::alloc_close_bracket(vm, context[62]);
    refalrts::alloc_open_bracket(vm, context[63]);
    refalrts::copy_evar(vm, context[64], context[65], context[54], context[55]);
    refalrts::copy_evar(vm, context[66], context[67], context[46], context[47]);
    refalrts::alloc_open_bracket(vm, context[68]);
    refalrts::alloc_open_bracket(vm, context[69]);
    refalrts::copy_evar(vm, context[70], context[71], context[48], context[49]);
    refalrts::alloc_close_call(vm, context[72]);
    refalrts::alloc_close_call(vm, context[73]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_bracket(context[37]);
    refalrts::reinit_open_bracket(context[1]);
    refalrts::reinit_open_call(context[18]);
    refalrts::reinit_name(context[28], functions[efunc_Solve]);
    refalrts::reinit_close_bracket(context[33]);
    refalrts::reinit_char(context[36], ':');
    refalrts::reinit_close_bracket(context[44]);
    refalrts::push_stack( vm, context[73] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[72] );
    refalrts::push_stack( vm, context[18] );
    refalrts::link_brackets( context[68], context[44] );
    refalrts::link_brackets( context[40], context[41] );
    refalrts::link_brackets( context[69], context[33] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::link_brackets( context[1], context[17] );
    refalrts::link_brackets( context[37], context[19] );
    refalrts::link_brackets( context[16], context[45] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[63], context[4] );
    refalrts::link_brackets( context[61], context[62] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[72], context[73] );
    res = refalrts::splice_evar( res, context[33], context[44] );
    res = refalrts::splice_evar( res, context[70], context[71] );
    res = refalrts::splice_evar( res, context[68], context[69] );
    res = refalrts::splice_elem( res, context[32] );
    res = refalrts::splice_evar( res, context[66], context[67] );
    res = refalrts::splice_evar( res, context[17], context[31] );
    res = refalrts::splice_evar( res, context[64], context[65] );
    res = refalrts::splice_evar( res, context[45], context[1] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_evar( res, context[4], context[16] );
    res = refalrts::splice_evar( res, context[56], context[57] );
    res = refalrts::splice_evar( res, context[62], context[63] );
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_evar( res, context[60], context[61] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptExpr-MakeSubstitutions/4 s.Mode/5 (/8 e.SentenceVars/6 )/9 (/12 e.Args/10 )/13 (/16 e.Substitutions/14 )/17 t.RestFunction/18 >/1
  // closed e.SentenceVars as range 6
  // closed e.Args as range 10
  // closed e.Substitutions as range 14
  //DEBUG: t.RestFunction: 18
  //DEBUG: s.Mode: 5
  //DEBUG: e.SentenceVars: 6
  //DEBUG: e.Args: 10
  //DEBUG: e.Substitutions: 14

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} s.Mode/5 (/8 e.SentenceVars/6 )/9 (/12 {REMOVED TILE} )/13 (/16 {REMOVED TILE} )/17 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Substitutions/14 } Tile{ AsIs: </0 Reuse: & MakeColdSolution/4 } Tile{ AsIs: t.RestFunction/18 } Tile{ AsIs: e.Args/10 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_MakeColdSolution]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoOptExprm_MakeSubstitutions("DoOptExpr-MakeSubstitutions", COOKIE1_, COOKIE2_, func_DoOptExprm_MakeSubstitutions);


static refalrts::FnResult func_Cleanupm_Stepm_Drop(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & Cleanup-Step-Drop/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Cleanup-Step-Drop/4 (/9 # CallBrackets/11 (/14 # Symbol/16 # Name/17 '_'/18 '_'/19 'S'/20 't'/21 'e'/22 'p'/23 '-'/24 'D'/25 'r'/26 'o'/27 'p'/28 )/15 )/10 e.RS/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = refalrts::ident_left( identifiers[ident_CallBrackets], context[7], context[8] );
    if( ! context[11] )
      continue;
    context[12] = 0;
    context[13] = 0;
    context[14] = refalrts::brackets_left( context[12], context[13], context[7], context[8] );
    if( ! context[14] )
      continue;
    refalrts::bracket_pointers(context[14], context[15]);
    context[16] = refalrts::ident_left( identifiers[ident_Symbol], context[12], context[13] );
    if( ! context[16] )
      continue;
    context[17] = refalrts::ident_left( identifiers[ident_Name], context[12], context[13] );
    if( ! context[17] )
      continue;
    context[18] = refalrts::char_left( '_', context[12], context[13] );
    if( ! context[18] )
      continue;
    context[19] = refalrts::char_left( '_', context[12], context[13] );
    if( ! context[19] )
      continue;
    context[20] = refalrts::char_left( 'S', context[12], context[13] );
    if( ! context[20] )
      continue;
    context[21] = refalrts::char_left( 't', context[12], context[13] );
    if( ! context[21] )
      continue;
    context[22] = refalrts::char_left( 'e', context[12], context[13] );
    if( ! context[22] )
      continue;
    context[23] = refalrts::char_left( 'p', context[12], context[13] );
    if( ! context[23] )
      continue;
    context[24] = refalrts::char_left( '-', context[12], context[13] );
    if( ! context[24] )
      continue;
    context[25] = refalrts::char_left( 'D', context[12], context[13] );
    if( ! context[25] )
      continue;
    context[26] = refalrts::char_left( 'r', context[12], context[13] );
    if( ! context[26] )
      continue;
    context[27] = refalrts::char_left( 'o', context[12], context[13] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 'p', context[12], context[13] );
    if( ! context[28] )
      continue;
    if( ! refalrts::empty_seq( context[12], context[13] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.RS as range 5
    //DEBUG: e.RS: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Cleanup-Step-Drop/4 (/9 # CallBrackets/11 (/14 # Symbol/16 # Name/17 '_'/18 '_'/19 'S'/20 't'/21 'e'/22 'p'/23 '-'/24 'D'/25 'r'/26 'o'/27 'p'/28 )/15 )/10 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.RS/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Cleanup-Step-Drop/4 e.RS/2 >/1
  // closed e.RS as range 2
  //DEBUG: e.RS: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Cleanup-Step-Drop/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.RS/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Cleanupm_Stepm_Drop("Cleanup-Step-Drop", COOKIE1_, COOKIE2_, func_Cleanupm_Stepm_Drop);


static refalrts::FnResult func_DropLeft(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & DropLeft/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DropLeft/4 e.new1/2 s.new2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 2
  do {
    // </0 & DropLeft/4 e.List/6 0/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::number_term( 0UL, context[5] ) )
      continue;
    // closed e.List as range 6
    //DEBUG: e.List: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DropLeft/4 {REMOVED TILE} 0/5 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.List/6 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DropLeft/4 t.Head/6 e.Tail/2 s.N/5 >/1
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail as range 2
  //DEBUG: s.N: 5
  //DEBUG: t.Head: 6
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} t.Head/6 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & DropLeft/4 } Tile{ AsIs: e.Tail/2 } </8 & Sub/9 Tile{ AsIs: s.N/5 } 1/10 >/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_Sub]);
  refalrts::alloc_number(vm, context[10], 1UL);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DropLeft("DropLeft", COOKIE1_, COOKIE2_, func_DropLeft);


static refalrts::FnResult func_FindOptInfo(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & FindOptInfo/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FindOptInfo/4 e.new1/2 (/7 e.new2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 2
  // closed e.new2 as range 5
  do {
    // </0 & FindOptInfo/4 e.new3/9 (/7 e.new4/11 '*'/14 s.new5/13 )/8 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = context[5];
    context[12] = context[6];
    // closed e.new3 as range 9
    if( ! refalrts::svar_right( context[13], context[11], context[12] ) )
      continue;
    context[14] = refalrts::char_right( '*', context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & FindOptInfo/4 e.OptFuncs/15 (/7 e./17 # SUF/19 '*'/14 s.N/13 )/8 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = refalrts::ident_right( identifiers[ident_SUF], context[17], context[18] );
      if( ! context[19] )
        continue;
      // closed e.OptFuncs as range 15
      // closed e. as range 17
      //DEBUG: s.N: 13
      //DEBUG: e.OptFuncs: 15
      //DEBUG: e.: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.N/13 )/8 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </1 } Tile{ HalfReuse: & FindOptInfo-Aux@1/0 HalfReuse: (/4 AsIs: e.OptFuncs/15 HalfReuse: )/7 AsIs: e./17 HalfReuse: s.N13 /19 HalfReuse: >/14 } Tile{ ]] }
      refalrts::reinit_open_call(context[1]);
      refalrts::reinit_name(context[0], functions[efunc_gen_FindOptInfom_Aux_Z1]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::reinit_svar( context[19], context[13] );
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[1] );
      refalrts::link_brackets( context[4], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[0], context[14] );
      res = refalrts::splice_elem( res, context[1] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & FindOptInfo/4 e.OptFuncs/15 (/7 e.0/17 '*'/14 s.N/13 )/8 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.OptFuncs as range 15
    // closed e.0 as range 17
    //DEBUG: s.N: 13
    //DEBUG: e.OptFuncs: 15
    //DEBUG: e.0: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.N/13 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </8 } Tile{ HalfReuse: & FindOptInfo-Aux@2/0 HalfReuse: (/4 AsIs: e.OptFuncs/15 HalfReuse: )/7 AsIs: e.0/17 HalfReuse: s.N13 /14 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_name(context[0], functions[efunc_gen_FindOptInfom_Aux_Z2]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_close_bracket(context[7]);
    refalrts::reinit_svar( context[14], context[13] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[8] );
    refalrts::link_brackets( context[4], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[0], context[14] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindOptInfo/4 e.OptFuncs/2 (/7 e.Name/5 )/8 >/1
  // closed e.OptFuncs as range 2
  // closed e.Name as range 5
  //DEBUG: e.OptFuncs: 2
  //DEBUG: e.Name: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </1 } Tile{ HalfReuse: & FindOptInfo-Aux@3/0 HalfReuse: (/4 AsIs: e.OptFuncs/2 HalfReuse: )/7 AsIs: e.Name/5 HalfReuse: >/8 } Tile{ ]] }
  refalrts::reinit_open_call(context[1]);
  refalrts::reinit_name(context[0], functions[efunc_gen_FindOptInfom_Aux_Z3]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_close_bracket(context[7]);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[1] );
  refalrts::link_brackets( context[4], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_elem( res, context[1] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FindOptInfo("FindOptInfo", COOKIE1_, COOKIE2_, func_FindOptInfo);


static refalrts::FnResult func_gen_FindOptInfom_Aux_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & FindOptInfo-Aux$2=1/4 (/7 e.OptFuncs-B/5 )/8 s.Mode/9 (/12 e.LookupName/10 )/13 (/16 e.Body/14 )/17 (/20 e.OptFuncs-E/18 )/21 (/24 e.Name/22 )/25 s.Drop/26 # Sentences/27 e.Sentences/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.OptFuncs-B as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.LookupName as range 10
  // closed e.Body as range 14
  // closed e.OptFuncs-E as range 18
  // closed e.Name as range 22
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[27] = refalrts::ident_left( identifiers[ident_Sentences], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  // closed e.Sentences as range 2
  //DEBUG: e.OptFuncs-B: 5
  //DEBUG: s.Mode: 9
  //DEBUG: e.LookupName: 10
  //DEBUG: e.Body: 14
  //DEBUG: e.OptFuncs-E: 18
  //DEBUG: e.Name: 22
  //DEBUG: s.Drop: 26
  //DEBUG: e.Sentences: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Drop/26 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.OptFuncs-B/5 } Tile{ HalfReuse: (/8 AsIs: s.Mode/9 AsIs: (/12 AsIs: e.LookupName/10 AsIs: )/13 } Tile{ AsIs: e.Body/14 } Tile{ AsIs: )/17 } Tile{ AsIs: e.OptFuncs-E/18 } Tile{ AsIs: (/20 } Tile{ HalfReuse: s.Mode9 /21 AsIs: (/24 AsIs: e.Name/22 AsIs: )/25 } Tile{ HalfReuse: # Sentences/16 } Tile{ AsIs: </0 } Tile{ HalfReuse: & DropLeft/27 AsIs: e.Sentences/2 HalfReuse: s.Drop26 /1 } Tile{ HalfReuse: >/4 HalfReuse: )/7 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_svar( context[21], context[9] );
  refalrts::reinit_ident(context[16], identifiers[ident_Sentences]);
  refalrts::reinit_name(context[27], functions[efunc_DropLeft]);
  refalrts::reinit_svar( context[1], context[26] );
  refalrts::reinit_close_call(context[4]);
  refalrts::reinit_close_bracket(context[7]);
  refalrts::link_brackets( context[20], context[7] );
  refalrts::push_stack( vm, context[4] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[8], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[4], context[7] );
  res = refalrts::splice_evar( res, context[27], context[1] );
  res = refalrts::splice_elem( res, context[0] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[21], context[25] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[8], context[13] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptInfom_Aux_S2A1("FindOptInfo-Aux$2=1", COOKIE1_, COOKIE2_, func_gen_FindOptInfom_Aux_S2A1);


static refalrts::FnResult func_FindOptInfom_Aux(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & FindOptInfo-Aux/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FindOptInfo-Aux/4 e.new1/2 (/12 e.new2/10 )/13 (/8 e.new3/6 )/9 s.new4/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_right( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_right( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new1 as range 2
  // closed e.new2 as range 10
  // closed e.new3 as range 6
  do {
    // </0 & FindOptInfo-Aux/4 e.OptFuncs-B/20 (/26 # Intrinsic/28 (/31 e.LookupName/33 )/32 e.Body/24 )/27 e.OptFuncs-E/22 (/12 e.Name/16 )/13 (/8 e.LookupName/18 )/9 s._/5 >/1
    context[14] = context[2];
    context[15] = context[3];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[6];
    context[19] = context[7];
    // closed e.Name as range 16
    // closed e.LookupName as range 18
    context[20] = 0;
    context[21] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[22] = context[14];
      context[23] = context[15];
      context[24] = 0;
      context[25] = 0;
      context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
      if( ! context[26] )
        continue;
      refalrts::bracket_pointers(context[26], context[27]);
      context[28] = refalrts::ident_left( identifiers[ident_Intrinsic], context[24], context[25] );
      if( ! context[28] )
        continue;
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_left( context[29], context[30], context[24], context[25] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      if( ! refalrts::repeated_evar_left( vm, context[33], context[34], context[18], context[19], context[29], context[30] ) )
        continue;
      if( ! refalrts::empty_seq( context[29], context[30] ) )
        continue;
      // closed e.Body as range 24
      // closed e.OptFuncs-E as range 22
      //DEBUG: s._: 5
      //DEBUG: e.Name: 16
      //DEBUG: e.LookupName: 18
      //DEBUG: e.OptFuncs-B: 20
      //DEBUG: e.Body: 24
      //DEBUG: e.OptFuncs-E: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & FindOptInfo-Aux/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.LookupName/18 {REMOVED TILE} s._/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.OptFuncs-B/20 } Tile{ AsIs: (/26 AsIs: # Intrinsic/28 AsIs: (/31 AsIs: e.LookupName/33 AsIs: )/32 AsIs: e.Body/24 AsIs: )/27 AsIs: e.OptFuncs-E/22 AsIs: (/12 } Tile{ HalfReuse: # Intrinsic/13 AsIs: (/8 } Tile{ AsIs: e.Name/16 } Tile{ AsIs: )/9 } e.Body/24/35 Tile{ HalfReuse: )/1 ]] }
      refalrts::copy_evar(vm, context[35], context[36], context[24], context[25]);
      refalrts::reinit_ident(context[13], identifiers[ident_Intrinsic]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[12], context[1] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[26], context[27] );
      refalrts::link_brackets( context[31], context[32] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[13], context[8] );
      res = refalrts::splice_evar( res, context[26], context[12] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[20], context[21], context[14], context[15] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindOptInfo-Aux/4 e.OptFuncs-B/14 (/20 s.Mode/22 (/25 e.LookupName/27 )/26 e.Body/18 )/21 e.OptFuncs-E/16 (/12 e.Name/10 )/13 (/8 e.LookupName/6 )/9 s.Drop/5 >/1
  // closed e.Name as range 10
  // closed e.LookupName as range 6
  context[14] = 0;
  context[15] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[16] = context[2];
    context[17] = context[3];
    context[18] = 0;
    context[19] = 0;
    context[20] = refalrts::brackets_left( context[18], context[19], context[16], context[17] );
    if( ! context[20] )
      continue;
    refalrts::bracket_pointers(context[20], context[21]);
    // closed e.OptFuncs-E as range 16
    if( ! refalrts::svar_left( context[22], context[18], context[19] ) )
      continue;
    context[23] = 0;
    context[24] = 0;
    context[25] = refalrts::brackets_left( context[23], context[24], context[18], context[19] );
    if( ! context[25] )
      continue;
    refalrts::bracket_pointers(context[25], context[26]);
    if( ! refalrts::repeated_evar_left( vm, context[27], context[28], context[6], context[7], context[23], context[24] ) )
      continue;
    if( ! refalrts::empty_seq( context[23], context[24] ) )
      continue;
    // closed e.Body as range 18
    //DEBUG: s.Drop: 5
    //DEBUG: e.Name: 10
    //DEBUG: e.LookupName: 6
    //DEBUG: e.OptFuncs-B: 14
    //DEBUG: e.OptFuncs-E: 16
    //DEBUG: s.Mode: 22
    //DEBUG: e.Body: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.LookupName/6 {REMOVED TILE} s.Drop/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } </29 Tile{ HalfReuse: & FindOptInfo-Aux$2=1/0 HalfReuse: (/4 AsIs: e.OptFuncs-B/14 HalfReuse: )/20 AsIs: s.Mode/22 AsIs: (/25 AsIs: e.LookupName/27 AsIs: )/26 } (/30 Tile{ AsIs: e.Body/18 } Tile{ AsIs: )/21 } (/31 Tile{ AsIs: e.OptFuncs-E/16 } Tile{ AsIs: )/9 } Tile{ AsIs: (/12 AsIs: e.Name/10 AsIs: )/13 HalfReuse: s.Drop5 /8 } e.Body/18/32 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_open_bracket(vm, context[30]);
    refalrts::alloc_open_bracket(vm, context[31]);
    refalrts::copy_evar(vm, context[32], context[33], context[18], context[19]);
    refalrts::reinit_name(context[0], functions[efunc_gen_FindOptInfom_Aux_S2A1]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_close_bracket(context[20]);
    refalrts::reinit_svar( context[8], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[29] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[31], context[9] );
    refalrts::link_brackets( context[30], context[21] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[4], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[12], context[8] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_elem( res, context[31] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[0], context[26] );
    res = refalrts::splice_elem( res, context[29] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[14], context[15], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_FindOptInfom_Aux("FindOptInfo-Aux", COOKIE1_, COOKIE2_, func_FindOptInfom_Aux);


static refalrts::FnResult func_CutSUF(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & CutSUF/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & CutSUF/4 e.Prefix/5 # SUF/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = refalrts::ident_right( identifiers[ident_SUF], context[5], context[6] );
    if( ! context[7] )
      continue;
    // closed e.Prefix as range 5
    //DEBUG: e.Prefix: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CutSUF/4 {REMOVED TILE} # SUF/7 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Prefix/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CutSUF/4 e.Prefix/2 >/1
  // closed e.Prefix as range 2
  //DEBUG: e.Prefix: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CutSUF/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Prefix/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CutSUF("CutSUF", COOKIE1_, COOKIE2_, func_CutSUF);


static refalrts::FnResult func_FindOptimizedCall(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & FindOptimizedCall/4 (/7 e.OptFuncNames/5 )/8 e.Expr/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.OptFuncNames as range 5
  // closed e.Expr as range 2
  //DEBUG: e.OptFuncNames: 5
  //DEBUG: e.Expr: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@1/4 AsIs: (/7 AsIs: e.OptFuncNames/5 HalfReuse: # None/8 } )/9 (/10 )/11 Tile{ AsIs: e.Expr/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
  refalrts::reinit_ident(context[8], identifiers[ident_None]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::link_brackets( context[7], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FindOptimizedCall("FindOptimizedCall", COOKIE1_, COOKIE2_, func_FindOptimizedCall);


static refalrts::FnResult func_gen_FindOptimizedCallm_Term_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & FindOptimizedCall-Term$1=1/4 (/7 e.OptFuncNames$a/5 t.Found/9 )/8 e.Expr$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Expr$a as range 2
  context[10] = refalrts::tvar_right( context[9], context[5], context[6] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.OptFuncNames$a as range 5
  //DEBUG: e.Expr$a: 2
  //DEBUG: t.Found: 9
  //DEBUG: e.OptFuncNames$a: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.OptFuncNames$a/5 AsIs: t.Found/9 AsIs: )/8 } Tile{ HalfReuse: (/0 HalfReuse: # Brackets/4 } Tile{ AsIs: e.Expr$a/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Brackets]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptimizedCallm_Term_S1A1("FindOptimizedCall-Term$1=1", COOKIE1_, COOKIE2_, func_gen_FindOptimizedCallm_Term_S1A1);


static refalrts::FnResult func_gen_FindOptimizedCallm_Term_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & FindOptimizedCall-Term$2=1/4 (/7 e.Name/5 )/8 (/11 e.OptFuncNames$a/9 t.Found/13 )/12 e.Expr$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Name as range 5
  // closed e.Expr$a as range 2
  context[14] = refalrts::tvar_right( context[13], context[9], context[10] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.OptFuncNames$a as range 9
  //DEBUG: e.Name: 5
  //DEBUG: e.Expr$a: 2
  //DEBUG: t.Found: 13
  //DEBUG: e.OptFuncNames$a: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.OptFuncNames$a/9 AsIs: t.Found/13 AsIs: )/12 } Tile{ HalfReuse: (/0 HalfReuse: # ADT-Brackets/4 AsIs: (/7 AsIs: e.Name/5 AsIs: )/8 } Tile{ AsIs: e.Expr$a/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_ADTm_Brackets]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptimizedCallm_Term_S2A1("FindOptimizedCall-Term$2=1", COOKIE1_, COOKIE2_, func_gen_FindOptimizedCallm_Term_S2A1);


static refalrts::FnResult func_gen_FindOptimizedCallm_Term_S3B1S1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 49 elems
  refalrts::Iter context[49];
  refalrts::zeros( context, 49 );
  // </0 & FindOptimizedCall-Term$3:1$1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FindOptimizedCall-Term$3:1$1:1/4 s.new1/5 (/8 e.new2/6 )/9 s.new3/10 (/13 e.new4/11 )/14 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new4 as range 11
  // closed e.new5 as range 2
  do {
    // </0 & FindOptimizedCall-Term$3:1$1:1/4 s.Hash/5 (/8 e.Name/15 )/9 s.BucketSize/10 (/13 e.Arg$a/17 )/14 e.Buckets-B/21 (/27 s.Hash/29 e.OptFuncNames-B/30 (/36 s.Label/40 e.Name/38 )/37 e.OptFuncNames-E/32 )/28 e.Buckets-E/23 >/1
    context[15] = context[6];
    context[16] = context[7];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.Name as range 15
    // closed e.Arg$a as range 17
    context[21] = 0;
    context[22] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[23] = context[19];
      context[24] = context[20];
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      if( ! refalrts::repeated_stvar_left( vm, context[29], context[5], context[25], context[26] ) )
        continue;
      // closed e.Buckets-E as range 23
      context[30] = 0;
      context[31] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[32] = context[25];
        context[33] = context[26];
        context[34] = 0;
        context[35] = 0;
        context[36] = refalrts::brackets_left( context[34], context[35], context[32], context[33] );
        if( ! context[36] )
          continue;
        refalrts::bracket_pointers(context[36], context[37]);
        if( ! refalrts::repeated_evar_right( vm, context[38], context[39], context[15], context[16], context[34], context[35] ) )
          continue;
        // closed e.OptFuncNames-E as range 32
        if( ! refalrts::svar_left( context[40], context[34], context[35] ) )
          continue;
        if( ! refalrts::empty_seq( context[34], context[35] ) )
          continue;
        //DEBUG: s.Hash: 5
        //DEBUG: s.BucketSize: 10
        //DEBUG: e.Name: 15
        //DEBUG: e.Arg$a: 17
        //DEBUG: e.Buckets-B: 21
        //DEBUG: e.Buckets-E: 23
        //DEBUG: e.OptFuncNames-B: 30
        //DEBUG: e.OptFuncNames-E: 32
        //DEBUG: s.Label: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Hash/5 {REMOVED TILE} s.BucketSize/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ HalfReuse: s.BucketSize10 /14 AsIs: e.Buckets-B/21 AsIs: (/27 AsIs: s.Hash/29 } Tile{ AsIs: (/36 AsIs: s.Label/40 AsIs: e.Name/38 AsIs: )/37 } Tile{ AsIs: e.OptFuncNames-B/30 } Tile{ AsIs: e.OptFuncNames-E/32 } Tile{ AsIs: )/28 AsIs: e.Buckets-E/23 HalfReuse: (/1 } Tile{ HalfReuse: # CallBrackets/4 } Tile{ AsIs: (/13 } # Symbol/41 Tile{ HalfReuse: # Name/8 AsIs: e.Name/15 AsIs: )/9 } Tile{ AsIs: e.Arg$a/17 } )/42 )/43 (/44 # Var/45 'e'/46 # DRIVEN/47 )/48 Tile{ ]] }
        refalrts::alloc_ident(vm, context[41], identifiers[ident_Symbol]);
        refalrts::alloc_close_bracket(vm, context[42]);
        refalrts::alloc_close_bracket(vm, context[43]);
        refalrts::alloc_open_bracket(vm, context[44]);
        refalrts::alloc_ident(vm, context[45], identifiers[ident_Var]);
        refalrts::alloc_char(vm, context[46], 'e');
        refalrts::alloc_ident(vm, context[47], identifiers[ident_DRIVEN]);
        refalrts::alloc_close_bracket(vm, context[48]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_svar( context[14], context[10] );
        refalrts::reinit_open_bracket(context[1]);
        refalrts::reinit_ident(context[4], identifiers[ident_CallBrackets]);
        refalrts::reinit_ident(context[8], identifiers[ident_Name]);
        refalrts::link_brackets( context[44], context[48] );
        refalrts::link_brackets( context[0], context[43] );
        refalrts::link_brackets( context[1], context[42] );
        refalrts::link_brackets( context[13], context[9] );
        refalrts::link_brackets( context[27], context[28] );
        refalrts::link_brackets( context[36], context[37] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[42], context[48] );
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[8], context[9] );
        res = refalrts::splice_elem( res, context[41] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_elem( res, context[4] );
        res = refalrts::splice_evar( res, context[28], context[1] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[14], context[29] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[30], context[31], context[25], context[26] ) );
    } while ( refalrts::open_evar_advance( context[21], context[22], context[19], context[20] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindOptimizedCall-Term$3:1$1:1/4 s.Hash/5 (/8 e.Name/6 )/9 s.BucketSize/10 (/13 e.Arg$a/11 )/14 e.Buckets$a/2 >/1
  // closed e.Name as range 6
  // closed e.Arg$a as range 11
  // closed e.Buckets$a as range 2
  //DEBUG: s.Hash: 5
  //DEBUG: s.BucketSize: 10
  //DEBUG: e.Name: 6
  //DEBUG: e.Arg$a: 11
  //DEBUG: e.Buckets$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.Hash/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.BucketSize/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: s.BucketSize10 /4 } Tile{ AsIs: e.Buckets$a/2 } # None/15 Tile{ AsIs: )/9 } Tile{ AsIs: (/8 } # ColdCallBrackets/16 (/17 # Symbol/18 Tile{ HalfReuse: # Name/1 } Tile{ AsIs: e.Name/6 } Tile{ HalfReuse: )/13 AsIs: e.Arg$a/11 AsIs: )/14 } Tile{ ]] }
  refalrts::alloc_ident(vm, context[15], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_ColdCallBrackets]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Symbol]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_svar( context[4], context[10] );
  refalrts::reinit_ident(context[1], identifiers[ident_Name]);
  refalrts::reinit_close_bracket(context[13]);
  refalrts::link_brackets( context[8], context[14] );
  refalrts::link_brackets( context[17], context[13] );
  refalrts::link_brackets( context[0], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[16], context[18] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptimizedCallm_Term_S3B1S1B1("FindOptimizedCall-Term$3:1$1:1", COOKIE1_, COOKIE2_, func_gen_FindOptimizedCallm_Term_S3B1S1B1);


static refalrts::FnResult func_gen_FindOptimizedCallm_Term_S3B1S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & FindOptimizedCall-Term$3:1$1=2/4 (/7 e.Name/5 )/8 s.BucketSize/9 (/12 e.Arg$a/10 )/13 (/16 e.Buckets/14 )/17 s.Hash/18 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Name as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.Arg$a as range 10
  // closed e.Buckets as range 14
  if( ! refalrts::svar_left( context[18], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Name: 5
  //DEBUG: s.BucketSize: 9
  //DEBUG: e.Arg$a: 10
  //DEBUG: e.Buckets: 14
  //DEBUG: s.Hash: 18

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/17 s.Hash/18 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </16 } Tile{ HalfReuse: & FindOptimizedCall-Term$3:1$1:1/0 HalfReuse: s.Hash18 /4 AsIs: (/7 AsIs: e.Name/5 AsIs: )/8 AsIs: s.BucketSize/9 AsIs: (/12 AsIs: e.Arg$a/10 AsIs: )/13 } Tile{ AsIs: e.Buckets/14 } Tile{ AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[16]);
  refalrts::reinit_name(context[0], functions[efunc_gen_FindOptimizedCallm_Term_S3B1S1B1]);
  refalrts::reinit_svar( context[4], context[18] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[0], context[13] );
  res = refalrts::splice_elem( res, context[16] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptimizedCallm_Term_S3B1S1A2("FindOptimizedCall-Term$3:1$1=2", COOKIE1_, COOKIE2_, func_gen_FindOptimizedCallm_Term_S3B1S1A2);


static refalrts::FnResult func_gen_FindOptimizedCallm_Term_S3B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & FindOptimizedCall-Term$3:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FindOptimizedCall-Term$3:1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 t.new3/13 )/12 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new4 as range 2
  context[14] = refalrts::tvar_right( context[13], context[9], context[10] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 9
  do {
    // </0 & FindOptimizedCall-Term$3:1/4 (/7 e.new6/15 )/8 (/11 e.new7/17 # None/13 )/12 e.new5/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[9];
    context[18] = context[10];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_None], context[13] ) )
      continue;
    // closed e.new6 as range 15
    // closed e.new7 as range 17
    // closed e.new5 as range 19
    do {
      // </0 & FindOptimizedCall-Term$3:1/4 (/7 e.Name/21 )/8 (/11 s.BucketSize/27 e./23 # None/13 )/12 e.Arg$a/25 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      // closed e.Name as range 21
      // closed e.Arg$a as range 25
      if( ! refalrts::svar_left( context[27], context[23], context[24] ) )
        continue;
      // closed e. as range 23
      //DEBUG: e.Name: 21
      //DEBUG: e.Arg$a: 25
      //DEBUG: s.BucketSize: 27
      //DEBUG: e.: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindOptimizedCall-Term$3:1$1=2/4 AsIs: (/7 AsIs: e.Name/21 AsIs: )/8 HalfReuse: s.BucketSize27 /11 } (/28 Tile{ AsIs: e.Arg$a/25 } Tile{ AsIs: )/12 } (/29 Tile{ AsIs: e./23 } Tile{ HalfReuse: )/13 } </30 & HashName/31 e.Name/21/32 Tile{ AsIs: s.BucketSize/27 } >/34 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_HashName]);
      refalrts::copy_evar(vm, context[32], context[33], context[21], context[22]);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::update_name(context[4], functions[efunc_gen_FindOptimizedCallm_Term_S3B1S1A2]);
      refalrts::reinit_svar( context[11], context[27] );
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[30] );
      refalrts::link_brackets( context[29], context[13] );
      refalrts::link_brackets( context[28], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & FindOptimizedCall-Term$3:1/4 (/7 e.Name/21 )/8 (/11 e.OptFuncNames$a/23 # None/13 )/12 e.Arg$a/25 >/1
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    // closed e.Name as range 21
    // closed e.OptFuncNames$a as range 23
    // closed e.Arg$a as range 25
    //DEBUG: e.Name: 21
    //DEBUG: e.OptFuncNames$a: 23
    //DEBUG: e.Arg$a: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} # None/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindOptimizedCall-Term$3:1$1=1*1/4 AsIs: (/7 AsIs: e.Name/21 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Arg$a/25 } Tile{ AsIs: )/12 } Tile{ AsIs: e.OptFuncNames$a/23 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_FindOptimizedCallm_Term_S3B1S1A1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::splice_to_freelist_open( vm, context[11], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindOptimizedCall-Term$3:1/4 (/7 e.Name/5 )/8 (/11 e.OptFuncNames$a/9 t.Found/13 )/12 e.Arg$a/2 >/1
  // closed e.Name as range 5
  // closed e.OptFuncNames$a as range 9
  // closed e.Arg$a as range 2
  //DEBUG: t.Found: 13
  //DEBUG: e.Name: 5
  //DEBUG: e.OptFuncNames$a: 9
  //DEBUG: e.Arg$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/11 AsIs: e.OptFuncNames$a/9 AsIs: t.Found/13 AsIs: )/12 } (/15 # CallBrackets/16 Tile{ HalfReuse: (/0 HalfReuse: # Symbol/4 HalfReuse: # Name/7 AsIs: e.Name/5 AsIs: )/8 } Tile{ AsIs: e.Arg$a/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_CallBrackets]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Symbol]);
  refalrts::reinit_ident(context[7], identifiers[ident_Name]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[15], context[1] );
  refalrts::link_brackets( context[0], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptimizedCallm_Term_S3B1("FindOptimizedCall-Term$3:1", COOKIE1_, COOKIE2_, func_gen_FindOptimizedCallm_Term_S3B1);


static refalrts::FnResult func_gen_FindOptimizedCallm_Term_S4A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & FindOptimizedCall-Term$4=1/4 (/7 e.OptFuncNames$a/5 t.Found/9 )/8 e.Expr$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Expr$a as range 2
  context[10] = refalrts::tvar_right( context[9], context[5], context[6] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.OptFuncNames$a as range 5
  //DEBUG: e.Expr$a: 2
  //DEBUG: t.Found: 9
  //DEBUG: e.OptFuncNames$a: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.OptFuncNames$a/5 AsIs: t.Found/9 AsIs: )/8 } Tile{ HalfReuse: (/0 HalfReuse: # CallBrackets/4 } Tile{ AsIs: e.Expr$a/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_CallBrackets]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptimizedCallm_Term_S4A1("FindOptimizedCall-Term$4=1", COOKIE1_, COOKIE2_, func_gen_FindOptimizedCallm_Term_S4A1);


static refalrts::FnResult func_FindOptimizedCallm_Term(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & FindOptimizedCall-Term/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FindOptimizedCall-Term/4 (/7 e.new1/5 t.new2/11 )/8 t.new3/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = refalrts::tvar_right( context[11], context[5], context[6] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  do {
    // </0 & FindOptimizedCall-Term/4 (/7 e.new6/13 # None/11 )/8 (/9 s.new4/17 e.new5/15 )/10 >/1
    context[13] = context[5];
    context[14] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_None], context[11] ) )
      continue;
    context[15] = 0;
    context[16] = 0;
    if( ! refalrts::brackets_term( context[15], context[16], context[9] ) )
      continue;
    // closed e.new6 as range 13
    if( ! refalrts::svar_left( context[17], context[15], context[16] ) )
      continue;
    // closed e.new5 as range 15
    do {
      // </0 & FindOptimizedCall-Term/4 (/7 e.OptFuncNames/18 # None/11 )/8 (/9 # Brackets/17 e.Expr/20 )/10 >/1
      context[18] = context[13];
      context[19] = context[14];
      context[20] = context[15];
      context[21] = context[16];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[17] ) )
        continue;
      // closed e.OptFuncNames as range 18
      // closed e.Expr as range 20
      //DEBUG: e.OptFuncNames: 18
      //DEBUG: e.Expr: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </22 & FindOptimizedCall-Term$1=1/23 Tile{ AsIs: </0 Reuse: & DoMapAccum@1/4 AsIs: (/7 AsIs: e.OptFuncNames/18 AsIs: # None/11 AsIs: )/8 AsIs: (/9 HalfReuse: )/17 AsIs: e.Expr/20 HalfReuse: >/10 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[22]);
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_FindOptimizedCallm_Term_S1A1]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
      refalrts::reinit_close_bracket(context[17]);
      refalrts::reinit_close_call(context[10]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[17] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[0];
      res = refalrts::splice_evar( res, context[22], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & FindOptimizedCall-Term/4 (/7 e.new10/18 # None/11 )/8 (/9 s.new7/17 (/24 e.new8/22 )/25 e.new9/20 )/10 >/1
      context[18] = context[13];
      context[19] = context[14];
      context[20] = context[15];
      context[21] = context[16];
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[20], context[21] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      // closed e.new10 as range 18
      // closed e.new8 as range 22
      // closed e.new9 as range 20
      do {
        // </0 & FindOptimizedCall-Term/4 (/7 e.OptFuncNames/26 # None/11 )/8 (/9 # ADT-Brackets/17 (/24 e.Name/28 )/25 e.Expr/30 )/10 >/1
        context[26] = context[18];
        context[27] = context[19];
        context[28] = context[22];
        context[29] = context[23];
        context[30] = context[20];
        context[31] = context[21];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[17] ) )
          continue;
        // closed e.OptFuncNames as range 26
        // closed e.Name as range 28
        // closed e.Expr as range 30
        //DEBUG: e.OptFuncNames: 26
        //DEBUG: e.Name: 28
        //DEBUG: e.Expr: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </32 & FindOptimizedCall-Term$2=1/33 Tile{ AsIs: (/24 AsIs: e.Name/28 AsIs: )/25 } Tile{ AsIs: </0 Reuse: & DoMapAccum@1/4 AsIs: (/7 AsIs: e.OptFuncNames/26 AsIs: # None/11 AsIs: )/8 AsIs: (/9 HalfReuse: )/17 } Tile{ AsIs: e.Expr/30 } Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[32]);
        refalrts::alloc_name(vm, context[33], functions[efunc_gen_FindOptimizedCallm_Term_S2A1]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
        refalrts::reinit_close_bracket(context[17]);
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[32] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[17] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[24], context[25] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[10];
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_evar( res, context[0], context[17] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & FindOptimizedCall-Term/4 (/7 e.OptFuncNames/26 # None/11 )/8 (/9 # CallBrackets/17 (/24 # Symbol/32 # Name/33 e.Name/28 )/25 e.Arg/30 )/10 >/1
      context[26] = context[18];
      context[27] = context[19];
      context[28] = context[22];
      context[29] = context[23];
      context[30] = context[20];
      context[31] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[17] ) )
        continue;
      context[32] = refalrts::ident_left( identifiers[ident_Symbol], context[28], context[29] );
      if( ! context[32] )
        continue;
      context[33] = refalrts::ident_left( identifiers[ident_Name], context[28], context[29] );
      if( ! context[33] )
        continue;
      // closed e.OptFuncNames as range 26
      // closed e.Name as range 28
      // closed e.Arg as range 30
      //DEBUG: e.OptFuncNames: 26
      //DEBUG: e.Name: 28
      //DEBUG: e.Arg: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </24 HalfReuse: & FindOptimizedCall-Term$3:1/32 HalfReuse: (/33 AsIs: e.Name/28 AsIs: )/25 } Tile{ AsIs: </0 Reuse: & DoMapAccum@1/4 AsIs: (/7 AsIs: e.OptFuncNames/26 AsIs: # None/11 AsIs: )/8 AsIs: (/9 HalfReuse: )/17 } Tile{ AsIs: e.Arg/30 } Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[24]);
      refalrts::reinit_name(context[32], functions[efunc_gen_FindOptimizedCallm_Term_S3B1]);
      refalrts::reinit_open_bracket(context[33]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
      refalrts::reinit_close_bracket(context[17]);
      refalrts::reinit_close_call(context[10]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[17] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[33], context[25] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[0], context[17] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & FindOptimizedCall-Term/4 (/7 e.OptFuncNames/18 # None/11 )/8 (/9 # CallBrackets/17 e.Expr/20 )/10 >/1
    context[18] = context[13];
    context[19] = context[14];
    context[20] = context[15];
    context[21] = context[16];
    if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[17] ) )
      continue;
    // closed e.OptFuncNames as range 18
    // closed e.Expr as range 20
    //DEBUG: e.OptFuncNames: 18
    //DEBUG: e.Expr: 20

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </22 & FindOptimizedCall-Term$4=1/23 Tile{ AsIs: </0 Reuse: & DoMapAccum@1/4 AsIs: (/7 AsIs: e.OptFuncNames/18 AsIs: # None/11 AsIs: )/8 AsIs: (/9 HalfReuse: )/17 AsIs: e.Expr/20 HalfReuse: >/10 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_FindOptimizedCallm_Term_S4A1]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::reinit_close_bracket(context[17]);
    refalrts::reinit_close_call(context[10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[17] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[22], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindOptimizedCall-Term/4 (/7 e.OptFuncNames/5 t.Found/11 )/8 t.AnyTerm/9 >/1
  // closed e.OptFuncNames as range 5
  //DEBUG: t.Found: 11
  //DEBUG: t.AnyTerm: 9
  //DEBUG: e.OptFuncNames: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & FindOptimizedCall-Term/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.OptFuncNames/5 AsIs: t.Found/11 AsIs: )/8 AsIs: t.AnyTerm/9 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FindOptimizedCallm_Term("FindOptimizedCall-Term", COOKIE1_, COOKIE2_, func_FindOptimizedCallm_Term);


static refalrts::FnResult func_ApplyAssigns(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & ApplyAssigns/4 e.Expr/2 (/7 e.Assigns/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Expr as range 2
  // closed e.Assigns as range 5
  //DEBUG: e.Expr: 2
  //DEBUG: e.Assigns: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@6/4 } Tile{ AsIs: (/7 AsIs: e.Assigns/5 AsIs: )/8 } Tile{ AsIs: e.Expr/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z6]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ApplyAssigns("ApplyAssigns", COOKIE1_, COOKIE2_, func_ApplyAssigns);


static refalrts::FnResult func_ApplyAssignsm_Term(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & ApplyAssigns-Term/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ApplyAssigns-Term/4 t.new1/9 (/7 e.new2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new2 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ApplyAssigns-Term/4 (/9 s.new3/15 e.new4/13 )/10 (/7 e.new5/11 )/8 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
      continue;
    // closed e.new5 as range 11
    if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
      continue;
    // closed e.new4 as range 13
    do {
      // </0 & ApplyAssigns-Term/4 (/9 # Brackets/15 e.Expr/16 )/10 (/7 e.Assigns/18 )/8 >/1
      context[16] = context[13];
      context[17] = context[14];
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[15] ) )
        continue;
      // closed e.Expr as range 16
      // closed e.Assigns as range 18
      //DEBUG: e.Expr: 16
      //DEBUG: e.Assigns: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # Brackets/15 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@6/10 AsIs: (/7 AsIs: e.Assigns/18 AsIs: )/8 } Tile{ AsIs: e.Expr/16 } Tile{ HalfReuse: >/4 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_name(context[10], functions[efunc_gen_Map_Z6]);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[10], context[8] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ApplyAssigns-Term/4 (/9 # CallBrackets/15 e.Args/16 )/10 (/7 e.Assigns/18 )/8 >/1
      context[16] = context[13];
      context[17] = context[14];
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[15] ) )
        continue;
      // closed e.Args as range 16
      // closed e.Assigns as range 18
      //DEBUG: e.Args: 16
      //DEBUG: e.Assigns: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # CallBrackets/15 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@6/10 AsIs: (/7 AsIs: e.Assigns/18 AsIs: )/8 } Tile{ AsIs: e.Args/16 } Tile{ HalfReuse: >/4 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_name(context[10], functions[efunc_gen_Map_Z6]);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[10], context[8] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ApplyAssigns-Term/4 (/9 # ColdCallBrackets/15 e.Args/16 )/10 (/7 e.Assigns/18 )/8 >/1
      context[16] = context[13];
      context[17] = context[14];
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[15] ) )
        continue;
      // closed e.Args as range 16
      // closed e.Assigns as range 18
      //DEBUG: e.Args: 16
      //DEBUG: e.Assigns: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # ColdCallBrackets/15 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@6/10 AsIs: (/7 AsIs: e.Assigns/18 AsIs: )/8 } Tile{ AsIs: e.Args/16 } Tile{ HalfReuse: >/4 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_name(context[10], functions[efunc_gen_Map_Z6]);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[10], context[8] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ApplyAssigns-Term/4 (/9 # ClosureBrackets/15 e.Args/16 )/10 (/7 e.Assigns/18 )/8 >/1
      context[16] = context[13];
      context[17] = context[14];
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_ClosureBrackets], context[15] ) )
        continue;
      // closed e.Args as range 16
      // closed e.Assigns as range 18
      //DEBUG: e.Args: 16
      //DEBUG: e.Assigns: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # ClosureBrackets/15 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@6/10 AsIs: (/7 AsIs: e.Assigns/18 AsIs: )/8 } Tile{ AsIs: e.Args/16 } Tile{ HalfReuse: >/4 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_name(context[10], functions[efunc_gen_Map_Z6]);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[10], context[8] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ApplyAssigns-Term/4 (/9 # ADT-Brackets/15 (/22 e.Name/20 )/23 e.Expr/16 )/10 (/7 e.Assigns/18 )/8 >/1
    context[16] = context[13];
    context[17] = context[14];
    context[18] = context[11];
    context[19] = context[12];
    if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[15] ) )
      continue;
    context[20] = 0;
    context[21] = 0;
    context[22] = refalrts::brackets_left( context[20], context[21], context[16], context[17] );
    if( ! context[22] )
      continue;
    refalrts::bracket_pointers(context[22], context[23]);
    // closed e.Name as range 20
    // closed e.Expr as range 16
    // closed e.Assigns as range 18
    //DEBUG: e.Name: 20
    //DEBUG: e.Expr: 16
    //DEBUG: e.Assigns: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # ADT-Brackets/15 AsIs: (/22 AsIs: e.Name/20 AsIs: )/23 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@6/10 AsIs: (/7 AsIs: e.Assigns/18 AsIs: )/8 } Tile{ AsIs: e.Expr/16 } Tile{ HalfReuse: >/4 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_name(context[10], functions[efunc_gen_Map_Z6]);
    refalrts::reinit_close_call(context[4]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[9], context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[4] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[10], context[8] );
    res = refalrts::splice_elem( res, context[0] );
    res = refalrts::splice_evar( res, context[9], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ApplyAssigns-Term/4 t.T/9 (/7 e.B/13 (/19 e.Asgn/17 ':'/23 t.T/21 )/20 e.E/15 )/8 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[22] = refalrts::repeated_stvar_right( vm, context[21], context[9], context[17], context[18] );
      if( ! context[22] )
        continue;
      context[23] = refalrts::char_right( ':', context[17], context[18] );
      if( ! context[23] )
        continue;
      // closed e.Asgn as range 17
      // closed e.E as range 15
      //DEBUG: t.T: 9
      //DEBUG: e.B: 13
      //DEBUG: e.Asgn: 17
      //DEBUG: e.E: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & ApplyAssigns-Term/4 t.T/9 (/7 e.B/13 (/19 {REMOVED TILE} ':'/23 t.T/21 )/20 e.E/15 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Asgn/17 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[17], context[18] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ApplyAssigns-Term/4 t.T/9 (/7 e.Assigns/5 )/8 >/1
  // closed e.Assigns as range 5
  //DEBUG: t.T: 9
  //DEBUG: e.Assigns: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ApplyAssigns-Term/4 {REMOVED TILE} (/7 e.Assigns/5 )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.T/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ApplyAssignsm_Term("ApplyAssigns-Term", COOKIE1_, COOKIE2_, func_ApplyAssignsm_Term);


static refalrts::FnResult func_ApplyContractions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & ApplyContractions/4 e.Expr/2 (/7 e.Contrs/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Expr as range 2
  // closed e.Contrs as range 5
  //DEBUG: e.Expr: 2
  //DEBUG: e.Contrs: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@1/4 } Tile{ AsIs: (/7 AsIs: e.Contrs/5 AsIs: )/8 } Tile{ AsIs: e.Expr/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ApplyContractions("ApplyContractions", 0U, 0U, func_ApplyContractions);


static refalrts::FnResult func_gen_ApplyContractionsm_Term_S3B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & ApplyContractions-Term$3:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ApplyContractions-Term$3:1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & ApplyContractions-Term$3:1/4 (/7 e.OriginArgs/9 )/8 e.OriginArgs/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.OriginArgs as range 9
    if( ! refalrts::repeated_evar_left( vm, context[13], context[14], context[9], context[10], context[11], context[12] ) )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.OriginArgs: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & ApplyContractions-Term$3:1/4 (/7 e.OriginArgs/9 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ HalfReuse: # ColdCallBrackets/8 AsIs: e.OriginArgs/13 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[8], identifiers[ident_ColdCallBrackets]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ApplyContractions-Term$3:1/4 (/7 e.OriginArgs/5 )/8 e.ChangedArgs/2 >/1
  // closed e.OriginArgs as range 5
  // closed e.ChangedArgs as range 2
  //DEBUG: e.OriginArgs: 5
  //DEBUG: e.ChangedArgs: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & ApplyContractions-Term$3:1/4 (/7 e.OriginArgs/5 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ HalfReuse: # CallBrackets/8 AsIs: e.ChangedArgs/2 HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[8], identifiers[ident_CallBrackets]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ApplyContractionsm_Term_S3B1("ApplyContractions-Term$3:1", COOKIE1_, COOKIE2_, func_gen_ApplyContractionsm_Term_S3B1);


static refalrts::FnResult func_ApplyContractionsm_Term(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & ApplyContractions-Term/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ApplyContractions-Term/4 t.new1/9 (/7 e.new2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new2 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ApplyContractions-Term/4 (/9 s.new3/15 e.new4/13 )/10 (/7 e.new5/11 )/8 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
      continue;
    // closed e.new5 as range 11
    if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
      continue;
    // closed e.new4 as range 13
    do {
      // </0 & ApplyContractions-Term/4 (/9 # Brackets/15 e.Expr/16 )/10 (/7 e.Contrs/18 )/8 >/1
      context[16] = context[13];
      context[17] = context[14];
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[15] ) )
        continue;
      // closed e.Expr as range 16
      // closed e.Contrs as range 18
      //DEBUG: e.Expr: 16
      //DEBUG: e.Contrs: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # Brackets/15 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@1/10 AsIs: (/7 AsIs: e.Contrs/18 AsIs: )/8 } Tile{ AsIs: e.Expr/16 } Tile{ HalfReuse: >/4 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_name(context[10], functions[efunc_gen_Map_Z1]);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[10], context[8] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ApplyContractions-Term/4 (/9 # CallBrackets/15 e.Args/16 )/10 (/7 e.Contrs/18 )/8 >/1
      context[16] = context[13];
      context[17] = context[14];
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[15] ) )
        continue;
      // closed e.Args as range 16
      // closed e.Contrs as range 18
      //DEBUG: e.Args: 16
      //DEBUG: e.Contrs: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # CallBrackets/15 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@1/10 AsIs: (/7 AsIs: e.Contrs/18 AsIs: )/8 } Tile{ AsIs: e.Args/16 } Tile{ HalfReuse: >/4 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_name(context[10], functions[efunc_gen_Map_Z1]);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[10], context[8] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ApplyContractions-Term/4 (/9 # ColdCallBrackets/15 e.OriginArgs/16 )/10 (/7 e.Contrs/18 )/8 >/1
      context[16] = context[13];
      context[17] = context[14];
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[15] ) )
        continue;
      // closed e.OriginArgs as range 16
      // closed e.Contrs as range 18
      //DEBUG: e.OriginArgs: 16
      //DEBUG: e.Contrs: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ApplyContractions-Term$3:1/4 AsIs: (/9 } Tile{ AsIs: e.OriginArgs/16 } )/20 Tile{ HalfReuse: </15 } Tile{ HalfReuse: & Map@1/10 AsIs: (/7 AsIs: e.Contrs/18 AsIs: )/8 } e.OriginArgs/16/21 >/23 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[20]);
      refalrts::copy_evar(vm, context[21], context[22], context[16], context[17]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_gen_ApplyContractionsm_Term_S3B1]);
      refalrts::reinit_open_call(context[15]);
      refalrts::reinit_name(context[10], functions[efunc_gen_Map_Z1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[15] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[9], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[10], context[8] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ApplyContractions-Term/4 (/9 # ClosureBrackets/15 e.Args/16 )/10 (/7 e.Contrs/18 )/8 >/1
      context[16] = context[13];
      context[17] = context[14];
      context[18] = context[11];
      context[19] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_ClosureBrackets], context[15] ) )
        continue;
      // closed e.Args as range 16
      // closed e.Contrs as range 18
      //DEBUG: e.Args: 16
      //DEBUG: e.Contrs: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # ClosureBrackets/15 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@1/10 AsIs: (/7 AsIs: e.Contrs/18 AsIs: )/8 } Tile{ AsIs: e.Args/16 } Tile{ HalfReuse: >/4 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_name(context[10], functions[efunc_gen_Map_Z1]);
      refalrts::reinit_close_call(context[4]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[10], context[8] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ApplyContractions-Term/4 (/9 # ADT-Brackets/15 (/22 e.Name/20 )/23 e.Expr/16 )/10 (/7 e.Contrs/18 )/8 >/1
    context[16] = context[13];
    context[17] = context[14];
    context[18] = context[11];
    context[19] = context[12];
    if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[15] ) )
      continue;
    context[20] = 0;
    context[21] = 0;
    context[22] = refalrts::brackets_left( context[20], context[21], context[16], context[17] );
    if( ! context[22] )
      continue;
    refalrts::bracket_pointers(context[22], context[23]);
    // closed e.Name as range 20
    // closed e.Expr as range 16
    // closed e.Contrs as range 18
    //DEBUG: e.Name: 20
    //DEBUG: e.Expr: 16
    //DEBUG: e.Contrs: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # ADT-Brackets/15 AsIs: (/22 AsIs: e.Name/20 AsIs: )/23 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@1/10 AsIs: (/7 AsIs: e.Contrs/18 AsIs: )/8 } Tile{ AsIs: e.Expr/16 } Tile{ HalfReuse: >/4 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_name(context[10], functions[efunc_gen_Map_Z1]);
    refalrts::reinit_close_call(context[4]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[9], context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[4] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[10], context[8] );
    res = refalrts::splice_elem( res, context[0] );
    res = refalrts::splice_evar( res, context[9], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ApplyContractions-Term/4 t.Term/9 (/7 e.B/13 (/19 t.Term/21 ':'/23 e.Contr/17 )/20 e.E/15 )/8 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[22] = refalrts::repeated_stvar_left( vm, context[21], context[9], context[17], context[18] );
      if( ! context[22] )
        continue;
      context[23] = refalrts::char_left( ':', context[17], context[18] );
      if( ! context[23] )
        continue;
      // closed e.Contr as range 17
      // closed e.E as range 15
      //DEBUG: t.Term: 9
      //DEBUG: e.B: 13
      //DEBUG: e.Contr: 17
      //DEBUG: e.E: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.Term/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@8/4 } Tile{ AsIs: (/7 AsIs: e.B/13 HalfReuse: )/19 AsIs: t.Term/21 HalfReuse: (/23 AsIs: e.Contr/17 AsIs: )/20 } (/24 Tile{ AsIs: e.E/15 } Tile{ AsIs: )/8 } e.Contr/17/25 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[24]);
      refalrts::copy_evar(vm, context[25], context[26], context[17], context[18]);
      refalrts::update_name(context[4], functions[efunc_gen_Map_Z8]);
      refalrts::reinit_close_bracket(context[19]);
      refalrts::reinit_open_bracket(context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[24], context[8] );
      refalrts::link_brackets( context[23], context[20] );
      refalrts::link_brackets( context[7], context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[7], context[20] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ApplyContractions-Term/4 t.T/9 (/7 e.Contrs/5 )/8 >/1
  // closed e.Contrs as range 5
  //DEBUG: t.T: 9
  //DEBUG: e.Contrs: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ApplyContractions-Term/4 {REMOVED TILE} (/7 e.Contrs/5 )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.T/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ApplyContractionsm_Term("ApplyContractions-Term", COOKIE1_, COOKIE2_, func_ApplyContractionsm_Term);


static refalrts::FnResult func_RemainderFuncIncName(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & RemainderFuncIncName/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & RemainderFuncIncName/4 e.Name/9 # SUF/13 e.Suffixes/11 '*'/8 s.N/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_right( context[7], context[5], context[6] ) )
      continue;
    context[8] = refalrts::char_right( '*', context[5], context[6] );
    if( ! context[8] )
      continue;
    context[9] = 0;
    context[10] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[11] = context[5];
      context[12] = context[6];
      context[13] = refalrts::ident_left( identifiers[ident_SUF], context[11], context[12] );
      if( ! context[13] )
        continue;
      // closed e.Suffixes as range 11
      //DEBUG: s.N: 7
      //DEBUG: e.Name: 9
      //DEBUG: e.Suffixes: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Name/9 } Tile{ AsIs: # SUF/13 AsIs: e.Suffixes/11 AsIs: '*'/8 } Tile{ AsIs: </0 Reuse: & Add/4 } Tile{ AsIs: s.N/7 } 1/14 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[14], 1UL);
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[13], context[8] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[9], context[10], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & RemainderFuncIncName/4 e.Name/7 # SUF/11 e.Suffixes/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = refalrts::ident_left( identifiers[ident_SUF], context[9], context[10] );
      if( ! context[11] )
        continue;
      // closed e.Suffixes as range 9
      //DEBUG: e.Name: 7
      //DEBUG: e.Suffixes: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Name/7 } Tile{ AsIs: # SUF/11 AsIs: e.Suffixes/9 HalfReuse: '*'/1 } Tile{ HalfReuse: 1/4 } Tile{ ]] }
      refalrts::reinit_char(context[1], '*');
      refalrts::reinit_number(context[4], 1UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[11], context[1] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & RemainderFuncIncName/4 e.Name/2 >/1
  // closed e.Name as range 2
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Name/2 } Tile{ HalfReuse: # SUF/0 HalfReuse: '*'/4 } Tile{ HalfReuse: 1/1 ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_SUF]);
  refalrts::reinit_char(context[4], '*');
  refalrts::reinit_number(context[1], 1UL);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_RemainderFuncIncName("RemainderFuncIncName", COOKIE1_, COOKIE2_, func_RemainderFuncIncName);


static refalrts::FnResult func_gen_ApplyAssignsm_Term_D5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & ApplyAssigns-Term*5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ApplyAssigns-Term*5/4 t.new1/9 (/7 e.new2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new2 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ApplyAssigns-Term*5/4 t.T/9 (/7 e.B/13 (/19 e.Asgn/17 ':'/23 t.T/21 )/20 e.E/15 )/8 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[22] = refalrts::repeated_stvar_right( vm, context[21], context[9], context[17], context[18] );
      if( ! context[22] )
        continue;
      context[23] = refalrts::char_right( ':', context[17], context[18] );
      if( ! context[23] )
        continue;
      // closed e.Asgn as range 17
      // closed e.E as range 15
      //DEBUG: t.T: 9
      //DEBUG: e.B: 13
      //DEBUG: e.Asgn: 17
      //DEBUG: e.E: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & ApplyAssigns-Term*5/4 t.T/9 (/7 e.B/13 (/19 {REMOVED TILE} ':'/23 t.T/21 )/20 e.E/15 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Asgn/17 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[17], context[18] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ApplyAssigns-Term*5/4 t.T/9 (/7 e.Assigns/5 )/8 >/1
  // closed e.Assigns as range 5
  //DEBUG: t.T: 9
  //DEBUG: e.Assigns: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ApplyAssigns-Term*5/4 {REMOVED TILE} (/7 e.Assigns/5 )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.T/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ApplyAssignsm_Term_D5("ApplyAssigns-Term*5", COOKIE1_, COOKIE2_, func_gen_ApplyAssignsm_Term_D5);


static refalrts::FnResult func_gen_ApplyContractionsm_Term_D5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & ApplyContractions-Term*5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ApplyContractions-Term*5/4 t.new1/9 (/7 e.new2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new2 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ApplyContractions-Term*5/4 t.Term/9 (/7 e.B/13 (/19 t.Term/21 ':'/23 e.Contr/17 )/20 e.E/15 )/8 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[22] = refalrts::repeated_stvar_left( vm, context[21], context[9], context[17], context[18] );
      if( ! context[22] )
        continue;
      context[23] = refalrts::char_left( ':', context[17], context[18] );
      if( ! context[23] )
        continue;
      // closed e.Contr as range 17
      // closed e.E as range 15
      //DEBUG: t.Term: 9
      //DEBUG: e.B: 13
      //DEBUG: e.Contr: 17
      //DEBUG: e.E: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.Term/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@8/4 } Tile{ AsIs: (/7 AsIs: e.B/13 HalfReuse: )/19 AsIs: t.Term/21 HalfReuse: (/23 AsIs: e.Contr/17 AsIs: )/20 } (/24 Tile{ AsIs: e.E/15 } Tile{ AsIs: )/8 } e.Contr/17/25 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[24]);
      refalrts::copy_evar(vm, context[25], context[26], context[17], context[18]);
      refalrts::update_name(context[4], functions[efunc_gen_Map_Z8]);
      refalrts::reinit_close_bracket(context[19]);
      refalrts::reinit_open_bracket(context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[24], context[8] );
      refalrts::link_brackets( context[23], context[20] );
      refalrts::link_brackets( context[7], context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[7], context[20] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ApplyContractions-Term*5/4 t.T/9 (/7 e.Contrs/5 )/8 >/1
  // closed e.Contrs as range 5
  //DEBUG: t.T: 9
  //DEBUG: e.Contrs: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ApplyContractions-Term*5/4 {REMOVED TILE} (/7 e.Contrs/5 )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.T/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ApplyContractionsm_Term_D5("ApplyContractions-Term*5", COOKIE1_, COOKIE2_, func_gen_ApplyContractionsm_Term_D5);


static refalrts::FnResult func_gen_Apply_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@2/4 t.new1/5 t.new2/7 t.new3/9 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Apply@2/4 s.Fn/5 t.Acc/7 t.Next/9 >/1
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 9
    //DEBUG: s.Fn: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: t.Acc/7 AsIs: t.Next/9 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@2/4 (/5 t.Closure/13 e.Bounded/11 )/6 t.Acc/7 t.Next/9 >/1
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded as range 11
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 9
    //DEBUG: t.Closure: 13
    //DEBUG: e.Bounded: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@4/4 } Tile{ AsIs: t.Closure/13 } Tile{ AsIs: e.Bounded/11 } Tile{ AsIs: t.Acc/7 AsIs: t.Next/9 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@2/4 t.dyn0/5 t.Acc/7 t.Next/9 >/1
  //DEBUG: t.dyn0: 5
  //DEBUG: t.Acc: 7
  //DEBUG: t.Next: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: t.Acc/7 AsIs: t.Next/9 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z2("Apply@2", COOKIE1_, COOKIE2_, func_gen_Apply_Z2);


static refalrts::FnResult func_gen_Reduce_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & Reduce@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@1/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Reduce@1/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Reduce@1/4 s.new6/5 t.new7/9 e.new8/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      if( ! refalrts::svar_term( context[5], context[5] ) )
        continue;
      // closed e.new8 as range 11
      do {
        // </0 & Reduce@1/4 # True/5 t.new9/9 e.new10/13 >/1
        context[13] = context[11];
        context[14] = context[12];
        if( ! refalrts::ident_term( identifiers[ident_True], context[5] ) )
          continue;
        // closed e.new10 as range 13
        do {
          // </0 & Reduce@1/4 # True/5 (/9 s.new11/19 e.new12/17 )/10 e.new13/15 >/1
          context[15] = context[13];
          context[16] = context[14];
          context[17] = 0;
          context[18] = 0;
          if( ! refalrts::brackets_term( context[17], context[18], context[9] ) )
            continue;
          // closed e.new13 as range 15
          if( ! refalrts::svar_left( context[19], context[17], context[18] ) )
            continue;
          // closed e.new12 as range 17
          do {
            // </0 & Reduce@1/4 # True/5 (/9 # Brackets/19 e.0/20 )/10 e.Tail/22 >/1
            context[20] = context[17];
            context[21] = context[18];
            context[22] = context[15];
            context[23] = context[16];
            if( ! refalrts::ident_term( identifiers[ident_Brackets], context[19] ) )
              continue;
            // closed e.0 as range 20
            // closed e.Tail as range 22
            //DEBUG: e.0: 20
            //DEBUG: e.Tail: 22

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@1/4 HalfReuse: (/5 } Tile{ AsIs: e.Tail/22 } )/24 </25 Tile{ HalfReuse: & Reduce@1/9 Reuse: # True/19 AsIs: e.0/20 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
            refalrts::alloc_close_bracket(vm, context[24]);
            refalrts::alloc_open_call(vm, context[25]);
            refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z1]);
            refalrts::reinit_open_bracket(context[5]);
            refalrts::reinit_name(context[9], functions[efunc_gen_Reduce_Z1]);
            refalrts::update_ident(context[19], identifiers[ident_True]);
            refalrts::reinit_close_call(context[10]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[10] );
            refalrts::push_stack( vm, context[25] );
            refalrts::link_brackets( context[5], context[24] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[9], context[10] );
            res = refalrts::splice_evar( res, context[24], context[25] );
            res = refalrts::splice_evar( res, context[22], context[23] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & Reduce@1/4 # True/5 (/9 # ADT-Brackets/19 e.0/20 )/10 e.Tail/22 >/1
            context[20] = context[17];
            context[21] = context[18];
            context[22] = context[15];
            context[23] = context[16];
            if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[19] ) )
              continue;
            // closed e.0 as range 20
            // closed e.Tail as range 22
            //DEBUG: e.0: 20
            //DEBUG: e.Tail: 22

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@1/4 HalfReuse: (/5 } Tile{ AsIs: e.Tail/22 } )/24 </25 Tile{ HalfReuse: & Reduce@1/9 Reuse: # True/19 AsIs: e.0/20 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
            refalrts::alloc_close_bracket(vm, context[24]);
            refalrts::alloc_open_call(vm, context[25]);
            refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z1]);
            refalrts::reinit_open_bracket(context[5]);
            refalrts::reinit_name(context[9], functions[efunc_gen_Reduce_Z1]);
            refalrts::update_ident(context[19], identifiers[ident_True]);
            refalrts::reinit_close_call(context[10]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[10] );
            refalrts::push_stack( vm, context[25] );
            refalrts::link_brackets( context[5], context[24] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[9], context[10] );
            res = refalrts::splice_evar( res, context[24], context[25] );
            res = refalrts::splice_evar( res, context[22], context[23] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & Reduce@1/4 # True/5 (/9 # CallBrackets/19 e.0/20 )/10 e.Tail/22 >/1
            context[20] = context[17];
            context[21] = context[18];
            context[22] = context[15];
            context[23] = context[16];
            if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[19] ) )
              continue;
            // closed e.0 as range 20
            // closed e.Tail as range 22
            //DEBUG: e.0: 20
            //DEBUG: e.Tail: 22

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} (/9 # CallBrackets/19 e.0/20 )/10 {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@1/4 Reuse: # False/5 } Tile{ AsIs: e.Tail/22 } Tile{ AsIs: >/1 ]] }
            refalrts::update_ident(context[5], identifiers[ident_False]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[22], context[23] );
            refalrts::splice_to_freelist_open( vm, context[5], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & Reduce@1/4 # True/5 (/9 # ColdCallBrackets/19 e.0/20 )/10 e.Tail/22 >/1
          context[20] = context[17];
          context[21] = context[18];
          context[22] = context[15];
          context[23] = context[16];
          if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[19] ) )
            continue;
          // closed e.0 as range 20
          // closed e.Tail as range 22
          //DEBUG: e.0: 20
          //DEBUG: e.Tail: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/9 # ColdCallBrackets/19 e.0/20 )/10 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@1/4 Reuse: # False/5 } Tile{ AsIs: e.Tail/22 } Tile{ AsIs: >/1 ]] }
          refalrts::update_ident(context[5], identifiers[ident_False]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[22], context[23] );
          refalrts::splice_to_freelist_open( vm, context[5], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Reduce@1/4 # True/5 t.Next/9 e.Tail/15 >/1
        context[15] = context[13];
        context[16] = context[14];
        // closed e.Tail as range 15
        //DEBUG: t.Next: 9
        //DEBUG: e.Tail: 15

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} t.Next/9 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@1/4 AsIs: # True/5 } Tile{ AsIs: e.Tail/15 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[15], context[16] );
        refalrts::splice_to_freelist_open( vm, context[5], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@1/4 # False/5 t.Next/9 e.Tail/13 >/1
      context[13] = context[11];
      context[14] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_False], context[5] ) )
        continue;
      // closed e.Tail as range 13
      //DEBUG: t.Next: 9
      //DEBUG: e.Tail: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.Next/9 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@1/4 AsIs: # False/5 } Tile{ AsIs: e.Tail/13 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[13], context[14] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@1/4 t.Acc/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & Reduce$1=1@1/14 (/15 Tile{ AsIs: e.Tail/11 } )/16 Tile{ AsIs: </0 Reuse: & IsPassiveCall\1*2/4 AsIs: t.Acc/5 AsIs: t.Next/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Reduce_S1A1Z1]);
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_IsPassiveCall_L1D2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@1/4 t.Acc/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@1/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@1/4 t.accum/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.accum: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 Tile{ HalfReuse: & Reduce@0/0 Reuse: & IsPassiveCall\1@0/4 AsIs: t.accum/5 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Reduce_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_IsPassiveCall_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z1("Reduce@1", COOKIE1_, COOKIE2_, func_gen_Reduce_Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 63 elems
  refalrts::Iter context[63];
  refalrts::zeros( context, 63 );
  // </0 & DoMapAccum@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@1/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@1/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@1/4 (/5 e.new8/21 t.new9/23 )/6 (/9 e.new12/17 )/10 t.new10/15 e.new11/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      // closed e.new12 as range 17
      // closed e.new11 as range 19
      context[24] = refalrts::tvar_right( context[23], context[21], context[22] );
      if( ! context[24] )
        continue;
      // closed e.new8 as range 21
      do {
        // </0 & DoMapAccum@1/4 (/5 e.new13/25 # None/23 )/6 (/9 e.new17/27 )/10 (/15 s.new14/33 e.new15/31 )/16 e.new16/29 >/1
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[17];
        context[28] = context[18];
        context[29] = context[19];
        context[30] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_None], context[23] ) )
          continue;
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[15] ) )
          continue;
        // closed e.new13 as range 25
        // closed e.new17 as range 27
        // closed e.new16 as range 29
        if( ! refalrts::svar_left( context[33], context[31], context[32] ) )
          continue;
        // closed e.new15 as range 31
        do {
          // </0 & DoMapAccum@1/4 (/5 e.1/34 # None/23 )/6 (/9 e.Scanned/36 )/10 (/15 # Brackets/33 e.2/38 )/16 e.Tail/40 >/1
          context[34] = context[25];
          context[35] = context[26];
          context[36] = context[27];
          context[37] = context[28];
          context[38] = context[31];
          context[39] = context[32];
          context[40] = context[29];
          context[41] = context[30];
          if( ! refalrts::ident_term( identifiers[ident_Brackets], context[33] ) )
            continue;
          // closed e.1 as range 34
          // closed e.Scanned as range 36
          // closed e.2 as range 38
          // closed e.Tail as range 40
          //DEBUG: e.1: 34
          //DEBUG: e.Scanned: 36
          //DEBUG: e.2: 38
          //DEBUG: e.Tail: 40

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </42 & DoMapAccum$1=1@1/43 (/44 Tile{ AsIs: e.Scanned/36 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/40 } )/45 </46 & FindOptimizedCall-Term$1=1/47 Tile{ AsIs: </0 AsIs: & DoMapAccum@1/4 AsIs: (/5 AsIs: e.1/34 AsIs: # None/23 AsIs: )/6 AsIs: (/9 } Tile{ HalfReuse: )/33 AsIs: e.2/38 HalfReuse: >/16 } >/48 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[42]);
          refalrts::alloc_name(vm, context[43], functions[efunc_gen_DoMapAccum_S1A1Z1]);
          refalrts::alloc_open_bracket(vm, context[44]);
          refalrts::alloc_close_bracket(vm, context[45]);
          refalrts::alloc_open_call(vm, context[46]);
          refalrts::alloc_name(vm, context[47], functions[efunc_gen_FindOptimizedCallm_Term_S1A1]);
          refalrts::alloc_close_call(vm, context[48]);
          refalrts::reinit_close_bracket(context[33]);
          refalrts::reinit_close_call(context[16]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[42] );
          refalrts::push_stack( vm, context[48] );
          refalrts::push_stack( vm, context[46] );
          refalrts::push_stack( vm, context[16] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[33] );
          refalrts::link_brackets( context[5], context[6] );
          refalrts::link_brackets( context[15], context[45] );
          refalrts::link_brackets( context[44], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[48] );
          res = refalrts::splice_evar( res, context[33], context[16] );
          res = refalrts::splice_evar( res, context[0], context[9] );
          res = refalrts::splice_evar( res, context[45], context[47] );
          res = refalrts::splice_evar( res, context[40], context[41] );
          res = refalrts::splice_evar( res, context[10], context[15] );
          res = refalrts::splice_evar( res, context[36], context[37] );
          res = refalrts::splice_evar( res, context[42], context[44] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoMapAccum@1/4 (/5 e.new18/34 # None/23 )/6 (/9 e.new23/36 )/10 (/15 s.new19/33 (/44 e.new20/42 )/45 e.new21/38 )/16 e.new22/40 >/1
          context[34] = context[25];
          context[35] = context[26];
          context[36] = context[27];
          context[37] = context[28];
          context[38] = context[31];
          context[39] = context[32];
          context[40] = context[29];
          context[41] = context[30];
          context[42] = 0;
          context[43] = 0;
          context[44] = refalrts::brackets_left( context[42], context[43], context[38], context[39] );
          if( ! context[44] )
            continue;
          refalrts::bracket_pointers(context[44], context[45]);
          // closed e.new18 as range 34
          // closed e.new23 as range 36
          // closed e.new20 as range 42
          // closed e.new21 as range 38
          // closed e.new22 as range 40
          do {
            // </0 & DoMapAccum@1/4 (/5 e.1/46 # None/23 )/6 (/9 e.Scanned/48 )/10 (/15 # ADT-Brackets/33 (/44 e.4/50 )/45 e.3/52 )/16 e.Tail/54 >/1
            context[46] = context[34];
            context[47] = context[35];
            context[48] = context[36];
            context[49] = context[37];
            context[50] = context[42];
            context[51] = context[43];
            context[52] = context[38];
            context[53] = context[39];
            context[54] = context[40];
            context[55] = context[41];
            if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[33] ) )
              continue;
            // closed e.1 as range 46
            // closed e.Scanned as range 48
            // closed e.4 as range 50
            // closed e.3 as range 52
            // closed e.Tail as range 54
            //DEBUG: e.1: 46
            //DEBUG: e.Scanned: 48
            //DEBUG: e.4: 50
            //DEBUG: e.3: 52
            //DEBUG: e.Tail: 54

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } </56 & DoMapAccum$1=1@1/57 (/58 Tile{ AsIs: e.Scanned/48 } )/59 (/60 Tile{ AsIs: e.Tail/54 } Tile{ AsIs: )/10 HalfReuse: </15 HalfReuse: & FindOptimizedCall-Term$2=1/33 AsIs: (/44 AsIs: e.4/50 AsIs: )/45 } Tile{ AsIs: </0 AsIs: & DoMapAccum@1/4 AsIs: (/5 AsIs: e.1/46 AsIs: # None/23 AsIs: )/6 AsIs: (/9 } Tile{ AsIs: )/16 } Tile{ AsIs: e.3/52 } >/61 >/62 Tile{ AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[56]);
            refalrts::alloc_name(vm, context[57], functions[efunc_gen_DoMapAccum_S1A1Z1]);
            refalrts::alloc_open_bracket(vm, context[58]);
            refalrts::alloc_close_bracket(vm, context[59]);
            refalrts::alloc_open_bracket(vm, context[60]);
            refalrts::alloc_close_call(vm, context[61]);
            refalrts::alloc_close_call(vm, context[62]);
            refalrts::reinit_open_call(context[15]);
            refalrts::reinit_name(context[33], functions[efunc_gen_FindOptimizedCallm_Term_S2A1]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[56] );
            refalrts::push_stack( vm, context[62] );
            refalrts::push_stack( vm, context[15] );
            refalrts::push_stack( vm, context[61] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[9], context[16] );
            refalrts::link_brackets( context[5], context[6] );
            refalrts::link_brackets( context[44], context[45] );
            refalrts::link_brackets( context[60], context[10] );
            refalrts::link_brackets( context[58], context[59] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[61], context[62] );
            res = refalrts::splice_evar( res, context[52], context[53] );
            res = refalrts::splice_elem( res, context[16] );
            res = refalrts::splice_evar( res, context[0], context[9] );
            res = refalrts::splice_evar( res, context[10], context[45] );
            res = refalrts::splice_evar( res, context[54], context[55] );
            res = refalrts::splice_evar( res, context[59], context[60] );
            res = refalrts::splice_evar( res, context[48], context[49] );
            res = refalrts::splice_evar( res, context[56], context[58] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & DoMapAccum@1/4 (/5 e.1/46 # None/23 )/6 (/9 e.Scanned/48 )/10 (/15 # CallBrackets/33 (/44 # Symbol/56 # Name/57 e.6/50 )/45 e.3/52 )/16 e.Tail/54 >/1
          context[46] = context[34];
          context[47] = context[35];
          context[48] = context[36];
          context[49] = context[37];
          context[50] = context[42];
          context[51] = context[43];
          context[52] = context[38];
          context[53] = context[39];
          context[54] = context[40];
          context[55] = context[41];
          if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[33] ) )
            continue;
          context[56] = refalrts::ident_left( identifiers[ident_Symbol], context[50], context[51] );
          if( ! context[56] )
            continue;
          context[57] = refalrts::ident_left( identifiers[ident_Name], context[50], context[51] );
          if( ! context[57] )
            continue;
          // closed e.1 as range 46
          // closed e.Scanned as range 48
          // closed e.6 as range 50
          // closed e.3 as range 52
          // closed e.Tail as range 54
          //DEBUG: e.1: 46
          //DEBUG: e.Scanned: 48
          //DEBUG: e.6: 50
          //DEBUG: e.3: 52
          //DEBUG: e.Tail: 54

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </58 & DoMapAccum$1=1@1/59 (/60 Tile{ AsIs: e.Scanned/48 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/54 } Tile{ HalfReuse: )/33 HalfReuse: </44 HalfReuse: & FindOptimizedCall-Term$3:1/56 HalfReuse: (/57 AsIs: e.6/50 AsIs: )/45 } Tile{ AsIs: </0 AsIs: & DoMapAccum@1/4 AsIs: (/5 AsIs: e.1/46 AsIs: # None/23 AsIs: )/6 AsIs: (/9 } Tile{ AsIs: )/16 } Tile{ AsIs: e.3/52 } >/61 >/62 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[58]);
          refalrts::alloc_name(vm, context[59], functions[efunc_gen_DoMapAccum_S1A1Z1]);
          refalrts::alloc_open_bracket(vm, context[60]);
          refalrts::alloc_close_call(vm, context[61]);
          refalrts::alloc_close_call(vm, context[62]);
          refalrts::reinit_close_bracket(context[33]);
          refalrts::reinit_open_call(context[44]);
          refalrts::reinit_name(context[56], functions[efunc_gen_FindOptimizedCallm_Term_S3B1]);
          refalrts::reinit_open_bracket(context[57]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[58] );
          refalrts::push_stack( vm, context[62] );
          refalrts::push_stack( vm, context[44] );
          refalrts::push_stack( vm, context[61] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[9], context[16] );
          refalrts::link_brackets( context[5], context[6] );
          refalrts::link_brackets( context[57], context[45] );
          refalrts::link_brackets( context[15], context[33] );
          refalrts::link_brackets( context[60], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[61], context[62] );
          res = refalrts::splice_evar( res, context[52], context[53] );
          res = refalrts::splice_elem( res, context[16] );
          res = refalrts::splice_evar( res, context[0], context[9] );
          res = refalrts::splice_evar( res, context[33], context[45] );
          res = refalrts::splice_evar( res, context[54], context[55] );
          res = refalrts::splice_evar( res, context[10], context[15] );
          res = refalrts::splice_evar( res, context[48], context[49] );
          res = refalrts::splice_evar( res, context[58], context[60] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@1/4 (/5 e.1/34 # None/23 )/6 (/9 e.Scanned/36 )/10 (/15 # CallBrackets/33 e.2/38 )/16 e.Tail/40 >/1
        context[34] = context[25];
        context[35] = context[26];
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[31];
        context[39] = context[32];
        context[40] = context[29];
        context[41] = context[30];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[33] ) )
          continue;
        // closed e.1 as range 34
        // closed e.Scanned as range 36
        // closed e.2 as range 38
        // closed e.Tail as range 40
        //DEBUG: e.1: 34
        //DEBUG: e.Scanned: 36
        //DEBUG: e.2: 38
        //DEBUG: e.Tail: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </42 & DoMapAccum$1=1@1/43 (/44 Tile{ AsIs: e.Scanned/36 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/40 } )/45 </46 & FindOptimizedCall-Term$4=1/47 Tile{ AsIs: </0 AsIs: & DoMapAccum@1/4 AsIs: (/5 AsIs: e.1/34 AsIs: # None/23 AsIs: )/6 AsIs: (/9 } Tile{ HalfReuse: )/33 AsIs: e.2/38 HalfReuse: >/16 } >/48 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[43], functions[efunc_gen_DoMapAccum_S1A1Z1]);
        refalrts::alloc_open_bracket(vm, context[44]);
        refalrts::alloc_close_bracket(vm, context[45]);
        refalrts::alloc_open_call(vm, context[46]);
        refalrts::alloc_name(vm, context[47], functions[efunc_gen_FindOptimizedCallm_Term_S4A1]);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::reinit_close_bracket(context[33]);
        refalrts::reinit_close_call(context[16]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[33] );
        refalrts::link_brackets( context[5], context[6] );
        refalrts::link_brackets( context[15], context[45] );
        refalrts::link_brackets( context[44], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[48] );
        res = refalrts::splice_evar( res, context[33], context[16] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[45], context[47] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[10], context[15] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[42], context[44] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@1/4 (/5 e.0/25 t./23 )/6 (/9 e.Scanned/27 )/10 t.Next/15 e.Tail/29 >/1
      context[25] = context[21];
      context[26] = context[22];
      context[27] = context[17];
      context[28] = context[18];
      context[29] = context[19];
      context[30] = context[20];
      // closed e.0 as range 25
      // closed e.Scanned as range 27
      // closed e.Tail as range 29
      //DEBUG: t.: 23
      //DEBUG: t.Next: 15
      //DEBUG: e.0: 25
      //DEBUG: e.Scanned: 27
      //DEBUG: e.Tail: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@1/4 AsIs: (/5 AsIs: e.0/25 AsIs: t./23 AsIs: )/6 AsIs: (/9 } Tile{ AsIs: e.Scanned/27 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@1/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@1/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & FindOptimizedCall-Term*5/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_FindOptimizedCallm_Term_D5]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@1/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@1/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@1/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & FindOptimizedCall-Term@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FindOptimizedCallm_Term_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z1("DoMapAccum@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z1);


static refalrts::FnResult func_gen_Map_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & Map@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Map@1/4 (/7 e.new5/9 )/8 t.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Map@1/4 (/7 e.new9/15 )/8 (/13 s.new6/21 e.new7/19 )/14 e.new8/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      // closed e.new9 as range 15
      // closed e.new8 as range 17
      if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
        continue;
      // closed e.new7 as range 19
      do {
        // </0 & Map@1/4 (/7 e.Contractions/22 )/8 (/13 # Brackets/21 e.0/24 )/14 e.Tail/26 >/1
        context[22] = context[15];
        context[23] = context[16];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[17];
        context[27] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[21] ) )
          continue;
        // closed e.Contractions as range 22
        // closed e.0 as range 24
        // closed e.Tail as range 26
        //DEBUG: e.Contractions: 22
        //DEBUG: e.0: 24
        //DEBUG: e.Tail: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # Brackets/21 } Tile{ AsIs: </0 AsIs: & Map@1/4 AsIs: (/7 AsIs: e.Contractions/22 AsIs: )/8 } Tile{ AsIs: e.0/24 } >/28 )/29 </30 & Map@1/31 (/32 e.Contractions/22/33 Tile{ AsIs: )/14 AsIs: e.Tail/26 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_close_bracket(vm, context[29]);
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_Map_Z1]);
        refalrts::alloc_open_bracket(vm, context[32]);
        refalrts::copy_evar(vm, context[33], context[34], context[22], context[23]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::link_brackets( context[32], context[14] );
        refalrts::link_brackets( context[13], context[29] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[28], context[32] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[13], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@1/4 (/7 e.Contractions/22 )/8 (/13 # CallBrackets/21 e.0/24 )/14 e.Tail/26 >/1
        context[22] = context[15];
        context[23] = context[16];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[17];
        context[27] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[21] ) )
          continue;
        // closed e.Contractions as range 22
        // closed e.0 as range 24
        // closed e.Tail as range 26
        //DEBUG: e.Contractions: 22
        //DEBUG: e.0: 24
        //DEBUG: e.Tail: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # CallBrackets/21 } Tile{ AsIs: </0 AsIs: & Map@1/4 AsIs: (/7 AsIs: e.Contractions/22 AsIs: )/8 } Tile{ AsIs: e.0/24 } >/28 )/29 </30 & Map@1/31 (/32 e.Contractions/22/33 Tile{ AsIs: )/14 AsIs: e.Tail/26 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_close_bracket(vm, context[29]);
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_Map_Z1]);
        refalrts::alloc_open_bracket(vm, context[32]);
        refalrts::copy_evar(vm, context[33], context[34], context[22], context[23]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::link_brackets( context[32], context[14] );
        refalrts::link_brackets( context[13], context[29] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[28], context[32] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[13], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@1/4 (/7 e.Contractions/22 )/8 (/13 # ColdCallBrackets/21 e.0/24 )/14 e.Tail/26 >/1
        context[22] = context[15];
        context[23] = context[16];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[17];
        context[27] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[21] ) )
          continue;
        // closed e.Contractions as range 22
        // closed e.0 as range 24
        // closed e.Tail as range 26
        //DEBUG: e.Contractions: 22
        //DEBUG: e.0: 24
        //DEBUG: e.Tail: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </28 Tile{ HalfReuse: & ApplyContractions-Term$3:1/21 } Tile{ AsIs: (/13 } e.0/24/29 )/31 Tile{ AsIs: </0 AsIs: & Map@1/4 AsIs: (/7 AsIs: e.Contractions/22 AsIs: )/8 } Tile{ AsIs: e.0/24 } >/32 >/33 </34 & Map@1/35 (/36 e.Contractions/22/37 Tile{ AsIs: )/14 AsIs: e.Tail/26 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[28]);
        refalrts::copy_evar(vm, context[29], context[30], context[24], context[25]);
        refalrts::alloc_close_bracket(vm, context[31]);
        refalrts::alloc_close_call(vm, context[32]);
        refalrts::alloc_close_call(vm, context[33]);
        refalrts::alloc_open_call(vm, context[34]);
        refalrts::alloc_name(vm, context[35], functions[efunc_gen_Map_Z1]);
        refalrts::alloc_open_bracket(vm, context[36]);
        refalrts::copy_evar(vm, context[37], context[38], context[22], context[23]);
        refalrts::reinit_name(context[21], functions[efunc_gen_ApplyContractionsm_Term_S3B1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[34] );
        refalrts::link_brackets( context[36], context[14] );
        refalrts::push_stack( vm, context[33] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[32] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[13], context[31] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[37], context[38] );
        res = refalrts::splice_evar( res, context[32], context[36] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_elem( res, context[28] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@1/4 (/7 e.Contractions/22 )/8 (/13 # ClosureBrackets/21 e.0/24 )/14 e.Tail/26 >/1
        context[22] = context[15];
        context[23] = context[16];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[17];
        context[27] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_ClosureBrackets], context[21] ) )
          continue;
        // closed e.Contractions as range 22
        // closed e.0 as range 24
        // closed e.Tail as range 26
        //DEBUG: e.Contractions: 22
        //DEBUG: e.0: 24
        //DEBUG: e.Tail: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # ClosureBrackets/21 } Tile{ AsIs: </0 AsIs: & Map@1/4 AsIs: (/7 AsIs: e.Contractions/22 AsIs: )/8 } Tile{ AsIs: e.0/24 } >/28 )/29 </30 & Map@1/31 (/32 e.Contractions/22/33 Tile{ AsIs: )/14 AsIs: e.Tail/26 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_close_bracket(vm, context[29]);
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_Map_Z1]);
        refalrts::alloc_open_bracket(vm, context[32]);
        refalrts::copy_evar(vm, context[33], context[34], context[22], context[23]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::link_brackets( context[32], context[14] );
        refalrts::link_brackets( context[13], context[29] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[28], context[32] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[13], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@1/4 (/7 e.Contractions/22 )/8 (/13 # ADT-Brackets/21 (/30 e.2/28 )/31 e.1/24 )/14 e.Tail/26 >/1
      context[22] = context[15];
      context[23] = context[16];
      context[24] = context[19];
      context[25] = context[20];
      context[26] = context[17];
      context[27] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[21] ) )
        continue;
      context[28] = 0;
      context[29] = 0;
      context[30] = refalrts::brackets_left( context[28], context[29], context[24], context[25] );
      if( ! context[30] )
        continue;
      refalrts::bracket_pointers(context[30], context[31]);
      // closed e.Contractions as range 22
      // closed e.2 as range 28
      // closed e.1 as range 24
      // closed e.Tail as range 26
      //DEBUG: e.Contractions: 22
      //DEBUG: e.2: 28
      //DEBUG: e.1: 24
      //DEBUG: e.Tail: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # ADT-Brackets/21 AsIs: (/30 AsIs: e.2/28 AsIs: )/31 } Tile{ AsIs: </0 AsIs: & Map@1/4 AsIs: (/7 AsIs: e.Contractions/22 AsIs: )/8 } Tile{ AsIs: e.1/24 } >/32 )/33 </34 & Map@1/35 (/36 e.Contractions/22/37 Tile{ AsIs: )/14 AsIs: e.Tail/26 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_open_call(vm, context[34]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Map_Z1]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::copy_evar(vm, context[37], context[38], context[22], context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[34] );
      refalrts::link_brackets( context[36], context[14] );
      refalrts::link_brackets( context[13], context[33] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[30], context[31] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[32], context[36] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[13], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@1/4 (/7 e.Contractions/15 )/8 t.Next/13 e.Tail/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.Contractions as range 15
    // closed e.Tail as range 17
    //DEBUG: t.Next: 13
    //DEBUG: e.Contractions: 15
    //DEBUG: e.Tail: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </19 & ApplyContractions-Term*5/20 Tile{ AsIs: t.Next/13 } (/21 e.Contractions/15/22 )/24 >/25 Tile{ AsIs: </0 AsIs: & Map@1/4 AsIs: (/7 AsIs: e.Contractions/15 AsIs: )/8 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_ApplyContractionsm_Term_D5]);
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::copy_evar(vm, context[22], context[23], context[15], context[16]);
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[21], context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[21], context[25] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@1/4 (/7 e.Contractions/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Contractions as range 9
    //DEBUG: e.Contractions: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@1/4 (/7 e.Contractions/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@1/4 (/7 e.Contractions/5 )/8 e.items/2 >/1
  // closed e.Contractions as range 5
  // closed e.items as range 2
  //DEBUG: e.Contractions: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 Tile{ HalfReuse: [*]/0 Reuse: & ApplyContractions\1@0/4 AsIs: (/7 AsIs: e.Contractions/5 AsIs: )/8 } {*}/11 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_ApplyContractions_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z1("Map@1", COOKIE1_, COOKIE2_, func_gen_Map_Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & DoMapAccum@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@2/4 (/7 e.new1/5 )/8 t.new2/9 (/13 e.new3/11 )/14 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new3 as range 11
  // closed e.new4 as range 2
  do {
    // </0 & DoMapAccum@2/4 (/7 e.new8/15 )/8 t.new5/9 (/13 e.new9/17 )/14 t.new6/21 e.new7/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.new8 as range 15
    // closed e.new9 as range 17
    context[22] = refalrts::tvar_left( context[21], context[19], context[20] );
    if( ! context[22] )
      continue;
    // closed e.new7 as range 19
    do {
      // </0 & DoMapAccum@2/4 (/7 e.Expr/23 )/8 (/9 e./29 )/10 (/13 e.Scanned/25 )/14 (/21 e.1/31 (/35 e.2/33 )/36 )/22 e.Tail/27 >/1
      context[23] = context[15];
      context[24] = context[16];
      context[25] = context[17];
      context[26] = context[18];
      context[27] = context[19];
      context[28] = context[20];
      context[29] = 0;
      context[30] = 0;
      if( ! refalrts::brackets_term( context[29], context[30], context[9] ) )
        continue;
      context[31] = 0;
      context[32] = 0;
      if( ! refalrts::brackets_term( context[31], context[32], context[21] ) )
        continue;
      context[33] = 0;
      context[34] = 0;
      context[35] = refalrts::brackets_right( context[33], context[34], context[31], context[32] );
      if( ! context[35] )
        continue;
      refalrts::bracket_pointers(context[35], context[36]);
      // closed e.Expr as range 23
      // closed e. as range 29
      // closed e.Scanned as range 25
      // closed e.1 as range 31
      // closed e.2 as range 33
      // closed e.Tail as range 27
      //DEBUG: e.Expr: 23
      //DEBUG: e.: 29
      //DEBUG: e.Scanned: 25
      //DEBUG: e.1: 31
      //DEBUG: e.2: 33
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@2/4 AsIs: (/7 AsIs: e.Expr/23 AsIs: )/8 AsIs: (/9 } Tile{ AsIs: e.Scanned/25 } Tile{ AsIs: )/36 HalfReuse: (/22 AsIs: e.Tail/27 HalfReuse: )/1 } (/37 Tile{ AsIs: e./29 } Tile{ AsIs: e.2/33 } Tile{ AsIs: )/14 AsIs: (/21 AsIs: e.1/31 AsIs: (/35 } </38 Tile{ HalfReuse: & Map@1/10 AsIs: (/13 } e.1/31/39 )/41 e.Expr/23/42 >/44 )/45 )/46 >/47 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::copy_evar(vm, context[39], context[40], context[31], context[32]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::copy_evar(vm, context[42], context[43], context[23], context[24]);
      refalrts::alloc_close_call(vm, context[44]);
      refalrts::alloc_close_bracket(vm, context[45]);
      refalrts::alloc_close_bracket(vm, context[46]);
      refalrts::alloc_close_call(vm, context[47]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z2]);
      refalrts::reinit_open_bracket(context[22]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::reinit_name(context[10], functions[efunc_gen_Map_Z1]);
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[21], context[46] );
      refalrts::link_brackets( context[35], context[45] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[38] );
      refalrts::link_brackets( context[13], context[41] );
      refalrts::link_brackets( context[37], context[14] );
      refalrts::link_brackets( context[22], context[1] );
      refalrts::link_brackets( context[9], context[36] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[41], context[47] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_evar( res, context[14], context[35] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_evar( res, context[36], context[1] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@2/4 (/7 e.Expr/23 )/8 t.Acc/9 (/13 e.Scanned/25 )/14 t.Next/21 e.Tail/27 >/1
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[17];
    context[26] = context[18];
    context[27] = context[19];
    context[28] = context[20];
    // closed e.Expr as range 23
    // closed e.Scanned as range 25
    // closed e.Tail as range 27
    //DEBUG: t.Acc: 9
    //DEBUG: t.Next: 21
    //DEBUG: e.Expr: 23
    //DEBUG: e.Scanned: 25
    //DEBUG: e.Tail: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@2/4 AsIs: (/7 AsIs: e.Expr/23 AsIs: )/8 } Tile{ AsIs: (/13 AsIs: e.Scanned/25 AsIs: )/14 } (/29 Tile{ AsIs: e.Tail/27 } )/30 </31 & OptExpr-Aux\1*1/32 (/33 e.Expr/23/34 )/36 Tile{ AsIs: t.Acc/9 } Tile{ AsIs: t.Next/21 } >/37 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_gen_OptExprm_Aux_L1D1]);
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::copy_evar(vm, context[34], context[35], context[23], context[24]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[33], context[36] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[30], context[36] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@2/4 (/7 e.Expr/15 )/8 t.Acc/9 (/13 e.Scanned/17 )/14 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Expr as range 15
    // closed e.Scanned as range 17
    //DEBUG: t.Acc: 9
    //DEBUG: e.Expr: 15
    //DEBUG: e.Scanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@2/4 (/7 e.Expr/15 )/8 {REMOVED TILE} (/13 {REMOVED TILE} )/14 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/9 } Tile{ AsIs: e.Scanned/17 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@2/4 (/7 e.Expr/5 )/8 t.acc/9 (/13 e.scanned/11 )/14 e.items/2 >/1
  // closed e.Expr as range 5
  // closed e.scanned as range 11
  // closed e.items as range 2
  //DEBUG: t.acc: 9
  //DEBUG: e.Expr: 5
  //DEBUG: e.scanned: 11
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@0/4 HalfReuse: [*]/7 } & OptExpr-Aux\1@0/15 (/16 Tile{ AsIs: e.Expr/5 } )/17 Tile{ HalfReuse: {*}/8 AsIs: t.acc/9 AsIs: (/13 AsIs: e.scanned/11 AsIs: )/14 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_OptExprm_Aux_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::reinit_closure_head(context[7]);
  refalrts::reinit_unwrapped_closure(context[8], context[7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  refalrts::wrap_closure( context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z2("DoMapAccum@2", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z2);


static refalrts::FnResult func_gen_FindOptInfom_Aux_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & FindOptInfo-Aux@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FindOptInfo-Aux@1/4 (/7 e.new1/5 )/8 e.new2/2 s.new3/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_right( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & FindOptInfo-Aux@1/4 (/7 e.OptFuncs-B/14 (/20 # Intrinsic/22 (/25 e./27 )/26 e.Body/18 )/21 e.OptFuncs-E/16 )/8 e./12 s.N/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e. as range 12
    context[14] = 0;
    context[15] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[16] = context[10];
      context[17] = context[11];
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[16], context[17] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      context[22] = refalrts::ident_left( identifiers[ident_Intrinsic], context[18], context[19] );
      if( ! context[22] )
        continue;
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[18], context[19] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      if( ! refalrts::repeated_evar_left( vm, context[27], context[28], context[12], context[13], context[23], context[24] ) )
        continue;
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      // closed e.Body as range 18
      // closed e.OptFuncs-E as range 16
      //DEBUG: s.N: 9
      //DEBUG: e.: 12
      //DEBUG: e.OptFuncs-B: 14
      //DEBUG: e.Body: 18
      //DEBUG: e.OptFuncs-E: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.OptFuncs-B/14 } Tile{ AsIs: (/20 AsIs: # Intrinsic/22 AsIs: (/25 AsIs: e./27 AsIs: )/26 AsIs: e.Body/18 AsIs: )/21 AsIs: e.OptFuncs-E/16 HalfReuse: (/8 } Tile{ HalfReuse: # Intrinsic/4 AsIs: (/7 } Tile{ AsIs: e./12 } Tile{ HalfReuse: # SUF/0 } '*'/29 Tile{ AsIs: s.N/9 HalfReuse: )/1 } e.Body/18/30 )/32 Tile{ ]] }
      refalrts::alloc_char(vm, context[29], '*');
      refalrts::copy_evar(vm, context[30], context[31], context[18], context[19]);
      refalrts::alloc_close_bracket(vm, context[32]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_ident(context[4], identifiers[ident_Intrinsic]);
      refalrts::reinit_ident(context[0], identifiers[ident_SUF]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[8], context[32] );
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[9], context[1] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_evar( res, context[4], context[7] );
      res = refalrts::splice_evar( res, context[20], context[8] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[14], context[15], context[10], context[11] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & FindOptInfo-Aux@1/4 (/7 e.OptFuncs-B/14 (/20 s.Mode/22 (/25 e./27 )/26 e.Body/18 )/21 e.OptFuncs-E/16 )/8 e./12 s.N/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e. as range 12
    context[14] = 0;
    context[15] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[16] = context[10];
      context[17] = context[11];
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[16], context[17] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      // closed e.OptFuncs-E as range 16
      if( ! refalrts::svar_left( context[22], context[18], context[19] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[18], context[19] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      if( ! refalrts::repeated_evar_left( vm, context[27], context[28], context[12], context[13], context[23], context[24] ) )
        continue;
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      // closed e.Body as range 18
      //DEBUG: s.N: 9
      //DEBUG: e.: 12
      //DEBUG: e.OptFuncs-B: 14
      //DEBUG: e.OptFuncs-E: 16
      //DEBUG: s.Mode: 22
      //DEBUG: e.Body: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e./12 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindOptInfo-Aux$2=1@1/4 AsIs: (/7 AsIs: e.OptFuncs-B/14 HalfReuse: )/20 AsIs: s.Mode/22 AsIs: (/25 AsIs: e./27 AsIs: )/26 } (/29 Tile{ AsIs: e.Body/18 } )/30 Tile{ HalfReuse: (/21 AsIs: e.OptFuncs-E/16 AsIs: )/8 } Tile{ AsIs: s.N/9 } e.Body/18/31 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_close_bracket(vm, context[30]);
      refalrts::copy_evar(vm, context[31], context[32], context[18], context[19]);
      refalrts::update_name(context[4], functions[efunc_gen_FindOptInfom_Aux_S2A1Z1]);
      refalrts::reinit_close_bracket(context[20]);
      refalrts::reinit_open_bracket(context[21]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[21], context[8] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[7], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[21], context[8] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_elem( res, context[29] );
      refalrts::splice_to_freelist_open( vm, context[26], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[14], context[15], context[10], context[11] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindOptInfo-Aux@1/4 (/7 e.dyn0/5 )/8 e./2 s.N/9 >/1
  // closed e.dyn0 as range 5
  // closed e. as range 2
  //DEBUG: s.N: 9
  //DEBUG: e.dyn0: 5
  //DEBUG: e.: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindOptInfo-Aux@0/4 } Tile{ AsIs: e.dyn0/5 } Tile{ AsIs: (/7 } Tile{ AsIs: e./2 } # SUF/10 '*'/11 s.N/9/12 Tile{ AsIs: )/8 } (/13 e./2/14 )/16 Tile{ AsIs: s.N/9 AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[10], identifiers[ident_SUF]);
  refalrts::alloc_char(vm, context[11], '*');
  refalrts::copy_stvar(vm, context[12], context[9]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::copy_evar(vm, context[14], context[15], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_FindOptInfom_Aux_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[16] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[13], context[16] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[10], context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptInfom_Aux_Z1("FindOptInfo-Aux@1", COOKIE1_, COOKIE2_, func_gen_FindOptInfom_Aux_Z1);


static refalrts::FnResult func_gen_FindOptInfom_Aux_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & FindOptInfo-Aux@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FindOptInfo-Aux@2/4 (/7 e.new1/5 )/8 e.new2/2 s.new3/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_right( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & FindOptInfo-Aux@2/4 (/7 e.OptFuncs-B/14 (/20 # Intrinsic/22 (/25 e.0/27 )/26 e.Body/18 )/21 e.OptFuncs-E/16 )/8 e.0/12 s.N/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.0 as range 12
    context[14] = 0;
    context[15] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[16] = context[10];
      context[17] = context[11];
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[16], context[17] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      context[22] = refalrts::ident_left( identifiers[ident_Intrinsic], context[18], context[19] );
      if( ! context[22] )
        continue;
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[18], context[19] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      if( ! refalrts::repeated_evar_left( vm, context[27], context[28], context[12], context[13], context[23], context[24] ) )
        continue;
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      // closed e.Body as range 18
      // closed e.OptFuncs-E as range 16
      //DEBUG: s.N: 9
      //DEBUG: e.0: 12
      //DEBUG: e.OptFuncs-B: 14
      //DEBUG: e.Body: 18
      //DEBUG: e.OptFuncs-E: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.OptFuncs-B/14 } Tile{ AsIs: (/20 AsIs: # Intrinsic/22 AsIs: (/25 AsIs: e.0/27 AsIs: )/26 AsIs: e.Body/18 AsIs: )/21 AsIs: e.OptFuncs-E/16 HalfReuse: (/8 } Tile{ HalfReuse: # Intrinsic/4 AsIs: (/7 } Tile{ AsIs: e.0/12 } Tile{ HalfReuse: '*'/0 } Tile{ AsIs: s.N/9 HalfReuse: )/1 } e.Body/18/29 )/31 Tile{ ]] }
      refalrts::copy_evar(vm, context[29], context[30], context[18], context[19]);
      refalrts::alloc_close_bracket(vm, context[31]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_ident(context[4], identifiers[ident_Intrinsic]);
      refalrts::reinit_char(context[0], '*');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[8], context[31] );
      refalrts::link_brackets( context[7], context[1] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[9], context[1] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_evar( res, context[4], context[7] );
      res = refalrts::splice_evar( res, context[20], context[8] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[14], context[15], context[10], context[11] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & FindOptInfo-Aux@2/4 (/7 e.OptFuncs-B/14 (/20 s.Mode/22 (/25 e.0/27 )/26 e.Body/18 )/21 e.OptFuncs-E/16 )/8 e.0/12 s.N/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.0 as range 12
    context[14] = 0;
    context[15] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[16] = context[10];
      context[17] = context[11];
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[16], context[17] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      // closed e.OptFuncs-E as range 16
      if( ! refalrts::svar_left( context[22], context[18], context[19] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[18], context[19] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      if( ! refalrts::repeated_evar_left( vm, context[27], context[28], context[12], context[13], context[23], context[24] ) )
        continue;
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      // closed e.Body as range 18
      //DEBUG: s.N: 9
      //DEBUG: e.0: 12
      //DEBUG: e.OptFuncs-B: 14
      //DEBUG: e.OptFuncs-E: 16
      //DEBUG: s.Mode: 22
      //DEBUG: e.Body: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.0/12 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindOptInfo-Aux$2=1@2/4 AsIs: (/7 AsIs: e.OptFuncs-B/14 HalfReuse: )/20 AsIs: s.Mode/22 AsIs: (/25 AsIs: e.0/27 AsIs: )/26 } (/29 Tile{ AsIs: e.Body/18 } )/30 Tile{ HalfReuse: (/21 AsIs: e.OptFuncs-E/16 AsIs: )/8 } Tile{ AsIs: s.N/9 } e.Body/18/31 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_close_bracket(vm, context[30]);
      refalrts::copy_evar(vm, context[31], context[32], context[18], context[19]);
      refalrts::update_name(context[4], functions[efunc_gen_FindOptInfom_Aux_S2A1Z2]);
      refalrts::reinit_close_bracket(context[20]);
      refalrts::reinit_open_bracket(context[21]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[21], context[8] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[7], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_evar( res, context[21], context[8] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_elem( res, context[29] );
      refalrts::splice_to_freelist_open( vm, context[26], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[14], context[15], context[10], context[11] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindOptInfo-Aux@2/4 (/7 e.dyn0/5 )/8 e.0/2 s.N/9 >/1
  // closed e.dyn0 as range 5
  // closed e.0 as range 2
  //DEBUG: s.N: 9
  //DEBUG: e.dyn0: 5
  //DEBUG: e.0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindOptInfo-Aux@0/4 } Tile{ AsIs: e.dyn0/5 } Tile{ AsIs: (/7 } Tile{ AsIs: e.0/2 } '*'/10 s.N/9/11 Tile{ AsIs: )/8 } (/12 e.0/2/13 )/15 Tile{ AsIs: s.N/9 AsIs: >/1 ]] }
  refalrts::alloc_char(vm, context[10], '*');
  refalrts::copy_stvar(vm, context[11], context[9]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::copy_evar(vm, context[13], context[14], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_FindOptInfom_Aux_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[12], context[15] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptInfom_Aux_Z2("FindOptInfo-Aux@2", COOKIE1_, COOKIE2_, func_gen_FindOptInfom_Aux_Z2);


static refalrts::FnResult func_gen_FindOptInfom_Aux_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & FindOptInfo-Aux@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FindOptInfo-Aux@3/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & FindOptInfo-Aux@3/4 (/7 e.OptFuncs-B/13 (/19 # Intrinsic/21 (/24 e.Name0/26 )/25 e.Body/17 )/20 e.OptFuncs-E/15 )/8 e.Name0/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Name0 as range 11
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[9];
      context[16] = context[10];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left( identifiers[ident_Intrinsic], context[17], context[18] );
      if( ! context[21] )
        continue;
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[17], context[18] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      if( ! refalrts::repeated_evar_left( vm, context[26], context[27], context[11], context[12], context[22], context[23] ) )
        continue;
      if( ! refalrts::empty_seq( context[22], context[23] ) )
        continue;
      // closed e.Body as range 17
      // closed e.OptFuncs-E as range 15
      //DEBUG: e.Name0: 11
      //DEBUG: e.OptFuncs-B: 13
      //DEBUG: e.Body: 17
      //DEBUG: e.OptFuncs-E: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.OptFuncs-B/13 } Tile{ AsIs: (/19 AsIs: # Intrinsic/21 AsIs: (/24 AsIs: e.Name0/26 AsIs: )/25 AsIs: e.Body/17 AsIs: )/20 AsIs: e.OptFuncs-E/15 HalfReuse: (/8 } Tile{ HalfReuse: # Intrinsic/4 AsIs: (/7 } Tile{ AsIs: e.Name0/11 } Tile{ HalfReuse: )/0 } e.Body/17/28 Tile{ HalfReuse: )/1 ]] }
      refalrts::copy_evar(vm, context[28], context[29], context[17], context[18]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_ident(context[4], identifiers[ident_Intrinsic]);
      refalrts::reinit_close_bracket(context[0]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[8], context[1] );
      refalrts::link_brackets( context[7], context[0] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[4], context[7] );
      res = refalrts::splice_evar( res, context[19], context[8] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[9], context[10] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & FindOptInfo-Aux@3/4 (/7 e.OptFuncs-B/13 (/19 s.Mode/21 (/24 e.Name0/26 )/25 e.Body/17 )/20 e.OptFuncs-E/15 )/8 e.Name0/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Name0 as range 11
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[9];
      context[16] = context[10];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      // closed e.OptFuncs-E as range 15
      if( ! refalrts::svar_left( context[21], context[17], context[18] ) )
        continue;
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[17], context[18] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      if( ! refalrts::repeated_evar_left( vm, context[26], context[27], context[11], context[12], context[22], context[23] ) )
        continue;
      if( ! refalrts::empty_seq( context[22], context[23] ) )
        continue;
      // closed e.Body as range 17
      //DEBUG: e.Name0: 11
      //DEBUG: e.OptFuncs-B: 13
      //DEBUG: e.OptFuncs-E: 15
      //DEBUG: s.Mode: 21
      //DEBUG: e.Body: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name0/11 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindOptInfo-Aux$2=1@3/4 AsIs: (/7 AsIs: e.OptFuncs-B/13 HalfReuse: )/19 AsIs: s.Mode/21 AsIs: (/24 AsIs: e.Name0/26 AsIs: )/25 } (/28 Tile{ AsIs: e.Body/17 } )/29 Tile{ HalfReuse: (/20 AsIs: e.OptFuncs-E/15 AsIs: )/8 } e.Body/17/30 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::copy_evar(vm, context[30], context[31], context[17], context[18]);
      refalrts::update_name(context[4], functions[efunc_gen_FindOptInfom_Aux_S2A1Z3]);
      refalrts::reinit_close_bracket(context[19]);
      refalrts::reinit_open_bracket(context[20]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[20], context[8] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[7], context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[20], context[8] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_elem( res, context[28] );
      refalrts::splice_to_freelist_open( vm, context[25], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[9], context[10] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindOptInfo-Aux@3/4 (/7 e.dyn0/5 )/8 e.Name0/2 >/1
  // closed e.dyn0 as range 5
  // closed e.Name0 as range 2
  //DEBUG: e.dyn0: 5
  //DEBUG: e.Name0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & FindOptInfo-Aux@0/7 AsIs: e.dyn0/5 HalfReuse: (/8 AsIs: e.Name0/2 HalfReuse: )/1 } Tile{ HalfReuse: (/0 } e.Name0/2/9 )/11 0/12 >/13 Tile{ ]] }
  refalrts::copy_evar(vm, context[9], context[10], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::alloc_number(vm, context[12], 0UL);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_gen_FindOptInfom_Aux_Z0]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[4] );
  refalrts::link_brackets( context[0], context[11] );
  refalrts::link_brackets( context[8], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[11], context[13] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[0] );
  res = refalrts::splice_evar( res, context[4], context[1] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptInfom_Aux_Z3("FindOptInfo-Aux@3", COOKIE1_, COOKIE2_, func_gen_FindOptInfom_Aux_Z3);


static refalrts::FnResult func_gen_Map_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Map@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@2/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@2/4 s.a/7 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::svar_term( context[7], context[7] ) )
        continue;
      // closed e.Tail as range 9
      //DEBUG: s.a: 7
      //DEBUG: e.Tail: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/11 # Symbol/12 # Char/13 Tile{ AsIs: s.a/7 } )/14 Tile{ AsIs: </0 AsIs: & Map@2/4 } Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[11]);
      refalrts::alloc_ident(vm, context[12], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[13], identifiers[ident_Char]);
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[11], context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@2/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CharToNode\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@2/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z2]);
    refalrts::update_name(context[4], functions[efunc_gen_CharToNode_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@2/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@2/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@2/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & CharToNode\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CharToNode_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z2("Map@2", COOKIE1_, COOKIE2_, func_gen_Map_Z2);


static refalrts::FnResult func_gen_IntrinsicCall_S2A2B1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & IntrinsicCall$2=2:1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & IntrinsicCall$2=2:1@1/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & IntrinsicCall$2=2:1@1/4 t.new4/5 (/9 e.new7/11 )/10 s.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & IntrinsicCall$2=2:1@1/4 t.IntrinsicFunction0/5 (/9 e.2/16 )/10 # Ok/15 e.Result/18 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      if( ! refalrts::ident_term( identifiers[ident_Ok], context[15] ) )
        continue;
      // closed e.2 as range 16
      // closed e.Result as range 18
      //DEBUG: t.IntrinsicFunction0: 5
      //DEBUG: e.2: 16
      //DEBUG: e.Result: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.IntrinsicFunction0/5 {REMOVED TILE} e.2/16 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: (/9 } # Var/20 'e'/21 # DRIVEN/22 Tile{ AsIs: )/10 HalfReuse: ':'/15 AsIs: e.Result/18 HalfReuse: )/1 } (/23 )/24 )/25 Tile{ ]] }
      refalrts::alloc_ident(vm, context[20], identifiers[ident_Var]);
      refalrts::alloc_char(vm, context[21], 'e');
      refalrts::alloc_ident(vm, context[22], identifiers[ident_DRIVEN]);
      refalrts::alloc_open_bracket(vm, context[23]);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_char(context[15], ':');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[25] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[4], context[1] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[10], context[1] );
      res = refalrts::splice_evar( res, context[20], context[22] );
      res = refalrts::splice_elem( res, context[9] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & IntrinsicCall$2=2:1@1/4 t.IntrinsicFunction0/5 (/9 e.2/16 )/10 # MakeColdCall/15 >/1
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::ident_term( identifiers[ident_MakeColdCall], context[15] ) )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    // closed e.2 as range 16
    //DEBUG: t.IntrinsicFunction0: 5
    //DEBUG: e.2: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeColdSolution/4 AsIs: t.IntrinsicFunction0/5 AsIs: (/9 } Tile{ HalfReuse: # Symbol/10 } # Identifier/18 Tile{ AsIs: e.2/16 } Tile{ HalfReuse: )/15 AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Identifier]);
    refalrts::update_name(context[4], functions[efunc_MakeColdSolution]);
    refalrts::reinit_ident(context[10], identifiers[ident_Symbol]);
    refalrts::reinit_close_bracket(context[15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_elem( res, context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IntrinsicCall$2=2:1@1/4 t.IntrinsicFunction0/5 (/9 e.2/7 )/10 e.dyn/2 >/1
  // closed e.2 as range 7
  // closed e.dyn as range 2
  //DEBUG: t.IntrinsicFunction0: 5
  //DEBUG: e.2: 7
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2:1@0/4 AsIs: t.IntrinsicFunction0/5 AsIs: (/9 } (/11 # Symbol/12 # Identifier/13 Tile{ AsIs: e.2/7 } )/14 Tile{ AsIs: )/10 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Symbol]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Identifier]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[11], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[10];
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[11], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_IntrinsicCall_S2A2B1Z1("IntrinsicCall$2=2:1@1", COOKIE1_, COOKIE2_, func_gen_IntrinsicCall_S2A2B1Z1);


static refalrts::FnResult func_gen_Intrinsicm_Type_S4A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Intrinsic-Type$4=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Intrinsic-Type$4=1@1/4 s.new1/5 (/8 e.new2/6 )/9 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  // closed e.new3 as range 2
  do {
    // </0 & Intrinsic-Type$4=1@1/4 s.Char/5 (/8 e./10 )/9 s.Type/14 s.SubType/15 e._/12 >/1
    context[10] = context[6];
    context[11] = context[7];
    context[12] = context[2];
    context[13] = context[3];
    // closed e. as range 10
    if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[12], context[13] ) )
      continue;
    // closed e._ as range 12
    //DEBUG: s.Char: 5
    //DEBUG: e.: 10
    //DEBUG: s.Type: 14
    //DEBUG: s.SubType: 15
    //DEBUG: e._: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e._/12 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } # Ok/16 (/17 # Symbol/18 Tile{ HalfReuse: # Char/9 AsIs: s.Type/14 } )/19 (/20 Tile{ HalfReuse: # Symbol/1 } # Char/21 Tile{ AsIs: s.SubType/15 } )/22 (/23 Tile{ HalfReuse: # Symbol/0 HalfReuse: # Char/4 AsIs: s.Char/5 HalfReuse: )/8 } Tile{ AsIs: e./10 } Tile{ ]] }
    refalrts::alloc_ident(vm, context[16], identifiers[ident_Ok]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Symbol]);
    refalrts::alloc_close_bracket(vm, context[19]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_ident(vm, context[21], identifiers[ident_Char]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::reinit_ident(context[9], identifiers[ident_Char]);
    refalrts::reinit_ident(context[1], identifiers[ident_Symbol]);
    refalrts::reinit_ident(context[0], identifiers[ident_Symbol]);
    refalrts::reinit_ident(context[4], identifiers[ident_Char]);
    refalrts::reinit_close_bracket(context[8]);
    refalrts::link_brackets( context[23], context[8] );
    refalrts::link_brackets( context[20], context[22] );
    refalrts::link_brackets( context[17], context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[9], context[14] );
    res = refalrts::splice_evar( res, context[16], context[18] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Type$4=1@1/4 s.Char/5 (/8 e./6 )/9 e.dyn/2 >/1
  // closed e. as range 6
  // closed e.dyn as range 2
  //DEBUG: s.Char: 5
  //DEBUG: e.: 6
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Intrinsic-Type$4=1@0/4 } (/10 # Symbol/11 # Char/12 Tile{ AsIs: s.Char/5 } )/13 Tile{ AsIs: (/8 AsIs: e./6 AsIs: )/9 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_ident(vm, context[11], identifiers[ident_Symbol]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Char]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_Intrinsicm_Type_S4A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[10], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[10], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Type_S4A1Z1("Intrinsic-Type$4=1@1", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Type_S4A1Z1);


static refalrts::FnResult func_gen_IntrinsicCall_S2A2B1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & IntrinsicCall$2=2:1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & IntrinsicCall$2=2:1@2/4 t.new1/5 s.new2/7 (/10 e.new3/8 )/11 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  // closed e.new3 as range 8
  // closed e.new4 as range 2
  do {
    // </0 & IntrinsicCall$2=2:1@2/4 t.new5/5 s.new6/7 (/10 e.new9/12 )/11 s.new7/16 e.new8/14 >/1
    context[12] = context[8];
    context[13] = context[9];
    context[14] = context[2];
    context[15] = context[3];
    // closed e.new9 as range 12
    if( ! refalrts::svar_left( context[16], context[14], context[15] ) )
      continue;
    // closed e.new8 as range 14
    do {
      // </0 & IntrinsicCall$2=2:1@2/4 t.IntrinsicFunction0/5 s.Char/7 (/10 e./17 )/11 # Ok/16 e.Result/19 >/1
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      context[20] = context[15];
      if( ! refalrts::ident_term( identifiers[ident_Ok], context[16] ) )
        continue;
      // closed e. as range 17
      // closed e.Result as range 19
      //DEBUG: t.IntrinsicFunction0: 5
      //DEBUG: s.Char: 7
      //DEBUG: e.: 17
      //DEBUG: e.Result: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.IntrinsicFunction0/5 s.Char/7 {REMOVED TILE} e./17 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: (/10 } # Var/21 'e'/22 # DRIVEN/23 Tile{ AsIs: )/11 HalfReuse: ':'/16 AsIs: e.Result/19 HalfReuse: )/1 } (/24 )/25 )/26 Tile{ ]] }
      refalrts::alloc_ident(vm, context[21], identifiers[ident_Var]);
      refalrts::alloc_char(vm, context[22], 'e');
      refalrts::alloc_ident(vm, context[23], identifiers[ident_DRIVEN]);
      refalrts::alloc_open_bracket(vm, context[24]);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_char(context[16], ':');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[26] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[4], context[1] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[24], context[26] );
      res = refalrts::splice_evar( res, context[11], context[1] );
      res = refalrts::splice_evar( res, context[21], context[23] );
      res = refalrts::splice_elem( res, context[10] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & IntrinsicCall$2=2:1@2/4 t.IntrinsicFunction0/5 s.Char/7 (/10 e./17 )/11 # MakeColdCall/16 >/1
    context[17] = context[12];
    context[18] = context[13];
    if( ! refalrts::ident_term( identifiers[ident_MakeColdCall], context[16] ) )
      continue;
    if( ! refalrts::empty_seq( context[14], context[15] ) )
      continue;
    // closed e. as range 17
    //DEBUG: t.IntrinsicFunction0: 5
    //DEBUG: s.Char: 7
    //DEBUG: e.: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeColdSolution/4 AsIs: t.IntrinsicFunction0/5 } (/19 Tile{ Reuse: # Symbol/16 HalfReuse: # Char/1 } Tile{ AsIs: s.Char/7 HalfReuse: )/10 AsIs: e./17 HalfReuse: >/11 } Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_MakeColdSolution]);
    refalrts::update_ident(context[16], identifiers[ident_Symbol]);
    refalrts::reinit_ident(context[1], identifiers[ident_Char]);
    refalrts::reinit_close_bracket(context[10]);
    refalrts::reinit_close_call(context[11]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[19], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[11] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_elem( res, context[19] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IntrinsicCall$2=2:1@2/4 t.IntrinsicFunction0/5 s.Char/7 (/10 e./8 )/11 e.dyn/2 >/1
  // closed e. as range 8
  // closed e.dyn as range 2
  //DEBUG: t.IntrinsicFunction0: 5
  //DEBUG: s.Char: 7
  //DEBUG: e.: 8
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2:1@0/4 AsIs: t.IntrinsicFunction0/5 } (/12 (/13 # Symbol/14 # Char/15 Tile{ AsIs: s.Char/7 HalfReuse: )/10 AsIs: e./8 AsIs: )/11 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Symbol]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Char]);
  refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2B1Z0]);
  refalrts::reinit_close_bracket(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[11] );
  refalrts::link_brackets( context[13], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[7];
  res = refalrts::splice_evar( res, context[12], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_IntrinsicCall_S2A2B1Z2("IntrinsicCall$2=2:1@2", COOKIE1_, COOKIE2_, func_gen_IntrinsicCall_S2A2B1Z2);


static refalrts::FnResult func_gen_Intrinsicm_Type_S4A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & Intrinsic-Type$4=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Intrinsic-Type$4=1@2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & Intrinsic-Type$4=1@2/4 (/7 e.2/13 )/8 (/11 e./15 )/12 s.Type/19 s.SubType/20 e._/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.2 as range 13
    // closed e. as range 15
    if( ! refalrts::svar_left( context[19], context[17], context[18] ) )
      continue;
    if( ! refalrts::svar_left( context[20], context[17], context[18] ) )
      continue;
    // closed e._ as range 17
    //DEBUG: e.2: 13
    //DEBUG: e.: 15
    //DEBUG: s.Type: 19
    //DEBUG: s.SubType: 20
    //DEBUG: e._: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e._/17 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } # Ok/21 Tile{ AsIs: (/11 } # Symbol/22 Tile{ HalfReuse: # Char/12 AsIs: s.Type/19 } )/23 (/24 # Symbol/25 Tile{ HalfReuse: # Char/1 } Tile{ AsIs: s.SubType/20 } )/26 Tile{ HalfReuse: (/0 HalfReuse: # Symbol/4 HalfReuse: # Identifier/7 AsIs: e.2/13 AsIs: )/8 } Tile{ AsIs: e./15 } Tile{ ]] }
    refalrts::alloc_ident(vm, context[21], identifiers[ident_Ok]);
    refalrts::alloc_ident(vm, context[22], identifiers[ident_Symbol]);
    refalrts::alloc_close_bracket(vm, context[23]);
    refalrts::alloc_open_bracket(vm, context[24]);
    refalrts::alloc_ident(vm, context[25], identifiers[ident_Symbol]);
    refalrts::alloc_close_bracket(vm, context[26]);
    refalrts::reinit_ident(context[12], identifiers[ident_Char]);
    refalrts::reinit_ident(context[1], identifiers[ident_Char]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Symbol]);
    refalrts::reinit_ident(context[7], identifiers[ident_Identifier]);
    refalrts::link_brackets( context[0], context[8] );
    refalrts::link_brackets( context[24], context[26] );
    refalrts::link_brackets( context[11], context[23] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[23], context[25] );
    res = refalrts::splice_evar( res, context[12], context[19] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[21] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Intrinsic-Type$4=1@2/4 (/7 e.2/5 )/8 (/11 e./9 )/12 e.dyn/2 >/1
  // closed e.2 as range 5
  // closed e. as range 9
  // closed e.dyn as range 2
  //DEBUG: e.2: 5
  //DEBUG: e.: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & Intrinsic-Type$4=1@0/14 Tile{ HalfReuse: (/0 HalfReuse: # Symbol/4 HalfReuse: # Identifier/7 AsIs: e.2/5 AsIs: )/8 AsIs: (/11 AsIs: e./9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_Intrinsicm_Type_S4A1Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Symbol]);
  refalrts::reinit_ident(context[7], identifiers[ident_Identifier]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[0], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Intrinsicm_Type_S4A1Z2("Intrinsic-Type$4=1@2", COOKIE1_, COOKIE2_, func_gen_Intrinsicm_Type_S4A1Z2);


static refalrts::FnResult func_gen_IntrinsicCall_S2A2B1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & IntrinsicCall$2=2:1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & IntrinsicCall$2=2:1@3/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 2
  do {
    // </0 & IntrinsicCall$2=2:1@3/4 t.new5/5 (/9 e.new8/15 )/10 (/13 e.new9/17 )/14 s.new6/21 e.new7/19 >/1
    context[15] = context[7];
    context[16] = context[8];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.new8 as range 15
    // closed e.new9 as range 17
    if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
      continue;
    // closed e.new7 as range 19
    do {
      // </0 & IntrinsicCall$2=2:1@3/4 t.IntrinsicFunction0/5 (/9 e.2/22 )/10 (/13 e./24 )/14 # Ok/21 e.Result/26 >/1
      context[22] = context[15];
      context[23] = context[16];
      context[24] = context[17];
      context[25] = context[18];
      context[26] = context[19];
      context[27] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_Ok], context[21] ) )
        continue;
      // closed e.2 as range 22
      // closed e. as range 24
      // closed e.Result as range 26
      //DEBUG: t.IntrinsicFunction0: 5
      //DEBUG: e.2: 22
      //DEBUG: e.: 24
      //DEBUG: e.Result: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.IntrinsicFunction0/5 {REMOVED TILE} e.2/22 {REMOVED TILE} e./24 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: (/9 } # Var/28 'e'/29 # DRIVEN/30 Tile{ AsIs: )/14 HalfReuse: ':'/21 AsIs: e.Result/26 HalfReuse: )/1 } (/31 Tile{ AsIs: )/10 HalfReuse: )/13 } Tile{ ]] }
      refalrts::alloc_ident(vm, context[28], identifiers[ident_Var]);
      refalrts::alloc_char(vm, context[29], 'e');
      refalrts::alloc_ident(vm, context[30], identifiers[ident_DRIVEN]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_char(context[21], ':');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::link_brackets( context[0], context[13] );
      refalrts::link_brackets( context[31], context[10] );
      refalrts::link_brackets( context[4], context[1] );
      refalrts::link_brackets( context[9], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[10], context[13] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[14], context[1] );
      res = refalrts::splice_evar( res, context[28], context[30] );
      res = refalrts::splice_elem( res, context[9] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & IntrinsicCall$2=2:1@3/4 t.IntrinsicFunction0/5 (/9 e.2/22 )/10 (/13 e./24 )/14 # MakeColdCall/21 >/1
    context[22] = context[15];
    context[23] = context[16];
    context[24] = context[17];
    context[25] = context[18];
    if( ! refalrts::ident_term( identifiers[ident_MakeColdCall], context[21] ) )
      continue;
    if( ! refalrts::empty_seq( context[19], context[20] ) )
      continue;
    // closed e.2 as range 22
    // closed e. as range 24
    //DEBUG: t.IntrinsicFunction0: 5
    //DEBUG: e.2: 22
    //DEBUG: e.: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeColdSolution/4 AsIs: t.IntrinsicFunction0/5 AsIs: (/9 } Tile{ HalfReuse: # Symbol/13 } Tile{ Reuse: # Identifier/21 } Tile{ AsIs: e.2/22 } Tile{ AsIs: )/14 } Tile{ AsIs: e./24 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_MakeColdSolution]);
    refalrts::reinit_ident(context[13], identifiers[ident_Symbol]);
    refalrts::update_ident(context[21], identifiers[ident_Identifier]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::splice_to_freelist_open( vm, context[9], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IntrinsicCall$2=2:1@3/4 t.IntrinsicFunction0/5 (/9 e.2/7 )/10 (/13 e./11 )/14 e.dyn/2 >/1
  // closed e.2 as range 7
  // closed e. as range 11
  // closed e.dyn as range 2
  //DEBUG: t.IntrinsicFunction0: 5
  //DEBUG: e.2: 7
  //DEBUG: e.: 11
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2:1@0/4 AsIs: t.IntrinsicFunction0/5 AsIs: (/9 } (/15 Tile{ HalfReuse: # Symbol/10 } # Identifier/16 Tile{ AsIs: e.2/7 } Tile{ HalfReuse: )/13 AsIs: e./11 AsIs: )/14 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Identifier]);
  refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2B1Z0]);
  refalrts::reinit_ident(context[10], identifiers[ident_Symbol]);
  refalrts::reinit_close_bracket(context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[14] );
  refalrts::link_brackets( context[15], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[13];
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_elem( res, context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_IntrinsicCall_S2A2B1Z3("IntrinsicCall$2=2:1@3", COOKIE1_, COOKIE2_, func_gen_IntrinsicCall_S2A2B1Z3);


static refalrts::FnResult func_gen_IntrinsicCall_S2A2B1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & IntrinsicCall$2=2:1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & IntrinsicCall$2=2:1@4/4 t.new1/5 t.new2/7 (/11 e.new3/9 )/12 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new3 as range 9
  // closed e.new4 as range 2
  do {
    // </0 & IntrinsicCall$2=2:1@4/4 t.new5/5 t.new6/7 (/11 e.new9/13 )/12 s.new7/17 e.new8/15 >/1
    context[13] = context[9];
    context[14] = context[10];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.new9 as range 13
    if( ! refalrts::svar_left( context[17], context[15], context[16] ) )
      continue;
    // closed e.new8 as range 15
    do {
      // </0 & IntrinsicCall$2=2:1@4/4 t.IntrinsicFunction0/5 t./7 (/11 e./18 )/12 # Ok/17 e.Result/20 >/1
      context[18] = context[13];
      context[19] = context[14];
      context[20] = context[15];
      context[21] = context[16];
      if( ! refalrts::ident_term( identifiers[ident_Ok], context[17] ) )
        continue;
      // closed e. as range 18
      // closed e.Result as range 20
      //DEBUG: t.IntrinsicFunction0: 5
      //DEBUG: t.: 7
      //DEBUG: e.: 18
      //DEBUG: e.Result: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.IntrinsicFunction0/5 t./7 {REMOVED TILE} e./18 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: (/11 } # Var/22 'e'/23 # DRIVEN/24 Tile{ AsIs: )/12 HalfReuse: ':'/17 AsIs: e.Result/20 HalfReuse: )/1 } (/25 )/26 )/27 Tile{ ]] }
      refalrts::alloc_ident(vm, context[22], identifiers[ident_Var]);
      refalrts::alloc_char(vm, context[23], 'e');
      refalrts::alloc_ident(vm, context[24], identifiers[ident_DRIVEN]);
      refalrts::alloc_open_bracket(vm, context[25]);
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_char(context[17], ':');
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[27] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[4], context[1] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[12], context[1] );
      res = refalrts::splice_evar( res, context[22], context[24] );
      res = refalrts::splice_elem( res, context[11] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & IntrinsicCall$2=2:1@4/4 t.IntrinsicFunction0/5 t./7 (/11 e./18 )/12 # MakeColdCall/17 >/1
    context[18] = context[13];
    context[19] = context[14];
    if( ! refalrts::ident_term( identifiers[ident_MakeColdCall], context[17] ) )
      continue;
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    // closed e. as range 18
    //DEBUG: t.IntrinsicFunction0: 5
    //DEBUG: t.: 7
    //DEBUG: e.: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/11 {REMOVED TILE} )/12 # MakeColdCall/17 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeColdSolution/4 AsIs: t.IntrinsicFunction0/5 AsIs: t./7 } Tile{ AsIs: e./18 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_MakeColdSolution]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[18], context[19] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IntrinsicCall$2=2:1@4/4 t.IntrinsicFunction0/5 t./7 (/11 e./9 )/12 e.dyn/2 >/1
  // closed e. as range 9
  // closed e.dyn as range 2
  //DEBUG: t.IntrinsicFunction0: 5
  //DEBUG: t.: 7
  //DEBUG: e.: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & IntrinsicCall$2=2:1@0/4 AsIs: t.IntrinsicFunction0/5 } Tile{ AsIs: (/11 } Tile{ AsIs: t./7 } Tile{ AsIs: e./9 } Tile{ AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_IntrinsicCall_S2A2B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_IntrinsicCall_S2A2B1Z4("IntrinsicCall$2=2:1@4", COOKIE1_, COOKIE2_, func_gen_IntrinsicCall_S2A2B1Z4);


static refalrts::FnResult func_gen_Map_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Map@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@3/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@3/4 (/7 # Symbol/13 s.new3/14 s.new4/15 )/8 e.new5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = refalrts::ident_left( identifiers[ident_Symbol], context[11], context[12] );
      if( ! context[13] )
        continue;
      // closed e.new5 as range 9
      if( ! refalrts::svar_left( context[14], context[11], context[12] ) )
        continue;
      if( ! refalrts::svar_left( context[15], context[11], context[12] ) )
        continue;
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      do {
        // </0 & Map@3/4 (/7 # Symbol/13 # Char/14 s.new6/15 )/8 e.new7/16 >/1
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Char], context[14] ) )
          continue;
        // closed e.new7 as range 16
        do {
          // </0 & Map@3/4 (/7 # Symbol/13 # Char/14 '-'/15 )/8 e.Tail/18 >/1
          context[18] = context[16];
          context[19] = context[17];
          if( ! refalrts::char_term( '-', context[15] ) )
            continue;
          // closed e.Tail as range 18
          //DEBUG: e.Tail: 18

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & Map@3/4 (/7 # Symbol/13 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: '-'/14 HalfReuse: </15 HalfReuse: & Map@3/8 AsIs: e.Tail/18 AsIs: >/1 ]] }
          refalrts::reinit_char(context[14], '-');
          refalrts::reinit_open_call(context[15]);
          refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z3]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[15] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@3/4 (/7 # Symbol/13 # Char/14 '+'/15 )/8 e.Tail/18 >/1
        context[18] = context[16];
        context[19] = context[17];
        if( ! refalrts::char_term( '+', context[15] ) )
          continue;
        // closed e.Tail as range 18
        //DEBUG: e.Tail: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & Map@3/4 (/7 # Symbol/13 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: '+'/14 HalfReuse: </15 HalfReuse: & Map@3/8 AsIs: e.Tail/18 AsIs: >/1 ]] }
        refalrts::reinit_char(context[14], '+');
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z3]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[15] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@3/4 (/7 # Symbol/13 # Number/14 s.n/15 )/8 e.Tail/16 >/1
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_Number], context[14] ) )
        continue;
      // closed e.Tail as range 16
      //DEBUG: s.n: 15
      //DEBUG: e.Tail: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/7 # Symbol/13 # Number/14 s.n/15 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: s.n15 /0 HalfReuse: </4 } Tile{ HalfReuse: & Map@3/8 AsIs: e.Tail/16 AsIs: >/1 ]] }
      refalrts::reinit_svar( context[0], context[15] );
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@3/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & SymbolsToNumber\1*3/4 AsIs: t.Next/7 } >/11 </12 & Map@3/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z3]);
    refalrts::update_name(context[4], functions[efunc_gen_SymbolsToNumber_L1D3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@3/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@3/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@3/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & SymbolsToNumber\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_SymbolsToNumber_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z3("Map@3", COOKIE1_, COOKIE2_, func_gen_Map_Z3);


static refalrts::FnResult func_gen_Map_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Map@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@4/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@4/4 s.new3/7 e.new4/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      if( ! refalrts::svar_term( context[7], context[7] ) )
        continue;
      // closed e.new4 as range 9
      do {
        // </0 & Map@4/4 '-'/7 e.Tail/11 >/1
        context[11] = context[9];
        context[12] = context[10];
        if( ! refalrts::char_term( '-', context[7] ) )
          continue;
        // closed e.Tail as range 11
        //DEBUG: e.Tail: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/13 # Symbol/14 # Char/15 '-'/16 Tile{ HalfReuse: )/0 HalfReuse: </4 HalfReuse: & Map@4/7 AsIs: e.Tail/11 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[13]);
        refalrts::alloc_ident(vm, context[14], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[15], identifiers[ident_Char]);
        refalrts::alloc_char(vm, context[16], '-');
        refalrts::reinit_close_bracket(context[0]);
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_gen_Map_Z4]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[4] );
        refalrts::link_brackets( context[13], context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[0];
        res = refalrts::splice_evar( res, context[13], context[16] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@4/4 '+'/7 e.Tail/11 >/1
        context[11] = context[9];
        context[12] = context[10];
        if( ! refalrts::char_term( '+', context[7] ) )
          continue;
        // closed e.Tail as range 11
        //DEBUG: e.Tail: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/13 # Symbol/14 # Char/15 '+'/16 Tile{ HalfReuse: )/0 HalfReuse: </4 HalfReuse: & Map@4/7 AsIs: e.Tail/11 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[13]);
        refalrts::alloc_ident(vm, context[14], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[15], identifiers[ident_Char]);
        refalrts::alloc_char(vm, context[16], '+');
        refalrts::reinit_close_bracket(context[0]);
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_gen_Map_Z4]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[4] );
        refalrts::link_brackets( context[13], context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[0];
        res = refalrts::splice_evar( res, context[13], context[16] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@4/4 s.n/7 e.Tail/11 >/1
      context[11] = context[9];
      context[12] = context[10];
      // closed e.Tail as range 11
      //DEBUG: s.n: 7
      //DEBUG: e.Tail: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/13 # Symbol/14 # Number/15 Tile{ AsIs: s.n/7 } )/16 Tile{ AsIs: </0 AsIs: & Map@4/4 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[13]);
      refalrts::alloc_ident(vm, context[14], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[15], identifiers[ident_Number]);
      refalrts::alloc_close_bracket(vm, context[16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[13], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@4/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & NumberToSymbols\1*3/4 AsIs: t.Next/7 } >/11 </12 & Map@4/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z4]);
    refalrts::update_name(context[4], functions[efunc_gen_NumberToSymbols_L1D3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@4/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@4/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@4/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & NumberToSymbols\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_NumberToSymbols_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z4("Map@4", COOKIE1_, COOKIE2_, func_gen_Map_Z4);


static refalrts::FnResult func_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & CheckArgs-Intrinsic-StaticSubstitution@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & CheckArgs-Intrinsic-StaticSubstitution@1/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & CheckArgs-Intrinsic-StaticSubstitution@1/4 (/7 s.new3/13 e.new4/11 )/8 e.new5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new4 as range 11
      do {
        // </0 & CheckArgs-Intrinsic-StaticSubstitution@1/4 (/7 # Symbol/13 # Number/18 e.2/14 )/8 e./16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Symbol], context[13] ) )
          continue;
        context[18] = refalrts::ident_left( identifiers[ident_Number], context[14], context[15] );
        if( ! context[18] )
          continue;
        // closed e.2 as range 14
        // closed e. as range 16
        //DEBUG: e.2: 14
        //DEBUG: e.: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & CheckArgs-Intrinsic-StaticSubstitution@1/4 (/7 # Symbol/13 # Number/18 e.2/14 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CheckArgs-Intrinsic-StaticSubstitution@1/8 AsIs: e./16 AsIs: >/1 ]] }
        refalrts::reinit_name(context[8], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & CheckArgs-Intrinsic-StaticSubstitution@1/4 (/7 # Var/13 e.1/14 )/8 e./16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Var], context[13] ) )
          continue;
        // closed e.1 as range 14
        // closed e. as range 16
        //DEBUG: e.1: 14
        //DEBUG: e.: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & CheckArgs-Intrinsic-StaticSubstitution@1/4 (/7 # Var/13 e.1/14 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CheckArgs-Intrinsic-StaticSubstitution@1/8 AsIs: e./16 AsIs: >/1 ]] }
        refalrts::reinit_name(context[8], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & CheckArgs-Intrinsic-StaticSubstitution@1/4 (/7 # ColdCallBrackets/13 e.1/14 )/8 e./16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[13] ) )
        continue;
      // closed e.1 as range 14
      // closed e. as range 16
      //DEBUG: e.1: 14
      //DEBUG: e.: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & CheckArgs-Intrinsic-StaticSubstitution@1/4 (/7 # ColdCallBrackets/13 e.1/14 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CheckArgs-Intrinsic-StaticSubstitution@1/8 AsIs: e./16 AsIs: >/1 ]] }
      refalrts::reinit_name(context[8], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckArgs-Intrinsic-StaticSubstitution@1/4 t./7 e./9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e. as range 9
    //DEBUG: t.: 7
    //DEBUG: e.: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckArgs-Intrinsic-StaticSubstitution@1/4 t./7 e./9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_False]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckArgs-Intrinsic-StaticSubstitution@1/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckArgs-Intrinsic-StaticSubstitution@1/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_True]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckArgs-Intrinsic-StaticSubstitution@1/4 e.Args0/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args0 as range 5
    //DEBUG: e.Args0: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </7 Tile{ HalfReuse: & CheckArgs-Intrinsic-StaticSubstitution:1*5/0 HalfReuse: # Number/4 AsIs: e.Args0/5 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::reinit_name(context[0], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_B1D5]);
    refalrts::reinit_ident(context[4], identifiers[ident_Number]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckArgs-Intrinsic-StaticSubstitution@1/4 e.Args0/2 >/1
  // closed e.Args0 as range 2
  //DEBUG: e.Args0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckArgs-Intrinsic-StaticSubstitution@0/4 } (/5 Tile{ AsIs: e.Args0/2 } )/6 # Number/7 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_ident(vm, context[7], identifiers[ident_Number]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z1("CheckArgs-Intrinsic-StaticSubstitution@1", COOKIE1_, COOKIE2_, func_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z1);


static refalrts::FnResult func_gen_StaticSubstitution_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & StaticSubstitution@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & StaticSubstitution@1/4 e.Args0/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args0 as range 5
    //DEBUG: e.Args0: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@9/4 AsIs: e.Args0/5 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & StaticSubstitution@1/4 e.Args0/2 >/1
  // closed e.Args0 as range 2
  //DEBUG: e.Args0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & StaticSubstitution@0/4 } (/5 Tile{ AsIs: e.Args0/2 } )/6 (/7"Chr"/8 )/10 & Chr@0/11 # Number/12 # Char/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_chars(vm, context[8], context[9], "Chr", 3);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Chr_Z0]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Number]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Char]);
  refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[10] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_StaticSubstitution_Z1("StaticSubstitution@1", COOKIE1_, COOKIE2_, func_gen_StaticSubstitution_Z1);


static refalrts::FnResult func_gen_Map_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & Map@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@5/4 s.new1/5 s.new2/6 s.new3/7 (/10 e.new4/8 )/11 e.new5/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  // closed e.new4 as range 8
  // closed e.new5 as range 2
  do {
    // </0 & Map@5/4 s.new6/5 s.new7/6 s.new8/7 (/10 e.new11/12 )/11 t.new9/16 e.new10/14 >/1
    context[12] = context[8];
    context[13] = context[9];
    context[14] = context[2];
    context[15] = context[3];
    // closed e.new11 as range 12
    context[17] = refalrts::tvar_left( context[16], context[14], context[15] );
    if( ! context[17] )
      continue;
    // closed e.new10 as range 14
    do {
      // </0 & Map@5/4 s.new12/5 s.new13/6 s.new14/7 (/10 e.new18/18 )/11 (/16 s.new15/24 e.new16/22 )/17 e.new17/20 >/1
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = context[15];
      context[22] = 0;
      context[23] = 0;
      if( ! refalrts::brackets_term( context[22], context[23], context[16] ) )
        continue;
      // closed e.new18 as range 18
      // closed e.new17 as range 20
      if( ! refalrts::svar_left( context[24], context[22], context[23] ) )
        continue;
      // closed e.new16 as range 22
      do {
        // </0 & Map@5/4 s.SymbolFrom/5 s.SymbolTo/6 s.Func/7 (/10 e.FuncName/25 )/11 (/16 # Symbol/24 s.SymbolFrom/31 s.n/32 )/17 e.Tail/29 >/1
        context[25] = context[18];
        context[26] = context[19];
        context[27] = context[22];
        context[28] = context[23];
        context[29] = context[20];
        context[30] = context[21];
        if( ! refalrts::ident_term( identifiers[ident_Symbol], context[24] ) )
          continue;
        if( ! refalrts::repeated_stvar_left( vm, context[31], context[5], context[27], context[28] ) )
          continue;
        // closed e.FuncName as range 25
        // closed e.Tail as range 29
        if( ! refalrts::svar_left( context[32], context[27], context[28] ) )
          continue;
        if( ! refalrts::empty_seq( context[27], context[28] ) )
          continue;
        //DEBUG: s.SymbolFrom: 5
        //DEBUG: s.SymbolTo: 6
        //DEBUG: s.Func: 7
        //DEBUG: e.FuncName: 25
        //DEBUG: e.Tail: 29
        //DEBUG: s.n: 32

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.SymbolFrom/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/16 AsIs: # Symbol/24 } s.SymbolTo/6/33 </34 s.Func/7/35 Tile{ AsIs: s.n/32 HalfReuse: >/17 } )/36 Tile{ AsIs: </0 AsIs: & Map@5/4 AsIs: s.SymbolFrom/5 AsIs: s.SymbolTo/6 AsIs: s.Func/7 AsIs: (/10 AsIs: e.FuncName/25 AsIs: )/11 } Tile{ AsIs: e.Tail/29 } Tile{ AsIs: >/1 ]] }
        refalrts::copy_stvar(vm, context[33], context[6]);
        refalrts::alloc_open_call(vm, context[34]);
        refalrts::copy_stvar(vm, context[35], context[7]);
        refalrts::alloc_close_bracket(vm, context[36]);
        refalrts::reinit_close_call(context[17]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[10], context[11] );
        refalrts::link_brackets( context[16], context[36] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[34] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[0], context[11] );
        res = refalrts::splice_elem( res, context[36] );
        res = refalrts::splice_evar( res, context[32], context[17] );
        res = refalrts::splice_evar( res, context[33], context[35] );
        res = refalrts::splice_evar( res, context[16], context[24] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@5/4 s.SymbolFrom/5 s.SymbolTo/6 s.Func/7 (/10 e.FuncName/25 )/11 (/16 # Var/24 e.0/27 )/17 e.Tail/29 >/1
        context[25] = context[18];
        context[26] = context[19];
        context[27] = context[22];
        context[28] = context[23];
        context[29] = context[20];
        context[30] = context[21];
        if( ! refalrts::ident_term( identifiers[ident_Var], context[24] ) )
          continue;
        // closed e.FuncName as range 25
        // closed e.0 as range 27
        // closed e.Tail as range 29
        //DEBUG: s.SymbolFrom: 5
        //DEBUG: s.SymbolTo: 6
        //DEBUG: s.Func: 7
        //DEBUG: e.FuncName: 25
        //DEBUG: e.0: 27
        //DEBUG: e.Tail: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/31 # ColdCallBrackets/32 (/33 # Symbol/34 # Name/35 e.FuncName/25/36 )/38 Tile{ AsIs: (/16 AsIs: # Var/24 AsIs: e.0/27 AsIs: )/17 } )/39 Tile{ AsIs: </0 AsIs: & Map@5/4 AsIs: s.SymbolFrom/5 AsIs: s.SymbolTo/6 AsIs: s.Func/7 AsIs: (/10 AsIs: e.FuncName/25 AsIs: )/11 } Tile{ AsIs: e.Tail/29 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[31]);
        refalrts::alloc_ident(vm, context[32], identifiers[ident_ColdCallBrackets]);
        refalrts::alloc_open_bracket(vm, context[33]);
        refalrts::alloc_ident(vm, context[34], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[35], identifiers[ident_Name]);
        refalrts::copy_evar(vm, context[36], context[37], context[25], context[26]);
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::alloc_close_bracket(vm, context[39]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[10], context[11] );
        refalrts::link_brackets( context[31], context[39] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::link_brackets( context[33], context[38] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[0], context[11] );
        res = refalrts::splice_elem( res, context[39] );
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[31], context[38] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@5/4 s.SymbolFrom/5 s.SymbolTo/6 s.Func/7 (/10 e.FuncName/25 )/11 (/16 # ColdCallBrackets/24 e.0/27 )/17 e.Tail/29 >/1
      context[25] = context[18];
      context[26] = context[19];
      context[27] = context[22];
      context[28] = context[23];
      context[29] = context[20];
      context[30] = context[21];
      if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[24] ) )
        continue;
      // closed e.FuncName as range 25
      // closed e.0 as range 27
      // closed e.Tail as range 29
      //DEBUG: s.SymbolFrom: 5
      //DEBUG: s.SymbolTo: 6
      //DEBUG: s.Func: 7
      //DEBUG: e.FuncName: 25
      //DEBUG: e.0: 27
      //DEBUG: e.Tail: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/31 # ColdCallBrackets/32 (/33 # Symbol/34 # Name/35 e.FuncName/25/36 )/38 Tile{ AsIs: (/16 AsIs: # ColdCallBrackets/24 AsIs: e.0/27 AsIs: )/17 } )/39 Tile{ AsIs: </0 AsIs: & Map@5/4 AsIs: s.SymbolFrom/5 AsIs: s.SymbolTo/6 AsIs: s.Func/7 AsIs: (/10 AsIs: e.FuncName/25 AsIs: )/11 } Tile{ AsIs: e.Tail/29 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_ColdCallBrackets]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_ident(vm, context[34], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[35], identifiers[ident_Name]);
      refalrts::copy_evar(vm, context[36], context[37], context[25], context[26]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_close_bracket(vm, context[39]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[10], context[11] );
      refalrts::link_brackets( context[31], context[39] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[33], context[38] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[0], context[11] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[31], context[38] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@5/4 s.SymbolFrom/5 s.SymbolTo/6 s.Func/7 (/10 e.FuncName/18 )/11 t.Next/16 e.Tail/20 >/1
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    context[21] = context[15];
    // closed e.FuncName as range 18
    // closed e.Tail as range 20
    //DEBUG: t.Next: 16
    //DEBUG: s.SymbolFrom: 5
    //DEBUG: s.SymbolTo: 6
    //DEBUG: s.Func: 7
    //DEBUG: e.FuncName: 18
    //DEBUG: e.Tail: 20

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & StaticSubstitution\1*3/4 AsIs: s.SymbolFrom/5 AsIs: s.SymbolTo/6 AsIs: s.Func/7 AsIs: (/10 AsIs: e.FuncName/18 AsIs: )/11 AsIs: t.Next/16 } >/22 </23 & Map@5/24 s.SymbolFrom/5/25 s.SymbolTo/6/26 s.Func/7/27 (/28 e.FuncName/18/29 )/31 Tile{ AsIs: e.Tail/20 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_Map_Z5]);
    refalrts::copy_stvar(vm, context[25], context[5]);
    refalrts::copy_stvar(vm, context[26], context[6]);
    refalrts::copy_stvar(vm, context[27], context[7]);
    refalrts::alloc_open_bracket(vm, context[28]);
    refalrts::copy_evar(vm, context[29], context[30], context[18], context[19]);
    refalrts::alloc_close_bracket(vm, context[31]);
    refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_L1D3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[28], context[31] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[22], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@5/4 s.SymbolFrom/5 s.SymbolTo/6 s.Func/7 (/10 e.FuncName/12 )/11 >/1
    context[12] = context[8];
    context[13] = context[9];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.FuncName as range 12
    //DEBUG: s.SymbolFrom: 5
    //DEBUG: s.SymbolTo: 6
    //DEBUG: s.Func: 7
    //DEBUG: e.FuncName: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@5/4 s.SymbolFrom/5 s.SymbolTo/6 s.Func/7 (/10 e.FuncName/12 )/11 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@5/4 s.SymbolFrom/5 s.SymbolTo/6 s.Func/7 (/10 e.FuncName/8 )/11 e.items/2 >/1
  // closed e.FuncName as range 8
  // closed e.items as range 2
  //DEBUG: s.SymbolFrom: 5
  //DEBUG: s.SymbolTo: 6
  //DEBUG: s.Func: 7
  //DEBUG: e.FuncName: 8
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </12 & Map@0/13 Tile{ HalfReuse: [*]/0 Reuse: & StaticSubstitution\1@0/4 AsIs: s.SymbolFrom/5 AsIs: s.SymbolTo/6 AsIs: s.Func/7 AsIs: (/10 AsIs: e.FuncName/8 AsIs: )/11 } {*}/14 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[14], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[12] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[14] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z5("Map@5", COOKIE1_, COOKIE2_, func_gen_Map_Z5);


static refalrts::FnResult func_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & CheckArgs-Intrinsic-StaticSubstitution@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & CheckArgs-Intrinsic-StaticSubstitution@2/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & CheckArgs-Intrinsic-StaticSubstitution@2/4 (/7 s.new3/13 e.new4/11 )/8 e.new5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new4 as range 11
      do {
        // </0 & CheckArgs-Intrinsic-StaticSubstitution@2/4 (/7 # Symbol/13 # Char/18 e.2/14 )/8 e./16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Symbol], context[13] ) )
          continue;
        context[18] = refalrts::ident_left( identifiers[ident_Char], context[14], context[15] );
        if( ! context[18] )
          continue;
        // closed e.2 as range 14
        // closed e. as range 16
        //DEBUG: e.2: 14
        //DEBUG: e.: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & CheckArgs-Intrinsic-StaticSubstitution@2/4 (/7 # Symbol/13 # Char/18 e.2/14 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CheckArgs-Intrinsic-StaticSubstitution@2/8 AsIs: e./16 AsIs: >/1 ]] }
        refalrts::reinit_name(context[8], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z2]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & CheckArgs-Intrinsic-StaticSubstitution@2/4 (/7 # Var/13 e.1/14 )/8 e./16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Var], context[13] ) )
          continue;
        // closed e.1 as range 14
        // closed e. as range 16
        //DEBUG: e.1: 14
        //DEBUG: e.: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & CheckArgs-Intrinsic-StaticSubstitution@2/4 (/7 # Var/13 e.1/14 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CheckArgs-Intrinsic-StaticSubstitution@2/8 AsIs: e./16 AsIs: >/1 ]] }
        refalrts::reinit_name(context[8], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z2]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & CheckArgs-Intrinsic-StaticSubstitution@2/4 (/7 # ColdCallBrackets/13 e.1/14 )/8 e./16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[13] ) )
        continue;
      // closed e.1 as range 14
      // closed e. as range 16
      //DEBUG: e.1: 14
      //DEBUG: e.: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & CheckArgs-Intrinsic-StaticSubstitution@2/4 (/7 # ColdCallBrackets/13 e.1/14 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CheckArgs-Intrinsic-StaticSubstitution@2/8 AsIs: e./16 AsIs: >/1 ]] }
      refalrts::reinit_name(context[8], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z2]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckArgs-Intrinsic-StaticSubstitution@2/4 t./7 e./9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e. as range 9
    //DEBUG: t.: 7
    //DEBUG: e.: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckArgs-Intrinsic-StaticSubstitution@2/4 t./7 e./9 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_False]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckArgs-Intrinsic-StaticSubstitution@2/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckArgs-Intrinsic-StaticSubstitution@2/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_True]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckArgs-Intrinsic-StaticSubstitution@2/4 e.Args0/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args0 as range 5
    //DEBUG: e.Args0: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </7 Tile{ HalfReuse: & CheckArgs-Intrinsic-StaticSubstitution:1*5/0 HalfReuse: # Char/4 AsIs: e.Args0/5 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[7]);
    refalrts::reinit_name(context[0], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_B1D5]);
    refalrts::reinit_ident(context[4], identifiers[ident_Char]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckArgs-Intrinsic-StaticSubstitution@2/4 e.Args0/2 >/1
  // closed e.Args0 as range 2
  //DEBUG: e.Args0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckArgs-Intrinsic-StaticSubstitution@0/4 } (/5 Tile{ AsIs: e.Args0/2 } )/6 # Char/7 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_ident(vm, context[7], identifiers[ident_Char]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z2("CheckArgs-Intrinsic-StaticSubstitution@2", COOKIE1_, COOKIE2_, func_gen_CheckArgsm_Intrinsicm_StaticSubstitution_Z2);


static refalrts::FnResult func_gen_StaticSubstitution_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & StaticSubstitution@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & StaticSubstitution@2/4 e.Args0/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args0 as range 5
    //DEBUG: e.Args0: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@10/4 AsIs: e.Args0/5 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & StaticSubstitution@2/4 e.Args0/2 >/1
  // closed e.Args0 as range 2
  //DEBUG: e.Args0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & StaticSubstitution@0/4 } (/5 Tile{ AsIs: e.Args0/2 } )/6 (/7"Ord"/8 )/10 & Ord@0/11 # Char/12 # Number/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_chars(vm, context[8], context[9], "Ord", 3);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Ord_Z0]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Char]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Number]);
  refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[10] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_StaticSubstitution_Z2("StaticSubstitution@2", COOKIE1_, COOKIE2_, func_gen_StaticSubstitution_Z2);


static refalrts::FnResult func_gen_StaticSubstitution_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & StaticSubstitution@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & StaticSubstitution@3/4 e.Args0/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args0 as range 5
    //DEBUG: e.Args0: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@11/4 AsIs: e.Args0/5 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & StaticSubstitution@3/4 e.Args0/2 >/1
  // closed e.Args0 as range 2
  //DEBUG: e.Args0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & StaticSubstitution@0/4 } (/5 Tile{ AsIs: e.Args0/2 } )/6 (/7"Upper"/8 )/10 & Upper@0/11 # Char/12 # Char/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_chars(vm, context[8], context[9], "Upper", 5);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Upper_Z0]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Char]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Char]);
  refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[10] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_StaticSubstitution_Z3("StaticSubstitution@3", COOKIE1_, COOKIE2_, func_gen_StaticSubstitution_Z3);


static refalrts::FnResult func_gen_StaticSubstitution_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & StaticSubstitution@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & StaticSubstitution@4/4 e.Args0/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Args0 as range 5
    //DEBUG: e.Args0: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@12/4 AsIs: e.Args0/5 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & StaticSubstitution@4/4 e.Args0/2 >/1
  // closed e.Args0 as range 2
  //DEBUG: e.Args0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & StaticSubstitution@0/4 } (/5 Tile{ AsIs: e.Args0/2 } )/6 (/7"Lower"/8 )/10 & Lower@0/11 # Char/12 # Char/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_chars(vm, context[8], context[9], "Lower", 5);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Lower_Z0]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Char]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Char]);
  refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[10] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_StaticSubstitution_Z4("StaticSubstitution@4", COOKIE1_, COOKIE2_, func_gen_StaticSubstitution_Z4);


static refalrts::FnResult func_gen_DoOptExprm_MakeSubstitutions_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 76 elems
  refalrts::Iter context[76];
  refalrts::zeros( context, 76 );
  // </0 & DoOptExpr-MakeSubstitutions@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoOptExpr-MakeSubstitutions@1/4 s.new1/5 (/8 e.new2/6 )/9 e.new3/2 t.new4/10 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.new2 as range 6
  context[11] = refalrts::tvar_right( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & DoOptExpr-MakeSubstitutions@1/4 s.new5/5 (/8 e.new11/12 )/9 e.new10/14 (/10 # Function/18 (/21 e.new6/19 )/22 # Sentences/23 (/26 (/30 e.new7/28 )/31 (/34 e.new8/32 )/35 )/27 e.new9/16 )/11 >/1
    context[12] = context[6];
    context[13] = context[7];
    context[14] = context[2];
    context[15] = context[3];
    context[16] = 0;
    context[17] = 0;
    if( ! refalrts::brackets_term( context[16], context[17], context[10] ) )
      continue;
    context[18] = refalrts::ident_left( identifiers[ident_Function], context[16], context[17] );
    if( ! context[18] )
      continue;
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[16], context[17] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    context[23] = refalrts::ident_left( identifiers[ident_Sentences], context[16], context[17] );
    if( ! context[23] )
      continue;
    context[24] = 0;
    context[25] = 0;
    context[26] = refalrts::brackets_left( context[24], context[25], context[16], context[17] );
    if( ! context[26] )
      continue;
    refalrts::bracket_pointers(context[26], context[27]);
    context[28] = 0;
    context[29] = 0;
    context[30] = refalrts::brackets_left( context[28], context[29], context[24], context[25] );
    if( ! context[30] )
      continue;
    refalrts::bracket_pointers(context[30], context[31]);
    context[32] = 0;
    context[33] = 0;
    context[34] = refalrts::brackets_left( context[32], context[33], context[24], context[25] );
    if( ! context[34] )
      continue;
    refalrts::bracket_pointers(context[34], context[35]);
    if( ! refalrts::empty_seq( context[24], context[25] ) )
      continue;
    // closed e.new11 as range 12
    // closed e.new10 as range 14
    // closed e.new6 as range 19
    // closed e.new7 as range 28
    // closed e.new8 as range 32
    // closed e.new9 as range 16
    do {
      // </0 & DoOptExpr-MakeSubstitutions@1/4 s.DriveMode$a/5 (/8 e.UsedVars/36 )/9 e.Args0/38 (/10 # Function/18 (/21 e.Name/40 )/22 # Sentences/23 (/26 (/30 e.LS/42 )/31 (/34 (/50 # CallBrackets/52 (/55 # Symbol/57 # Name/58 '_'/59 '_'/60 'S'/61 't'/62 'e'/63 'p'/64 '-'/65 'D'/66 'r'/67 'o'/68 'p'/69 )/56 )/51 e./44 )/35 )/27 e.Rest/46 )/11 >/1
      context[36] = context[12];
      context[37] = context[13];
      context[38] = context[14];
      context[39] = context[15];
      context[40] = context[19];
      context[41] = context[20];
      context[42] = context[28];
      context[43] = context[29];
      context[44] = context[32];
      context[45] = context[33];
      context[46] = context[16];
      context[47] = context[17];
      context[48] = 0;
      context[49] = 0;
      context[50] = refalrts::brackets_left( context[48], context[49], context[44], context[45] );
      if( ! context[50] )
        continue;
      refalrts::bracket_pointers(context[50], context[51]);
      context[52] = refalrts::ident_left( identifiers[ident_CallBrackets], context[48], context[49] );
      if( ! context[52] )
        continue;
      context[53] = 0;
      context[54] = 0;
      context[55] = refalrts::brackets_left( context[53], context[54], context[48], context[49] );
      if( ! context[55] )
        continue;
      refalrts::bracket_pointers(context[55], context[56]);
      context[57] = refalrts::ident_left( identifiers[ident_Symbol], context[53], context[54] );
      if( ! context[57] )
        continue;
      context[58] = refalrts::ident_left( identifiers[ident_Name], context[53], context[54] );
      if( ! context[58] )
        continue;
      context[59] = refalrts::char_left( '_', context[53], context[54] );
      if( ! context[59] )
        continue;
      context[60] = refalrts::char_left( '_', context[53], context[54] );
      if( ! context[60] )
        continue;
      context[61] = refalrts::char_left( 'S', context[53], context[54] );
      if( ! context[61] )
        continue;
      context[62] = refalrts::char_left( 't', context[53], context[54] );
      if( ! context[62] )
        continue;
      context[63] = refalrts::char_left( 'e', context[53], context[54] );
      if( ! context[63] )
        continue;
      context[64] = refalrts::char_left( 'p', context[53], context[54] );
      if( ! context[64] )
        continue;
      context[65] = refalrts::char_left( '-', context[53], context[54] );
      if( ! context[65] )
        continue;
      context[66] = refalrts::char_left( 'D', context[53], context[54] );
      if( ! context[66] )
        continue;
      context[67] = refalrts::char_left( 'r', context[53], context[54] );
      if( ! context[67] )
        continue;
      context[68] = refalrts::char_left( 'o', context[53], context[54] );
      if( ! context[68] )
        continue;
      context[69] = refalrts::char_left( 'p', context[53], context[54] );
      if( ! context[69] )
        continue;
      if( ! refalrts::empty_seq( context[53], context[54] ) )
        continue;
      if( ! refalrts::empty_seq( context[48], context[49] ) )
        continue;
      // closed e.UsedVars as range 36
      // closed e.Args0 as range 38
      // closed e.Name as range 40
      // closed e.LS as range 42
      // closed e. as range 44
      // closed e.Rest as range 46
      //DEBUG: s.DriveMode$a: 5
      //DEBUG: e.UsedVars: 36
      //DEBUG: e.Args0: 38
      //DEBUG: e.Name: 40
      //DEBUG: e.LS: 42
      //DEBUG: e.: 44
      //DEBUG: e.Rest: 46

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Symbol/57 # Name/58 '_'/59 {REMOVED TILE} 't'/62 'e'/63 'p'/64 '-'/65 'D'/66 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoOptExpr-MakeSubstitutions$1:1@1/60 HalfReuse: (/61 } Tile{ AsIs: e./44 } Tile{ HalfReuse: )/4 AsIs: s.DriveMode$a/5 AsIs: (/8 AsIs: e.UsedVars/36 AsIs: )/9 } Tile{ AsIs: (/55 } Tile{ AsIs: e.Args0/38 } Tile{ AsIs: )/22 } Tile{ HalfReuse: (/69 } Tile{ AsIs: e.Name/40 } Tile{ AsIs: )/35 HalfReuse: (/27 AsIs: e.Rest/46 AsIs: )/11 HalfReuse: (/1 } e.LS/42/70 Tile{ HalfReuse: )/68 } Tile{ HalfReuse: </10 HalfReuse: & Solve/18 AsIs: (/21 } e.UsedVars/36/72 Tile{ AsIs: )/56 HalfReuse: (/51 } Tile{ HalfReuse: (/67 } e.Args0/38/74 Tile{ HalfReuse: )/23 HalfReuse: ':'/26 AsIs: (/30 AsIs: e.LS/42 AsIs: )/31 HalfReuse: )/34 HalfReuse: >/50 HalfReuse: >/52 } Tile{ ]] }
      refalrts::copy_evar(vm, context[70], context[71], context[42], context[43]);
      refalrts::copy_evar(vm, context[72], context[73], context[36], context[37]);
      refalrts::copy_evar(vm, context[74], context[75], context[38], context[39]);
      refalrts::reinit_name(context[60], functions[efunc_gen_DoOptExprm_MakeSubstitutions_S1B1Z1]);
      refalrts::reinit_open_bracket(context[61]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_open_bracket(context[69]);
      refalrts::reinit_open_bracket(context[27]);
      refalrts::reinit_open_bracket(context[1]);
      refalrts::reinit_close_bracket(context[68]);
      refalrts::reinit_open_call(context[10]);
      refalrts::reinit_name(context[18], functions[efunc_Solve]);
      refalrts::reinit_open_bracket(context[51]);
      refalrts::reinit_open_bracket(context[67]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_char(context[26], ':');
      refalrts::reinit_close_bracket(context[34]);
      refalrts::reinit_close_call(context[50]);
      refalrts::reinit_close_call(context[52]);
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[10] );
      refalrts::link_brackets( context[51], context[34] );
      refalrts::link_brackets( context[30], context[31] );
      refalrts::link_brackets( context[67], context[23] );
      refalrts::link_brackets( context[21], context[56] );
      refalrts::link_brackets( context[1], context[68] );
      refalrts::link_brackets( context[27], context[11] );
      refalrts::link_brackets( context[69], context[35] );
      refalrts::link_brackets( context[55], context[22] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[61], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[23], context[52] );
      res = refalrts::splice_evar( res, context[74], context[75] );
      res = refalrts::splice_elem( res, context[67] );
      res = refalrts::splice_evar( res, context[56], context[51] );
      res = refalrts::splice_evar( res, context[72], context[73] );
      res = refalrts::splice_evar( res, context[10], context[21] );
      res = refalrts::splice_elem( res, context[68] );
      res = refalrts::splice_evar( res, context[70], context[71] );
      res = refalrts::splice_evar( res, context[35], context[1] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[69] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_elem( res, context[55] );
      res = refalrts::splice_evar( res, context[4], context[9] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[60], context[61] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoOptExpr-MakeSubstitutions@1/4 s.DriveMode$a/5 (/8 e.UsedVars/36 )/9 e.Args0/38 (/10 # Function/18 (/21 e.Name/40 )/22 # Sentences/23 (/26 (/30 e.LS/42 )/31 (/34 e.RS/44 )/35 )/27 e.Rest/46 )/11 >/1
    context[36] = context[12];
    context[37] = context[13];
    context[38] = context[14];
    context[39] = context[15];
    context[40] = context[19];
    context[41] = context[20];
    context[42] = context[28];
    context[43] = context[29];
    context[44] = context[32];
    context[45] = context[33];
    context[46] = context[16];
    context[47] = context[17];
    // closed e.UsedVars as range 36
    // closed e.Args0 as range 38
    // closed e.Name as range 40
    // closed e.LS as range 42
    // closed e.RS as range 44
    // closed e.Rest as range 46
    //DEBUG: s.DriveMode$a: 5
    //DEBUG: e.UsedVars: 36
    //DEBUG: e.Args0: 38
    //DEBUG: e.Name: 40
    //DEBUG: e.LS: 42
    //DEBUG: e.RS: 44
    //DEBUG: e.Rest: 46

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & DoOptExpr-MakeSubstitutions$1:1@1/48 (/49 Tile{ AsIs: e.RS/44 } Tile{ HalfReuse: )/4 AsIs: s.DriveMode$a/5 AsIs: (/8 AsIs: e.UsedVars/36 AsIs: )/9 } (/50 Tile{ AsIs: e.Args0/38 } Tile{ AsIs: )/22 } (/51 Tile{ AsIs: e.Name/40 } Tile{ AsIs: )/35 HalfReuse: (/27 AsIs: e.Rest/46 AsIs: )/11 HalfReuse: (/1 } e.LS/42/52 )/54 Tile{ HalfReuse: </10 HalfReuse: & Solve/18 AsIs: (/21 } e.UsedVars/36/55 )/57 (/58 (/59 e.Args0/38/60 Tile{ HalfReuse: )/23 HalfReuse: ':'/26 AsIs: (/30 AsIs: e.LS/42 AsIs: )/31 HalfReuse: )/34 } >/62 >/63 Tile{ ]] }
    refalrts::alloc_name(vm, context[48], functions[efunc_gen_DoOptExprm_MakeSubstitutions_S1B1Z1]);
    refalrts::alloc_open_bracket(vm, context[49]);
    refalrts::alloc_open_bracket(vm, context[50]);
    refalrts::alloc_open_bracket(vm, context[51]);
    refalrts::copy_evar(vm, context[52], context[53], context[42], context[43]);
    refalrts::alloc_close_bracket(vm, context[54]);
    refalrts::copy_evar(vm, context[55], context[56], context[36], context[37]);
    refalrts::alloc_close_bracket(vm, context[57]);
    refalrts::alloc_open_bracket(vm, context[58]);
    refalrts::alloc_open_bracket(vm, context[59]);
    refalrts::copy_evar(vm, context[60], context[61], context[38], context[39]);
    refalrts::alloc_close_call(vm, context[62]);
    refalrts::alloc_close_call(vm, context[63]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_bracket(context[27]);
    refalrts::reinit_open_bracket(context[1]);
    refalrts::reinit_open_call(context[10]);
    refalrts::reinit_name(context[18], functions[efunc_Solve]);
    refalrts::reinit_close_bracket(context[23]);
    refalrts::reinit_char(context[26], ':');
    refalrts::reinit_close_bracket(context[34]);
    refalrts::push_stack( vm, context[63] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[62] );
    refalrts::push_stack( vm, context[10] );
    refalrts::link_brackets( context[58], context[34] );
    refalrts::link_brackets( context[30], context[31] );
    refalrts::link_brackets( context[59], context[23] );
    refalrts::link_brackets( context[21], context[57] );
    refalrts::link_brackets( context[1], context[54] );
    refalrts::link_brackets( context[27], context[11] );
    refalrts::link_brackets( context[51], context[35] );
    refalrts::link_brackets( context[50], context[22] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[49], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[62], context[63] );
    res = refalrts::splice_evar( res, context[23], context[34] );
    res = refalrts::splice_evar( res, context[60], context[61] );
    res = refalrts::splice_evar( res, context[57], context[59] );
    res = refalrts::splice_evar( res, context[55], context[56] );
    res = refalrts::splice_evar( res, context[10], context[21] );
    res = refalrts::splice_elem( res, context[54] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_evar( res, context[35], context[1] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_elem( res, context[50] );
    res = refalrts::splice_evar( res, context[4], context[9] );
    res = refalrts::splice_evar( res, context[44], context[45] );
    res = refalrts::splice_evar( res, context[48], context[49] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoOptExpr-MakeSubstitutions@1/4 s.DriveMode$a/5 (/8 e.UsedVars/12 )/9 e.Args0/14 t.RestFunction/10 >/1
    context[12] = context[6];
    context[13] = context[7];
    context[14] = context[2];
    context[15] = context[3];
    // closed e.UsedVars as range 12
    // closed e.Args0 as range 14
    //DEBUG: t.RestFunction: 10
    //DEBUG: s.DriveMode$a: 5
    //DEBUG: e.UsedVars: 12
    //DEBUG: e.Args0: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.DriveMode$a/5 (/8 e.UsedVars/12 )/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeColdSolution/4 } Tile{ AsIs: t.RestFunction/10 } Tile{ AsIs: e.Args0/14 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_MakeColdSolution]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptExpr-MakeSubstitutions@1/4 s.DriveMode$a/5 (/8 e.UsedVars/6 )/9 e.Args0/2 t.dyn0/10 >/1
  // closed e.UsedVars as range 6
  // closed e.Args0 as range 2
  //DEBUG: t.dyn0: 10
  //DEBUG: s.DriveMode$a: 5
  //DEBUG: e.UsedVars: 6
  //DEBUG: e.Args0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptExpr-MakeSubstitutions@0/4 AsIs: s.DriveMode$a/5 AsIs: (/8 AsIs: e.UsedVars/6 AsIs: )/9 } (/12 Tile{ AsIs: e.Args0/2 } )/13 (/14 )/15 Tile{ AsIs: t.dyn0/10 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_DoOptExprm_MakeSubstitutions_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[10];
  res = refalrts::splice_evar( res, context[13], context[15] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptExprm_MakeSubstitutions_Z1("DoOptExpr-MakeSubstitutions@1", COOKIE1_, COOKIE2_, func_gen_DoOptExprm_MakeSubstitutions_Z1);


static refalrts::FnResult func_gen_DoOptExprm_MakeSubstitutions_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 92 elems
  refalrts::Iter context[92];
  refalrts::zeros( context, 92 );
  // </0 & DoOptExpr-MakeSubstitutions@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoOptExpr-MakeSubstitutions@2/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 e.new5/2 t.new6/18 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  context[19] = refalrts::tvar_right( context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 2
  do {
    // </0 & DoOptExpr-MakeSubstitutions@2/4 s.new7/5 (/8 e.new13/20 )/9 (/12 e.new14/22 )/13 (/16 e.new15/24 )/17 e.new12/26 (/18 # Function/30 (/33 e.new8/31 )/34 # Sentences/35 (/38 (/42 e.new9/40 )/43 (/46 e.new10/44 )/47 )/39 e.new11/28 )/19 >/1
    context[20] = context[6];
    context[21] = context[7];
    context[22] = context[10];
    context[23] = context[11];
    context[24] = context[14];
    context[25] = context[15];
    context[26] = context[2];
    context[27] = context[3];
    context[28] = 0;
    context[29] = 0;
    if( ! refalrts::brackets_term( context[28], context[29], context[18] ) )
      continue;
    context[30] = refalrts::ident_left( identifiers[ident_Function], context[28], context[29] );
    if( ! context[30] )
      continue;
    context[31] = 0;
    context[32] = 0;
    context[33] = refalrts::brackets_left( context[31], context[32], context[28], context[29] );
    if( ! context[33] )
      continue;
    refalrts::bracket_pointers(context[33], context[34]);
    context[35] = refalrts::ident_left( identifiers[ident_Sentences], context[28], context[29] );
    if( ! context[35] )
      continue;
    context[36] = 0;
    context[37] = 0;
    context[38] = refalrts::brackets_left( context[36], context[37], context[28], context[29] );
    if( ! context[38] )
      continue;
    refalrts::bracket_pointers(context[38], context[39]);
    context[40] = 0;
    context[41] = 0;
    context[42] = refalrts::brackets_left( context[40], context[41], context[36], context[37] );
    if( ! context[42] )
      continue;
    refalrts::bracket_pointers(context[42], context[43]);
    context[44] = 0;
    context[45] = 0;
    context[46] = refalrts::brackets_left( context[44], context[45], context[36], context[37] );
    if( ! context[46] )
      continue;
    refalrts::bracket_pointers(context[46], context[47]);
    if( ! refalrts::empty_seq( context[36], context[37] ) )
      continue;
    // closed e.new13 as range 20
    // closed e.new14 as range 22
    // closed e.new15 as range 24
    // closed e.new12 as range 26
    // closed e.new8 as range 31
    // closed e.new9 as range 40
    // closed e.new10 as range 44
    // closed e.new11 as range 28
    do {
      // </0 & DoOptExpr-MakeSubstitutions@2/4 s.Mode0/5 (/8 e.SentenceVars0/48 )/9 (/12 e.Args0/50 )/13 (/16 e.Substitutions0/52 )/17 e.NewSubsts/54 (/18 # Function/30 (/33 e.Name/56 )/34 # Sentences/35 (/38 (/42 e.LS/58 )/43 (/46 (/66 # CallBrackets/68 (/71 # Symbol/73 # Name/74 '_'/75 '_'/76 'S'/77 't'/78 'e'/79 'p'/80 '-'/81 'D'/82 'r'/83 'o'/84 'p'/85 )/72 )/67 e./60 )/47 )/39 e.Rest/62 )/19 >/1
      context[48] = context[20];
      context[49] = context[21];
      context[50] = context[22];
      context[51] = context[23];
      context[52] = context[24];
      context[53] = context[25];
      context[54] = context[26];
      context[55] = context[27];
      context[56] = context[31];
      context[57] = context[32];
      context[58] = context[40];
      context[59] = context[41];
      context[60] = context[44];
      context[61] = context[45];
      context[62] = context[28];
      context[63] = context[29];
      context[64] = 0;
      context[65] = 0;
      context[66] = refalrts::brackets_left( context[64], context[65], context[60], context[61] );
      if( ! context[66] )
        continue;
      refalrts::bracket_pointers(context[66], context[67]);
      context[68] = refalrts::ident_left( identifiers[ident_CallBrackets], context[64], context[65] );
      if( ! context[68] )
        continue;
      context[69] = 0;
      context[70] = 0;
      context[71] = refalrts::brackets_left( context[69], context[70], context[64], context[65] );
      if( ! context[71] )
        continue;
      refalrts::bracket_pointers(context[71], context[72]);
      context[73] = refalrts::ident_left( identifiers[ident_Symbol], context[69], context[70] );
      if( ! context[73] )
        continue;
      context[74] = refalrts::ident_left( identifiers[ident_Name], context[69], context[70] );
      if( ! context[74] )
        continue;
      context[75] = refalrts::char_left( '_', context[69], context[70] );
      if( ! context[75] )
        continue;
      context[76] = refalrts::char_left( '_', context[69], context[70] );
      if( ! context[76] )
        continue;
      context[77] = refalrts::char_left( 'S', context[69], context[70] );
      if( ! context[77] )
        continue;
      context[78] = refalrts::char_left( 't', context[69], context[70] );
      if( ! context[78] )
        continue;
      context[79] = refalrts::char_left( 'e', context[69], context[70] );
      if( ! context[79] )
        continue;
      context[80] = refalrts::char_left( 'p', context[69], context[70] );
      if( ! context[80] )
        continue;
      context[81] = refalrts::char_left( '-', context[69], context[70] );
      if( ! context[81] )
        continue;
      context[82] = refalrts::char_left( 'D', context[69], context[70] );
      if( ! context[82] )
        continue;
      context[83] = refalrts::char_left( 'r', context[69], context[70] );
      if( ! context[83] )
        continue;
      context[84] = refalrts::char_left( 'o', context[69], context[70] );
      if( ! context[84] )
        continue;
      context[85] = refalrts::char_left( 'p', context[69], context[70] );
      if( ! context[85] )
        continue;
      if( ! refalrts::empty_seq( context[69], context[70] ) )
        continue;
      if( ! refalrts::empty_seq( context[64], context[65] ) )
        continue;
      // closed e.SentenceVars0 as range 48
      // closed e.Args0 as range 50
      // closed e.Substitutions0 as range 52
      // closed e.NewSubsts as range 54
      // closed e.Name as range 56
      // closed e.LS as range 58
      // closed e. as range 60
      // closed e.Rest as range 62
      //DEBUG: s.Mode0: 5
      //DEBUG: e.SentenceVars0: 48
      //DEBUG: e.Args0: 50
      //DEBUG: e.Substitutions0: 52
      //DEBUG: e.NewSubsts: 54
      //DEBUG: e.Name: 56
      //DEBUG: e.LS: 58
      //DEBUG: e.: 60
      //DEBUG: e.Rest: 62

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Name/74 '_'/75 '_'/76 'S'/77 {REMOVED TILE} 'e'/79 'p'/80 '-'/81 'D'/82 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoOptExpr-MakeSubstitutions$1:1@2/78 } Tile{ AsIs: (/33 } Tile{ AsIs: e.Substitutions0/52 } Tile{ AsIs: )/34 } Tile{ HalfReuse: (/17 AsIs: e.NewSubsts/54 HalfReuse: )/18 HalfReuse: (/30 } Tile{ AsIs: e./60 } Tile{ HalfReuse: )/4 AsIs: s.Mode0/5 AsIs: (/8 AsIs: e.SentenceVars0/48 AsIs: )/9 AsIs: (/12 AsIs: e.Args0/50 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Name/56 } Tile{ AsIs: )/47 HalfReuse: (/39 AsIs: e.Rest/62 AsIs: )/19 HalfReuse: (/1 } e.LS/58/86 Tile{ HalfReuse: )/84 HalfReuse: </85 HalfReuse: & Solve/72 HalfReuse: (/67 } e.SentenceVars0/48/88 Tile{ HalfReuse: )/83 } Tile{ AsIs: (/71 HalfReuse: (/73 } e.Args0/50/90 Tile{ HalfReuse: )/35 HalfReuse: ':'/38 AsIs: (/42 AsIs: e.LS/58 AsIs: )/43 HalfReuse: )/46 HalfReuse: >/66 HalfReuse: >/68 } Tile{ ]] }
      refalrts::copy_evar(vm, context[86], context[87], context[58], context[59]);
      refalrts::copy_evar(vm, context[88], context[89], context[48], context[49]);
      refalrts::copy_evar(vm, context[90], context[91], context[50], context[51]);
      refalrts::reinit_name(context[78], functions[efunc_gen_DoOptExprm_MakeSubstitutions_S1B1Z2]);
      refalrts::reinit_open_bracket(context[17]);
      refalrts::reinit_close_bracket(context[18]);
      refalrts::reinit_open_bracket(context[30]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_open_bracket(context[39]);
      refalrts::reinit_open_bracket(context[1]);
      refalrts::reinit_close_bracket(context[84]);
      refalrts::reinit_open_call(context[85]);
      refalrts::reinit_name(context[72], functions[efunc_Solve]);
      refalrts::reinit_open_bracket(context[67]);
      refalrts::reinit_close_bracket(context[83]);
      refalrts::reinit_open_bracket(context[73]);
      refalrts::reinit_close_bracket(context[35]);
      refalrts::reinit_char(context[38], ':');
      refalrts::reinit_close_bracket(context[46]);
      refalrts::reinit_close_call(context[66]);
      refalrts::reinit_close_call(context[68]);
      refalrts::push_stack( vm, context[68] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[66] );
      refalrts::push_stack( vm, context[85] );
      refalrts::link_brackets( context[71], context[46] );
      refalrts::link_brackets( context[42], context[43] );
      refalrts::link_brackets( context[73], context[35] );
      refalrts::link_brackets( context[67], context[83] );
      refalrts::link_brackets( context[1], context[84] );
      refalrts::link_brackets( context[39], context[19] );
      refalrts::link_brackets( context[16], context[47] );
      refalrts::link_brackets( context[12], context[13] );
      refalrts::link_brackets( context[8], context[9] );
      refalrts::link_brackets( context[30], context[4] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[35], context[68] );
      res = refalrts::splice_evar( res, context[90], context[91] );
      res = refalrts::splice_evar( res, context[71], context[73] );
      res = refalrts::splice_elem( res, context[83] );
      res = refalrts::splice_evar( res, context[88], context[89] );
      res = refalrts::splice_evar( res, context[84], context[67] );
      res = refalrts::splice_evar( res, context[86], context[87] );
      res = refalrts::splice_evar( res, context[47], context[1] );
      res = refalrts::splice_evar( res, context[56], context[57] );
      res = refalrts::splice_evar( res, context[4], context[16] );
      res = refalrts::splice_evar( res, context[60], context[61] );
      res = refalrts::splice_evar( res, context[17], context[30] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_elem( res, context[78] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoOptExpr-MakeSubstitutions@2/4 s.Mode0/5 (/8 e.SentenceVars0/48 )/9 (/12 e.Args0/50 )/13 (/16 e.Substitutions0/52 )/17 e.NewSubsts/54 (/18 # Function/30 (/33 e.Name/56 )/34 # Sentences/35 (/38 (/42 e.LS/58 )/43 (/46 e.RS/60 )/47 )/39 e.Rest/62 )/19 >/1
    context[48] = context[20];
    context[49] = context[21];
    context[50] = context[22];
    context[51] = context[23];
    context[52] = context[24];
    context[53] = context[25];
    context[54] = context[26];
    context[55] = context[27];
    context[56] = context[31];
    context[57] = context[32];
    context[58] = context[40];
    context[59] = context[41];
    context[60] = context[44];
    context[61] = context[45];
    context[62] = context[28];
    context[63] = context[29];
    // closed e.SentenceVars0 as range 48
    // closed e.Args0 as range 50
    // closed e.Substitutions0 as range 52
    // closed e.NewSubsts as range 54
    // closed e.Name as range 56
    // closed e.LS as range 58
    // closed e.RS as range 60
    // closed e.Rest as range 62
    //DEBUG: s.Mode0: 5
    //DEBUG: e.SentenceVars0: 48
    //DEBUG: e.Args0: 50
    //DEBUG: e.Substitutions0: 52
    //DEBUG: e.NewSubsts: 54
    //DEBUG: e.Name: 56
    //DEBUG: e.LS: 58
    //DEBUG: e.RS: 60
    //DEBUG: e.Rest: 62

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & DoOptExpr-MakeSubstitutions$1:1@2/64 Tile{ AsIs: (/33 } Tile{ AsIs: e.Substitutions0/52 } Tile{ AsIs: )/34 } Tile{ HalfReuse: (/17 AsIs: e.NewSubsts/54 HalfReuse: )/18 HalfReuse: (/30 } Tile{ AsIs: e.RS/60 } Tile{ HalfReuse: )/4 AsIs: s.Mode0/5 AsIs: (/8 AsIs: e.SentenceVars0/48 AsIs: )/9 AsIs: (/12 AsIs: e.Args0/50 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Name/56 } Tile{ AsIs: )/47 HalfReuse: (/39 AsIs: e.Rest/62 AsIs: )/19 HalfReuse: (/1 } e.LS/58/65 )/67 </68 & Solve/69 (/70 e.SentenceVars0/48/71 )/73 (/74 (/75 e.Args0/50/76 Tile{ HalfReuse: )/35 HalfReuse: ':'/38 AsIs: (/42 AsIs: e.LS/58 AsIs: )/43 HalfReuse: )/46 } >/78 >/79 Tile{ ]] }
    refalrts::alloc_name(vm, context[64], functions[efunc_gen_DoOptExprm_MakeSubstitutions_S1B1Z2]);
    refalrts::copy_evar(vm, context[65], context[66], context[58], context[59]);
    refalrts::alloc_close_bracket(vm, context[67]);
    refalrts::alloc_open_call(vm, context[68]);
    refalrts::alloc_name(vm, context[69], functions[efunc_Solve]);
    refalrts::alloc_open_bracket(vm, context[70]);
    refalrts::copy_evar(vm, context[71], context[72], context[48], context[49]);
    refalrts::alloc_close_bracket(vm, context[73]);
    refalrts::alloc_open_bracket(vm, context[74]);
    refalrts::alloc_open_bracket(vm, context[75]);
    refalrts::copy_evar(vm, context[76], context[77], context[50], context[51]);
    refalrts::alloc_close_call(vm, context[78]);
    refalrts::alloc_close_call(vm, context[79]);
    refalrts::reinit_open_bracket(context[17]);
    refalrts::reinit_close_bracket(context[18]);
    refalrts::reinit_open_bracket(context[30]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_bracket(context[39]);
    refalrts::reinit_open_bracket(context[1]);
    refalrts::reinit_close_bracket(context[35]);
    refalrts::reinit_char(context[38], ':');
    refalrts::reinit_close_bracket(context[46]);
    refalrts::push_stack( vm, context[79] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[78] );
    refalrts::push_stack( vm, context[68] );
    refalrts::link_brackets( context[74], context[46] );
    refalrts::link_brackets( context[42], context[43] );
    refalrts::link_brackets( context[75], context[35] );
    refalrts::link_brackets( context[70], context[73] );
    refalrts::link_brackets( context[1], context[67] );
    refalrts::link_brackets( context[39], context[19] );
    refalrts::link_brackets( context[16], context[47] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::link_brackets( context[30], context[4] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[33], context[34] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[78], context[79] );
    res = refalrts::splice_evar( res, context[35], context[46] );
    res = refalrts::splice_evar( res, context[76], context[77] );
    res = refalrts::splice_evar( res, context[67], context[75] );
    res = refalrts::splice_evar( res, context[65], context[66] );
    res = refalrts::splice_evar( res, context[47], context[1] );
    res = refalrts::splice_evar( res, context[56], context[57] );
    res = refalrts::splice_evar( res, context[4], context[16] );
    res = refalrts::splice_evar( res, context[60], context[61] );
    res = refalrts::splice_evar( res, context[17], context[30] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_elem( res, context[64] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoOptExpr-MakeSubstitutions@2/4 s.Mode0/5 (/8 e.SentenceVars0/20 )/9 (/12 e.Args0/22 )/13 (/16 e.Substitutions0/24 )/17 e.NewSubsts/26 t.RestFunction/18 >/1
    context[20] = context[6];
    context[21] = context[7];
    context[22] = context[10];
    context[23] = context[11];
    context[24] = context[14];
    context[25] = context[15];
    context[26] = context[2];
    context[27] = context[3];
    // closed e.SentenceVars0 as range 20
    // closed e.Args0 as range 22
    // closed e.Substitutions0 as range 24
    // closed e.NewSubsts as range 26
    //DEBUG: t.RestFunction: 18
    //DEBUG: s.Mode0: 5
    //DEBUG: e.SentenceVars0: 20
    //DEBUG: e.Args0: 22
    //DEBUG: e.Substitutions0: 24
    //DEBUG: e.NewSubsts: 26

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Mode0/5 (/8 e.SentenceVars0/20 )/9 (/12 {REMOVED TILE} )/13 (/16 {REMOVED TILE} )/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Substitutions0/24 } Tile{ AsIs: e.NewSubsts/26 } Tile{ AsIs: </0 Reuse: & MakeColdSolution/4 } Tile{ AsIs: t.RestFunction/18 } Tile{ AsIs: e.Args0/22 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_MakeColdSolution]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptExpr-MakeSubstitutions@2/4 s.Mode0/5 (/8 e.SentenceVars0/6 )/9 (/12 e.Args0/10 )/13 (/16 e.Substitutions0/14 )/17 e.NewSubsts/2 t.dyn0/18 >/1
  // closed e.SentenceVars0 as range 6
  // closed e.Args0 as range 10
  // closed e.Substitutions0 as range 14
  // closed e.NewSubsts as range 2
  //DEBUG: t.dyn0: 18
  //DEBUG: s.Mode0: 5
  //DEBUG: e.SentenceVars0: 6
  //DEBUG: e.Args0: 10
  //DEBUG: e.Substitutions0: 14
  //DEBUG: e.NewSubsts: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptExpr-MakeSubstitutions@0/4 AsIs: s.Mode0/5 AsIs: (/8 AsIs: e.SentenceVars0/6 AsIs: )/9 AsIs: (/12 AsIs: e.Args0/10 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.Substitutions0/14 } Tile{ AsIs: e.NewSubsts/2 } Tile{ AsIs: )/17 } Tile{ AsIs: t.dyn0/18 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoOptExprm_MakeSubstitutions_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[18];
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptExprm_MakeSubstitutions_Z2("DoOptExpr-MakeSubstitutions@2", COOKIE1_, COOKIE2_, func_gen_DoOptExprm_MakeSubstitutions_Z2);


static refalrts::FnResult func_gen_Map_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & Map@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@6/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Map@6/4 (/7 e.new5/9 )/8 t.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Map@6/4 (/7 e.new9/15 )/8 (/13 s.new6/21 e.new7/19 )/14 e.new8/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      // closed e.new9 as range 15
      // closed e.new8 as range 17
      if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
        continue;
      // closed e.new7 as range 19
      do {
        // </0 & Map@6/4 (/7 e.Assigns/22 )/8 (/13 # Brackets/21 e.0/24 )/14 e.Tail/26 >/1
        context[22] = context[15];
        context[23] = context[16];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[17];
        context[27] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[21] ) )
          continue;
        // closed e.Assigns as range 22
        // closed e.0 as range 24
        // closed e.Tail as range 26
        //DEBUG: e.Assigns: 22
        //DEBUG: e.0: 24
        //DEBUG: e.Tail: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # Brackets/21 } Tile{ AsIs: </0 AsIs: & Map@6/4 AsIs: (/7 AsIs: e.Assigns/22 AsIs: )/8 } Tile{ AsIs: e.0/24 } >/28 )/29 </30 & Map@6/31 (/32 e.Assigns/22/33 Tile{ AsIs: )/14 AsIs: e.Tail/26 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_close_bracket(vm, context[29]);
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_Map_Z6]);
        refalrts::alloc_open_bracket(vm, context[32]);
        refalrts::copy_evar(vm, context[33], context[34], context[22], context[23]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::link_brackets( context[32], context[14] );
        refalrts::link_brackets( context[13], context[29] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[28], context[32] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[13], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@6/4 (/7 e.Assigns/22 )/8 (/13 # CallBrackets/21 e.0/24 )/14 e.Tail/26 >/1
        context[22] = context[15];
        context[23] = context[16];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[17];
        context[27] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[21] ) )
          continue;
        // closed e.Assigns as range 22
        // closed e.0 as range 24
        // closed e.Tail as range 26
        //DEBUG: e.Assigns: 22
        //DEBUG: e.0: 24
        //DEBUG: e.Tail: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # CallBrackets/21 } Tile{ AsIs: </0 AsIs: & Map@6/4 AsIs: (/7 AsIs: e.Assigns/22 AsIs: )/8 } Tile{ AsIs: e.0/24 } >/28 )/29 </30 & Map@6/31 (/32 e.Assigns/22/33 Tile{ AsIs: )/14 AsIs: e.Tail/26 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_close_bracket(vm, context[29]);
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_Map_Z6]);
        refalrts::alloc_open_bracket(vm, context[32]);
        refalrts::copy_evar(vm, context[33], context[34], context[22], context[23]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::link_brackets( context[32], context[14] );
        refalrts::link_brackets( context[13], context[29] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[28], context[32] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[13], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@6/4 (/7 e.Assigns/22 )/8 (/13 # ColdCallBrackets/21 e.0/24 )/14 e.Tail/26 >/1
        context[22] = context[15];
        context[23] = context[16];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[17];
        context[27] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[21] ) )
          continue;
        // closed e.Assigns as range 22
        // closed e.0 as range 24
        // closed e.Tail as range 26
        //DEBUG: e.Assigns: 22
        //DEBUG: e.0: 24
        //DEBUG: e.Tail: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # ColdCallBrackets/21 } Tile{ AsIs: </0 AsIs: & Map@6/4 AsIs: (/7 AsIs: e.Assigns/22 AsIs: )/8 } Tile{ AsIs: e.0/24 } >/28 )/29 </30 & Map@6/31 (/32 e.Assigns/22/33 Tile{ AsIs: )/14 AsIs: e.Tail/26 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_close_bracket(vm, context[29]);
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_Map_Z6]);
        refalrts::alloc_open_bracket(vm, context[32]);
        refalrts::copy_evar(vm, context[33], context[34], context[22], context[23]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::link_brackets( context[32], context[14] );
        refalrts::link_brackets( context[13], context[29] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[28], context[32] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[13], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@6/4 (/7 e.Assigns/22 )/8 (/13 # ClosureBrackets/21 e.0/24 )/14 e.Tail/26 >/1
        context[22] = context[15];
        context[23] = context[16];
        context[24] = context[19];
        context[25] = context[20];
        context[26] = context[17];
        context[27] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_ClosureBrackets], context[21] ) )
          continue;
        // closed e.Assigns as range 22
        // closed e.0 as range 24
        // closed e.Tail as range 26
        //DEBUG: e.Assigns: 22
        //DEBUG: e.0: 24
        //DEBUG: e.Tail: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # ClosureBrackets/21 } Tile{ AsIs: </0 AsIs: & Map@6/4 AsIs: (/7 AsIs: e.Assigns/22 AsIs: )/8 } Tile{ AsIs: e.0/24 } >/28 )/29 </30 & Map@6/31 (/32 e.Assigns/22/33 Tile{ AsIs: )/14 AsIs: e.Tail/26 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[28]);
        refalrts::alloc_close_bracket(vm, context[29]);
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::alloc_name(vm, context[31], functions[efunc_gen_Map_Z6]);
        refalrts::alloc_open_bracket(vm, context[32]);
        refalrts::copy_evar(vm, context[33], context[34], context[22], context[23]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[30] );
        refalrts::link_brackets( context[32], context[14] );
        refalrts::link_brackets( context[13], context[29] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[28], context[32] );
        res = refalrts::splice_evar( res, context[24], context[25] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[13], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@6/4 (/7 e.Assigns/22 )/8 (/13 # ADT-Brackets/21 (/30 e.2/28 )/31 e.1/24 )/14 e.Tail/26 >/1
      context[22] = context[15];
      context[23] = context[16];
      context[24] = context[19];
      context[25] = context[20];
      context[26] = context[17];
      context[27] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[21] ) )
        continue;
      context[28] = 0;
      context[29] = 0;
      context[30] = refalrts::brackets_left( context[28], context[29], context[24], context[25] );
      if( ! context[30] )
        continue;
      refalrts::bracket_pointers(context[30], context[31]);
      // closed e.Assigns as range 22
      // closed e.2 as range 28
      // closed e.1 as range 24
      // closed e.Tail as range 26
      //DEBUG: e.Assigns: 22
      //DEBUG: e.2: 28
      //DEBUG: e.1: 24
      //DEBUG: e.Tail: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # ADT-Brackets/21 AsIs: (/30 AsIs: e.2/28 AsIs: )/31 } Tile{ AsIs: </0 AsIs: & Map@6/4 AsIs: (/7 AsIs: e.Assigns/22 AsIs: )/8 } Tile{ AsIs: e.1/24 } >/32 )/33 </34 & Map@6/35 (/36 e.Assigns/22/37 Tile{ AsIs: )/14 AsIs: e.Tail/26 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_open_call(vm, context[34]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Map_Z6]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::copy_evar(vm, context[37], context[38], context[22], context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[34] );
      refalrts::link_brackets( context[36], context[14] );
      refalrts::link_brackets( context[13], context[33] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[30], context[31] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[32], context[36] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[13], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@6/4 (/7 e.Assigns/15 )/8 t.Next/13 e.Tail/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.Assigns as range 15
    // closed e.Tail as range 17
    //DEBUG: t.Next: 13
    //DEBUG: e.Assigns: 15
    //DEBUG: e.Tail: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </19 & ApplyAssigns-Term*5/20 Tile{ AsIs: t.Next/13 } (/21 e.Assigns/15/22 )/24 >/25 Tile{ AsIs: </0 AsIs: & Map@6/4 AsIs: (/7 AsIs: e.Assigns/15 AsIs: )/8 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_ApplyAssignsm_Term_D5]);
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::copy_evar(vm, context[22], context[23], context[15], context[16]);
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[21], context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[21], context[25] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@6/4 (/7 e.Assigns/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Assigns as range 9
    //DEBUG: e.Assigns: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@6/4 (/7 e.Assigns/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@6/4 (/7 e.Assigns/5 )/8 e.items/2 >/1
  // closed e.Assigns as range 5
  // closed e.items as range 2
  //DEBUG: e.Assigns: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 Tile{ HalfReuse: [*]/0 Reuse: & ApplyAssigns\1@0/4 AsIs: (/7 AsIs: e.Assigns/5 AsIs: )/8 } {*}/11 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_ApplyAssigns_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z6("Map@6", COOKIE1_, COOKIE2_, func_gen_Map_Z6);


static refalrts::FnResult func_gen_Map_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & Map@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@7/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Map@7/4 (/7 e.new5/9 )/8 t.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Map@7/4 (/7 e.RS$a/15 )/8 (/13 (/23 e.1/21 )/24 (/27 e.3/25 )/28 )/14 e.Tail/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[19], context[20] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      if( ! refalrts::empty_seq( context[19], context[20] ) )
        continue;
      // closed e.RS$a as range 15
      // closed e.1 as range 21
      // closed e.3 as range 25
      // closed e.Tail as range 17
      //DEBUG: e.RS$a: 15
      //DEBUG: e.1: 21
      //DEBUG: e.3: 25
      //DEBUG: e.Tail: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </28 } Tile{ HalfReuse: & DoOptExpr-MakeSubstitutions$1:1$2=2\1=1/13 AsIs: (/23 AsIs: e.1/21 AsIs: )/24 HalfReuse: </27 } & Map@6/29 (/30 Tile{ AsIs: e.3/25 } Tile{ AsIs: )/14 } e.RS$a/15/31 >/33 >/34 Tile{ AsIs: </0 AsIs: & Map@7/4 AsIs: (/7 AsIs: e.RS$a/15 AsIs: )/8 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[29], functions[efunc_gen_Map_Z6]);
      refalrts::alloc_open_bracket(vm, context[30]);
      refalrts::copy_evar(vm, context[31], context[32], context[15], context[16]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::reinit_open_call(context[28]);
      refalrts::reinit_name(context[13], functions[efunc_gen_DoOptExprm_MakeSubstitutions_S1B1S2A2L1A1]);
      refalrts::reinit_open_call(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[27] );
      refalrts::link_brackets( context[30], context[14] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[13], context[27] );
      res = refalrts::splice_elem( res, context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@7/4 (/7 e.RS$a/15 )/8 t.Next/13 e.Tail/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.RS$a as range 15
    // closed e.Tail as range 17
    //DEBUG: t.Next: 13
    //DEBUG: e.RS$a: 15
    //DEBUG: e.Tail: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptExpr-MakeSubstitutions$1:1$2=2\1*1/4 AsIs: (/7 AsIs: e.RS$a/15 AsIs: )/8 AsIs: t.Next/13 } >/19 </20 & Map@7/21 (/22 e.RS$a/15/23 )/25 Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_Map_Z7]);
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::copy_evar(vm, context[23], context[24], context[15], context[16]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoOptExprm_MakeSubstitutions_S1B1S2A2L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[22], context[25] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@7/4 (/7 e.RS$a/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.RS$a as range 9
    //DEBUG: e.RS$a: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@7/4 (/7 e.RS$a/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@7/4 (/7 e.RS$a/5 )/8 e.items/2 >/1
  // closed e.RS$a as range 5
  // closed e.items as range 2
  //DEBUG: e.RS$a: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 Tile{ HalfReuse: [*]/0 Reuse: & DoOptExpr-MakeSubstitutions$1:1$2=2\1@0/4 AsIs: (/7 AsIs: e.RS$a/5 AsIs: )/8 } {*}/11 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_DoOptExprm_MakeSubstitutions_S1B1S2A2L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z7("Map@7", COOKIE1_, COOKIE2_, func_gen_Map_Z7);


static refalrts::FnResult func_gen_MakeColdSolution_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & MakeColdSolution@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & MakeColdSolution@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 2
  do {
    // </0 & MakeColdSolution@1/4 (/7 e.Name0/21 )/8 (/11 e.LS/23 )/12 (/15 e.RS$a/25 )/16 (/19 e.Rest/27 )/20 e.Args0/29 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Name0 as range 21
    // closed e.LS as range 23
    // closed e.RS$a as range 25
    // closed e.Rest as range 27
    // closed e.Args0 as range 29
    //DEBUG: e.Name0: 21
    //DEBUG: e.LS: 23
    //DEBUG: e.RS$a: 25
    //DEBUG: e.Rest: 27
    //DEBUG: e.Args0: 29
    //21: e.Name0
    //23: e.LS
    //25: e.RS$a
    //27: e.Rest
    //29: e.Args0
    //34: e.Name0

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[33], functions[efunc_gen_MakeColdSolution_Z1S1C1]);
    refalrts::copy_evar(vm, context[34], context[35], context[21], context[22]);
    refalrts::alloc_close_call(vm, context[32]);
    refalrts::push_stack( vm, context[32] );
    refalrts::push_stack( vm, context[31] );
    res = refalrts::splice_elem( res, context[32] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_elem( res, context[31] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </31 & MakeColdSolution@1$1?1/35 e.Prefix/33 '*'/37 s.Num/36 >/32
      context[33] = 0;
      context[34] = 0;
      context[35] = refalrts::call_left( context[33], context[34], context[31], context[32] );
      if( ! refalrts::svar_right( context[36], context[33], context[34] ) )
        continue;
      context[37] = refalrts::char_right( '*', context[33], context[34] );
      if( ! context[37] )
        continue;
      // closed e.Prefix as range 33
      //DEBUG: e.Name0: 21
      //DEBUG: e.LS: 23
      //DEBUG: e.RS$a: 25
      //DEBUG: e.Rest: 27
      //DEBUG: e.Args0: 29
      //DEBUG: s.Num: 36
      //DEBUG: e.Prefix: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Prefix/33 {REMOVED TILE} s.Num/36 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 HalfReuse: </7 } & eDRIVEN/38 Tile{ HalfReuse: >/31 HalfReuse: ':'/35 } Tile{ HalfReuse: (/37 } # ColdCallBrackets/39 (/40 # Symbol/41 # Name/42 Tile{ AsIs: e.Name0/21 } )/43 Tile{ AsIs: e.Args0/29 } )/44 )/45 (/46 (/47 # NewFunction/48 # GN-Local/49 (/50 e.Name0/21/51 )/53 # Sentences/54 Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.LS/23 AsIs: )/12 AsIs: (/15 AsIs: e.RS$a/25 AsIs: )/16 HalfReuse: )/19 AsIs: e.Rest/27 AsIs: )/20 } Tile{ HalfReuse: )/32 HalfReuse: )/1 ]] }
      refalrts::alloc_name(vm, context[38], functions[efunc_eDRIVEN]);
      refalrts::alloc_ident(vm, context[39], identifiers[ident_ColdCallBrackets]);
      refalrts::alloc_open_bracket(vm, context[40]);
      refalrts::alloc_ident(vm, context[41], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[42], identifiers[ident_Name]);
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::alloc_close_bracket(vm, context[45]);
      refalrts::alloc_open_bracket(vm, context[46]);
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::alloc_ident(vm, context[48], identifiers[ident_NewFunction]);
      refalrts::alloc_ident(vm, context[49], identifiers[ident_GNm_Local]);
      refalrts::alloc_open_bracket(vm, context[50]);
      refalrts::copy_evar(vm, context[51], context[52], context[21], context[22]);
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::alloc_ident(vm, context[54], identifiers[ident_Sentences]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_close_call(context[31]);
      refalrts::reinit_char(context[35], ':');
      refalrts::reinit_open_bracket(context[37]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[19]);
      refalrts::reinit_close_bracket(context[32]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      refalrts::link_brackets( context[46], context[32] );
      refalrts::link_brackets( context[47], context[20] );
      refalrts::link_brackets( context[8], context[19] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[50], context[53] );
      refalrts::link_brackets( context[4], context[45] );
      refalrts::link_brackets( context[37], context[44] );
      refalrts::link_brackets( context[40], context[43] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[32];
      res = refalrts::splice_evar( res, context[8], context[20] );
      res = refalrts::splice_evar( res, context[44], context[54] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[39], context[42] );
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_evar( res, context[31], context[35] );
      res = refalrts::splice_elem( res, context[38] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[31], context[32]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & MakeColdSolution@1/4 (/7 e.Name0/21 )/8 (/11 e.LS/23 )/12 (/15 e.RS$a/25 )/16 (/19 e.Rest/27 )/20 e.Args0/29 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Name0 as range 21
    // closed e.LS as range 23
    // closed e.RS$a as range 25
    // closed e.Rest as range 27
    // closed e.Args0 as range 29
    //DEBUG: e.Name0: 21
    //DEBUG: e.LS: 23
    //DEBUG: e.RS$a: 25
    //DEBUG: e.Rest: 27
    //DEBUG: e.Args0: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.LS/23 {REMOVED TILE} e.RS$a/25 {REMOVED TILE} e.Rest/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/12 AsIs: (/15 } Tile{ AsIs: (/11 } # Var/31 'e'/32 # DRIVEN/33 )/34 ':'/35 (/36 # ColdCallBrackets/37 Tile{ HalfReuse: (/0 HalfReuse: # Symbol/4 HalfReuse: # Name/7 AsIs: e.Name0/21 AsIs: )/8 } Tile{ AsIs: e.Args0/29 } Tile{ AsIs: )/20 } Tile{ AsIs: )/16 AsIs: (/19 } )/38 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_ident(vm, context[31], identifiers[ident_Var]);
    refalrts::alloc_char(vm, context[32], 'e');
    refalrts::alloc_ident(vm, context[33], identifiers[ident_DRIVEN]);
    refalrts::alloc_close_bracket(vm, context[34]);
    refalrts::alloc_char(vm, context[35], ':');
    refalrts::alloc_open_bracket(vm, context[36]);
    refalrts::alloc_ident(vm, context[37], identifiers[ident_ColdCallBrackets]);
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::reinit_open_bracket(context[12]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Symbol]);
    refalrts::reinit_ident(context[7], identifiers[ident_Name]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[12], context[1] );
    refalrts::link_brackets( context[19], context[38] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[36], context[20] );
    refalrts::link_brackets( context[0], context[8] );
    refalrts::link_brackets( context[11], context[34] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[16], context[19] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[31], context[37] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MakeColdSolution@1/4 (/7 e.Name0/5 )/8 (/11 e.LS/9 )/12 (/15 e.RS$a/13 )/16 (/19 e.Rest/17 )/20 e.Args0/2 >/1
  // closed e.Name0 as range 5
  // closed e.LS as range 9
  // closed e.RS$a as range 13
  // closed e.Rest as range 17
  // closed e.Args0 as range 2
  //DEBUG: e.Name0: 5
  //DEBUG: e.LS: 9
  //DEBUG: e.RS$a: 13
  //DEBUG: e.Rest: 17
  //DEBUG: e.Args0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeColdSolution@0/4 AsIs: (/7 } # Function/21 (/22 Tile{ AsIs: e.Name0/5 } )/23 # Sentences/24 Tile{ HalfReuse: (/8 AsIs: (/11 AsIs: e.LS/9 AsIs: )/12 AsIs: (/15 AsIs: e.RS$a/13 AsIs: )/16 HalfReuse: )/19 AsIs: e.Rest/17 AsIs: )/20 AsIs: e.Args0/2 AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[21], identifiers[ident_Function]);
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::alloc_ident(vm, context[24], identifiers[ident_Sentences]);
  refalrts::update_name(context[4], functions[efunc_gen_MakeColdSolution_Z0]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_close_bracket(context[19]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[20] );
  refalrts::link_brackets( context[8], context[19] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeColdSolution_Z1("MakeColdSolution@1", COOKIE1_, COOKIE2_, func_gen_MakeColdSolution_Z1);


static refalrts::FnResult func_gen_Map_Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 71 elems
  refalrts::Iter context[71];
  refalrts::zeros( context, 71 );
  // </0 & Map@8/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@8/4 (/7 e.new1/5 )/8 t.new2/9 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 2
  do {
    // </0 & Map@8/4 (/7 e.new9/19 )/8 t.new6/9 (/13 e.new10/21 )/14 (/17 e.new11/23 )/18 t.new7/27 e.new8/25 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[2];
    context[26] = context[3];
    // closed e.new9 as range 19
    // closed e.new10 as range 21
    // closed e.new11 as range 23
    context[28] = refalrts::tvar_left( context[27], context[25], context[26] );
    if( ! context[28] )
      continue;
    // closed e.new8 as range 25
    do {
      // </0 & Map@8/4 (/7 e.new16/29 )/8 t.new12/9 (/13 e.new17/31 )/14 (/17 e.new18/33 )/18 (/27 s.new13/39 e.new14/37 )/28 e.new15/35 >/1
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[24];
      context[35] = context[25];
      context[36] = context[26];
      context[37] = 0;
      context[38] = 0;
      if( ! refalrts::brackets_term( context[37], context[38], context[27] ) )
        continue;
      // closed e.new16 as range 29
      // closed e.new17 as range 31
      // closed e.new18 as range 33
      // closed e.new15 as range 35
      if( ! refalrts::svar_left( context[39], context[37], context[38] ) )
        continue;
      // closed e.new14 as range 37
      do {
        // </0 & Map@8/4 (/7 e.B/40 )/8 t.Term/9 (/13 e.Contr/42 )/14 (/17 e.E/44 )/18 (/27 # Brackets/39 e.0/46 )/28 e.Tail/48 >/1
        context[40] = context[29];
        context[41] = context[30];
        context[42] = context[31];
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[37];
        context[47] = context[38];
        context[48] = context[35];
        context[49] = context[36];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[39] ) )
          continue;
        // closed e.B as range 40
        // closed e.Contr as range 42
        // closed e.E as range 44
        // closed e.0 as range 46
        // closed e.Tail as range 48
        //DEBUG: t.Term: 9
        //DEBUG: e.B: 40
        //DEBUG: e.Contr: 42
        //DEBUG: e.E: 44
        //DEBUG: e.0: 46
        //DEBUG: e.Tail: 48

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/27 AsIs: # Brackets/39 } Tile{ AsIs: </0 AsIs: & Map@8/4 AsIs: (/7 AsIs: e.B/40 AsIs: )/8 AsIs: t.Term/9 AsIs: (/13 AsIs: e.Contr/42 AsIs: )/14 AsIs: (/17 AsIs: e.E/44 AsIs: )/18 } Tile{ AsIs: e.0/46 } >/50 )/51 </52 & Map@8/53 (/54 e.B/40/55 )/57 t.Term/9/58 (/60 e.Contr/42/61 )/63 (/64 e.E/44/65 Tile{ AsIs: )/28 AsIs: e.Tail/48 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_name(vm, context[53], functions[efunc_gen_Map_Z8]);
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::copy_evar(vm, context[55], context[56], context[40], context[41]);
        refalrts::alloc_close_bracket(vm, context[57]);
        refalrts::copy_evar(vm, context[58], context[59], context[9], context[10]);
        refalrts::alloc_open_bracket(vm, context[60]);
        refalrts::copy_evar(vm, context[61], context[62], context[42], context[43]);
        refalrts::alloc_close_bracket(vm, context[63]);
        refalrts::alloc_open_bracket(vm, context[64]);
        refalrts::copy_evar(vm, context[65], context[66], context[44], context[45]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[52] );
        refalrts::link_brackets( context[64], context[28] );
        refalrts::link_brackets( context[60], context[63] );
        refalrts::link_brackets( context[54], context[57] );
        refalrts::link_brackets( context[27], context[51] );
        refalrts::push_stack( vm, context[50] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[28];
        res = refalrts::splice_evar( res, context[65], context[66] );
        res = refalrts::splice_evar( res, context[50], context[64] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_evar( res, context[0], context[18] );
        res = refalrts::splice_evar( res, context[27], context[39] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@8/4 (/7 e.B/40 )/8 t.Term/9 (/13 e.Contr/42 )/14 (/17 e.E/44 )/18 (/27 # CallBrackets/39 e.0/46 )/28 e.Tail/48 >/1
        context[40] = context[29];
        context[41] = context[30];
        context[42] = context[31];
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[37];
        context[47] = context[38];
        context[48] = context[35];
        context[49] = context[36];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[39] ) )
          continue;
        // closed e.B as range 40
        // closed e.Contr as range 42
        // closed e.E as range 44
        // closed e.0 as range 46
        // closed e.Tail as range 48
        //DEBUG: t.Term: 9
        //DEBUG: e.B: 40
        //DEBUG: e.Contr: 42
        //DEBUG: e.E: 44
        //DEBUG: e.0: 46
        //DEBUG: e.Tail: 48

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/27 AsIs: # CallBrackets/39 } Tile{ AsIs: </0 AsIs: & Map@8/4 AsIs: (/7 AsIs: e.B/40 AsIs: )/8 AsIs: t.Term/9 AsIs: (/13 AsIs: e.Contr/42 AsIs: )/14 AsIs: (/17 AsIs: e.E/44 AsIs: )/18 } Tile{ AsIs: e.0/46 } >/50 )/51 </52 & Map@8/53 (/54 e.B/40/55 )/57 t.Term/9/58 (/60 e.Contr/42/61 )/63 (/64 e.E/44/65 Tile{ AsIs: )/28 AsIs: e.Tail/48 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_name(vm, context[53], functions[efunc_gen_Map_Z8]);
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::copy_evar(vm, context[55], context[56], context[40], context[41]);
        refalrts::alloc_close_bracket(vm, context[57]);
        refalrts::copy_evar(vm, context[58], context[59], context[9], context[10]);
        refalrts::alloc_open_bracket(vm, context[60]);
        refalrts::copy_evar(vm, context[61], context[62], context[42], context[43]);
        refalrts::alloc_close_bracket(vm, context[63]);
        refalrts::alloc_open_bracket(vm, context[64]);
        refalrts::copy_evar(vm, context[65], context[66], context[44], context[45]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[52] );
        refalrts::link_brackets( context[64], context[28] );
        refalrts::link_brackets( context[60], context[63] );
        refalrts::link_brackets( context[54], context[57] );
        refalrts::link_brackets( context[27], context[51] );
        refalrts::push_stack( vm, context[50] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[28];
        res = refalrts::splice_evar( res, context[65], context[66] );
        res = refalrts::splice_evar( res, context[50], context[64] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_evar( res, context[0], context[18] );
        res = refalrts::splice_evar( res, context[27], context[39] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@8/4 (/7 e.B/40 )/8 t.Term/9 (/13 e.Contr/42 )/14 (/17 e.E/44 )/18 (/27 # ColdCallBrackets/39 e.0/46 )/28 e.Tail/48 >/1
        context[40] = context[29];
        context[41] = context[30];
        context[42] = context[31];
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[37];
        context[47] = context[38];
        context[48] = context[35];
        context[49] = context[36];
        if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[39] ) )
          continue;
        // closed e.B as range 40
        // closed e.Contr as range 42
        // closed e.E as range 44
        // closed e.0 as range 46
        // closed e.Tail as range 48
        //DEBUG: t.Term: 9
        //DEBUG: e.B: 40
        //DEBUG: e.Contr: 42
        //DEBUG: e.E: 44
        //DEBUG: e.0: 46
        //DEBUG: e.Tail: 48

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </50 Tile{ HalfReuse: & ApplyContractions-Term$3:1/39 } Tile{ AsIs: (/27 } e.0/46/51 )/53 Tile{ AsIs: </0 AsIs: & Map@8/4 AsIs: (/7 AsIs: e.B/40 AsIs: )/8 AsIs: t.Term/9 AsIs: (/13 AsIs: e.Contr/42 AsIs: )/14 AsIs: (/17 AsIs: e.E/44 AsIs: )/18 } Tile{ AsIs: e.0/46 } >/54 >/55 </56 & Map@8/57 (/58 e.B/40/59 )/61 t.Term/9/62 (/64 e.Contr/42/65 )/67 (/68 e.E/44/69 Tile{ AsIs: )/28 AsIs: e.Tail/48 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[50]);
        refalrts::copy_evar(vm, context[51], context[52], context[46], context[47]);
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::alloc_close_call(vm, context[55]);
        refalrts::alloc_open_call(vm, context[56]);
        refalrts::alloc_name(vm, context[57], functions[efunc_gen_Map_Z8]);
        refalrts::alloc_open_bracket(vm, context[58]);
        refalrts::copy_evar(vm, context[59], context[60], context[40], context[41]);
        refalrts::alloc_close_bracket(vm, context[61]);
        refalrts::copy_evar(vm, context[62], context[63], context[9], context[10]);
        refalrts::alloc_open_bracket(vm, context[64]);
        refalrts::copy_evar(vm, context[65], context[66], context[42], context[43]);
        refalrts::alloc_close_bracket(vm, context[67]);
        refalrts::alloc_open_bracket(vm, context[68]);
        refalrts::copy_evar(vm, context[69], context[70], context[44], context[45]);
        refalrts::reinit_name(context[39], functions[efunc_gen_ApplyContractionsm_Term_S3B1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[56] );
        refalrts::link_brackets( context[68], context[28] );
        refalrts::link_brackets( context[64], context[67] );
        refalrts::link_brackets( context[58], context[61] );
        refalrts::push_stack( vm, context[55] );
        refalrts::push_stack( vm, context[50] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[27], context[53] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[28];
        res = refalrts::splice_evar( res, context[69], context[70] );
        res = refalrts::splice_evar( res, context[54], context[68] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_evar( res, context[0], context[18] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_elem( res, context[39] );
        res = refalrts::splice_elem( res, context[50] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@8/4 (/7 e.B/40 )/8 t.Term/9 (/13 e.Contr/42 )/14 (/17 e.E/44 )/18 (/27 # ClosureBrackets/39 e.0/46 )/28 e.Tail/48 >/1
        context[40] = context[29];
        context[41] = context[30];
        context[42] = context[31];
        context[43] = context[32];
        context[44] = context[33];
        context[45] = context[34];
        context[46] = context[37];
        context[47] = context[38];
        context[48] = context[35];
        context[49] = context[36];
        if( ! refalrts::ident_term( identifiers[ident_ClosureBrackets], context[39] ) )
          continue;
        // closed e.B as range 40
        // closed e.Contr as range 42
        // closed e.E as range 44
        // closed e.0 as range 46
        // closed e.Tail as range 48
        //DEBUG: t.Term: 9
        //DEBUG: e.B: 40
        //DEBUG: e.Contr: 42
        //DEBUG: e.E: 44
        //DEBUG: e.0: 46
        //DEBUG: e.Tail: 48

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/27 AsIs: # ClosureBrackets/39 } Tile{ AsIs: </0 AsIs: & Map@8/4 AsIs: (/7 AsIs: e.B/40 AsIs: )/8 AsIs: t.Term/9 AsIs: (/13 AsIs: e.Contr/42 AsIs: )/14 AsIs: (/17 AsIs: e.E/44 AsIs: )/18 } Tile{ AsIs: e.0/46 } >/50 )/51 </52 & Map@8/53 (/54 e.B/40/55 )/57 t.Term/9/58 (/60 e.Contr/42/61 )/63 (/64 e.E/44/65 Tile{ AsIs: )/28 AsIs: e.Tail/48 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[50]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::alloc_open_call(vm, context[52]);
        refalrts::alloc_name(vm, context[53], functions[efunc_gen_Map_Z8]);
        refalrts::alloc_open_bracket(vm, context[54]);
        refalrts::copy_evar(vm, context[55], context[56], context[40], context[41]);
        refalrts::alloc_close_bracket(vm, context[57]);
        refalrts::copy_evar(vm, context[58], context[59], context[9], context[10]);
        refalrts::alloc_open_bracket(vm, context[60]);
        refalrts::copy_evar(vm, context[61], context[62], context[42], context[43]);
        refalrts::alloc_close_bracket(vm, context[63]);
        refalrts::alloc_open_bracket(vm, context[64]);
        refalrts::copy_evar(vm, context[65], context[66], context[44], context[45]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[52] );
        refalrts::link_brackets( context[64], context[28] );
        refalrts::link_brackets( context[60], context[63] );
        refalrts::link_brackets( context[54], context[57] );
        refalrts::link_brackets( context[27], context[51] );
        refalrts::push_stack( vm, context[50] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[28];
        res = refalrts::splice_evar( res, context[65], context[66] );
        res = refalrts::splice_evar( res, context[50], context[64] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_evar( res, context[0], context[18] );
        res = refalrts::splice_evar( res, context[27], context[39] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@8/4 (/7 e.B/40 )/8 t.Term/9 (/13 e.Contr/42 )/14 (/17 e.E/44 )/18 (/27 # ADT-Brackets/39 (/52 e.2/50 )/53 e.1/46 )/28 e.Tail/48 >/1
      context[40] = context[29];
      context[41] = context[30];
      context[42] = context[31];
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[37];
      context[47] = context[38];
      context[48] = context[35];
      context[49] = context[36];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[39] ) )
        continue;
      context[50] = 0;
      context[51] = 0;
      context[52] = refalrts::brackets_left( context[50], context[51], context[46], context[47] );
      if( ! context[52] )
        continue;
      refalrts::bracket_pointers(context[52], context[53]);
      // closed e.B as range 40
      // closed e.Contr as range 42
      // closed e.E as range 44
      // closed e.2 as range 50
      // closed e.1 as range 46
      // closed e.Tail as range 48
      //DEBUG: t.Term: 9
      //DEBUG: e.B: 40
      //DEBUG: e.Contr: 42
      //DEBUG: e.E: 44
      //DEBUG: e.2: 50
      //DEBUG: e.1: 46
      //DEBUG: e.Tail: 48

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/27 AsIs: # ADT-Brackets/39 AsIs: (/52 AsIs: e.2/50 AsIs: )/53 } Tile{ AsIs: </0 AsIs: & Map@8/4 AsIs: (/7 AsIs: e.B/40 AsIs: )/8 AsIs: t.Term/9 AsIs: (/13 AsIs: e.Contr/42 AsIs: )/14 AsIs: (/17 AsIs: e.E/44 AsIs: )/18 } Tile{ AsIs: e.1/46 } >/54 )/55 </56 & Map@8/57 (/58 e.B/40/59 )/61 t.Term/9/62 (/64 e.Contr/42/65 )/67 (/68 e.E/44/69 Tile{ AsIs: )/28 AsIs: e.Tail/48 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[54]);
      refalrts::alloc_close_bracket(vm, context[55]);
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_name(vm, context[57], functions[efunc_gen_Map_Z8]);
      refalrts::alloc_open_bracket(vm, context[58]);
      refalrts::copy_evar(vm, context[59], context[60], context[40], context[41]);
      refalrts::alloc_close_bracket(vm, context[61]);
      refalrts::copy_evar(vm, context[62], context[63], context[9], context[10]);
      refalrts::alloc_open_bracket(vm, context[64]);
      refalrts::copy_evar(vm, context[65], context[66], context[42], context[43]);
      refalrts::alloc_close_bracket(vm, context[67]);
      refalrts::alloc_open_bracket(vm, context[68]);
      refalrts::copy_evar(vm, context[69], context[70], context[44], context[45]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[56] );
      refalrts::link_brackets( context[68], context[28] );
      refalrts::link_brackets( context[64], context[67] );
      refalrts::link_brackets( context[58], context[61] );
      refalrts::link_brackets( context[27], context[55] );
      refalrts::push_stack( vm, context[54] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[52], context[53] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[28];
      res = refalrts::splice_evar( res, context[69], context[70] );
      res = refalrts::splice_evar( res, context[54], context[68] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[0], context[18] );
      res = refalrts::splice_evar( res, context[27], context[53] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@8/4 (/7 e.B/29 )/8 t.Term/9 (/13 e.Contr/31 )/14 (/17 e.E/33 )/18 t.Next/27 e.Tail/35 >/1
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[21];
    context[32] = context[22];
    context[33] = context[23];
    context[34] = context[24];
    context[35] = context[25];
    context[36] = context[26];
    // closed e.B as range 29
    // closed e.Contr as range 31
    // closed e.E as range 33
    // closed e.Tail as range 35
    //DEBUG: t.Term: 9
    //DEBUG: t.Next: 27
    //DEBUG: e.B: 29
    //DEBUG: e.Contr: 31
    //DEBUG: e.E: 33
    //DEBUG: e.Tail: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </37 & ApplyContractions-Term*5/38 Tile{ AsIs: t.Next/27 } (/39 e.B/29/40 (/42 t.Term/9/43 ':'/45 e.Contr/31/46 )/48 e.E/33/49 )/51 >/52 Tile{ AsIs: </0 AsIs: & Map@8/4 AsIs: (/7 AsIs: e.B/29 AsIs: )/8 AsIs: t.Term/9 AsIs: (/13 AsIs: e.Contr/31 AsIs: )/14 AsIs: (/17 AsIs: e.E/33 AsIs: )/18 } Tile{ AsIs: e.Tail/35 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[37]);
    refalrts::alloc_name(vm, context[38], functions[efunc_gen_ApplyContractionsm_Term_D5]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::copy_evar(vm, context[40], context[41], context[29], context[30]);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::copy_evar(vm, context[43], context[44], context[9], context[10]);
    refalrts::alloc_char(vm, context[45], ':');
    refalrts::copy_evar(vm, context[46], context[47], context[31], context[32]);
    refalrts::alloc_close_bracket(vm, context[48]);
    refalrts::copy_evar(vm, context[49], context[50], context[33], context[34]);
    refalrts::alloc_close_bracket(vm, context[51]);
    refalrts::alloc_close_call(vm, context[52]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[52] );
    refalrts::push_stack( vm, context[37] );
    refalrts::link_brackets( context[39], context[51] );
    refalrts::link_brackets( context[42], context[48] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[0], context[18] );
    res = refalrts::splice_evar( res, context[39], context[52] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@8/4 (/7 e.B/19 )/8 t.Term/9 (/13 e.Contr/21 )/14 (/17 e.E/23 )/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[15];
    context[24] = context[16];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.B as range 19
    // closed e.Contr as range 21
    // closed e.E as range 23
    //DEBUG: t.Term: 9
    //DEBUG: e.B: 19
    //DEBUG: e.Contr: 21
    //DEBUG: e.E: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@8/4 (/7 e.B/19 )/8 t.Term/9 (/13 e.Contr/21 )/14 (/17 e.E/23 )/18 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@8/4 (/7 e.B/5 )/8 t.Term/9 (/13 e.Contr/11 )/14 (/17 e.E/15 )/18 e.items/2 >/1
  // closed e.B as range 5
  // closed e.Contr as range 11
  // closed e.E as range 15
  // closed e.items as range 2
  //DEBUG: t.Term: 9
  //DEBUG: e.B: 5
  //DEBUG: e.Contr: 11
  //DEBUG: e.E: 15
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </17 } & Map@0/19 Tile{ HalfReuse: [*]/0 Reuse: & ApplyContractions\1@0/4 AsIs: (/7 AsIs: e.B/5 HalfReuse: (/8 AsIs: t.Term/9 HalfReuse: ':'/13 AsIs: e.Contr/11 AsIs: )/14 } Tile{ AsIs: e.E/15 } )/20 Tile{ HalfReuse: {*}/18 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[19], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::reinit_open_call(context[17]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_ApplyContractions_L1Z0]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_char(context[13], ':');
  refalrts::reinit_unwrapped_closure(context[18], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[7], context[20] );
  refalrts::link_brackets( context[8], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[18];
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[0], context[14] );
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_elem( res, context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[18] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z8("Map@8", COOKIE1_, COOKIE2_, func_gen_Map_Z8);


static refalrts::FnResult func_gen_Apply_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@3/4 t.new1/5 e.new2/2 t.new3/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply@3/4 s.Fn/5 e.X/9 t.X/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X as range 9
    //DEBUG: t.X: 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.X: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.X/9 AsIs: t.X/7 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@3/4 (/5 t.Closure/13 e.Bounded/11 )/6 e.X/9 t.X/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    // closed e.X as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded as range 11
    //DEBUG: t.X: 7
    //DEBUG: e.X: 9
    //DEBUG: t.Closure: 13
    //DEBUG: e.Bounded: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@3/4 } Tile{ AsIs: t.Closure/13 } Tile{ AsIs: e.Bounded/11 } Tile{ AsIs: e.X/9 } Tile{ AsIs: t.X/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@3/4 t.dyn0/5 e.X/2 t.X/7 >/1
  // closed e.X as range 2
  //DEBUG: t.dyn0: 5
  //DEBUG: t.X: 7
  //DEBUG: e.X: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: e.X/2 AsIs: t.X/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z3("Apply@3", COOKIE1_, COOKIE2_, func_gen_Apply_Z3);


static refalrts::FnResult func_gen_Apply_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Apply@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@4/4 t.new1/5 e.new2/2 t.new3/9 t.new4/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_right( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply@4/4 s.Fn/5 e.X/11 t.X/9 t.X0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X as range 11
    //DEBUG: t.X: 9
    //DEBUG: t.X0: 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.X: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.X/11 AsIs: t.X/9 AsIs: t.X0/7 HalfReuse: & $table/1 } >/13 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@4/4 (/5 t.Closure/15 e.Bounded/13 )/6 e.X/11 t.X/9 t.X0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
      continue;
    // closed e.X as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Bounded as range 13
    //DEBUG: t.X: 9
    //DEBUG: t.X0: 7
    //DEBUG: e.X: 11
    //DEBUG: t.Closure: 15
    //DEBUG: e.Bounded: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@4/4 } Tile{ AsIs: t.Closure/15 } Tile{ AsIs: e.Bounded/13 } Tile{ AsIs: e.X/11 } Tile{ AsIs: t.X/9 AsIs: t.X0/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@4/4 t.dyn0/5 e.X/2 t.X/9 t.X0/7 >/1
  // closed e.X as range 2
  //DEBUG: t.dyn0: 5
  //DEBUG: t.X: 9
  //DEBUG: t.X0: 7
  //DEBUG: e.X: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: e.X/2 AsIs: t.X/9 AsIs: t.X0/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z4("Apply@4", COOKIE1_, COOKIE2_, func_gen_Apply_Z4);


static refalrts::FnResult func_gen_Reduce_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Reduce$1=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Reduce$1=1@1/4 (/7 e.Tail0/9 )/8 t.Acc$a/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0: 9
    //DEBUG: t.Acc$a: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@1/4 } Tile{ AsIs: t.Acc$a/13 } Tile{ AsIs: e.Tail0/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@1/4 (/7 e.Tail0/5 )/8 e.dyn/2 >/1
  // closed e.Tail0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Tail0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 Tile{ HalfReuse: & Reduce$1=1@0/0 Reuse: & IsPassiveCall\1@0/4 AsIs: (/7 AsIs: e.Tail0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_IsPassiveCall_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z1("Reduce$1=1@1", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@1/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@1/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@1/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & FindOptimizedCall-Term@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FindOptimizedCallm_Term_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z1("DoMapAccum$1=1@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DoMapAccum$1=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & DoMapAccum$1=1@2/4 (/7 e.Expr/17 )/8 (/11 e.Scanned0/19 )/12 (/15 e.Tail0/21 )/16 t.Acc$a/25 e.StepScanned/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.Expr as range 17
    // closed e.Scanned0 as range 19
    // closed e.Tail0 as range 21
    context[26] = refalrts::tvar_left( context[25], context[23], context[24] );
    if( ! context[26] )
      continue;
    // closed e.StepScanned as range 23
    //DEBUG: e.Expr: 17
    //DEBUG: e.Scanned0: 19
    //DEBUG: e.Tail0: 21
    //DEBUG: t.Acc$a: 25
    //DEBUG: e.StepScanned: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/11 {REMOVED TILE} )/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@2/4 AsIs: (/7 AsIs: e.Expr/17 AsIs: )/8 } Tile{ AsIs: t.Acc$a/25 } Tile{ AsIs: (/15 } Tile{ AsIs: e.Scanned0/19 } Tile{ AsIs: e.StepScanned/23 } Tile{ AsIs: )/16 } Tile{ AsIs: e.Tail0/21 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@2/4 (/7 e.Expr/5 )/8 (/11 e.Scanned0/9 )/12 (/15 e.Tail0/13 )/16 e.dyn/2 >/1
  // closed e.Expr as range 5
  // closed e.Scanned0 as range 9
  // closed e.Tail0 as range 13
  // closed e.dyn as range 2
  //DEBUG: e.Expr: 5
  //DEBUG: e.Scanned0: 9
  //DEBUG: e.Tail0: 13
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@0/4 HalfReuse: [*]/7 } & OptExpr-Aux\1@0/17 (/18 Tile{ AsIs: e.Expr/5 } )/19 Tile{ HalfReuse: {*}/8 AsIs: (/11 AsIs: e.Scanned0/9 AsIs: )/12 AsIs: (/15 AsIs: e.Tail0/13 AsIs: )/16 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_OptExprm_Aux_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::reinit_closure_head(context[7]);
  refalrts::reinit_unwrapped_closure(context[8], context[7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  refalrts::wrap_closure( context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z2("DoMapAccum$1=1@2", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z2);


static refalrts::FnResult func_gen_FindOptInfom_Aux_S2A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & FindOptInfo-Aux$2=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FindOptInfo-Aux$2=1@1/4 (/7 e.new1/5 )/8 s.new2/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 s.new6/22 e.new7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new7 as range 2
  do {
    // </0 & FindOptInfo-Aux$2=1@1/4 (/7 e.OptFuncs-B0/23 )/8 s.Mode0/9 (/12 e./25 )/13 (/16 e.Body0/27 )/17 (/20 e.OptFuncs-E0/29 )/21 s.N/22 # Sentences/33 e.Sentences/31 >/1
    context[23] = context[5];
    context[24] = context[6];
    context[25] = context[10];
    context[26] = context[11];
    context[27] = context[14];
    context[28] = context[15];
    context[29] = context[18];
    context[30] = context[19];
    context[31] = context[2];
    context[32] = context[3];
    context[33] = refalrts::ident_left( identifiers[ident_Sentences], context[31], context[32] );
    if( ! context[33] )
      continue;
    // closed e.OptFuncs-B0 as range 23
    // closed e. as range 25
    // closed e.Body0 as range 27
    // closed e.OptFuncs-E0 as range 29
    // closed e.Sentences as range 31
    //DEBUG: s.Mode0: 9
    //DEBUG: s.N: 22
    //DEBUG: e.OptFuncs-B0: 23
    //DEBUG: e.: 25
    //DEBUG: e.Body0: 27
    //DEBUG: e.OptFuncs-E0: 29
    //DEBUG: e.Sentences: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.OptFuncs-B0/23 } Tile{ HalfReuse: (/8 AsIs: s.Mode0/9 AsIs: (/12 AsIs: e./25 AsIs: )/13 } Tile{ AsIs: e.Body0/27 } Tile{ HalfReuse: )/20 AsIs: e.OptFuncs-E0/29 HalfReuse: (/21 } Tile{ HalfReuse: s.Mode09 /4 AsIs: (/7 } e./25/34 # SUF/36 '*'/37 Tile{ AsIs: s.N/22 } Tile{ AsIs: )/17 } Tile{ HalfReuse: # Sentences/16 } Tile{ AsIs: </0 } Tile{ HalfReuse: & DropLeft/33 AsIs: e.Sentences/31 HalfReuse: s.N22 /1 } >/38 )/39 Tile{ ]] }
    refalrts::copy_evar(vm, context[34], context[35], context[25], context[26]);
    refalrts::alloc_ident(vm, context[36], identifiers[ident_SUF]);
    refalrts::alloc_char(vm, context[37], '*');
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[20]);
    refalrts::reinit_open_bracket(context[21]);
    refalrts::reinit_svar( context[4], context[9] );
    refalrts::reinit_ident(context[16], identifiers[ident_Sentences]);
    refalrts::reinit_name(context[33], functions[efunc_DropLeft]);
    refalrts::reinit_svar( context[1], context[22] );
    refalrts::link_brackets( context[21], context[39] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[17] );
    refalrts::link_brackets( context[8], context[20] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[33], context[1] );
    res = refalrts::splice_elem( res, context[0] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[8], context[13] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindOptInfo-Aux$2=1@1/4 (/7 e.OptFuncs-B0/5 )/8 s.Mode0/9 (/12 e./10 )/13 (/16 e.Body0/14 )/17 (/20 e.OptFuncs-E0/18 )/21 s.N/22 e.dyn/2 >/1
  // closed e.OptFuncs-B0 as range 5
  // closed e. as range 10
  // closed e.Body0 as range 14
  // closed e.OptFuncs-E0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.Mode0: 9
  //DEBUG: s.N: 22
  //DEBUG: e.OptFuncs-B0: 5
  //DEBUG: e.: 10
  //DEBUG: e.Body0: 14
  //DEBUG: e.OptFuncs-E0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindOptInfo-Aux$2=1@0/4 AsIs: (/7 AsIs: e.OptFuncs-B0/5 AsIs: )/8 AsIs: s.Mode0/9 AsIs: (/12 AsIs: e./10 AsIs: )/13 AsIs: (/16 AsIs: e.Body0/14 AsIs: )/17 AsIs: (/20 AsIs: e.OptFuncs-E0/18 AsIs: )/21 } (/23 e./10/24 # SUF/26 '*'/27 s.N/22/28 )/29 Tile{ AsIs: s.N/22 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::copy_evar(vm, context[24], context[25], context[10], context[11]);
  refalrts::alloc_ident(vm, context[26], identifiers[ident_SUF]);
  refalrts::alloc_char(vm, context[27], '*');
  refalrts::copy_stvar(vm, context[28], context[22]);
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::update_name(context[4], functions[efunc_gen_FindOptInfom_Aux_S2A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[23], context[29] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[22];
  res = refalrts::splice_evar( res, context[23], context[29] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptInfom_Aux_S2A1Z1("FindOptInfo-Aux$2=1@1", COOKIE1_, COOKIE2_, func_gen_FindOptInfom_Aux_S2A1Z1);


static refalrts::FnResult func_gen_FindOptInfom_Aux_S2A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & FindOptInfo-Aux$2=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FindOptInfo-Aux$2=1@2/4 (/7 e.new1/5 )/8 s.new2/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 s.new6/22 e.new7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new7 as range 2
  do {
    // </0 & FindOptInfo-Aux$2=1@2/4 (/7 e.OptFuncs-B0/23 )/8 s.Mode0/9 (/12 e.0/25 )/13 (/16 e.Body0/27 )/17 (/20 e.OptFuncs-E0/29 )/21 s.N/22 # Sentences/33 e.Sentences/31 >/1
    context[23] = context[5];
    context[24] = context[6];
    context[25] = context[10];
    context[26] = context[11];
    context[27] = context[14];
    context[28] = context[15];
    context[29] = context[18];
    context[30] = context[19];
    context[31] = context[2];
    context[32] = context[3];
    context[33] = refalrts::ident_left( identifiers[ident_Sentences], context[31], context[32] );
    if( ! context[33] )
      continue;
    // closed e.OptFuncs-B0 as range 23
    // closed e.0 as range 25
    // closed e.Body0 as range 27
    // closed e.OptFuncs-E0 as range 29
    // closed e.Sentences as range 31
    //DEBUG: s.Mode0: 9
    //DEBUG: s.N: 22
    //DEBUG: e.OptFuncs-B0: 23
    //DEBUG: e.0: 25
    //DEBUG: e.Body0: 27
    //DEBUG: e.OptFuncs-E0: 29
    //DEBUG: e.Sentences: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.OptFuncs-B0/23 } Tile{ HalfReuse: (/8 AsIs: s.Mode0/9 AsIs: (/12 AsIs: e.0/25 AsIs: )/13 } Tile{ AsIs: e.Body0/27 } Tile{ HalfReuse: )/20 AsIs: e.OptFuncs-E0/29 HalfReuse: (/21 } Tile{ HalfReuse: s.Mode09 /4 AsIs: (/7 } e.0/25/34 Tile{ HalfReuse: '*'/16 } Tile{ AsIs: s.N/22 } Tile{ AsIs: )/17 } # Sentences/36 Tile{ AsIs: </0 } Tile{ HalfReuse: & DropLeft/33 AsIs: e.Sentences/31 HalfReuse: s.N22 /1 } >/37 )/38 Tile{ ]] }
    refalrts::copy_evar(vm, context[34], context[35], context[25], context[26]);
    refalrts::alloc_ident(vm, context[36], identifiers[ident_Sentences]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_close_bracket(context[20]);
    refalrts::reinit_open_bracket(context[21]);
    refalrts::reinit_svar( context[4], context[9] );
    refalrts::reinit_char(context[16], '*');
    refalrts::reinit_name(context[33], functions[efunc_DropLeft]);
    refalrts::reinit_svar( context[1], context[22] );
    refalrts::link_brackets( context[21], context[38] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[17] );
    refalrts::link_brackets( context[8], context[20] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[33], context[1] );
    res = refalrts::splice_elem( res, context[0] );
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[8], context[13] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindOptInfo-Aux$2=1@2/4 (/7 e.OptFuncs-B0/5 )/8 s.Mode0/9 (/12 e.0/10 )/13 (/16 e.Body0/14 )/17 (/20 e.OptFuncs-E0/18 )/21 s.N/22 e.dyn/2 >/1
  // closed e.OptFuncs-B0 as range 5
  // closed e.0 as range 10
  // closed e.Body0 as range 14
  // closed e.OptFuncs-E0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.Mode0: 9
  //DEBUG: s.N: 22
  //DEBUG: e.OptFuncs-B0: 5
  //DEBUG: e.0: 10
  //DEBUG: e.Body0: 14
  //DEBUG: e.OptFuncs-E0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindOptInfo-Aux$2=1@0/4 AsIs: (/7 AsIs: e.OptFuncs-B0/5 AsIs: )/8 AsIs: s.Mode0/9 AsIs: (/12 AsIs: e.0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Body0/14 AsIs: )/17 AsIs: (/20 AsIs: e.OptFuncs-E0/18 AsIs: )/21 } (/23 e.0/10/24 '*'/26 s.N/22/27 )/28 Tile{ AsIs: s.N/22 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::copy_evar(vm, context[24], context[25], context[10], context[11]);
  refalrts::alloc_char(vm, context[26], '*');
  refalrts::copy_stvar(vm, context[27], context[22]);
  refalrts::alloc_close_bracket(vm, context[28]);
  refalrts::update_name(context[4], functions[efunc_gen_FindOptInfom_Aux_S2A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[23], context[28] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[22];
  res = refalrts::splice_evar( res, context[23], context[28] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptInfom_Aux_S2A1Z2("FindOptInfo-Aux$2=1@2", COOKIE1_, COOKIE2_, func_gen_FindOptInfom_Aux_S2A1Z2);


static refalrts::FnResult func_gen_FindOptInfom_Aux_S2A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & FindOptInfo-Aux$2=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FindOptInfo-Aux$2=1@3/4 (/7 e.new1/5 )/8 s.new2/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & FindOptInfo-Aux$2=1@3/4 (/7 e.OptFuncs-B0/22 )/8 s.Mode0/9 (/12 e.Name0/24 )/13 (/16 e.Body0/26 )/17 (/20 e.OptFuncs-E0/28 )/21 # Sentences/32 e.Sentences/30 >/1
    context[22] = context[5];
    context[23] = context[6];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    context[32] = refalrts::ident_left( identifiers[ident_Sentences], context[30], context[31] );
    if( ! context[32] )
      continue;
    // closed e.OptFuncs-B0 as range 22
    // closed e.Name0 as range 24
    // closed e.Body0 as range 26
    // closed e.OptFuncs-E0 as range 28
    // closed e.Sentences as range 30
    //DEBUG: s.Mode0: 9
    //DEBUG: e.OptFuncs-B0: 22
    //DEBUG: e.Name0: 24
    //DEBUG: e.Body0: 26
    //DEBUG: e.OptFuncs-E0: 28
    //DEBUG: e.Sentences: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.OptFuncs-B0/22 } Tile{ HalfReuse: (/0 HalfReuse: s.Mode09 /4 AsIs: (/7 } e.Name0/24/33 Tile{ HalfReuse: )/20 } Tile{ AsIs: e.Body0/26 } Tile{ AsIs: )/17 } Tile{ AsIs: e.OptFuncs-E0/28 } Tile{ HalfReuse: (/8 AsIs: s.Mode0/9 AsIs: (/12 AsIs: e.Name0/24 AsIs: )/13 HalfReuse: # Sentences/16 } Tile{ HalfReuse: </21 HalfReuse: & DropLeft/32 AsIs: e.Sentences/30 HalfReuse: 0/1 } >/35 )/36 Tile{ ]] }
    refalrts::copy_evar(vm, context[33], context[34], context[24], context[25]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_svar( context[4], context[9] );
    refalrts::reinit_close_bracket(context[20]);
    refalrts::reinit_open_bracket(context[8]);
    refalrts::reinit_ident(context[16], identifiers[ident_Sentences]);
    refalrts::reinit_open_call(context[21]);
    refalrts::reinit_name(context[32], functions[efunc_DropLeft]);
    refalrts::reinit_number(context[1], 0UL);
    refalrts::link_brackets( context[8], context[36] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[0], context[17] );
    refalrts::link_brackets( context[7], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[21], context[1] );
    res = refalrts::splice_evar( res, context[8], context[16] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FindOptInfo-Aux$2=1@3/4 (/7 e.OptFuncs-B0/5 )/8 s.Mode0/9 (/12 e.Name0/10 )/13 (/16 e.Body0/14 )/17 (/20 e.OptFuncs-E0/18 )/21 e.dyn/2 >/1
  // closed e.OptFuncs-B0 as range 5
  // closed e.Name0 as range 10
  // closed e.Body0 as range 14
  // closed e.OptFuncs-E0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.Mode0: 9
  //DEBUG: e.OptFuncs-B0: 5
  //DEBUG: e.Name0: 10
  //DEBUG: e.Body0: 14
  //DEBUG: e.OptFuncs-E0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & FindOptInfo-Aux$2=1@0/4 AsIs: (/7 AsIs: e.OptFuncs-B0/5 AsIs: )/8 AsIs: s.Mode0/9 AsIs: (/12 AsIs: e.Name0/10 AsIs: )/13 AsIs: (/16 AsIs: e.Body0/14 AsIs: )/17 AsIs: (/20 AsIs: e.OptFuncs-E0/18 AsIs: )/21 } (/22 e.Name0/10/23 )/25 0/26 Tile{ AsIs: e.dyn/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::copy_evar(vm, context[23], context[24], context[10], context[11]);
  refalrts::alloc_close_bracket(vm, context[25]);
  refalrts::alloc_number(vm, context[26], 0UL);
  refalrts::update_name(context[4], functions[efunc_gen_FindOptInfom_Aux_S2A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[22], context[25] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[22], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FindOptInfom_Aux_S2A1Z3("FindOptInfo-Aux$2=1@3", COOKIE1_, COOKIE2_, func_gen_FindOptInfom_Aux_S2A1Z3);


static refalrts::FnResult func_gen_Map_Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & Map@9/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@9/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@9/4 (/7 s.new3/13 e.new4/11 )/8 e.new5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new4 as range 11
      do {
        // </0 & Map@9/4 (/7 # Symbol/13 # Number/18 s.n/19 )/8 e.Tail/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Symbol], context[13] ) )
          continue;
        context[18] = refalrts::ident_left( identifiers[ident_Number], context[14], context[15] );
        if( ! context[18] )
          continue;
        // closed e.Tail as range 16
        if( ! refalrts::svar_left( context[19], context[14], context[15] ) )
          continue;
        if( ! refalrts::empty_seq( context[14], context[15] ) )
          continue;
        //DEBUG: e.Tail: 16
        //DEBUG: s.n: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Symbol/4 HalfReuse: # Char/7 HalfReuse: </13 HalfReuse: & Chr/18 AsIs: s.n/19 HalfReuse: >/8 } )/20 </21 & Map@9/22 Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_gen_Map_Z9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Symbol]);
        refalrts::reinit_ident(context[7], identifiers[ident_Char]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[18], functions[efunc_Chr]);
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[21] );
        refalrts::link_brackets( context[0], context[20] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[20], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@9/4 (/7 # Var/13 e.0/14 )/8 e.Tail/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Var], context[13] ) )
          continue;
        // closed e.0 as range 14
        // closed e.Tail as range 16
        //DEBUG: e.0: 14
        //DEBUG: e.Tail: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/18 # ColdCallBrackets/19 (/20 # Symbol/21 # Name/22"Ch"/23 Tile{ HalfReuse: 'r'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # Var/13 AsIs: e.0/14 AsIs: )/8 } )/25 </26 & Map@9/27 Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[18]);
        refalrts::alloc_ident(vm, context[19], identifiers[ident_ColdCallBrackets]);
        refalrts::alloc_open_bracket(vm, context[20]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[22], identifiers[ident_Name]);
        refalrts::alloc_chars(vm, context[23], context[24], "Ch", 2);
        refalrts::alloc_close_bracket(vm, context[25]);
        refalrts::alloc_open_call(vm, context[26]);
        refalrts::alloc_name(vm, context[27], functions[efunc_gen_Map_Z9]);
        refalrts::reinit_char(context[0], 'r');
        refalrts::reinit_close_bracket(context[4]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[26] );
        refalrts::link_brackets( context[18], context[25] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[20], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[25], context[27] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[18], context[24] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@9/4 (/7 # ColdCallBrackets/13 e.0/14 )/8 e.Tail/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[13] ) )
        continue;
      // closed e.0 as range 14
      // closed e.Tail as range 16
      //DEBUG: e.0: 14
      //DEBUG: e.Tail: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/18 # ColdCallBrackets/19 (/20 # Symbol/21 # Name/22"Ch"/23 Tile{ HalfReuse: 'r'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # ColdCallBrackets/13 AsIs: e.0/14 AsIs: )/8 } )/25 </26 & Map@9/27 Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[18]);
      refalrts::alloc_ident(vm, context[19], identifiers[ident_ColdCallBrackets]);
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_ident(vm, context[21], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[22], identifiers[ident_Name]);
      refalrts::alloc_chars(vm, context[23], context[24], "Ch", 2);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_Map_Z9]);
      refalrts::reinit_char(context[0], 'r');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[26] );
      refalrts::link_brackets( context[18], context[25] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[20], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[18], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@9/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & StaticSubstitution\1@0/4 } # Number/11 # Char/12 & Chr@0/13 (/14"Chr"/15 )/17 Tile{ AsIs: t.Next/7 } >/18 </19 & Map@9/20 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[11], identifiers[ident_Number]);
    refalrts::alloc_ident(vm, context[12], identifiers[ident_Char]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Chr_Z0]);
    refalrts::alloc_open_bracket(vm, context[14]);
    refalrts::alloc_chars(vm, context[15], context[16], "Chr", 3);
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_Map_Z9]);
    refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_L1Z0]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[14], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[11], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@9/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@9/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@9/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Map@0/6 [*]/7 & StaticSubstitution\1@0/8 # Number/9 # Char/10 & Chr@0/11 (/12"Chr"/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_closure_head(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_StaticSubstitution_L1Z0]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Number]);
  refalrts::alloc_ident(vm, context[10], identifiers[ident_Char]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Chr_Z0]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_chars(vm, context[13], context[14], "Chr", 3);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[12], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[14] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z9("Map@9", COOKIE1_, COOKIE2_, func_gen_Map_Z9);


static refalrts::FnResult func_gen_Map_Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & Map@10/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@10/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@10/4 (/7 s.new3/13 e.new4/11 )/8 e.new5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new4 as range 11
      do {
        // </0 & Map@10/4 (/7 # Symbol/13 # Char/18 s.n/19 )/8 e.Tail/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Symbol], context[13] ) )
          continue;
        context[18] = refalrts::ident_left( identifiers[ident_Char], context[14], context[15] );
        if( ! context[18] )
          continue;
        // closed e.Tail as range 16
        if( ! refalrts::svar_left( context[19], context[14], context[15] ) )
          continue;
        if( ! refalrts::empty_seq( context[14], context[15] ) )
          continue;
        //DEBUG: e.Tail: 16
        //DEBUG: s.n: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Symbol/4 HalfReuse: # Number/7 HalfReuse: </13 HalfReuse: & Ord/18 AsIs: s.n/19 HalfReuse: >/8 } )/20 </21 & Map@10/22 Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_gen_Map_Z10]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Symbol]);
        refalrts::reinit_ident(context[7], identifiers[ident_Number]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[18], functions[efunc_Ord]);
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[21] );
        refalrts::link_brackets( context[0], context[20] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[20], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@10/4 (/7 # Var/13 e.0/14 )/8 e.Tail/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Var], context[13] ) )
          continue;
        // closed e.0 as range 14
        // closed e.Tail as range 16
        //DEBUG: e.0: 14
        //DEBUG: e.Tail: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/18 # ColdCallBrackets/19 (/20 # Symbol/21 # Name/22"Or"/23 Tile{ HalfReuse: 'd'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # Var/13 AsIs: e.0/14 AsIs: )/8 } )/25 </26 & Map@10/27 Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[18]);
        refalrts::alloc_ident(vm, context[19], identifiers[ident_ColdCallBrackets]);
        refalrts::alloc_open_bracket(vm, context[20]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[22], identifiers[ident_Name]);
        refalrts::alloc_chars(vm, context[23], context[24], "Or", 2);
        refalrts::alloc_close_bracket(vm, context[25]);
        refalrts::alloc_open_call(vm, context[26]);
        refalrts::alloc_name(vm, context[27], functions[efunc_gen_Map_Z10]);
        refalrts::reinit_char(context[0], 'd');
        refalrts::reinit_close_bracket(context[4]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[26] );
        refalrts::link_brackets( context[18], context[25] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[20], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[25], context[27] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[18], context[24] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@10/4 (/7 # ColdCallBrackets/13 e.0/14 )/8 e.Tail/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[13] ) )
        continue;
      // closed e.0 as range 14
      // closed e.Tail as range 16
      //DEBUG: e.0: 14
      //DEBUG: e.Tail: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/18 # ColdCallBrackets/19 (/20 # Symbol/21 # Name/22"Or"/23 Tile{ HalfReuse: 'd'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # ColdCallBrackets/13 AsIs: e.0/14 AsIs: )/8 } )/25 </26 & Map@10/27 Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[18]);
      refalrts::alloc_ident(vm, context[19], identifiers[ident_ColdCallBrackets]);
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_ident(vm, context[21], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[22], identifiers[ident_Name]);
      refalrts::alloc_chars(vm, context[23], context[24], "Or", 2);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_Map_Z10]);
      refalrts::reinit_char(context[0], 'd');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[26] );
      refalrts::link_brackets( context[18], context[25] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[20], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[18], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@10/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & StaticSubstitution\1@0/4 } # Char/11 # Number/12 & Ord@0/13 (/14"Ord"/15 )/17 Tile{ AsIs: t.Next/7 } >/18 </19 & Map@10/20 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[11], identifiers[ident_Char]);
    refalrts::alloc_ident(vm, context[12], identifiers[ident_Number]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Ord_Z0]);
    refalrts::alloc_open_bracket(vm, context[14]);
    refalrts::alloc_chars(vm, context[15], context[16], "Ord", 3);
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_Map_Z10]);
    refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_L1Z0]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[14], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[11], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@10/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@10/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@10/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Map@0/6 [*]/7 & StaticSubstitution\1@0/8 # Char/9 # Number/10 & Ord@0/11 (/12"Ord"/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_closure_head(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_StaticSubstitution_L1Z0]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Char]);
  refalrts::alloc_ident(vm, context[10], identifiers[ident_Number]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Ord_Z0]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_chars(vm, context[13], context[14], "Ord", 3);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[12], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[14] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z10("Map@10", COOKIE1_, COOKIE2_, func_gen_Map_Z10);


static refalrts::FnResult func_gen_Map_Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & Map@11/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@11/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@11/4 (/7 s.new3/13 e.new4/11 )/8 e.new5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new4 as range 11
      do {
        // </0 & Map@11/4 (/7 # Symbol/13 # Char/18 s.n/19 )/8 e.Tail/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Symbol], context[13] ) )
          continue;
        context[18] = refalrts::ident_left( identifiers[ident_Char], context[14], context[15] );
        if( ! context[18] )
          continue;
        // closed e.Tail as range 16
        if( ! refalrts::svar_left( context[19], context[14], context[15] ) )
          continue;
        if( ! refalrts::empty_seq( context[14], context[15] ) )
          continue;
        //DEBUG: e.Tail: 16
        //DEBUG: s.n: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Symbol/4 HalfReuse: # Char/7 HalfReuse: </13 HalfReuse: & Upper/18 AsIs: s.n/19 HalfReuse: >/8 } )/20 </21 & Map@11/22 Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_gen_Map_Z11]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Symbol]);
        refalrts::reinit_ident(context[7], identifiers[ident_Char]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[18], functions[efunc_Upper]);
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[21] );
        refalrts::link_brackets( context[0], context[20] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[20], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@11/4 (/7 # Var/13 e.0/14 )/8 e.Tail/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Var], context[13] ) )
          continue;
        // closed e.0 as range 14
        // closed e.Tail as range 16
        //DEBUG: e.0: 14
        //DEBUG: e.Tail: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/18 # ColdCallBrackets/19 (/20 # Symbol/21 # Name/22"Uppe"/23 Tile{ HalfReuse: 'r'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # Var/13 AsIs: e.0/14 AsIs: )/8 } )/25 </26 & Map@11/27 Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[18]);
        refalrts::alloc_ident(vm, context[19], identifiers[ident_ColdCallBrackets]);
        refalrts::alloc_open_bracket(vm, context[20]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[22], identifiers[ident_Name]);
        refalrts::alloc_chars(vm, context[23], context[24], "Uppe", 4);
        refalrts::alloc_close_bracket(vm, context[25]);
        refalrts::alloc_open_call(vm, context[26]);
        refalrts::alloc_name(vm, context[27], functions[efunc_gen_Map_Z11]);
        refalrts::reinit_char(context[0], 'r');
        refalrts::reinit_close_bracket(context[4]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[26] );
        refalrts::link_brackets( context[18], context[25] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[20], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[25], context[27] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[18], context[24] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@11/4 (/7 # ColdCallBrackets/13 e.0/14 )/8 e.Tail/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[13] ) )
        continue;
      // closed e.0 as range 14
      // closed e.Tail as range 16
      //DEBUG: e.0: 14
      //DEBUG: e.Tail: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/18 # ColdCallBrackets/19 (/20 # Symbol/21 # Name/22"Uppe"/23 Tile{ HalfReuse: 'r'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # ColdCallBrackets/13 AsIs: e.0/14 AsIs: )/8 } )/25 </26 & Map@11/27 Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[18]);
      refalrts::alloc_ident(vm, context[19], identifiers[ident_ColdCallBrackets]);
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_ident(vm, context[21], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[22], identifiers[ident_Name]);
      refalrts::alloc_chars(vm, context[23], context[24], "Uppe", 4);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_Map_Z11]);
      refalrts::reinit_char(context[0], 'r');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[26] );
      refalrts::link_brackets( context[18], context[25] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[20], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[18], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@11/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & StaticSubstitution\1@0/4 } # Char/11 # Char/12 & Upper@0/13 (/14"Upper"/15 )/17 Tile{ AsIs: t.Next/7 } >/18 </19 & Map@11/20 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[11], identifiers[ident_Char]);
    refalrts::alloc_ident(vm, context[12], identifiers[ident_Char]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Upper_Z0]);
    refalrts::alloc_open_bracket(vm, context[14]);
    refalrts::alloc_chars(vm, context[15], context[16], "Upper", 5);
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_Map_Z11]);
    refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_L1Z0]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[14], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[11], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@11/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@11/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@11/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Map@0/6 [*]/7 & StaticSubstitution\1@0/8 # Char/9 # Char/10 & Upper@0/11 (/12"Upper"/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_closure_head(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_StaticSubstitution_L1Z0]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Char]);
  refalrts::alloc_ident(vm, context[10], identifiers[ident_Char]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Upper_Z0]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_chars(vm, context[13], context[14], "Upper", 5);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[12], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[14] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z11("Map@11", COOKIE1_, COOKIE2_, func_gen_Map_Z11);


static refalrts::FnResult func_gen_Map_Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & Map@12/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@12/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@12/4 (/7 s.new3/13 e.new4/11 )/8 e.new5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new4 as range 11
      do {
        // </0 & Map@12/4 (/7 # Symbol/13 # Char/18 s.n/19 )/8 e.Tail/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Symbol], context[13] ) )
          continue;
        context[18] = refalrts::ident_left( identifiers[ident_Char], context[14], context[15] );
        if( ! context[18] )
          continue;
        // closed e.Tail as range 16
        if( ! refalrts::svar_left( context[19], context[14], context[15] ) )
          continue;
        if( ! refalrts::empty_seq( context[14], context[15] ) )
          continue;
        //DEBUG: e.Tail: 16
        //DEBUG: s.n: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Symbol/4 HalfReuse: # Char/7 HalfReuse: </13 HalfReuse: & Lower/18 AsIs: s.n/19 HalfReuse: >/8 } )/20 </21 & Map@12/22 Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_gen_Map_Z12]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Symbol]);
        refalrts::reinit_ident(context[7], identifiers[ident_Char]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[18], functions[efunc_Lower]);
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[21] );
        refalrts::link_brackets( context[0], context[20] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[20], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@12/4 (/7 # Var/13 e.0/14 )/8 e.Tail/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Var], context[13] ) )
          continue;
        // closed e.0 as range 14
        // closed e.Tail as range 16
        //DEBUG: e.0: 14
        //DEBUG: e.Tail: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/18 # ColdCallBrackets/19 (/20 # Symbol/21 # Name/22"Lowe"/23 Tile{ HalfReuse: 'r'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # Var/13 AsIs: e.0/14 AsIs: )/8 } )/25 </26 & Map@12/27 Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[18]);
        refalrts::alloc_ident(vm, context[19], identifiers[ident_ColdCallBrackets]);
        refalrts::alloc_open_bracket(vm, context[20]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[22], identifiers[ident_Name]);
        refalrts::alloc_chars(vm, context[23], context[24], "Lowe", 4);
        refalrts::alloc_close_bracket(vm, context[25]);
        refalrts::alloc_open_call(vm, context[26]);
        refalrts::alloc_name(vm, context[27], functions[efunc_gen_Map_Z12]);
        refalrts::reinit_char(context[0], 'r');
        refalrts::reinit_close_bracket(context[4]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[26] );
        refalrts::link_brackets( context[18], context[25] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[20], context[4] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[25], context[27] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[18], context[24] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@12/4 (/7 # ColdCallBrackets/13 e.0/14 )/8 e.Tail/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[13] ) )
        continue;
      // closed e.0 as range 14
      // closed e.Tail as range 16
      //DEBUG: e.0: 14
      //DEBUG: e.Tail: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/18 # ColdCallBrackets/19 (/20 # Symbol/21 # Name/22"Lowe"/23 Tile{ HalfReuse: 'r'/0 HalfReuse: )/4 AsIs: (/7 AsIs: # ColdCallBrackets/13 AsIs: e.0/14 AsIs: )/8 } )/25 </26 & Map@12/27 Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[18]);
      refalrts::alloc_ident(vm, context[19], identifiers[ident_ColdCallBrackets]);
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_ident(vm, context[21], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[22], identifiers[ident_Name]);
      refalrts::alloc_chars(vm, context[23], context[24], "Lowe", 4);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_Map_Z12]);
      refalrts::reinit_char(context[0], 'r');
      refalrts::reinit_close_bracket(context[4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[26] );
      refalrts::link_brackets( context[18], context[25] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[20], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[18], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@12/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & StaticSubstitution\1@0/4 } # Char/11 # Char/12 & Lower@0/13 (/14"Lower"/15 )/17 Tile{ AsIs: t.Next/7 } >/18 </19 & Map@12/20 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_ident(vm, context[11], identifiers[ident_Char]);
    refalrts::alloc_ident(vm, context[12], identifiers[ident_Char]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Lower_Z0]);
    refalrts::alloc_open_bracket(vm, context[14]);
    refalrts::alloc_chars(vm, context[15], context[16], "Lower", 5);
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_Map_Z12]);
    refalrts::update_name(context[4], functions[efunc_gen_StaticSubstitution_L1Z0]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[14], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[11], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@12/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@12/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@12/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Map@0/6 [*]/7 & StaticSubstitution\1@0/8 # Char/9 # Char/10 & Lower@0/11 (/12"Lower"/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_closure_head(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_StaticSubstitution_L1Z0]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Char]);
  refalrts::alloc_ident(vm, context[10], identifiers[ident_Char]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Lower_Z0]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_chars(vm, context[13], context[14], "Lower", 5);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[12], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[14] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z12("Map@12", COOKIE1_, COOKIE2_, func_gen_Map_Z12);


static refalrts::FnResult func_gen_DoOptExprm_MakeSubstitutions_S1B1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 85 elems
  refalrts::Iter context[85];
  refalrts::zeros( context, 85 );
  // </0 & DoOptExpr-MakeSubstitutions$1:1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoOptExpr-MakeSubstitutions$1:1@1/4 (/7 e.new1/5 )/8 s.new2/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 (/24 e.new6/22 )/25 (/28 e.new7/26 )/29 e.new8/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 22
  // closed e.new7 as range 26
  // closed e.new8 as range 2
  do {
    // </0 & DoOptExpr-MakeSubstitutions$1:1@1/4 (/7 e.new12/30 )/8 s.new9/9 (/12 e.new13/32 )/13 (/16 e.new14/34 )/17 (/20 e.new15/36 )/21 (/24 e.new16/38 )/25 (/28 e.new17/40 )/29 s.new10/44 e.new11/42 >/1
    context[30] = context[5];
    context[31] = context[6];
    context[32] = context[10];
    context[33] = context[11];
    context[34] = context[14];
    context[35] = context[15];
    context[36] = context[18];
    context[37] = context[19];
    context[38] = context[22];
    context[39] = context[23];
    context[40] = context[26];
    context[41] = context[27];
    context[42] = context[2];
    context[43] = context[3];
    // closed e.new12 as range 30
    // closed e.new13 as range 32
    // closed e.new14 as range 34
    // closed e.new15 as range 36
    // closed e.new16 as range 38
    // closed e.new17 as range 40
    if( ! refalrts::svar_left( context[44], context[42], context[43] ) )
      continue;
    // closed e.new11 as range 42
    do {
      // </0 & DoOptExpr-MakeSubstitutions$1:1@1/4 (/7 e.new20/45 )/8 s.new18/9 (/12 e.new21/47 )/13 (/16 e.new22/49 )/17 (/20 e.new23/51 )/21 (/24 e.new24/53 )/25 (/28 e.new25/55 )/29 # Success/44 e.new19/57 >/1
      context[45] = context[30];
      context[46] = context[31];
      context[47] = context[32];
      context[48] = context[33];
      context[49] = context[34];
      context[50] = context[35];
      context[51] = context[36];
      context[52] = context[37];
      context[53] = context[38];
      context[54] = context[39];
      context[55] = context[40];
      context[56] = context[41];
      context[57] = context[42];
      context[58] = context[43];
      if( ! refalrts::ident_term( identifiers[ident_Success], context[44] ) )
        continue;
      // closed e.new20 as range 45
      // closed e.new21 as range 47
      // closed e.new22 as range 49
      // closed e.new23 as range 51
      // closed e.new24 as range 53
      // closed e.new25 as range 55
      // closed e.new19 as range 57
      do {
        // </0 & DoOptExpr-MakeSubstitutions$1:1@1/4 (/7 e./59 )/8 s.DriveMode$a/9 (/12 e.UsedVars/61 )/13 (/16 e.Args0/63 )/17 (/20 e.Name0/65 )/21 (/24 e.Rest0/67 )/25 (/28 e.LS0/69 )/29 # Success/44 (/75 (/79 )/80 (/83 e.Assigns/81 )/84 )/76 >/1
        context[59] = context[45];
        context[60] = context[46];
        context[61] = context[47];
        context[62] = context[48];
        context[63] = context[49];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[52];
        context[67] = context[53];
        context[68] = context[54];
        context[69] = context[55];
        context[70] = context[56];
        context[71] = context[57];
        context[72] = context[58];
        context[73] = 0;
        context[74] = 0;
        context[75] = refalrts::brackets_left( context[73], context[74], context[71], context[72] );
        if( ! context[75] )
          continue;
        refalrts::bracket_pointers(context[75], context[76]);
        context[77] = 0;
        context[78] = 0;
        context[79] = refalrts::brackets_left( context[77], context[78], context[73], context[74] );
        if( ! context[79] )
          continue;
        refalrts::bracket_pointers(context[79], context[80]);
        context[81] = 0;
        context[82] = 0;
        context[83] = refalrts::brackets_left( context[81], context[82], context[73], context[74] );
        if( ! context[83] )
          continue;
        refalrts::bracket_pointers(context[83], context[84]);
        if( ! refalrts::empty_seq( context[77], context[78] ) )
          continue;
        if( ! refalrts::empty_seq( context[73], context[74] ) )
          continue;
        if( ! refalrts::empty_seq( context[71], context[72] ) )
          continue;
        // closed e. as range 59
        // closed e.UsedVars as range 61
        // closed e.Args0 as range 63
        // closed e.Name0 as range 65
        // closed e.Rest0 as range 67
        // closed e.LS0 as range 69
        // closed e.Assigns as range 81
        //DEBUG: s.DriveMode$a: 9
        //DEBUG: e.: 59
        //DEBUG: e.UsedVars: 61
        //DEBUG: e.Args0: 63
        //DEBUG: e.Name0: 65
        //DEBUG: e.Rest0: 67
        //DEBUG: e.LS0: 69
        //DEBUG: e.Assigns: 81

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & DoOptExpr-MakeSubstitutions$1:1@1/4 (/7 {REMOVED TILE} )/8 s.DriveMode$a/9 (/12 e.UsedVars/61 )/13 (/16 e.Args0/63 )/17 (/20 e.Name0/65 )/21 (/24 e.Rest0/67 )/25 (/28 e.LS0/69 )/29 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: </44 HalfReuse: & DoOptExpr-MakeSubstitutions$1:1$1=1@1/75 HalfReuse: </79 HalfReuse: & Map@6/80 AsIs: (/83 AsIs: e.Assigns/81 AsIs: )/84 } Tile{ AsIs: e./59 } Tile{ HalfReuse: >/76 AsIs: >/1 ]] }
        refalrts::reinit_open_call(context[44]);
        refalrts::reinit_name(context[75], functions[efunc_gen_DoOptExprm_MakeSubstitutions_S1B1S1A1Z1]);
        refalrts::reinit_open_call(context[79]);
        refalrts::reinit_name(context[80], functions[efunc_gen_Map_Z6]);
        refalrts::reinit_close_call(context[76]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[76] );
        refalrts::push_stack( vm, context[79] );
        refalrts::link_brackets( context[83], context[84] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[76];
        res = refalrts::splice_evar( res, context[59], context[60] );
        res = refalrts::splice_evar( res, context[44], context[84] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoOptExpr-MakeSubstitutions$1:1@1/4 (/7 e./59 )/8 s.DriveMode$a/9 (/12 e.UsedVars/61 )/13 (/16 e.Args0/63 )/17 (/20 e.Name0/65 )/21 (/24 e.Rest0/67 )/25 (/28 e.LS0/69 )/29 # Success/44 e.M/71 >/1
      context[59] = context[45];
      context[60] = context[46];
      context[61] = context[47];
      context[62] = context[48];
      context[63] = context[49];
      context[64] = context[50];
      context[65] = context[51];
      context[66] = context[52];
      context[67] = context[53];
      context[68] = context[54];
      context[69] = context[55];
      context[70] = context[56];
      context[71] = context[57];
      context[72] = context[58];
      // closed e. as range 59
      // closed e.UsedVars as range 61
      // closed e.Args0 as range 63
      // closed e.Name0 as range 65
      // closed e.Rest0 as range 67
      // closed e.LS0 as range 69
      // closed e.M as range 71
      //DEBUG: s.DriveMode$a: 9
      //DEBUG: e.: 59
      //DEBUG: e.UsedVars: 61
      //DEBUG: e.Args0: 63
      //DEBUG: e.Name0: 65
      //DEBUG: e.Rest0: 67
      //DEBUG: e.LS0: 69
      //DEBUG: e.M: 71
      //9: s.DriveMode$a
      //59: e.
      //61: e.UsedVars
      //63: e.Args0
      //65: e.Name0
      //67: e.Rest0
      //69: e.LS0
      //71: e.M
      //76: s.DriveMode$a

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[73]);
      refalrts::alloc_name(vm, context[75], functions[efunc_gen_DoOptExprm_MakeSubstitutions_S1B1Z1S2C1]);
      refalrts::copy_stvar(vm, context[76], context[9]);
      refalrts::alloc_close_call(vm, context[74]);
      refalrts::push_stack( vm, context[74] );
      refalrts::push_stack( vm, context[73] );
      res = refalrts::splice_elem( res, context[74] );
      res = refalrts::splice_stvar( res, context[76] );
      res = refalrts::splice_elem( res, context[75] );
      res = refalrts::splice_elem( res, context[73] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </73 & DoOptExpr-MakeSubstitutions$1:1@1$2?1/77 # Drive/78 >/74
        context[75] = 0;
        context[76] = 0;
        context[77] = refalrts::call_left( context[75], context[76], context[73], context[74] );
        context[78] = refalrts::ident_left( identifiers[ident_Drive], context[75], context[76] );
        if( ! context[78] )
          continue;
        if( ! refalrts::empty_seq( context[75], context[76] ) )
          continue;
        //DEBUG: s.DriveMode$a: 9
        //DEBUG: e.: 59
        //DEBUG: e.UsedVars: 61
        //DEBUG: e.Args0: 63
        //DEBUG: e.Name0: 65
        //DEBUG: e.Rest0: 67
        //DEBUG: e.LS0: 69
        //DEBUG: e.M: 71

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.LS0/69 {REMOVED TILE} # Success/44 {REMOVED TILE} </73 & DoOptExpr-MakeSubstitutions$1:1@1$2?1/77 # Drive/78 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoOptExpr-MakeSubstitutions$1:1$2=2@1/8 AsIs: s.DriveMode$a/9 AsIs: (/12 AsIs: e.UsedVars/61 AsIs: )/13 AsIs: (/16 AsIs: e.Args0/63 AsIs: )/17 AsIs: (/20 AsIs: e.Name0/65 AsIs: )/21 AsIs: (/24 AsIs: e.Rest0/67 AsIs: )/25 HalfReuse: </28 } Tile{ Reuse: & Map@7/4 AsIs: (/7 } Tile{ AsIs: e./59 } Tile{ AsIs: )/29 } Tile{ AsIs: e.M/71 } Tile{ AsIs: >/74 AsIs: >/1 ]] }
        refalrts::reinit_name(context[8], functions[efunc_gen_DoOptExprm_MakeSubstitutions_S1B1S2A2Z1]);
        refalrts::reinit_open_call(context[28]);
        refalrts::update_name(context[4], functions[efunc_gen_Map_Z7]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[74] );
        refalrts::push_stack( vm, context[28] );
        refalrts::link_brackets( context[7], context[29] );
        refalrts::link_brackets( context[24], context[25] );
        refalrts::link_brackets( context[20], context[21] );
        refalrts::link_brackets( context[16], context[17] );
        refalrts::link_brackets( context[12], context[13] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[74];
        res = refalrts::splice_evar( res, context[71], context[72] );
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_evar( res, context[59], context[60] );
        res = refalrts::splice_evar( res, context[4], context[7] );
        res = refalrts::splice_evar( res, context[8], context[28] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[73], context[74]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoOptExpr-MakeSubstitutions$1:1@1/4 (/7 e./45 )/8 s.DriveMode$a/9 (/12 e.UsedVars/47 )/13 (/16 e.Args0/49 )/17 (/20 e.Name0/51 )/21 (/24 e.Rest0/53 )/25 (/28 e.LS0/55 )/29 # Failure/44 >/1
    context[45] = context[30];
    context[46] = context[31];
    context[47] = context[32];
    context[48] = context[33];
    context[49] = context[34];
    context[50] = context[35];
    context[51] = context[36];
    context[52] = context[37];
    context[53] = context[38];
    context[54] = context[39];
    context[55] = context[40];
    context[56] = context[41];
    if( ! refalrts::ident_term( identifiers[ident_Failure], context[44] ) )
      continue;
    if( ! refalrts::empty_seq( context[42], context[43] ) )
      continue;
    // closed e. as range 45
    // closed e.UsedVars as range 47
    // closed e.Args0 as range 49
    // closed e.Name0 as range 51
    // closed e.Rest0 as range 53
    // closed e.LS0 as range 55
    //DEBUG: s.DriveMode$a: 9
    //DEBUG: e.: 45
    //DEBUG: e.UsedVars: 47
    //DEBUG: e.Args0: 49
    //DEBUG: e.Name0: 51
    //DEBUG: e.Rest0: 53
    //DEBUG: e.LS0: 55

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & DoOptExpr-MakeSubstitutions$1:1@1/4 (/7 e./45 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.LS0/55 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoOptExpr-MakeSubstitutions@1/8 AsIs: s.DriveMode$a/9 AsIs: (/12 AsIs: e.UsedVars/47 AsIs: )/13 } Tile{ AsIs: e.Args0/49 } Tile{ AsIs: (/16 } Tile{ HalfReuse: # Function/17 AsIs: (/20 } Tile{ HalfReuse: </29 HalfReuse: & RemainderFuncIncName/44 } Tile{ AsIs: e.Name0/51 } Tile{ AsIs: >/1 } Tile{ AsIs: )/21 HalfReuse: # Sentences/24 AsIs: e.Rest0/53 AsIs: )/25 HalfReuse: >/28 } Tile{ ]] }
    refalrts::reinit_name(context[8], functions[efunc_gen_DoOptExprm_MakeSubstitutions_Z1]);
    refalrts::reinit_ident(context[17], identifiers[ident_Function]);
    refalrts::reinit_open_call(context[29]);
    refalrts::reinit_name(context[44], functions[efunc_RemainderFuncIncName]);
    refalrts::reinit_ident(context[24], identifiers[ident_Sentences]);
    refalrts::reinit_close_call(context[28]);
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[16], context[25] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[29] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[21], context[28] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[29], context[44] );
    res = refalrts::splice_evar( res, context[17], context[20] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[8], context[13] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoOptExpr-MakeSubstitutions$1:1@1/4 (/7 e./30 )/8 s.DriveMode$a/9 (/12 e.UsedVars/32 )/13 (/16 e.Args0/34 )/17 (/20 e.Name0/36 )/21 (/24 e.Rest0/38 )/25 (/28 e.LS0/40 )/29 e.Other/42 >/1
    context[30] = context[5];
    context[31] = context[6];
    context[32] = context[10];
    context[33] = context[11];
    context[34] = context[14];
    context[35] = context[15];
    context[36] = context[18];
    context[37] = context[19];
    context[38] = context[22];
    context[39] = context[23];
    context[40] = context[26];
    context[41] = context[27];
    context[42] = context[2];
    context[43] = context[3];
    // closed e. as range 30
    // closed e.UsedVars as range 32
    // closed e.Args0 as range 34
    // closed e.Name0 as range 36
    // closed e.Rest0 as range 38
    // closed e.LS0 as range 40
    // closed e.Other as range 42
    //DEBUG: s.DriveMode$a: 9
    //DEBUG: e.: 30
    //DEBUG: e.UsedVars: 32
    //DEBUG: e.Args0: 34
    //DEBUG: e.Name0: 36
    //DEBUG: e.Rest0: 38
    //DEBUG: e.LS0: 40
    //DEBUG: e.Other: 42

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.DriveMode$a/9 (/12 e.UsedVars/32 )/13 (/16 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Other/42 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & MakeColdSolution@1/17 AsIs: (/20 AsIs: e.Name0/36 AsIs: )/21 AsIs: (/24 } Tile{ AsIs: e.LS0/40 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e./30 AsIs: )/8 } Tile{ AsIs: (/28 } Tile{ AsIs: e.Rest0/38 } Tile{ AsIs: )/29 } Tile{ AsIs: e.Args0/34 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_name(context[17], functions[efunc_gen_MakeColdSolution_Z1]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[24], context[4] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[34], context[35] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[4], context[8] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[17], context[24] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptExpr-MakeSubstitutions$1:1@1/4 (/7 e./5 )/8 s.DriveMode$a/9 (/12 e.UsedVars/10 )/13 (/16 e.Args0/14 )/17 (/20 e.Name0/18 )/21 (/24 e.Rest0/22 )/25 (/28 e.LS0/26 )/29 e.dyn/2 >/1
  // closed e. as range 5
  // closed e.UsedVars as range 10
  // closed e.Args0 as range 14
  // closed e.Name0 as range 18
  // closed e.Rest0 as range 22
  // closed e.LS0 as range 26
  // closed e.dyn as range 2
  //DEBUG: s.DriveMode$a: 9
  //DEBUG: e.: 5
  //DEBUG: e.UsedVars: 10
  //DEBUG: e.Args0: 14
  //DEBUG: e.Name0: 18
  //DEBUG: e.Rest0: 22
  //DEBUG: e.LS0: 26
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </30 & DoOptExpr-MakeSubstitutions$1:1@0/31 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e./5 AsIs: )/8 AsIs: s.DriveMode$a/9 AsIs: (/12 AsIs: e.UsedVars/10 AsIs: )/13 AsIs: (/16 AsIs: e.Args0/14 AsIs: )/17 AsIs: (/20 AsIs: e.Name0/18 AsIs: )/21 AsIs: (/24 AsIs: e.Rest0/22 AsIs: )/25 AsIs: (/28 AsIs: e.LS0/26 AsIs: )/29 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[30]);
  refalrts::alloc_name(vm, context[31], functions[efunc_gen_DoOptExprm_MakeSubstitutions_S1B1Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[30] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[30], context[31] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptExprm_MakeSubstitutions_S1B1Z1("DoOptExpr-MakeSubstitutions$1:1@1", COOKIE1_, COOKIE2_, func_gen_DoOptExprm_MakeSubstitutions_S1B1Z1);


static refalrts::FnResult func_gen_DoOptExprm_MakeSubstitutions_S1B1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 105 elems
  refalrts::Iter context[105];
  refalrts::zeros( context, 105 );
  // </0 & DoOptExpr-MakeSubstitutions$1:1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoOptExpr-MakeSubstitutions$1:1@2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 s.new4/17 (/20 e.new5/18 )/21 (/24 e.new6/22 )/25 (/28 e.new7/26 )/29 (/32 e.new8/30 )/33 (/36 e.new9/34 )/37 e.new10/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  if( ! refalrts::svar_left( context[17], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  context[34] = 0;
  context[35] = 0;
  context[36] = refalrts::brackets_left( context[34], context[35], context[2], context[3] );
  if( ! context[36] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[36], context[37]);
  // closed e.new5 as range 18
  // closed e.new6 as range 22
  // closed e.new7 as range 26
  // closed e.new8 as range 30
  // closed e.new9 as range 34
  // closed e.new10 as range 2
  do {
    // </0 & DoOptExpr-MakeSubstitutions$1:1@2/4 (/7 e.new14/38 )/8 (/11 e.new15/40 )/12 (/15 e.new16/42 )/16 s.new11/17 (/20 e.new17/44 )/21 (/24 e.new18/46 )/25 (/28 e.new19/48 )/29 (/32 e.new20/50 )/33 (/36 e.new21/52 )/37 s.new12/56 e.new13/54 >/1
    context[38] = context[5];
    context[39] = context[6];
    context[40] = context[9];
    context[41] = context[10];
    context[42] = context[13];
    context[43] = context[14];
    context[44] = context[18];
    context[45] = context[19];
    context[46] = context[22];
    context[47] = context[23];
    context[48] = context[26];
    context[49] = context[27];
    context[50] = context[30];
    context[51] = context[31];
    context[52] = context[34];
    context[53] = context[35];
    context[54] = context[2];
    context[55] = context[3];
    // closed e.new14 as range 38
    // closed e.new15 as range 40
    // closed e.new16 as range 42
    // closed e.new17 as range 44
    // closed e.new18 as range 46
    // closed e.new19 as range 48
    // closed e.new20 as range 50
    // closed e.new21 as range 52
    if( ! refalrts::svar_left( context[56], context[54], context[55] ) )
      continue;
    // closed e.new13 as range 54
    do {
      // </0 & DoOptExpr-MakeSubstitutions$1:1@2/4 (/7 e.new24/57 )/8 (/11 e.new25/59 )/12 (/15 e.new26/61 )/16 s.new22/17 (/20 e.new27/63 )/21 (/24 e.new28/65 )/25 (/28 e.new29/67 )/29 (/32 e.new30/69 )/33 (/36 e.new31/71 )/37 # Success/56 e.new23/73 >/1
      context[57] = context[38];
      context[58] = context[39];
      context[59] = context[40];
      context[60] = context[41];
      context[61] = context[42];
      context[62] = context[43];
      context[63] = context[44];
      context[64] = context[45];
      context[65] = context[46];
      context[66] = context[47];
      context[67] = context[48];
      context[68] = context[49];
      context[69] = context[50];
      context[70] = context[51];
      context[71] = context[52];
      context[72] = context[53];
      context[73] = context[54];
      context[74] = context[55];
      if( ! refalrts::ident_term( identifiers[ident_Success], context[56] ) )
        continue;
      // closed e.new24 as range 57
      // closed e.new25 as range 59
      // closed e.new26 as range 61
      // closed e.new27 as range 63
      // closed e.new28 as range 65
      // closed e.new29 as range 67
      // closed e.new30 as range 69
      // closed e.new31 as range 71
      // closed e.new23 as range 73
      do {
        // </0 & DoOptExpr-MakeSubstitutions$1:1@2/4 (/7 e.Substitutions0/75 )/8 (/11 e.NewSubsts/77 )/12 (/15 e./79 )/16 s.Mode0/17 (/20 e.SentenceVars0/81 )/21 (/24 e.Args0/83 )/25 (/28 e.Name0/85 )/29 (/32 e.Rest0/87 )/33 (/36 e.LS0/89 )/37 # Success/56 (/95 (/99 )/100 (/103 e.Assigns/101 )/104 )/96 >/1
        context[75] = context[57];
        context[76] = context[58];
        context[77] = context[59];
        context[78] = context[60];
        context[79] = context[61];
        context[80] = context[62];
        context[81] = context[63];
        context[82] = context[64];
        context[83] = context[65];
        context[84] = context[66];
        context[85] = context[67];
        context[86] = context[68];
        context[87] = context[69];
        context[88] = context[70];
        context[89] = context[71];
        context[90] = context[72];
        context[91] = context[73];
        context[92] = context[74];
        context[93] = 0;
        context[94] = 0;
        context[95] = refalrts::brackets_left( context[93], context[94], context[91], context[92] );
        if( ! context[95] )
          continue;
        refalrts::bracket_pointers(context[95], context[96]);
        context[97] = 0;
        context[98] = 0;
        context[99] = refalrts::brackets_left( context[97], context[98], context[93], context[94] );
        if( ! context[99] )
          continue;
        refalrts::bracket_pointers(context[99], context[100]);
        context[101] = 0;
        context[102] = 0;
        context[103] = refalrts::brackets_left( context[101], context[102], context[93], context[94] );
        if( ! context[103] )
          continue;
        refalrts::bracket_pointers(context[103], context[104]);
        if( ! refalrts::empty_seq( context[97], context[98] ) )
          continue;
        if( ! refalrts::empty_seq( context[93], context[94] ) )
          continue;
        if( ! refalrts::empty_seq( context[91], context[92] ) )
          continue;
        // closed e.Substitutions0 as range 75
        // closed e.NewSubsts as range 77
        // closed e. as range 79
        // closed e.SentenceVars0 as range 81
        // closed e.Args0 as range 83
        // closed e.Name0 as range 85
        // closed e.Rest0 as range 87
        // closed e.LS0 as range 89
        // closed e.Assigns as range 101
        //DEBUG: s.Mode0: 17
        //DEBUG: e.Substitutions0: 75
        //DEBUG: e.NewSubsts: 77
        //DEBUG: e.: 79
        //DEBUG: e.SentenceVars0: 81
        //DEBUG: e.Args0: 83
        //DEBUG: e.Name0: 85
        //DEBUG: e.Rest0: 87
        //DEBUG: e.LS0: 89
        //DEBUG: e.Assigns: 101

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} )/16 s.Mode0/17 (/20 e.SentenceVars0/81 )/21 (/24 e.Args0/83 )/25 (/28 e.Name0/85 )/29 (/32 e.Rest0/87 )/33 (/36 e.LS0/89 )/37 # Success/56 (/95 (/99 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptExpr-MakeSubstitutions$1:1$1=1@2/4 AsIs: (/7 AsIs: e.Substitutions0/75 AsIs: )/8 AsIs: (/11 AsIs: e.NewSubsts/77 AsIs: )/12 HalfReuse: </15 } Tile{ HalfReuse: & Map@6/100 AsIs: (/103 AsIs: e.Assigns/101 AsIs: )/104 } Tile{ AsIs: e./79 } Tile{ HalfReuse: >/96 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_gen_DoOptExprm_MakeSubstitutions_S1B1S1A1Z2]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[100], functions[efunc_gen_Map_Z6]);
        refalrts::reinit_close_call(context[96]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[96] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[103], context[104] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[96];
        res = refalrts::splice_evar( res, context[79], context[80] );
        res = refalrts::splice_evar( res, context[100], context[104] );
        refalrts::splice_to_freelist_open( vm, context[15], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoOptExpr-MakeSubstitutions$1:1@2/4 (/7 e.Substitutions0/75 )/8 (/11 e.NewSubsts/77 )/12 (/15 e./79 )/16 s.Mode0/17 (/20 e.SentenceVars0/81 )/21 (/24 e.Args0/83 )/25 (/28 e.Name0/85 )/29 (/32 e.Rest0/87 )/33 (/36 e.LS0/89 )/37 # Success/56 e.M/91 >/1
      context[75] = context[57];
      context[76] = context[58];
      context[77] = context[59];
      context[78] = context[60];
      context[79] = context[61];
      context[80] = context[62];
      context[81] = context[63];
      context[82] = context[64];
      context[83] = context[65];
      context[84] = context[66];
      context[85] = context[67];
      context[86] = context[68];
      context[87] = context[69];
      context[88] = context[70];
      context[89] = context[71];
      context[90] = context[72];
      context[91] = context[73];
      context[92] = context[74];
      // closed e.Substitutions0 as range 75
      // closed e.NewSubsts as range 77
      // closed e. as range 79
      // closed e.SentenceVars0 as range 81
      // closed e.Args0 as range 83
      // closed e.Name0 as range 85
      // closed e.Rest0 as range 87
      // closed e.LS0 as range 89
      // closed e.M as range 91
      //DEBUG: s.Mode0: 17
      //DEBUG: e.Substitutions0: 75
      //DEBUG: e.NewSubsts: 77
      //DEBUG: e.: 79
      //DEBUG: e.SentenceVars0: 81
      //DEBUG: e.Args0: 83
      //DEBUG: e.Name0: 85
      //DEBUG: e.Rest0: 87
      //DEBUG: e.LS0: 89
      //DEBUG: e.M: 91
      //17: s.Mode0
      //75: e.Substitutions0
      //77: e.NewSubsts
      //79: e.
      //81: e.SentenceVars0
      //83: e.Args0
      //85: e.Name0
      //87: e.Rest0
      //89: e.LS0
      //91: e.M
      //96: s.Mode0

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[93]);
      refalrts::alloc_name(vm, context[95], functions[efunc_gen_DoOptExprm_MakeSubstitutions_S1B1Z2S2C1]);
      refalrts::copy_stvar(vm, context[96], context[17]);
      refalrts::alloc_close_call(vm, context[94]);
      refalrts::push_stack( vm, context[94] );
      refalrts::push_stack( vm, context[93] );
      res = refalrts::splice_elem( res, context[94] );
      res = refalrts::splice_stvar( res, context[96] );
      res = refalrts::splice_elem( res, context[95] );
      res = refalrts::splice_elem( res, context[93] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </93 & DoOptExpr-MakeSubstitutions$1:1@2$2?1/97 # Drive/98 >/94
        context[95] = 0;
        context[96] = 0;
        context[97] = refalrts::call_left( context[95], context[96], context[93], context[94] );
        context[98] = refalrts::ident_left( identifiers[ident_Drive], context[95], context[96] );
        if( ! context[98] )
          continue;
        if( ! refalrts::empty_seq( context[95], context[96] ) )
          continue;
        //DEBUG: s.Mode0: 17
        //DEBUG: e.Substitutions0: 75
        //DEBUG: e.NewSubsts: 77
        //DEBUG: e.: 79
        //DEBUG: e.SentenceVars0: 81
        //DEBUG: e.Args0: 83
        //DEBUG: e.Name0: 85
        //DEBUG: e.Rest0: 87
        //DEBUG: e.LS0: 89
        //DEBUG: e.M: 91

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/8 (/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.LS0/89 {REMOVED TILE} # Success/56 {REMOVED TILE} </93 & DoOptExpr-MakeSubstitutions$1:1@2$2?1/97 # Drive/98 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoOptExpr-MakeSubstitutions$1:1$2=2/16 AsIs: s.Mode0/17 AsIs: (/20 AsIs: e.SentenceVars0/81 AsIs: )/21 AsIs: (/24 AsIs: e.Args0/83 AsIs: )/25 AsIs: (/28 } Tile{ AsIs: e.Substitutions0/75 } Tile{ AsIs: e.NewSubsts/77 } Tile{ AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Name0/85 } Tile{ AsIs: )/29 AsIs: (/32 AsIs: e.Rest0/87 AsIs: )/33 HalfReuse: </36 } Tile{ Reuse: & Map@7/4 AsIs: (/7 } Tile{ AsIs: e./79 } Tile{ AsIs: )/37 } Tile{ AsIs: e.M/91 } Tile{ AsIs: >/94 AsIs: >/1 ]] }
        refalrts::reinit_name(context[16], functions[efunc_gen_DoOptExprm_MakeSubstitutions_S1B1S2A2]);
        refalrts::reinit_open_call(context[36]);
        refalrts::update_name(context[4], functions[efunc_gen_Map_Z7]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[94] );
        refalrts::push_stack( vm, context[36] );
        refalrts::link_brackets( context[7], context[37] );
        refalrts::link_brackets( context[32], context[33] );
        refalrts::link_brackets( context[15], context[29] );
        refalrts::link_brackets( context[28], context[12] );
        refalrts::link_brackets( context[24], context[25] );
        refalrts::link_brackets( context[20], context[21] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[94];
        res = refalrts::splice_evar( res, context[91], context[92] );
        res = refalrts::splice_elem( res, context[37] );
        res = refalrts::splice_evar( res, context[79], context[80] );
        res = refalrts::splice_evar( res, context[4], context[7] );
        res = refalrts::splice_evar( res, context[29], context[36] );
        res = refalrts::splice_evar( res, context[85], context[86] );
        res = refalrts::splice_evar( res, context[12], context[15] );
        res = refalrts::splice_evar( res, context[77], context[78] );
        res = refalrts::splice_evar( res, context[75], context[76] );
        res = refalrts::splice_evar( res, context[16], context[28] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[93], context[94]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoOptExpr-MakeSubstitutions$1:1@2/4 (/7 e.Substitutions0/57 )/8 (/11 e.NewSubsts/59 )/12 (/15 e./61 )/16 s.Mode0/17 (/20 e.SentenceVars0/63 )/21 (/24 e.Args0/65 )/25 (/28 e.Name0/67 )/29 (/32 e.Rest0/69 )/33 (/36 e.LS0/71 )/37 # Failure/56 >/1
    context[57] = context[38];
    context[58] = context[39];
    context[59] = context[40];
    context[60] = context[41];
    context[61] = context[42];
    context[62] = context[43];
    context[63] = context[44];
    context[64] = context[45];
    context[65] = context[46];
    context[66] = context[47];
    context[67] = context[48];
    context[68] = context[49];
    context[69] = context[50];
    context[70] = context[51];
    context[71] = context[52];
    context[72] = context[53];
    if( ! refalrts::ident_term( identifiers[ident_Failure], context[56] ) )
      continue;
    if( ! refalrts::empty_seq( context[54], context[55] ) )
      continue;
    // closed e.Substitutions0 as range 57
    // closed e.NewSubsts as range 59
    // closed e. as range 61
    // closed e.SentenceVars0 as range 63
    // closed e.Args0 as range 65
    // closed e.Name0 as range 67
    // closed e.Rest0 as range 69
    // closed e.LS0 as range 71
    //DEBUG: s.Mode0: 17
    //DEBUG: e.Substitutions0: 57
    //DEBUG: e.NewSubsts: 59
    //DEBUG: e.: 61
    //DEBUG: e.SentenceVars0: 63
    //DEBUG: e.Args0: 65
    //DEBUG: e.Name0: 67
    //DEBUG: e.Rest0: 69
    //DEBUG: e.LS0: 71

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & DoOptExpr-MakeSubstitutions$1:1@2/4 (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e./61 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.LS0/71 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoOptExpr-MakeSubstitutions@2/16 AsIs: s.Mode0/17 AsIs: (/20 AsIs: e.SentenceVars0/63 AsIs: )/21 AsIs: (/24 AsIs: e.Args0/65 AsIs: )/25 AsIs: (/28 } Tile{ AsIs: e.Substitutions0/57 } Tile{ HalfReuse: )/11 AsIs: e.NewSubsts/59 HalfReuse: (/12 HalfReuse: # Function/15 } Tile{ HalfReuse: (/37 HalfReuse: </56 HalfReuse: & RemainderFuncIncName/1 } Tile{ AsIs: e.Name0/67 } Tile{ HalfReuse: >/8 } Tile{ AsIs: )/29 HalfReuse: # Sentences/32 AsIs: e.Rest0/69 AsIs: )/33 HalfReuse: >/36 } Tile{ ]] }
    refalrts::reinit_name(context[16], functions[efunc_gen_DoOptExprm_MakeSubstitutions_Z2]);
    refalrts::reinit_close_bracket(context[11]);
    refalrts::reinit_open_bracket(context[12]);
    refalrts::reinit_ident(context[15], identifiers[ident_Function]);
    refalrts::reinit_open_bracket(context[37]);
    refalrts::reinit_open_call(context[56]);
    refalrts::reinit_name(context[1], functions[efunc_RemainderFuncIncName]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_ident(context[32], identifiers[ident_Sentences]);
    refalrts::reinit_close_call(context[36]);
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[33] );
    refalrts::link_brackets( context[37], context[29] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[56] );
    refalrts::link_brackets( context[28], context[11] );
    refalrts::link_brackets( context[24], context[25] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[29], context[36] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[67], context[68] );
    res = refalrts::splice_evar( res, context[37], context[1] );
    res = refalrts::splice_evar( res, context[11], context[15] );
    res = refalrts::splice_evar( res, context[57], context[58] );
    res = refalrts::splice_evar( res, context[16], context[28] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoOptExpr-MakeSubstitutions$1:1@2/4 (/7 e.Substitutions0/38 )/8 (/11 e.NewSubsts/40 )/12 (/15 e./42 )/16 s.Mode0/17 (/20 e.SentenceVars0/44 )/21 (/24 e.Args0/46 )/25 (/28 e.Name0/48 )/29 (/32 e.Rest0/50 )/33 (/36 e.LS0/52 )/37 e.Other/54 >/1
    context[38] = context[5];
    context[39] = context[6];
    context[40] = context[9];
    context[41] = context[10];
    context[42] = context[13];
    context[43] = context[14];
    context[44] = context[18];
    context[45] = context[19];
    context[46] = context[22];
    context[47] = context[23];
    context[48] = context[26];
    context[49] = context[27];
    context[50] = context[30];
    context[51] = context[31];
    context[52] = context[34];
    context[53] = context[35];
    context[54] = context[2];
    context[55] = context[3];
    // closed e.Substitutions0 as range 38
    // closed e.NewSubsts as range 40
    // closed e. as range 42
    // closed e.SentenceVars0 as range 44
    // closed e.Args0 as range 46
    // closed e.Name0 as range 48
    // closed e.Rest0 as range 50
    // closed e.LS0 as range 52
    // closed e.Other as range 54
    //DEBUG: s.Mode0: 17
    //DEBUG: e.Substitutions0: 38
    //DEBUG: e.NewSubsts: 40
    //DEBUG: e.: 42
    //DEBUG: e.SentenceVars0: 44
    //DEBUG: e.Args0: 46
    //DEBUG: e.Name0: 48
    //DEBUG: e.Rest0: 50
    //DEBUG: e.LS0: 52
    //DEBUG: e.Other: 54

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} & DoOptExpr-MakeSubstitutions$1:1@2/4 (/7 {REMOVED TILE} )/8 (/11 {REMOVED TILE} {REMOVED TILE} s.Mode0/17 (/20 e.SentenceVars0/44 )/21 (/24 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/33 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Other/54 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Substitutions0/38 } Tile{ AsIs: e.NewSubsts/40 } Tile{ AsIs: </0 } Tile{ HalfReuse: & MakeColdSolution@1/25 AsIs: (/28 AsIs: e.Name0/48 AsIs: )/29 AsIs: (/32 } Tile{ AsIs: e.LS0/52 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e./42 AsIs: )/16 } Tile{ AsIs: (/36 } Tile{ AsIs: e.Rest0/50 } Tile{ AsIs: )/37 } Tile{ AsIs: e.Args0/46 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_name(context[25], functions[efunc_gen_MakeColdSolution_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[36], context[37] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[32], context[12] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[46], context[47] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_evar( res, context[12], context[16] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_evar( res, context[25], context[32] );
    res = refalrts::splice_elem( res, context[0] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptExpr-MakeSubstitutions$1:1@2/4 (/7 e.Substitutions0/5 )/8 (/11 e.NewSubsts/9 )/12 (/15 e./13 )/16 s.Mode0/17 (/20 e.SentenceVars0/18 )/21 (/24 e.Args0/22 )/25 (/28 e.Name0/26 )/29 (/32 e.Rest0/30 )/33 (/36 e.LS0/34 )/37 e.dyn/2 >/1
  // closed e.Substitutions0 as range 5
  // closed e.NewSubsts as range 9
  // closed e. as range 13
  // closed e.SentenceVars0 as range 18
  // closed e.Args0 as range 22
  // closed e.Name0 as range 26
  // closed e.Rest0 as range 30
  // closed e.LS0 as range 34
  // closed e.dyn as range 2
  //DEBUG: s.Mode0: 17
  //DEBUG: e.Substitutions0: 5
  //DEBUG: e.NewSubsts: 9
  //DEBUG: e.: 13
  //DEBUG: e.SentenceVars0: 18
  //DEBUG: e.Args0: 22
  //DEBUG: e.Name0: 26
  //DEBUG: e.Rest0: 30
  //DEBUG: e.LS0: 34
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 (/11 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptExpr-MakeSubstitutions$1:1@0/4 AsIs: (/7 } Tile{ AsIs: e.Substitutions0/5 } Tile{ AsIs: e.NewSubsts/9 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e./13 AsIs: )/16 AsIs: s.Mode0/17 AsIs: (/20 AsIs: e.SentenceVars0/18 AsIs: )/21 AsIs: (/24 AsIs: e.Args0/22 AsIs: )/25 AsIs: (/28 AsIs: e.Name0/26 AsIs: )/29 AsIs: (/32 AsIs: e.Rest0/30 AsIs: )/33 AsIs: (/36 AsIs: e.LS0/34 AsIs: )/37 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoOptExprm_MakeSubstitutions_S1B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[36], context[37] );
  refalrts::link_brackets( context[32], context[33] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptExprm_MakeSubstitutions_S1B1Z2("DoOptExpr-MakeSubstitutions$1:1@2", COOKIE1_, COOKIE2_, func_gen_DoOptExprm_MakeSubstitutions_S1B1Z2);


static refalrts::FnResult func_gen_DoOptExprm_MakeSubstitutions_S1B1S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & DoOptExpr-MakeSubstitutions$1:1$1=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & DoOptExpr-MakeSubstitutions$1:1$1=1@1/4 e.CallReplacer/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.CallReplacer as range 5
    //DEBUG: e.CallReplacer: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/7 (/8 (/9 # Var/10 'e'/11 # DRIVEN/12 Tile{ HalfReuse: )/0 HalfReuse: ':'/4 AsIs: e.CallReplacer/5 HalfReuse: )/1 } (/13 )/14 )/15 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[7]);
    refalrts::alloc_open_bracket(vm, context[8]);
    refalrts::alloc_open_bracket(vm, context[9]);
    refalrts::alloc_ident(vm, context[10], identifiers[ident_Var]);
    refalrts::alloc_char(vm, context[11], 'e');
    refalrts::alloc_ident(vm, context[12], identifiers[ident_DRIVEN]);
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_close_bracket(vm, context[15]);
    refalrts::reinit_close_bracket(context[0]);
    refalrts::reinit_char(context[4], ':');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[15] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[8], context[1] );
    refalrts::link_brackets( context[9], context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[13], context[15] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[7], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptExpr-MakeSubstitutions$1:1$1=1@1/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DoOptExpr-MakeSubstitutions$1:1$1=1@0/6 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoOptExprm_MakeSubstitutions_S1B1S1A1Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptExprm_MakeSubstitutions_S1B1S1A1Z1("DoOptExpr-MakeSubstitutions$1:1$1=1@1", COOKIE1_, COOKIE2_, func_gen_DoOptExprm_MakeSubstitutions_S1B1S1A1Z1);


static refalrts::FnResult func_gen_DoOptExprm_MakeSubstitutions_S1B1S2A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & DoOptExpr-MakeSubstitutions$1:1$2=2@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoOptExpr-MakeSubstitutions$1:1$2=2@1/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 (/16 e.new4/14 )/17 (/20 e.new5/18 )/21 e.new6/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 14
  // closed e.new5 as range 18
  // closed e.new6 as range 2
  do {
    // </0 & DoOptExpr-MakeSubstitutions$1:1$2=2@1/4 s.DriveMode$a/5 (/8 e.UsedVars/22 )/9 (/12 e.Args0/24 )/13 (/16 e.Name0/26 )/17 (/20 e.Rest0/28 )/21 e.NewSubsts/30 >/1
    context[22] = context[6];
    context[23] = context[7];
    context[24] = context[10];
    context[25] = context[11];
    context[26] = context[14];
    context[27] = context[15];
    context[28] = context[18];
    context[29] = context[19];
    context[30] = context[2];
    context[31] = context[3];
    // closed e.UsedVars as range 22
    // closed e.Args0 as range 24
    // closed e.Name0 as range 26
    // closed e.Rest0 as range 28
    // closed e.NewSubsts as range 30
    //DEBUG: s.DriveMode$a: 5
    //DEBUG: e.UsedVars: 22
    //DEBUG: e.Args0: 24
    //DEBUG: e.Name0: 26
    //DEBUG: e.Rest0: 28
    //DEBUG: e.NewSubsts: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptExpr-MakeSubstitutions/4 AsIs: s.DriveMode$a/5 AsIs: (/8 AsIs: e.UsedVars/22 AsIs: )/9 AsIs: (/12 AsIs: e.Args0/24 AsIs: )/13 AsIs: (/16 } Tile{ AsIs: e.NewSubsts/30 } )/32 (/33 # Function/34 (/35 </36 & RemainderFuncIncName/37 Tile{ AsIs: e.Name0/26 } >/38 Tile{ AsIs: )/17 HalfReuse: # Sentences/20 AsIs: e.Rest0/28 AsIs: )/21 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::alloc_ident(vm, context[34], identifiers[ident_Function]);
    refalrts::alloc_open_bracket(vm, context[35]);
    refalrts::alloc_open_call(vm, context[36]);
    refalrts::alloc_name(vm, context[37], functions[efunc_RemainderFuncIncName]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::update_name(context[4], functions[efunc_DoOptExprm_MakeSubstitutions]);
    refalrts::reinit_ident(context[20], identifiers[ident_Sentences]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[33], context[21] );
    refalrts::link_brackets( context[35], context[17] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[36] );
    refalrts::link_brackets( context[16], context[32] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[8], context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[21] );
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[32], context[37] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptExpr-MakeSubstitutions$1:1$2=2@1/4 s.DriveMode$a/5 (/8 e.UsedVars/6 )/9 (/12 e.Args0/10 )/13 (/16 e.Name0/14 )/17 (/20 e.Rest0/18 )/21 e.dyn/2 >/1
  // closed e.UsedVars as range 6
  // closed e.Args0 as range 10
  // closed e.Name0 as range 14
  // closed e.Rest0 as range 18
  // closed e.dyn as range 2
  //DEBUG: s.DriveMode$a: 5
  //DEBUG: e.UsedVars: 6
  //DEBUG: e.Args0: 10
  //DEBUG: e.Name0: 14
  //DEBUG: e.Rest0: 18
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptExpr-MakeSubstitutions$1:1$2=2@0/4 AsIs: s.DriveMode$a/5 AsIs: (/8 AsIs: e.UsedVars/6 AsIs: )/9 AsIs: (/12 AsIs: e.Args0/10 AsIs: )/13 AsIs: (/16 } )/22 (/23 Tile{ AsIs: e.Name0/14 } Tile{ AsIs: )/17 AsIs: (/20 AsIs: e.Rest0/18 AsIs: )/21 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::update_name(context[4], functions[efunc_gen_DoOptExprm_MakeSubstitutions_S1B1S2A2Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[23], context[17] );
  refalrts::link_brackets( context[16], context[22] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptExprm_MakeSubstitutions_S1B1S2A2Z1("DoOptExpr-MakeSubstitutions$1:1$2=2@1", COOKIE1_, COOKIE2_, func_gen_DoOptExprm_MakeSubstitutions_S1B1S2A2Z1);


static refalrts::FnResult func_gen_DoOptExprm_MakeSubstitutions_S1B1S1A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & DoOptExpr-MakeSubstitutions$1:1$1=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoOptExpr-MakeSubstitutions$1:1$1=1@2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoOptExpr-MakeSubstitutions$1:1$1=1@2/4 (/7 e.Substitutions0/13 )/8 (/11 e.NewSubsts/15 )/12 e.CallReplacer/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Substitutions0 as range 13
    // closed e.NewSubsts as range 15
    // closed e.CallReplacer as range 17
    //DEBUG: e.Substitutions0: 13
    //DEBUG: e.NewSubsts: 15
    //DEBUG: e.CallReplacer: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Substitutions0/13 } Tile{ AsIs: e.NewSubsts/15 } Tile{ HalfReuse: (/0 HalfReuse: (/4 AsIs: (/7 } # Var/19 'e'/20 # DRIVEN/21 Tile{ AsIs: )/12 } ':'/22 Tile{ AsIs: e.CallReplacer/17 } Tile{ AsIs: )/8 AsIs: (/11 } )/23 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Var]);
    refalrts::alloc_char(vm, context[20], 'e');
    refalrts::alloc_ident(vm, context[21], identifiers[ident_DRIVEN]);
    refalrts::alloc_char(vm, context[22], ':');
    refalrts::alloc_close_bracket(vm, context[23]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::link_brackets( context[11], context[23] );
    refalrts::link_brackets( context[4], context[8] );
    refalrts::link_brackets( context[7], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[19], context[21] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoOptExpr-MakeSubstitutions$1:1$1=1@2/4 (/7 e.Substitutions0/5 )/8 (/11 e.NewSubsts/9 )/12 e.dyn/2 >/1
  // closed e.Substitutions0 as range 5
  // closed e.NewSubsts as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Substitutions0: 5
  //DEBUG: e.NewSubsts: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 (/11 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoOptExpr-MakeSubstitutions$1:1$1=1@0/4 AsIs: (/7 } Tile{ AsIs: e.Substitutions0/5 } Tile{ AsIs: e.NewSubsts/9 } Tile{ AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoOptExprm_MakeSubstitutions_S1B1S1A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoOptExprm_MakeSubstitutions_S1B1S1A1Z2("DoOptExpr-MakeSubstitutions$1:1$1=1@2", COOKIE1_, COOKIE2_, func_gen_DoOptExprm_MakeSubstitutions_S1B1S1A1Z2);


//End of file
