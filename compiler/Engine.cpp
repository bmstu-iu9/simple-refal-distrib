// This file automatically generated from 'Engine.ref'
// Don't edit! Edit 'Engine.ref' and recompile it

#include "refalrts.h"

#define cookie_ns cookie_ns_902267812_43039733
#define COOKIE1_ 902267812U
#define COOKIE2_ 43039733U

enum efunc {
  efunc_u_u_Stepm_Drop = 0,
  efunc_u_u_Metau_Mu = 1,
  efunc_d_table = 2,
  efunc_Map = 3,
  efunc_gen_Apply_Z3 = 4,
  efunc_gen_Apply_Z0 = 5,
  efunc_Reduce = 6,
  efunc_gen_Reduce_S1A1 = 7,
  efunc_gen_Apply_Z2 = 8,
  efunc_Apply = 9,
  efunc_DoMapAccum = 10,
  efunc_gen_DoMapAccum_S1A1 = 11,
  efunc_Add = 12,
  efunc_Sub = 13,
  efunc_Fetch = 14,
  efunc_Pipe = 15,
  efunc_gen_Pipe_S2L1 = 16,
  efunc_gen_Pipe_S3L1 = 17,
  efunc_gen_BackEnd_A1 = 18,
  efunc_Configm_GetDebugMode = 19,
  efunc_gen_CompileFile_B1 = 20,
  efunc_FrontEnd = 21,
  efunc_gen_FrontEnd_B1S1B1 = 22,
  efunc_gen_FrontEnd_B1S1A1 = 23,
  efunc_CreateMetaFunctions = 24,
  efunc_ELm_Destroy = 25,
  efunc_gen_FrontEnd_B1 = 26,
  efunc_gen_FrontEnd_A6 = 27,
  efunc_CheckProgram = 28,
  efunc_MapAccum = 29,
  efunc_gen_GlueErrorListsAndASTs_L1 = 30,
  efunc_ELm_Create = 31,
  efunc_gen_FrontEnd_A5 = 32,
  efunc_ResolveIncludes = 33,
  efunc_gen_FrontEnd_A4 = 34,
  efunc_gen_LoadAST_S1A1 = 35,
  efunc_Configm_GetR5Mode = 36,
  efunc_gen_FrontEnd_A3 = 37,
  efunc_gen_LoadAST_S2A1 = 38,
  efunc_SRm_Scan = 39,
  efunc_gen_LoadAST_S3B1Z2 = 40,
  efunc_System = 41,
  efunc_ExistFile = 42,
  efunc_gen_LoadAST_S3A1D1 = 43,
  efunc_gen_LoadAST_D4 = 44,
  efunc_gen_FrontEnd_A2 = 45,
  efunc_Configm_GetWarningIdsAsErrors = 46,
  efunc_Configm_GetWarningIds = 47,
  efunc_gen_FrontEnd_A1 = 48,
  efunc_gen_PreludeIncludeLine_B1 = 49,
  efunc_Configm_GetPrelude = 50,
  efunc_gen_DoMapAccum_Z1 = 51,
  efunc_R5m_Parse = 52,
  efunc_gen_LoadAST_S1A4 = 53,
  efunc_FilterLexerMessages = 54,
  efunc_gen_LoadAST_S1A3 = 55,
  efunc_gen_LoadAST_S1A2 = 56,
  efunc_R5m_Scan = 57,
  efunc_SRm_ParseProgram = 58,
  efunc_gen_LoadAST_S2A2 = 59,
  efunc_ELm_AddErrorAt = 60,
  efunc_ResolveIncludesm_CheckAlias = 61,
  efunc_gen_Map_Z1 = 62,
  efunc_gen_Map_Z2 = 63,
  efunc_FindInclude = 64,
  efunc_Configm_GetSearchFolders = 65,
  efunc_ResolveIncludesm_CheckValid = 66,
  efunc_ResolveIncludesm_CheckEqualAST = 67,
  efunc_gen_Map_Z3 = 68,
  efunc_ELm_Concat = 69,
  efunc_gen_Map_Z4 = 70,
  efunc_PatchASTm_Body = 71,
  efunc_gen_PatchASTm_Item_S5C1 = 72,
  efunc_OneOf = 73,
  efunc_gen_Map_Z5 = 74,
  efunc_gen_PatchASTm_Body_S3L1A2 = 75,
  efunc_gen_Map_Z6 = 76,
  efunc_gen_Map_Z7 = 77,
  efunc_gen_Map_Z10 = 78,
  efunc_gen_Map_Z9 = 79,
  efunc_gen_Map_Z8 = 80,
  efunc_gen_BackEndm_RASLModule_B1Z1 = 81,
  efunc_GenProgramm_RASL = 82,
  efunc_SaveFile = 83,
  efunc_GenProgramm_Native = 84,
  efunc_LowLevelRASL = 85,
  efunc_gen_BackEnd_B1 = 86,
  efunc_Logm_HighLevelRASL = 87,
  efunc_gen_BackEnd_A12 = 88,
  efunc_HighLevelRASL = 89,
  efunc_gen_BackEnd_A11 = 90,
  efunc_Logm_AST = 91,
  efunc_gen_BackEnd_A10 = 92,
  efunc_OptTree = 93,
  efunc_gen_BackEnd_A9 = 94,
  efunc_OptTreem_CleanupMarkup = 95,
  efunc_gen_BackEnd_A9B1D2 = 96,
  efunc_gen_BackEnd_A8 = 97,
  efunc_gen_BackEnd_A7 = 98,
  efunc_Desugar = 99,
  efunc_Configm_GetOptTree = 100,
  efunc_gen_BackEnd_A6 = 101,
  efunc_Configm_GetGenMode = 102,
  efunc_gen_BackEnd_A5 = 103,
  efunc_Configm_GetConditionsMode = 104,
  efunc_gen_BackEnd_A4 = 105,
  efunc_Configm_GetOptResult = 106,
  efunc_gen_BackEnd_A3 = 107,
  efunc_Configm_GetOptPattern = 108,
  efunc_gen_BackEnd_A2 = 109,
  efunc_SaveBytes = 110,
  efunc_gen_BackEndm_RASLModule_B1 = 111,
  efunc_gen_Map_Z11 = 112,
  efunc_gen_CreateMetaFunctions_S1A2D1 = 113,
  efunc_gen_CreateMetaFunctions_S1A1 = 114,
  efunc_gen_DoMapAccum_Z2 = 115,
  efunc_gen_GrammarCheck_B1 = 116,
  efunc_gen_GrammarCheck_A1 = 117,
  efunc_gen_GlobalASTStoragem_AddAST_A4L1S2C1 = 118,
  efunc_gen_Map_Z12 = 119,
  efunc_gen_AddInitFinalFunc_B1Z1 = 120,
  efunc_gen_AddInitFinalFunc_B1Z2 = 121,
  efunc_CleanupLocals = 122,
  efunc_gen_GlobalASTStoragem_AddAST_A2 = 123,
  efunc_gen_DoMapAccum_Z3 = 124,
  efunc_gen_GlobalASTStoragem_AddAST_A1 = 125,
  efunc_gen_CleanupLocals_S1C1 = 126,
  efunc_gen_AddInitFinalFunc_B1 = 127,
  efunc_gen_ExtendMetatables_A1 = 128,
  efunc_gen_Map_Z13 = 129,
  efunc_gen_MakeInitFinalFunc_S2A2Z1 = 130,
  efunc_gen_Map_Z14 = 131,
  efunc_gen_MakeInitFinalFunc_S2A1D1 = 132,
  efunc_gen_MakeInitFinalFunc_S2A2Z2 = 133,
  efunc_gen_GlobalASTStoragem_Check_B1 = 134,
  efunc_ELm_CheckEntryDuplicates = 135,
  efunc_gen_Map_Z15 = 136,
  efunc_gen_MakeInitFinalFunc_S2A2 = 137,
  efunc_Mu = 138,
  efunc_Up = 139,
  efunc_Evm_met = 140,
  efunc_Residue = 141,
  efunc_u_u_Metau_Residue = 142,
  efunc_UnBracket = 143,
  efunc_DelAccumulator = 144,
  efunc_Inc = 145,
  efunc_Dec = 146,
  efunc_CompileFile = 147,
  efunc_PreludeIncludeLine = 148,
  efunc_LoadAST = 149,
  efunc_GlueErrorListsAndASTs = 150,
  efunc_PatchASTSrcPos = 151,
  efunc_PatchAST = 152,
  efunc_PatchASTm_Item = 153,
  efunc_PatchASTm_Sentence = 154,
  efunc_PatchASTm_Chain = 155,
  efunc_PatchASTm_Blocks = 156,
  efunc_PatchASTm_Expr = 157,
  efunc_BackEnd = 158,
  efunc_BackEndm_RASLModule = 159,
  efunc_BackEndm_NativeModule = 160,
  efunc_GrammarCheck = 161,
  efunc_GlobalASTStoragem_Create = 162,
  efunc_GlobalASTStoragem_AddAST = 163,
  efunc_UpdateAccum = 164,
  efunc_AddInitFinalFunc = 165,
  efunc_GlobalASTStoragem_Check = 166,
  efunc_ExtendMetatables = 167,
  efunc_CleanupDuplicates = 168,
  efunc_MakeInitFinalFunc = 169,
  efunc_gen_Apply_Z4 = 170,
  efunc_ELm_AddWarningAt = 171,
  efunc_gen_DoMapAccum_S1A1Z1 = 172,
  efunc_gen_DoMapAccum_Z0 = 173,
  efunc_gen_FilterLexerMessages_L1Z0 = 174,
  efunc_gen_LoadAST_S1A1Z1 = 175,
  efunc_gen_LoadAST_S3B1S1A1Z2 = 176,
  efunc_Symb = 177,
  efunc_gen_LoadAST_S3B1Z0 = 178,
  efunc_gen_ResolveIncludes_S3L1D1 = 179,
  efunc_gen_Map_Z0 = 180,
  efunc_gen_ResolveIncludes_S3L1Z0 = 181,
  efunc_gen_UnBracket_D1 = 182,
  efunc_gen_UnBracket_Z0 = 183,
  efunc_gen_PatchASTm_Body_Z1 = 184,
  efunc_gen_PatchASTSrcPos_A1L1D4 = 185,
  efunc_gen_PatchASTm_Item_Z1D13 = 186,
  efunc_gen_PatchASTm_Item_Z0 = 187,
  efunc_gen_PatchASTSrcPos_A1L1Z0 = 188,
  efunc_gen_PatchASTm_Item_D4 = 189,
  efunc_gen_PatchASTm_Expr_L1Z0 = 190,
  efunc_gen_PatchASTm_Sentence_D1 = 191,
  efunc_gen_PatchASTm_Sentence_Z0 = 192,
  efunc_gen_PatchASTm_Body_S3L1A1 = 193,
  efunc_gen_PatchASTm_Body_S3L1D1 = 194,
  efunc_gen_PatchASTm_Body_S3L1Z0 = 195,
  efunc_gen_PatchASTm_Chain_L1D1 = 196,
  efunc_gen_PatchASTm_Chain_L1Z0 = 197,
  efunc_gen_PatchASTm_Blocks_L1D1 = 198,
  efunc_gen_PatchASTm_Blocks_L1Z0 = 199,
  efunc_gen_PatchASTm_Sentence_A1L1Z0 = 200,
  efunc_gen_BackEndm_RASLModule_B1Z0 = 201,
  efunc_gen_CreateMetaFunctions_S1L1D1 = 202,
  efunc_gen_CreateMetaFunctions_S1L1Z0 = 203,
  efunc_gen_CreateMetaFunctions_S1A1L1D2 = 204,
  efunc_gen_DoMapAccum_S1A1Z2 = 205,
  efunc_gen_CreateMetaFunctions_S1A1L1Z0 = 206,
  efunc_gen_AddInitFinalFunc_B1Z0 = 207,
  efunc_gen_PatchASTm_Body_Z2 = 208,
  efunc_gen_GlobalASTStoragem_AddAST_A4L1D1 = 209,
  efunc_gen_PatchASTm_Item_Z2D4 = 210,
  efunc_gen_GlobalASTStoragem_AddAST_A4L1Z0 = 211,
  efunc_gen_UpdateAccum_D2 = 212,
  efunc_gen_DoMapAccum_S1A1Z3 = 213,
  efunc_gen_GlobalASTStoragem_AddAST_A1L1D1 = 214,
  efunc_gen_GlobalASTStoragem_AddAST_A1L1Z0 = 215,
  efunc_gen_ExtendMetatables_A1L1D1 = 216,
  efunc_gen_ExtendMetatables_A1L1Z0 = 217,
  efunc_gen_MakeInitFinalFunc_S2A2L1D1 = 218,
  efunc_gen_MakeInitFinalFunc_S2A2L1Z0 = 219,
  efunc_gen_MakeInitFinalFunc_S2A2Z0 = 220,
  efunc_gen_ExtendMetatables_L1Z0 = 221,
  efunc_gen_CreateMetaFunctions_S1A1L1D2S3C1 = 222,
  efunc_gen_GlobalASTStoragem_AddAST_A1L1D1S2C1 = 223,
  efunc_gen_DoMapAccum_S1A1Z0 = 224,
  efunc_gen_LoadAST_S3B1S1B1Z2 = 225,
  efunc_RemoveFile = 226,
  efunc_gen_LoadAST_S3B1S1A1Z0 = 227,
  efunc_gen_GlobalASTStoragem_AddAST_A4L1D1S2C1 = 228,
  efunc_gen_LoadAST_S1A2Z1 = 229,
  efunc_gen_LoadAST_S1A1Z0 = 230,
  efunc_gen_LoadAST_S3B1S1B1Z0 = 231,
  efunc_gen_Map_Z18 = 232,
  efunc_gen_Map_Z19 = 233,
  efunc_gen_PatchASTm_Body_Z0 = 234,
  efunc_gen_Map_Z16 = 235,
  efunc_gen_PatchASTm_Expr_L1Z1 = 236,
  efunc_gen_Map_Z20 = 237,
  efunc_gen_Map_Z21 = 238,
  efunc_gen_Map_Z17 = 239,
  efunc_gen_LoadAST_S1A2Z0 = 240,
  efunc_gen_Map_Z22 = 241,
  efunc_gen_Map_Z23 = 242,
  efunc_gen_PatchASTm_Body_S3L1A1Z1 = 243,
  efunc_gen_Map_Z24 = 244,
  efunc_gen_Map_Z25 = 245,
  efunc_gen_PatchASTSrcPos_A1L1 = 246,
  efunc_gen_PatchASTm_Body_S3L1A1Z0 = 247,
  efunc_gen_GlobalASTStoragem_AddAST_A4L1 = 248,
  efunc_gen_PatchASTm_Item_Z1D13S5C1 = 249,
  efunc_gen_PatchASTm_Item_D4S5C1 = 250,
  efunc_gen_PatchASTm_Item_Z2D4S5C1 = 251,
};


enum ident {
  ident_Success = 0,
  ident_Fails = 1,
  ident_NativeBlock = 2,
  ident_WithNative = 3,
  ident_Function = 4,
  ident_NativeBody = 5,
  ident_NoNative = 6,
  ident_ELm_NoErrors = 7,
  ident_ELm_HasErrors = 8,
  ident_R5 = 9,
  ident_SR = 10,
  ident_RSL = 11,
  ident_Include = 12,
  ident_Name = 13,
  ident_SrcPos = 14,
  ident_NoPos = 15,
  ident_FileLine = 16,
  ident_RowCol = 17,
  ident_FileRowCol = 18,
  ident_Ident = 19,
  ident_Enum = 20,
  ident_Swap = 21,
  ident_Declaration = 22,
  ident_Entry = 23,
  ident_Inline = 24,
  ident_Drive = 25,
  ident_Intrinsic = 26,
  ident_Meta = 27,
  ident_True = 28,
  ident_Spec = 29,
  ident_Symbol = 30,
  ident_Sentences = 31,
  ident_Metatable = 32,
  ident_OptTree = 33,
  ident_NoOpt = 34,
  ident_GNm_Local = 35,
  ident_SUF = 36,
  ident_GNm_Entry = 37,
  ident_Mu = 38,
  ident_Up = 39,
  ident_Evm_met = 40,
  ident_Residue = 41,
  ident_u_u_Metau_Residue = 42,
  ident_Apply = 43,
  ident_Map = 44,
  ident_Reduce = 45,
  ident_Fetch = 46,
  ident_MapAccum = 47,
  ident_DoMapAccum = 48,
  ident_UnBracket = 49,
  ident_DelAccumulator = 50,
  ident_Inc = 51,
  ident_Dec = 52,
  ident_Pipe = 53,
  ident_CompileFile = 54,
  ident_FrontEnd = 55,
  ident_PreludeIncludeLine = 56,
  ident_FilterLexerMessages = 57,
  ident_LoadAST = 58,
  ident_ResolveIncludes = 59,
  ident_ResolveIncludesm_CheckAlias = 60,
  ident_ResolveIncludesm_CheckValid = 61,
  ident_ResolveIncludesm_CheckEqualAST = 62,
  ident_GlueErrorListsAndASTs = 63,
  ident_PatchASTSrcPos = 64,
  ident_PatchAST = 65,
  ident_PatchASTm_Item = 66,
  ident_PatchASTm_Body = 67,
  ident_PatchASTm_Sentence = 68,
  ident_PatchASTm_Chain = 69,
  ident_PatchASTm_Blocks = 70,
  ident_PatchASTm_Expr = 71,
  ident_BackEnd = 72,
  ident_BackEndm_RASLModule = 73,
  ident_BackEndm_NativeModule = 74,
  ident_CreateMetaFunctions = 75,
  ident_GrammarCheck = 76,
  ident_GlobalASTStoragem_Create = 77,
  ident_GlobalASTStoragem_AddAST = 78,
  ident_UpdateAccum = 79,
  ident_CleanupLocals = 80,
  ident_AddInitFinalFunc = 81,
  ident_GlobalASTStoragem_Check = 82,
  ident_ExtendMetatables = 83,
  ident_CleanupDuplicates = 84,
  ident_MakeInitFinalFunc = 85,
  ident_TkWarning = 86,
  ident_TkError = 87,
  ident_False = 88,
  ident_Var = 89,
  ident_NewVar = 90,
  ident_Brackets = 91,
  ident_ADTm_Brackets = 92,
  ident_CallBrackets = 93,
  ident_Closure = 94,
  ident_Identifier = 95,
};


static refalrts::FnResult func_Mu(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Mu/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Mu("Mu", COOKIE1_, COOKIE2_, func_Mu);


static refalrts::FnResult func_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Residue("Residue", COOKIE1_, COOKIE2_, func_Residue);


static refalrts::FnResult func_u_u_Metau_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & __Meta_Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_Metau_Residue("__Meta_Residue", COOKIE1_, COOKIE2_, func_u_u_Metau_Residue);


static refalrts::FnResult func_Apply(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Apply/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply/4 s.Fn/5 e.Argument/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.Argument as range 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.Argument: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.Argument/7 HalfReuse: & $table/1 } >/9 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply/4 (/5 t.Closure/9 e.Bounded/7 )/6 e.Argument/2 >/1
  context[7] = 0;
  context[8] = 0;
  if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument as range 2
  context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.Bounded as range 7
  //DEBUG: e.Argument: 2
  //DEBUG: t.Closure: 9
  //DEBUG: e.Bounded: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply/4 } Tile{ AsIs: t.Closure/9 } Tile{ AsIs: e.Bounded/7 } Tile{ AsIs: e.Argument/2 } Tile{ AsIs: >/1 ]] }
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Apply("Apply", COOKIE1_, COOKIE2_, func_Apply);


static refalrts::FnResult func_Map(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Map/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Map/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Map/4 s.Fn/5 t.Next/9 e.Tail/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      if( ! refalrts::svar_term( context[5], context[5] ) )
        continue;
      // closed e.Tail as range 11
      //DEBUG: t.Next: 9
      //DEBUG: s.Fn: 5
      //DEBUG: e.Tail: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: t.Next/9 } & $table/13 >/14 </15 & Map/16 s.Fn/5/17 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[13], functions[efunc_d_table]);
      refalrts::alloc_close_call(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_Map]);
      refalrts::copy_stvar(vm, context[17], context[5]);
      refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[13], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Map/4 (/5 t./15 e.0/13 )/6 t.Next/9 e.Tail/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      // closed e.Tail as range 11
      context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
      if( ! context[16] )
        continue;
      // closed e.0 as range 13
      //DEBUG: t.Next: 9
      //DEBUG: e.Tail: 11
      //DEBUG: t.: 15
      //DEBUG: e.0: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </17 & Apply@3/18 t./15/19 e.0/13/21 Tile{ AsIs: t.Next/9 } >/23 Tile{ AsIs: </0 AsIs: & Map/4 AsIs: (/5 AsIs: t./15 AsIs: e.0/13 AsIs: )/6 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_gen_Apply_Z3]);
      refalrts::copy_evar(vm, context[19], context[20], context[15], context[16]);
      refalrts::copy_evar(vm, context[21], context[22], context[13], context[14]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[17], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map/4 t.Fn/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Fn: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.Fn/5 AsIs: t.Next/9 } >/13 </14 & Map/15 t.Fn/5/16 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_Map]);
    refalrts::copy_evar(vm, context[16], context[17], context[5], context[6]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map/4 t.Fn/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Map/4 t.Fn/5 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Map("Map", COOKIE1_, COOKIE2_, func_Map);


static refalrts::FnResult func_gen_Reduce_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Reduce$1=1/4 t.Fn/5 (/9 e.Tail/7 )/10 t.Acc$a/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Tail as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5
  //DEBUG: e.Tail: 7
  //DEBUG: t.Acc$a: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce/4 AsIs: t.Fn/5 } Tile{ AsIs: t.Acc$a/11 } Tile{ AsIs: e.Tail/7 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Reduce]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1("Reduce$1=1", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1);


static refalrts::FnResult func_Reduce(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Reduce/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce/4 t.new1/5 t.new2/7 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Reduce/4 t.Fn/5 t.Acc/7 t.Next/11 e.Tail/9 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[12] = refalrts::tvar_left( context[11], context[9], context[10] );
    if( ! context[12] )
      continue;
    // closed e.Tail as range 9
    //DEBUG: t.Fn: 5
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 11
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & Reduce$1=1/14 t.Fn/5/15 (/17 Tile{ AsIs: e.Tail/9 } )/18 Tile{ AsIs: </0 Reuse: & Apply@2/4 AsIs: t.Fn/5 AsIs: t.Acc/7 AsIs: t.Next/11 } >/19 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Reduce_S1A1]);
    refalrts::copy_evar(vm, context[15], context[16], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce/4 t.Fn/5 t.Acc/7 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Reduce/4 t.Fn/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Reduce("Reduce", COOKIE1_, COOKIE2_, func_Reduce);


static refalrts::FnResult func_Fetch(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & Fetch/4 e.Argument/2 t.Function/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_right( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument as range 2
  //DEBUG: t.Function: 5
  //DEBUG: e.Argument: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply/4 } Tile{ AsIs: t.Function/5 } Tile{ AsIs: e.Argument/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Apply]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Fetch("Fetch", COOKIE1_, COOKIE2_, func_Fetch);


static refalrts::FnResult func_MapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & MapAccum/4 t.Fn/5 t.Acc/7 e.Tail/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail as range 2
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn/5 AsIs: t.Acc/7 } (/9 )/10 Tile{ AsIs: e.Tail/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MapAccum("MapAccum", COOKIE1_, COOKIE2_, func_MapAccum);


static refalrts::FnResult func_gen_DoMapAccum_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DoMapAccum$1=1/4 t.Fn/5 (/9 e.Scanned/7 )/10 (/13 e.Tail/11 )/14 t.Acc$a/15 e.StepScanned/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Scanned as range 7
  // closed e.Tail as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  // closed e.StepScanned as range 2
  //DEBUG: t.Fn: 5
  //DEBUG: e.Scanned: 7
  //DEBUG: e.Tail: 11
  //DEBUG: t.Acc$a: 15
  //DEBUG: e.StepScanned: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn/5 } Tile{ AsIs: t.Acc$a/15 } Tile{ AsIs: (/13 } Tile{ AsIs: e.Scanned/7 } Tile{ AsIs: e.StepScanned/2 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1("DoMapAccum$1=1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1);


static refalrts::FnResult func_DoMapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & DoMapAccum/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum/4 t.new1/5 t.new2/7 (/11 e.new3/9 )/12 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new3 as range 9
  // closed e.new4 as range 2
  do {
    // </0 & DoMapAccum/4 t.Fn/5 t.Acc/7 (/11 e.Scanned/13 )/12 t.Next/17 e.Tail/15 >/1
    context[13] = context[9];
    context[14] = context[10];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.Scanned as range 13
    context[18] = refalrts::tvar_left( context[17], context[15], context[16] );
    if( ! context[18] )
      continue;
    // closed e.Tail as range 15
    //DEBUG: t.Fn: 5
    //DEBUG: t.Acc: 7
    //DEBUG: e.Scanned: 13
    //DEBUG: t.Next: 17
    //DEBUG: e.Tail: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1/4 AsIs: t.Fn/5 } Tile{ AsIs: (/11 AsIs: e.Scanned/13 AsIs: )/12 } (/19 Tile{ AsIs: e.Tail/15 } )/20 </21 & Apply@2/22 t.Fn/5/23 Tile{ AsIs: t.Acc/7 } Tile{ AsIs: t.Next/17 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_Apply_Z2]);
    refalrts::copy_evar(vm, context[23], context[24], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[20], context[24] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum/4 t.Fn/5 t.Acc/7 (/11 e.Scanned/9 )/12 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Scanned as range 9
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7
  //DEBUG: e.Scanned: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoMapAccum/4 t.Fn/5 {REMOVED TILE} (/11 {REMOVED TILE} )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ AsIs: e.Scanned/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoMapAccum("DoMapAccum", COOKIE1_, COOKIE2_, func_DoMapAccum);


static refalrts::FnResult func_UnBracket(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & UnBracket/4 (/7 e.Expr/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr as range 5
  //DEBUG: e.Expr: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & UnBracket/4 (/7 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Expr/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnBracket("UnBracket", COOKIE1_, COOKIE2_, func_UnBracket);


static refalrts::FnResult func_DelAccumulator(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & DelAccumulator/4 t.Acc/5 e.Tail/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail as range 2
  //DEBUG: t.Acc: 5
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DelAccumulator/4 t.Acc/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Tail/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DelAccumulator("DelAccumulator", COOKIE1_, COOKIE2_, func_DelAccumulator);


static refalrts::FnResult func_Inc(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Inc/4 e.Num/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Num as range 2
  //DEBUG: e.Num: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: e.Num/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_Add]);
  refalrts::reinit_number(context[4], 1UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Inc("Inc", COOKIE1_, COOKIE2_, func_Inc);


static refalrts::FnResult func_Dec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Dec/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Dec/4 s.Num/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.Num: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 AsIs: s.Num/7 HalfReuse: 1/1 } >/8 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::update_name(context[4], functions[efunc_Sub]);
    refalrts::reinit_number(context[1], 1UL);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Dec/4 e.Num/2 >/1
  // closed e.Num as range 2
  //DEBUG: e.Num: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 } (/5 Tile{ AsIs: e.Num/2 } )/6 1/7 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_number(vm, context[7], 1UL);
  refalrts::update_name(context[4], functions[efunc_Sub]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Dec("Dec", COOKIE1_, COOKIE2_, func_Dec);


static refalrts::FnResult func_gen_Pipe_S2L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Pipe$2\1/4 t.Func/5 (/9 e.Funcs/7 )/10 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Funcs as range 7
  // closed e.Arg as range 2
  //DEBUG: t.Func: 5
  //DEBUG: e.Funcs: 7
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch/4 } </11 & Apply/12 Tile{ AsIs: t.Func/5 } Tile{ AsIs: e.Arg/2 } >/13 </14 Tile{ HalfReuse: & Pipe/9 AsIs: e.Funcs/7 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_Apply]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_Fetch]);
  refalrts::reinit_name(context[9], functions[efunc_Pipe]);
  refalrts::reinit_close_call(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S2L1("Pipe$2\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S2L1);


static refalrts::FnResult func_gen_Pipe_S3L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Pipe$3\1/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe$3\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Arg/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S3L1("Pipe$3\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S3L1);


static refalrts::FnResult func_Pipe(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Pipe/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Pipe/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Pipe/4 t.Func/7 >/1
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;
      //DEBUG: t.Func: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.Func/7 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Pipe/4 t.Func/7 e.Funcs/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Funcs as range 9
    //DEBUG: t.Func: 7
    //DEBUG: e.Funcs: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: [*]/0 Reuse: & Pipe$2\1/4 AsIs: t.Func/7 } (/11 Tile{ AsIs: e.Funcs/9 } )/12 Tile{ HalfReuse: {*}/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::reinit_closure_head(context[0]);
    refalrts::update_name(context[4], functions[efunc_gen_Pipe_S2L1]);
    refalrts::reinit_unwrapped_closure(context[1], context[0]);
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    refalrts::wrap_closure( context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Pipe/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: & Pipe$3\1/1 ]] }
  refalrts::reinit_name(context[1], functions[efunc_gen_Pipe_S3L1]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Pipe("Pipe", COOKIE1_, COOKIE2_, func_Pipe);


static refalrts::FnResult func_gen_CompileFile_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & CompileFile:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CompileFile:1/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 s.new4/15 e.new5/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  if( ! refalrts::svar_left( context[15], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 2
  do {
    // </0 & CompileFile:1/4 t.Config/5 (/9 e.SrcName/16 )/10 (/13 e.OutputName/18 )/14 # Success/15 s.HasNative/22 e.AST/20 >/1
    context[16] = context[7];
    context[17] = context[8];
    context[18] = context[11];
    context[19] = context[12];
    context[20] = context[2];
    context[21] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Success], context[15] ) )
      continue;
    // closed e.SrcName as range 16
    // closed e.OutputName as range 18
    if( ! refalrts::svar_left( context[22], context[20], context[21] ) )
      continue;
    // closed e.AST as range 20
    //DEBUG: t.Config: 5
    //DEBUG: e.SrcName: 16
    //DEBUG: e.OutputName: 18
    //DEBUG: s.HasNative: 22
    //DEBUG: e.AST: 20

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.HasNative/22 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </23 Tile{ HalfReuse: & BackEnd=1/10 AsIs: (/13 AsIs: e.OutputName/18 AsIs: )/14 HalfReuse: (/15 } Tile{ AsIs: e.SrcName/16 } )/24 t.Config/5/25 (/27 Tile{ AsIs: e.AST/20 } )/28 Tile{ AsIs: </0 Reuse: & Config-GetDebugMode/4 AsIs: t.Config/5 HalfReuse: >/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::copy_evar(vm, context[25], context[26], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::alloc_close_bracket(vm, context[28]);
    refalrts::reinit_name(context[10], functions[efunc_gen_BackEnd_A1]);
    refalrts::reinit_open_bracket(context[15]);
    refalrts::update_name(context[4], functions[efunc_Configm_GetDebugMode]);
    refalrts::reinit_close_call(context[9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[15], context[24] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[10], context[15] );
    res = refalrts::splice_elem( res, context[23] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CompileFile:1/4 t.Config/5 (/9 e.SrcName/7 )/10 (/13 e.OutputName/11 )/14 # Fails/15 >/1
  if( ! refalrts::ident_term( identifiers[ident_Fails], context[15] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.SrcName as range 7
  // closed e.OutputName as range 11
  //DEBUG: t.Config: 5
  //DEBUG: e.SrcName: 7
  //DEBUG: e.OutputName: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CompileFile:1/4 t.Config/5 (/9 e.SrcName/7 )/10 (/13 e.OutputName/11 )/14 # Fails/15 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Fails/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_Fails]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CompileFile_B1("CompileFile:1", COOKIE1_, COOKIE2_, func_gen_CompileFile_B1);


static refalrts::FnResult func_CompileFile(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & CompileFile/4 t.Config/10 (/14 s.Dialect/16 e.SrcName/12 )/15 e.OutputName/2 '.'/9 'r'/8 'a'/7 's'/6 'l'/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = refalrts::char_right( 'l', context[2], context[3] );
  if( ! context[5] )
    return refalrts::cRecognitionImpossible;
  context[6] = refalrts::char_right( 's', context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::char_right( 'a', context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::char_right( 'r', context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = refalrts::char_right( '.', context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  // closed e.OutputName as range 2
  if( ! refalrts::svar_left( context[16], context[12], context[13] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.SrcName as range 12
  //DEBUG: t.Config: 10
  //DEBUG: e.OutputName: 2
  //DEBUG: s.Dialect: 16
  //DEBUG: e.SrcName: 12

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CompileFile:1/4 AsIs: t.Config/10 AsIs: (/14 } Tile{ AsIs: e.SrcName/12 } Tile{ HalfReuse: )/6 } Tile{ HalfReuse: (/15 AsIs: e.OutputName/2 HalfReuse: )/9 HalfReuse: </8 HalfReuse: & FrontEnd/7 } t.Config/10/17 Tile{ AsIs: s.Dialect/16 } e.SrcName/12/19 Tile{ HalfReuse: >/5 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[17], context[18], context[10], context[11]);
  refalrts::copy_evar(vm, context[19], context[20], context[12], context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_CompileFile_B1]);
  refalrts::reinit_close_bracket(context[6]);
  refalrts::reinit_open_bracket(context[15]);
  refalrts::reinit_close_bracket(context[9]);
  refalrts::reinit_open_call(context[8]);
  refalrts::reinit_name(context[7], functions[efunc_FrontEnd]);
  refalrts::reinit_close_call(context[5]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[8] );
  refalrts::link_brackets( context[15], context[9] );
  refalrts::link_brackets( context[14], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[5];
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[15], context[7] );
  res = refalrts::splice_elem( res, context[6] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CompileFile("CompileFile", 0U, 0U, func_CompileFile);


static refalrts::FnResult func_gen_FrontEnd_B1S1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & FrontEnd:1$1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & FrontEnd:1$1:1/4 e.AST-B/7 (/13 # NativeBlock/15 t.SrcPos/16 e.Name/11 )/14 e.AST-E/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_NativeBlock], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e.AST-E as range 9
      context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      // closed e.Name as range 11
      //DEBUG: e.AST-B: 7
      //DEBUG: e.AST-E: 9
      //DEBUG: t.SrcPos: 16
      //DEBUG: e.Name: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # Success/0 HalfReuse: # WithNative/4 AsIs: e.AST-B/7 AsIs: (/13 AsIs: # NativeBlock/15 AsIs: t.SrcPos/16 AsIs: e.Name/11 AsIs: )/14 } Tile{ AsIs: e.AST-E/9 } Tile{ ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_Success]);
      refalrts::reinit_ident(context[4], identifiers[ident_WithNative]);
      refalrts::link_brackets( context[13], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::splice_to_freelist_open( vm, context[14], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & FrontEnd:1$1:1/4 e.AST-B/7 (/13 # Function/15 t.SrcPos/16 s.ScopeClass/18 (/21 e.Name/19 )/22 # NativeBody/23 e.Body/11 )/14 e.AST-E/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Function], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e.AST-E as range 9
      context[17] = refalrts::tvar_left( context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      if( ! refalrts::svar_left( context[18], context[11], context[12] ) )
        continue;
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_left( context[19], context[20], context[11], context[12] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      context[23] = refalrts::ident_left( identifiers[ident_NativeBody], context[11], context[12] );
      if( ! context[23] )
        continue;
      // closed e.Name as range 19
      // closed e.Body as range 11
      //DEBUG: e.AST-B: 7
      //DEBUG: e.AST-E: 9
      //DEBUG: t.SrcPos: 16
      //DEBUG: s.ScopeClass: 18
      //DEBUG: e.Name: 19
      //DEBUG: e.Body: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # Success/0 HalfReuse: # WithNative/4 AsIs: e.AST-B/7 AsIs: (/13 AsIs: # Function/15 AsIs: t.SrcPos/16 AsIs: s.ScopeClass/18 AsIs: (/21 AsIs: e.Name/19 AsIs: )/22 AsIs: # NativeBody/23 AsIs: e.Body/11 AsIs: )/14 } Tile{ AsIs: e.AST-E/9 } Tile{ ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_Success]);
      refalrts::reinit_ident(context[4], identifiers[ident_WithNative]);
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::splice_to_freelist_open( vm, context[14], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FrontEnd:1$1:1/4 e.AST$b/2 >/1
  // closed e.AST$b as range 2
  //DEBUG: e.AST$b: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Success/0 HalfReuse: # NoNative/4 } Tile{ AsIs: e.AST$b/2 } Tile{ ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_Success]);
  refalrts::reinit_ident(context[4], identifiers[ident_NoNative]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FrontEnd_B1S1B1("FrontEnd:1$1:1", COOKIE1_, COOKIE2_, func_gen_FrontEnd_B1S1B1);


static refalrts::FnResult func_gen_FrontEnd_B1S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & FrontEnd:1$1=1/4 e.AST$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST$a as range 2
  //DEBUG: e.AST$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & FrontEnd:1$1:1/4 AsIs: e.AST$a/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_FrontEnd_B1S1B1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FrontEnd_B1S1A1("FrontEnd:1$1=1", COOKIE1_, COOKIE2_, func_gen_FrontEnd_B1S1A1);


static refalrts::FnResult func_gen_FrontEnd_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & FrontEnd:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FrontEnd:1/4 (/7 e.new1/5 )/8 s.new2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & FrontEnd:1/4 (/7 e.AST/10 )/8 # EL-NoErrors/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_ELm_NoErrors], context[9] ) )
      continue;
    // closed e.AST as range 10
    //DEBUG: e.AST: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & FrontEnd:1$1=1/4 HalfReuse: </7 } Tile{ HalfReuse: & CreateMetaFunctions/8 } Tile{ AsIs: e.AST/10 } Tile{ HalfReuse: >/9 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_FrontEnd_B1S1A1]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_CreateMetaFunctions]);
    refalrts::reinit_close_call(context[9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FrontEnd:1/4 (/7 e.AST/5 )/8 # EL-HasErrors/9 >/1
  if( ! refalrts::ident_term( identifiers[ident_ELm_HasErrors], context[9] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.AST as range 5
  //DEBUG: e.AST: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & FrontEnd:1/4 (/7 e.AST/5 )/8 # EL-HasErrors/9 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Fails/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_Fails]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FrontEnd_B1("FrontEnd:1", COOKIE1_, COOKIE2_, func_gen_FrontEnd_B1);


static refalrts::FnResult func_gen_FrontEnd_A6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & FrontEnd=6/4 (/7 e.AST/5 )/8 (/11 e.WarningIds/9 )/12 (/15 e.WarningIdsAsErrors/13 )/16 t.ErrorList$b/17 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.AST as range 5
  // closed e.WarningIds as range 9
  // closed e.WarningIdsAsErrors as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.AST: 5
  //DEBUG: e.WarningIds: 9
  //DEBUG: e.WarningIdsAsErrors: 13
  //DEBUG: t.ErrorList$b: 17

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & FrontEnd:1/4 AsIs: (/7 AsIs: e.AST/5 AsIs: )/8 HalfReuse: </11 } & EL-Destroy/19 Tile{ AsIs: t.ErrorList$b/17 } (/20 Tile{ AsIs: e.WarningIds/9 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.WarningIdsAsErrors/13 AsIs: )/16 } >/21 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[19], functions[efunc_ELm_Destroy]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::update_name(context[4], functions[efunc_gen_FrontEnd_B1]);
  refalrts::reinit_open_call(context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[20], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[12], context[16] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_elem( res, context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FrontEnd_A6("FrontEnd=6", COOKIE1_, COOKIE2_, func_gen_FrontEnd_A6);


static refalrts::FnResult func_gen_FrontEnd_A5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & FrontEnd=5/4 (/7 e.WarningIds/5 )/8 (/11 e.WarningIdsAsErrors/9 )/12 t.ErrorList$a/13 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.WarningIds as range 5
  // closed e.WarningIdsAsErrors as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.AST as range 2
  //DEBUG: e.WarningIds: 5
  //DEBUG: e.WarningIdsAsErrors: 9
  //DEBUG: t.ErrorList$a: 13
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 } & FrontEnd=6/15 (/16 e.AST/2/17 Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.WarningIds/5 AsIs: )/8 AsIs: (/11 AsIs: e.WarningIdsAsErrors/9 AsIs: )/12 } </19 & CheckProgram/20 (/21 e.WarningIds/5/22 )/24 Tile{ AsIs: t.ErrorList$a/13 AsIs: e.AST/2 AsIs: >/1 } >/25 Tile{ ]] }
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_FrontEnd_A6]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::copy_evar(vm, context[17], context[18], context[2], context[3]);
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_name(vm, context[20], functions[efunc_CheckProgram]);
  refalrts::alloc_open_bracket(vm, context[21]);
  refalrts::copy_evar(vm, context[22], context[23], context[5], context[6]);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[19] );
  refalrts::link_brackets( context[21], context[24] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[16], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[13], context[1] );
  res = refalrts::splice_evar( res, context[19], context[24] );
  res = refalrts::splice_evar( res, context[4], context[12] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FrontEnd_A5("FrontEnd=5", COOKIE1_, COOKIE2_, func_gen_FrontEnd_A5);


static refalrts::FnResult func_gen_FrontEnd_A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & FrontEnd=4/4 (/7 e.WarningIds/5 )/8 (/11 e.WarningIdsAsErrors/9 )/12 (/15 e.SrcName/13 )/16 e.IncludeUnits/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.WarningIds as range 5
  // closed e.WarningIdsAsErrors as range 9
  // closed e.SrcName as range 13
  // closed e.IncludeUnits as range 2
  //DEBUG: e.WarningIds: 5
  //DEBUG: e.WarningIdsAsErrors: 9
  //DEBUG: e.SrcName: 13
  //DEBUG: e.IncludeUnits: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & FrontEnd=5/4 AsIs: (/7 AsIs: e.WarningIds/5 AsIs: )/8 AsIs: (/11 AsIs: e.WarningIdsAsErrors/9 AsIs: )/12 HalfReuse: </15 } & MapAccum/17 & GlueErrorListsAndASTs\1/18 </19 & EL-Create/20 Tile{ AsIs: e.SrcName/13 } Tile{ HalfReuse: >/16 AsIs: e.IncludeUnits/2 AsIs: >/1 } >/21 Tile{ ]] }
  refalrts::alloc_name(vm, context[17], functions[efunc_MapAccum]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_GlueErrorListsAndASTs_L1]);
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_name(vm, context[20], functions[efunc_ELm_Create]);
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::update_name(context[4], functions[efunc_gen_FrontEnd_A5]);
  refalrts::reinit_open_call(context[15]);
  refalrts::reinit_close_call(context[16]);
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[19] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[16], context[1] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[17], context[20] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FrontEnd_A4("FrontEnd=4", COOKIE1_, COOKIE2_, func_gen_FrontEnd_A4);


static refalrts::FnResult func_gen_FrontEnd_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & FrontEnd=3/4 (/7 e.WarningIds/5 )/8 (/11 e.WarningIdsAsErrors/9 )/12 (/15 e.SrcName/13 )/16 t.Config/17 s.Dialect/19 t.ErrorList/20 e.FirstAST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.WarningIds as range 5
  // closed e.WarningIdsAsErrors as range 9
  // closed e.SrcName as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[19], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[21] = refalrts::tvar_left( context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  // closed e.FirstAST as range 2
  //DEBUG: e.WarningIds: 5
  //DEBUG: e.WarningIdsAsErrors: 9
  //DEBUG: e.SrcName: 13
  //DEBUG: t.Config: 17
  //DEBUG: s.Dialect: 19
  //DEBUG: t.ErrorList: 20
  //DEBUG: e.FirstAST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & FrontEnd=4/4 AsIs: (/7 AsIs: e.WarningIds/5 AsIs: )/8 AsIs: (/11 AsIs: e.WarningIdsAsErrors/9 AsIs: )/12 AsIs: (/15 AsIs: e.SrcName/13 AsIs: )/16 } </22 & ResolveIncludes/23 Tile{ AsIs: t.Config/17 } (/24 )/25 (/26 Tile{ AsIs: t.ErrorList/20 } Tile{ AsIs: s.Dialect/19 } (/27 (/28 e.SrcName/13/29 )/31 (/32 e.SrcName/13/33 )/35 )/36 (/37 )/38 Tile{ AsIs: e.FirstAST/2 } )/39 >/40 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::alloc_name(vm, context[23], functions[efunc_ResolveIncludes]);
  refalrts::alloc_open_bracket(vm, context[24]);
  refalrts::alloc_close_bracket(vm, context[25]);
  refalrts::alloc_open_bracket(vm, context[26]);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::copy_evar(vm, context[29], context[30], context[13], context[14]);
  refalrts::alloc_close_bracket(vm, context[31]);
  refalrts::alloc_open_bracket(vm, context[32]);
  refalrts::copy_evar(vm, context[33], context[34], context[13], context[14]);
  refalrts::alloc_close_bracket(vm, context[35]);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_open_bracket(vm, context[37]);
  refalrts::alloc_close_bracket(vm, context[38]);
  refalrts::alloc_close_bracket(vm, context[39]);
  refalrts::alloc_close_call(vm, context[40]);
  refalrts::update_name(context[4], functions[efunc_gen_FrontEnd_A4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[40] );
  refalrts::push_stack( vm, context[22] );
  refalrts::link_brackets( context[26], context[39] );
  refalrts::link_brackets( context[37], context[38] );
  refalrts::link_brackets( context[27], context[36] );
  refalrts::link_brackets( context[32], context[35] );
  refalrts::link_brackets( context[28], context[31] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[39], context[40] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[27], context[38] );
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[24], context[26] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FrontEnd_A3("FrontEnd=3", COOKIE1_, COOKIE2_, func_gen_FrontEnd_A3);


static refalrts::FnResult func_gen_FrontEnd_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 59 elems
  refalrts::Iter context[59];
  refalrts::zeros( context, 59 );
  // </0 & FrontEnd=2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FrontEnd=2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 t.new3/13 s.new4/15 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[15], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 2
  do {
    // </0 & FrontEnd=2/4 (/7 e.WarningIds/16 )/8 (/11 e.SrcName/18 )/12 t.Config/13 # R5/15 e.WarningIdsAsErrors/20 >/1
    context[16] = context[5];
    context[17] = context[6];
    context[18] = context[9];
    context[19] = context[10];
    context[20] = context[2];
    context[21] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_R5], context[15] ) )
      continue;
    // closed e.WarningIds as range 16
    // closed e.SrcName as range 18
    // closed e.WarningIdsAsErrors as range 20
    //DEBUG: t.Config: 13
    //DEBUG: e.WarningIds: 16
    //DEBUG: e.SrcName: 18
    //DEBUG: e.WarningIdsAsErrors: 20

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & FrontEnd=3/4 AsIs: (/7 AsIs: e.WarningIds/16 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.WarningIdsAsErrors/20 } )/22 (/23 e.SrcName/18/24 Tile{ AsIs: )/12 AsIs: t.Config/13 AsIs: # R5/15 } </26 & LoadAST$1=1/27 t.Config/13/28 (/30 Tile{ AsIs: e.SrcName/18 } )/31 </32 & Config-GetR5Mode/33 t.Config/13/34 >/36 >/37 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::copy_evar(vm, context[24], context[25], context[18], context[19]);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_gen_LoadAST_S1A1]);
    refalrts::copy_evar(vm, context[28], context[29], context[13], context[14]);
    refalrts::alloc_open_bracket(vm, context[30]);
    refalrts::alloc_close_bracket(vm, context[31]);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_Configm_GetR5Mode]);
    refalrts::copy_evar(vm, context[34], context[35], context[13], context[14]);
    refalrts::alloc_close_call(vm, context[36]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::update_name(context[4], functions[efunc_gen_FrontEnd_A3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[32] );
    refalrts::link_brackets( context[30], context[31] );
    refalrts::link_brackets( context[23], context[12] );
    refalrts::link_brackets( context[11], context[22] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[31], context[37] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[26], context[30] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & FrontEnd=2/4 (/7 e.WarningIds/16 )/8 (/11 e.SrcName/18 )/12 t.Config/13 # SR/15 e.WarningIdsAsErrors/20 >/1
    context[16] = context[5];
    context[17] = context[6];
    context[18] = context[9];
    context[19] = context[10];
    context[20] = context[2];
    context[21] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_SR], context[15] ) )
      continue;
    // closed e.WarningIds as range 16
    // closed e.SrcName as range 18
    // closed e.WarningIdsAsErrors as range 20
    //DEBUG: t.Config: 13
    //DEBUG: e.WarningIds: 16
    //DEBUG: e.SrcName: 18
    //DEBUG: e.WarningIdsAsErrors: 20

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & FrontEnd=3/4 AsIs: (/7 AsIs: e.WarningIds/16 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.WarningIdsAsErrors/20 } )/22 (/23 e.SrcName/18/24 Tile{ AsIs: )/12 AsIs: t.Config/13 AsIs: # SR/15 } </26 & LoadAST$2=1/27 (/28 Tile{ AsIs: e.SrcName/18 } )/29 </30 & SR-Scan/31 e.SrcName/18/32 >/34 >/35 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::copy_evar(vm, context[24], context[25], context[18], context[19]);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_gen_LoadAST_S2A1]);
    refalrts::alloc_open_bracket(vm, context[28]);
    refalrts::alloc_close_bracket(vm, context[29]);
    refalrts::alloc_open_call(vm, context[30]);
    refalrts::alloc_name(vm, context[31], functions[efunc_SRm_Scan]);
    refalrts::copy_evar(vm, context[32], context[33], context[18], context[19]);
    refalrts::alloc_close_call(vm, context[34]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::update_name(context[4], functions[efunc_gen_FrontEnd_A3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[30] );
    refalrts::link_brackets( context[28], context[29] );
    refalrts::link_brackets( context[23], context[12] );
    refalrts::link_brackets( context[11], context[22] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[29], context[35] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[26], context[28] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & FrontEnd=2/4 (/7 e.new8/16 )/8 (/11 e.new9/18 )/12 t.new6/13 # RSL/15 e.new7/20 >/1
    context[16] = context[5];
    context[17] = context[6];
    context[18] = context[9];
    context[19] = context[10];
    context[20] = context[2];
    context[21] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_RSL], context[15] ) )
      continue;
    // closed e.new8 as range 16
    // closed e.new9 as range 18
    // closed e.new7 as range 20
    do {
      // </0 & FrontEnd=2/4 (/7 e.WarningIds/22 )/8 (/11 e.2/24 '.'/31 'r'/30 's'/29 'l'/28 )/12 t.Config/13 # RSL/15 e.WarningIdsAsErrors/26 >/1
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[21];
      context[28] = refalrts::char_right( 'l', context[24], context[25] );
      if( ! context[28] )
        continue;
      context[29] = refalrts::char_right( 's', context[24], context[25] );
      if( ! context[29] )
        continue;
      context[30] = refalrts::char_right( 'r', context[24], context[25] );
      if( ! context[30] )
        continue;
      context[31] = refalrts::char_right( '.', context[24], context[25] );
      if( ! context[31] )
        continue;
      // closed e.WarningIds as range 22
      // closed e.2 as range 24
      // closed e.WarningIdsAsErrors as range 26
      //DEBUG: t.Config: 13
      //DEBUG: e.WarningIds: 22
      //DEBUG: e.2: 24
      //DEBUG: e.WarningIdsAsErrors: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & FrontEnd=3/4 AsIs: (/7 } Tile{ AsIs: e.WarningIds/22 } )/32 (/33 Tile{ AsIs: e.WarningIdsAsErrors/26 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.2/24 AsIs: '.'/31 AsIs: 'r'/30 AsIs: 's'/29 AsIs: 'l'/28 AsIs: )/12 AsIs: t.Config/13 AsIs: # RSL/15 } </34 & LoadAST$3:1@2/35 (/36 e.2/24/37 )/39 t.Config/13/40 </42 & System/43"rl-rsl-decompiler "/44 e.2/24/46".rsl"/48 >/50 </51 & ExistFile/52 e.2/24/53"-decompiled.ref"/55 >/57 >/58 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[32]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_open_call(vm, context[34]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_LoadAST_S3B1Z2]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::copy_evar(vm, context[37], context[38], context[24], context[25]);
      refalrts::alloc_close_bracket(vm, context[39]);
      refalrts::copy_evar(vm, context[40], context[41], context[13], context[14]);
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_name(vm, context[43], functions[efunc_System]);
      refalrts::alloc_chars(vm, context[44], context[45], "rl-rsl-decompiler ", 18);
      refalrts::copy_evar(vm, context[46], context[47], context[24], context[25]);
      refalrts::alloc_chars(vm, context[48], context[49], ".rsl", 4);
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::alloc_open_call(vm, context[51]);
      refalrts::alloc_name(vm, context[52], functions[efunc_ExistFile]);
      refalrts::copy_evar(vm, context[53], context[54], context[24], context[25]);
      refalrts::alloc_chars(vm, context[55], context[56], "-decompiled.ref", 15);
      refalrts::alloc_close_call(vm, context[57]);
      refalrts::alloc_close_call(vm, context[58]);
      refalrts::update_name(context[4], functions[efunc_gen_FrontEnd_A3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[58] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[57] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[42] );
      refalrts::link_brackets( context[36], context[39] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[33], context[8] );
      refalrts::link_brackets( context[7], context[32] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[34], context[58] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & FrontEnd=2/4 (/7 e.WarningIds/22 )/8 (/11 e.SrcName/24 )/12 t.Config/13 # RSL/15 e.WarningIdsAsErrors/26 >/1
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    context[27] = context[21];
    // closed e.WarningIds as range 22
    // closed e.SrcName as range 24
    // closed e.WarningIdsAsErrors as range 26
    //DEBUG: t.Config: 13
    //DEBUG: e.WarningIds: 22
    //DEBUG: e.SrcName: 24
    //DEBUG: e.WarningIdsAsErrors: 26

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & FrontEnd=3/4 AsIs: (/7 AsIs: e.WarningIds/22 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.WarningIdsAsErrors/26 } )/28 (/29 Tile{ AsIs: e.SrcName/24 } Tile{ AsIs: )/12 AsIs: t.Config/13 AsIs: # RSL/15 } </30 & LoadAST$3=1*1/31 t.Config/13/32 (/34 e.SrcName/24/35 )/37 e.SrcName/24/38 >/40 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[28]);
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_open_call(vm, context[30]);
    refalrts::alloc_name(vm, context[31], functions[efunc_gen_LoadAST_S3A1D1]);
    refalrts::copy_evar(vm, context[32], context[33], context[13], context[14]);
    refalrts::alloc_open_bracket(vm, context[34]);
    refalrts::copy_evar(vm, context[35], context[36], context[24], context[25]);
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::copy_evar(vm, context[38], context[39], context[24], context[25]);
    refalrts::alloc_close_call(vm, context[40]);
    refalrts::update_name(context[4], functions[efunc_gen_FrontEnd_A3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[30] );
    refalrts::link_brackets( context[34], context[37] );
    refalrts::link_brackets( context[29], context[12] );
    refalrts::link_brackets( context[11], context[28] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[30], context[40] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FrontEnd=2/4 (/7 e.WarningIds/5 )/8 (/11 e.SrcName/9 )/12 t.Config/13 s.Dialect/15 e.WarningIdsAsErrors/2 >/1
  // closed e.WarningIds as range 5
  // closed e.SrcName as range 9
  // closed e.WarningIdsAsErrors as range 2
  //DEBUG: t.Config: 13
  //DEBUG: s.Dialect: 15
  //DEBUG: e.WarningIds: 5
  //DEBUG: e.SrcName: 9
  //DEBUG: e.WarningIdsAsErrors: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & FrontEnd=3/4 AsIs: (/7 AsIs: e.WarningIds/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.WarningIdsAsErrors/2 } )/16 (/17 Tile{ AsIs: e.SrcName/9 } Tile{ AsIs: )/12 AsIs: t.Config/13 AsIs: s.Dialect/15 } </18 & LoadAST*4/19 t.Config/13/20 s.Dialect/15/22 e.SrcName/9/23 >/25 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_open_call(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_gen_LoadAST_D4]);
  refalrts::copy_evar(vm, context[20], context[21], context[13], context[14]);
  refalrts::copy_stvar(vm, context[22], context[15]);
  refalrts::copy_evar(vm, context[23], context[24], context[9], context[10]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::update_name(context[4], functions[efunc_gen_FrontEnd_A3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[18] );
  refalrts::link_brackets( context[17], context[12] );
  refalrts::link_brackets( context[11], context[16] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[18], context[25] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FrontEnd_A2("FrontEnd=2", COOKIE1_, COOKIE2_, func_gen_FrontEnd_A2);


static refalrts::FnResult func_gen_FrontEnd_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & FrontEnd=1/4 (/7 e.SrcName/5 )/8 t.Config/9 s.Dialect/11 e.WarningIds/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.SrcName as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.WarningIds as range 2
  //DEBUG: e.SrcName: 5
  //DEBUG: t.Config: 9
  //DEBUG: s.Dialect: 11
  //DEBUG: e.WarningIds: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 } & FrontEnd=2/12 (/13 Tile{ AsIs: e.WarningIds/2 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.SrcName/5 AsIs: )/8 AsIs: t.Config/9 AsIs: s.Dialect/11 } </14 & Config-GetWarningIdsAsErrors/15 t.Config/9/16 >/18 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_FrontEnd_A2]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_Configm_GetWarningIdsAsErrors]);
  refalrts::copy_evar(vm, context[16], context[17], context[9], context[10]);
  refalrts::alloc_close_call(vm, context[18]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[18] );
  refalrts::push_stack( vm, context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[14], context[18] );
  res = refalrts::splice_evar( res, context[4], context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FrontEnd_A1("FrontEnd=1", COOKIE1_, COOKIE2_, func_gen_FrontEnd_A1);


static refalrts::FnResult func_FrontEnd(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & FrontEnd/4 t.Config/5 s.Dialect/7 e.SrcName/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.SrcName as range 2
  //DEBUG: t.Config: 5
  //DEBUG: s.Dialect: 7
  //DEBUG: e.SrcName: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & FrontEnd=1/4 } (/8 Tile{ AsIs: e.SrcName/2 } )/9 Tile{ AsIs: t.Config/5 AsIs: s.Dialect/7 } </10 & Config-GetWarningIds/11 t.Config/5/12 >/14 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_Configm_GetWarningIds]);
  refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_FrontEnd_A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[10], context[14] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FrontEnd("FrontEnd", 0U, 0U, func_FrontEnd);


static refalrts::FnResult func_gen_PreludeIncludeLine_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & PreludeIncludeLine:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & PreludeIncludeLine:1/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & PreludeIncludeLine:1/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PreludeIncludeLine:1/4 e.Prelude/2 >/1
  // closed e.Prelude as range 2
  //DEBUG: e.Prelude: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/5 Tile{ HalfReuse: # Include/0 HalfReuse: 1/4 AsIs: e.Prelude/2 HalfReuse: )/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::reinit_ident(context[0], identifiers[ident_Include]);
  refalrts::reinit_number(context[4], 1UL);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[5], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PreludeIncludeLine_B1("PreludeIncludeLine:1", COOKIE1_, COOKIE2_, func_gen_PreludeIncludeLine_B1);


static refalrts::FnResult func_PreludeIncludeLine(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & PreludeIncludeLine/4 t.Config/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Config: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & PreludeIncludeLine:1/8 Tile{ AsIs: </0 Reuse: & Config-GetPrelude/4 AsIs: t.Config/5 AsIs: >/1 } >/9 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_PreludeIncludeLine_B1]);
  refalrts::alloc_close_call(vm, context[9]);
  refalrts::update_name(context[4], functions[efunc_Configm_GetPrelude]);
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PreludeIncludeLine("PreludeIncludeLine", COOKIE1_, COOKIE2_, func_PreludeIncludeLine);


static refalrts::FnResult func_FilterLexerMessages(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & FilterLexerMessages/4 t.ErrorList/5 e.Tokens/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tokens as range 2
  //DEBUG: t.ErrorList: 5
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@1/4 AsIs: t.ErrorList/5 } (/7 )/8 Tile{ AsIs: e.Tokens/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FilterLexerMessages("FilterLexerMessages", COOKIE1_, COOKIE2_, func_FilterLexerMessages);


static refalrts::FnResult func_gen_LoadAST_S1A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & LoadAST$1=4/4 t.Config/5 t.ErrorList$a/7 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.AST as range 2
  //DEBUG: t.Config: 5
  //DEBUG: t.ErrorList$a: 7
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList$a/7 } </9 & PreludeIncludeLine:1/10 Tile{ AsIs: </0 Reuse: & Config-GetPrelude/4 AsIs: t.Config/5 } Tile{ AsIs: >/1 } >/11 Tile{ AsIs: e.AST/2 } Tile{ ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_PreludeIncludeLine_B1]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_Configm_GetPrelude]);
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[0], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_LoadAST_S1A4("LoadAST$1=4", COOKIE1_, COOKIE2_, func_gen_LoadAST_S1A4);


static refalrts::FnResult func_gen_LoadAST_S1A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & LoadAST$1=3/4 t.Config/5 s.Mode/7 t.ErrorList/8 e.Tokens$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[9] = refalrts::tvar_left( context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tokens$a as range 2
  //DEBUG: t.Config: 5
  //DEBUG: s.Mode: 7
  //DEBUG: t.ErrorList: 8
  //DEBUG: e.Tokens$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & LoadAST$1=4/4 AsIs: t.Config/5 } </10 & R5-Parse/11 Tile{ AsIs: t.ErrorList/8 } Tile{ AsIs: s.Mode/7 } Tile{ AsIs: e.Tokens$a/2 } >/12 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_R5m_Parse]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_LoadAST_S1A4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_LoadAST_S1A3("LoadAST$1=3", COOKIE1_, COOKIE2_, func_gen_LoadAST_S1A3);


static refalrts::FnResult func_gen_LoadAST_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & LoadAST$1=2/4 t.Config/5 s.Mode/7 (/10 e.SrcName/8 )/11 e.Tokens/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  // closed e.SrcName as range 8
  // closed e.Tokens as range 2
  //DEBUG: t.Config: 5
  //DEBUG: s.Mode: 7
  //DEBUG: e.SrcName: 8
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & LoadAST$1=3/4 AsIs: t.Config/5 AsIs: s.Mode/7 HalfReuse: </10 } & FilterLexerMessages/12 </13 & EL-Create/14 Tile{ AsIs: e.SrcName/8 } Tile{ HalfReuse: >/11 AsIs: e.Tokens/2 AsIs: >/1 } >/15 Tile{ ]] }
  refalrts::alloc_name(vm, context[12], functions[efunc_FilterLexerMessages]);
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_ELm_Create]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_LoadAST_S1A3]);
  refalrts::reinit_open_call(context[10]);
  refalrts::reinit_close_call(context[11]);
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[11], context[1] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  res = refalrts::splice_evar( res, context[12], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_LoadAST_S1A2("LoadAST$1=2", COOKIE1_, COOKIE2_, func_gen_LoadAST_S1A2);


static refalrts::FnResult func_gen_LoadAST_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & LoadAST$1=1/4 t.Config/5 (/9 e.SrcName/7 )/10 s.Mode/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.SrcName as range 7
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Config: 5
  //DEBUG: e.SrcName: 7
  //DEBUG: s.Mode: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & LoadAST$1=2/4 AsIs: t.Config/5 HalfReuse: s.Mode11 /9 } (/12 Tile{ AsIs: e.SrcName/7 } )/13 </14 Tile{ HalfReuse: & R5-Scan/10 AsIs: s.Mode/11 } e.SrcName/7/15 >/17 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::copy_evar(vm, context[15], context[16], context[7], context[8]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_gen_LoadAST_S1A2]);
  refalrts::reinit_svar( context[9], context[11] );
  refalrts::reinit_name(context[10], functions[efunc_R5m_Scan]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[14] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_LoadAST_S1A1("LoadAST$1=1", COOKIE1_, COOKIE2_, func_gen_LoadAST_S1A1);


static refalrts::FnResult func_gen_LoadAST_S2A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & LoadAST$2=2/4 t.ErrorList/5 e.Tokens$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tokens$a as range 2
  //DEBUG: t.ErrorList: 5
  //DEBUG: e.Tokens$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & SR-ParseProgram/4 AsIs: t.ErrorList/5 AsIs: e.Tokens$a/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_SRm_ParseProgram]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_LoadAST_S2A2("LoadAST$2=2", COOKIE1_, COOKIE2_, func_gen_LoadAST_S2A2);


static refalrts::FnResult func_gen_LoadAST_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & LoadAST$2=1/4 (/7 e.SrcName/5 )/8 e.Tokens/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.SrcName as range 5
  // closed e.Tokens as range 2
  //DEBUG: e.SrcName: 5
  //DEBUG: e.Tokens: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & LoadAST$2=2/10 </11 Tile{ HalfReuse: & FilterLexerMessages/0 HalfReuse: </4 HalfReuse: & EL-Create/7 AsIs: e.SrcName/5 HalfReuse: >/8 AsIs: e.Tokens/2 AsIs: >/1 } >/12 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_LoadAST_S2A2]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::reinit_name(context[0], functions[efunc_FilterLexerMessages]);
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_ELm_Create]);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_LoadAST_S2A1("LoadAST$2=1", COOKIE1_, COOKIE2_, func_gen_LoadAST_S2A1);


static refalrts::FnResult func_LoadAST(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & LoadAST/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & LoadAST/4 t.new1/5 s.new2/7 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & LoadAST/4 t.Config/5 # R5/7 e.SrcName/8 >/1
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_R5], context[7] ) )
      continue;
    // closed e.SrcName as range 8
    //DEBUG: t.Config: 5
    //DEBUG: e.SrcName: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & LoadAST$1=1/4 AsIs: t.Config/5 HalfReuse: (/7 AsIs: e.SrcName/8 HalfReuse: )/1 } </10 & Config-GetR5Mode/11 t.Config/5/12 >/14 >/15 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_Configm_GetR5Mode]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::update_name(context[4], functions[efunc_gen_LoadAST_S1A1]);
    refalrts::reinit_open_bracket(context[7]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[10] );
    refalrts::link_brackets( context[7], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & LoadAST/4 t.Config/5 # SR/7 e.SrcName/8 >/1
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_SR], context[7] ) )
      continue;
    // closed e.SrcName as range 8
    //DEBUG: t.Config: 5
    //DEBUG: e.SrcName: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} t.Config/5 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & LoadAST$2=1/4 } (/10 e.SrcName/8/11 )/13 </14 Tile{ HalfReuse: & SR-Scan/7 AsIs: e.SrcName/8 AsIs: >/1 } >/15 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[10]);
    refalrts::copy_evar(vm, context[11], context[12], context[8], context[9]);
    refalrts::alloc_close_bracket(vm, context[13]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::update_name(context[4], functions[efunc_gen_LoadAST_S2A1]);
    refalrts::reinit_name(context[7], functions[efunc_SRm_Scan]);
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[14] );
    refalrts::link_brackets( context[10], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[7], context[1] );
    res = refalrts::splice_evar( res, context[10], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & LoadAST/4 t.new4/5 # RSL/7 e.new5/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_RSL], context[7] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 2
  do {
    // </0 & LoadAST/4 t.Config/5 # RSL/7 e.2/8 '.'/13 'r'/12 's'/11 'l'/10 >/1
    context[8] = context[2];
    context[9] = context[3];
    context[10] = refalrts::char_right( 'l', context[8], context[9] );
    if( ! context[10] )
      continue;
    context[11] = refalrts::char_right( 's', context[8], context[9] );
    if( ! context[11] )
      continue;
    context[12] = refalrts::char_right( 'r', context[8], context[9] );
    if( ! context[12] )
      continue;
    context[13] = refalrts::char_right( '.', context[8], context[9] );
    if( ! context[13] )
      continue;
    // closed e.2 as range 8
    //DEBUG: t.Config: 5
    //DEBUG: e.2: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & LoadAST$3:1@2/4 } (/14 e.2/8/15 )/17 Tile{ AsIs: t.Config/5 } </18 & System/19"rl-rsl-decompiler"/20 Tile{ HalfReuse: ' '/7 AsIs: e.2/8 AsIs: '.'/13 AsIs: 'r'/12 AsIs: 's'/11 AsIs: 'l'/10 AsIs: >/1 } </22 & ExistFile/23 e.2/8/24"-decompiled.ref"/26 >/28 >/29 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[14]);
    refalrts::copy_evar(vm, context[15], context[16], context[8], context[9]);
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[19], functions[efunc_System]);
    refalrts::alloc_chars(vm, context[20], context[21], "rl-rsl-decompiler", 17);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_ExistFile]);
    refalrts::copy_evar(vm, context[24], context[25], context[8], context[9]);
    refalrts::alloc_chars(vm, context[26], context[27], "-decompiled.ref", 15);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::update_name(context[4], functions[efunc_gen_LoadAST_S3B1Z2]);
    refalrts::reinit_char(context[7], ' ');
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[18] );
    refalrts::link_brackets( context[14], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[22], context[29] );
    res = refalrts::splice_evar( res, context[7], context[1] );
    res = refalrts::splice_evar( res, context[18], context[21] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[14], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & LoadAST/4 t.Config/5 # RSL/7 e.SrcName/2 >/1
  // closed e.SrcName as range 2
  //DEBUG: t.Config: 5
  //DEBUG: e.SrcName: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & LoadAST$3=1*1/4 AsIs: t.Config/5 HalfReuse: (/7 AsIs: e.SrcName/2 HalfReuse: )/1 } e.SrcName/2/8 >/10 Tile{ ]] }
  refalrts::copy_evar(vm, context[8], context[9], context[2], context[3]);
  refalrts::alloc_close_call(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_gen_LoadAST_S3A1D1]);
  refalrts::reinit_open_bracket(context[7]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_LoadAST("LoadAST", COOKIE1_, COOKIE2_, func_LoadAST);


static refalrts::FnResult func_ResolveIncludes(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 68 elems
  refalrts::Iter context[68];
  refalrts::zeros( context, 68 );
  // </0 & ResolveIncludes/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ResolveIncludes/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & ResolveIncludes/4 t.Config/5 (/9 e.BadIncludes-B/15 (/23 e.IncludeName/21 )/24 e.BadIncludes-E/17 )/10 e.Units-B/25 (/31 t.ErrorList/33 s.Dialect/35 (/38 e.Aliases/36 )/39 (/42 e.ScannedAST/40 )/43 e.AST-B/44 (/50 # Include/52 t.SrcPos/55 e.IncludeName/53 )/51 e.AST-E/46 )/32 e.Units-E/27 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    context[15] = 0;
    context[16] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_left( context[21], context[22], context[17], context[18] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      // closed e.IncludeName as range 21
      // closed e.BadIncludes-E as range 17
      context[25] = 0;
      context[26] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[27] = context[19];
        context[28] = context[20];
        context[29] = 0;
        context[30] = 0;
        context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
        if( ! context[31] )
          continue;
        refalrts::bracket_pointers(context[31], context[32]);
        // closed e.Units-E as range 27
        context[34] = refalrts::tvar_left( context[33], context[29], context[30] );
        if( ! context[34] )
          continue;
        if( ! refalrts::svar_left( context[35], context[29], context[30] ) )
          continue;
        context[36] = 0;
        context[37] = 0;
        context[38] = refalrts::brackets_left( context[36], context[37], context[29], context[30] );
        if( ! context[38] )
          continue;
        refalrts::bracket_pointers(context[38], context[39]);
        context[40] = 0;
        context[41] = 0;
        context[42] = refalrts::brackets_left( context[40], context[41], context[29], context[30] );
        if( ! context[42] )
          continue;
        refalrts::bracket_pointers(context[42], context[43]);
        // closed e.Aliases as range 36
        // closed e.ScannedAST as range 40
        context[44] = 0;
        context[45] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[46] = context[29];
          context[47] = context[30];
          context[48] = 0;
          context[49] = 0;
          context[50] = refalrts::brackets_left( context[48], context[49], context[46], context[47] );
          if( ! context[50] )
            continue;
          refalrts::bracket_pointers(context[50], context[51]);
          context[52] = refalrts::ident_left( identifiers[ident_Include], context[48], context[49] );
          if( ! context[52] )
            continue;
          if( ! refalrts::repeated_evar_right( vm, context[53], context[54], context[21], context[22], context[48], context[49] ) )
            continue;
          // closed e.AST-E as range 46
          context[56] = refalrts::tvar_left( context[55], context[48], context[49] );
          if( ! context[56] )
            continue;
          if( ! refalrts::empty_seq( context[48], context[49] ) )
            continue;
          //DEBUG: t.Config: 5
          //DEBUG: e.BadIncludes-B: 15
          //DEBUG: e.IncludeName: 21
          //DEBUG: e.BadIncludes-E: 17
          //DEBUG: e.Units-B: 25
          //DEBUG: e.Units-E: 27
          //DEBUG: t.ErrorList: 33
          //DEBUG: s.Dialect: 35
          //DEBUG: e.Aliases: 36
          //DEBUG: e.ScannedAST: 40
          //DEBUG: e.AST-B: 44
          //DEBUG: e.AST-E: 46
          //DEBUG: t.SrcPos: 55

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & ResolveIncludes/4 AsIs: t.Config/5 AsIs: (/9 AsIs: e.BadIncludes-B/15 AsIs: (/23 AsIs: e.IncludeName/21 AsIs: )/24 AsIs: e.BadIncludes-E/17 AsIs: )/10 AsIs: e.Units-B/25 AsIs: (/31 } </57 & EL-AddErrorAt/58 Tile{ AsIs: t.ErrorList/33 } t.SrcPos/55/59"Include file \""/61 Tile{ AsIs: e.IncludeName/53 }"\" is not found"/63 >/65 Tile{ AsIs: s.Dialect/35 AsIs: (/38 AsIs: e.Aliases/36 AsIs: )/39 AsIs: (/42 } Tile{ AsIs: e.ScannedAST/40 } Tile{ AsIs: e.AST-B/44 } Tile{ AsIs: (/50 AsIs: # Include/52 AsIs: t.SrcPos/55 } e.IncludeName/53/66 Tile{ AsIs: )/43 } Tile{ AsIs: )/51 AsIs: e.AST-E/46 AsIs: )/32 AsIs: e.Units-E/27 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[57]);
          refalrts::alloc_name(vm, context[58], functions[efunc_ELm_AddErrorAt]);
          refalrts::copy_evar(vm, context[59], context[60], context[55], context[56]);
          refalrts::alloc_chars(vm, context[61], context[62], "Include file \"", 14);
          refalrts::alloc_chars(vm, context[63], context[64], "\" is not found", 14);
          refalrts::alloc_close_call(vm, context[65]);
          refalrts::copy_evar(vm, context[66], context[67], context[53], context[54]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[31], context[32] );
          refalrts::link_brackets( context[42], context[51] );
          refalrts::link_brackets( context[50], context[43] );
          refalrts::link_brackets( context[38], context[39] );
          refalrts::push_stack( vm, context[65] );
          refalrts::push_stack( vm, context[57] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::link_brackets( context[23], context[24] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[51];
          res = refalrts::splice_elem( res, context[43] );
          res = refalrts::splice_evar( res, context[66], context[67] );
          res = refalrts::splice_evar( res, context[50], context[56] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[40], context[41] );
          res = refalrts::splice_evar( res, context[35], context[42] );
          res = refalrts::splice_evar( res, context[63], context[65] );
          res = refalrts::splice_evar( res, context[53], context[54] );
          res = refalrts::splice_evar( res, context[59], context[62] );
          res = refalrts::splice_evar( res, context[33], context[34] );
          res = refalrts::splice_evar( res, context[57], context[58] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[44], context[45], context[29], context[30] ) );
      } while ( refalrts::open_evar_advance( context[25], context[26], context[19], context[20] ) );
    } while ( refalrts::open_evar_advance( context[15], context[16], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ResolveIncludes/4 t.Config/5 (/9 e.BadIncludes/11 )/10 e.Units-B/15 (/21 t.ErrorList/23 s.Dialect/25 (/28 e.Aliases/26 )/29 (/32 e.ScannedAST/30 )/33 e.AST-B/34 (/40 # Include/42 t.SrcPos/43 e.IncludeName/38 )/41 e.AST-E/36 )/22 e.Units-E/17 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.BadIncludes as range 11
    context[15] = 0;
    context[16] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[17] = context[13];
      context[18] = context[14];
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.Units-E as range 17
      context[24] = refalrts::tvar_left( context[23], context[19], context[20] );
      if( ! context[24] )
        continue;
      if( ! refalrts::svar_left( context[25], context[19], context[20] ) )
        continue;
      context[26] = 0;
      context[27] = 0;
      context[28] = refalrts::brackets_left( context[26], context[27], context[19], context[20] );
      if( ! context[28] )
        continue;
      refalrts::bracket_pointers(context[28], context[29]);
      context[30] = 0;
      context[31] = 0;
      context[32] = refalrts::brackets_left( context[30], context[31], context[19], context[20] );
      if( ! context[32] )
        continue;
      refalrts::bracket_pointers(context[32], context[33]);
      // closed e.Aliases as range 26
      // closed e.ScannedAST as range 30
      context[34] = 0;
      context[35] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[36] = context[19];
        context[37] = context[20];
        context[38] = 0;
        context[39] = 0;
        context[40] = refalrts::brackets_left( context[38], context[39], context[36], context[37] );
        if( ! context[40] )
          continue;
        refalrts::bracket_pointers(context[40], context[41]);
        context[42] = refalrts::ident_left( identifiers[ident_Include], context[38], context[39] );
        if( ! context[42] )
          continue;
        // closed e.AST-E as range 36
        context[44] = refalrts::tvar_left( context[43], context[38], context[39] );
        if( ! context[44] )
          continue;
        // closed e.IncludeName as range 38
        //DEBUG: t.Config: 5
        //DEBUG: e.BadIncludes: 11
        //DEBUG: e.Units-B: 15
        //DEBUG: e.Units-E: 17
        //DEBUG: t.ErrorList: 23
        //DEBUG: s.Dialect: 25
        //DEBUG: e.Aliases: 26
        //DEBUG: e.ScannedAST: 30
        //DEBUG: e.AST-B: 34
        //DEBUG: e.AST-E: 36
        //DEBUG: t.SrcPos: 43
        //DEBUG: e.IncludeName: 38

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & ResolveIncludes-CheckAlias/4 AsIs: t.Config/5 AsIs: (/9 AsIs: e.BadIncludes/11 AsIs: )/10 } (/45 Tile{ AsIs: e.Units-B/15 } Tile{ AsIs: )/33 } (/46 Tile{ AsIs: (/21 AsIs: t.ErrorList/23 AsIs: s.Dialect/25 AsIs: (/28 AsIs: e.Aliases/26 AsIs: )/29 AsIs: (/32 } Tile{ AsIs: e.ScannedAST/30 } Tile{ AsIs: e.AST-B/34 } Tile{ AsIs: (/40 AsIs: # Include/42 AsIs: t.SrcPos/43 AsIs: e.IncludeName/38 AsIs: )/41 } Tile{ AsIs: )/22 } Tile{ AsIs: e.AST-E/36 } )/47 )/48 (/49 Tile{ AsIs: e.Units-E/17 } )/50 (/51 e.IncludeName/38/52 )/54 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[45]);
        refalrts::alloc_open_bracket(vm, context[46]);
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::alloc_close_bracket(vm, context[48]);
        refalrts::alloc_open_bracket(vm, context[49]);
        refalrts::alloc_close_bracket(vm, context[50]);
        refalrts::alloc_open_bracket(vm, context[51]);
        refalrts::copy_evar(vm, context[52], context[53], context[38], context[39]);
        refalrts::alloc_close_bracket(vm, context[54]);
        refalrts::update_name(context[4], functions[efunc_ResolveIncludesm_CheckAlias]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[51], context[54] );
        refalrts::link_brackets( context[49], context[50] );
        refalrts::link_brackets( context[46], context[48] );
        refalrts::link_brackets( context[21], context[47] );
        refalrts::link_brackets( context[32], context[22] );
        refalrts::link_brackets( context[40], context[41] );
        refalrts::link_brackets( context[28], context[29] );
        refalrts::link_brackets( context[45], context[33] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[50], context[54] );
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[47], context[49] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_elem( res, context[22] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_evar( res, context[21], context[32] );
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_elem( res, context[33] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_elem( res, context[45] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[34], context[35], context[19], context[20] ) );
    } while ( refalrts::open_evar_advance( context[15], context[16], context[13], context[14] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ResolveIncludes/4 t.Config/5 (/9 e.BadIncludes/7 )/10 e.Units/2 >/1
  // closed e.BadIncludes as range 7
  // closed e.Units as range 2
  //DEBUG: t.Config: 5
  //DEBUG: e.BadIncludes: 7
  //DEBUG: e.Units: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & ResolveIncludes/4 t.Config/5 (/9 e.BadIncludes/7 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & Map@1/10 AsIs: e.Units/2 AsIs: >/1 ]] }
  refalrts::reinit_name(context[10], functions[efunc_gen_Map_Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[10];
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ResolveIncludes("ResolveIncludes", COOKIE1_, COOKIE2_, func_ResolveIncludes);


static refalrts::FnResult func_ResolveIncludesm_CheckAlias(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 59 elems
  refalrts::Iter context[59];
  refalrts::zeros( context, 59 );
  // </0 & ResolveIncludes-CheckAlias/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ResolveIncludes-CheckAlias/4 t.new1/9 (/13 e.new2/11 )/14 e.new3/2 (/7 e.new4/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new4 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new2 as range 11
  // closed e.new3 as range 2
  do {
    // </0 & ResolveIncludes-CheckAlias/4 t.Config/9 (/13 e.BadIncludes/15 )/14 e.Groups-B/21 (/27 e.Units-B/29 (/35 t.ErrorList/37 s.Dialect/39 (/42 e.Aliases-B/48 (/54 e.IncludeName/56 )/55 e.Aliases-E/50 )/43 (/46 e.ScannedAST/44 )/47 e.NotScannedAST/33 )/36 e.Units-E/31 )/28 e.Groups-E/23 (/7 e.IncludeName/19 )/8 >/1
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = context[5];
    context[20] = context[6];
    // closed e.BadIncludes as range 15
    // closed e.IncludeName as range 19
    context[21] = 0;
    context[22] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[23] = context[17];
      context[24] = context[18];
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      // closed e.Groups-E as range 23
      context[29] = 0;
      context[30] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[31] = context[25];
        context[32] = context[26];
        context[33] = 0;
        context[34] = 0;
        context[35] = refalrts::brackets_left( context[33], context[34], context[31], context[32] );
        if( ! context[35] )
          continue;
        refalrts::bracket_pointers(context[35], context[36]);
        // closed e.Units-E as range 31
        context[38] = refalrts::tvar_left( context[37], context[33], context[34] );
        if( ! context[38] )
          continue;
        if( ! refalrts::svar_left( context[39], context[33], context[34] ) )
          continue;
        context[40] = 0;
        context[41] = 0;
        context[42] = refalrts::brackets_left( context[40], context[41], context[33], context[34] );
        if( ! context[42] )
          continue;
        refalrts::bracket_pointers(context[42], context[43]);
        context[44] = 0;
        context[45] = 0;
        context[46] = refalrts::brackets_left( context[44], context[45], context[33], context[34] );
        if( ! context[46] )
          continue;
        refalrts::bracket_pointers(context[46], context[47]);
        // closed e.ScannedAST as range 44
        // closed e.NotScannedAST as range 33
        context[48] = 0;
        context[49] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[50] = context[40];
          context[51] = context[41];
          context[52] = 0;
          context[53] = 0;
          context[54] = refalrts::brackets_left( context[52], context[53], context[50], context[51] );
          if( ! context[54] )
            continue;
          refalrts::bracket_pointers(context[54], context[55]);
          if( ! refalrts::repeated_evar_left( vm, context[56], context[57], context[19], context[20], context[52], context[53] ) )
            continue;
          if( ! refalrts::empty_seq( context[52], context[53] ) )
            continue;
          // closed e.Aliases-E as range 50
          //DEBUG: t.Config: 9
          //DEBUG: e.BadIncludes: 15
          //DEBUG: e.IncludeName: 19
          //DEBUG: e.Groups-B: 21
          //DEBUG: e.Groups-E: 23
          //DEBUG: e.Units-B: 29
          //DEBUG: e.Units-E: 31
          //DEBUG: t.ErrorList: 37
          //DEBUG: s.Dialect: 39
          //DEBUG: e.ScannedAST: 44
          //DEBUG: e.NotScannedAST: 33
          //DEBUG: e.Aliases-B: 48
          //DEBUG: e.Aliases-E: 50

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.IncludeName/19 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & ResolveIncludes/4 AsIs: t.Config/9 AsIs: (/13 } Tile{ AsIs: e.BadIncludes/15 } Tile{ AsIs: )/8 } </58 Tile{ HalfReuse: & Map@2/14 AsIs: e.Groups-B/21 AsIs: (/27 AsIs: e.Units-B/29 AsIs: (/35 AsIs: t.ErrorList/37 AsIs: s.Dialect/39 AsIs: (/42 AsIs: e.Aliases-B/48 AsIs: (/54 AsIs: e.IncludeName/56 AsIs: )/55 AsIs: e.Aliases-E/50 AsIs: )/43 AsIs: (/46 AsIs: e.ScannedAST/44 AsIs: )/47 AsIs: e.NotScannedAST/33 AsIs: )/36 AsIs: e.Units-E/31 AsIs: )/28 AsIs: e.Groups-E/23 HalfReuse: >/7 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[58]);
          refalrts::update_name(context[4], functions[efunc_ResolveIncludes]);
          refalrts::reinit_name(context[14], functions[efunc_gen_Map_Z2]);
          refalrts::reinit_close_call(context[7]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[7] );
          refalrts::push_stack( vm, context[58] );
          refalrts::link_brackets( context[27], context[28] );
          refalrts::link_brackets( context[35], context[36] );
          refalrts::link_brackets( context[46], context[47] );
          refalrts::link_brackets( context[42], context[43] );
          refalrts::link_brackets( context[54], context[55] );
          refalrts::link_brackets( context[13], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[14], context[7] );
          res = refalrts::splice_elem( res, context[58] );
          res = refalrts::splice_elem( res, context[8] );
          res = refalrts::splice_evar( res, context[15], context[16] );
          refalrts::splice_to_freelist_open( vm, context[13], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[48], context[49], context[40], context[41] ) );
      } while ( refalrts::open_evar_advance( context[29], context[30], context[25], context[26] ) );
    } while ( refalrts::open_evar_advance( context[21], context[22], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ResolveIncludes-CheckAlias/4 t.Config/9 (/13 e.BadIncludes/11 )/14 (/17 e.Units-B/15 )/18 (/21 t.CheckedUnit/27 )/22 (/25 e.Units-E/23 )/26 (/7 e.IncludeName/5 )/8 >/1
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.BadIncludes as range 11
  // closed e.Units-B as range 15
  // closed e.Units-E as range 23
  // closed e.IncludeName as range 5
  context[28] = refalrts::tvar_left( context[27], context[19], context[20] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[19], context[20] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Config: 9
  //DEBUG: e.BadIncludes: 11
  //DEBUG: e.Units-B: 15
  //DEBUG: e.Units-E: 23
  //DEBUG: e.IncludeName: 5
  //DEBUG: t.CheckedUnit: 27

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ResolveIncludes-CheckValid/4 AsIs: t.Config/9 AsIs: (/13 AsIs: e.BadIncludes/11 AsIs: )/14 AsIs: (/17 AsIs: e.Units-B/15 AsIs: )/18 AsIs: (/21 AsIs: t.CheckedUnit/27 AsIs: )/22 AsIs: (/25 AsIs: e.Units-E/23 AsIs: )/26 AsIs: (/7 AsIs: e.IncludeName/5 AsIs: )/8 HalfReuse: </1 } & FindInclude/29 (/30 </31 & Config-GetSearchFolders/32 t.Config/9/33 >/35 )/36 e.IncludeName/5/37 >/39 >/40 Tile{ ]] }
  refalrts::alloc_name(vm, context[29], functions[efunc_FindInclude]);
  refalrts::alloc_open_bracket(vm, context[30]);
  refalrts::alloc_open_call(vm, context[31]);
  refalrts::alloc_name(vm, context[32], functions[efunc_Configm_GetSearchFolders]);
  refalrts::copy_evar(vm, context[33], context[34], context[9], context[10]);
  refalrts::alloc_close_call(vm, context[35]);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::copy_evar(vm, context[37], context[38], context[5], context[6]);
  refalrts::alloc_close_call(vm, context[39]);
  refalrts::alloc_close_call(vm, context[40]);
  refalrts::update_name(context[4], functions[efunc_ResolveIncludesm_CheckValid]);
  refalrts::reinit_open_call(context[1]);
  refalrts::push_stack( vm, context[40] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[39] );
  refalrts::push_stack( vm, context[1] );
  refalrts::link_brackets( context[30], context[36] );
  refalrts::push_stack( vm, context[35] );
  refalrts::push_stack( vm, context[31] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[29], context[40] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ResolveIncludesm_CheckAlias("ResolveIncludes-CheckAlias", COOKIE1_, COOKIE2_, func_ResolveIncludesm_CheckAlias);


static refalrts::FnResult func_ResolveIncludesm_CheckValid(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 96 elems
  refalrts::Iter context[96];
  refalrts::zeros( context, 96 );
  // </0 & ResolveIncludes-CheckValid/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ResolveIncludes-CheckValid/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 t.new4/28 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 s.new7/27 e.new8/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  if( ! refalrts::svar_left( context[27], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new8 as range 2
  context[29] = refalrts::tvar_left( context[28], context[15], context[16] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[15], context[16] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ResolveIncludes-CheckValid/4 t.new9/5 (/9 e.new12/30 )/10 (/13 e.new13/32 )/14 (/17 t.new14/28 )/18 (/21 e.new15/34 )/22 (/25 e.new16/36 )/26 # Success/27 s.new10/40 e.new11/38 >/1
    context[30] = context[7];
    context[31] = context[8];
    context[32] = context[11];
    context[33] = context[12];
    context[34] = context[19];
    context[35] = context[20];
    context[36] = context[23];
    context[37] = context[24];
    context[38] = context[2];
    context[39] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Success], context[27] ) )
      continue;
    // closed e.new12 as range 30
    // closed e.new13 as range 32
    // closed e.new15 as range 34
    // closed e.new16 as range 36
    if( ! refalrts::svar_left( context[40], context[38], context[39] ) )
      continue;
    // closed e.new11 as range 38
    do {
      // </0 & ResolveIncludes-CheckValid/4 t.Config/5 (/9 e.BadIncludes/41 )/10 (/13 e.Units-B/43 )/14 (/17 t.CheckedUnit/28 )/18 (/21 e.Units-E/45 )/22 (/25 e.IncludeName/47 )/26 # Success/27 # R5/40 e.FullPath/49 >/1
      context[41] = context[30];
      context[42] = context[31];
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      if( ! refalrts::ident_term( identifiers[ident_R5], context[40] ) )
        continue;
      // closed e.BadIncludes as range 41
      // closed e.Units-B as range 43
      // closed e.Units-E as range 45
      // closed e.IncludeName as range 47
      // closed e.FullPath as range 49
      //DEBUG: t.Config: 5
      //DEBUG: t.CheckedUnit: 28
      //DEBUG: e.BadIncludes: 41
      //DEBUG: e.Units-B: 43
      //DEBUG: e.Units-E: 45
      //DEBUG: e.IncludeName: 47
      //DEBUG: e.FullPath: 49

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ResolveIncludes-CheckEqualAST/4 AsIs: t.Config/5 AsIs: (/9 AsIs: e.BadIncludes/41 AsIs: )/10 AsIs: (/13 AsIs: e.Units-B/43 AsIs: )/14 AsIs: (/17 AsIs: t.CheckedUnit/28 AsIs: )/18 AsIs: (/21 AsIs: e.Units-E/45 AsIs: )/22 HalfReuse: # R5/25 } (/51 Tile{ AsIs: e.IncludeName/47 } Tile{ HalfReuse: )/27 HalfReuse: (/40 AsIs: e.FullPath/49 HalfReuse: )/1 } (/52 </53 & LoadAST$1=1/54 t.Config/5/55 (/57 e.FullPath/49/58 Tile{ AsIs: )/26 } </60 & Config-GetR5Mode/61 t.Config/5/62 >/64 >/65 )/66 >/67 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::alloc_open_bracket(vm, context[52]);
      refalrts::alloc_open_call(vm, context[53]);
      refalrts::alloc_name(vm, context[54], functions[efunc_gen_LoadAST_S1A1]);
      refalrts::copy_evar(vm, context[55], context[56], context[5], context[6]);
      refalrts::alloc_open_bracket(vm, context[57]);
      refalrts::copy_evar(vm, context[58], context[59], context[49], context[50]);
      refalrts::alloc_open_call(vm, context[60]);
      refalrts::alloc_name(vm, context[61], functions[efunc_Configm_GetR5Mode]);
      refalrts::copy_evar(vm, context[62], context[63], context[5], context[6]);
      refalrts::alloc_close_call(vm, context[64]);
      refalrts::alloc_close_call(vm, context[65]);
      refalrts::alloc_close_bracket(vm, context[66]);
      refalrts::alloc_close_call(vm, context[67]);
      refalrts::update_name(context[4], functions[efunc_ResolveIncludesm_CheckEqualAST]);
      refalrts::reinit_ident(context[25], identifiers[ident_R5]);
      refalrts::reinit_close_bracket(context[27]);
      refalrts::reinit_open_bracket(context[40]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::push_stack( vm, context[67] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[52], context[66] );
      refalrts::push_stack( vm, context[65] );
      refalrts::push_stack( vm, context[53] );
      refalrts::push_stack( vm, context[64] );
      refalrts::push_stack( vm, context[60] );
      refalrts::link_brackets( context[57], context[26] );
      refalrts::link_brackets( context[40], context[1] );
      refalrts::link_brackets( context[51], context[27] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[60], context[67] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[58], context[59] );
      res = refalrts::splice_evar( res, context[52], context[57] );
      res = refalrts::splice_evar( res, context[27], context[1] );
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_elem( res, context[51] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ResolveIncludes-CheckValid/4 t.Config/5 (/9 e.BadIncludes/41 )/10 (/13 e.Units-B/43 )/14 (/17 t.CheckedUnit/28 )/18 (/21 e.Units-E/45 )/22 (/25 e.IncludeName/47 )/26 # Success/27 # SR/40 e.FullPath/49 >/1
      context[41] = context[30];
      context[42] = context[31];
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      if( ! refalrts::ident_term( identifiers[ident_SR], context[40] ) )
        continue;
      // closed e.BadIncludes as range 41
      // closed e.Units-B as range 43
      // closed e.Units-E as range 45
      // closed e.IncludeName as range 47
      // closed e.FullPath as range 49
      //DEBUG: t.Config: 5
      //DEBUG: t.CheckedUnit: 28
      //DEBUG: e.BadIncludes: 41
      //DEBUG: e.Units-B: 43
      //DEBUG: e.Units-E: 45
      //DEBUG: e.IncludeName: 47
      //DEBUG: e.FullPath: 49

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ResolveIncludes-CheckEqualAST/4 AsIs: t.Config/5 AsIs: (/9 AsIs: e.BadIncludes/41 AsIs: )/10 AsIs: (/13 AsIs: e.Units-B/43 AsIs: )/14 AsIs: (/17 AsIs: t.CheckedUnit/28 AsIs: )/18 AsIs: (/21 AsIs: e.Units-E/45 AsIs: )/22 HalfReuse: # SR/25 } (/51 Tile{ AsIs: e.IncludeName/47 } )/52 (/53 e.FullPath/49/54 )/56 (/57 </58 & LoadAST$2=1/59 (/60 e.FullPath/49/61 Tile{ AsIs: )/26 HalfReuse: </27 HalfReuse: & SR-Scan/40 AsIs: e.FullPath/49 AsIs: >/1 } >/63 )/64 >/65 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::alloc_close_bracket(vm, context[52]);
      refalrts::alloc_open_bracket(vm, context[53]);
      refalrts::copy_evar(vm, context[54], context[55], context[49], context[50]);
      refalrts::alloc_close_bracket(vm, context[56]);
      refalrts::alloc_open_bracket(vm, context[57]);
      refalrts::alloc_open_call(vm, context[58]);
      refalrts::alloc_name(vm, context[59], functions[efunc_gen_LoadAST_S2A1]);
      refalrts::alloc_open_bracket(vm, context[60]);
      refalrts::copy_evar(vm, context[61], context[62], context[49], context[50]);
      refalrts::alloc_close_call(vm, context[63]);
      refalrts::alloc_close_bracket(vm, context[64]);
      refalrts::alloc_close_call(vm, context[65]);
      refalrts::update_name(context[4], functions[efunc_ResolveIncludesm_CheckEqualAST]);
      refalrts::reinit_ident(context[25], identifiers[ident_SR]);
      refalrts::reinit_open_call(context[27]);
      refalrts::reinit_name(context[40], functions[efunc_SRm_Scan]);
      refalrts::push_stack( vm, context[65] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[57], context[64] );
      refalrts::push_stack( vm, context[63] );
      refalrts::push_stack( vm, context[58] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[27] );
      refalrts::link_brackets( context[60], context[26] );
      refalrts::link_brackets( context[53], context[56] );
      refalrts::link_brackets( context[51], context[52] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[63], context[65] );
      res = refalrts::splice_evar( res, context[26], context[1] );
      res = refalrts::splice_evar( res, context[61], context[62] );
      res = refalrts::splice_evar( res, context[52], context[60] );
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_elem( res, context[51] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & ResolveIncludes-CheckValid/4 t.new17/5 (/9 e.new19/41 )/10 (/13 e.new20/43 )/14 (/17 t.new21/28 )/18 (/21 e.new22/45 )/22 (/25 e.new23/47 )/26 # Success/27 # RSL/40 e.new18/49 >/1
      context[41] = context[30];
      context[42] = context[31];
      context[43] = context[32];
      context[44] = context[33];
      context[45] = context[34];
      context[46] = context[35];
      context[47] = context[36];
      context[48] = context[37];
      context[49] = context[38];
      context[50] = context[39];
      if( ! refalrts::ident_term( identifiers[ident_RSL], context[40] ) )
        continue;
      // closed e.new19 as range 41
      // closed e.new20 as range 43
      // closed e.new22 as range 45
      // closed e.new23 as range 47
      // closed e.new18 as range 49
      do {
        // </0 & ResolveIncludes-CheckValid/4 t.Config/5 (/9 e.BadIncludes/51 )/10 (/13 e.Units-B/53 )/14 (/17 t.CheckedUnit/28 )/18 (/21 e.Units-E/55 )/22 (/25 e.IncludeName/57 )/26 # Success/27 # RSL/40 e.2/59 '.'/64 'r'/63 's'/62 'l'/61 >/1
        context[51] = context[41];
        context[52] = context[42];
        context[53] = context[43];
        context[54] = context[44];
        context[55] = context[45];
        context[56] = context[46];
        context[57] = context[47];
        context[58] = context[48];
        context[59] = context[49];
        context[60] = context[50];
        context[61] = refalrts::char_right( 'l', context[59], context[60] );
        if( ! context[61] )
          continue;
        context[62] = refalrts::char_right( 's', context[59], context[60] );
        if( ! context[62] )
          continue;
        context[63] = refalrts::char_right( 'r', context[59], context[60] );
        if( ! context[63] )
          continue;
        context[64] = refalrts::char_right( '.', context[59], context[60] );
        if( ! context[64] )
          continue;
        // closed e.BadIncludes as range 51
        // closed e.Units-B as range 53
        // closed e.Units-E as range 55
        // closed e.IncludeName as range 57
        // closed e.2 as range 59
        //DEBUG: t.Config: 5
        //DEBUG: t.CheckedUnit: 28
        //DEBUG: e.BadIncludes: 51
        //DEBUG: e.Units-B: 53
        //DEBUG: e.Units-E: 55
        //DEBUG: e.IncludeName: 57
        //DEBUG: e.2: 59

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & ResolveIncludes-CheckEqualAST/4 AsIs: t.Config/5 AsIs: (/9 AsIs: e.BadIncludes/51 AsIs: )/10 AsIs: (/13 AsIs: e.Units-B/53 AsIs: )/14 AsIs: (/17 AsIs: t.CheckedUnit/28 AsIs: )/18 AsIs: (/21 AsIs: e.Units-E/55 AsIs: )/22 HalfReuse: # RSL/25 } (/65 Tile{ AsIs: e.IncludeName/57 } )/66 (/67 e.2/59/68".rsl"/70 )/72 (/73 </74 & LoadAST$3:1@2/75 (/76 e.2/59/77 )/79 t.Config/5/80 </82 & System/83"rl-rsl-decompil"/84 Tile{ HalfReuse: 'e'/26 HalfReuse: 'r'/27 HalfReuse: ' '/40 AsIs: e.2/59 AsIs: '.'/64 AsIs: 'r'/63 AsIs: 's'/62 AsIs: 'l'/61 AsIs: >/1 } </86 & ExistFile/87 e.2/59/88"-decompiled.ref"/90 >/92 >/93 )/94 >/95 Tile{ ]] }
        refalrts::alloc_open_bracket(vm, context[65]);
        refalrts::alloc_close_bracket(vm, context[66]);
        refalrts::alloc_open_bracket(vm, context[67]);
        refalrts::copy_evar(vm, context[68], context[69], context[59], context[60]);
        refalrts::alloc_chars(vm, context[70], context[71], ".rsl", 4);
        refalrts::alloc_close_bracket(vm, context[72]);
        refalrts::alloc_open_bracket(vm, context[73]);
        refalrts::alloc_open_call(vm, context[74]);
        refalrts::alloc_name(vm, context[75], functions[efunc_gen_LoadAST_S3B1Z2]);
        refalrts::alloc_open_bracket(vm, context[76]);
        refalrts::copy_evar(vm, context[77], context[78], context[59], context[60]);
        refalrts::alloc_close_bracket(vm, context[79]);
        refalrts::copy_evar(vm, context[80], context[81], context[5], context[6]);
        refalrts::alloc_open_call(vm, context[82]);
        refalrts::alloc_name(vm, context[83], functions[efunc_System]);
        refalrts::alloc_chars(vm, context[84], context[85], "rl-rsl-decompil", 15);
        refalrts::alloc_open_call(vm, context[86]);
        refalrts::alloc_name(vm, context[87], functions[efunc_ExistFile]);
        refalrts::copy_evar(vm, context[88], context[89], context[59], context[60]);
        refalrts::alloc_chars(vm, context[90], context[91], "-decompiled.ref", 15);
        refalrts::alloc_close_call(vm, context[92]);
        refalrts::alloc_close_call(vm, context[93]);
        refalrts::alloc_close_bracket(vm, context[94]);
        refalrts::alloc_close_call(vm, context[95]);
        refalrts::update_name(context[4], functions[efunc_ResolveIncludesm_CheckEqualAST]);
        refalrts::reinit_ident(context[25], identifiers[ident_RSL]);
        refalrts::reinit_char(context[26], 'e');
        refalrts::reinit_char(context[27], 'r');
        refalrts::reinit_char(context[40], ' ');
        refalrts::push_stack( vm, context[95] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[73], context[94] );
        refalrts::push_stack( vm, context[93] );
        refalrts::push_stack( vm, context[74] );
        refalrts::push_stack( vm, context[92] );
        refalrts::push_stack( vm, context[86] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[82] );
        refalrts::link_brackets( context[76], context[79] );
        refalrts::link_brackets( context[67], context[72] );
        refalrts::link_brackets( context[65], context[66] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[86], context[95] );
        res = refalrts::splice_evar( res, context[26], context[1] );
        res = refalrts::splice_evar( res, context[66], context[85] );
        res = refalrts::splice_evar( res, context[57], context[58] );
        res = refalrts::splice_elem( res, context[65] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & ResolveIncludes-CheckValid/4 t.Config/5 (/9 e.BadIncludes/51 )/10 (/13 e.Units-B/53 )/14 (/17 t.CheckedUnit/28 )/18 (/21 e.Units-E/55 )/22 (/25 e.IncludeName/57 )/26 # Success/27 # RSL/40 e.FullPath/59 >/1
      context[51] = context[41];
      context[52] = context[42];
      context[53] = context[43];
      context[54] = context[44];
      context[55] = context[45];
      context[56] = context[46];
      context[57] = context[47];
      context[58] = context[48];
      context[59] = context[49];
      context[60] = context[50];
      // closed e.BadIncludes as range 51
      // closed e.Units-B as range 53
      // closed e.Units-E as range 55
      // closed e.IncludeName as range 57
      // closed e.FullPath as range 59
      //DEBUG: t.Config: 5
      //DEBUG: t.CheckedUnit: 28
      //DEBUG: e.BadIncludes: 51
      //DEBUG: e.Units-B: 53
      //DEBUG: e.Units-E: 55
      //DEBUG: e.IncludeName: 57
      //DEBUG: e.FullPath: 59

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ResolveIncludes-CheckEqualAST/4 AsIs: t.Config/5 AsIs: (/9 AsIs: e.BadIncludes/51 AsIs: )/10 AsIs: (/13 AsIs: e.Units-B/53 AsIs: )/14 AsIs: (/17 AsIs: t.CheckedUnit/28 AsIs: )/18 AsIs: (/21 AsIs: e.Units-E/55 AsIs: )/22 HalfReuse: # RSL/25 } (/61 Tile{ AsIs: e.IncludeName/57 } Tile{ AsIs: )/26 HalfReuse: (/27 } e.FullPath/59/62 )/64 (/65 </66 & LoadAST$3=1*1/67 t.Config/5/68 (/70 e.FullPath/59/71 Tile{ HalfReuse: )/40 AsIs: e.FullPath/59 AsIs: >/1 } )/73 >/74 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[61]);
      refalrts::copy_evar(vm, context[62], context[63], context[59], context[60]);
      refalrts::alloc_close_bracket(vm, context[64]);
      refalrts::alloc_open_bracket(vm, context[65]);
      refalrts::alloc_open_call(vm, context[66]);
      refalrts::alloc_name(vm, context[67], functions[efunc_gen_LoadAST_S3A1D1]);
      refalrts::copy_evar(vm, context[68], context[69], context[5], context[6]);
      refalrts::alloc_open_bracket(vm, context[70]);
      refalrts::copy_evar(vm, context[71], context[72], context[59], context[60]);
      refalrts::alloc_close_bracket(vm, context[73]);
      refalrts::alloc_close_call(vm, context[74]);
      refalrts::update_name(context[4], functions[efunc_ResolveIncludesm_CheckEqualAST]);
      refalrts::reinit_ident(context[25], identifiers[ident_RSL]);
      refalrts::reinit_open_bracket(context[27]);
      refalrts::reinit_close_bracket(context[40]);
      refalrts::push_stack( vm, context[74] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[65], context[73] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[66] );
      refalrts::link_brackets( context[70], context[40] );
      refalrts::link_brackets( context[27], context[64] );
      refalrts::link_brackets( context[61], context[26] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[73], context[74] );
      res = refalrts::splice_evar( res, context[40], context[1] );
      res = refalrts::splice_evar( res, context[71], context[72] );
      res = refalrts::splice_evar( res, context[64], context[70] );
      res = refalrts::splice_evar( res, context[62], context[63] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[57], context[58] );
      res = refalrts::splice_elem( res, context[61] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & ResolveIncludes-CheckValid/4 t.Config/5 (/9 e.BadIncludes/41 )/10 (/13 e.Units-B/43 )/14 (/17 t.CheckedUnit/28 )/18 (/21 e.Units-E/45 )/22 (/25 e.IncludeName/47 )/26 # Success/27 s.Dialect/40 e.FullPath/49 >/1
    context[41] = context[30];
    context[42] = context[31];
    context[43] = context[32];
    context[44] = context[33];
    context[45] = context[34];
    context[46] = context[35];
    context[47] = context[36];
    context[48] = context[37];
    context[49] = context[38];
    context[50] = context[39];
    // closed e.BadIncludes as range 41
    // closed e.Units-B as range 43
    // closed e.Units-E as range 45
    // closed e.IncludeName as range 47
    // closed e.FullPath as range 49
    //DEBUG: t.Config: 5
    //DEBUG: t.CheckedUnit: 28
    //DEBUG: s.Dialect: 40
    //DEBUG: e.BadIncludes: 41
    //DEBUG: e.Units-B: 43
    //DEBUG: e.Units-E: 45
    //DEBUG: e.IncludeName: 47
    //DEBUG: e.FullPath: 49

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ResolveIncludes-CheckEqualAST/4 AsIs: t.Config/5 AsIs: (/9 AsIs: e.BadIncludes/41 AsIs: )/10 AsIs: (/13 AsIs: e.Units-B/43 AsIs: )/14 AsIs: (/17 AsIs: t.CheckedUnit/28 AsIs: )/18 AsIs: (/21 AsIs: e.Units-E/45 AsIs: )/22 HalfReuse: s.Dialect40 /25 } (/51 Tile{ AsIs: e.IncludeName/47 } )/52 (/53 e.FullPath/49/54 Tile{ AsIs: )/26 HalfReuse: (/27 } </56 & LoadAST*4/57 t.Config/5/58 Tile{ AsIs: s.Dialect/40 AsIs: e.FullPath/49 AsIs: >/1 } )/60 >/61 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[51]);
    refalrts::alloc_close_bracket(vm, context[52]);
    refalrts::alloc_open_bracket(vm, context[53]);
    refalrts::copy_evar(vm, context[54], context[55], context[49], context[50]);
    refalrts::alloc_open_call(vm, context[56]);
    refalrts::alloc_name(vm, context[57], functions[efunc_gen_LoadAST_D4]);
    refalrts::copy_evar(vm, context[58], context[59], context[5], context[6]);
    refalrts::alloc_close_bracket(vm, context[60]);
    refalrts::alloc_close_call(vm, context[61]);
    refalrts::update_name(context[4], functions[efunc_ResolveIncludesm_CheckEqualAST]);
    refalrts::reinit_svar( context[25], context[40] );
    refalrts::reinit_open_bracket(context[27]);
    refalrts::push_stack( vm, context[61] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[27], context[60] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[56] );
    refalrts::link_brackets( context[53], context[26] );
    refalrts::link_brackets( context[51], context[52] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[60], context[61] );
    res = refalrts::splice_evar( res, context[40], context[1] );
    res = refalrts::splice_evar( res, context[56], context[59] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[54], context[55] );
    res = refalrts::splice_evar( res, context[52], context[53] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_elem( res, context[51] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ResolveIncludes-CheckValid/4 t.Config/5 (/9 e.BadIncludes/7 )/10 (/13 e.Units-B/11 )/14 (/17 (/28 t.ErrorList/32 s.Dialect/34 (/37 e.Aliases/35 )/38 (/41 e.ScannedAST/39 (/45 # Include/47 t.SrcPos/50 e.IncludeName/48 )/46 )/42 e.NotScannedAST/30 )/29 )/18 (/21 e.Units-E/19 )/22 (/25 e.IncludeName/23 )/26 # Fails/27 >/1
  context[30] = 0;
  context[31] = 0;
  if( ! refalrts::brackets_term( context[30], context[31], context[28] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::ident_term( identifiers[ident_Fails], context[27] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.BadIncludes as range 7
  // closed e.Units-B as range 11
  // closed e.Units-E as range 19
  // closed e.IncludeName as range 23
  context[33] = refalrts::tvar_left( context[32], context[30], context[31] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[34], context[30], context[31] ) )
    return refalrts::cRecognitionImpossible;
  context[35] = 0;
  context[36] = 0;
  context[37] = refalrts::brackets_left( context[35], context[36], context[30], context[31] );
  if( ! context[37] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[37], context[38]);
  context[39] = 0;
  context[40] = 0;
  context[41] = refalrts::brackets_left( context[39], context[40], context[30], context[31] );
  if( ! context[41] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[41], context[42]);
  context[43] = 0;
  context[44] = 0;
  context[45] = refalrts::brackets_right( context[43], context[44], context[39], context[40] );
  if( ! context[45] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[45], context[46]);
  context[47] = refalrts::ident_left( identifiers[ident_Include], context[43], context[44] );
  if( ! context[47] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::repeated_evar_right( vm, context[48], context[49], context[23], context[24], context[43], context[44] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Aliases as range 35
  // closed e.ScannedAST as range 39
  // closed e.NotScannedAST as range 30
  context[51] = refalrts::tvar_left( context[50], context[43], context[44] );
  if( ! context[51] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[43], context[44] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Config: 5
  //DEBUG: e.BadIncludes: 7
  //DEBUG: e.Units-B: 11
  //DEBUG: e.Units-E: 19
  //DEBUG: e.IncludeName: 23
  //DEBUG: t.ErrorList: 32
  //DEBUG: s.Dialect: 34
  //DEBUG: e.Aliases: 35
  //DEBUG: e.ScannedAST: 39
  //DEBUG: e.NotScannedAST: 30
  //DEBUG: t.SrcPos: 50

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ResolveIncludes/4 AsIs: t.Config/5 AsIs: (/9 AsIs: e.BadIncludes/7 HalfReuse: (/10 } e.IncludeName/48/52 Tile{ AsIs: )/18 } Tile{ HalfReuse: )/13 AsIs: e.Units-B/11 HalfReuse: (/14 HalfReuse: </17 HalfReuse: & EL-AddErrorAt/28 AsIs: t.ErrorList/32 } t.SrcPos/50/54"Inc"/56 Tile{ HalfReuse: 'l'/21 }"ude file"/58 Tile{ HalfReuse: ' '/22 HalfReuse: '\"'/25 AsIs: e.IncludeName/23 HalfReuse: '\"'/26 HalfReuse: ' '/27 HalfReuse: 'i'/1 }"s not found"/60 >/62 Tile{ AsIs: s.Dialect/34 AsIs: (/37 AsIs: e.Aliases/35 AsIs: )/38 AsIs: (/41 AsIs: e.ScannedAST/39 AsIs: (/45 AsIs: # Include/47 AsIs: t.SrcPos/50 AsIs: e.IncludeName/48 AsIs: )/46 AsIs: )/42 AsIs: e.NotScannedAST/30 AsIs: )/29 } Tile{ AsIs: e.Units-E/19 } >/63 Tile{ ]] }
  refalrts::copy_evar(vm, context[52], context[53], context[48], context[49]);
  refalrts::copy_evar(vm, context[54], context[55], context[50], context[51]);
  refalrts::alloc_chars(vm, context[56], context[57], "Inc", 3);
  refalrts::alloc_chars(vm, context[58], context[59], "ude file", 8);
  refalrts::alloc_chars(vm, context[60], context[61], "s not found", 11);
  refalrts::alloc_close_call(vm, context[62]);
  refalrts::alloc_close_call(vm, context[63]);
  refalrts::update_name(context[4], functions[efunc_ResolveIncludes]);
  refalrts::reinit_open_bracket(context[10]);
  refalrts::reinit_close_bracket(context[13]);
  refalrts::reinit_open_bracket(context[14]);
  refalrts::reinit_open_call(context[17]);
  refalrts::reinit_name(context[28], functions[efunc_ELm_AddErrorAt]);
  refalrts::reinit_char(context[21], 'l');
  refalrts::reinit_char(context[22], ' ');
  refalrts::reinit_char(context[25], '\"');
  refalrts::reinit_char(context[26], '\"');
  refalrts::reinit_char(context[27], ' ');
  refalrts::reinit_char(context[1], 'i');
  refalrts::push_stack( vm, context[63] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[14], context[29] );
  refalrts::link_brackets( context[41], context[42] );
  refalrts::link_brackets( context[45], context[46] );
  refalrts::link_brackets( context[37], context[38] );
  refalrts::push_stack( vm, context[62] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[9], context[13] );
  refalrts::link_brackets( context[10], context[18] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[63] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[34], context[29] );
  res = refalrts::splice_evar( res, context[60], context[62] );
  res = refalrts::splice_evar( res, context[22], context[1] );
  res = refalrts::splice_evar( res, context[58], context[59] );
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[54], context[57] );
  res = refalrts::splice_evar( res, context[13], context[33] );
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[52], context[53] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ResolveIncludesm_CheckValid("ResolveIncludes-CheckValid", COOKIE1_, COOKIE2_, func_ResolveIncludesm_CheckValid);


static refalrts::FnResult func_ResolveIncludesm_CheckEqualAST(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 72 elems
  refalrts::Iter context[72];
  refalrts::zeros( context, 72 );
  // </0 & ResolveIncludes-CheckEqualAST/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ResolveIncludes-CheckEqualAST/4 t.new1/17 (/21 e.new2/19 )/22 e.new3/2 s.new4/25 (/15 e.new5/13 )/16 (/11 e.new6/9 )/12 (/7 t.new7/23 e.new8/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new5 as range 13
  // closed e.new6 as range 9
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new2 as range 19
  context[24] = refalrts::tvar_left( context[23], context[5], context[6] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  // closed e.new8 as range 5
  if( ! refalrts::svar_right( context[25], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & ResolveIncludes-CheckEqualAST/4 t.Config/17 (/21 e.BadIncludes/26 )/22 e.Groups-B/36 (/44 e.Units-B/46 (/54 t.ErrorList/56 s.Dialect/58 (/61 e.Aliases/59 )/62 (/65 e.ScannedAST/63 )/66 e.NotScannedAST/52 )/55 e.Units-E/48 )/45 e.Groups-E/38 s.Dialect/25 (/15 e.IncludeName/30 )/16 (/11 e.FullPath/32 )/12 (/7 t.NewErrorList/23 e.ScannedAST/67 e.NotScannedAST/69 )/8 >/1
    context[26] = context[19];
    context[27] = context[20];
    context[28] = context[2];
    context[29] = context[3];
    context[30] = context[13];
    context[31] = context[14];
    context[32] = context[9];
    context[33] = context[10];
    context[34] = context[5];
    context[35] = context[6];
    // closed e.BadIncludes as range 26
    // closed e.IncludeName as range 30
    // closed e.FullPath as range 32
    context[36] = 0;
    context[37] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[38] = context[28];
      context[39] = context[29];
      context[40] = context[34];
      context[41] = context[35];
      context[42] = 0;
      context[43] = 0;
      context[44] = refalrts::brackets_left( context[42], context[43], context[38], context[39] );
      if( ! context[44] )
        continue;
      refalrts::bracket_pointers(context[44], context[45]);
      // closed e.Groups-E as range 38
      context[46] = 0;
      context[47] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[48] = context[42];
        context[49] = context[43];
        context[50] = context[40];
        context[51] = context[41];
        context[52] = 0;
        context[53] = 0;
        context[54] = refalrts::brackets_left( context[52], context[53], context[48], context[49] );
        if( ! context[54] )
          continue;
        refalrts::bracket_pointers(context[54], context[55]);
        // closed e.Units-E as range 48
        context[57] = refalrts::tvar_left( context[56], context[52], context[53] );
        if( ! context[57] )
          continue;
        if( ! refalrts::repeated_stvar_left( vm, context[58], context[25], context[52], context[53] ) )
          continue;
        context[59] = 0;
        context[60] = 0;
        context[61] = refalrts::brackets_left( context[59], context[60], context[52], context[53] );
        if( ! context[61] )
          continue;
        refalrts::bracket_pointers(context[61], context[62]);
        context[63] = 0;
        context[64] = 0;
        context[65] = refalrts::brackets_left( context[63], context[64], context[52], context[53] );
        if( ! context[65] )
          continue;
        refalrts::bracket_pointers(context[65], context[66]);
        // closed e.Aliases as range 59
        // closed e.ScannedAST as range 63
        if( ! refalrts::repeated_evar_left( vm, context[67], context[68], context[63], context[64], context[50], context[51] ) )
          continue;
        // closed e.NotScannedAST as range 52
        if( ! refalrts::repeated_evar_left( vm, context[69], context[70], context[52], context[53], context[50], context[51] ) )
          continue;
        if( ! refalrts::empty_seq( context[50], context[51] ) )
          continue;
        //DEBUG: t.Config: 17
        //DEBUG: t.NewErrorList: 23
        //DEBUG: s.Dialect: 25
        //DEBUG: e.BadIncludes: 26
        //DEBUG: e.IncludeName: 30
        //DEBUG: e.FullPath: 32
        //DEBUG: e.Groups-B: 36
        //DEBUG: e.Groups-E: 38
        //DEBUG: e.Units-B: 46
        //DEBUG: e.Units-E: 48
        //DEBUG: t.ErrorList: 56
        //DEBUG: e.Aliases: 59
        //DEBUG: e.ScannedAST: 63
        //DEBUG: e.NotScannedAST: 52

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Dialect/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.NewErrorList/23 e.ScannedAST/67 e.NotScannedAST/69 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & ResolveIncludes/4 AsIs: t.Config/17 AsIs: (/21 } Tile{ AsIs: e.BadIncludes/26 } )/71 Tile{ HalfReuse: </15 } Tile{ HalfReuse: & Map@2/22 AsIs: e.Groups-B/36 AsIs: (/44 AsIs: e.Units-B/46 AsIs: (/54 AsIs: t.ErrorList/56 AsIs: s.Dialect/58 AsIs: (/61 AsIs: e.Aliases/59 HalfReuse: (/62 } Tile{ AsIs: e.IncludeName/30 } Tile{ AsIs: )/16 AsIs: (/11 AsIs: e.FullPath/32 AsIs: )/12 HalfReuse: )/7 } Tile{ AsIs: (/65 AsIs: e.ScannedAST/63 AsIs: )/66 AsIs: e.NotScannedAST/52 AsIs: )/55 AsIs: e.Units-E/48 AsIs: )/45 } Tile{ AsIs: e.Groups-E/38 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[71]);
        refalrts::update_name(context[4], functions[efunc_ResolveIncludes]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[22], functions[efunc_gen_Map_Z2]);
        refalrts::reinit_open_bracket(context[62]);
        refalrts::reinit_close_bracket(context[7]);
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[44], context[45] );
        refalrts::link_brackets( context[54], context[55] );
        refalrts::link_brackets( context[65], context[66] );
        refalrts::link_brackets( context[61], context[7] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[62], context[16] );
        refalrts::link_brackets( context[21], context[71] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[38], context[39] );
        res = refalrts::splice_evar( res, context[65], context[45] );
        res = refalrts::splice_evar( res, context[16], context[7] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_evar( res, context[22], context[62] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_elem( res, context[71] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        refalrts::splice_to_freelist_open( vm, context[21], res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[46], context[47], context[42], context[43] ) );
    } while ( refalrts::open_evar_advance( context[36], context[37], context[28], context[29] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ResolveIncludes-CheckEqualAST/4 t.Config/17 (/21 e.BadIncludes/19 )/22 (/28 e.Units-B/26 )/29 (/32 t.CheckedUnit/38 )/33 (/36 e.Units-E/34 )/37 s.Dialect/25 (/15 e.IncludeName/13 )/16 (/11 e.FullPath/9 )/12 (/7 t.ErrorList/23 e.AST/5 )/8 >/1
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  context[34] = 0;
  context[35] = 0;
  context[36] = refalrts::brackets_left( context[34], context[35], context[2], context[3] );
  if( ! context[36] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[36], context[37]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.BadIncludes as range 19
  // closed e.Units-B as range 26
  // closed e.Units-E as range 34
  // closed e.IncludeName as range 13
  // closed e.FullPath as range 9
  // closed e.AST as range 5
  context[39] = refalrts::tvar_left( context[38], context[30], context[31] );
  if( ! context[39] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[30], context[31] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Config: 17
  //DEBUG: t.ErrorList: 23
  //DEBUG: s.Dialect: 25
  //DEBUG: e.BadIncludes: 19
  //DEBUG: e.Units-B: 26
  //DEBUG: e.Units-E: 34
  //DEBUG: e.IncludeName: 13
  //DEBUG: e.FullPath: 9
  //DEBUG: e.AST: 5
  //DEBUG: t.CheckedUnit: 38

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Dialect/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ResolveIncludes/4 AsIs: t.Config/17 AsIs: (/21 AsIs: e.BadIncludes/19 AsIs: )/22 } Tile{ AsIs: e.Units-B/26 } Tile{ AsIs: (/28 } Tile{ AsIs: t.ErrorList/23 } Tile{ HalfReuse: s.Dialect25 /33 AsIs: (/36 } Tile{ AsIs: (/15 AsIs: e.IncludeName/13 AsIs: )/16 AsIs: (/11 AsIs: e.FullPath/9 AsIs: )/12 HalfReuse: )/7 } Tile{ HalfReuse: (/37 } Tile{ AsIs: )/8 } Tile{ AsIs: e.AST/5 } Tile{ HalfReuse: )/32 AsIs: t.CheckedUnit/38 } Tile{ AsIs: e.Units-E/34 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_ResolveIncludes]);
  refalrts::reinit_svar( context[33], context[25] );
  refalrts::reinit_close_bracket(context[7]);
  refalrts::reinit_open_bracket(context[37]);
  refalrts::reinit_close_bracket(context[32]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[28], context[32] );
  refalrts::link_brackets( context[37], context[8] );
  refalrts::link_brackets( context[36], context[7] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[34], context[35] );
  res = refalrts::splice_evar( res, context[32], context[39] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[37] );
  res = refalrts::splice_evar( res, context[15], context[7] );
  res = refalrts::splice_evar( res, context[33], context[36] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  refalrts::splice_to_freelist_open( vm, context[22], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ResolveIncludesm_CheckEqualAST("ResolveIncludes-CheckEqualAST", COOKIE1_, COOKIE2_, func_ResolveIncludesm_CheckEqualAST);


static refalrts::FnResult func_gen_GlueErrorListsAndASTs_L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & GlueErrorListsAndASTs\1/4 t.CommonErrorList/9 (/7 t.ErrorList/11 (/15 e.UnitName/13 )/16 e.AST/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = refalrts::tvar_left( context[11], context[5], context[6] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[5], context[6] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.UnitName as range 13
  // closed e.AST as range 5
  //DEBUG: t.CommonErrorList: 9
  //DEBUG: t.ErrorList: 11
  //DEBUG: e.UnitName: 13
  //DEBUG: e.AST: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-Concat/4 AsIs: t.CommonErrorList/9 } Tile{ AsIs: t.ErrorList/11 } Tile{ AsIs: >/1 } Tile{ HalfReuse: </7 } & Map@3/17 Tile{ AsIs: (/15 AsIs: e.UnitName/13 AsIs: )/16 AsIs: e.AST/5 HalfReuse: >/8 } Tile{ ]] }
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_Map_Z3]);
  refalrts::update_name(context[4], functions[efunc_ELm_Concat]);
  refalrts::reinit_open_call(context[7]);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[15], context[8] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_elem( res, context[1] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GlueErrorListsAndASTs_L1("GlueErrorListsAndASTs\\1", COOKIE1_, COOKIE2_, func_gen_GlueErrorListsAndASTs_L1);


static refalrts::FnResult func_GlueErrorListsAndASTs(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & GlueErrorListsAndASTs/4 (/7 e.SrcName/5 )/8 e.Units/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.SrcName as range 5
  // closed e.Units as range 2
  //DEBUG: e.SrcName: 5
  //DEBUG: e.Units: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & MapAccum/10 Tile{ HalfReuse: & GlueErrorListsAndASTs\1/0 HalfReuse: </4 HalfReuse: & EL-Create/7 AsIs: e.SrcName/5 HalfReuse: >/8 AsIs: e.Units/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_MapAccum]);
  refalrts::reinit_name(context[0], functions[efunc_gen_GlueErrorListsAndASTs_L1]);
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_ELm_Create]);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_GlueErrorListsAndASTs("GlueErrorListsAndASTs", COOKIE1_, COOKIE2_, func_GlueErrorListsAndASTs);


static refalrts::FnResult func_gen_PatchASTSrcPos_A1L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & PatchASTSrcPos=1\1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PatchASTSrcPos=1\1/4 (/7 e.new1/5 )/8 s.new2/9 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & PatchASTSrcPos=1\1/4 (/7 e.FileName/10 )/8 # Name/9 e.Name/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Name], context[9] ) )
      continue;
    // closed e.FileName as range 10
    // closed e.Name as range 12
    //DEBUG: e.FileName: 10
    //DEBUG: e.Name: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & PatchASTSrcPos=1\1/4 (/7 e.FileName/10 )/8 # Name/9 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Name/12 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[12], context[13] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PatchASTSrcPos=1\1/4 (/7 e.new5/5 )/8 # SrcPos/9 t.new4/10 >/1
  if( ! refalrts::ident_term( identifiers[ident_SrcPos], context[9] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 5
  context[11] = refalrts::tvar_left( context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & PatchASTSrcPos=1\1/4 (/7 e.new7/12 )/8 # SrcPos/9 s.new6/10 >/1
    context[12] = context[5];
    context[13] = context[6];
    if( ! refalrts::svar_term( context[10], context[10] ) )
      continue;
    // closed e.new7 as range 12
    do {
      // </0 & PatchASTSrcPos=1\1/4 (/7 e.FileName/14 )/8 # SrcPos/9 # NoPos/10 >/1
      context[14] = context[12];
      context[15] = context[13];
      if( ! refalrts::ident_term( identifiers[ident_NoPos], context[10] ) )
        continue;
      // closed e.FileName as range 14
      //DEBUG: e.FileName: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & PatchASTSrcPos=1\1/4 (/7 e.FileName/14 )/8 # SrcPos/9 # NoPos/10 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # NoPos/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_NoPos]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PatchASTSrcPos=1\1/4 (/7 e.FileName/14 )/8 # SrcPos/9 s.LnNum/10 >/1
    context[14] = context[12];
    context[15] = context[13];
    // closed e.FileName as range 14
    //DEBUG: s.LnNum: 10
    //DEBUG: e.FileName: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} # SrcPos/9 s.LnNum/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # FileLine/4 HalfReuse: s.LnNum10 /7 AsIs: e.FileName/14 AsIs: )/8 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_FileLine]);
    refalrts::reinit_svar( context[7], context[10] );
    refalrts::link_brackets( context[0], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PatchASTSrcPos=1\1/4 (/7 e.FileName/5 )/8 # SrcPos/9 (/10 # RowCol/14 s.Row/15 s.Col/16 )/11 >/1
  context[12] = 0;
  context[13] = 0;
  if( ! refalrts::brackets_term( context[12], context[13], context[10] ) )
    return refalrts::cRecognitionImpossible;
  context[14] = refalrts::ident_left( identifiers[ident_RowCol], context[12], context[13] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.FileName as range 5
  if( ! refalrts::svar_left( context[15], context[12], context[13] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[16], context[12], context[13] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[12], context[13] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.FileName: 5
  //DEBUG: s.Row: 15
  //DEBUG: s.Col: 16

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & PatchASTSrcPos=1\1/4 (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/9 HalfReuse: # FileRowCol/10 HalfReuse: (/14 AsIs: s.Row/15 AsIs: s.Col/16 AsIs: )/11 } Tile{ AsIs: e.FileName/5 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[9]);
  refalrts::reinit_ident(context[10], identifiers[ident_FileRowCol]);
  refalrts::reinit_open_bracket(context[14]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[9], context[1] );
  refalrts::link_brackets( context[14], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PatchASTSrcPos_A1L1("PatchASTSrcPos=1\\1", COOKIE1_, COOKIE2_, func_gen_PatchASTSrcPos_A1L1);


static refalrts::FnResult func_PatchASTSrcPos(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & PatchASTSrcPos/4 (/7 e.FileName/5 )/8 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.FileName as range 5
  // closed e.AST as range 2
  //DEBUG: e.FileName: 5
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@3/4 AsIs: (/7 AsIs: e.FileName/5 AsIs: )/8 AsIs: e.AST/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PatchASTSrcPos("PatchASTSrcPos", COOKIE1_, COOKIE2_, func_PatchASTSrcPos);


static refalrts::FnResult func_PatchAST(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & PatchAST/4 s.FnPatch/5 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.AST as range 2
  //DEBUG: s.FnPatch: 5
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@4/4 AsIs: s.FnPatch/5 AsIs: e.AST/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PatchAST("PatchAST", COOKIE1_, COOKIE2_, func_PatchAST);


static refalrts::FnResult func_PatchASTm_Item(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & PatchAST-Item/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PatchAST-Item/4 s.new1/9 (/7 s.new2/10 t.new3/11 e.new4/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = refalrts::tvar_left( context[11], context[5], context[6] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 5
  do {
    // </0 & PatchAST-Item/4 s.FnPatch/9 (/7 # Function/10 t.SrcPos/11 s.ScopeClass/15 (/18 e.Name/16 )/19 e.Body/13 )/8 >/1
    context[13] = context[5];
    context[14] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_Function], context[10] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
      continue;
    context[16] = 0;
    context[17] = 0;
    context[18] = refalrts::brackets_left( context[16], context[17], context[13], context[14] );
    if( ! context[18] )
      continue;
    refalrts::bracket_pointers(context[18], context[19]);
    // closed e.Name as range 16
    // closed e.Body as range 13
    //DEBUG: t.SrcPos: 11
    //DEBUG: s.FnPatch: 9
    //DEBUG: s.ScopeClass: 15
    //DEBUG: e.Name: 16
    //DEBUG: e.Body: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Function/4 } </20 Tile{ HalfReuse: s.FnPatch9 /7 Reuse: # SrcPos/10 AsIs: t.SrcPos/11 } >/21 Tile{ AsIs: s.ScopeClass/15 AsIs: (/18 } </22 Tile{ AsIs: s.FnPatch/9 } # Name/23 Tile{ AsIs: e.Name/16 } >/24 )/25 </26 & PatchAST-Body/27 Tile{ HalfReuse: s.FnPatch9 /19 AsIs: e.Body/13 HalfReuse: >/8 HalfReuse: )/1 ]] }
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_ident(vm, context[23], identifiers[ident_Name]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_PatchASTm_Body]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Function]);
    refalrts::reinit_svar( context[7], context[9] );
    refalrts::update_ident(context[10], identifiers[ident_SrcPos]);
    refalrts::reinit_svar( context[19], context[9] );
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[26] );
    refalrts::link_brackets( context[18], context[25] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[19];
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[15], context[18] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[7], context[12] );
    res = refalrts::splice_elem( res, context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PatchAST-Item/4 s.FnPatch/9 (/7 # Ident/10 t.SrcPos/11 e.Name/13 )/8 >/1
    context[13] = context[5];
    context[14] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_Ident], context[10] ) )
      continue;
    // closed e.Name as range 13
    //DEBUG: t.SrcPos: 11
    //DEBUG: s.FnPatch: 9
    //DEBUG: e.Name: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Ident/10 } Tile{ HalfReuse: </4 AsIs: s.FnPatch/9 } Tile{ HalfReuse: # SrcPos/0 } Tile{ AsIs: t.SrcPos/11 } Tile{ HalfReuse: >/8 } Tile{ AsIs: e.Name/13 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_ident(context[0], identifiers[ident_SrcPos]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[0] );
    res = refalrts::splice_evar( res, context[4], context[9] );
    res = refalrts::splice_evar( res, context[7], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PatchAST-Item/4 s.FnPatch/9 (/7 # NativeBlock/10 t.SrcPos/11 e.Name/13 )/8 >/1
    context[13] = context[5];
    context[14] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_NativeBlock], context[10] ) )
      continue;
    // closed e.Name as range 13
    //DEBUG: t.SrcPos: 11
    //DEBUG: s.FnPatch: 9
    //DEBUG: e.Name: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # NativeBlock/10 } Tile{ HalfReuse: </4 AsIs: s.FnPatch/9 } Tile{ HalfReuse: # SrcPos/0 } Tile{ AsIs: t.SrcPos/11 } Tile{ HalfReuse: >/8 } Tile{ AsIs: e.Name/13 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_ident(context[0], identifiers[ident_SrcPos]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[0] );
    res = refalrts::splice_evar( res, context[4], context[9] );
    res = refalrts::splice_evar( res, context[7], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PatchAST-Item/4 s.FnPatch/9 (/7 # Include/10 t.SrcPos/11 e.IncludeName/13 )/8 >/1
    context[13] = context[5];
    context[14] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_Include], context[10] ) )
      continue;
    // closed e.IncludeName as range 13
    //DEBUG: t.SrcPos: 11
    //DEBUG: s.FnPatch: 9
    //DEBUG: e.IncludeName: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & PatchAST-Item/4 s.FnPatch/9 (/7 # Include/10 t.SrcPos/11 e.IncludeName/13 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PatchAST-Item/4 s.new5/9 (/7 s.new6/10 t.new7/11 t.new8/13 e.new9/5 )/8 >/1
  context[14] = refalrts::tvar_left( context[13], context[5], context[6] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.new9 as range 5
  do {
    // </0 & PatchAST-Item/4 s.FnPatch/9 (/7 s.Label/10 t.SrcPos/11 s.ScopeClass/13 e.Name/15 )/8 >/1
    context[15] = context[5];
    context[16] = context[6];
    if( ! refalrts::svar_term( context[13], context[13] ) )
      continue;
    // closed e.Name as range 15
    //DEBUG: t.SrcPos: 11
    //DEBUG: s.ScopeClass: 13
    //DEBUG: s.FnPatch: 9
    //DEBUG: s.Label: 10
    //DEBUG: e.Name: 15
    //9: s.FnPatch
    //10: s.Label
    //11: t.SrcPos
    //13: s.ScopeClass
    //15: e.Name
    //22: s.Label

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[19], functions[efunc_gen_PatchASTm_Item_S5C1]);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_OneOf]);
    refalrts::copy_stvar(vm, context[22], context[10]);
    refalrts::alloc_ident(vm, context[23], identifiers[ident_Enum]);
    refalrts::alloc_ident(vm, context[24], identifiers[ident_Swap]);
    refalrts::alloc_ident(vm, context[25], identifiers[ident_Declaration]);
    refalrts::alloc_ident(vm, context[26], identifiers[ident_Entry]);
    refalrts::alloc_ident(vm, context[27], identifiers[ident_Inline]);
    refalrts::alloc_ident(vm, context[28], identifiers[ident_Drive]);
    refalrts::alloc_ident(vm, context[29], identifiers[ident_Intrinsic]);
    refalrts::alloc_ident(vm, context[30], identifiers[ident_Meta]);
    refalrts::alloc_close_call(vm, context[31]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[17] );
    res = refalrts::splice_elem( res, context[18] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[20] );
    res = refalrts::splice_elem( res, context[31] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_stvar( res, context[22] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_elem( res, context[17] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </17 & PatchAST-Item$5?1/21 # True/22 >/18
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::call_left( context[19], context[20], context[17], context[18] );
      context[22] = refalrts::ident_left( identifiers[ident_True], context[19], context[20] );
      if( ! context[22] )
        continue;
      if( ! refalrts::empty_seq( context[19], context[20] ) )
        continue;
      //DEBUG: t.SrcPos: 11
      //DEBUG: s.ScopeClass: 13
      //DEBUG: s.FnPatch: 9
      //DEBUG: s.Label: 10
      //DEBUG: e.Name: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Label/10 {REMOVED TILE} s.ScopeClass/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/23 Tile{ HalfReuse: s.Label10 /8 AsIs: </17 HalfReuse: s.FnPatch9 /21 Reuse: # SrcPos/22 } Tile{ AsIs: t.SrcPos/11 } >/24 Tile{ HalfReuse: s.ScopeClass13 /0 HalfReuse: </4 AsIs: s.FnPatch/9 HalfReuse: # Name/7 } Tile{ AsIs: e.Name/15 } Tile{ AsIs: >/18 HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[23]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_svar( context[8], context[10] );
      refalrts::reinit_svar( context[21], context[9] );
      refalrts::update_ident(context[22], identifiers[ident_SrcPos]);
      refalrts::reinit_svar( context[0], context[13] );
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_ident(context[7], identifiers[ident_Name]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[23], context[1] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[8], context[22] );
      res = refalrts::splice_elem( res, context[23] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[17], context[18]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PatchAST-Item/4 s.FnPatch/9 (/7 # Spec/10 t.SrcPos/11 (/13 e.Name/15 )/14 e.Pattern/5 )/8 >/1
  context[15] = 0;
  context[16] = 0;
  if( ! refalrts::brackets_term( context[15], context[16], context[13] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::ident_term( identifiers[ident_Spec], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 15
  // closed e.Pattern as range 5
  //DEBUG: t.SrcPos: 11
  //DEBUG: s.FnPatch: 9
  //DEBUG: e.Name: 15
  //DEBUG: e.Pattern: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Spec/4 } </17 Tile{ HalfReuse: s.FnPatch9 /7 Reuse: # SrcPos/10 AsIs: t.SrcPos/11 HalfReuse: >/13 } (/18 </19 Tile{ AsIs: s.FnPatch/9 } # Name/20 Tile{ AsIs: e.Name/15 } >/21 )/22 </23 & Map@5/24 Tile{ HalfReuse: s.FnPatch9 /14 AsIs: e.Pattern/5 HalfReuse: >/8 HalfReuse: )/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_ident(vm, context[20], identifiers[ident_Name]);
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_gen_Map_Z5]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Spec]);
  refalrts::reinit_svar( context[7], context[9] );
  refalrts::update_ident(context[10], identifiers[ident_SrcPos]);
  refalrts::reinit_close_call(context[13]);
  refalrts::reinit_svar( context[14], context[9] );
  refalrts::reinit_close_call(context[8]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[18], context[22] );
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[14];
  res = refalrts::splice_evar( res, context[21], context[24] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[7], context[13] );
  res = refalrts::splice_elem( res, context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PatchASTm_Item("PatchAST-Item", COOKIE1_, COOKIE2_, func_PatchASTm_Item);


static refalrts::FnResult func_gen_PatchASTm_Body_S3L1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & PatchAST-Body$3\1=2/4 (/7 e.Identifier/5 )/8 t.SrcPos$a/9 e.Name$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Identifier as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.Name$a as range 2
  //DEBUG: e.Identifier: 5
  //DEBUG: t.SrcPos$a: 9
  //DEBUG: e.Name$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: (/7 AsIs: e.Identifier/5 AsIs: )/8 } Tile{ HalfReuse: (/0 } # Symbol/11 # Name/12 Tile{ AsIs: t.SrcPos$a/9 AsIs: e.Name$a/2 HalfReuse: )/1 } )/13 Tile{ ]] }
  refalrts::alloc_ident(vm, context[11], identifiers[ident_Symbol]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Name]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[4], context[13] );
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[9], context[1] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_elem( res, context[0] );
  res = refalrts::splice_evar( res, context[4], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PatchASTm_Body_S3L1A2("PatchAST-Body$3\\1=2", COOKIE1_, COOKIE2_, func_gen_PatchASTm_Body_S3L1A2);


static refalrts::FnResult func_gen_PatchASTm_Body_S3L1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & PatchAST-Body$3\1=1/4 (/7 e.Identifier/5 )/8 s.FnPatch/9 (/12 e.Name/10 )/13 t.SrcPos$a/14 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Identifier as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.Name as range 10
  context[15] = refalrts::tvar_left( context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Identifier: 5
  //DEBUG: s.FnPatch: 9
  //DEBUG: e.Name: 10
  //DEBUG: t.SrcPos$a: 14

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PatchAST-Body$3\1=2/4 AsIs: (/7 AsIs: e.Identifier/5 AsIs: )/8 } Tile{ AsIs: t.SrcPos$a/14 } </16 Tile{ AsIs: s.FnPatch/9 HalfReuse: # Name/12 AsIs: e.Name/10 HalfReuse: >/13 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_PatchASTm_Body_S3L1A2]);
  refalrts::reinit_ident(context[12], identifiers[ident_Name]);
  refalrts::reinit_close_call(context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[13] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PatchASTm_Body_S3L1A1("PatchAST-Body$3\\1=1", COOKIE1_, COOKIE2_, func_gen_PatchASTm_Body_S3L1A1);


static refalrts::FnResult func_PatchASTm_Body(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & PatchAST-Body/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PatchAST-Body/4 s.new1/5 s.new2/6 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & PatchAST-Body/4 s.FnPatch/5 # Sentences/6 e.Sentences/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Sentences], context[6] ) )
      continue;
    // closed e.Sentences as range 7
    //DEBUG: s.FnPatch: 5
    //DEBUG: e.Sentences: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.FnPatch/5 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: # Sentences/0 HalfReuse: </4 } & Map@6/9 Tile{ HalfReuse: s.FnPatch5 /6 AsIs: e.Sentences/7 AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Map_Z6]);
    refalrts::reinit_ident(context[0], identifiers[ident_Sentences]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_svar( context[6], context[5] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[6];
    res = refalrts::splice_elem( res, context[9] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PatchAST-Body/4 s.FnPatch/5 # NativeBody/6 t.SrcPos/9 e.Code/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[6] ) )
      continue;
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.Code as range 7
    //DEBUG: s.FnPatch: 5
    //DEBUG: t.SrcPos: 9
    //DEBUG: e.Code: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: # NativeBody/0 HalfReuse: </4 AsIs: s.FnPatch/5 Reuse: # SrcPos/6 AsIs: t.SrcPos/9 } Tile{ AsIs: >/1 } Tile{ AsIs: e.Code/7 } Tile{ ]] }
    refalrts::reinit_ident(context[0], identifiers[ident_NativeBody]);
    refalrts::reinit_open_call(context[4]);
    refalrts::update_ident(context[6], identifiers[ident_SrcPos]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PatchAST-Body/4 s.FnPatch/5 # Metatable/6 e.Metatable/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_Metatable], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Metatable as range 2
  //DEBUG: s.FnPatch: 5
  //DEBUG: e.Metatable: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.FnPatch/5 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Metatable/0 HalfReuse: </4 } & Map@7/7 Tile{ HalfReuse: s.FnPatch5 /6 AsIs: e.Metatable/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_Map_Z7]);
  refalrts::reinit_ident(context[0], identifiers[ident_Metatable]);
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_svar( context[6], context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[6];
  res = refalrts::splice_elem( res, context[7] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PatchASTm_Body("PatchAST-Body", COOKIE1_, COOKIE2_, func_PatchASTm_Body);


static refalrts::FnResult func_PatchASTm_Sentence(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & PatchAST-Sentence/4 s.FnPatch/21 (/7 (/11 e.Pattern/9 )/12 e.ConditionsAndAssigns/5 (/19 e.Result/17 )/20 (/15 e.Blocks/13 )/16 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[5], context[6] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[5], context[6] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.Pattern as range 9
  // closed e.ConditionsAndAssigns as range 5
  // closed e.Result as range 17
  // closed e.Blocks as range 13
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Pattern: 9
  //DEBUG: e.ConditionsAndAssigns: 5
  //DEBUG: e.Result: 17
  //DEBUG: e.Blocks: 13
  //DEBUG: s.FnPatch: 21

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/11 } </22 & Map@5/23 s.FnPatch/21/24 Tile{ AsIs: e.Pattern/9 } >/25 Tile{ AsIs: )/12 } Tile{ AsIs: </0 Reuse: & Map@10/4 AsIs: s.FnPatch/21 } Tile{ AsIs: e.ConditionsAndAssigns/5 } >/26 Tile{ AsIs: (/19 } </27 & Map@5/28 s.FnPatch/21/29 Tile{ AsIs: e.Result/17 } >/30 )/31 (/32 </33 Tile{ HalfReuse: & Map@9/20 HalfReuse: s.FnPatch21 /15 AsIs: e.Blocks/13 HalfReuse: >/16 AsIs: )/8 HalfReuse: )/1 ]] }
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::alloc_name(vm, context[23], functions[efunc_gen_Map_Z5]);
  refalrts::copy_stvar(vm, context[24], context[21]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::alloc_close_call(vm, context[26]);
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_gen_Map_Z5]);
  refalrts::copy_stvar(vm, context[29], context[21]);
  refalrts::alloc_close_call(vm, context[30]);
  refalrts::alloc_close_bracket(vm, context[31]);
  refalrts::alloc_open_bracket(vm, context[32]);
  refalrts::alloc_open_call(vm, context[33]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z10]);
  refalrts::reinit_name(context[20], functions[efunc_gen_Map_Z9]);
  refalrts::reinit_svar( context[15], context[21] );
  refalrts::reinit_close_call(context[16]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[7], context[1] );
  refalrts::link_brackets( context[32], context[8] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[33] );
  refalrts::link_brackets( context[19], context[31] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[26] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[20];
  res = refalrts::splice_evar( res, context[30], context[33] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[27], context[29] );
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[0], context[21] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[22], context[24] );
  res = refalrts::splice_evar( res, context[7], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PatchASTm_Sentence("PatchAST-Sentence", COOKIE1_, COOKIE2_, func_PatchASTm_Sentence);


static refalrts::FnResult func_PatchASTm_Chain(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & PatchAST-Chain/4 s.FnPatch/5 s.FnPatchExpr/6 e.ConditionsAndAssigns/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.ConditionsAndAssigns as range 2
  //DEBUG: s.FnPatch: 5
  //DEBUG: s.FnPatchExpr: 6
  //DEBUG: e.ConditionsAndAssigns: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@8/4 } Tile{ AsIs: s.FnPatchExpr/6 } Tile{ AsIs: s.FnPatch/5 } Tile{ AsIs: e.ConditionsAndAssigns/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_elem( res, context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PatchASTm_Chain("PatchAST-Chain", COOKIE1_, COOKIE2_, func_PatchASTm_Chain);


static refalrts::FnResult func_PatchASTm_Blocks(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & PatchAST-Blocks/4 s.FnPatch/5 e.Blocks/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Blocks as range 2
  //DEBUG: s.FnPatch: 5
  //DEBUG: e.Blocks: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@9/4 AsIs: s.FnPatch/5 AsIs: e.Blocks/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PatchASTm_Blocks("PatchAST-Blocks", COOKIE1_, COOKIE2_, func_PatchASTm_Blocks);


static refalrts::FnResult func_PatchASTm_Expr(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & PatchAST-Expr/4 s.FnPatch/5 e.Expression/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Expression as range 2
  //DEBUG: s.FnPatch: 5
  //DEBUG: e.Expression: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@5/4 AsIs: s.FnPatch/5 AsIs: e.Expression/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z5]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PatchASTm_Expr("PatchAST-Expr", COOKIE1_, COOKIE2_, func_PatchASTm_Expr);


static refalrts::FnResult func_gen_BackEnd_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & BackEnd:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & BackEnd:1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 t.new4/13 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  context[14] = refalrts::tvar_right( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & BackEnd:1/4 (/7 e.OutputName/15 )/8 (/11 e.SrcName/17 )/12 t.RASLModule/13 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[9];
    context[18] = context[10];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.OutputName as range 15
    // closed e.SrcName as range 17
    //DEBUG: t.RASLModule: 13
    //DEBUG: e.OutputName: 15
    //DEBUG: e.SrcName: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} e.SrcName/17 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & BackEnd-RASLModule:1@1/4 AsIs: (/7 AsIs: e.OutputName/15 AsIs: )/8 HalfReuse: </11 } Tile{ HalfReuse: & GenProgram-RASL/12 AsIs: t.RASLModule/13 AsIs: >/1 } >/19 # NoNative/20 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::alloc_ident(vm, context[20], identifiers[ident_NoNative]);
    refalrts::update_name(context[4], functions[efunc_gen_BackEndm_RASLModule_B1Z1]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[12], functions[efunc_GenProgramm_RASL]);
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[11] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    refalrts::splice_to_freelist_open( vm, context[11], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & BackEnd:1/4 (/7 e.OutputName/5 )/8 (/11 e.SrcName/9 )/12 t.RASLModule/15 t.NativeModule/13 >/1
  // closed e.OutputName as range 5
  // closed e.SrcName as range 9
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.NativeModule: 13
  //DEBUG: e.OutputName: 5
  //DEBUG: e.SrcName: 9
  //DEBUG: t.RASLModule: 15

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & BackEnd-RASLModule:1@1/4 AsIs: (/7 AsIs: e.OutputName/5 AsIs: )/8 HalfReuse: </11 } Tile{ HalfReuse: & GenProgram-RASL/12 AsIs: t.RASLModule/15 } >/17 >/18 </19 & SaveFile/20 (/21 e.OutputName/5/22".cpp"/24 )/26 </27 & GenProgram-Native/28 (/29 Tile{ AsIs: e.SrcName/9 } )/30 (/31 e.OutputName/5/32".cpp"/34 )/36 Tile{ AsIs: t.NativeModule/13 AsIs: >/1 } >/37 (/38 e.OutputName/5/39".cpp"/41 )/43 Tile{ ]] }
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::alloc_close_call(vm, context[18]);
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_name(vm, context[20], functions[efunc_SaveFile]);
  refalrts::alloc_open_bracket(vm, context[21]);
  refalrts::copy_evar(vm, context[22], context[23], context[5], context[6]);
  refalrts::alloc_chars(vm, context[24], context[25], ".cpp", 4);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_GenProgramm_Native]);
  refalrts::alloc_open_bracket(vm, context[29]);
  refalrts::alloc_close_bracket(vm, context[30]);
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::copy_evar(vm, context[32], context[33], context[5], context[6]);
  refalrts::alloc_chars(vm, context[34], context[35], ".cpp", 4);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_close_call(vm, context[37]);
  refalrts::alloc_open_bracket(vm, context[38]);
  refalrts::copy_evar(vm, context[39], context[40], context[5], context[6]);
  refalrts::alloc_chars(vm, context[41], context[42], ".cpp", 4);
  refalrts::alloc_close_bracket(vm, context[43]);
  refalrts::update_name(context[4], functions[efunc_gen_BackEndm_RASLModule_B1Z1]);
  refalrts::reinit_open_call(context[11]);
  refalrts::reinit_name(context[12], functions[efunc_GenProgramm_RASL]);
  refalrts::link_brackets( context[38], context[43] );
  refalrts::push_stack( vm, context[37] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[27] );
  refalrts::link_brackets( context[31], context[36] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[21], context[26] );
  refalrts::push_stack( vm, context[18] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[37], context[43] );
  res = refalrts::splice_evar( res, context[13], context[1] );
  res = refalrts::splice_evar( res, context[30], context[36] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[17], context[29] );
  res = refalrts::splice_evar( res, context[12], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_BackEnd_B1("BackEnd:1", COOKIE1_, COOKIE2_, func_gen_BackEnd_B1);


static refalrts::FnResult func_gen_BackEnd_A12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & BackEnd=12/4 (/7 e.OutputName/5 )/8 (/11 e.SrcName/9 )/12 s.GenMode/13 s.DebugInfo/14 e.HighLevelRASL$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.OutputName as range 5
  // closed e.SrcName as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.HighLevelRASL$a as range 2
  //DEBUG: e.OutputName: 5
  //DEBUG: e.SrcName: 9
  //DEBUG: s.GenMode: 13
  //DEBUG: s.DebugInfo: 14
  //DEBUG: e.HighLevelRASL$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & BackEnd:1/4 AsIs: (/7 AsIs: e.OutputName/5 AsIs: )/8 AsIs: (/11 AsIs: e.SrcName/9 AsIs: )/12 } </15 & LowLevelRASL/16 Tile{ AsIs: s.GenMode/13 AsIs: s.DebugInfo/14 } (/17 e.SrcName/9/18 )/20 Tile{ AsIs: e.HighLevelRASL$a/2 } >/21 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_LowLevelRASL]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::copy_evar(vm, context[18], context[19], context[9], context[10]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::update_name(context[4], functions[efunc_gen_BackEnd_B1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[17], context[20] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[17], context[20] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_BackEnd_A12("BackEnd=12", COOKIE1_, COOKIE2_, func_gen_BackEnd_A12);


static refalrts::FnResult func_gen_BackEnd_A11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & BackEnd=11/4 (/7 e.OutputName/5 )/8 (/11 e.SrcName/9 )/12 s.GenMode/13 s.DebugInfo/14 e.HighLevelRASL/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.OutputName as range 5
  // closed e.SrcName as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.HighLevelRASL as range 2
  //DEBUG: e.OutputName: 5
  //DEBUG: e.SrcName: 9
  //DEBUG: s.GenMode: 13
  //DEBUG: s.DebugInfo: 14
  //DEBUG: e.HighLevelRASL: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & BackEnd=12/4 AsIs: (/7 AsIs: e.OutputName/5 AsIs: )/8 AsIs: (/11 AsIs: e.SrcName/9 AsIs: )/12 AsIs: s.GenMode/13 AsIs: s.DebugInfo/14 } </15 & Log-HighLevelRASL/16 (/17 e.SrcName/9/18 )/20 Tile{ AsIs: e.HighLevelRASL/2 } >/21 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_Logm_HighLevelRASL]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::copy_evar(vm, context[18], context[19], context[9], context[10]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::update_name(context[4], functions[efunc_gen_BackEnd_A12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[17], context[20] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[15], context[20] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_BackEnd_A11("BackEnd=11", COOKIE1_, COOKIE2_, func_gen_BackEnd_A11);


static refalrts::FnResult func_gen_BackEnd_A10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & BackEnd=10/4 (/7 e.OutputName/5 )/8 (/11 e.SrcName/9 )/12 s.GenMode/13 s.DebugInfo/14 s.OptPattern/15 s.OptResult/16 e.AST$d/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.OutputName as range 5
  // closed e.SrcName as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[15], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[16], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.AST$d as range 2
  //DEBUG: e.OutputName: 5
  //DEBUG: e.SrcName: 9
  //DEBUG: s.GenMode: 13
  //DEBUG: s.DebugInfo: 14
  //DEBUG: s.OptPattern: 15
  //DEBUG: s.OptResult: 16
  //DEBUG: e.AST$d: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & BackEnd=11/4 AsIs: (/7 AsIs: e.OutputName/5 AsIs: )/8 AsIs: (/11 AsIs: e.SrcName/9 AsIs: )/12 AsIs: s.GenMode/13 AsIs: s.DebugInfo/14 } </17 & HighLevelRASL/18 Tile{ AsIs: s.OptPattern/15 AsIs: s.OptResult/16 AsIs: e.AST$d/2 AsIs: >/1 } >/19 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_HighLevelRASL]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_BackEnd_A11]);
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[15], context[1] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_BackEnd_A10("BackEnd=10", COOKIE1_, COOKIE2_, func_gen_BackEnd_A10);


static refalrts::FnResult func_gen_BackEnd_A9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & BackEnd=9/4 (/7 e.OutputName/5 )/8 (/11 e.SrcName/9 )/12 s.GenMode/13 s.DebugInfo/14 s.OptPattern/15 s.OptResult/16 e.AST$c/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.OutputName as range 5
  // closed e.SrcName as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[15], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[16], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.AST$c as range 2
  //DEBUG: e.OutputName: 5
  //DEBUG: e.SrcName: 9
  //DEBUG: s.GenMode: 13
  //DEBUG: s.DebugInfo: 14
  //DEBUG: s.OptPattern: 15
  //DEBUG: s.OptResult: 16
  //DEBUG: e.AST$c: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & BackEnd=10/4 AsIs: (/7 AsIs: e.OutputName/5 AsIs: )/8 AsIs: (/11 AsIs: e.SrcName/9 AsIs: )/12 AsIs: s.GenMode/13 AsIs: s.DebugInfo/14 AsIs: s.OptPattern/15 AsIs: s.OptResult/16 } </17 & Log-AST/18 (/19 e.SrcName/9/20" (after tree optimization)"/22 )/24 Tile{ AsIs: e.AST$c/2 } >/25 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_Logm_AST]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::copy_evar(vm, context[20], context[21], context[9], context[10]);
  refalrts::alloc_chars(vm, context[22], context[23], " (after tree optimization)", 26);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::update_name(context[4], functions[efunc_gen_BackEnd_A10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[19], context[24] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[17], context[24] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_BackEnd_A9("BackEnd=9", COOKIE1_, COOKIE2_, func_gen_BackEnd_A9);


static refalrts::FnResult func_gen_BackEnd_A8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & BackEnd=8/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & BackEnd=8/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 s.new3/13 s.new4/14 s.new5/15 s.new6/16 t.new7/17 s.new8/19 e.new9/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[15], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[16], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[19], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new9 as range 2
  do {
    // </0 & BackEnd=8/4 (/7 e.OutputName/20 )/8 (/11 e.SrcName/22 )/12 s.GenMode/13 s.DebugInfo/14 s.OptPattern/15 s.OptResult/16 t.Config/17 # OptTree/19 e.AST$b/24 >/1
    context[20] = context[5];
    context[21] = context[6];
    context[22] = context[9];
    context[23] = context[10];
    context[24] = context[2];
    context[25] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_OptTree], context[19] ) )
      continue;
    // closed e.OutputName as range 20
    // closed e.SrcName as range 22
    // closed e.AST$b as range 24
    //DEBUG: t.Config: 17
    //DEBUG: s.GenMode: 13
    //DEBUG: s.DebugInfo: 14
    //DEBUG: s.OptPattern: 15
    //DEBUG: s.OptResult: 16
    //DEBUG: e.OutputName: 20
    //DEBUG: e.SrcName: 22
    //DEBUG: e.AST$b: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & BackEnd=9/4 AsIs: (/7 AsIs: e.OutputName/20 AsIs: )/8 AsIs: (/11 AsIs: e.SrcName/22 AsIs: )/12 AsIs: s.GenMode/13 AsIs: s.DebugInfo/14 AsIs: s.OptPattern/15 AsIs: s.OptResult/16 } Tile{ HalfReuse: </19 } & OptTree/26 Tile{ AsIs: t.Config/17 } Tile{ AsIs: e.AST$b/24 } >/27 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[26], functions[efunc_OptTree]);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::update_name(context[4], functions[efunc_gen_BackEnd_A9]);
    refalrts::reinit_open_call(context[19]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_elem( res, context[19] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & BackEnd=8/4 (/7 e.OutputName/20 )/8 (/11 e.SrcName/22 )/12 s.GenMode/13 s.DebugInfo/14 s.OptPattern/15 s.OptResult/16 t.Config/17 # NoOpt/19 e.AST$b/24 >/1
    context[20] = context[5];
    context[21] = context[6];
    context[22] = context[9];
    context[23] = context[10];
    context[24] = context[2];
    context[25] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[19] ) )
      continue;
    // closed e.OutputName as range 20
    // closed e.SrcName as range 22
    // closed e.AST$b as range 24
    //DEBUG: t.Config: 17
    //DEBUG: s.GenMode: 13
    //DEBUG: s.DebugInfo: 14
    //DEBUG: s.OptPattern: 15
    //DEBUG: s.OptResult: 16
    //DEBUG: e.OutputName: 20
    //DEBUG: e.SrcName: 22
    //DEBUG: e.AST$b: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} t.Config/17 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & BackEnd=9/4 AsIs: (/7 AsIs: e.OutputName/20 AsIs: )/8 AsIs: (/11 AsIs: e.SrcName/22 AsIs: )/12 AsIs: s.GenMode/13 AsIs: s.DebugInfo/14 AsIs: s.OptPattern/15 AsIs: s.OptResult/16 } </26 Tile{ HalfReuse: & OptTree-CleanupMarkup/19 AsIs: e.AST$b/24 AsIs: >/1 } >/27 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::update_name(context[4], functions[efunc_gen_BackEnd_A9]);
    refalrts::reinit_name(context[19], functions[efunc_OptTreem_CleanupMarkup]);
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[26] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[19], context[1] );
    res = refalrts::splice_elem( res, context[26] );
    refalrts::splice_to_freelist_open( vm, context[16], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & BackEnd=8/4 (/7 e.OutputName/5 )/8 (/11 e.SrcName/9 )/12 s.GenMode/13 s.DebugInfo/14 s.OptPattern/15 s.OptResult/16 t.Config/17 s.OptTree/19 e.AST$b/2 >/1
  // closed e.OutputName as range 5
  // closed e.SrcName as range 9
  // closed e.AST$b as range 2
  //DEBUG: t.Config: 17
  //DEBUG: s.GenMode: 13
  //DEBUG: s.DebugInfo: 14
  //DEBUG: s.OptPattern: 15
  //DEBUG: s.OptResult: 16
  //DEBUG: s.OptTree: 19
  //DEBUG: e.OutputName: 5
  //DEBUG: e.SrcName: 9
  //DEBUG: e.AST$b: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & BackEnd=9/4 AsIs: (/7 AsIs: e.OutputName/5 AsIs: )/8 AsIs: (/11 AsIs: e.SrcName/9 AsIs: )/12 AsIs: s.GenMode/13 AsIs: s.DebugInfo/14 AsIs: s.OptPattern/15 AsIs: s.OptResult/16 } </20 & BackEnd=9:1*2/21 Tile{ AsIs: t.Config/17 } (/22 Tile{ AsIs: e.AST$b/2 } )/23 Tile{ AsIs: s.OptTree/19 } >/24 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[20]);
  refalrts::alloc_name(vm, context[21], functions[efunc_gen_BackEnd_A9B1D2]);
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::alloc_close_call(vm, context[24]);
  refalrts::update_name(context[4], functions[efunc_gen_BackEnd_A9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[20] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[20], context[21] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_BackEnd_A8("BackEnd=8", COOKIE1_, COOKIE2_, func_gen_BackEnd_A8);


static refalrts::FnResult func_gen_BackEnd_A7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & BackEnd=7/4 (/7 e.OutputName/5 )/8 (/11 e.SrcName/9 )/12 s.GenMode/13 s.DebugInfo/14 s.OptPattern/15 s.OptResult/16 t.Config/17 s.OptTree/19 e.AST$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.OutputName as range 5
  // closed e.SrcName as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[15], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[16], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[19], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.AST$a as range 2
  //DEBUG: e.OutputName: 5
  //DEBUG: e.SrcName: 9
  //DEBUG: s.GenMode: 13
  //DEBUG: s.DebugInfo: 14
  //DEBUG: s.OptPattern: 15
  //DEBUG: s.OptResult: 16
  //DEBUG: t.Config: 17
  //DEBUG: s.OptTree: 19
  //DEBUG: e.AST$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & BackEnd=8/4 AsIs: (/7 AsIs: e.OutputName/5 AsIs: )/8 AsIs: (/11 AsIs: e.SrcName/9 AsIs: )/12 AsIs: s.GenMode/13 AsIs: s.DebugInfo/14 AsIs: s.OptPattern/15 AsIs: s.OptResult/16 AsIs: t.Config/17 AsIs: s.OptTree/19 } </20 & Log-AST/21 (/22 e.SrcName/9/23" (after desugar)"/25 )/27 Tile{ AsIs: e.AST$a/2 } >/28 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[20]);
  refalrts::alloc_name(vm, context[21], functions[efunc_Logm_AST]);
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::copy_evar(vm, context[23], context[24], context[9], context[10]);
  refalrts::alloc_chars(vm, context[25], context[26], " (after desugar)", 16);
  refalrts::alloc_close_bracket(vm, context[27]);
  refalrts::alloc_close_call(vm, context[28]);
  refalrts::update_name(context[4], functions[efunc_gen_BackEnd_A8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[28] );
  refalrts::push_stack( vm, context[20] );
  refalrts::link_brackets( context[22], context[27] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[20], context[27] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_BackEnd_A7("BackEnd=7", COOKIE1_, COOKIE2_, func_gen_BackEnd_A7);


static refalrts::FnResult func_gen_BackEnd_A6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & BackEnd=6/4 (/7 e.OutputName/5 )/8 (/11 e.SrcName/9 )/12 s.GenMode/13 s.DebugInfo/14 s.OptPattern/15 s.OptResult/16 t.Config/17 s.MarkupContext/19 s.ConditionsMode/20 (/23 e.AST/21 )/24 s.OptTree/25 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.OutputName as range 5
  // closed e.SrcName as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[15], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[16], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[19], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[20], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.AST as range 21
  if( ! refalrts::svar_left( context[25], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.OutputName: 5
  //DEBUG: e.SrcName: 9
  //DEBUG: s.GenMode: 13
  //DEBUG: s.DebugInfo: 14
  //DEBUG: s.OptPattern: 15
  //DEBUG: s.OptResult: 16
  //DEBUG: t.Config: 17
  //DEBUG: s.MarkupContext: 19
  //DEBUG: s.ConditionsMode: 20
  //DEBUG: e.AST: 21
  //DEBUG: s.OptTree: 25

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & BackEnd=7/4 AsIs: (/7 AsIs: e.OutputName/5 AsIs: )/8 AsIs: (/11 AsIs: e.SrcName/9 AsIs: )/12 AsIs: s.GenMode/13 AsIs: s.DebugInfo/14 AsIs: s.OptPattern/15 AsIs: s.OptResult/16 AsIs: t.Config/17 } Tile{ AsIs: s.OptTree/25 } Tile{ HalfReuse: </23 } Tile{ HalfReuse: & Desugar/24 } Tile{ AsIs: s.MarkupContext/19 AsIs: s.ConditionsMode/20 } Tile{ AsIs: e.AST/21 } >/26 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_call(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_gen_BackEnd_A7]);
  refalrts::reinit_open_call(context[23]);
  refalrts::reinit_name(context[24], functions[efunc_Desugar]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[26] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_elem( res, context[25] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_BackEnd_A6("BackEnd=6", COOKIE1_, COOKIE2_, func_gen_BackEnd_A6);


static refalrts::FnResult func_gen_BackEnd_A5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & BackEnd=5/4 (/7 e.OutputName/5 )/8 (/11 e.SrcName/9 )/12 s.DebugInfo/13 s.OptPattern/14 s.OptResult/15 t.Config/16 s.MarkupContext/18 s.ConditionsMode/19 (/22 e.AST/20 )/23 s.GenMode/24 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.OutputName as range 5
  // closed e.SrcName as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[15], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[17] = refalrts::tvar_left( context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[18], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[19], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  // closed e.AST as range 20
  if( ! refalrts::svar_left( context[24], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.OutputName: 5
  //DEBUG: e.SrcName: 9
  //DEBUG: s.DebugInfo: 13
  //DEBUG: s.OptPattern: 14
  //DEBUG: s.OptResult: 15
  //DEBUG: t.Config: 16
  //DEBUG: s.MarkupContext: 18
  //DEBUG: s.ConditionsMode: 19
  //DEBUG: e.AST: 20
  //DEBUG: s.GenMode: 24

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.GenMode/24 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & BackEnd=6/4 AsIs: (/7 AsIs: e.OutputName/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.SrcName/9 } )/25 Tile{ HalfReuse: s.GenMode24 /12 AsIs: s.DebugInfo/13 AsIs: s.OptPattern/14 AsIs: s.OptResult/15 AsIs: t.Config/16 AsIs: s.MarkupContext/18 AsIs: s.ConditionsMode/19 AsIs: (/22 AsIs: e.AST/20 AsIs: )/23 } </26 & Config-GetOptTree/27 t.Config/16/28 >/30 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[25]);
  refalrts::alloc_open_call(vm, context[26]);
  refalrts::alloc_name(vm, context[27], functions[efunc_Configm_GetOptTree]);
  refalrts::copy_evar(vm, context[28], context[29], context[16], context[17]);
  refalrts::alloc_close_call(vm, context[30]);
  refalrts::update_name(context[4], functions[efunc_gen_BackEnd_A6]);
  refalrts::reinit_svar( context[12], context[24] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[26] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[11], context[25] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[26], context[30] );
  res = refalrts::splice_evar( res, context[12], context[23] );
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[11], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_BackEnd_A5("BackEnd=5", COOKIE1_, COOKIE2_, func_gen_BackEnd_A5);


static refalrts::FnResult func_gen_BackEnd_A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & BackEnd=4/4 (/7 e.OutputName/5 )/8 (/11 e.SrcName/9 )/12 s.DebugInfo/13 s.OptPattern/14 s.OptResult/15 t.Config/16 s.MarkupContext/18 (/21 e.AST/19 )/22 s.ConditionsMode/23 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.OutputName as range 5
  // closed e.SrcName as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[15], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[17] = refalrts::tvar_left( context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[18], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.AST as range 19
  if( ! refalrts::svar_left( context[23], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.OutputName: 5
  //DEBUG: e.SrcName: 9
  //DEBUG: s.DebugInfo: 13
  //DEBUG: s.OptPattern: 14
  //DEBUG: s.OptResult: 15
  //DEBUG: t.Config: 16
  //DEBUG: s.MarkupContext: 18
  //DEBUG: e.AST: 19
  //DEBUG: s.ConditionsMode: 23

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.ConditionsMode/23 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & BackEnd=5/4 AsIs: (/7 AsIs: e.OutputName/5 AsIs: )/8 AsIs: (/11 AsIs: e.SrcName/9 AsIs: )/12 AsIs: s.DebugInfo/13 AsIs: s.OptPattern/14 AsIs: s.OptResult/15 AsIs: t.Config/16 AsIs: s.MarkupContext/18 HalfReuse: s.ConditionsMode23 /21 } (/24 Tile{ AsIs: e.AST/19 } Tile{ AsIs: )/22 } </25 & Config-GetGenMode/26 t.Config/16/27 >/29 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[24]);
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_Configm_GetGenMode]);
  refalrts::copy_evar(vm, context[27], context[28], context[16], context[17]);
  refalrts::alloc_close_call(vm, context[29]);
  refalrts::update_name(context[4], functions[efunc_gen_BackEnd_A5]);
  refalrts::reinit_svar( context[21], context[23] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[29] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[24], context[22] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[25], context[29] );
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_elem( res, context[24] );
  refalrts::splice_to_freelist_open( vm, context[21], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_BackEnd_A4("BackEnd=4", COOKIE1_, COOKIE2_, func_gen_BackEnd_A4);


static refalrts::FnResult func_gen_BackEnd_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & BackEnd=3/4 (/7 e.OutputName/5 )/8 (/11 e.SrcName/9 )/12 s.DebugInfo/13 s.OptPattern/14 t.Config/15 s.MarkupContext/17 (/20 e.AST/18 )/21 s.OptResult/22 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.OutputName as range 5
  // closed e.SrcName as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[17], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  // closed e.AST as range 18
  if( ! refalrts::svar_left( context[22], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.OutputName: 5
  //DEBUG: e.SrcName: 9
  //DEBUG: s.DebugInfo: 13
  //DEBUG: s.OptPattern: 14
  //DEBUG: t.Config: 15
  //DEBUG: s.MarkupContext: 17
  //DEBUG: e.AST: 18
  //DEBUG: s.OptResult: 22

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & BackEnd=4/4 AsIs: (/7 AsIs: e.OutputName/5 AsIs: )/8 AsIs: (/11 AsIs: e.SrcName/9 AsIs: )/12 AsIs: s.DebugInfo/13 AsIs: s.OptPattern/14 } Tile{ AsIs: s.OptResult/22 } Tile{ AsIs: t.Config/15 AsIs: s.MarkupContext/17 AsIs: (/20 AsIs: e.AST/18 AsIs: )/21 } </23 & Config-GetConditionsMode/24 t.Config/15/25 >/27 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_Configm_GetConditionsMode]);
  refalrts::copy_evar(vm, context[25], context[26], context[15], context[16]);
  refalrts::alloc_close_call(vm, context[27]);
  refalrts::update_name(context[4], functions[efunc_gen_BackEnd_A4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[23], context[27] );
  res = refalrts::splice_evar( res, context[15], context[21] );
  res = refalrts::splice_elem( res, context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_BackEnd_A3("BackEnd=3", COOKIE1_, COOKIE2_, func_gen_BackEnd_A3);


static refalrts::FnResult func_gen_BackEnd_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & BackEnd=2/4 (/7 e.OutputName/5 )/8 (/11 e.SrcName/9 )/12 s.DebugInfo/13 t.Config/14 s.MarkupContext/16 (/19 e.AST/17 )/20 s.OptPattern/21 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.OutputName as range 5
  // closed e.SrcName as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[15] = refalrts::tvar_left( context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[16], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.AST as range 17
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.OutputName: 5
  //DEBUG: e.SrcName: 9
  //DEBUG: s.DebugInfo: 13
  //DEBUG: t.Config: 14
  //DEBUG: s.MarkupContext: 16
  //DEBUG: e.AST: 17
  //DEBUG: s.OptPattern: 21

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & BackEnd=3/4 AsIs: (/7 AsIs: e.OutputName/5 AsIs: )/8 AsIs: (/11 AsIs: e.SrcName/9 AsIs: )/12 AsIs: s.DebugInfo/13 } Tile{ AsIs: s.OptPattern/21 } Tile{ AsIs: t.Config/14 AsIs: s.MarkupContext/16 AsIs: (/19 AsIs: e.AST/17 AsIs: )/20 } </22 & Config-GetOptResult/23 t.Config/14/24 >/26 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::alloc_name(vm, context[23], functions[efunc_Configm_GetOptResult]);
  refalrts::copy_evar(vm, context[24], context[25], context[14], context[15]);
  refalrts::alloc_close_call(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_gen_BackEnd_A3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[26] );
  refalrts::push_stack( vm, context[22] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[22], context[26] );
  res = refalrts::splice_evar( res, context[14], context[20] );
  res = refalrts::splice_elem( res, context[21] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_BackEnd_A2("BackEnd=2", COOKIE1_, COOKIE2_, func_gen_BackEnd_A2);


static refalrts::FnResult func_gen_BackEnd_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & BackEnd=1/4 (/7 e.OutputName/5 )/8 (/11 e.SrcName/9 )/12 t.Config/13 (/17 e.AST/15 )/18 s.MarkupContext/19 s.DebugInfo/20 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.OutputName as range 5
  // closed e.SrcName as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.AST as range 15
  if( ! refalrts::svar_left( context[19], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[20], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.OutputName: 5
  //DEBUG: e.SrcName: 9
  //DEBUG: t.Config: 13
  //DEBUG: e.AST: 15
  //DEBUG: s.MarkupContext: 19
  //DEBUG: s.DebugInfo: 20

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & BackEnd=2/4 AsIs: (/7 AsIs: e.OutputName/5 AsIs: )/8 AsIs: (/11 AsIs: e.SrcName/9 AsIs: )/12 } Tile{ AsIs: s.DebugInfo/20 } Tile{ AsIs: t.Config/13 } Tile{ AsIs: s.MarkupContext/19 } Tile{ AsIs: (/17 AsIs: e.AST/15 AsIs: )/18 } </21 & Config-GetOptPattern/22 t.Config/13/23 >/25 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_Configm_GetOptPattern]);
  refalrts::copy_evar(vm, context[23], context[24], context[13], context[14]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::update_name(context[4], functions[efunc_gen_BackEnd_A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[21], context[25] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[20] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_BackEnd_A1("BackEnd=1", COOKIE1_, COOKIE2_, func_gen_BackEnd_A1);


static refalrts::FnResult func_BackEnd(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & BackEnd/4 t.Config/5 (/9 e.SrcName/7 )/10 (/13 e.OutputName/11 )/14 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.SrcName as range 7
  // closed e.OutputName as range 11
  // closed e.AST as range 2
  //DEBUG: t.Config: 5
  //DEBUG: e.SrcName: 7
  //DEBUG: e.OutputName: 11
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </15 Tile{ HalfReuse: & BackEnd=1/10 AsIs: (/13 AsIs: e.OutputName/11 AsIs: )/14 } (/16 Tile{ AsIs: e.SrcName/7 } )/17 t.Config/5/18 (/20 Tile{ AsIs: e.AST/2 } )/21 Tile{ AsIs: </0 Reuse: & Config-GetDebugMode/4 AsIs: t.Config/5 HalfReuse: >/9 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::copy_evar(vm, context[18], context[19], context[5], context[6]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::reinit_name(context[10], functions[efunc_gen_BackEnd_A1]);
  refalrts::update_name(context[4], functions[efunc_Configm_GetDebugMode]);
  refalrts::reinit_close_call(context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[0], context[9] );
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[17], context[20] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[10], context[14] );
  res = refalrts::splice_elem( res, context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_BackEnd("BackEnd", 0U, 0U, func_BackEnd);


static refalrts::FnResult func_gen_BackEndm_RASLModule_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & BackEnd-RASLModule:1/4 (/7 e.OutputName/5 )/8 e.ByteStream/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.OutputName as range 5
  // closed e.ByteStream as range 2
  //DEBUG: e.OutputName: 5
  //DEBUG: e.ByteStream: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & SaveBytes/4 AsIs: (/7 AsIs: e.OutputName/5 AsIs: )/8 AsIs: e.ByteStream/2 AsIs: >/1 } # Success/9 e.OutputName/5/10 Tile{ ]] }
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Success]);
  refalrts::copy_evar(vm, context[10], context[11], context[5], context[6]);
  refalrts::update_name(context[4], functions[efunc_SaveBytes]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_elem( res, context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_BackEndm_RASLModule_B1("BackEnd-RASLModule:1", COOKIE1_, COOKIE2_, func_gen_BackEndm_RASLModule_B1);


static refalrts::FnResult func_BackEndm_RASLModule(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & BackEnd-RASLModule/4 t.RASLModule/5 e.OutputName/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.OutputName as range 2
  //DEBUG: t.RASLModule: 5
  //DEBUG: e.OutputName: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & BackEnd-RASLModule:1/4 } (/7 Tile{ AsIs: e.OutputName/2 } )/8 </9 & GenProgram-RASL/10 Tile{ AsIs: t.RASLModule/5 } >/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_GenProgramm_RASL]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_BackEndm_RASLModule_B1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[8], context[10] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_BackEndm_RASLModule("BackEnd-RASLModule", COOKIE1_, COOKIE2_, func_BackEndm_RASLModule);


static refalrts::FnResult func_BackEndm_NativeModule(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & BackEnd-NativeModule/4 t.NativeModule/5 (/9 e.SrcName/7 )/10 e.OutputName/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.SrcName as range 7
  // closed e.OutputName as range 2
  //DEBUG: t.NativeModule: 5
  //DEBUG: e.SrcName: 7
  //DEBUG: e.OutputName: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & SaveFile/4 } (/11 e.OutputName/2/12 )/14 </15 & GenProgram-Native/16 Tile{ AsIs: (/9 AsIs: e.SrcName/7 AsIs: )/10 } (/17 Tile{ AsIs: e.OutputName/2 } )/18 Tile{ AsIs: t.NativeModule/5 } >/19 >/20 (/21 e.OutputName/2/22 Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::copy_evar(vm, context[12], context[13], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_GenProgramm_Native]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::alloc_close_call(vm, context[20]);
  refalrts::alloc_open_bracket(vm, context[21]);
  refalrts::copy_evar(vm, context[22], context[23], context[2], context[3]);
  refalrts::update_name(context[4], functions[efunc_SaveFile]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[21], context[1] );
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[11], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[19], context[21] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[11], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_BackEndm_NativeModule("BackEnd-NativeModule", COOKIE1_, COOKIE2_, func_BackEndm_NativeModule);


static refalrts::FnResult func_gen_CreateMetaFunctions_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & CreateMetaFunctions$1=1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CreateMetaFunctions$1=1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & CreateMetaFunctions$1=1/4 (/7 t./19 s._ScopeClass/21 e.0/13 )/8 (/11 e.FunctionNames/15 )/12 e.AST/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.FunctionNames as range 15
    // closed e.AST as range 17
    context[20] = refalrts::tvar_left( context[19], context[13], context[14] );
    if( ! context[20] )
      continue;
    if( ! refalrts::svar_left( context[21], context[13], context[14] ) )
      continue;
    // closed e.0 as range 13
    //DEBUG: e.FunctionNames: 15
    //DEBUG: e.AST: 17
    //DEBUG: t.: 19
    //DEBUG: s._ScopeClass: 21
    //DEBUG: e.0: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s._ScopeClass/21 e.0/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.AST/17 } (/22 # Function/23 t./19/24 Tile{ HalfReuse: # GN-Local/8 AsIs: (/11 }"$table"/26 Tile{ AsIs: )/12 } Tile{ HalfReuse: # Metatable/0 HalfReuse: </4 HalfReuse: & Map@11/7 AsIs: t./19 } Tile{ AsIs: e.FunctionNames/15 } >/28 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::alloc_ident(vm, context[23], identifiers[ident_Function]);
    refalrts::copy_evar(vm, context[24], context[25], context[19], context[20]);
    refalrts::alloc_chars(vm, context[26], context[27], "$table", 6);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::reinit_ident(context[8], identifiers[ident_GNm_Local]);
    refalrts::reinit_ident(context[0], identifiers[ident_Metatable]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_gen_Map_Z11]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[22], context[1] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[4] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[0], context[20] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_evar( res, context[22], context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CreateMetaFunctions$1=1/4 (/7 e.MetaInfo/5 )/8 (/11 e.FunctionNames/9 )/12 e.AST/2 >/1
  // closed e.MetaInfo as range 5
  // closed e.FunctionNames as range 9
  // closed e.AST as range 2
  //DEBUG: e.MetaInfo: 5
  //DEBUG: e.FunctionNames: 9
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CreateMetaFunctions$1=2*1/4 AsIs: (/7 } Tile{ AsIs: e.AST/2 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.FunctionNames/9 AsIs: )/12 } Tile{ AsIs: e.MetaInfo/5 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CreateMetaFunctions_S1A2D1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[8], context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CreateMetaFunctions_S1A1("CreateMetaFunctions$1=1", COOKIE1_, COOKIE2_, func_gen_CreateMetaFunctions_S1A1);


static refalrts::FnResult func_CreateMetaFunctions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & CreateMetaFunctions/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & CreateMetaFunctions/4 e.AST-B/7 (/13 # Meta/15 e.MetaInfo/11 )/14 e.AST-E/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Meta], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e.MetaInfo as range 11
      // closed e.AST-E as range 9
      //DEBUG: e.AST-B: 7
      //DEBUG: e.MetaInfo: 11
      //DEBUG: e.AST-E: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </16 & CreateMetaFunctions$1=1/17 (/18 e.MetaInfo/11/19 )/21 </22 & DoMapAccum@2/23 (/24 )/25 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.AST-B/7 AsIs: (/13 AsIs: # Meta/15 AsIs: e.MetaInfo/11 AsIs: )/14 AsIs: e.AST-E/9 AsIs: >/1 } >/26 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_gen_CreateMetaFunctions_S1A1]);
      refalrts::alloc_open_bracket(vm, context[18]);
      refalrts::copy_evar(vm, context[19], context[20], context[11], context[12]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::alloc_open_call(vm, context[22]);
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_DoMapAccum_Z2]);
      refalrts::alloc_open_bracket(vm, context[24]);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[22] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[0], context[4] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[18], context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[0], context[1] );
      res = refalrts::splice_evar( res, context[16], context[25] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CreateMetaFunctions/4 e.AST/2 >/1
  // closed e.AST as range 2
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CreateMetaFunctions/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.AST/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CreateMetaFunctions("CreateMetaFunctions", COOKIE1_, COOKIE2_, func_CreateMetaFunctions);


static refalrts::FnResult func_gen_GrammarCheck_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & GrammarCheck:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & GrammarCheck:1/4 s.new1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & GrammarCheck:1/4 # EL-NoErrors/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ELm_NoErrors], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & GrammarCheck:1/4 # EL-NoErrors/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # Success/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_Success]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GrammarCheck:1/4 # EL-HasErrors/5 >/1
  if( ! refalrts::ident_term( identifiers[ident_ELm_HasErrors], context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & GrammarCheck:1/4 # EL-HasErrors/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Fails/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_Fails]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GrammarCheck_B1("GrammarCheck:1", COOKIE1_, COOKIE2_, func_gen_GrammarCheck_B1);


static refalrts::FnResult func_gen_GrammarCheck_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & GrammarCheck=1/4 t.Config/5 t.ErrorList/7 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.AST as range 2
  //DEBUG: t.Config: 5
  //DEBUG: t.ErrorList: 7
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.AST/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & GrammarCheck:1/4 } </9 & EL-Destroy/10 Tile{ AsIs: t.ErrorList/7 } (/11 </12 & Config-GetWarningIds/13 Tile{ AsIs: t.Config/5 } >/14 )/15 (/16 </17 & Config-GetWarningIdsAsErrors/18 t.Config/5/19 >/21 )/22 >/23 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_ELm_Destroy]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_open_call(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_Configm_GetWarningIds]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_Configm_GetWarningIdsAsErrors]);
  refalrts::copy_evar(vm, context[19], context[20], context[5], context[6]);
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::update_name(context[4], functions[efunc_gen_GrammarCheck_B1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[16], context[22] );
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[11], context[15] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[14], context[23] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[13] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GrammarCheck_A1("GrammarCheck=1", COOKIE1_, COOKIE2_, func_gen_GrammarCheck_A1);


static refalrts::FnResult func_GrammarCheck(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & GrammarCheck/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & GrammarCheck/4 t.new1/5 s.new2/7 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & GrammarCheck/4 t.Config/5 # R5/7 e.SrcName/8 >/1
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_R5], context[7] ) )
      continue;
    // closed e.SrcName as range 8
    //DEBUG: t.Config: 5
    //DEBUG: e.SrcName: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </10 & GrammarCheck=1/11 t.Config/5/12 Tile{ AsIs: </0 Reuse: & LoadAST$1=1/4 AsIs: t.Config/5 HalfReuse: (/7 AsIs: e.SrcName/8 HalfReuse: )/1 } </14 & Config-GetR5Mode/15 t.Config/5/16 >/18 >/19 >/20 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_GrammarCheck_A1]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_Configm_GetR5Mode]);
    refalrts::copy_evar(vm, context[16], context[17], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::update_name(context[4], functions[efunc_gen_LoadAST_S1A1]);
    refalrts::reinit_open_bracket(context[7]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[14] );
    refalrts::link_brackets( context[7], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[10], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GrammarCheck/4 t.Config/5 # SR/7 e.SrcName/8 >/1
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_SR], context[7] ) )
      continue;
    // closed e.SrcName as range 8
    //DEBUG: t.Config: 5
    //DEBUG: e.SrcName: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & GrammarCheck=1/4 AsIs: t.Config/5 HalfReuse: </7 } & LoadAST$2=1/10 (/11 e.SrcName/8/12 )/14 </15 & SR-Scan/16 Tile{ AsIs: e.SrcName/8 } >/17 >/18 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[10], functions[efunc_gen_LoadAST_S2A1]);
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::copy_evar(vm, context[12], context[13], context[8], context[9]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_SRm_Scan]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::update_name(context[4], functions[efunc_gen_GrammarCheck_A1]);
    refalrts::reinit_open_call(context[7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[11], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_evar( res, context[10], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GrammarCheck/4 t.new4/5 # RSL/7 e.new5/8 >/1
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_RSL], context[7] ) )
      continue;
    // closed e.new5 as range 8
    do {
      // </0 & GrammarCheck/4 t.Config/5 # RSL/7 e.2/10 '.'/15 'r'/14 's'/13 'l'/12 >/1
      context[10] = context[8];
      context[11] = context[9];
      context[12] = refalrts::char_right( 'l', context[10], context[11] );
      if( ! context[12] )
        continue;
      context[13] = refalrts::char_right( 's', context[10], context[11] );
      if( ! context[13] )
        continue;
      context[14] = refalrts::char_right( 'r', context[10], context[11] );
      if( ! context[14] )
        continue;
      context[15] = refalrts::char_right( '.', context[10], context[11] );
      if( ! context[15] )
        continue;
      // closed e.2 as range 10
      //DEBUG: t.Config: 5
      //DEBUG: e.2: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & GrammarCheck=1/4 AsIs: t.Config/5 } </16 & LoadAST$3:1@2/17 (/18 e.2/10/19 )/21 t.Config/5/22 </24 & System/25"rl-rsl-decompiler"/26 Tile{ HalfReuse: ' '/7 AsIs: e.2/10 AsIs: '.'/15 AsIs: 'r'/14 AsIs: 's'/13 AsIs: 'l'/12 AsIs: >/1 } </28 & ExistFile/29 e.2/10/30"-decompiled.ref"/32 >/34 >/35 >/36 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_gen_LoadAST_S3B1Z2]);
      refalrts::alloc_open_bracket(vm, context[18]);
      refalrts::copy_evar(vm, context[19], context[20], context[10], context[11]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::copy_evar(vm, context[22], context[23], context[5], context[6]);
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_name(vm, context[25], functions[efunc_System]);
      refalrts::alloc_chars(vm, context[26], context[27], "rl-rsl-decompiler", 17);
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_ExistFile]);
      refalrts::copy_evar(vm, context[30], context[31], context[10], context[11]);
      refalrts::alloc_chars(vm, context[32], context[33], "-decompiled.ref", 15);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::alloc_close_call(vm, context[35]);
      refalrts::alloc_close_call(vm, context[36]);
      refalrts::update_name(context[4], functions[efunc_gen_GrammarCheck_A1]);
      refalrts::reinit_char(context[7], ' ');
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[24] );
      refalrts::link_brackets( context[18], context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[28], context[36] );
      res = refalrts::splice_evar( res, context[7], context[1] );
      res = refalrts::splice_evar( res, context[16], context[27] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GrammarCheck/4 t.Config/5 # RSL/7 e.SrcName/10 >/1
    context[10] = context[8];
    context[11] = context[9];
    // closed e.SrcName as range 10
    //DEBUG: t.Config: 5
    //DEBUG: e.SrcName: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </12 & GrammarCheck=1/13 t.Config/5/14 Tile{ AsIs: </0 Reuse: & LoadAST$3=1*1/4 AsIs: t.Config/5 HalfReuse: (/7 AsIs: e.SrcName/10 HalfReuse: )/1 } e.SrcName/10/16 >/18 >/19 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_GrammarCheck_A1]);
    refalrts::copy_evar(vm, context[14], context[15], context[5], context[6]);
    refalrts::copy_evar(vm, context[16], context[17], context[10], context[11]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_gen_LoadAST_S3A1D1]);
    refalrts::reinit_open_bracket(context[7]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GrammarCheck/4 t.Config/5 s.Dialect/7 e.SrcName/2 >/1
  // closed e.SrcName as range 2
  //DEBUG: t.Config: 5
  //DEBUG: s.Dialect: 7
  //DEBUG: e.SrcName: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </8 & GrammarCheck=1/9 t.Config/5/10 Tile{ AsIs: </0 Reuse: & LoadAST*4/4 AsIs: t.Config/5 AsIs: s.Dialect/7 AsIs: e.SrcName/2 AsIs: >/1 } >/12 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_GrammarCheck_A1]);
  refalrts::copy_evar(vm, context[10], context[11], context[5], context[6]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_LoadAST_D4]);
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_GrammarCheck("GrammarCheck", 0U, 0U, func_GrammarCheck);


static refalrts::FnResult func_GlobalASTStoragem_Create(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & GlobalASTStorage-Create/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 HalfReuse: 1/1 } )/5 (/6 )/7 (/8 )/9 )/10 Tile{ ]] }
  refalrts::alloc_close_bracket(vm, context[5]);
  refalrts::alloc_open_bracket(vm, context[6]);
  refalrts::alloc_close_bracket(vm, context[7]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_number(context[1], 1UL);
  refalrts::link_brackets( context[0], context[10] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[6], context[7] );
  refalrts::link_brackets( context[4], context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_GlobalASTStoragem_Create("GlobalASTStorage-Create", 0U, 0U, func_GlobalASTStoragem_Create);


static refalrts::FnResult func_gen_GlobalASTStoragem_AddAST_A4L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & GlobalASTStorage-AddAST=4\1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & GlobalASTStorage-AddAST=4\1/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & GlobalASTStorage-AddAST=4\1/4 (/7 e.Locals$a/11 )/8 s.NextLocalId/9 # SrcPos/10 t.SrcPos/15 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_SrcPos], context[10] ) )
      continue;
    // closed e.Locals$a as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    //DEBUG: s.NextLocalId: 9
    //DEBUG: e.Locals$a: 11
    //DEBUG: t.SrcPos: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & GlobalASTStorage-AddAST=4\1/4 (/7 e.Locals$a/11 )/8 s.NextLocalId/9 # SrcPos/10 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.SrcPos/15 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GlobalASTStorage-AddAST=4\1/4 (/7 e.new7/5 )/8 s.new5/9 # Name/10 e.new6/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_Name], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new7 as range 5
  // closed e.new6 as range 2
  do {
    // </0 & GlobalASTStorage-AddAST=4\1/4 (/7 e.Locals$a/11 )/8 s.NextLocalId/9 # Name/10 e.Name/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Locals$a as range 11
    // closed e.Name as range 13
    //DEBUG: s.NextLocalId: 9
    //DEBUG: e.Locals$a: 11
    //DEBUG: e.Name: 13
    //9: s.NextLocalId
    //11: e.Locals$a
    //13: e.Name
    //18: e.Locals$a

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[17], functions[efunc_gen_GlobalASTStoragem_AddAST_A4L1S2C1]);
    refalrts::copy_evar(vm, context[18], context[19], context[11], context[12]);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[15] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[15] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </15 & GlobalASTStorage-AddAST=4\1$2?1/19 e._/20 (/26 e.Name/28 t._/30 )/27 e._0/22 >/16
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::call_left( context[17], context[18], context[15], context[16] );
      context[20] = 0;
      context[21] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[22] = context[17];
        context[23] = context[18];
        context[24] = 0;
        context[25] = 0;
        context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
        if( ! context[26] )
          continue;
        refalrts::bracket_pointers(context[26], context[27]);
        if( ! refalrts::repeated_evar_left( vm, context[28], context[29], context[13], context[14], context[24], context[25] ) )
          continue;
        // closed e._0 as range 22
        context[31] = refalrts::tvar_left( context[30], context[24], context[25] );
        if( ! context[31] )
          continue;
        if( ! refalrts::empty_seq( context[24], context[25] ) )
          continue;
        //DEBUG: s.NextLocalId: 9
        //DEBUG: e.Locals$a: 11
        //DEBUG: e.Name: 13
        //DEBUG: e._: 20
        //DEBUG: e._0: 22
        //DEBUG: t._: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & GlobalASTStorage-AddAST=4\1/4 (/7 e.Locals$a/11 )/8 s.NextLocalId/9 {REMOVED TILE} e.Name/13 </15 & GlobalASTStorage-AddAST=4\1$2?1/19 e._/20 (/26 {REMOVED TILE} t._/30 )/27 e._0/22 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: e.Name/28 } Tile{ Reuse: # SUF/10 } Tile{ HalfReuse: '~'/16 HalfReuse: s.NextLocalId9 /1 ]] }
        refalrts::update_ident(context[10], identifiers[ident_SUF]);
        refalrts::reinit_char(context[16], '~');
        refalrts::reinit_svar( context[1], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[16];
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[20], context[21], context[17], context[18] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[15], context[16]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GlobalASTStorage-AddAST=4\1/4 (/7 e.Locals$a/5 )/8 s.NextLocalId/9 # Name/10 e.Name/2 >/1
  // closed e.Locals$a as range 5
  // closed e.Name as range 2
  //DEBUG: s.NextLocalId: 9
  //DEBUG: e.Locals$a: 5
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & GlobalASTStorage-AddAST=4\1/4 (/7 e.Locals$a/5 )/8 s.NextLocalId/9 # Name/10 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Name/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GlobalASTStoragem_AddAST_A4L1("GlobalASTStorage-AddAST=4\\1", COOKIE1_, COOKIE2_, func_gen_GlobalASTStoragem_AddAST_A4L1);


static refalrts::FnResult func_gen_GlobalASTStoragem_AddAST_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & GlobalASTStorage-AddAST=2/4 s.NextLocalId/5 (/8 e.ASTs/6 )/9 (/12 e.AST$a/10 )/13 (/16 e.Inits/14 )/17 (/20 e.Finals/18 )/21 (/24 e.NewEntries/22 )/25 (/28 e.Entries/26 )/29 e.Locals$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  // closed e.ASTs as range 6
  // closed e.AST$a as range 10
  // closed e.Inits as range 14
  // closed e.Finals as range 18
  // closed e.NewEntries as range 22
  // closed e.Entries as range 26
  // closed e.Locals$a as range 2
  //DEBUG: s.NextLocalId: 5
  //DEBUG: e.ASTs: 6
  //DEBUG: e.AST$a: 10
  //DEBUG: e.Inits: 14
  //DEBUG: e.Finals: 18
  //DEBUG: e.NewEntries: 22
  //DEBUG: e.Entries: 26
  //DEBUG: e.Locals$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/25 AsIs: (/28 } </30 & Add/31 1/32 s.NextLocalId/5/33 >/34 Tile{ AsIs: e.NewEntries/22 } Tile{ AsIs: e.Entries/26 } )/35 Tile{ AsIs: e.ASTs/6 } </36 & Map@12/37 Tile{ AsIs: (/8 } e.Locals$a/2/38 Tile{ AsIs: )/9 HalfReuse: s.NextLocalId5 /12 AsIs: e.AST$a/10 HalfReuse: >/13 AsIs: (/16 AsIs: e.Inits/14 HalfReuse: </17 HalfReuse: & AddInitFinalFunc:1@1/20 } Tile{ HalfReuse: s.NextLocalId5 /29 AsIs: e.Locals$a/2 AsIs: >/1 } Tile{ AsIs: )/21 AsIs: (/24 } Tile{ AsIs: </0 Reuse: & AddInitFinalFunc:1@2/4 AsIs: s.NextLocalId/5 } e.Locals$a/2/40 >/42 Tile{ AsIs: e.Finals/18 } )/43 )/44 s.NextLocalId/5/45 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[30]);
  refalrts::alloc_name(vm, context[31], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[32], 1UL);
  refalrts::copy_stvar(vm, context[33], context[5]);
  refalrts::alloc_close_call(vm, context[34]);
  refalrts::alloc_close_bracket(vm, context[35]);
  refalrts::alloc_open_call(vm, context[36]);
  refalrts::alloc_name(vm, context[37], functions[efunc_gen_Map_Z12]);
  refalrts::copy_evar(vm, context[38], context[39], context[2], context[3]);
  refalrts::copy_evar(vm, context[40], context[41], context[2], context[3]);
  refalrts::alloc_close_call(vm, context[42]);
  refalrts::alloc_close_bracket(vm, context[43]);
  refalrts::alloc_close_bracket(vm, context[44]);
  refalrts::copy_stvar(vm, context[45], context[5]);
  refalrts::reinit_open_bracket(context[25]);
  refalrts::reinit_svar( context[12], context[5] );
  refalrts::reinit_close_call(context[13]);
  refalrts::reinit_open_call(context[17]);
  refalrts::reinit_name(context[20], functions[efunc_gen_AddInitFinalFunc_B1Z1]);
  refalrts::reinit_svar( context[29], context[5] );
  refalrts::update_name(context[4], functions[efunc_gen_AddInitFinalFunc_B1Z2]);
  refalrts::link_brackets( context[25], context[44] );
  refalrts::link_brackets( context[24], context[43] );
  refalrts::push_stack( vm, context[42] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[21] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[36] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[28], context[35] );
  refalrts::push_stack( vm, context[34] );
  refalrts::push_stack( vm, context[30] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[43], context[45] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_elem( res, context[42] );
  res = refalrts::splice_evar( res, context[40], context[41] );
  res = refalrts::splice_evar( res, context[0], context[5] );
  res = refalrts::splice_evar( res, context[21], context[24] );
  res = refalrts::splice_evar( res, context[29], context[1] );
  res = refalrts::splice_evar( res, context[9], context[20] );
  res = refalrts::splice_evar( res, context[38], context[39] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[36], context[37] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_elem( res, context[35] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[30], context[34] );
  res = refalrts::splice_evar( res, context[25], context[28] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GlobalASTStoragem_AddAST_A2("GlobalASTStorage-AddAST=2", COOKIE1_, COOKIE2_, func_gen_GlobalASTStoragem_AddAST_A2);


static refalrts::FnResult func_gen_GlobalASTStoragem_AddAST_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & GlobalASTStorage-AddAST=1/4 s.NextLocalId/5 (/8 e.ASTs/6 )/9 (/12 e.Inits/10 )/13 (/16 e.Finals/14 )/17 (/20 e.Entries/18 )/21 (/24 (/28 e.NewEntries/26 )/29 (/32 e.Locals/30 )/33 )/25 e.AST$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  context[26] = 0;
  context[27] = 0;
  context[28] = refalrts::brackets_left( context[26], context[27], context[22], context[23] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[28], context[29]);
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[22], context[23] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  if( ! refalrts::empty_seq( context[22], context[23] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.ASTs as range 6
  // closed e.Inits as range 10
  // closed e.Finals as range 14
  // closed e.Entries as range 18
  // closed e.NewEntries as range 26
  // closed e.Locals as range 30
  // closed e.AST$a as range 2
  //DEBUG: s.NextLocalId: 5
  //DEBUG: e.ASTs: 6
  //DEBUG: e.Inits: 10
  //DEBUG: e.Finals: 14
  //DEBUG: e.Entries: 18
  //DEBUG: e.NewEntries: 26
  //DEBUG: e.Locals: 30
  //DEBUG: e.AST$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & GlobalASTStorage-AddAST=2/4 AsIs: s.NextLocalId/5 AsIs: (/8 } Tile{ AsIs: e.ASTs/6 } )/34 (/35 Tile{ AsIs: e.AST$a/2 } Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.Inits/10 AsIs: )/13 AsIs: (/16 AsIs: e.Finals/14 AsIs: )/17 AsIs: (/20 } e.NewEntries/26/36 Tile{ AsIs: )/21 AsIs: (/24 } Tile{ AsIs: e.Entries/18 } Tile{ AsIs: )/33 HalfReuse: </25 } & CleanupLocals/38 Tile{ AsIs: e.Locals/30 } Tile{ AsIs: (/28 AsIs: e.NewEntries/26 AsIs: )/29 HalfReuse: >/32 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[34]);
  refalrts::alloc_open_bracket(vm, context[35]);
  refalrts::copy_evar(vm, context[36], context[37], context[26], context[27]);
  refalrts::alloc_name(vm, context[38], functions[efunc_CleanupLocals]);
  refalrts::update_name(context[4], functions[efunc_gen_GlobalASTStoragem_AddAST_A2]);
  refalrts::reinit_open_call(context[25]);
  refalrts::reinit_close_call(context[32]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[24], context[33] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[35], context[9] );
  refalrts::link_brackets( context[8], context[34] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[28], context[32] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  res = refalrts::splice_elem( res, context[38] );
  res = refalrts::splice_evar( res, context[33], context[25] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[21], context[24] );
  res = refalrts::splice_evar( res, context[36], context[37] );
  res = refalrts::splice_evar( res, context[9], context[20] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[34], context[35] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GlobalASTStoragem_AddAST_A1("GlobalASTStorage-AddAST=1", COOKIE1_, COOKIE2_, func_gen_GlobalASTStoragem_AddAST_A1);


static refalrts::FnResult func_GlobalASTStoragem_AddAST(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & GlobalASTStorage-AddAST/4 (/7 (/11 s.NextLocalId/21 e.Entries/9 )/12 e.ASTs/5 (/19 e.Inits/17 )/20 (/15 e.Finals/13 )/16 )/8 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[5], context[6] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[5], context[6] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.ASTs as range 5
  // closed e.Inits as range 17
  // closed e.Finals as range 13
  // closed e.AST as range 2
  if( ! refalrts::svar_left( context[21], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Entries as range 9
  //DEBUG: e.ASTs: 5
  //DEBUG: e.Inits: 17
  //DEBUG: e.Finals: 13
  //DEBUG: e.AST: 2
  //DEBUG: s.NextLocalId: 21
  //DEBUG: e.Entries: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.NextLocalId/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & GlobalASTStorage-AddAST=1/4 HalfReuse: s.NextLocalId21 /7 AsIs: (/11 } Tile{ AsIs: e.ASTs/5 } Tile{ AsIs: )/12 } Tile{ AsIs: (/19 AsIs: e.Inits/17 AsIs: )/20 AsIs: (/15 AsIs: e.Finals/13 AsIs: )/16 HalfReuse: (/8 } Tile{ AsIs: e.Entries/9 } )/22 </23 & DoMapAccum@3/24 (/25 (/26 )/27 (/28 )/29 )/30 (/31 )/32 Tile{ AsIs: e.AST/2 } >/33 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_gen_DoMapAccum_Z3]);
  refalrts::alloc_open_bracket(vm, context[25]);
  refalrts::alloc_open_bracket(vm, context[26]);
  refalrts::alloc_close_bracket(vm, context[27]);
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::alloc_close_bracket(vm, context[30]);
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::alloc_close_call(vm, context[33]);
  refalrts::update_name(context[4], functions[efunc_gen_GlobalASTStoragem_AddAST_A1]);
  refalrts::reinit_svar( context[7], context[21] );
  refalrts::reinit_open_bracket(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[33] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[25], context[30] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[8], context[22] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[33] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[22], context[32] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[19], context[8] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[11], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_GlobalASTStoragem_AddAST("GlobalASTStorage-AddAST", 0U, 0U, func_GlobalASTStoragem_AddAST);


static refalrts::FnResult func_UpdateAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & UpdateAccum/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UpdateAccum/4 (/7 (/11 e.new1/9 )/12 (/15 e.new2/13 )/16 )/8 t.new3/17 s.new4/19 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[5], context[6] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 9
  // closed e.new2 as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[19], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 2
  do {
    // </0 & UpdateAccum/4 (/7 (/11 e.Entries/20 )/12 (/15 e.Locals/22 )/16 )/8 t.SrcPos/17 # GN-Entry/19 e.Name/24 >/1
    context[20] = context[9];
    context[21] = context[10];
    context[22] = context[13];
    context[23] = context[14];
    context[24] = context[2];
    context[25] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[19] ) )
      continue;
    // closed e.Entries as range 20
    // closed e.Locals as range 22
    // closed e.Name as range 24
    //DEBUG: t.SrcPos: 17
    //DEBUG: e.Entries: 20
    //DEBUG: e.Locals: 22
    //DEBUG: e.Name: 24

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 } Tile{ AsIs: e.Entries/20 } Tile{ AsIs: (/7 AsIs: (/11 } Tile{ AsIs: e.Name/24 } Tile{ HalfReuse: )/1 } Tile{ AsIs: t.SrcPos/17 HalfReuse: )/19 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Locals/22 AsIs: )/16 AsIs: )/8 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::reinit_close_bracket(context[19]);
    refalrts::link_brackets( context[0], context[8] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[4], context[12] );
    refalrts::link_brackets( context[7], context[19] );
    refalrts::link_brackets( context[11], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[12], context[8] );
    res = refalrts::splice_evar( res, context[17], context[19] );
    res = refalrts::splice_elem( res, context[1] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateAccum/4 (/7 (/11 e.Entries/9 )/12 (/15 e.Locals/13 )/16 )/8 t.SrcPos/17 # GN-Local/19 e.Name/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[19] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Entries as range 9
  // closed e.Locals as range 13
  // closed e.Name as range 2
  //DEBUG: t.SrcPos: 17
  //DEBUG: e.Entries: 9
  //DEBUG: e.Locals: 13
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & UpdateAccum/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/11 AsIs: e.Entries/9 AsIs: )/12 AsIs: (/15 AsIs: e.Locals/13 HalfReuse: (/16 } Tile{ AsIs: e.Name/2 } Tile{ AsIs: t.SrcPos/17 HalfReuse: )/19 } Tile{ AsIs: )/8 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[16]);
  refalrts::reinit_close_bracket(context[19]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[7], context[1] );
  refalrts::link_brackets( context[15], context[8] );
  refalrts::link_brackets( context[16], context[19] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[17], context[19] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[16] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UpdateAccum("UpdateAccum", COOKIE1_, COOKIE2_, func_UpdateAccum);


static refalrts::FnResult func_CleanupLocals(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & CleanupLocals/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CleanupLocals/4 e.new1/2 (/7 e.new2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 2
  // closed e.new2 as range 5
  do {
    // </0 & CleanupLocals/4 e.Locals-B/13 (/19 e.Name/17 t._/21 )/20 e.Locals-E/15 (/7 e.Entries/11 )/8 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = context[5];
    context[12] = context[6];
    // closed e.Entries as range 11
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[9];
      context[16] = context[10];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      // closed e.Locals-E as range 15
      context[22] = refalrts::tvar_right( context[21], context[17], context[18] );
      if( ! context[22] )
        continue;
      // closed e.Name as range 17
      //DEBUG: e.Entries: 11
      //DEBUG: e.Locals-B: 13
      //DEBUG: e.Locals-E: 15
      //DEBUG: t._: 21
      //DEBUG: e.Name: 17
      //11: e.Entries
      //13: e.Locals-B
      //15: e.Locals-E
      //17: e.Name
      //21: t._
      //26: e.Entries

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[25], functions[efunc_gen_CleanupLocals_S1C1]);
      refalrts::copy_evar(vm, context[26], context[27], context[11], context[12]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[23] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[23] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </23 & CleanupLocals$1?1/27 e._/28 (/34 (/38 e.Name/40 )/39 t.SrcPos/42 )/35 e._0/30 >/24
        context[25] = 0;
        context[26] = 0;
        context[27] = refalrts::call_left( context[25], context[26], context[23], context[24] );
        context[28] = 0;
        context[29] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[30] = context[25];
          context[31] = context[26];
          context[32] = 0;
          context[33] = 0;
          context[34] = refalrts::brackets_left( context[32], context[33], context[30], context[31] );
          if( ! context[34] )
            continue;
          refalrts::bracket_pointers(context[34], context[35]);
          context[36] = 0;
          context[37] = 0;
          context[38] = refalrts::brackets_left( context[36], context[37], context[32], context[33] );
          if( ! context[38] )
            continue;
          refalrts::bracket_pointers(context[38], context[39]);
          if( ! refalrts::repeated_evar_left( vm, context[40], context[41], context[17], context[18], context[36], context[37] ) )
            continue;
          if( ! refalrts::empty_seq( context[36], context[37] ) )
            continue;
          // closed e._0 as range 30
          context[43] = refalrts::tvar_left( context[42], context[32], context[33] );
          if( ! context[43] )
            continue;
          if( ! refalrts::empty_seq( context[32], context[33] ) )
            continue;
          //DEBUG: e.Entries: 11
          //DEBUG: e.Locals-B: 13
          //DEBUG: e.Locals-E: 15
          //DEBUG: t._: 21
          //DEBUG: e.Name: 17
          //DEBUG: e._: 28
          //DEBUG: e._0: 30
          //DEBUG: t.SrcPos: 42

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} & CleanupLocals/4 {REMOVED TILE} (/19 e.Name/17 t._/21 {REMOVED TILE} & CleanupLocals$1?1/27 e._/28 (/34 (/38 e.Name/40 )/39 t.SrcPos/42 )/35 e._0/30 >/24 >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: e.Locals-B/13 } Tile{ AsIs: </0 } Tile{ HalfReuse: & CleanupLocals/20 AsIs: e.Locals-E/15 AsIs: (/7 AsIs: e.Entries/11 AsIs: )/8 HalfReuse: >/23 } Tile{ ]] }
          refalrts::reinit_name(context[20], functions[efunc_CleanupLocals]);
          refalrts::reinit_close_call(context[23]);
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[20], context[23] );
          res = refalrts::splice_elem( res, context[0] );
          res = refalrts::splice_evar( res, context[13], context[14] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[28], context[29], context[25], context[26] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[23], context[24]);
      continue;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[9], context[10] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CleanupLocals/4 e.Locals/2 (/7 e.Entries/5 )/8 >/1
  // closed e.Locals as range 2
  // closed e.Entries as range 5
  //DEBUG: e.Locals: 2
  //DEBUG: e.Entries: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CleanupLocals/4 {REMOVED TILE} (/7 e.Entries/5 )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Locals/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CleanupLocals("CleanupLocals", COOKIE1_, COOKIE2_, func_CleanupLocals);


static refalrts::FnResult func_gen_AddInitFinalFunc_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & AddInitFinalFunc:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & AddInitFinalFunc:1/4 (/7 e.new1/5 )/8 s.new2/9 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & AddInitFinalFunc:1/4 (/7 e.FuncName/10 )/8 s.LocalId/9 e._/14 (/20 e.FuncName/22 t.SrcPos/24 )/21 e._0/16 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.FuncName as range 10
    context[14] = 0;
    context[15] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[16] = context[12];
      context[17] = context[13];
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[16], context[17] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      if( ! refalrts::repeated_evar_left( vm, context[22], context[23], context[10], context[11], context[18], context[19] ) )
        continue;
      // closed e._0 as range 16
      context[25] = refalrts::tvar_left( context[24], context[18], context[19] );
      if( ! context[25] )
        continue;
      if( ! refalrts::empty_seq( context[18], context[19] ) )
        continue;
      //DEBUG: s.LocalId: 9
      //DEBUG: e.FuncName: 10
      //DEBUG: e._: 14
      //DEBUG: e._0: 16
      //DEBUG: t.SrcPos: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & AddInitFinalFunc:1/4 {REMOVED TILE} {REMOVED TILE} e._/14 {REMOVED TILE} e.FuncName/22 {REMOVED TILE} e._0/16 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.FuncName/10 HalfReuse: # SUF/8 } Tile{ HalfReuse: '~'/20 } Tile{ AsIs: s.LocalId/9 } Tile{ AsIs: t.SrcPos/24 AsIs: )/21 } Tile{ ]] }
      refalrts::reinit_ident(context[8], identifiers[ident_SUF]);
      refalrts::reinit_char(context[20], '~');
      refalrts::link_brackets( context[7], context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[24], context[21] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[14], context[15], context[12], context[13] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AddInitFinalFunc:1/4 (/7 e.FuncName/5 )/8 s.LocalId/9 e._/2 >/1
  // closed e.FuncName as range 5
  // closed e._ as range 2
  //DEBUG: s.LocalId: 9
  //DEBUG: e.FuncName: 5
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & AddInitFinalFunc:1/4 (/7 e.FuncName/5 )/8 s.LocalId/9 e._/2 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_AddInitFinalFunc_B1("AddInitFinalFunc:1", COOKIE1_, COOKIE2_, func_gen_AddInitFinalFunc_B1);


static refalrts::FnResult func_AddInitFinalFunc(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & AddInitFinalFunc/4 e.Locals/2 (/8 e.FuncName/6 )/9 s.LocalId/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_right( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.Locals as range 2
  // closed e.FuncName as range 6
  //DEBUG: s.LocalId: 5
  //DEBUG: e.Locals: 2
  //DEBUG: e.FuncName: 6

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & AddInitFinalFunc:1/4 } Tile{ AsIs: (/8 AsIs: e.FuncName/6 AsIs: )/9 AsIs: s.LocalId/5 } Tile{ AsIs: e.Locals/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_AddInitFinalFunc_B1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[8], context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_AddInitFinalFunc("AddInitFinalFunc", COOKIE1_, COOKIE2_, func_AddInitFinalFunc);


static refalrts::FnResult func_gen_GlobalASTStoragem_Check_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 73 elems
  refalrts::Iter context[73];
  refalrts::zeros( context, 73 );
  // </0 & GlobalASTStorage-Check:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & GlobalASTStorage-Check:1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 s.new5/21 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & GlobalASTStorage-Check:1/4 (/7 e.new6/22 )/8 (/11 e.new7/24 )/12 (/15 e.new8/26 )/16 (/19 e.new9/28 )/20 # EL-NoErrors/21 >/1
    context[22] = context[5];
    context[23] = context[6];
    context[24] = context[9];
    context[25] = context[10];
    context[26] = context[13];
    context[27] = context[14];
    context[28] = context[17];
    context[29] = context[18];
    if( ! refalrts::ident_term( identifiers[ident_ELm_NoErrors], context[21] ) )
      continue;
    // closed e.new6 as range 22
    // closed e.new7 as range 24
    // closed e.new8 as range 26
    // closed e.new9 as range 28
    do {
      // </0 & GlobalASTStorage-Check:1/4 (/7 e.new10/30 )/8 (/11 e.new11/32 )/12 (/15 )/16 (/19 e.new12/34 )/20 # EL-NoErrors/21 >/1
      context[30] = context[22];
      context[31] = context[23];
      context[32] = context[24];
      context[33] = context[25];
      context[34] = context[28];
      context[35] = context[29];
      if( ! refalrts::empty_seq( context[26], context[27] ) )
        continue;
      // closed e.new10 as range 30
      // closed e.new11 as range 32
      // closed e.new12 as range 34
      do {
        // </0 & GlobalASTStorage-Check:1/4 (/7 e.Entries/36 )/8 (/11 e.AST/38 )/12 (/15 )/16 (/19 )/20 # EL-NoErrors/21 >/1
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = context[33];
        if( ! refalrts::empty_seq( context[34], context[35] ) )
          continue;
        // closed e.Entries as range 36
        // closed e.AST as range 38
        //DEBUG: e.Entries: 36
        //DEBUG: e.AST: 38

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} {REMOVED TILE} (/19 )/20 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: # Success/0 HalfReuse: </4 } Tile{ HalfReuse: & ExtendMetatables=1/8 AsIs: (/11 AsIs: e.AST/38 AsIs: )/12 HalfReuse: </15 HalfReuse: & Map@13/16 } Tile{ AsIs: e.Entries/36 } Tile{ HalfReuse: >/21 AsIs: >/1 ]] }
        refalrts::reinit_ident(context[0], identifiers[ident_Success]);
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[8], functions[efunc_gen_ExtendMetatables_A1]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[16], functions[efunc_gen_Map_Z13]);
        refalrts::reinit_close_call(context[21]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[4] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[21];
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[8], context[16] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GlobalASTStorage-Check:1/4 (/7 e.Entries/36 )/8 (/11 e.AST/38 )/12 (/15 )/16 (/19 (/44 e.1/42 t.0/46 )/45 e./40 )/20 # EL-NoErrors/21 >/1
        context[36] = context[30];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = context[33];
        context[40] = context[34];
        context[41] = context[35];
        context[42] = 0;
        context[43] = 0;
        context[44] = refalrts::brackets_left( context[42], context[43], context[40], context[41] );
        if( ! context[44] )
          continue;
        refalrts::bracket_pointers(context[44], context[45]);
        // closed e.Entries as range 36
        // closed e.AST as range 38
        // closed e. as range 40
        context[47] = refalrts::tvar_right( context[46], context[42], context[43] );
        if( ! context[47] )
          continue;
        // closed e.1 as range 42
        //DEBUG: e.Entries: 36
        //DEBUG: e.AST: 38
        //DEBUG: e.: 40
        //DEBUG: t.0: 46
        //DEBUG: e.1: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: # Success/0 HalfReuse: </4 } Tile{ HalfReuse: & ExtendMetatables=1/8 AsIs: (/11 AsIs: e.AST/38 AsIs: )/12 HalfReuse: </15 } Tile{ HalfReuse: & Map@13/7 } Tile{ AsIs: e.Entries/36 } Tile{ AsIs: >/1 } >/48 </49 & MakeInitFinalFunc$2=2@1/50 t.0/46/51 Tile{ HalfReuse: </16 HalfReuse: & Map@14/19 AsIs: (/44 AsIs: e.1/42 AsIs: t.0/46 AsIs: )/45 AsIs: e./40 HalfReuse: >/20 HalfReuse: >/21 } Tile{ ]] }
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::alloc_open_call(vm, context[49]);
        refalrts::alloc_name(vm, context[50], functions[efunc_gen_MakeInitFinalFunc_S2A2Z1]);
        refalrts::copy_evar(vm, context[51], context[52], context[46], context[47]);
        refalrts::reinit_ident(context[0], identifiers[ident_Success]);
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[8], functions[efunc_gen_ExtendMetatables_A1]);
        refalrts::reinit_open_call(context[15]);
        refalrts::reinit_name(context[7], functions[efunc_gen_Map_Z13]);
        refalrts::reinit_open_call(context[16]);
        refalrts::reinit_name(context[19], functions[efunc_gen_Map_Z14]);
        refalrts::reinit_close_call(context[20]);
        refalrts::reinit_close_call(context[21]);
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[49] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[16] );
        refalrts::link_brackets( context[44], context[45] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[4] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[16], context[21] );
        res = refalrts::splice_evar( res, context[48], context[52] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_elem( res, context[7] );
        res = refalrts::splice_evar( res, context[8], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GlobalASTStorage-Check:1/4 (/7 e.Entries/36 )/8 (/11 e.AST/38 )/12 (/15 )/16 (/19 e.Finals/40 )/20 # EL-NoErrors/21 >/1
      context[36] = context[30];
      context[37] = context[31];
      context[38] = context[32];
      context[39] = context[33];
      context[40] = context[34];
      context[41] = context[35];
      // closed e.Entries as range 36
      // closed e.AST as range 38
      // closed e.Finals as range 40
      //DEBUG: e.Entries: 36
      //DEBUG: e.AST: 38
      //DEBUG: e.Finals: 40

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ Reuse: # Success/21 } Tile{ AsIs: </0 Reuse: & ExtendMetatables=1/4 AsIs: (/7 } Tile{ AsIs: e.AST/38 } Tile{ AsIs: )/8 HalfReuse: </11 } & Map@13/42 Tile{ AsIs: e.Entries/36 } >/43 >/44 </45 & MakeInitFinalFunc$2=1*1/46 (/47"__FIN"/48 Tile{ HalfReuse: 'A'/12 HalfReuse: 'L'/15 AsIs: )/16 AsIs: (/19 AsIs: e.Finals/40 AsIs: )/20 } e.Finals/40/50 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[42], functions[efunc_gen_Map_Z13]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::alloc_close_call(vm, context[44]);
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_gen_MakeInitFinalFunc_S2A1D1]);
      refalrts::alloc_open_bracket(vm, context[47]);
      refalrts::alloc_chars(vm, context[48], context[49], "__FIN", 5);
      refalrts::copy_evar(vm, context[50], context[51], context[40], context[41]);
      refalrts::update_ident(context[21], identifiers[ident_Success]);
      refalrts::update_name(context[4], functions[efunc_gen_ExtendMetatables_A1]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_char(context[12], 'A');
      refalrts::reinit_char(context[15], 'L');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[45] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[47], context[16] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[11] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_evar( res, context[12], context[20] );
      res = refalrts::splice_evar( res, context[43], context[49] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_evar( res, context[8], context[11] );
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GlobalASTStorage-Check:1/4 (/7 e.new10/30 )/8 (/11 e.new11/32 )/12 (/15 (/40 e.new12/38 t.new13/42 )/41 e.new14/34 )/16 (/19 e.new15/36 )/20 # EL-NoErrors/21 >/1
      context[30] = context[22];
      context[31] = context[23];
      context[32] = context[24];
      context[33] = context[25];
      context[34] = context[26];
      context[35] = context[27];
      context[36] = context[28];
      context[37] = context[29];
      context[38] = 0;
      context[39] = 0;
      context[40] = refalrts::brackets_left( context[38], context[39], context[34], context[35] );
      if( ! context[40] )
        continue;
      refalrts::bracket_pointers(context[40], context[41]);
      // closed e.new10 as range 30
      // closed e.new11 as range 32
      // closed e.new14 as range 34
      // closed e.new15 as range 36
      context[43] = refalrts::tvar_right( context[42], context[38], context[39] );
      if( ! context[43] )
        continue;
      // closed e.new12 as range 38
      do {
        // </0 & GlobalASTStorage-Check:1/4 (/7 e.Entries/44 )/8 (/11 e.AST/46 )/12 (/15 (/40 e.1/48 t.0/42 )/41 e./50 )/16 (/19 )/20 # EL-NoErrors/21 >/1
        context[44] = context[30];
        context[45] = context[31];
        context[46] = context[32];
        context[47] = context[33];
        context[48] = context[38];
        context[49] = context[39];
        context[50] = context[34];
        context[51] = context[35];
        if( ! refalrts::empty_seq( context[36], context[37] ) )
          continue;
        // closed e.Entries as range 44
        // closed e.AST as range 46
        // closed e.1 as range 48
        // closed e. as range 50
        //DEBUG: t.0: 42
        //DEBUG: e.Entries: 44
        //DEBUG: e.AST: 46
        //DEBUG: e.1: 48
        //DEBUG: e.: 50

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } # Success/52 Tile{ AsIs: </0 Reuse: & ExtendMetatables=1/4 AsIs: (/7 } Tile{ AsIs: e.AST/46 } Tile{ AsIs: )/20 HalfReuse: </21 HalfReuse: & Map@13/1 } Tile{ AsIs: e.Entries/44 } >/53 Tile{ HalfReuse: >/8 HalfReuse: </11 } & MakeInitFinalFunc$2=2@2/54 t.0/42/55 Tile{ HalfReuse: </12 HalfReuse: & Map@14/15 AsIs: (/40 AsIs: e.1/48 AsIs: t.0/42 AsIs: )/41 AsIs: e./50 HalfReuse: >/16 HalfReuse: >/19 } Tile{ ]] }
        refalrts::alloc_ident(vm, context[52], identifiers[ident_Success]);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_name(vm, context[54], functions[efunc_gen_MakeInitFinalFunc_S2A2Z2]);
        refalrts::copy_evar(vm, context[55], context[56], context[42], context[43]);
        refalrts::update_name(context[4], functions[efunc_gen_ExtendMetatables_A1]);
        refalrts::reinit_open_call(context[21]);
        refalrts::reinit_name(context[1], functions[efunc_gen_Map_Z13]);
        refalrts::reinit_close_call(context[8]);
        refalrts::reinit_open_call(context[11]);
        refalrts::reinit_open_call(context[12]);
        refalrts::reinit_name(context[15], functions[efunc_gen_Map_Z14]);
        refalrts::reinit_close_call(context[16]);
        refalrts::reinit_close_call(context[19]);
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[11] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[12] );
        refalrts::link_brackets( context[40], context[41] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[21] );
        refalrts::link_brackets( context[7], context[20] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[12], context[19] );
        res = refalrts::splice_evar( res, context[54], context[56] );
        res = refalrts::splice_evar( res, context[8], context[11] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_evar( res, context[20], context[1] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_evar( res, context[0], context[7] );
        res = refalrts::splice_elem( res, context[52] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GlobalASTStorage-Check:1/4 (/7 e.Entries/44 )/8 (/11 e.AST/46 )/12 (/15 (/40 e.1/48 t.0/42 )/41 e./50 )/16 (/19 (/56 e.3/54 t.1/58 )/57 e.0/52 )/20 # EL-NoErrors/21 >/1
        context[44] = context[30];
        context[45] = context[31];
        context[46] = context[32];
        context[47] = context[33];
        context[48] = context[38];
        context[49] = context[39];
        context[50] = context[34];
        context[51] = context[35];
        context[52] = context[36];
        context[53] = context[37];
        context[54] = 0;
        context[55] = 0;
        context[56] = refalrts::brackets_left( context[54], context[55], context[52], context[53] );
        if( ! context[56] )
          continue;
        refalrts::bracket_pointers(context[56], context[57]);
        // closed e.Entries as range 44
        // closed e.AST as range 46
        // closed e.1 as range 48
        // closed e. as range 50
        // closed e.0 as range 52
        context[59] = refalrts::tvar_right( context[58], context[54], context[55] );
        if( ! context[59] )
          continue;
        // closed e.3 as range 54
        //DEBUG: t.0: 42
        //DEBUG: e.Entries: 44
        //DEBUG: e.AST: 46
        //DEBUG: e.1: 48
        //DEBUG: e.: 50
        //DEBUG: e.0: 52
        //DEBUG: t.1: 58
        //DEBUG: e.3: 54

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } # Success/60 </61 & ExtendMetatables=1/62 (/63 Tile{ AsIs: e.AST/46 } Tile{ HalfReuse: )/0 HalfReuse: </4 HalfReuse: & Map@13/7 AsIs: e.Entries/44 HalfReuse: >/8 HalfReuse: >/11 } Tile{ HalfReuse: </1 } & MakeInitFinalFunc$2=2@2/64 t.0/42/65 Tile{ HalfReuse: </12 HalfReuse: & Map@14/15 AsIs: (/40 AsIs: e.1/48 AsIs: t.0/42 AsIs: )/41 AsIs: e./50 HalfReuse: >/16 HalfReuse: >/19 HalfReuse: </56 } & MakeInitFinalFunc$2=2@1/67 t.1/58/68 </70 & Map@14/71 (/72 Tile{ AsIs: e.3/54 } Tile{ AsIs: t.1/58 AsIs: )/57 AsIs: e.0/52 HalfReuse: >/20 HalfReuse: >/21 } Tile{ ]] }
        refalrts::alloc_ident(vm, context[60], identifiers[ident_Success]);
        refalrts::alloc_open_call(vm, context[61]);
        refalrts::alloc_name(vm, context[62], functions[efunc_gen_ExtendMetatables_A1]);
        refalrts::alloc_open_bracket(vm, context[63]);
        refalrts::alloc_name(vm, context[64], functions[efunc_gen_MakeInitFinalFunc_S2A2Z2]);
        refalrts::copy_evar(vm, context[65], context[66], context[42], context[43]);
        refalrts::alloc_name(vm, context[67], functions[efunc_gen_MakeInitFinalFunc_S2A2Z1]);
        refalrts::copy_evar(vm, context[68], context[69], context[58], context[59]);
        refalrts::alloc_open_call(vm, context[70]);
        refalrts::alloc_name(vm, context[71], functions[efunc_gen_Map_Z14]);
        refalrts::alloc_open_bracket(vm, context[72]);
        refalrts::reinit_close_bracket(context[0]);
        refalrts::reinit_open_call(context[4]);
        refalrts::reinit_name(context[7], functions[efunc_gen_Map_Z13]);
        refalrts::reinit_close_call(context[8]);
        refalrts::reinit_close_call(context[11]);
        refalrts::reinit_open_call(context[1]);
        refalrts::reinit_open_call(context[12]);
        refalrts::reinit_name(context[15], functions[efunc_gen_Map_Z14]);
        refalrts::reinit_close_call(context[16]);
        refalrts::reinit_close_call(context[19]);
        refalrts::reinit_open_call(context[56]);
        refalrts::reinit_close_call(context[20]);
        refalrts::reinit_close_call(context[21]);
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[56] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[70] );
        refalrts::link_brackets( context[72], context[57] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[12] );
        refalrts::link_brackets( context[40], context[41] );
        refalrts::push_stack( vm, context[11] );
        refalrts::push_stack( vm, context[61] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[4] );
        refalrts::link_brackets( context[63], context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[58], context[21] );
        res = refalrts::splice_evar( res, context[54], context[55] );
        res = refalrts::splice_evar( res, context[67], context[72] );
        res = refalrts::splice_evar( res, context[12], context[56] );
        res = refalrts::splice_evar( res, context[64], context[66] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_evar( res, context[0], context[11] );
        res = refalrts::splice_evar( res, context[46], context[47] );
        res = refalrts::splice_evar( res, context[60], context[63] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GlobalASTStorage-Check:1/4 (/7 e.Entries/44 )/8 (/11 e.AST/46 )/12 (/15 (/40 e.1/48 t.0/42 )/41 e./50 )/16 (/19 e.Finals/52 )/20 # EL-NoErrors/21 >/1
      context[44] = context[30];
      context[45] = context[31];
      context[46] = context[32];
      context[47] = context[33];
      context[48] = context[38];
      context[49] = context[39];
      context[50] = context[34];
      context[51] = context[35];
      context[52] = context[36];
      context[53] = context[37];
      // closed e.Entries as range 44
      // closed e.AST as range 46
      // closed e.1 as range 48
      // closed e. as range 50
      // closed e.Finals as range 52
      //DEBUG: t.0: 42
      //DEBUG: e.Entries: 44
      //DEBUG: e.AST: 46
      //DEBUG: e.1: 48
      //DEBUG: e.: 50
      //DEBUG: e.Finals: 52

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } # Success/54 Tile{ AsIs: </0 Reuse: & ExtendMetatables=1/4 AsIs: (/7 } Tile{ AsIs: e.AST/46 } Tile{ AsIs: )/20 HalfReuse: </21 } & Map@13/55 Tile{ AsIs: e.Entries/44 } >/56 >/57 </58 & MakeInitFinalFunc$2=2@2/59 t.0/42/60 Tile{ HalfReuse: </12 HalfReuse: & Map@14/15 AsIs: (/40 AsIs: e.1/48 AsIs: t.0/42 AsIs: )/41 AsIs: e./50 HalfReuse: >/16 HalfReuse: >/19 } </62 & MakeInitFinalFunc$2=1*1/63 (/64"__FINAL"/65 Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Finals/52 } )/67 e.Finals/52/68 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[54], identifiers[ident_Success]);
      refalrts::alloc_name(vm, context[55], functions[efunc_gen_Map_Z13]);
      refalrts::alloc_close_call(vm, context[56]);
      refalrts::alloc_close_call(vm, context[57]);
      refalrts::alloc_open_call(vm, context[58]);
      refalrts::alloc_name(vm, context[59], functions[efunc_gen_MakeInitFinalFunc_S2A2Z2]);
      refalrts::copy_evar(vm, context[60], context[61], context[42], context[43]);
      refalrts::alloc_open_call(vm, context[62]);
      refalrts::alloc_name(vm, context[63], functions[efunc_gen_MakeInitFinalFunc_S2A1D1]);
      refalrts::alloc_open_bracket(vm, context[64]);
      refalrts::alloc_chars(vm, context[65], context[66], "__FINAL", 7);
      refalrts::alloc_close_bracket(vm, context[67]);
      refalrts::copy_evar(vm, context[68], context[69], context[52], context[53]);
      refalrts::update_name(context[4], functions[efunc_gen_ExtendMetatables_A1]);
      refalrts::reinit_open_call(context[21]);
      refalrts::reinit_open_call(context[12]);
      refalrts::reinit_name(context[15], functions[efunc_gen_Map_Z14]);
      refalrts::reinit_close_call(context[16]);
      refalrts::reinit_close_call(context[19]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[62] );
      refalrts::link_brackets( context[11], context[67] );
      refalrts::link_brackets( context[64], context[8] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[58] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[12] );
      refalrts::link_brackets( context[40], context[41] );
      refalrts::push_stack( vm, context[57] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[21] );
      refalrts::link_brackets( context[7], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[68], context[69] );
      res = refalrts::splice_elem( res, context[67] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[8], context[11] );
      res = refalrts::splice_evar( res, context[62], context[66] );
      res = refalrts::splice_evar( res, context[12], context[19] );
      res = refalrts::splice_evar( res, context[56], context[61] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_elem( res, context[55] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_elem( res, context[54] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GlobalASTStorage-Check:1/4 (/7 e.Entries/30 )/8 (/11 e.AST/32 )/12 (/15 e.Inits/34 )/16 (/19 )/20 # EL-NoErrors/21 >/1
      context[30] = context[22];
      context[31] = context[23];
      context[32] = context[24];
      context[33] = context[25];
      context[34] = context[26];
      context[35] = context[27];
      if( ! refalrts::empty_seq( context[28], context[29] ) )
        continue;
      // closed e.Entries as range 30
      // closed e.AST as range 32
      // closed e.Inits as range 34
      //DEBUG: e.Entries: 30
      //DEBUG: e.AST: 32
      //DEBUG: e.Inits: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } # Success/36 Tile{ AsIs: </0 Reuse: & ExtendMetatables=1/4 AsIs: (/7 } Tile{ AsIs: e.AST/32 } Tile{ AsIs: )/8 HalfReuse: </11 } & Map@13/37 Tile{ AsIs: e.Entries/30 } >/38 >/39 </40 & MakeInitFinalFunc$2=1*1/41 Tile{ AsIs: (/19 HalfReuse: '_'/20 HalfReuse: '_'/21 HalfReuse: 'I'/1 }"NIT"/42 Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Inits/34 AsIs: )/16 } e.Inits/34/44 >/46 Tile{ ]] }
      refalrts::alloc_ident(vm, context[36], identifiers[ident_Success]);
      refalrts::alloc_name(vm, context[37], functions[efunc_gen_Map_Z13]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_close_call(vm, context[39]);
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_gen_MakeInitFinalFunc_S2A1D1]);
      refalrts::alloc_chars(vm, context[42], context[43], "NIT", 3);
      refalrts::copy_evar(vm, context[44], context[45], context[34], context[35]);
      refalrts::alloc_close_call(vm, context[46]);
      refalrts::update_name(context[4], functions[efunc_gen_ExtendMetatables_A1]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_char(context[20], '_');
      refalrts::reinit_char(context[21], '_');
      refalrts::reinit_char(context[1], 'I');
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[40] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[19], context[12] );
      refalrts::push_stack( vm, context[39] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[11] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      res = refalrts::splice_evar( res, context[12], context[16] );
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[19], context[1] );
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_evar( res, context[8], context[11] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_elem( res, context[36] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GlobalASTStorage-Check:1/4 (/7 e.Entries/30 )/8 (/11 e.AST/32 )/12 (/15 e.Inits/34 )/16 (/19 (/40 e.1/38 t.0/42 )/41 e./36 )/20 # EL-NoErrors/21 >/1
      context[30] = context[22];
      context[31] = context[23];
      context[32] = context[24];
      context[33] = context[25];
      context[34] = context[26];
      context[35] = context[27];
      context[36] = context[28];
      context[37] = context[29];
      context[38] = 0;
      context[39] = 0;
      context[40] = refalrts::brackets_left( context[38], context[39], context[36], context[37] );
      if( ! context[40] )
        continue;
      refalrts::bracket_pointers(context[40], context[41]);
      // closed e.Entries as range 30
      // closed e.AST as range 32
      // closed e.Inits as range 34
      // closed e. as range 36
      context[43] = refalrts::tvar_right( context[42], context[38], context[39] );
      if( ! context[43] )
        continue;
      // closed e.1 as range 38
      //DEBUG: e.Entries: 30
      //DEBUG: e.AST: 32
      //DEBUG: e.Inits: 34
      //DEBUG: e.: 36
      //DEBUG: t.0: 42
      //DEBUG: e.1: 38

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } # Success/44 </45 Tile{ HalfReuse: & ExtendMetatables=1/8 AsIs: (/11 AsIs: e.AST/32 AsIs: )/12 HalfReuse: </15 } & Map@13/46 Tile{ AsIs: e.Entries/30 } Tile{ AsIs: >/1 } >/47 Tile{ AsIs: </0 Reuse: & MakeInitFinalFunc$2=1*1/4 AsIs: (/7 }"__INIT"/48 )/50 (/51 e.Inits/34/52 )/54 Tile{ AsIs: e.Inits/34 } >/55 </56 & MakeInitFinalFunc$2=2@1/57 t.0/42/58 Tile{ HalfReuse: </16 HalfReuse: & Map@14/19 AsIs: (/40 AsIs: e.1/38 AsIs: t.0/42 AsIs: )/41 AsIs: e./36 HalfReuse: >/20 HalfReuse: >/21 } Tile{ ]] }
      refalrts::alloc_ident(vm, context[44], identifiers[ident_Success]);
      refalrts::alloc_open_call(vm, context[45]);
      refalrts::alloc_name(vm, context[46], functions[efunc_gen_Map_Z13]);
      refalrts::alloc_close_call(vm, context[47]);
      refalrts::alloc_chars(vm, context[48], context[49], "__INIT", 6);
      refalrts::alloc_close_bracket(vm, context[50]);
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::copy_evar(vm, context[52], context[53], context[34], context[35]);
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::alloc_close_call(vm, context[55]);
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_name(vm, context[57], functions[efunc_gen_MakeInitFinalFunc_S2A2Z1]);
      refalrts::copy_evar(vm, context[58], context[59], context[42], context[43]);
      refalrts::reinit_name(context[8], functions[efunc_gen_ExtendMetatables_A1]);
      refalrts::reinit_open_call(context[15]);
      refalrts::update_name(context[4], functions[efunc_gen_MakeInitFinalFunc_S2A1D1]);
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[19], functions[efunc_gen_Map_Z14]);
      refalrts::reinit_close_call(context[20]);
      refalrts::reinit_close_call(context[21]);
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[56] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[40], context[41] );
      refalrts::push_stack( vm, context[55] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[51], context[54] );
      refalrts::link_brackets( context[7], context[50] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[16], context[21] );
      res = refalrts::splice_evar( res, context[55], context[59] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[48], context[54] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_elem( res, context[46] );
      res = refalrts::splice_evar( res, context[8], context[15] );
      res = refalrts::splice_evar( res, context[44], context[45] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GlobalASTStorage-Check:1/4 (/7 e.Entries/30 )/8 (/11 e.AST/32 )/12 (/15 e.Inits/34 )/16 (/19 e.Finals/36 )/20 # EL-NoErrors/21 >/1
    context[30] = context[22];
    context[31] = context[23];
    context[32] = context[24];
    context[33] = context[25];
    context[34] = context[26];
    context[35] = context[27];
    context[36] = context[28];
    context[37] = context[29];
    // closed e.Entries as range 30
    // closed e.AST as range 32
    // closed e.Inits as range 34
    // closed e.Finals as range 36
    //DEBUG: e.Entries: 30
    //DEBUG: e.AST: 32
    //DEBUG: e.Inits: 34
    //DEBUG: e.Finals: 36

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ Reuse: # Success/21 } </38 & ExtendMetatables=1/39 (/40 Tile{ AsIs: e.AST/32 } Tile{ HalfReuse: )/0 HalfReuse: </4 HalfReuse: & Map@13/7 AsIs: e.Entries/30 HalfReuse: >/8 HalfReuse: >/11 } </41 & MakeInitFinalFunc$2=1*1/42 (/43"__INIT"/44 Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Inits/34 AsIs: )/16 } e.Inits/34/46 >/48 </49 & MakeInitFinalFunc$2=1*1/50 (/51"__FINAL"/52 )/54 Tile{ AsIs: (/19 AsIs: e.Finals/36 AsIs: )/20 } e.Finals/36/55 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_gen_ExtendMetatables_A1]);
    refalrts::alloc_open_bracket(vm, context[40]);
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_name(vm, context[42], functions[efunc_gen_MakeInitFinalFunc_S2A1D1]);
    refalrts::alloc_open_bracket(vm, context[43]);
    refalrts::alloc_chars(vm, context[44], context[45], "__INIT", 6);
    refalrts::copy_evar(vm, context[46], context[47], context[34], context[35]);
    refalrts::alloc_close_call(vm, context[48]);
    refalrts::alloc_open_call(vm, context[49]);
    refalrts::alloc_name(vm, context[50], functions[efunc_gen_MakeInitFinalFunc_S2A1D1]);
    refalrts::alloc_open_bracket(vm, context[51]);
    refalrts::alloc_chars(vm, context[52], context[53], "__FINAL", 7);
    refalrts::alloc_close_bracket(vm, context[54]);
    refalrts::copy_evar(vm, context[55], context[56], context[36], context[37]);
    refalrts::update_ident(context[21], identifiers[ident_Success]);
    refalrts::reinit_close_bracket(context[0]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_gen_Map_Z13]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_close_call(context[11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[49] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[51], context[54] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[41] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[43], context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::link_brackets( context[40], context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[55], context[56] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[48], context[54] );
    res = refalrts::splice_evar( res, context[46], context[47] );
    res = refalrts::splice_evar( res, context[12], context[16] );
    res = refalrts::splice_evar( res, context[41], context[45] );
    res = refalrts::splice_evar( res, context[0], context[11] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[38], context[40] );
    res = refalrts::splice_elem( res, context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GlobalASTStorage-Check:1/4 (/7 e.Entries/5 )/8 (/11 e.AST/9 )/12 (/15 e.Inits/13 )/16 (/19 e.Finals/17 )/20 # EL-HasErrors/21 >/1
  if( ! refalrts::ident_term( identifiers[ident_ELm_HasErrors], context[21] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Entries as range 5
  // closed e.AST as range 9
  // closed e.Inits as range 13
  // closed e.Finals as range 17
  //DEBUG: e.Entries: 5
  //DEBUG: e.AST: 9
  //DEBUG: e.Inits: 13
  //DEBUG: e.Finals: 17

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & GlobalASTStorage-Check:1/4 (/7 e.Entries/5 )/8 (/11 e.AST/9 )/12 (/15 e.Inits/13 )/16 (/19 e.Finals/17 )/20 # EL-HasErrors/21 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Fails/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_Fails]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GlobalASTStoragem_Check_B1("GlobalASTStorage-Check:1", COOKIE1_, COOKIE2_, func_gen_GlobalASTStoragem_Check_B1);


static refalrts::FnResult func_GlobalASTStoragem_Check(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & GlobalASTStorage-Check/4 (/7 (/11 s.NextLocalId/21 e.Entries/9 )/12 e.AST/5 (/19 e.Inits/17 )/20 (/15 e.Finals/13 )/16 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[5], context[6] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[5], context[6] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.AST as range 5
  // closed e.Inits as range 17
  // closed e.Finals as range 13
  if( ! refalrts::svar_left( context[21], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Entries as range 9
  //DEBUG: e.AST: 5
  //DEBUG: e.Inits: 17
  //DEBUG: e.Finals: 13
  //DEBUG: s.NextLocalId: 21
  //DEBUG: e.Entries: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} s.NextLocalId/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & GlobalASTStorage-Check:1/4 AsIs: (/7 } Tile{ AsIs: e.Entries/9 } Tile{ AsIs: )/12 } Tile{ AsIs: (/11 } Tile{ AsIs: e.AST/5 } )/22 Tile{ AsIs: (/19 AsIs: e.Inits/17 AsIs: )/20 AsIs: (/15 AsIs: e.Finals/13 AsIs: )/16 HalfReuse: </8 HalfReuse: & EL-CheckEntryDuplicates/1 } e.Entries/9/23 >/25 >/26 Tile{ ]] }
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::copy_evar(vm, context[23], context[24], context[9], context[10]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::alloc_close_call(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_gen_GlobalASTStoragem_Check_B1]);
  refalrts::reinit_open_call(context[8]);
  refalrts::reinit_name(context[1], functions[efunc_ELm_CheckEntryDuplicates]);
  refalrts::push_stack( vm, context[26] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[8] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[11], context[22] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[19], context[1] );
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_GlobalASTStoragem_Check("GlobalASTStorage-Check", 0U, 0U, func_GlobalASTStoragem_Check);


static refalrts::FnResult func_gen_ExtendMetatables_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & ExtendMetatables=1/4 (/7 e.AST/5 )/8 e.MetatableExtension/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.AST as range 5
  // closed e.MetatableExtension as range 2
  //DEBUG: e.AST: 5
  //DEBUG: e.MetatableExtension: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@15/4 AsIs: (/7 } Tile{ AsIs: e.MetatableExtension/2 } Tile{ AsIs: )/8 } Tile{ AsIs: e.AST/5 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtendMetatables_A1("ExtendMetatables=1", COOKIE1_, COOKIE2_, func_gen_ExtendMetatables_A1);


static refalrts::FnResult func_ExtendMetatables(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & ExtendMetatables/4 (/7 e.Entries/5 )/8 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Entries as range 5
  // closed e.AST as range 2
  //DEBUG: e.Entries: 5
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtendMetatables=1/4 AsIs: (/7 } Tile{ AsIs: e.AST/2 } Tile{ AsIs: )/8 } </9 & Map@13/10 Tile{ AsIs: e.Entries/5 } >/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z13]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtendMetatables_A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtendMetatables("ExtendMetatables", COOKIE1_, COOKIE2_, func_ExtendMetatables);


static refalrts::FnResult func_CleanupDuplicates(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & CleanupDuplicates/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & CleanupDuplicates/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & CleanupDuplicates/4 (/7 (/15 e.Name/13 )/16 t.Pointer/17 )/8 e.MT-B/19 (/25 (/29 e.Name/31 )/30 t._/33 )/26 e.MT-E/21 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = 0;
      context[14] = 0;
      context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
      if( ! context[15] )
        continue;
      refalrts::bracket_pointers(context[15], context[16]);
      // closed e.Name as range 13
      context[18] = refalrts::tvar_left( context[17], context[11], context[12] );
      if( ! context[18] )
        continue;
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      context[19] = 0;
      context[20] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[21] = context[9];
        context[22] = context[10];
        context[23] = 0;
        context[24] = 0;
        context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
        if( ! context[25] )
          continue;
        refalrts::bracket_pointers(context[25], context[26]);
        context[27] = 0;
        context[28] = 0;
        context[29] = refalrts::brackets_left( context[27], context[28], context[23], context[24] );
        if( ! context[29] )
          continue;
        refalrts::bracket_pointers(context[29], context[30]);
        if( ! refalrts::repeated_evar_left( vm, context[31], context[32], context[13], context[14], context[27], context[28] ) )
          continue;
        if( ! refalrts::empty_seq( context[27], context[28] ) )
          continue;
        // closed e.MT-E as range 21
        context[34] = refalrts::tvar_left( context[33], context[23], context[24] );
        if( ! context[34] )
          continue;
        if( ! refalrts::empty_seq( context[23], context[24] ) )
          continue;
        //DEBUG: e.Name: 13
        //DEBUG: t.Pointer: 17
        //DEBUG: e.MT-B: 19
        //DEBUG: e.MT-E: 21
        //DEBUG: t._: 33

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/25 (/29 e.Name/31 )/30 t._/33 )/26 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & CleanupDuplicates/4 AsIs: (/7 AsIs: (/15 AsIs: e.Name/13 AsIs: )/16 AsIs: t.Pointer/17 AsIs: )/8 } Tile{ AsIs: e.MT-B/19 } Tile{ AsIs: e.MT-E/21 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[19], context[20] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[19], context[20], context[9], context[10] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CleanupDuplicates/4 t.MT-Item/7 e.Metatable/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Metatable as range 9
    //DEBUG: t.MT-Item: 7
    //DEBUG: e.Metatable: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.MT-Item/7 } Tile{ AsIs: </0 AsIs: & CleanupDuplicates/4 } Tile{ AsIs: e.Metatable/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CleanupDuplicates/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CleanupDuplicates/4 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CleanupDuplicates("CleanupDuplicates", COOKIE1_, COOKIE2_, func_CleanupDuplicates);


static refalrts::FnResult func_gen_MakeInitFinalFunc_S2A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & MakeInitFinalFunc$2=2/4 t.FirstSrcPos/5 (/9 e.FuncName/7 )/10 e.ResultExpr/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.FuncName as range 7
  // closed e.ResultExpr as range 2
  //DEBUG: t.FirstSrcPos: 5
  //DEBUG: e.FuncName: 7
  //DEBUG: e.ResultExpr: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Function/4 AsIs: t.FirstSrcPos/5 HalfReuse: # GN-Local/9 } (/11 Tile{ AsIs: e.FuncName/7 } )/12 # Sentences/13 (/14 (/15 )/16 Tile{ HalfReuse: (/10 AsIs: e.ResultExpr/2 HalfReuse: )/1 } (/17 )/18 )/19 )/20 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Sentences]);
  refalrts::alloc_open_bracket(vm, context[14]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Function]);
  refalrts::reinit_ident(context[9], identifiers[ident_GNm_Local]);
  refalrts::reinit_open_bracket(context[10]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[20] );
  refalrts::link_brackets( context[14], context[19] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[10], context[1] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[17], context[20] );
  res = refalrts::splice_evar( res, context[10], context[1] );
  res = refalrts::splice_evar( res, context[12], context[16] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeInitFinalFunc_S2A2("MakeInitFinalFunc$2=2", COOKIE1_, COOKIE2_, func_gen_MakeInitFinalFunc_S2A2);


static refalrts::FnResult func_MakeInitFinalFunc(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & MakeInitFinalFunc/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & MakeInitFinalFunc/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & MakeInitFinalFunc/4 (/7 e.FuncName/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.FuncName as range 9
    //DEBUG: e.FuncName: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & MakeInitFinalFunc/4 (/7 e.FuncName/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & MakeInitFinalFunc/4 (/7 e.FuncName/9 )/8 (/15 e.1/13 t.0/17 )/16 e./11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    // closed e.FuncName as range 9
    // closed e. as range 11
    context[18] = refalrts::tvar_right( context[17], context[13], context[14] );
    if( ! context[18] )
      continue;
    // closed e.1 as range 13
    //DEBUG: e.FuncName: 9
    //DEBUG: e.: 11
    //DEBUG: t.0: 17
    //DEBUG: e.1: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeInitFinalFunc$2=2/4 } t.0/17/19 Tile{ AsIs: (/7 } Tile{ AsIs: e.FuncName/9 } )/21 </22 Tile{ HalfReuse: & Map@14/8 AsIs: (/15 AsIs: e.1/13 AsIs: t.0/17 AsIs: )/16 AsIs: e./11 AsIs: >/1 } >/23 Tile{ ]] }
    refalrts::copy_evar(vm, context[19], context[20], context[17], context[18]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::update_name(context[4], functions[efunc_gen_MakeInitFinalFunc_S2A2]);
    refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z14]);
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[22] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[7], context[21] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[8], context[1] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MakeInitFinalFunc/4 (/7 e.FuncName/5 )/8 e.CallSequence/2 >/1
  // closed e.FuncName as range 5
  // closed e.CallSequence as range 2
  //DEBUG: e.FuncName: 5
  //DEBUG: e.CallSequence: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeInitFinalFunc$2=1*1/4 AsIs: (/7 AsIs: e.FuncName/5 AsIs: )/8 } (/9 e.CallSequence/2/10 )/12 Tile{ AsIs: e.CallSequence/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::copy_evar(vm, context[10], context[11], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_MakeInitFinalFunc_S2A1D1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MakeInitFinalFunc("MakeInitFinalFunc", COOKIE1_, COOKIE2_, func_MakeInitFinalFunc);


static refalrts::FnResult func_gen_Apply_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@2/4 t.new1/5 t.new2/7 t.new3/9 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Apply@2/4 s.Fn/5 t.Acc/7 t.Next/9 >/1
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 9
    //DEBUG: s.Fn: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: t.Acc/7 AsIs: t.Next/9 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@2/4 (/5 t.Closure/13 e.Bounded/11 )/6 t.Acc/7 t.Next/9 >/1
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded as range 11
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 9
    //DEBUG: t.Closure: 13
    //DEBUG: e.Bounded: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@4/4 } Tile{ AsIs: t.Closure/13 } Tile{ AsIs: e.Bounded/11 } Tile{ AsIs: t.Acc/7 AsIs: t.Next/9 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@2/4 t.dyn0/5 t.Acc/7 t.Next/9 >/1
  //DEBUG: t.dyn0: 5
  //DEBUG: t.Acc: 7
  //DEBUG: t.Next: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: t.Acc/7 AsIs: t.Next/9 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z2("Apply@2", COOKIE1_, COOKIE2_, func_gen_Apply_Z2);


static refalrts::FnResult func_gen_DoMapAccum_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & DoMapAccum@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@1/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@1/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@1/4 t.new8/5 (/9 e.new13/17 )/10 (/15 s.new9/23 t.new10/24 e.new11/21 )/16 e.new12/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      // closed e.new13 as range 17
      // closed e.new12 as range 19
      if( ! refalrts::svar_left( context[23], context[21], context[22] ) )
        continue;
      context[25] = refalrts::tvar_left( context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      // closed e.new11 as range 21
      do {
        // </0 & DoMapAccum@1/4 t.Acc/5 (/9 e.Scanned/26 )/10 (/15 # TkWarning/23 t.0/24 s.Type/32 e.2/28 )/16 e.Tail/30 >/1
        context[26] = context[17];
        context[27] = context[18];
        context[28] = context[21];
        context[29] = context[22];
        context[30] = context[19];
        context[31] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_TkWarning], context[23] ) )
          continue;
        // closed e.Scanned as range 26
        // closed e.Tail as range 30
        if( ! refalrts::svar_left( context[32], context[28], context[29] ) )
          continue;
        // closed e.2 as range 28
        //DEBUG: t.Acc: 5
        //DEBUG: t.0: 24
        //DEBUG: e.Scanned: 26
        //DEBUG: e.Tail: 30
        //DEBUG: s.Type: 32
        //DEBUG: e.2: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Type/32 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@1/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/26 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/30 } Tile{ AsIs: )/16 } </33 & EL-AddWarningAt/34 Tile{ AsIs: t.Acc/5 } Tile{ HalfReuse: s.Type32 /23 AsIs: t.0/24 } Tile{ AsIs: e.2/28 } >/35 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[33]);
        refalrts::alloc_name(vm, context[34], functions[efunc_ELm_AddWarningAt]);
        refalrts::alloc_close_call(vm, context[35]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z1]);
        refalrts::reinit_svar( context[23], context[32] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[33] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_evar( res, context[23], context[25] );
        res = refalrts::splice_evar( res, context[5], context[6] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_evar( res, context[9], context[15] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@1/4 t.Acc/5 (/9 e.Scanned/26 )/10 (/15 # TkError/23 t.0/24 e.1/28 )/16 e.Tail/30 >/1
      context[26] = context[17];
      context[27] = context[18];
      context[28] = context[21];
      context[29] = context[22];
      context[30] = context[19];
      context[31] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_TkError], context[23] ) )
        continue;
      // closed e.Scanned as range 26
      // closed e.1 as range 28
      // closed e.Tail as range 30
      //DEBUG: t.Acc: 5
      //DEBUG: t.0: 24
      //DEBUG: e.Scanned: 26
      //DEBUG: e.1: 28
      //DEBUG: e.Tail: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@1/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/26 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/30 } )/32 </33 Tile{ HalfReuse: & EL-AddErrorAt/23 } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.0/24 AsIs: e.1/28 HalfReuse: >/16 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[32]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z1]);
      refalrts::reinit_name(context[23], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_close_call(context[16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[33] );
      refalrts::link_brackets( context[15], context[32] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[24], context[16] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@1/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@1/4 AsIs: t.Acc/5 AsIs: (/9 } Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@1/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@1/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@1/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & FilterLexerMessages\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FilterLexerMessages_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z1("DoMapAccum@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z1);


static refalrts::FnResult func_gen_LoadAST_S3B1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & LoadAST$3:1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & LoadAST$3:1@2/4 (/7 e.new1/5 )/8 t.new2/9 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & LoadAST$3:1@2/4 (/7 e.new7/11 )/8 t.new4/9 e.new5/13 s.new6/15 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    if( ! refalrts::svar_right( context[15], context[13], context[14] ) )
      continue;
    // closed e.new5 as range 13
    do {
      // </0 & LoadAST$3:1@2/4 (/7 e.new10/16 )/8 t.new8/9 0/20 s.new9/15 >/1
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[14];
      context[20] = refalrts::number_left( 0UL, context[18], context[19] );
      if( ! context[20] )
        continue;
      if( ! refalrts::empty_seq( context[18], context[19] ) )
        continue;
      // closed e.new10 as range 16
      do {
        // </0 & LoadAST$3:1@2/4 (/7 e.BaseName/21 )/8 t.Config0/9 0/20 # True/15 >/1
        context[21] = context[16];
        context[22] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_True], context[15] ) )
          continue;
        // closed e.BaseName as range 21
        //DEBUG: t.Config0: 9
        //DEBUG: e.BaseName: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & LoadAST$3:1$1=1@2/4 AsIs: (/7 AsIs: e.BaseName/21 AsIs: )/8 } </23 & LoadAST$1=1@1/24 t.Config0/9/25 (/27 e.BaseName/21/28 )/30 </31 & Config-GetR5Mode/32 Tile{ AsIs: t.Config0/9 HalfReuse: >/20 HalfReuse: >/15 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[23]);
        refalrts::alloc_name(vm, context[24], functions[efunc_gen_LoadAST_S1A1Z1]);
        refalrts::copy_evar(vm, context[25], context[26], context[9], context[10]);
        refalrts::alloc_open_bracket(vm, context[27]);
        refalrts::copy_evar(vm, context[28], context[29], context[21], context[22]);
        refalrts::alloc_close_bracket(vm, context[30]);
        refalrts::alloc_open_call(vm, context[31]);
        refalrts::alloc_name(vm, context[32], functions[efunc_Configm_GetR5Mode]);
        refalrts::update_name(context[4], functions[efunc_gen_LoadAST_S3B1S1A1Z2]);
        refalrts::reinit_close_call(context[20]);
        refalrts::reinit_close_call(context[15]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[31] );
        refalrts::link_brackets( context[27], context[30] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[9];
        res = refalrts::splice_evar( res, context[23], context[32] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & LoadAST$3:1@2/4 (/7 e.BaseName/21 )/8 t.Config0/9 0/20 # False/15 >/1
      context[21] = context[16];
      context[22] = context[17];
      if( ! refalrts::ident_term( identifiers[ident_False], context[15] ) )
        continue;
      // closed e.BaseName as range 21
      //DEBUG: t.Config0: 9
      //DEBUG: e.BaseName: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Config0/9 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 HalfReuse: </7 } & EL-Create/23 >/24 (/25 # FileRowCol/26 (/27 1/28 1/29 Tile{ AsIs: )/8 } Tile{ AsIs: e.BaseName/21 }"-decompiled.ref"/30 )/32"RSL decompiler can\'t create "/33 e.BaseName/21/35"-decompiled.r"/37 Tile{ HalfReuse: 'e'/20 HalfReuse: 'f'/15 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[23], functions[efunc_ELm_Create]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::alloc_open_bracket(vm, context[25]);
      refalrts::alloc_ident(vm, context[26], identifiers[ident_FileRowCol]);
      refalrts::alloc_open_bracket(vm, context[27]);
      refalrts::alloc_number(vm, context[28], 1UL);
      refalrts::alloc_number(vm, context[29], 1UL);
      refalrts::alloc_chars(vm, context[30], context[31], "-decompiled.ref", 15);
      refalrts::alloc_close_bracket(vm, context[32]);
      refalrts::alloc_chars(vm, context[33], context[34], "RSL decompiler can\'t create ", 28);
      refalrts::copy_evar(vm, context[35], context[36], context[21], context[22]);
      refalrts::alloc_chars(vm, context[37], context[38], "-decompiled.r", 13);
      refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_char(context[20], 'e');
      refalrts::reinit_char(context[15], 'f');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[25], context[32] );
      refalrts::link_brackets( context[27], context[8] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[20];
      res = refalrts::splice_evar( res, context[30], context[38] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & LoadAST$3:1@2/4 (/7 e.BaseName/16 )/8 t.Config0/9 e.RetCode/18 s.Bool/15 >/1
    context[16] = context[11];
    context[17] = context[12];
    context[18] = context[13];
    context[19] = context[14];
    // closed e.BaseName as range 16
    // closed e.RetCode as range 18
    //DEBUG: t.Config0: 9
    //DEBUG: s.Bool: 15
    //DEBUG: e.BaseName: 16
    //DEBUG: e.RetCode: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Config0/9 {REMOVED TILE} s.Bool/15 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 HalfReuse: </7 } & EL-Create/20 >/21 (/22 # FileRowCol/23 (/24 1/25 1/26 Tile{ AsIs: )/8 } Tile{ AsIs: e.BaseName/16 }"-decompiled.ref"/27 )/29"RSL decompiler failed with retcode "/30 </32 & Symb/33 Tile{ AsIs: e.RetCode/18 } >/34 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[20], functions[efunc_ELm_Create]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::alloc_ident(vm, context[23], identifiers[ident_FileRowCol]);
    refalrts::alloc_open_bracket(vm, context[24]);
    refalrts::alloc_number(vm, context[25], 1UL);
    refalrts::alloc_number(vm, context[26], 1UL);
    refalrts::alloc_chars(vm, context[27], context[28], "-decompiled.ref", 15);
    refalrts::alloc_close_bracket(vm, context[29]);
    refalrts::alloc_chars(vm, context[30], context[31], "RSL decompiler failed with retcode ", 35);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[34]);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_open_call(context[7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[32] );
    refalrts::link_brackets( context[22], context[29] );
    refalrts::link_brackets( context[24], context[8] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[27], context[33] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[20], context[26] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & LoadAST$3:1@2/4 (/7 e.BaseName/5 )/8 t.Config0/9 e.dyn/2 >/1
  // closed e.BaseName as range 5
  // closed e.dyn as range 2
  //DEBUG: t.Config0: 9
  //DEBUG: e.BaseName: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & LoadAST$3:1@0/4 AsIs: (/7 } # FileRowCol/11 (/12 1/13 1/14 )/15 Tile{ AsIs: e.BaseName/5 }"-decompiled.ref"/16 )/18 (/19 e.BaseName/5/20"-decompiled.ref"/22 Tile{ AsIs: )/8 AsIs: t.Config0/9 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[11], identifiers[ident_FileRowCol]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_number(vm, context[13], 1UL);
  refalrts::alloc_number(vm, context[14], 1UL);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_chars(vm, context[16], context[17], "-decompiled.ref", 15);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::copy_evar(vm, context[20], context[21], context[5], context[6]);
  refalrts::alloc_chars(vm, context[22], context[23], "-decompiled.ref", 15);
  refalrts::update_name(context[4], functions[efunc_gen_LoadAST_S3B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[19], context[8] );
  refalrts::link_brackets( context[7], context[18] );
  refalrts::link_brackets( context[12], context[15] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[16], context[23] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_LoadAST_S3B1Z2("LoadAST$3:1@2", COOKIE1_, COOKIE2_, func_gen_LoadAST_S3B1Z2);


static refalrts::FnResult func_gen_Map_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & Map@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@1/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@1/4 (/7 t./13 s.Dialect/15 (/18 (/22 e.7/20 )/23 (/26 e.9/24 )/27 e.8/16 )/19 (/30 e.5/28 )/31 e.4/11 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.Tail as range 9
      context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
      if( ! context[14] )
        continue;
      if( ! refalrts::svar_left( context[15], context[11], context[12] ) )
        continue;
      context[16] = 0;
      context[17] = 0;
      context[18] = refalrts::brackets_left( context[16], context[17], context[11], context[12] );
      if( ! context[18] )
        continue;
      refalrts::bracket_pointers(context[18], context[19]);
      context[20] = 0;
      context[21] = 0;
      context[22] = refalrts::brackets_left( context[20], context[21], context[16], context[17] );
      if( ! context[22] )
        continue;
      refalrts::bracket_pointers(context[22], context[23]);
      context[24] = 0;
      context[25] = 0;
      context[26] = refalrts::brackets_left( context[24], context[25], context[16], context[17] );
      if( ! context[26] )
        continue;
      refalrts::bracket_pointers(context[26], context[27]);
      context[28] = 0;
      context[29] = 0;
      context[30] = refalrts::brackets_left( context[28], context[29], context[11], context[12] );
      if( ! context[30] )
        continue;
      refalrts::bracket_pointers(context[30], context[31]);
      // closed e.7 as range 20
      // closed e.9 as range 24
      // closed e.8 as range 16
      // closed e.5 as range 28
      // closed e.4 as range 11
      //DEBUG: e.Tail: 9
      //DEBUG: t.: 13
      //DEBUG: s.Dialect: 15
      //DEBUG: e.7: 20
      //DEBUG: e.9: 24
      //DEBUG: e.8: 16
      //DEBUG: e.5: 28
      //DEBUG: e.4: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Map@1/4 {REMOVED TILE} s.Dialect/15 (/18 (/22 e.7/20 )/23 {REMOVED TILE} e.8/16 {REMOVED TILE} {REMOVED TILE} )/31 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: t./13 } Tile{ AsIs: (/26 AsIs: e.9/24 AsIs: )/27 } Tile{ AsIs: e.5/28 } Tile{ AsIs: e.4/11 } Tile{ AsIs: )/19 HalfReuse: </30 } Tile{ HalfReuse: & Map@1/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[30]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[30] );
      refalrts::link_brackets( context[7], context[19] );
      refalrts::link_brackets( context[26], context[27] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[19], context[30] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[7], context[14] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@1/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ResolveIncludes$3\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@1/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z1]);
    refalrts::update_name(context[4], functions[efunc_gen_ResolveIncludes_S3L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@1/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@1/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@1/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & ResolveIncludes$3\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ResolveIncludes_S3L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z1("Map@1", COOKIE1_, COOKIE2_, func_gen_Map_Z1);


static refalrts::FnResult func_gen_Map_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Map@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@2/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@2/4 (/7 e./11 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e. as range 11
      // closed e.Tail as range 9
      //DEBUG: e.: 11
      //DEBUG: e.Tail: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} & Map@2/4 (/7 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e./11 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@2/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z2]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@2/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UnBracket*1/4 AsIs: t.Next/7 } >/11 </12 & Map@2/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z2]);
    refalrts::update_name(context[4], functions[efunc_gen_UnBracket_D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@2/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@2/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@2/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & UnBracket@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_UnBracket_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z2("Map@2", COOKIE1_, COOKIE2_, func_gen_Map_Z2);


static refalrts::FnResult func_gen_Map_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 63 elems
  refalrts::Iter context[63];
  refalrts::zeros( context, 63 );
  // </0 & Map@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@3/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Map@3/4 (/7 e.new5/9 )/8 t.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Map@3/4 (/7 e.new10/15 )/8 (/13 s.new6/21 t.new7/22 e.new8/19 )/14 e.new9/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      // closed e.new10 as range 15
      // closed e.new9 as range 17
      if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
        continue;
      context[23] = refalrts::tvar_left( context[22], context[19], context[20] );
      if( ! context[23] )
        continue;
      // closed e.new8 as range 19
      do {
        // </0 & Map@3/4 (/7 e.new16/24 )/8 (/13 # Function/21 t.new11/22 s.new12/30 (/33 e.new13/31 )/34 e.new14/26 )/14 e.new15/28 >/1
        context[24] = context[15];
        context[25] = context[16];
        context[26] = context[19];
        context[27] = context[20];
        context[28] = context[17];
        context[29] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_Function], context[21] ) )
          continue;
        // closed e.new16 as range 24
        // closed e.new15 as range 28
        if( ! refalrts::svar_left( context[30], context[26], context[27] ) )
          continue;
        context[31] = 0;
        context[32] = 0;
        context[33] = refalrts::brackets_left( context[31], context[32], context[26], context[27] );
        if( ! context[33] )
          continue;
        refalrts::bracket_pointers(context[33], context[34]);
        // closed e.new13 as range 31
        // closed e.new14 as range 26
        do {
          // </0 & Map@3/4 (/7 e.new22/35 )/8 (/13 # Function/21 s.new17/22 s.new18/30 (/33 e.new20/37 )/34 e.new19/39 )/14 e.new21/41 >/1
          context[35] = context[24];
          context[36] = context[25];
          context[37] = context[31];
          context[38] = context[32];
          context[39] = context[26];
          context[40] = context[27];
          context[41] = context[28];
          context[42] = context[29];
          if( ! refalrts::svar_term( context[22], context[22] ) )
            continue;
          // closed e.new22 as range 35
          // closed e.new20 as range 37
          // closed e.new19 as range 39
          // closed e.new21 as range 41
          do {
            // </0 & Map@3/4 (/7 e.UnitName/43 )/8 (/13 # Function/21 # NoPos/22 s.ScopeClass/30 (/33 e.4/45 )/34 e.3/47 )/14 e.Tail/49 >/1
            context[43] = context[35];
            context[44] = context[36];
            context[45] = context[37];
            context[46] = context[38];
            context[47] = context[39];
            context[48] = context[40];
            context[49] = context[41];
            context[50] = context[42];
            if( ! refalrts::ident_term( identifiers[ident_NoPos], context[22] ) )
              continue;
            // closed e.UnitName as range 43
            // closed e.4 as range 45
            // closed e.3 as range 47
            // closed e.Tail as range 49
            //DEBUG: s.ScopeClass: 30
            //DEBUG: e.UnitName: 43
            //DEBUG: e.4: 45
            //DEBUG: e.3: 47
            //DEBUG: e.Tail: 49

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # Function/21 AsIs: # NoPos/22 AsIs: s.ScopeClass/30 AsIs: (/33 AsIs: e.4/45 AsIs: )/34 } </51 & PatchAST-Body@1/52 (/53 e.UnitName/43/54 )/56 Tile{ AsIs: e.3/47 } >/57 Tile{ AsIs: )/14 } Tile{ AsIs: </0 AsIs: & Map@3/4 AsIs: (/7 AsIs: e.UnitName/43 AsIs: )/8 } Tile{ AsIs: e.Tail/49 } Tile{ AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[51]);
            refalrts::alloc_name(vm, context[52], functions[efunc_gen_PatchASTm_Body_Z1]);
            refalrts::alloc_open_bracket(vm, context[53]);
            refalrts::copy_evar(vm, context[54], context[55], context[43], context[44]);
            refalrts::alloc_close_bracket(vm, context[56]);
            refalrts::alloc_close_call(vm, context[57]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::link_brackets( context[13], context[14] );
            refalrts::push_stack( vm, context[57] );
            refalrts::push_stack( vm, context[51] );
            refalrts::link_brackets( context[53], context[56] );
            refalrts::link_brackets( context[33], context[34] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[49], context[50] );
            res = refalrts::splice_evar( res, context[0], context[8] );
            res = refalrts::splice_elem( res, context[14] );
            res = refalrts::splice_elem( res, context[57] );
            res = refalrts::splice_evar( res, context[47], context[48] );
            res = refalrts::splice_evar( res, context[51], context[56] );
            res = refalrts::splice_evar( res, context[13], context[34] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & Map@3/4 (/7 e.UnitName/43 )/8 (/13 # Function/21 s.LnNum/22 s.ScopeClass/30 (/33 e.4/45 )/34 e.3/47 )/14 e.Tail/49 >/1
          context[43] = context[35];
          context[44] = context[36];
          context[45] = context[37];
          context[46] = context[38];
          context[47] = context[39];
          context[48] = context[40];
          context[49] = context[41];
          context[50] = context[42];
          // closed e.UnitName as range 43
          // closed e.4 as range 45
          // closed e.3 as range 47
          // closed e.Tail as range 49
          //DEBUG: s.LnNum: 22
          //DEBUG: s.ScopeClass: 30
          //DEBUG: e.UnitName: 43
          //DEBUG: e.4: 45
          //DEBUG: e.3: 47
          //DEBUG: e.Tail: 49

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } (/51 # Function/52 Tile{ AsIs: (/13 Reuse: # FileLine/21 AsIs: s.LnNum/22 } e.UnitName/43/53 )/55 Tile{ AsIs: s.ScopeClass/30 AsIs: (/33 AsIs: e.4/45 AsIs: )/34 } </56 & PatchAST-Body@1/57 (/58 e.UnitName/43/59 Tile{ AsIs: )/14 } Tile{ AsIs: e.3/47 } >/61 )/62 Tile{ AsIs: </0 AsIs: & Map@3/4 AsIs: (/7 AsIs: e.UnitName/43 AsIs: )/8 } Tile{ AsIs: e.Tail/49 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[51]);
          refalrts::alloc_ident(vm, context[52], identifiers[ident_Function]);
          refalrts::copy_evar(vm, context[53], context[54], context[43], context[44]);
          refalrts::alloc_close_bracket(vm, context[55]);
          refalrts::alloc_open_call(vm, context[56]);
          refalrts::alloc_name(vm, context[57], functions[efunc_gen_PatchASTm_Body_Z1]);
          refalrts::alloc_open_bracket(vm, context[58]);
          refalrts::copy_evar(vm, context[59], context[60], context[43], context[44]);
          refalrts::alloc_close_call(vm, context[61]);
          refalrts::alloc_close_bracket(vm, context[62]);
          refalrts::update_ident(context[21], identifiers[ident_FileLine]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[51], context[62] );
          refalrts::push_stack( vm, context[61] );
          refalrts::push_stack( vm, context[56] );
          refalrts::link_brackets( context[58], context[14] );
          refalrts::link_brackets( context[33], context[34] );
          refalrts::link_brackets( context[13], context[55] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[49], context[50] );
          res = refalrts::splice_evar( res, context[0], context[8] );
          res = refalrts::splice_evar( res, context[61], context[62] );
          res = refalrts::splice_evar( res, context[47], context[48] );
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[59], context[60] );
          res = refalrts::splice_evar( res, context[56], context[58] );
          res = refalrts::splice_evar( res, context[30], context[34] );
          res = refalrts::splice_elem( res, context[55] );
          res = refalrts::splice_evar( res, context[53], context[54] );
          res = refalrts::splice_evar( res, context[13], context[22] );
          res = refalrts::splice_evar( res, context[51], context[52] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Map@3/4 (/7 e.UnitName/35 )/8 (/13 # Function/21 (/22 # RowCol/45 s.Row/46 s.Col/47 )/23 s.ScopeClass/30 (/33 e.5/37 )/34 e.4/39 )/14 e.Tail/41 >/1
          context[35] = context[24];
          context[36] = context[25];
          context[37] = context[31];
          context[38] = context[32];
          context[39] = context[26];
          context[40] = context[27];
          context[41] = context[28];
          context[42] = context[29];
          context[43] = 0;
          context[44] = 0;
          if( ! refalrts::brackets_term( context[43], context[44], context[22] ) )
            continue;
          context[45] = refalrts::ident_left( identifiers[ident_RowCol], context[43], context[44] );
          if( ! context[45] )
            continue;
          // closed e.UnitName as range 35
          // closed e.5 as range 37
          // closed e.4 as range 39
          // closed e.Tail as range 41
          if( ! refalrts::svar_left( context[46], context[43], context[44] ) )
            continue;
          if( ! refalrts::svar_left( context[47], context[43], context[44] ) )
            continue;
          if( ! refalrts::empty_seq( context[43], context[44] ) )
            continue;
          //DEBUG: s.ScopeClass: 30
          //DEBUG: e.UnitName: 35
          //DEBUG: e.5: 37
          //DEBUG: e.4: 39
          //DEBUG: e.Tail: 41
          //DEBUG: s.Row: 46
          //DEBUG: s.Col: 47

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # Function/21 AsIs: (/22 Reuse: # FileRowCol/45 } (/48 Tile{ AsIs: s.Row/46 AsIs: s.Col/47 } )/49 e.UnitName/35/50 Tile{ AsIs: )/23 AsIs: s.ScopeClass/30 AsIs: (/33 AsIs: e.5/37 AsIs: )/34 } </52 & PatchAST-Body@1/53 (/54 e.UnitName/35/55 Tile{ AsIs: )/14 } Tile{ AsIs: e.4/39 } >/57 )/58 Tile{ AsIs: </0 AsIs: & Map@3/4 AsIs: (/7 AsIs: e.UnitName/35 AsIs: )/8 } Tile{ AsIs: e.Tail/41 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[48]);
          refalrts::alloc_close_bracket(vm, context[49]);
          refalrts::copy_evar(vm, context[50], context[51], context[35], context[36]);
          refalrts::alloc_open_call(vm, context[52]);
          refalrts::alloc_name(vm, context[53], functions[efunc_gen_PatchASTm_Body_Z1]);
          refalrts::alloc_open_bracket(vm, context[54]);
          refalrts::copy_evar(vm, context[55], context[56], context[35], context[36]);
          refalrts::alloc_close_call(vm, context[57]);
          refalrts::alloc_close_bracket(vm, context[58]);
          refalrts::update_ident(context[45], identifiers[ident_FileRowCol]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[13], context[58] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[52] );
          refalrts::link_brackets( context[54], context[14] );
          refalrts::link_brackets( context[33], context[34] );
          refalrts::link_brackets( context[22], context[23] );
          refalrts::link_brackets( context[48], context[49] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[41], context[42] );
          res = refalrts::splice_evar( res, context[0], context[8] );
          res = refalrts::splice_evar( res, context[57], context[58] );
          res = refalrts::splice_evar( res, context[39], context[40] );
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          res = refalrts::splice_evar( res, context[52], context[54] );
          res = refalrts::splice_evar( res, context[23], context[34] );
          res = refalrts::splice_evar( res, context[50], context[51] );
          res = refalrts::splice_elem( res, context[49] );
          res = refalrts::splice_evar( res, context[46], context[47] );
          res = refalrts::splice_elem( res, context[48] );
          res = refalrts::splice_evar( res, context[13], context[45] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@3/4 (/7 e.UnitName/35 )/8 (/13 # Function/21 t.0/22 s.ScopeClass/30 (/33 e.4/37 )/34 e.3/39 )/14 e.Tail/41 >/1
        context[35] = context[24];
        context[36] = context[25];
        context[37] = context[31];
        context[38] = context[32];
        context[39] = context[26];
        context[40] = context[27];
        context[41] = context[28];
        context[42] = context[29];
        // closed e.UnitName as range 35
        // closed e.4 as range 37
        // closed e.3 as range 39
        // closed e.Tail as range 41
        //DEBUG: t.0: 22
        //DEBUG: s.ScopeClass: 30
        //DEBUG: e.UnitName: 35
        //DEBUG: e.4: 37
        //DEBUG: e.3: 39
        //DEBUG: e.Tail: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/43 Tile{ AsIs: # Function/21 } Tile{ AsIs: </0 Reuse: & PatchASTSrcPos=1\1*4/4 AsIs: (/7 AsIs: e.UnitName/35 AsIs: )/8 HalfReuse: # SrcPos/13 } Tile{ AsIs: t.0/22 } >/44 Tile{ AsIs: s.ScopeClass/30 AsIs: (/33 AsIs: e.4/37 AsIs: )/34 } </45 & PatchAST-Body@1/46 (/47 e.UnitName/35/48 )/50 Tile{ AsIs: e.3/39 } >/51 )/52 </53 & Map@3/54 (/55 e.UnitName/35/56 Tile{ AsIs: )/14 AsIs: e.Tail/41 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[43]);
        refalrts::alloc_close_call(vm, context[44]);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_PatchASTm_Body_Z1]);
        refalrts::alloc_open_bracket(vm, context[47]);
        refalrts::copy_evar(vm, context[48], context[49], context[35], context[36]);
        refalrts::alloc_close_bracket(vm, context[50]);
        refalrts::alloc_close_call(vm, context[51]);
        refalrts::alloc_close_bracket(vm, context[52]);
        refalrts::alloc_open_call(vm, context[53]);
        refalrts::alloc_name(vm, context[54], functions[efunc_gen_Map_Z3]);
        refalrts::alloc_open_bracket(vm, context[55]);
        refalrts::copy_evar(vm, context[56], context[57], context[35], context[36]);
        refalrts::update_name(context[4], functions[efunc_gen_PatchASTSrcPos_A1L1D4]);
        refalrts::reinit_ident(context[13], identifiers[ident_SrcPos]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[53] );
        refalrts::link_brackets( context[55], context[14] );
        refalrts::link_brackets( context[43], context[52] );
        refalrts::push_stack( vm, context[51] );
        refalrts::push_stack( vm, context[45] );
        refalrts::link_brackets( context[47], context[50] );
        refalrts::link_brackets( context[33], context[34] );
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[56], context[57] );
        res = refalrts::splice_evar( res, context[51], context[55] );
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[45], context[50] );
        res = refalrts::splice_evar( res, context[30], context[34] );
        res = refalrts::splice_elem( res, context[44] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[0], context[13] );
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_elem( res, context[43] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@3/4 (/7 e.new14/24 )/8 (/13 # Ident/21 t.new11/22 e.new12/26 )/14 e.new13/28 >/1
        context[24] = context[15];
        context[25] = context[16];
        context[26] = context[19];
        context[27] = context[20];
        context[28] = context[17];
        context[29] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_Ident], context[21] ) )
          continue;
        // closed e.new14 as range 24
        // closed e.new12 as range 26
        // closed e.new13 as range 28
        do {
          // </0 & Map@3/4 (/7 e.new18/30 )/8 (/13 # Ident/21 s.new15/22 e.new16/32 )/14 e.new17/34 >/1
          context[30] = context[24];
          context[31] = context[25];
          context[32] = context[26];
          context[33] = context[27];
          context[34] = context[28];
          context[35] = context[29];
          if( ! refalrts::svar_term( context[22], context[22] ) )
            continue;
          // closed e.new18 as range 30
          // closed e.new16 as range 32
          // closed e.new17 as range 34
          do {
            // </0 & Map@3/4 (/7 e.UnitName/36 )/8 (/13 # Ident/21 # NoPos/22 e.1/38 )/14 e.Tail/40 >/1
            context[36] = context[30];
            context[37] = context[31];
            context[38] = context[32];
            context[39] = context[33];
            context[40] = context[34];
            context[41] = context[35];
            if( ! refalrts::ident_term( identifiers[ident_NoPos], context[22] ) )
              continue;
            // closed e.UnitName as range 36
            // closed e.1 as range 38
            // closed e.Tail as range 40
            //DEBUG: e.UnitName: 36
            //DEBUG: e.1: 38
            //DEBUG: e.Tail: 40

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # Ident/21 AsIs: # NoPos/22 AsIs: e.1/38 AsIs: )/14 } Tile{ AsIs: </0 AsIs: & Map@3/4 AsIs: (/7 AsIs: e.UnitName/36 AsIs: )/8 } Tile{ AsIs: e.Tail/40 } Tile{ AsIs: >/1 ]] }
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::link_brackets( context[13], context[14] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[40], context[41] );
            res = refalrts::splice_evar( res, context[0], context[8] );
            res = refalrts::splice_evar( res, context[13], context[14] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & Map@3/4 (/7 e.UnitName/36 )/8 (/13 # Ident/21 s.LnNum/22 e.1/38 )/14 e.Tail/40 >/1
          context[36] = context[30];
          context[37] = context[31];
          context[38] = context[32];
          context[39] = context[33];
          context[40] = context[34];
          context[41] = context[35];
          // closed e.UnitName as range 36
          // closed e.1 as range 38
          // closed e.Tail as range 40
          //DEBUG: s.LnNum: 22
          //DEBUG: e.UnitName: 36
          //DEBUG: e.1: 38
          //DEBUG: e.Tail: 40

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } (/42 # Ident/43 Tile{ AsIs: (/13 Reuse: # FileLine/21 AsIs: s.LnNum/22 } e.UnitName/36/44 )/46 Tile{ AsIs: e.1/38 } Tile{ AsIs: )/14 } Tile{ AsIs: </0 AsIs: & Map@3/4 AsIs: (/7 AsIs: e.UnitName/36 AsIs: )/8 } Tile{ AsIs: e.Tail/40 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[42]);
          refalrts::alloc_ident(vm, context[43], identifiers[ident_Ident]);
          refalrts::copy_evar(vm, context[44], context[45], context[36], context[37]);
          refalrts::alloc_close_bracket(vm, context[46]);
          refalrts::update_ident(context[21], identifiers[ident_FileLine]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[42], context[14] );
          refalrts::link_brackets( context[13], context[46] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[40], context[41] );
          res = refalrts::splice_evar( res, context[0], context[8] );
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[38], context[39] );
          res = refalrts::splice_elem( res, context[46] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[13], context[22] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Map@3/4 (/7 e.UnitName/30 )/8 (/13 # Ident/21 (/22 # RowCol/38 s.Row/39 s.Col/40 )/23 e.1/32 )/14 e.Tail/34 >/1
          context[30] = context[24];
          context[31] = context[25];
          context[32] = context[26];
          context[33] = context[27];
          context[34] = context[28];
          context[35] = context[29];
          context[36] = 0;
          context[37] = 0;
          if( ! refalrts::brackets_term( context[36], context[37], context[22] ) )
            continue;
          context[38] = refalrts::ident_left( identifiers[ident_RowCol], context[36], context[37] );
          if( ! context[38] )
            continue;
          // closed e.UnitName as range 30
          // closed e.1 as range 32
          // closed e.Tail as range 34
          if( ! refalrts::svar_left( context[39], context[36], context[37] ) )
            continue;
          if( ! refalrts::svar_left( context[40], context[36], context[37] ) )
            continue;
          if( ! refalrts::empty_seq( context[36], context[37] ) )
            continue;
          //DEBUG: e.UnitName: 30
          //DEBUG: e.1: 32
          //DEBUG: e.Tail: 34
          //DEBUG: s.Row: 39
          //DEBUG: s.Col: 40

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } (/41 Tile{ HalfReuse: # Ident/13 HalfReuse: (/21 HalfReuse: # FileRowCol/22 HalfReuse: (/38 AsIs: s.Row/39 AsIs: s.Col/40 AsIs: )/23 } e.UnitName/30/42 )/44 Tile{ AsIs: e.1/32 } Tile{ AsIs: )/14 } Tile{ AsIs: </0 AsIs: & Map@3/4 AsIs: (/7 AsIs: e.UnitName/30 AsIs: )/8 } Tile{ AsIs: e.Tail/34 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[41]);
          refalrts::copy_evar(vm, context[42], context[43], context[30], context[31]);
          refalrts::alloc_close_bracket(vm, context[44]);
          refalrts::reinit_ident(context[13], identifiers[ident_Ident]);
          refalrts::reinit_open_bracket(context[21]);
          refalrts::reinit_ident(context[22], identifiers[ident_FileRowCol]);
          refalrts::reinit_open_bracket(context[38]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[41], context[14] );
          refalrts::link_brackets( context[21], context[44] );
          refalrts::link_brackets( context[38], context[23] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[0], context[8] );
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_elem( res, context[44] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[13], context[23] );
          res = refalrts::splice_elem( res, context[41] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@3/4 (/7 e.UnitName/30 )/8 (/13 # Ident/21 t.0/22 e.1/32 )/14 e.Tail/34 >/1
        context[30] = context[24];
        context[31] = context[25];
        context[32] = context[26];
        context[33] = context[27];
        context[34] = context[28];
        context[35] = context[29];
        // closed e.UnitName as range 30
        // closed e.1 as range 32
        // closed e.Tail as range 34
        //DEBUG: t.0: 22
        //DEBUG: e.UnitName: 30
        //DEBUG: e.1: 32
        //DEBUG: e.Tail: 34

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/36 Tile{ AsIs: # Ident/21 } Tile{ AsIs: </0 Reuse: & PatchASTSrcPos=1\1*4/4 AsIs: (/7 AsIs: e.UnitName/30 AsIs: )/8 HalfReuse: # SrcPos/13 } Tile{ AsIs: t.0/22 } >/37 Tile{ AsIs: e.1/32 } )/38 </39 & Map@3/40 (/41 e.UnitName/30/42 Tile{ AsIs: )/14 AsIs: e.Tail/34 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[36]);
        refalrts::alloc_close_call(vm, context[37]);
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::alloc_open_call(vm, context[39]);
        refalrts::alloc_name(vm, context[40], functions[efunc_gen_Map_Z3]);
        refalrts::alloc_open_bracket(vm, context[41]);
        refalrts::copy_evar(vm, context[42], context[43], context[30], context[31]);
        refalrts::update_name(context[4], functions[efunc_gen_PatchASTSrcPos_A1L1D4]);
        refalrts::reinit_ident(context[13], identifiers[ident_SrcPos]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[39] );
        refalrts::link_brackets( context[41], context[14] );
        refalrts::link_brackets( context[36], context[38] );
        refalrts::push_stack( vm, context[37] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[38], context[41] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_elem( res, context[37] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[0], context[13] );
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_elem( res, context[36] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@3/4 (/7 e.new14/24 )/8 (/13 # NativeBlock/21 t.new11/22 e.new12/26 )/14 e.new13/28 >/1
        context[24] = context[15];
        context[25] = context[16];
        context[26] = context[19];
        context[27] = context[20];
        context[28] = context[17];
        context[29] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_NativeBlock], context[21] ) )
          continue;
        // closed e.new14 as range 24
        // closed e.new12 as range 26
        // closed e.new13 as range 28
        do {
          // </0 & Map@3/4 (/7 e.new18/30 )/8 (/13 # NativeBlock/21 s.new15/22 e.new16/32 )/14 e.new17/34 >/1
          context[30] = context[24];
          context[31] = context[25];
          context[32] = context[26];
          context[33] = context[27];
          context[34] = context[28];
          context[35] = context[29];
          if( ! refalrts::svar_term( context[22], context[22] ) )
            continue;
          // closed e.new18 as range 30
          // closed e.new16 as range 32
          // closed e.new17 as range 34
          do {
            // </0 & Map@3/4 (/7 e.UnitName/36 )/8 (/13 # NativeBlock/21 # NoPos/22 e.1/38 )/14 e.Tail/40 >/1
            context[36] = context[30];
            context[37] = context[31];
            context[38] = context[32];
            context[39] = context[33];
            context[40] = context[34];
            context[41] = context[35];
            if( ! refalrts::ident_term( identifiers[ident_NoPos], context[22] ) )
              continue;
            // closed e.UnitName as range 36
            // closed e.1 as range 38
            // closed e.Tail as range 40
            //DEBUG: e.UnitName: 36
            //DEBUG: e.1: 38
            //DEBUG: e.Tail: 40

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # NativeBlock/21 AsIs: # NoPos/22 AsIs: e.1/38 AsIs: )/14 } Tile{ AsIs: </0 AsIs: & Map@3/4 AsIs: (/7 AsIs: e.UnitName/36 AsIs: )/8 } Tile{ AsIs: e.Tail/40 } Tile{ AsIs: >/1 ]] }
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::link_brackets( context[13], context[14] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[40], context[41] );
            res = refalrts::splice_evar( res, context[0], context[8] );
            res = refalrts::splice_evar( res, context[13], context[14] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & Map@3/4 (/7 e.UnitName/36 )/8 (/13 # NativeBlock/21 s.LnNum/22 e.1/38 )/14 e.Tail/40 >/1
          context[36] = context[30];
          context[37] = context[31];
          context[38] = context[32];
          context[39] = context[33];
          context[40] = context[34];
          context[41] = context[35];
          // closed e.UnitName as range 36
          // closed e.1 as range 38
          // closed e.Tail as range 40
          //DEBUG: s.LnNum: 22
          //DEBUG: e.UnitName: 36
          //DEBUG: e.1: 38
          //DEBUG: e.Tail: 40

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } (/42 # NativeBlock/43 Tile{ AsIs: (/13 Reuse: # FileLine/21 AsIs: s.LnNum/22 } e.UnitName/36/44 )/46 Tile{ AsIs: e.1/38 } Tile{ AsIs: )/14 } Tile{ AsIs: </0 AsIs: & Map@3/4 AsIs: (/7 AsIs: e.UnitName/36 AsIs: )/8 } Tile{ AsIs: e.Tail/40 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[42]);
          refalrts::alloc_ident(vm, context[43], identifiers[ident_NativeBlock]);
          refalrts::copy_evar(vm, context[44], context[45], context[36], context[37]);
          refalrts::alloc_close_bracket(vm, context[46]);
          refalrts::update_ident(context[21], identifiers[ident_FileLine]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[42], context[14] );
          refalrts::link_brackets( context[13], context[46] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[40], context[41] );
          res = refalrts::splice_evar( res, context[0], context[8] );
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[38], context[39] );
          res = refalrts::splice_elem( res, context[46] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[13], context[22] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & Map@3/4 (/7 e.UnitName/30 )/8 (/13 # NativeBlock/21 (/22 # RowCol/38 s.Row/39 s.Col/40 )/23 e.1/32 )/14 e.Tail/34 >/1
          context[30] = context[24];
          context[31] = context[25];
          context[32] = context[26];
          context[33] = context[27];
          context[34] = context[28];
          context[35] = context[29];
          context[36] = 0;
          context[37] = 0;
          if( ! refalrts::brackets_term( context[36], context[37], context[22] ) )
            continue;
          context[38] = refalrts::ident_left( identifiers[ident_RowCol], context[36], context[37] );
          if( ! context[38] )
            continue;
          // closed e.UnitName as range 30
          // closed e.1 as range 32
          // closed e.Tail as range 34
          if( ! refalrts::svar_left( context[39], context[36], context[37] ) )
            continue;
          if( ! refalrts::svar_left( context[40], context[36], context[37] ) )
            continue;
          if( ! refalrts::empty_seq( context[36], context[37] ) )
            continue;
          //DEBUG: e.UnitName: 30
          //DEBUG: e.1: 32
          //DEBUG: e.Tail: 34
          //DEBUG: s.Row: 39
          //DEBUG: s.Col: 40

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } (/41 Tile{ HalfReuse: # NativeBlock/13 HalfReuse: (/21 HalfReuse: # FileRowCol/22 HalfReuse: (/38 AsIs: s.Row/39 AsIs: s.Col/40 AsIs: )/23 } e.UnitName/30/42 )/44 Tile{ AsIs: e.1/32 } Tile{ AsIs: )/14 } Tile{ AsIs: </0 AsIs: & Map@3/4 AsIs: (/7 AsIs: e.UnitName/30 AsIs: )/8 } Tile{ AsIs: e.Tail/34 } Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[41]);
          refalrts::copy_evar(vm, context[42], context[43], context[30], context[31]);
          refalrts::alloc_close_bracket(vm, context[44]);
          refalrts::reinit_ident(context[13], identifiers[ident_NativeBlock]);
          refalrts::reinit_open_bracket(context[21]);
          refalrts::reinit_ident(context[22], identifiers[ident_FileRowCol]);
          refalrts::reinit_open_bracket(context[38]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[41], context[14] );
          refalrts::link_brackets( context[21], context[44] );
          refalrts::link_brackets( context[38], context[23] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_evar( res, context[0], context[8] );
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_elem( res, context[44] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[13], context[23] );
          res = refalrts::splice_elem( res, context[41] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@3/4 (/7 e.UnitName/30 )/8 (/13 # NativeBlock/21 t.0/22 e.1/32 )/14 e.Tail/34 >/1
        context[30] = context[24];
        context[31] = context[25];
        context[32] = context[26];
        context[33] = context[27];
        context[34] = context[28];
        context[35] = context[29];
        // closed e.UnitName as range 30
        // closed e.1 as range 32
        // closed e.Tail as range 34
        //DEBUG: t.0: 22
        //DEBUG: e.UnitName: 30
        //DEBUG: e.1: 32
        //DEBUG: e.Tail: 34

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/36 Tile{ AsIs: # NativeBlock/21 } Tile{ AsIs: </0 Reuse: & PatchASTSrcPos=1\1*4/4 AsIs: (/7 AsIs: e.UnitName/30 AsIs: )/8 HalfReuse: # SrcPos/13 } Tile{ AsIs: t.0/22 } >/37 Tile{ AsIs: e.1/32 } )/38 </39 & Map@3/40 (/41 e.UnitName/30/42 Tile{ AsIs: )/14 AsIs: e.Tail/34 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[36]);
        refalrts::alloc_close_call(vm, context[37]);
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::alloc_open_call(vm, context[39]);
        refalrts::alloc_name(vm, context[40], functions[efunc_gen_Map_Z3]);
        refalrts::alloc_open_bracket(vm, context[41]);
        refalrts::copy_evar(vm, context[42], context[43], context[30], context[31]);
        refalrts::update_name(context[4], functions[efunc_gen_PatchASTSrcPos_A1L1D4]);
        refalrts::reinit_ident(context[13], identifiers[ident_SrcPos]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[39] );
        refalrts::link_brackets( context[41], context[14] );
        refalrts::link_brackets( context[36], context[38] );
        refalrts::push_stack( vm, context[37] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[38], context[41] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_elem( res, context[37] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[0], context[13] );
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_elem( res, context[36] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@3/4 (/7 e.UnitName/24 )/8 (/13 # Include/21 t.0/22 e.1/26 )/14 e.Tail/28 >/1
      context[24] = context[15];
      context[25] = context[16];
      context[26] = context[19];
      context[27] = context[20];
      context[28] = context[17];
      context[29] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_Include], context[21] ) )
        continue;
      // closed e.UnitName as range 24
      // closed e.1 as range 26
      // closed e.Tail as range 28
      //DEBUG: t.0: 22
      //DEBUG: e.UnitName: 24
      //DEBUG: e.1: 26
      //DEBUG: e.Tail: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/13 # Include/21 t.0/22 e.1/26 )/14 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Map@3/4 AsIs: (/7 AsIs: e.UnitName/24 AsIs: )/8 } Tile{ AsIs: e.Tail/28 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[28], context[29] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@3/4 (/7 e.UnitName/15 )/8 t.Next/13 e.Tail/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.UnitName as range 15
    // closed e.Tail as range 17
    //DEBUG: t.Next: 13
    //DEBUG: e.UnitName: 15
    //DEBUG: e.Tail: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </19 & PatchAST-Item@1*13/20 e.UnitName/15/21 Tile{ AsIs: t.Next/13 } >/23 Tile{ AsIs: </0 AsIs: & Map@3/4 AsIs: (/7 AsIs: e.UnitName/15 AsIs: )/8 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_PatchASTm_Item_Z1D13]);
    refalrts::copy_evar(vm, context[21], context[22], context[15], context[16]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[19] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@3/4 (/7 e.UnitName/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.UnitName as range 9
    //DEBUG: e.UnitName: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@3/4 (/7 e.UnitName/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@3/4 (/7 e.UnitName/5 )/8 e.items/2 >/1
  // closed e.UnitName as range 5
  // closed e.items as range 2
  //DEBUG: e.UnitName: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 (/11 & PatchAST-Item@0/12 Tile{ HalfReuse: [*]/0 Reuse: & PatchASTSrcPos=1\1@0/4 AsIs: (/7 AsIs: e.UnitName/5 AsIs: )/8 } {*}/13 )/14 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_PatchASTm_Item_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[13], context[0]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_PatchASTSrcPos_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[11], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  refalrts::wrap_closure( context[13] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z3("Map@3", COOKIE1_, COOKIE2_, func_gen_Map_Z3);


static refalrts::FnResult func_gen_Map_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & Map@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@4/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Map@4/4 s.new3/5 t.new4/8 e.new5/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[9] = refalrts::tvar_left( context[8], context[6], context[7] );
    if( ! context[9] )
      continue;
    // closed e.new5 as range 6
    do {
      // </0 & Map@4/4 s.new6/5 (/8 s.new7/14 t.new8/15 e.new9/12 )/9 e.new10/10 >/1
      context[10] = context[6];
      context[11] = context[7];
      context[12] = 0;
      context[13] = 0;
      if( ! refalrts::brackets_term( context[12], context[13], context[8] ) )
        continue;
      // closed e.new10 as range 10
      if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
        continue;
      context[16] = refalrts::tvar_left( context[15], context[12], context[13] );
      if( ! context[16] )
        continue;
      // closed e.new9 as range 12
      do {
        // </0 & Map@4/4 s.FnPatch/5 (/8 # Function/14 t.0/15 s.ScopeClass/21 (/24 e.4/22 )/25 e.3/17 )/9 e.Tail/19 >/1
        context[17] = context[12];
        context[18] = context[13];
        context[19] = context[10];
        context[20] = context[11];
        if( ! refalrts::ident_term( identifiers[ident_Function], context[14] ) )
          continue;
        // closed e.Tail as range 19
        if( ! refalrts::svar_left( context[21], context[17], context[18] ) )
          continue;
        context[22] = 0;
        context[23] = 0;
        context[24] = refalrts::brackets_left( context[22], context[23], context[17], context[18] );
        if( ! context[24] )
          continue;
        refalrts::bracket_pointers(context[24], context[25]);
        // closed e.4 as range 22
        // closed e.3 as range 17
        //DEBUG: t.0: 15
        //DEBUG: s.FnPatch: 5
        //DEBUG: e.Tail: 19
        //DEBUG: s.ScopeClass: 21
        //DEBUG: e.4: 22
        //DEBUG: e.3: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: # Function/14 } </26 s.FnPatch/5/27 # SrcPos/28 Tile{ AsIs: t.0/15 } >/29 Tile{ AsIs: s.ScopeClass/21 AsIs: (/24 } </30 s.FnPatch/5/31 # Name/32 Tile{ AsIs: e.4/22 } >/33 Tile{ AsIs: )/25 } Tile{ AsIs: </0 Reuse: & PatchAST-Body/4 AsIs: s.FnPatch/5 } Tile{ AsIs: e.3/17 } >/34 )/35 </36 & Map@4/37 Tile{ HalfReuse: s.FnPatch5 /9 AsIs: e.Tail/19 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[26]);
        refalrts::copy_stvar(vm, context[27], context[5]);
        refalrts::alloc_ident(vm, context[28], identifiers[ident_SrcPos]);
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::copy_stvar(vm, context[31], context[5]);
        refalrts::alloc_ident(vm, context[32], identifiers[ident_Name]);
        refalrts::alloc_close_call(vm, context[33]);
        refalrts::alloc_close_call(vm, context[34]);
        refalrts::alloc_close_bracket(vm, context[35]);
        refalrts::alloc_open_call(vm, context[36]);
        refalrts::alloc_name(vm, context[37], functions[efunc_gen_Map_Z4]);
        refalrts::update_name(context[4], functions[efunc_PatchASTm_Body]);
        refalrts::reinit_svar( context[9], context[5] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[36] );
        refalrts::link_brackets( context[8], context[35] );
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[24], context[25] );
        refalrts::push_stack( vm, context[33] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[26] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[9];
        res = refalrts::splice_evar( res, context[34], context[37] );
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[0], context[5] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_elem( res, context[33] );
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[30], context[32] );
        res = refalrts::splice_evar( res, context[21], context[24] );
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_evar( res, context[26], context[28] );
        res = refalrts::splice_evar( res, context[8], context[14] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@4/4 s.FnPatch/5 (/8 # Ident/14 t.0/15 e.1/17 )/9 e.Tail/19 >/1
        context[17] = context[12];
        context[18] = context[13];
        context[19] = context[10];
        context[20] = context[11];
        if( ! refalrts::ident_term( identifiers[ident_Ident], context[14] ) )
          continue;
        // closed e.1 as range 17
        // closed e.Tail as range 19
        //DEBUG: t.0: 15
        //DEBUG: s.FnPatch: 5
        //DEBUG: e.1: 17
        //DEBUG: e.Tail: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.FnPatch/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/21 # Ident/22 </23 Tile{ HalfReuse: s.FnPatch5 /8 Reuse: # SrcPos/14 AsIs: t.0/15 } >/24 Tile{ AsIs: e.1/17 } )/25 Tile{ AsIs: </0 AsIs: & Map@4/4 } Tile{ HalfReuse: s.FnPatch5 /9 AsIs: e.Tail/19 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[21]);
        refalrts::alloc_ident(vm, context[22], identifiers[ident_Ident]);
        refalrts::alloc_open_call(vm, context[23]);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_bracket(vm, context[25]);
        refalrts::reinit_svar( context[8], context[5] );
        refalrts::update_ident(context[14], identifiers[ident_SrcPos]);
        refalrts::reinit_svar( context[9], context[5] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[21], context[25] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[9];
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_elem( res, context[24] );
        res = refalrts::splice_evar( res, context[8], context[16] );
        res = refalrts::splice_evar( res, context[21], context[23] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@4/4 s.FnPatch/5 (/8 # NativeBlock/14 t.0/15 e.1/17 )/9 e.Tail/19 >/1
        context[17] = context[12];
        context[18] = context[13];
        context[19] = context[10];
        context[20] = context[11];
        if( ! refalrts::ident_term( identifiers[ident_NativeBlock], context[14] ) )
          continue;
        // closed e.1 as range 17
        // closed e.Tail as range 19
        //DEBUG: t.0: 15
        //DEBUG: s.FnPatch: 5
        //DEBUG: e.1: 17
        //DEBUG: e.Tail: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.FnPatch/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/21 # NativeBlock/22 </23 Tile{ HalfReuse: s.FnPatch5 /8 Reuse: # SrcPos/14 AsIs: t.0/15 } >/24 Tile{ AsIs: e.1/17 } )/25 Tile{ AsIs: </0 AsIs: & Map@4/4 } Tile{ HalfReuse: s.FnPatch5 /9 AsIs: e.Tail/19 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[21]);
        refalrts::alloc_ident(vm, context[22], identifiers[ident_NativeBlock]);
        refalrts::alloc_open_call(vm, context[23]);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_bracket(vm, context[25]);
        refalrts::reinit_svar( context[8], context[5] );
        refalrts::update_ident(context[14], identifiers[ident_SrcPos]);
        refalrts::reinit_svar( context[9], context[5] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[21], context[25] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[9];
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_elem( res, context[24] );
        res = refalrts::splice_evar( res, context[8], context[16] );
        res = refalrts::splice_evar( res, context[21], context[23] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@4/4 s.FnPatch/5 (/8 # Include/14 t.0/15 e.1/17 )/9 e.Tail/19 >/1
      context[17] = context[12];
      context[18] = context[13];
      context[19] = context[10];
      context[20] = context[11];
      if( ! refalrts::ident_term( identifiers[ident_Include], context[14] ) )
        continue;
      // closed e.1 as range 17
      // closed e.Tail as range 19
      //DEBUG: t.0: 15
      //DEBUG: s.FnPatch: 5
      //DEBUG: e.1: 17
      //DEBUG: e.Tail: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/8 # Include/14 t.0/15 e.1/17 )/9 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Map@4/4 AsIs: s.FnPatch/5 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[19], context[20] );
      refalrts::splice_to_freelist_open( vm, context[5], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@4/4 s.FnPatch/5 t.Next/8 e.Tail/10 >/1
    context[10] = context[6];
    context[11] = context[7];
    // closed e.Tail as range 10
    //DEBUG: t.Next: 8
    //DEBUG: s.FnPatch: 5
    //DEBUG: e.Tail: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PatchAST-Item*4/4 AsIs: s.FnPatch/5 AsIs: t.Next/8 } >/12 </13 & Map@4/14 s.FnPatch/5/15 Tile{ AsIs: e.Tail/10 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[12]);
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Map_Z4]);
    refalrts::copy_stvar(vm, context[15], context[5]);
    refalrts::update_name(context[4], functions[efunc_gen_PatchASTm_Item_D4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@4/4 s.FnPatch/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.FnPatch: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@4/4 s.FnPatch/5 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@4/4 s.FnPatch/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: s.FnPatch: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@0/4 } (/6 & PatchAST-Item@0/7 Tile{ AsIs: s.FnPatch/5 } )/8 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_PatchASTm_Item_Z0]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[6], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z4("Map@4", COOKIE1_, COOKIE2_, func_gen_Map_Z4);


static refalrts::FnResult func_gen_Map_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & Map@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@5/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Map@5/4 s.new3/5 t.new4/8 e.new5/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[9] = refalrts::tvar_left( context[8], context[6], context[7] );
    if( ! context[9] )
      continue;
    // closed e.new5 as range 6
    do {
      // </0 & Map@5/4 s.new6/5 (/8 s.new7/14 e.new8/12 )/9 e.new9/10 >/1
      context[10] = context[6];
      context[11] = context[7];
      context[12] = 0;
      context[13] = 0;
      if( ! refalrts::brackets_term( context[12], context[13], context[8] ) )
        continue;
      // closed e.new9 as range 10
      if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
        continue;
      // closed e.new8 as range 12
      do {
        // </0 & Map@5/4 s.new10/5 (/8 s.new11/14 t.new12/19 t.new13/21 e.new14/15 )/9 e.new15/17 >/1
        context[15] = context[12];
        context[16] = context[13];
        context[17] = context[10];
        context[18] = context[11];
        // closed e.new15 as range 17
        context[20] = refalrts::tvar_left( context[19], context[15], context[16] );
        if( ! context[20] )
          continue;
        context[22] = refalrts::tvar_left( context[21], context[15], context[16] );
        if( ! context[22] )
          continue;
        // closed e.new14 as range 15
        do {
          // </0 & Map@5/4 s.new16/5 (/8 s.new17/14 t.new18/19 s.new19/21 e.new20/23 )/9 e.new21/25 >/1
          context[23] = context[15];
          context[24] = context[16];
          context[25] = context[17];
          context[26] = context[18];
          if( ! refalrts::svar_term( context[21], context[21] ) )
            continue;
          // closed e.new20 as range 23
          // closed e.new21 as range 25
          do {
            // </0 & Map@5/4 s.FnPatch/5 (/8 # Var/14 t.0/19 s.Mode/21 e.2/27 )/9 e.Tail/29 >/1
            context[27] = context[23];
            context[28] = context[24];
            context[29] = context[25];
            context[30] = context[26];
            if( ! refalrts::ident_term( identifiers[ident_Var], context[14] ) )
              continue;
            // closed e.2 as range 27
            // closed e.Tail as range 29
            //DEBUG: t.0: 19
            //DEBUG: s.FnPatch: 5
            //DEBUG: s.Mode: 21
            //DEBUG: e.2: 27
            //DEBUG: e.Tail: 29

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} s.FnPatch/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } (/31 # Var/32 </33 Tile{ HalfReuse: s.FnPatch5 /8 Reuse: # SrcPos/14 AsIs: t.0/19 } >/34 Tile{ AsIs: s.Mode/21 } Tile{ AsIs: e.2/27 } )/35 Tile{ AsIs: </0 AsIs: & Map@5/4 } Tile{ HalfReuse: s.FnPatch5 /9 AsIs: e.Tail/29 AsIs: >/1 ]] }
            refalrts::alloc_open_bracket(vm, context[31]);
            refalrts::alloc_ident(vm, context[32], identifiers[ident_Var]);
            refalrts::alloc_open_call(vm, context[33]);
            refalrts::alloc_close_call(vm, context[34]);
            refalrts::alloc_close_bracket(vm, context[35]);
            refalrts::reinit_svar( context[8], context[5] );
            refalrts::update_ident(context[14], identifiers[ident_SrcPos]);
            refalrts::reinit_svar( context[9], context[5] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[31], context[35] );
            refalrts::push_stack( vm, context[34] );
            refalrts::push_stack( vm, context[33] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[9];
            res = refalrts::splice_evar( res, context[0], context[4] );
            res = refalrts::splice_elem( res, context[35] );
            res = refalrts::splice_evar( res, context[27], context[28] );
            res = refalrts::splice_elem( res, context[21] );
            res = refalrts::splice_elem( res, context[34] );
            res = refalrts::splice_evar( res, context[8], context[20] );
            res = refalrts::splice_evar( res, context[31], context[33] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & Map@5/4 s.FnPatch/5 (/8 # NewVar/14 t.0/19 s.Mode/21 e.2/27 )/9 e.Tail/29 >/1
          context[27] = context[23];
          context[28] = context[24];
          context[29] = context[25];
          context[30] = context[26];
          if( ! refalrts::ident_term( identifiers[ident_NewVar], context[14] ) )
            continue;
          // closed e.2 as range 27
          // closed e.Tail as range 29
          //DEBUG: t.0: 19
          //DEBUG: s.FnPatch: 5
          //DEBUG: s.Mode: 21
          //DEBUG: e.2: 27
          //DEBUG: e.Tail: 29

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.FnPatch/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } (/31 # NewVar/32 </33 Tile{ HalfReuse: s.FnPatch5 /8 Reuse: # SrcPos/14 AsIs: t.0/19 } >/34 Tile{ AsIs: s.Mode/21 } Tile{ AsIs: e.2/27 } )/35 Tile{ AsIs: </0 AsIs: & Map@5/4 } Tile{ HalfReuse: s.FnPatch5 /9 AsIs: e.Tail/29 AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[31]);
          refalrts::alloc_ident(vm, context[32], identifiers[ident_NewVar]);
          refalrts::alloc_open_call(vm, context[33]);
          refalrts::alloc_close_call(vm, context[34]);
          refalrts::alloc_close_bracket(vm, context[35]);
          refalrts::reinit_svar( context[8], context[5] );
          refalrts::update_ident(context[14], identifiers[ident_SrcPos]);
          refalrts::reinit_svar( context[9], context[5] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[31], context[35] );
          refalrts::push_stack( vm, context[34] );
          refalrts::push_stack( vm, context[33] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[9];
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_elem( res, context[35] );
          res = refalrts::splice_evar( res, context[27], context[28] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_elem( res, context[34] );
          res = refalrts::splice_evar( res, context[8], context[20] );
          res = refalrts::splice_evar( res, context[31], context[33] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@5/4 s.FnPatch/5 (/8 # Symbol/14 # Name/19 t.1/21 e.2/23 )/9 e.Tail/25 >/1
        context[23] = context[15];
        context[24] = context[16];
        context[25] = context[17];
        context[26] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_Name], context[19] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_Symbol], context[14] ) )
          continue;
        // closed e.2 as range 23
        // closed e.Tail as range 25
        //DEBUG: t.1: 21
        //DEBUG: s.FnPatch: 5
        //DEBUG: e.2: 23
        //DEBUG: e.Tail: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: # Symbol/14 AsIs: # Name/19 } </27 Tile{ AsIs: s.FnPatch/5 } # SrcPos/28 Tile{ AsIs: t.1/21 } >/29 </30 s.FnPatch/5/31 # Name/32 Tile{ AsIs: e.2/23 } >/33 )/34 Tile{ AsIs: </0 AsIs: & Map@5/4 } Tile{ HalfReuse: s.FnPatch5 /9 AsIs: e.Tail/25 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[27]);
        refalrts::alloc_ident(vm, context[28], identifiers[ident_SrcPos]);
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::alloc_open_call(vm, context[30]);
        refalrts::copy_stvar(vm, context[31], context[5]);
        refalrts::alloc_ident(vm, context[32], identifiers[ident_Name]);
        refalrts::alloc_close_call(vm, context[33]);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::reinit_svar( context[9], context[5] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[8], context[34] );
        refalrts::push_stack( vm, context[33] );
        refalrts::push_stack( vm, context[30] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[27] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[9];
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[29], context[32] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_elem( res, context[5] );
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_evar( res, context[8], context[19] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@5/4 s.FnPatch/5 (/8 # Brackets/14 e.0/15 )/9 e.Tail/17 >/1
        context[15] = context[12];
        context[16] = context[13];
        context[17] = context[10];
        context[18] = context[11];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[14] ) )
          continue;
        // closed e.0 as range 15
        // closed e.Tail as range 17
        //DEBUG: s.FnPatch: 5
        //DEBUG: e.0: 15
        //DEBUG: e.Tail: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: # Brackets/14 } Tile{ AsIs: </0 AsIs: & Map@5/4 AsIs: s.FnPatch/5 } Tile{ AsIs: e.0/15 } >/19 )/20 </21 & Map@5/22 Tile{ HalfReuse: s.FnPatch5 /9 AsIs: e.Tail/17 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_close_bracket(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_gen_Map_Z5]);
        refalrts::reinit_svar( context[9], context[5] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[21] );
        refalrts::link_brackets( context[8], context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[9];
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_evar( res, context[0], context[5] );
        res = refalrts::splice_evar( res, context[8], context[14] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@5/4 s.FnPatch/5 (/8 # ADT-Brackets/14 t.0/19 (/23 e.3/21 )/24 e.2/15 )/9 e.Tail/17 >/1
        context[15] = context[12];
        context[16] = context[13];
        context[17] = context[10];
        context[18] = context[11];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[14] ) )
          continue;
        // closed e.Tail as range 17
        context[20] = refalrts::tvar_left( context[19], context[15], context[16] );
        if( ! context[20] )
          continue;
        context[21] = 0;
        context[22] = 0;
        context[23] = refalrts::brackets_left( context[21], context[22], context[15], context[16] );
        if( ! context[23] )
          continue;
        refalrts::bracket_pointers(context[23], context[24]);
        // closed e.3 as range 21
        // closed e.2 as range 15
        //DEBUG: s.FnPatch: 5
        //DEBUG: e.Tail: 17
        //DEBUG: t.0: 19
        //DEBUG: e.3: 21
        //DEBUG: e.2: 15

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/25 # ADT-Brackets/26 </27 Tile{ HalfReuse: s.FnPatch5 /8 Reuse: # SrcPos/14 AsIs: t.0/19 HalfReuse: >/23 } (/28 </29 s.FnPatch/5/30 # Name/31 Tile{ AsIs: e.3/21 } >/32 Tile{ AsIs: )/24 } Tile{ AsIs: </0 AsIs: & Map@5/4 AsIs: s.FnPatch/5 } Tile{ AsIs: e.2/15 } >/33 )/34 </35 & Map@5/36 Tile{ HalfReuse: s.FnPatch5 /9 AsIs: e.Tail/17 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[25]);
        refalrts::alloc_ident(vm, context[26], identifiers[ident_ADTm_Brackets]);
        refalrts::alloc_open_call(vm, context[27]);
        refalrts::alloc_open_bracket(vm, context[28]);
        refalrts::alloc_open_call(vm, context[29]);
        refalrts::copy_stvar(vm, context[30], context[5]);
        refalrts::alloc_ident(vm, context[31], identifiers[ident_Name]);
        refalrts::alloc_close_call(vm, context[32]);
        refalrts::alloc_close_call(vm, context[33]);
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[36], functions[efunc_gen_Map_Z5]);
        refalrts::reinit_svar( context[8], context[5] );
        refalrts::update_ident(context[14], identifiers[ident_SrcPos]);
        refalrts::reinit_close_call(context[23]);
        refalrts::reinit_svar( context[9], context[5] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[25], context[34] );
        refalrts::push_stack( vm, context[33] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[28], context[24] );
        refalrts::push_stack( vm, context[32] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[27] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[9];
        res = refalrts::splice_evar( res, context[33], context[36] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_evar( res, context[0], context[5] );
        res = refalrts::splice_elem( res, context[24] );
        res = refalrts::splice_elem( res, context[32] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[28], context[31] );
        res = refalrts::splice_evar( res, context[8], context[23] );
        res = refalrts::splice_evar( res, context[25], context[27] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@5/4 s.FnPatch/5 (/8 # CallBrackets/14 e.0/15 )/9 e.Tail/17 >/1
        context[15] = context[12];
        context[16] = context[13];
        context[17] = context[10];
        context[18] = context[11];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[14] ) )
          continue;
        // closed e.0 as range 15
        // closed e.Tail as range 17
        //DEBUG: s.FnPatch: 5
        //DEBUG: e.0: 15
        //DEBUG: e.Tail: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: # CallBrackets/14 } Tile{ AsIs: </0 AsIs: & Map@5/4 AsIs: s.FnPatch/5 } Tile{ AsIs: e.0/15 } >/19 )/20 </21 & Map@5/22 Tile{ HalfReuse: s.FnPatch5 /9 AsIs: e.Tail/17 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_close_bracket(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_gen_Map_Z5]);
        refalrts::reinit_svar( context[9], context[5] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[21] );
        refalrts::link_brackets( context[8], context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[9];
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_evar( res, context[0], context[5] );
        res = refalrts::splice_evar( res, context[8], context[14] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@5/4 s.FnPatch/5 (/8 # Closure/14 e.0/15 )/9 e.Tail/17 >/1
      context[15] = context[12];
      context[16] = context[13];
      context[17] = context[10];
      context[18] = context[11];
      if( ! refalrts::ident_term( identifiers[ident_Closure], context[14] ) )
        continue;
      // closed e.0 as range 15
      // closed e.Tail as range 17
      //DEBUG: s.FnPatch: 5
      //DEBUG: e.0: 15
      //DEBUG: e.Tail: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: # Closure/14 } Tile{ AsIs: </0 Reuse: & PatchAST-Body/4 AsIs: s.FnPatch/5 } Tile{ AsIs: e.0/15 } >/19 )/20 </21 & Map@5/22 Tile{ HalfReuse: s.FnPatch5 /9 AsIs: e.Tail/17 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[19]);
      refalrts::alloc_close_bracket(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_gen_Map_Z5]);
      refalrts::update_name(context[4], functions[efunc_PatchASTm_Body]);
      refalrts::reinit_svar( context[9], context[5] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[21] );
      refalrts::link_brackets( context[8], context[20] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[0], context[5] );
      res = refalrts::splice_evar( res, context[8], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@5/4 s.FnPatch/5 t.Next/8 e.Tail/10 >/1
    context[10] = context[6];
    context[11] = context[7];
    // closed e.Tail as range 10
    //DEBUG: t.Next: 8
    //DEBUG: s.FnPatch: 5
    //DEBUG: e.Tail: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next/8 } Tile{ AsIs: </0 AsIs: & Map@5/4 AsIs: s.FnPatch/5 } Tile{ AsIs: e.Tail/10 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[5] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@5/4 s.FnPatch/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.FnPatch: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@5/4 s.FnPatch/5 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@5/4 s.FnPatch/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: s.FnPatch: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@0/4 } [*]/6 & PatchAST-Expr\1@0/7 Tile{ AsIs: s.FnPatch/5 } {*}/8 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_PatchASTm_Expr_L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[8], context[6]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  refalrts::wrap_closure( context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z5("Map@5", COOKIE1_, COOKIE2_, func_gen_Map_Z5);


static refalrts::FnResult func_gen_Map_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & Map@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@6/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Map@6/4 s.new3/5 t.new4/8 e.new5/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[9] = refalrts::tvar_left( context[8], context[6], context[7] );
    if( ! context[9] )
      continue;
    // closed e.new5 as range 6
    do {
      // </0 & Map@6/4 s.FnPatch/5 (/8 (/16 e.1/14 )/17 e.4/12 (/24 e.5/22 )/25 (/20 e.3/18 )/21 )/9 e.Tail/10 >/1
      context[10] = context[6];
      context[11] = context[7];
      context[12] = 0;
      context[13] = 0;
      if( ! refalrts::brackets_term( context[12], context[13], context[8] ) )
        continue;
      context[14] = 0;
      context[15] = 0;
      context[16] = refalrts::brackets_left( context[14], context[15], context[12], context[13] );
      if( ! context[16] )
        continue;
      refalrts::bracket_pointers(context[16], context[17]);
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_right( context[18], context[19], context[12], context[13] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_right( context[22], context[23], context[12], context[13] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      // closed e.1 as range 14
      // closed e.4 as range 12
      // closed e.5 as range 22
      // closed e.3 as range 18
      // closed e.Tail as range 10
      //DEBUG: s.FnPatch: 5
      //DEBUG: e.1: 14
      //DEBUG: e.4: 12
      //DEBUG: e.5: 22
      //DEBUG: e.3: 18
      //DEBUG: e.Tail: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: (/16 } </26 & Map@5/27 s.FnPatch/5/28 Tile{ AsIs: e.1/14 } >/29 Tile{ AsIs: )/17 } Tile{ AsIs: </0 Reuse: & Map@10/4 AsIs: s.FnPatch/5 } Tile{ AsIs: e.4/12 } >/30 (/31 </32 & Map@5/33 Tile{ HalfReuse: s.FnPatch5 /24 AsIs: e.5/22 HalfReuse: >/25 HalfReuse: )/20 } (/34 </35 & Map@9/36 s.FnPatch/5/37 Tile{ AsIs: e.3/18 } >/38 )/39 )/40 </41 Tile{ HalfReuse: & Map@6/21 HalfReuse: s.FnPatch5 /9 AsIs: e.Tail/10 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_Map_Z5]);
      refalrts::copy_stvar(vm, context[28], context[5]);
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_open_call(vm, context[32]);
      refalrts::alloc_name(vm, context[33], functions[efunc_gen_Map_Z5]);
      refalrts::alloc_open_bracket(vm, context[34]);
      refalrts::alloc_open_call(vm, context[35]);
      refalrts::alloc_name(vm, context[36], functions[efunc_gen_Map_Z9]);
      refalrts::copy_stvar(vm, context[37], context[5]);
      refalrts::alloc_close_call(vm, context[38]);
      refalrts::alloc_close_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_open_call(vm, context[41]);
      refalrts::update_name(context[4], functions[efunc_gen_Map_Z10]);
      refalrts::reinit_svar( context[24], context[5] );
      refalrts::reinit_close_call(context[25]);
      refalrts::reinit_close_bracket(context[20]);
      refalrts::reinit_name(context[21], functions[efunc_gen_Map_Z6]);
      refalrts::reinit_svar( context[9], context[5] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[41] );
      refalrts::link_brackets( context[8], context[40] );
      refalrts::link_brackets( context[34], context[39] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[35] );
      refalrts::link_brackets( context[31], context[20] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[21];
      res = refalrts::splice_evar( res, context[38], context[41] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[34], context[37] );
      res = refalrts::splice_evar( res, context[24], context[20] );
      res = refalrts::splice_evar( res, context[30], context[33] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_evar( res, context[0], context[5] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[26], context[28] );
      res = refalrts::splice_evar( res, context[8], context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@6/4 s.FnPatch/5 t.Next/8 e.Tail/10 >/1
    context[10] = context[6];
    context[11] = context[7];
    // closed e.Tail as range 10
    //DEBUG: t.Next: 8
    //DEBUG: s.FnPatch: 5
    //DEBUG: e.Tail: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PatchAST-Sentence*1/4 AsIs: s.FnPatch/5 AsIs: t.Next/8 } >/12 </13 & Map@6/14 s.FnPatch/5/15 Tile{ AsIs: e.Tail/10 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[12]);
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Map_Z6]);
    refalrts::copy_stvar(vm, context[15], context[5]);
    refalrts::update_name(context[4], functions[efunc_gen_PatchASTm_Sentence_D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@6/4 s.FnPatch/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.FnPatch: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@6/4 s.FnPatch/5 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@6/4 s.FnPatch/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: s.FnPatch: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@0/4 } (/6 & PatchAST-Sentence@0/7 Tile{ AsIs: s.FnPatch/5 } )/8 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_PatchASTm_Sentence_Z0]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[6], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z6("Map@6", COOKIE1_, COOKIE2_, func_gen_Map_Z6);


static refalrts::FnResult func_gen_Map_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & Map@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@7/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Map@7/4 s.new3/5 t.new4/8 e.new5/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[9] = refalrts::tvar_left( context[8], context[6], context[7] );
    if( ! context[9] )
      continue;
    // closed e.new5 as range 6
    do {
      // </0 & Map@7/4 s.FnPatch/5 (/8 (/16 e.1/14 )/17 (/20 # Symbol/22 # Name/23 t.3/24 e.6/18 )/21 )/9 e.Tail/10 >/1
      context[10] = context[6];
      context[11] = context[7];
      context[12] = 0;
      context[13] = 0;
      if( ! refalrts::brackets_term( context[12], context[13], context[8] ) )
        continue;
      context[14] = 0;
      context[15] = 0;
      context[16] = refalrts::brackets_left( context[14], context[15], context[12], context[13] );
      if( ! context[16] )
        continue;
      refalrts::bracket_pointers(context[16], context[17]);
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[12], context[13] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      context[22] = refalrts::ident_left( identifiers[ident_Symbol], context[18], context[19] );
      if( ! context[22] )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Name], context[18], context[19] );
      if( ! context[23] )
        continue;
      if( ! refalrts::empty_seq( context[12], context[13] ) )
        continue;
      // closed e.1 as range 14
      // closed e.Tail as range 10
      context[25] = refalrts::tvar_left( context[24], context[18], context[19] );
      if( ! context[25] )
        continue;
      // closed e.6 as range 18
      //DEBUG: s.FnPatch: 5
      //DEBUG: e.1: 14
      //DEBUG: e.Tail: 10
      //DEBUG: t.3: 24
      //DEBUG: e.6: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & PatchAST-Body$3\1=1/8 AsIs: (/16 AsIs: e.1/14 AsIs: )/17 HalfReuse: s.FnPatch5 /20 HalfReuse: (/22 } Tile{ AsIs: e.6/18 } )/26 Tile{ HalfReuse: </4 AsIs: s.FnPatch/5 } Tile{ Reuse: # SrcPos/23 AsIs: t.3/24 } >/27 >/28 </29 Tile{ HalfReuse: & Map@7/21 HalfReuse: s.FnPatch5 /9 AsIs: e.Tail/10 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::reinit_name(context[8], functions[efunc_gen_PatchASTm_Body_S3L1A1]);
      refalrts::reinit_svar( context[20], context[5] );
      refalrts::reinit_open_bracket(context[22]);
      refalrts::reinit_open_call(context[4]);
      refalrts::update_ident(context[23], identifiers[ident_SrcPos]);
      refalrts::reinit_name(context[21], functions[efunc_gen_Map_Z7]);
      refalrts::reinit_svar( context[9], context[5] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[4] );
      refalrts::link_brackets( context[22], context[26] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[21];
      res = refalrts::splice_evar( res, context[27], context[29] );
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[4], context[5] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[8], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@7/4 s.FnPatch/5 t.Next/8 e.Tail/10 >/1
    context[10] = context[6];
    context[11] = context[7];
    // closed e.Tail as range 10
    //DEBUG: t.Next: 8
    //DEBUG: s.FnPatch: 5
    //DEBUG: e.Tail: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PatchAST-Body$3\1*1/4 AsIs: s.FnPatch/5 AsIs: t.Next/8 } >/12 </13 & Map@7/14 s.FnPatch/5/15 Tile{ AsIs: e.Tail/10 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[12]);
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Map_Z7]);
    refalrts::copy_stvar(vm, context[15], context[5]);
    refalrts::update_name(context[4], functions[efunc_gen_PatchASTm_Body_S3L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@7/4 s.FnPatch/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.FnPatch: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@7/4 s.FnPatch/5 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@7/4 s.FnPatch/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: s.FnPatch: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@0/4 } [*]/6 & PatchAST-Body$3\1@0/7 Tile{ AsIs: s.FnPatch/5 } {*}/8 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_PatchASTm_Body_S3L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[8], context[6]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  refalrts::wrap_closure( context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z7("Map@7", COOKIE1_, COOKIE2_, func_gen_Map_Z7);


static refalrts::FnResult func_gen_Map_Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & Map@8/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@8/4 s.new1/5 s.new2/6 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Map@8/4 s.new4/5 s.new5/6 t.new6/9 e.new7/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new7 as range 7
    do {
      // </0 & Map@8/4 s.FnPatchExpr/5 s.FnPatch/6 (/9 s.ChainType/27 (/25 e.2/23 )/26 (/21 e.4/19 )/22 (/17 e.6/15 )/18 )/10 e.Tail/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_right( context[23], context[24], context[13], context[14] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      // closed e.2 as range 23
      // closed e.4 as range 19
      // closed e.6 as range 15
      // closed e.Tail as range 11
      if( ! refalrts::svar_left( context[27], context[13], context[14] ) )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      //DEBUG: s.FnPatchExpr: 5
      //DEBUG: s.FnPatch: 6
      //DEBUG: e.2: 23
      //DEBUG: e.4: 19
      //DEBUG: e.6: 15
      //DEBUG: e.Tail: 11
      //DEBUG: s.ChainType: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: s.ChainType/27 AsIs: (/25 } </28 s.FnPatchExpr/5/29 Tile{ AsIs: e.2/23 } >/30 Tile{ AsIs: )/26 AsIs: (/21 } </31 & Map@9/32 s.FnPatch/6/33 Tile{ AsIs: e.4/19 } >/34 )/35 (/36 Tile{ HalfReuse: </22 HalfReuse: s.FnPatchExpr5 /17 AsIs: e.6/15 HalfReuse: >/18 AsIs: )/10 } )/37 Tile{ AsIs: </0 AsIs: & Map@8/4 AsIs: s.FnPatchExpr/5 AsIs: s.FnPatch/6 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::copy_stvar(vm, context[29], context[5]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_gen_Map_Z9]);
      refalrts::copy_stvar(vm, context[33], context[6]);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_close_bracket(vm, context[37]);
      refalrts::reinit_open_call(context[22]);
      refalrts::reinit_svar( context[17], context[5] );
      refalrts::reinit_close_call(context[18]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[37] );
      refalrts::link_brackets( context[36], context[10] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[22] );
      refalrts::link_brackets( context[21], context[35] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[31] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[28] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_elem( res, context[37] );
      res = refalrts::splice_evar( res, context[22], context[10] );
      res = refalrts::splice_evar( res, context[34], context[36] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[31], context[33] );
      res = refalrts::splice_evar( res, context[26], context[21] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[9], context[25] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@8/4 s.FnPatchExpr/5 s.FnPatch/6 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Next: 9
    //DEBUG: s.FnPatchExpr: 5
    //DEBUG: s.FnPatch: 6
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PatchAST-Chain\1*1/4 AsIs: s.FnPatchExpr/5 AsIs: s.FnPatch/6 AsIs: t.Next/9 } >/13 </14 & Map@8/15 s.FnPatchExpr/5/16 s.FnPatch/6/17 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_gen_Map_Z8]);
    refalrts::copy_stvar(vm, context[16], context[5]);
    refalrts::copy_stvar(vm, context[17], context[6]);
    refalrts::update_name(context[4], functions[efunc_gen_PatchASTm_Chain_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@8/4 s.FnPatchExpr/5 s.FnPatch/6 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.FnPatchExpr: 5
    //DEBUG: s.FnPatch: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@8/4 s.FnPatchExpr/5 s.FnPatch/6 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@8/4 s.FnPatchExpr/5 s.FnPatch/6 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: s.FnPatchExpr: 5
  //DEBUG: s.FnPatch: 6
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Map@0/8 Tile{ HalfReuse: [*]/0 Reuse: & PatchAST-Chain\1@0/4 AsIs: s.FnPatchExpr/5 AsIs: s.FnPatch/6 } {*}/9 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[9], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_PatchASTm_Chain_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[0], context[6] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  refalrts::wrap_closure( context[9] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z8("Map@8", COOKIE1_, COOKIE2_, func_gen_Map_Z8);


static refalrts::FnResult func_gen_Map_Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & Map@9/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@9/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Map@9/4 s.new3/5 t.new4/8 e.new5/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[9] = refalrts::tvar_left( context[8], context[6], context[7] );
    if( ! context[9] )
      continue;
    // closed e.new5 as range 6
    do {
      // </0 & Map@9/4 s.FnPatch/5 (/8 e./12 )/9 e.Tail/10 >/1
      context[10] = context[6];
      context[11] = context[7];
      context[12] = 0;
      context[13] = 0;
      if( ! refalrts::brackets_term( context[12], context[13], context[8] ) )
        continue;
      // closed e. as range 12
      // closed e.Tail as range 10
      //DEBUG: s.FnPatch: 5
      //DEBUG: e.: 12
      //DEBUG: e.Tail: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/8 } Tile{ AsIs: </0 Reuse: & PatchAST-Body/4 AsIs: s.FnPatch/5 } Tile{ AsIs: e./12 } >/14 )/15 </16 & Map@9/17 Tile{ HalfReuse: s.FnPatch5 /9 AsIs: e.Tail/10 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[14]);
      refalrts::alloc_close_bracket(vm, context[15]);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_gen_Map_Z9]);
      refalrts::update_name(context[4], functions[efunc_PatchASTm_Body]);
      refalrts::reinit_svar( context[9], context[5] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[16] );
      refalrts::link_brackets( context[8], context[15] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[9];
      res = refalrts::splice_evar( res, context[14], context[17] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_evar( res, context[0], context[5] );
      res = refalrts::splice_elem( res, context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@9/4 s.FnPatch/5 t.Next/8 e.Tail/10 >/1
    context[10] = context[6];
    context[11] = context[7];
    // closed e.Tail as range 10
    //DEBUG: t.Next: 8
    //DEBUG: s.FnPatch: 5
    //DEBUG: e.Tail: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PatchAST-Blocks\1*1/4 AsIs: s.FnPatch/5 AsIs: t.Next/8 } >/12 </13 & Map@9/14 s.FnPatch/5/15 Tile{ AsIs: e.Tail/10 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[12]);
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Map_Z9]);
    refalrts::copy_stvar(vm, context[15], context[5]);
    refalrts::update_name(context[4], functions[efunc_gen_PatchASTm_Blocks_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@9/4 s.FnPatch/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.FnPatch: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@9/4 s.FnPatch/5 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@9/4 s.FnPatch/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: s.FnPatch: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@0/4 } [*]/6 & PatchAST-Blocks\1@0/7 Tile{ AsIs: s.FnPatch/5 } {*}/8 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_PatchASTm_Blocks_L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[8], context[6]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  refalrts::wrap_closure( context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z9("Map@9", COOKIE1_, COOKIE2_, func_gen_Map_Z9);


static refalrts::FnResult func_gen_Map_Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & Map@10/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@10/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Map@10/4 s.new3/5 t.new4/8 e.new5/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[9] = refalrts::tvar_left( context[8], context[6], context[7] );
    if( ! context[9] )
      continue;
    // closed e.new5 as range 6
    do {
      // </0 & Map@10/4 s.FnPatch/5 (/8 s.ChainType/26 (/24 e.2/22 )/25 (/20 e.4/18 )/21 (/16 e.6/14 )/17 )/9 e.Tail/10 >/1
      context[10] = context[6];
      context[11] = context[7];
      context[12] = 0;
      context[13] = 0;
      if( ! refalrts::brackets_term( context[12], context[13], context[8] ) )
        continue;
      context[14] = 0;
      context[15] = 0;
      context[16] = refalrts::brackets_right( context[14], context[15], context[12], context[13] );
      if( ! context[16] )
        continue;
      refalrts::bracket_pointers(context[16], context[17]);
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_right( context[18], context[19], context[12], context[13] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_right( context[22], context[23], context[12], context[13] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      // closed e.2 as range 22
      // closed e.4 as range 18
      // closed e.6 as range 14
      // closed e.Tail as range 10
      if( ! refalrts::svar_left( context[26], context[12], context[13] ) )
        continue;
      if( ! refalrts::empty_seq( context[12], context[13] ) )
        continue;
      //DEBUG: s.FnPatch: 5
      //DEBUG: e.2: 22
      //DEBUG: e.4: 18
      //DEBUG: e.6: 14
      //DEBUG: e.Tail: 10
      //DEBUG: s.ChainType: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: s.ChainType/26 AsIs: (/24 } </27 & Map@5/28 s.FnPatch/5/29 Tile{ AsIs: e.2/22 } >/30 Tile{ AsIs: )/21 AsIs: (/16 } Tile{ AsIs: </0 Reuse: & Map@9/4 AsIs: s.FnPatch/5 } Tile{ AsIs: e.4/18 } >/31 Tile{ AsIs: )/25 AsIs: (/20 } </32 & Map@5/33 s.FnPatch/5/34 Tile{ AsIs: e.6/14 } >/35 )/36 )/37 </38 Tile{ HalfReuse: & Map@10/17 HalfReuse: s.FnPatch5 /9 AsIs: e.Tail/10 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[27]);
      refalrts::alloc_name(vm, context[28], functions[efunc_gen_Map_Z5]);
      refalrts::copy_stvar(vm, context[29], context[5]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::alloc_open_call(vm, context[32]);
      refalrts::alloc_name(vm, context[33], functions[efunc_gen_Map_Z5]);
      refalrts::copy_stvar(vm, context[34], context[5]);
      refalrts::alloc_close_call(vm, context[35]);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::alloc_close_bracket(vm, context[37]);
      refalrts::alloc_open_call(vm, context[38]);
      refalrts::update_name(context[4], functions[efunc_gen_Map_Z9]);
      refalrts::reinit_name(context[17], functions[efunc_gen_Map_Z10]);
      refalrts::reinit_svar( context[9], context[5] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[38] );
      refalrts::link_brackets( context[8], context[37] );
      refalrts::link_brackets( context[20], context[36] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[32] );
      refalrts::link_brackets( context[16], context[25] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[24], context[21] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[27] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[17];
      res = refalrts::splice_evar( res, context[35], context[38] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_evar( res, context[25], context[20] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[0], context[5] );
      res = refalrts::splice_evar( res, context[21], context[16] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[27], context[29] );
      res = refalrts::splice_evar( res, context[8], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@10/4 s.FnPatch/5 t.Next/8 e.Tail/10 >/1
    context[10] = context[6];
    context[11] = context[7];
    // closed e.Tail as range 10
    //DEBUG: t.Next: 8
    //DEBUG: s.FnPatch: 5
    //DEBUG: e.Tail: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </12 & PatchAST-Chain\1@0/13 [*]/14 & PatchAST-Sentence=1\1@0/15 s.FnPatch/5/16 {*}/17 s.FnPatch/5/18 Tile{ AsIs: t.Next/8 } >/19 Tile{ AsIs: </0 AsIs: & Map@10/4 AsIs: s.FnPatch/5 } Tile{ AsIs: e.Tail/10 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_PatchASTm_Chain_L1Z0]);
    refalrts::alloc_closure_head(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_gen_PatchASTm_Sentence_A1L1Z0]);
    refalrts::copy_stvar(vm, context[16], context[5]);
    refalrts::alloc_unwrapped_closure(vm, context[17], context[14]);
    refalrts::copy_stvar(vm, context[18], context[5]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[5] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    res = refalrts::splice_evar( res, context[12], context[18] );
    refalrts::use( res );
    refalrts::wrap_closure( context[17] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@10/4 s.FnPatch/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: s.FnPatch: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@10/4 s.FnPatch/5 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@10/4 s.FnPatch/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: s.FnPatch: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@0/4 } [*]/6 & PatchAST-Chain\1@0/7 [*]/8 & PatchAST-Sentence=1\1@0/9 s.FnPatch/5/10 {*}/11 Tile{ AsIs: s.FnPatch/5 } {*}/12 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_PatchASTm_Chain_L1Z0]);
  refalrts::alloc_closure_head(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_PatchASTm_Sentence_A1L1Z0]);
  refalrts::copy_stvar(vm, context[10], context[5]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[8]);
  refalrts::alloc_unwrapped_closure(vm, context[12], context[6]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[6], context[11] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  refalrts::wrap_closure( context[12] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z10("Map@10", COOKIE1_, COOKIE2_, func_gen_Map_Z10);


static refalrts::FnResult func_gen_BackEndm_RASLModule_B1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & BackEnd-RASLModule:1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & BackEnd-RASLModule:1@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & BackEnd-RASLModule:1@1/4 (/7 e.OutputName0/9 )/8 e.ByteStream/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.OutputName0 as range 9
    // closed e.ByteStream as range 11
    //DEBUG: e.OutputName0: 9
    //DEBUG: e.ByteStream: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & SaveBytes/4 AsIs: (/7 AsIs: e.OutputName0/9 HalfReuse: '.'/8 }"rasl"/13 )/15 Tile{ AsIs: e.ByteStream/11 } >/16 # Success/17 e.OutputName0/9/18".ras"/20 Tile{ HalfReuse: 'l'/1 ]] }
    refalrts::alloc_chars(vm, context[13], context[14], "rasl", 4);
    refalrts::alloc_close_bracket(vm, context[15]);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::alloc_ident(vm, context[17], identifiers[ident_Success]);
    refalrts::copy_evar(vm, context[18], context[19], context[9], context[10]);
    refalrts::alloc_chars(vm, context[20], context[21], ".ras", 4);
    refalrts::update_name(context[4], functions[efunc_SaveBytes]);
    refalrts::reinit_char(context[8], '.');
    refalrts::reinit_char(context[1], 'l');
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[15] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[21] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & BackEnd-RASLModule:1@1/4 (/7 e.OutputName0/5 )/8 e.dyn/2 >/1
  // closed e.OutputName0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.OutputName0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & BackEnd-RASLModule:1@0/4 AsIs: (/7 AsIs: e.OutputName0/5 HalfReuse: '.'/8 }"rasl"/9 )/11 Tile{ AsIs: e.dyn/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_chars(vm, context[9], context[10], "rasl", 4);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_BackEndm_RASLModule_B1Z0]);
  refalrts::reinit_char(context[8], '.');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_BackEndm_RASLModule_B1Z1("BackEnd-RASLModule:1@1", COOKIE1_, COOKIE2_, func_gen_BackEndm_RASLModule_B1Z1);


static refalrts::FnResult func_gen_Map_Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & Map@11/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@11/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Map@11/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Map@11/4 t.MetaSrcPos/5 (/9 e./13 )/10 e.Tail/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
        continue;
      // closed e. as range 13
      // closed e.Tail as range 11
      //DEBUG: t.MetaSrcPos: 5
      //DEBUG: e.: 13
      //DEBUG: e.Tail: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/15 (/16 # Symbol/17 Tile{ HalfReuse: # Identifier/9 AsIs: e./13 AsIs: )/10 } (/18 # Symbol/19 # Name/20 t.MetaSrcPos/5/21 e./13/23 )/25 )/26 Tile{ AsIs: </0 AsIs: & Map@11/4 AsIs: t.MetaSrcPos/5 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[15]);
      refalrts::alloc_open_bracket(vm, context[16]);
      refalrts::alloc_ident(vm, context[17], identifiers[ident_Symbol]);
      refalrts::alloc_open_bracket(vm, context[18]);
      refalrts::alloc_ident(vm, context[19], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[20], identifiers[ident_Name]);
      refalrts::copy_evar(vm, context[21], context[22], context[5], context[6]);
      refalrts::copy_evar(vm, context[23], context[24], context[13], context[14]);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::reinit_ident(context[9], identifiers[ident_Identifier]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[26] );
      refalrts::link_brackets( context[18], context[25] );
      refalrts::link_brackets( context[16], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_evar( res, context[18], context[26] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[15], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@11/4 t.MetaSrcPos/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.MetaSrcPos: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CreateMetaFunctions$1\1*1/4 AsIs: t.MetaSrcPos/5 AsIs: t.Next/9 } >/13 </14 & Map@11/15 t.MetaSrcPos/5/16 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_gen_Map_Z11]);
    refalrts::copy_evar(vm, context[16], context[17], context[5], context[6]);
    refalrts::update_name(context[4], functions[efunc_gen_CreateMetaFunctions_S1L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@11/4 t.MetaSrcPos/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.MetaSrcPos: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@11/4 t.MetaSrcPos/5 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@11/4 t.MetaSrcPos/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.MetaSrcPos: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@0/4 } [*]/7 & CreateMetaFunctions$1\1@0/8 Tile{ AsIs: t.MetaSrcPos/5 } {*}/9 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_CreateMetaFunctions_S1L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[9], context[7]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  refalrts::wrap_closure( context[9] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z11("Map@11", COOKIE1_, COOKIE2_, func_gen_Map_Z11);


static refalrts::FnResult func_gen_DoMapAccum_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 124 elems
  refalrts::Iter context[124];
  refalrts::zeros( context, 124 );
  // </0 & DoMapAccum@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@2/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@2/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@2/4 (/5 e.new8/21 )/6 (/9 e.new14/17 )/10 (/15 s.new9/25 t.new10/26 s.new11/28 e.new12/23 )/16 e.new13/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      if( ! refalrts::brackets_term( context[23], context[24], context[15] ) )
        continue;
      // closed e.new8 as range 21
      // closed e.new14 as range 17
      // closed e.new13 as range 19
      if( ! refalrts::svar_left( context[25], context[23], context[24] ) )
        continue;
      context[27] = refalrts::tvar_left( context[26], context[23], context[24] );
      if( ! context[27] )
        continue;
      if( ! refalrts::svar_left( context[28], context[23], context[24] ) )
        continue;
      // closed e.new12 as range 23
      do {
        // </0 & DoMapAccum@2/4 (/5 e./29 )/6 (/9 e.Scanned/31 )/10 (/15 # Meta/25 t.0/26 s.ScopeClass/28 e.3/33 )/16 e.Tail/35 >/1
        context[29] = context[21];
        context[30] = context[22];
        context[31] = context[17];
        context[32] = context[18];
        context[33] = context[23];
        context[34] = context[24];
        context[35] = context[19];
        context[36] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_Meta], context[25] ) )
          continue;
        // closed e. as range 29
        // closed e.Scanned as range 31
        // closed e.3 as range 33
        // closed e.Tail as range 35
        //DEBUG: t.0: 26
        //DEBUG: s.ScopeClass: 28
        //DEBUG: e.: 29
        //DEBUG: e.Scanned: 31
        //DEBUG: e.3: 33
        //DEBUG: e.Tail: 35

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@2/4 AsIs: (/5 AsIs: e./29 HalfReuse: (/6 } e.3/33/37 )/39 )/40 (/41 Tile{ AsIs: e.Scanned/31 } Tile{ AsIs: (/9 } # Declaration/42 t.0/26/43 # GN-Entry/45"__Meta_"/46 e.3/33/48 )/50 (/51 # Declaration/52 t.0/26/53 # GN-Entry/55"__Step-Drop"/56 Tile{ AsIs: )/10 AsIs: (/15 Reuse: # Inline/25 AsIs: t.0/26 AsIs: s.ScopeClass/28 AsIs: e.3/33 AsIs: )/16 } (/58 # Function/59 t.0/26/60 s.ScopeClass/28/62 (/63 e.3/33/64 )/66 # Sentences/67 (/68 (/69 (/70 # Var/71 t.0/26/72"eArg"/74 )/76 )/77 (/78 (/79 # CallBrackets/80 (/81 # Symbol/82 # Name/83 t.0/26/84"__Step-Drop"/86 )/88 )/89 (/90 # CallBrackets/91 (/92 # Symbol/93 # Name/94 t.0/26/95"__Meta_"/97 e.3/33/99 )/101 (/102 # Var/103 t.0/26/104"eArg"/106 )/108 (/109 # Symbol/110 # Name/111 t.0/26/112"$table"/114 )/116 )/117 )/118 (/119 )/120 )/121 )/122 )/123 Tile{ AsIs: e.Tail/35 } Tile{ AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[37], context[38], context[33], context[34]);
        refalrts::alloc_close_bracket(vm, context[39]);
        refalrts::alloc_close_bracket(vm, context[40]);
        refalrts::alloc_open_bracket(vm, context[41]);
        refalrts::alloc_ident(vm, context[42], identifiers[ident_Declaration]);
        refalrts::copy_evar(vm, context[43], context[44], context[26], context[27]);
        refalrts::alloc_ident(vm, context[45], identifiers[ident_GNm_Entry]);
        refalrts::alloc_chars(vm, context[46], context[47], "__Meta_", 7);
        refalrts::copy_evar(vm, context[48], context[49], context[33], context[34]);
        refalrts::alloc_close_bracket(vm, context[50]);
        refalrts::alloc_open_bracket(vm, context[51]);
        refalrts::alloc_ident(vm, context[52], identifiers[ident_Declaration]);
        refalrts::copy_evar(vm, context[53], context[54], context[26], context[27]);
        refalrts::alloc_ident(vm, context[55], identifiers[ident_GNm_Entry]);
        refalrts::alloc_chars(vm, context[56], context[57], "__Step-Drop", 11);
        refalrts::alloc_open_bracket(vm, context[58]);
        refalrts::alloc_ident(vm, context[59], identifiers[ident_Function]);
        refalrts::copy_evar(vm, context[60], context[61], context[26], context[27]);
        refalrts::copy_stvar(vm, context[62], context[28]);
        refalrts::alloc_open_bracket(vm, context[63]);
        refalrts::copy_evar(vm, context[64], context[65], context[33], context[34]);
        refalrts::alloc_close_bracket(vm, context[66]);
        refalrts::alloc_ident(vm, context[67], identifiers[ident_Sentences]);
        refalrts::alloc_open_bracket(vm, context[68]);
        refalrts::alloc_open_bracket(vm, context[69]);
        refalrts::alloc_open_bracket(vm, context[70]);
        refalrts::alloc_ident(vm, context[71], identifiers[ident_Var]);
        refalrts::copy_evar(vm, context[72], context[73], context[26], context[27]);
        refalrts::alloc_chars(vm, context[74], context[75], "eArg", 4);
        refalrts::alloc_close_bracket(vm, context[76]);
        refalrts::alloc_close_bracket(vm, context[77]);
        refalrts::alloc_open_bracket(vm, context[78]);
        refalrts::alloc_open_bracket(vm, context[79]);
        refalrts::alloc_ident(vm, context[80], identifiers[ident_CallBrackets]);
        refalrts::alloc_open_bracket(vm, context[81]);
        refalrts::alloc_ident(vm, context[82], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[83], identifiers[ident_Name]);
        refalrts::copy_evar(vm, context[84], context[85], context[26], context[27]);
        refalrts::alloc_chars(vm, context[86], context[87], "__Step-Drop", 11);
        refalrts::alloc_close_bracket(vm, context[88]);
        refalrts::alloc_close_bracket(vm, context[89]);
        refalrts::alloc_open_bracket(vm, context[90]);
        refalrts::alloc_ident(vm, context[91], identifiers[ident_CallBrackets]);
        refalrts::alloc_open_bracket(vm, context[92]);
        refalrts::alloc_ident(vm, context[93], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[94], identifiers[ident_Name]);
        refalrts::copy_evar(vm, context[95], context[96], context[26], context[27]);
        refalrts::alloc_chars(vm, context[97], context[98], "__Meta_", 7);
        refalrts::copy_evar(vm, context[99], context[100], context[33], context[34]);
        refalrts::alloc_close_bracket(vm, context[101]);
        refalrts::alloc_open_bracket(vm, context[102]);
        refalrts::alloc_ident(vm, context[103], identifiers[ident_Var]);
        refalrts::copy_evar(vm, context[104], context[105], context[26], context[27]);
        refalrts::alloc_chars(vm, context[106], context[107], "eArg", 4);
        refalrts::alloc_close_bracket(vm, context[108]);
        refalrts::alloc_open_bracket(vm, context[109]);
        refalrts::alloc_ident(vm, context[110], identifiers[ident_Symbol]);
        refalrts::alloc_ident(vm, context[111], identifiers[ident_Name]);
        refalrts::copy_evar(vm, context[112], context[113], context[26], context[27]);
        refalrts::alloc_chars(vm, context[114], context[115], "$table", 6);
        refalrts::alloc_close_bracket(vm, context[116]);
        refalrts::alloc_close_bracket(vm, context[117]);
        refalrts::alloc_close_bracket(vm, context[118]);
        refalrts::alloc_open_bracket(vm, context[119]);
        refalrts::alloc_close_bracket(vm, context[120]);
        refalrts::alloc_close_bracket(vm, context[121]);
        refalrts::alloc_close_bracket(vm, context[122]);
        refalrts::alloc_close_bracket(vm, context[123]);
        refalrts::reinit_open_bracket(context[6]);
        refalrts::update_ident(context[25], identifiers[ident_Inline]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[41], context[123] );
        refalrts::link_brackets( context[58], context[122] );
        refalrts::link_brackets( context[68], context[121] );
        refalrts::link_brackets( context[119], context[120] );
        refalrts::link_brackets( context[78], context[118] );
        refalrts::link_brackets( context[90], context[117] );
        refalrts::link_brackets( context[109], context[116] );
        refalrts::link_brackets( context[102], context[108] );
        refalrts::link_brackets( context[92], context[101] );
        refalrts::link_brackets( context[79], context[89] );
        refalrts::link_brackets( context[81], context[88] );
        refalrts::link_brackets( context[69], context[77] );
        refalrts::link_brackets( context[70], context[76] );
        refalrts::link_brackets( context[63], context[66] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[51], context[10] );
        refalrts::link_brackets( context[9], context[50] );
        refalrts::link_brackets( context[5], context[40] );
        refalrts::link_brackets( context[6], context[39] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[58], context[123] );
        res = refalrts::splice_evar( res, context[10], context[16] );
        res = refalrts::splice_evar( res, context[42], context[57] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[39], context[41] );
        res = refalrts::splice_evar( res, context[37], context[38] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@2/4 (/5 e./29 )/6 (/9 e.Scanned/31 )/10 (/15 # Function/25 t.0/26 s.ScopeClass/28 (/39 e.5/37 )/40 e.4/33 )/16 e.Tail/35 >/1
      context[29] = context[21];
      context[30] = context[22];
      context[31] = context[17];
      context[32] = context[18];
      context[33] = context[23];
      context[34] = context[24];
      context[35] = context[19];
      context[36] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_Function], context[25] ) )
        continue;
      context[37] = 0;
      context[38] = 0;
      context[39] = refalrts::brackets_left( context[37], context[38], context[33], context[34] );
      if( ! context[39] )
        continue;
      refalrts::bracket_pointers(context[39], context[40]);
      // closed e. as range 29
      // closed e.Scanned as range 31
      // closed e.5 as range 37
      // closed e.4 as range 33
      // closed e.Tail as range 35
      //DEBUG: t.0: 26
      //DEBUG: s.ScopeClass: 28
      //DEBUG: e.: 29
      //DEBUG: e.Scanned: 31
      //DEBUG: e.5: 37
      //DEBUG: e.4: 33
      //DEBUG: e.Tail: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@2/4 AsIs: (/5 AsIs: e./29 HalfReuse: (/6 } e.5/37/41 )/43 Tile{ AsIs: )/10 } Tile{ AsIs: (/9 } Tile{ AsIs: e.Scanned/31 } Tile{ AsIs: (/15 AsIs: # Function/25 AsIs: t.0/26 AsIs: s.ScopeClass/28 AsIs: (/39 AsIs: e.5/37 AsIs: )/40 AsIs: e.4/33 AsIs: )/16 } )/44 Tile{ AsIs: e.Tail/35 } Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[41], context[42], context[37], context[38]);
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::reinit_open_bracket(context[6]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[44] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[5], context[10] );
      refalrts::link_brackets( context[6], context[43] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@2/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@2/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & CreateMetaFunctions$1=1\1*2/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_CreateMetaFunctions_S1A1L1D2]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@2/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@2/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@2/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & CreateMetaFunctions$1=1\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CreateMetaFunctions_S1A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z2("DoMapAccum@2", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z2);


static refalrts::FnResult func_gen_AddInitFinalFunc_B1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & AddInitFinalFunc:1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & AddInitFinalFunc:1@1/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & AddInitFinalFunc:1@1/4 s.NextLocalId/5 e._/8 (/14 '_'/16 '_'/17 'I'/18 'N'/19 'I'/20 'T'/21 t.SrcPos/22 )/15 e._0/10 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[8] = 0;
    context[9] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[10] = context[6];
      context[11] = context[7];
      context[12] = 0;
      context[13] = 0;
      context[14] = refalrts::brackets_left( context[12], context[13], context[10], context[11] );
      if( ! context[14] )
        continue;
      refalrts::bracket_pointers(context[14], context[15]);
      context[16] = refalrts::char_left( '_', context[12], context[13] );
      if( ! context[16] )
        continue;
      context[17] = refalrts::char_left( '_', context[12], context[13] );
      if( ! context[17] )
        continue;
      context[18] = refalrts::char_left( 'I', context[12], context[13] );
      if( ! context[18] )
        continue;
      context[19] = refalrts::char_left( 'N', context[12], context[13] );
      if( ! context[19] )
        continue;
      context[20] = refalrts::char_left( 'I', context[12], context[13] );
      if( ! context[20] )
        continue;
      context[21] = refalrts::char_left( 'T', context[12], context[13] );
      if( ! context[21] )
        continue;
      // closed e._0 as range 10
      context[23] = refalrts::tvar_left( context[22], context[12], context[13] );
      if( ! context[23] )
        continue;
      if( ! refalrts::empty_seq( context[12], context[13] ) )
        continue;
      //DEBUG: s.NextLocalId: 5
      //DEBUG: e._: 8
      //DEBUG: e._0: 10
      //DEBUG: t.SrcPos: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e._/8 {REMOVED TILE} {REMOVED TILE} e._0/10 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/14 AsIs: '_'/16 AsIs: '_'/17 AsIs: 'I'/18 AsIs: 'N'/19 AsIs: 'I'/20 AsIs: 'T'/21 } Tile{ HalfReuse: # SUF/0 HalfReuse: '~'/4 AsIs: s.NextLocalId/5 } Tile{ AsIs: t.SrcPos/22 AsIs: )/15 } Tile{ ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_SUF]);
      refalrts::reinit_char(context[4], '~');
      refalrts::link_brackets( context[14], context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[15] );
      res = refalrts::splice_evar( res, context[0], context[5] );
      res = refalrts::splice_evar( res, context[14], context[21] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[8], context[9], context[6], context[7] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & AddInitFinalFunc:1@1/4 s.NextLocalId/5 e._/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    // closed e._ as range 6
    //DEBUG: s.NextLocalId: 5
    //DEBUG: e._: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & AddInitFinalFunc:1@1/4 s.NextLocalId/5 e._/6 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AddInitFinalFunc:1@1/4 s.NextLocalId/5 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: s.NextLocalId: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 & AddInitFinalFunc:1@0/7 (/8"__INI"/9 Tile{ HalfReuse: 'T'/0 HalfReuse: )/4 AsIs: s.NextLocalId/5 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_AddInitFinalFunc_B1Z0]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_chars(vm, context[9], context[10], "__INI", 5);
  refalrts::reinit_char(context[0], 'T');
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[6] );
  refalrts::link_brackets( context[8], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[6], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_AddInitFinalFunc_B1Z1("AddInitFinalFunc:1@1", COOKIE1_, COOKIE2_, func_gen_AddInitFinalFunc_B1Z1);


static refalrts::FnResult func_gen_AddInitFinalFunc_B1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & AddInitFinalFunc:1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & AddInitFinalFunc:1@2/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & AddInitFinalFunc:1@2/4 s.NextLocalId/5 e._/8 (/14 '_'/16 '_'/17 'F'/18 'I'/19 'N'/20 'A'/21 'L'/22 t.SrcPos/23 )/15 e._0/10 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[8] = 0;
    context[9] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[10] = context[6];
      context[11] = context[7];
      context[12] = 0;
      context[13] = 0;
      context[14] = refalrts::brackets_left( context[12], context[13], context[10], context[11] );
      if( ! context[14] )
        continue;
      refalrts::bracket_pointers(context[14], context[15]);
      context[16] = refalrts::char_left( '_', context[12], context[13] );
      if( ! context[16] )
        continue;
      context[17] = refalrts::char_left( '_', context[12], context[13] );
      if( ! context[17] )
        continue;
      context[18] = refalrts::char_left( 'F', context[12], context[13] );
      if( ! context[18] )
        continue;
      context[19] = refalrts::char_left( 'I', context[12], context[13] );
      if( ! context[19] )
        continue;
      context[20] = refalrts::char_left( 'N', context[12], context[13] );
      if( ! context[20] )
        continue;
      context[21] = refalrts::char_left( 'A', context[12], context[13] );
      if( ! context[21] )
        continue;
      context[22] = refalrts::char_left( 'L', context[12], context[13] );
      if( ! context[22] )
        continue;
      // closed e._0 as range 10
      context[24] = refalrts::tvar_left( context[23], context[12], context[13] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[12], context[13] ) )
        continue;
      //DEBUG: s.NextLocalId: 5
      //DEBUG: e._: 8
      //DEBUG: e._0: 10
      //DEBUG: t.SrcPos: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e._/8 {REMOVED TILE} {REMOVED TILE} e._0/10 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/14 AsIs: '_'/16 AsIs: '_'/17 AsIs: 'F'/18 AsIs: 'I'/19 AsIs: 'N'/20 AsIs: 'A'/21 AsIs: 'L'/22 } Tile{ HalfReuse: # SUF/0 HalfReuse: '~'/4 AsIs: s.NextLocalId/5 } Tile{ AsIs: t.SrcPos/23 AsIs: )/15 } Tile{ ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_SUF]);
      refalrts::reinit_char(context[4], '~');
      refalrts::link_brackets( context[14], context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[23], context[15] );
      res = refalrts::splice_evar( res, context[0], context[5] );
      res = refalrts::splice_evar( res, context[14], context[22] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[8], context[9], context[6], context[7] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & AddInitFinalFunc:1@2/4 s.NextLocalId/5 e._/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    // closed e._ as range 6
    //DEBUG: s.NextLocalId: 5
    //DEBUG: e._: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & AddInitFinalFunc:1@2/4 s.NextLocalId/5 e._/6 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AddInitFinalFunc:1@2/4 s.NextLocalId/5 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: s.NextLocalId: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 & AddInitFinalFunc:1@0/7 (/8"__FINA"/9 Tile{ HalfReuse: 'L'/0 HalfReuse: )/4 AsIs: s.NextLocalId/5 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_AddInitFinalFunc_B1Z0]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_chars(vm, context[9], context[10], "__FINA", 6);
  refalrts::reinit_char(context[0], 'L');
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[6] );
  refalrts::link_brackets( context[8], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[6], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_AddInitFinalFunc_B1Z2("AddInitFinalFunc:1@2", COOKIE1_, COOKIE2_, func_gen_AddInitFinalFunc_B1Z2);


static refalrts::FnResult func_gen_Map_Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  // </0 & Map@12/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@12/4 (/7 e.new1/5 )/8 s.new2/9 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Map@12/4 (/7 e.new7/10 )/8 s.new4/9 t.new5/14 e.new6/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.new7 as range 10
    context[15] = refalrts::tvar_left( context[14], context[12], context[13] );
    if( ! context[15] )
      continue;
    // closed e.new6 as range 12
    do {
      // </0 & Map@12/4 (/7 e.new13/16 )/8 s.new8/9 (/14 s.new9/22 t.new10/23 e.new11/20 )/15 e.new12/18 >/1
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = 0;
      context[21] = 0;
      if( ! refalrts::brackets_term( context[20], context[21], context[14] ) )
        continue;
      // closed e.new13 as range 16
      // closed e.new12 as range 18
      if( ! refalrts::svar_left( context[22], context[20], context[21] ) )
        continue;
      context[24] = refalrts::tvar_left( context[23], context[20], context[21] );
      if( ! context[24] )
        continue;
      // closed e.new11 as range 20
      do {
        // </0 & Map@12/4 (/7 e.Locals$a/25 )/8 s.NextLocalId/9 (/14 # Function/22 t.0/23 s.ScopeClass/31 (/34 e.4/32 )/35 e.3/27 )/15 e.Tail/29 >/1
        context[25] = context[16];
        context[26] = context[17];
        context[27] = context[20];
        context[28] = context[21];
        context[29] = context[18];
        context[30] = context[19];
        if( ! refalrts::ident_term( identifiers[ident_Function], context[22] ) )
          continue;
        // closed e.Locals$a as range 25
        // closed e.Tail as range 29
        if( ! refalrts::svar_left( context[31], context[27], context[28] ) )
          continue;
        context[32] = 0;
        context[33] = 0;
        context[34] = refalrts::brackets_left( context[32], context[33], context[27], context[28] );
        if( ! context[34] )
          continue;
        refalrts::bracket_pointers(context[34], context[35]);
        // closed e.4 as range 32
        // closed e.3 as range 27
        //DEBUG: t.0: 23
        //DEBUG: s.NextLocalId: 9
        //DEBUG: e.Locals$a: 25
        //DEBUG: e.Tail: 29
        //DEBUG: s.ScopeClass: 31
        //DEBUG: e.4: 32
        //DEBUG: e.3: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/36 Tile{ AsIs: # Function/22 AsIs: t.0/23 AsIs: s.ScopeClass/31 AsIs: (/34 } Tile{ AsIs: </0 Reuse: & GlobalASTStorage-AddAST=4\1*1/4 AsIs: (/7 AsIs: e.Locals$a/25 AsIs: )/8 AsIs: s.NextLocalId/9 HalfReuse: # Name/14 } Tile{ AsIs: e.4/32 } >/37 Tile{ AsIs: )/35 } </38 & PatchAST-Body@2/39 (/40 e.Locals$a/25/41 )/43 s.NextLocalId/9/44 Tile{ AsIs: e.3/27 } >/45 )/46 </47 & Map@12/48 (/49 e.Locals$a/25/50 )/52 Tile{ HalfReuse: s.NextLocalId9 /15 AsIs: e.Tail/29 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[36]);
        refalrts::alloc_close_call(vm, context[37]);
        refalrts::alloc_open_call(vm, context[38]);
        refalrts::alloc_name(vm, context[39], functions[efunc_gen_PatchASTm_Body_Z2]);
        refalrts::alloc_open_bracket(vm, context[40]);
        refalrts::copy_evar(vm, context[41], context[42], context[25], context[26]);
        refalrts::alloc_close_bracket(vm, context[43]);
        refalrts::copy_stvar(vm, context[44], context[9]);
        refalrts::alloc_close_call(vm, context[45]);
        refalrts::alloc_close_bracket(vm, context[46]);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_gen_Map_Z12]);
        refalrts::alloc_open_bracket(vm, context[49]);
        refalrts::copy_evar(vm, context[50], context[51], context[25], context[26]);
        refalrts::alloc_close_bracket(vm, context[52]);
        refalrts::update_name(context[4], functions[efunc_gen_GlobalASTStoragem_AddAST_A4L1D1]);
        refalrts::reinit_ident(context[14], identifiers[ident_Name]);
        refalrts::reinit_svar( context[15], context[9] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[47] );
        refalrts::link_brackets( context[49], context[52] );
        refalrts::link_brackets( context[36], context[46] );
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[38] );
        refalrts::link_brackets( context[40], context[43] );
        refalrts::link_brackets( context[34], context[35] );
        refalrts::push_stack( vm, context[37] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[15];
        res = refalrts::splice_evar( res, context[45], context[52] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[38], context[44] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_elem( res, context[37] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[0], context[14] );
        res = refalrts::splice_evar( res, context[22], context[34] );
        res = refalrts::splice_elem( res, context[36] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@12/4 (/7 e.Locals$a/25 )/8 s.NextLocalId/9 (/14 # Ident/22 t.0/23 e.1/27 )/15 e.Tail/29 >/1
        context[25] = context[16];
        context[26] = context[17];
        context[27] = context[20];
        context[28] = context[21];
        context[29] = context[18];
        context[30] = context[19];
        if( ! refalrts::ident_term( identifiers[ident_Ident], context[22] ) )
          continue;
        // closed e.Locals$a as range 25
        // closed e.1 as range 27
        // closed e.Tail as range 29
        //DEBUG: t.0: 23
        //DEBUG: s.NextLocalId: 9
        //DEBUG: e.Locals$a: 25
        //DEBUG: e.1: 27
        //DEBUG: e.Tail: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/14 AsIs: # Ident/22 AsIs: t.0/23 AsIs: e.1/27 AsIs: )/15 } Tile{ AsIs: </0 AsIs: & Map@12/4 AsIs: (/7 AsIs: e.Locals$a/25 AsIs: )/8 AsIs: s.NextLocalId/9 } Tile{ AsIs: e.Tail/29 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[14], context[15] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@12/4 (/7 e.Locals$a/25 )/8 s.NextLocalId/9 (/14 # NativeBlock/22 t.0/23 e.1/27 )/15 e.Tail/29 >/1
        context[25] = context[16];
        context[26] = context[17];
        context[27] = context[20];
        context[28] = context[21];
        context[29] = context[18];
        context[30] = context[19];
        if( ! refalrts::ident_term( identifiers[ident_NativeBlock], context[22] ) )
          continue;
        // closed e.Locals$a as range 25
        // closed e.1 as range 27
        // closed e.Tail as range 29
        //DEBUG: t.0: 23
        //DEBUG: s.NextLocalId: 9
        //DEBUG: e.Locals$a: 25
        //DEBUG: e.1: 27
        //DEBUG: e.Tail: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/14 AsIs: # NativeBlock/22 AsIs: t.0/23 AsIs: e.1/27 AsIs: )/15 } Tile{ AsIs: </0 AsIs: & Map@12/4 AsIs: (/7 AsIs: e.Locals$a/25 AsIs: )/8 AsIs: s.NextLocalId/9 } Tile{ AsIs: e.Tail/29 } Tile{ AsIs: >/1 ]] }
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[14], context[15] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@12/4 (/7 e.Locals$a/25 )/8 s.NextLocalId/9 (/14 # Include/22 t.0/23 e.1/27 )/15 e.Tail/29 >/1
      context[25] = context[16];
      context[26] = context[17];
      context[27] = context[20];
      context[28] = context[21];
      context[29] = context[18];
      context[30] = context[19];
      if( ! refalrts::ident_term( identifiers[ident_Include], context[22] ) )
        continue;
      // closed e.Locals$a as range 25
      // closed e.1 as range 27
      // closed e.Tail as range 29
      //DEBUG: t.0: 23
      //DEBUG: s.NextLocalId: 9
      //DEBUG: e.Locals$a: 25
      //DEBUG: e.1: 27
      //DEBUG: e.Tail: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/14 # Include/22 t.0/23 e.1/27 )/15 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Map@12/4 AsIs: (/7 AsIs: e.Locals$a/25 AsIs: )/8 AsIs: s.NextLocalId/9 } Tile{ AsIs: e.Tail/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      refalrts::splice_to_freelist_open( vm, context[9], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@12/4 (/7 e.Locals$a/16 )/8 s.NextLocalId/9 t.Next/14 e.Tail/18 >/1
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    // closed e.Locals$a as range 16
    // closed e.Tail as range 18
    //DEBUG: t.Next: 14
    //DEBUG: s.NextLocalId: 9
    //DEBUG: e.Locals$a: 16
    //DEBUG: e.Tail: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </20 & PatchAST-Item@2*4/21 e.Locals$a/16/22 s.NextLocalId/9/24 Tile{ AsIs: t.Next/14 } >/25 Tile{ AsIs: </0 AsIs: & Map@12/4 AsIs: (/7 AsIs: e.Locals$a/16 AsIs: )/8 AsIs: s.NextLocalId/9 } Tile{ AsIs: e.Tail/18 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_PatchASTm_Item_Z2D4]);
    refalrts::copy_evar(vm, context[22], context[23], context[16], context[17]);
    refalrts::copy_stvar(vm, context[24], context[9]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[20], context[24] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@12/4 (/7 e.Locals$a/10 )/8 s.NextLocalId/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Locals$a as range 10
    //DEBUG: s.NextLocalId: 9
    //DEBUG: e.Locals$a: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@12/4 (/7 e.Locals$a/10 )/8 s.NextLocalId/9 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@12/4 (/7 e.Locals$a/5 )/8 s.NextLocalId/9 e.items/2 >/1
  // closed e.Locals$a as range 5
  // closed e.items as range 2
  //DEBUG: s.NextLocalId: 9
  //DEBUG: e.Locals$a: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </10 & Map@0/11 (/12 & PatchAST-Item@0/13 Tile{ HalfReuse: [*]/0 Reuse: & GlobalASTStorage-AddAST=4\1@0/4 AsIs: (/7 AsIs: e.Locals$a/5 AsIs: )/8 AsIs: s.NextLocalId/9 } {*}/14 )/15 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_PatchASTm_Item_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[14], context[0]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_GlobalASTStoragem_AddAST_A4L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[12], context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[0], context[9] );
  res = refalrts::splice_evar( res, context[10], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[14] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z12("Map@12", COOKIE1_, COOKIE2_, func_gen_Map_Z12);


static refalrts::FnResult func_gen_DoMapAccum_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 69 elems
  refalrts::Iter context[69];
  refalrts::zeros( context, 69 );
  // </0 & DoMapAccum@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@3/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@3/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@3/4 t.new8/5 (/9 e.new14/17 )/10 (/15 # Function/23 t.new9/24 s.new10/26 (/29 e.new11/27 )/30 e.new12/21 )/16 e.new13/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.new14 as range 17
      // closed e.new13 as range 19
      context[25] = refalrts::tvar_left( context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      if( ! refalrts::svar_left( context[26], context[21], context[22] ) )
        continue;
      context[27] = 0;
      context[28] = 0;
      context[29] = refalrts::brackets_left( context[27], context[28], context[21], context[22] );
      if( ! context[29] )
        continue;
      refalrts::bracket_pointers(context[29], context[30]);
      // closed e.new11 as range 27
      // closed e.new12 as range 21
      do {
        // </0 & DoMapAccum@3/4 (/5 (/43 e.new15/41 )/44 (/47 e.new16/45 )/48 )/6 (/9 e.new22/31 )/10 (/15 # Function/23 t.new17/24 s.new18/26 (/29 e.new20/33 )/30 e.new19/35 )/16 e.new21/37 >/1
        context[31] = context[17];
        context[32] = context[18];
        context[33] = context[27];
        context[34] = context[28];
        context[35] = context[21];
        context[36] = context[22];
        context[37] = context[19];
        context[38] = context[20];
        context[39] = 0;
        context[40] = 0;
        if( ! refalrts::brackets_term( context[39], context[40], context[5] ) )
          continue;
        context[41] = 0;
        context[42] = 0;
        context[43] = refalrts::brackets_left( context[41], context[42], context[39], context[40] );
        if( ! context[43] )
          continue;
        refalrts::bracket_pointers(context[43], context[44]);
        context[45] = 0;
        context[46] = 0;
        context[47] = refalrts::brackets_left( context[45], context[46], context[39], context[40] );
        if( ! context[47] )
          continue;
        refalrts::bracket_pointers(context[47], context[48]);
        if( ! refalrts::empty_seq( context[39], context[40] ) )
          continue;
        // closed e.new15 as range 41
        // closed e.new16 as range 45
        // closed e.new22 as range 31
        // closed e.new20 as range 33
        // closed e.new19 as range 35
        // closed e.new21 as range 37
        do {
          // </0 & DoMapAccum@3/4 (/5 (/43 e.1/49 )/44 (/47 e.5/51 )/48 )/6 (/9 e.Scanned/53 )/10 (/15 # Function/23 t.0/24 # GN-Entry/26 (/29 e.4/55 )/30 e.3/57 )/16 e.Tail/59 >/1
          context[49] = context[41];
          context[50] = context[42];
          context[51] = context[45];
          context[52] = context[46];
          context[53] = context[31];
          context[54] = context[32];
          context[55] = context[33];
          context[56] = context[34];
          context[57] = context[35];
          context[58] = context[36];
          context[59] = context[37];
          context[60] = context[38];
          if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[26] ) )
            continue;
          // closed e.1 as range 49
          // closed e.5 as range 51
          // closed e.Scanned as range 53
          // closed e.4 as range 55
          // closed e.3 as range 57
          // closed e.Tail as range 59
          //DEBUG: t.0: 24
          //DEBUG: e.1: 49
          //DEBUG: e.5: 51
          //DEBUG: e.Scanned: 53
          //DEBUG: e.4: 55
          //DEBUG: e.3: 57
          //DEBUG: e.Tail: 59

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@3/4 AsIs: (/5 AsIs: (/43 AsIs: e.1/49 HalfReuse: (/44 AsIs: (/47 } e.4/55/61 )/63 t.0/24/64 Tile{ AsIs: )/48 AsIs: )/6 AsIs: (/9 } Tile{ AsIs: e.5/51 } Tile{ AsIs: )/10 } )/66 (/67 Tile{ AsIs: e.Scanned/53 } Tile{ AsIs: (/15 AsIs: # Function/23 AsIs: t.0/24 AsIs: # GN-Entry/26 AsIs: (/29 AsIs: e.4/55 AsIs: )/30 AsIs: e.3/57 AsIs: )/16 } )/68 Tile{ AsIs: e.Tail/59 } Tile{ AsIs: >/1 ]] }
          refalrts::copy_evar(vm, context[61], context[62], context[55], context[56]);
          refalrts::alloc_close_bracket(vm, context[63]);
          refalrts::copy_evar(vm, context[64], context[65], context[24], context[25]);
          refalrts::alloc_close_bracket(vm, context[66]);
          refalrts::alloc_open_bracket(vm, context[67]);
          refalrts::alloc_close_bracket(vm, context[68]);
          refalrts::reinit_open_bracket(context[44]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[67], context[68] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[29], context[30] );
          refalrts::link_brackets( context[5], context[66] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::link_brackets( context[43], context[6] );
          refalrts::link_brackets( context[44], context[48] );
          refalrts::link_brackets( context[47], context[63] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[59], context[60] );
          res = refalrts::splice_elem( res, context[68] );
          res = refalrts::splice_evar( res, context[15], context[16] );
          res = refalrts::splice_evar( res, context[53], context[54] );
          res = refalrts::splice_evar( res, context[66], context[67] );
          res = refalrts::splice_elem( res, context[10] );
          res = refalrts::splice_evar( res, context[51], context[52] );
          res = refalrts::splice_evar( res, context[48], context[9] );
          res = refalrts::splice_evar( res, context[63], context[65] );
          res = refalrts::splice_evar( res, context[61], context[62] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@3/4 (/5 (/43 e.1/49 )/44 (/47 e.5/51 )/48 )/6 (/9 e.Scanned/53 )/10 (/15 # Function/23 t.0/24 # GN-Local/26 (/29 e.4/55 )/30 e.3/57 )/16 e.Tail/59 >/1
        context[49] = context[41];
        context[50] = context[42];
        context[51] = context[45];
        context[52] = context[46];
        context[53] = context[31];
        context[54] = context[32];
        context[55] = context[33];
        context[56] = context[34];
        context[57] = context[35];
        context[58] = context[36];
        context[59] = context[37];
        context[60] = context[38];
        if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[26] ) )
          continue;
        // closed e.1 as range 49
        // closed e.5 as range 51
        // closed e.Scanned as range 53
        // closed e.4 as range 55
        // closed e.3 as range 57
        // closed e.Tail as range 59
        //DEBUG: t.0: 24
        //DEBUG: e.1: 49
        //DEBUG: e.5: 51
        //DEBUG: e.Scanned: 53
        //DEBUG: e.4: 55
        //DEBUG: e.3: 57
        //DEBUG: e.Tail: 59

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@3/4 AsIs: (/5 AsIs: (/43 AsIs: e.1/49 AsIs: )/44 AsIs: (/47 AsIs: e.5/51 HalfReuse: (/48 } e.4/55/61 t.0/24/63 Tile{ AsIs: )/10 } )/65 Tile{ AsIs: )/6 AsIs: (/9 } Tile{ AsIs: e.Scanned/53 } Tile{ AsIs: (/15 AsIs: # Function/23 AsIs: t.0/24 AsIs: # GN-Local/26 AsIs: (/29 AsIs: e.4/55 AsIs: )/30 AsIs: e.3/57 AsIs: )/16 } )/66 Tile{ AsIs: e.Tail/59 } Tile{ AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[61], context[62], context[55], context[56]);
        refalrts::copy_evar(vm, context[63], context[64], context[24], context[25]);
        refalrts::alloc_close_bracket(vm, context[65]);
        refalrts::alloc_close_bracket(vm, context[66]);
        refalrts::reinit_open_bracket(context[48]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[66] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[29], context[30] );
        refalrts::link_brackets( context[5], context[6] );
        refalrts::link_brackets( context[47], context[65] );
        refalrts::link_brackets( context[48], context[10] );
        refalrts::link_brackets( context[43], context[44] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[59], context[60] );
        res = refalrts::splice_elem( res, context[66] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_evar( res, context[53], context[54] );
        res = refalrts::splice_evar( res, context[6], context[9] );
        res = refalrts::splice_elem( res, context[65] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[63], context[64] );
        res = refalrts::splice_evar( res, context[61], context[62] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@3/4 t.Acc/5 (/9 e.Scanned/31 )/10 (/15 # Function/23 t.0/24 s.ScopeClass/26 (/29 e.4/33 )/30 e.3/35 )/16 e.Tail/37 >/1
      context[31] = context[17];
      context[32] = context[18];
      context[33] = context[27];
      context[34] = context[28];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[19];
      context[38] = context[20];
      // closed e.Scanned as range 31
      // closed e.4 as range 33
      // closed e.3 as range 35
      // closed e.Tail as range 37
      //DEBUG: t.Acc: 5
      //DEBUG: t.0: 24
      //DEBUG: s.ScopeClass: 26
      //DEBUG: e.Scanned: 31
      //DEBUG: e.4: 33
      //DEBUG: e.3: 35
      //DEBUG: e.Tail: 37

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@3/4 } (/39 Tile{ AsIs: e.Scanned/31 } )/40 Tile{ AsIs: (/9 } Tile{ AsIs: e.Tail/37 } )/41 </42 & UpdateAccum*2/43 Tile{ AsIs: t.Acc/5 } t.0/24/44 s.ScopeClass/26/46 e.4/33/47 Tile{ HalfReuse: >/10 AsIs: (/15 AsIs: # Function/23 AsIs: t.0/24 AsIs: s.ScopeClass/26 AsIs: (/29 AsIs: e.4/33 AsIs: )/30 AsIs: e.3/35 AsIs: )/16 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_name(vm, context[43], functions[efunc_gen_UpdateAccum_D2]);
      refalrts::copy_evar(vm, context[44], context[45], context[24], context[25]);
      refalrts::copy_stvar(vm, context[46], context[26]);
      refalrts::copy_evar(vm, context[47], context[48], context[33], context[34]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z3]);
      refalrts::reinit_close_call(context[10]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[42] );
      refalrts::link_brackets( context[9], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[10], context[16] );
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_evar( res, context[44], context[46] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[41], context[43] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[9] );
      res = refalrts::splice_elem( res, context[40] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[39] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@3/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@3/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & GlobalASTStorage-AddAST=1\1*1/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_GlobalASTStoragem_AddAST_A1L1D1]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@3/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@3/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@3/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & GlobalASTStorage-AddAST=1\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_GlobalASTStoragem_AddAST_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z3("DoMapAccum@3", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z3);


static refalrts::FnResult func_gen_Map_Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & Map@13/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@13/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@13/4 (/7 (/15 e.1/13 )/16 t.0/17 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = 0;
      context[14] = 0;
      context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
      if( ! context[15] )
        continue;
      refalrts::bracket_pointers(context[15], context[16]);
      // closed e.1 as range 13
      // closed e.Tail as range 9
      context[18] = refalrts::tvar_left( context[17], context[11], context[12] );
      if( ! context[18] )
        continue;
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      //DEBUG: e.1: 13
      //DEBUG: e.Tail: 9
      //DEBUG: t.0: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: (/4 HalfReuse: # Symbol/7 HalfReuse: # Identifier/15 AsIs: e.1/13 AsIs: )/16 } (/19 # Symbol/20 # Name/21 Tile{ AsIs: t.0/17 } e.1/13/22 )/24 )/25 </26 Tile{ HalfReuse: & Map@13/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[19]);
      refalrts::alloc_ident(vm, context[20], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[21], identifiers[ident_Name]);
      refalrts::copy_evar(vm, context[22], context[23], context[13], context[14]);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_ident(context[7], identifiers[ident_Symbol]);
      refalrts::reinit_ident(context[15], identifiers[ident_Identifier]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[26] );
      refalrts::link_brackets( context[0], context[25] );
      refalrts::link_brackets( context[19], context[24] );
      refalrts::link_brackets( context[4], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[24], context[26] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[19], context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@13/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtendMetatables=1\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@13/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z13]);
    refalrts::update_name(context[4], functions[efunc_gen_ExtendMetatables_A1L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@13/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@13/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@13/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & ExtendMetatables=1\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtendMetatables_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z13("Map@13", COOKIE1_, COOKIE2_, func_gen_Map_Z13);


static refalrts::FnResult func_gen_Map_Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Map@14/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@14/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@14/4 (/7 e.0/11 t./13 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.Tail as range 9
      context[14] = refalrts::tvar_right( context[13], context[11], context[12] );
      if( ! context[14] )
        continue;
      // closed e.0 as range 11
      //DEBUG: e.Tail: 9
      //DEBUG: t.: 13
      //DEBUG: e.0: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # CallBrackets/4 AsIs: (/7 } # Symbol/15 # Name/16 Tile{ AsIs: t./13 } Tile{ AsIs: e.0/11 } )/17 )/18 </19 Tile{ HalfReuse: & Map@14/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[15], identifiers[ident_Symbol]);
      refalrts::alloc_ident(vm, context[16], identifiers[ident_Name]);
      refalrts::alloc_close_bracket(vm, context[17]);
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_CallBrackets]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[0], context[18] );
      refalrts::link_brackets( context[7], context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[17], context[19] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@14/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeInitFinalFunc$2=2\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@14/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z14]);
    refalrts::update_name(context[4], functions[efunc_gen_MakeInitFinalFunc_S2A2L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@14/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@14/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@14/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & MakeInitFinalFunc$2=2\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_MakeInitFinalFunc_S2A2L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z14("Map@14", COOKIE1_, COOKIE2_, func_gen_Map_Z14);


static refalrts::FnResult func_gen_MakeInitFinalFunc_S2A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & MakeInitFinalFunc$2=2@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & MakeInitFinalFunc$2=2@1/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & MakeInitFinalFunc$2=2@1/4 t.0/5 e.ResultExpr/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    // closed e.ResultExpr as range 7
    //DEBUG: t.0: 5
    //DEBUG: e.ResultExpr: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Function/4 AsIs: t.0/5 } # GN-Local/9 (/10"__FINAL"/11 )/13 # Sentences/14 (/15 (/16 )/17 (/18 Tile{ AsIs: e.ResultExpr/7 } )/19 (/20 )/21 )/22 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_ident(vm, context[9], identifiers[ident_GNm_Local]);
    refalrts::alloc_open_bracket(vm, context[10]);
    refalrts::alloc_chars(vm, context[11], context[12], "__FINAL", 7);
    refalrts::alloc_close_bracket(vm, context[13]);
    refalrts::alloc_ident(vm, context[14], identifiers[ident_Sentences]);
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_open_bracket(vm, context[16]);
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_open_bracket(vm, context[18]);
    refalrts::alloc_close_bracket(vm, context[19]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Function]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::link_brackets( context[15], context[22] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[10], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[22] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[9], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MakeInitFinalFunc$2=2@1/4 t.0/5 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: t.0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeInitFinalFunc$2=2@0/4 AsIs: t.0/5 } (/7"__FINAL"/8 )/10 Tile{ AsIs: e.dyn/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_chars(vm, context[8], context[9], "__FINAL", 7);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_gen_MakeInitFinalFunc_S2A2Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeInitFinalFunc_S2A2Z1("MakeInitFinalFunc$2=2@1", COOKIE1_, COOKIE2_, func_gen_MakeInitFinalFunc_S2A2Z1);


static refalrts::FnResult func_gen_MakeInitFinalFunc_S2A2Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & MakeInitFinalFunc$2=2@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & MakeInitFinalFunc$2=2@2/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & MakeInitFinalFunc$2=2@2/4 t.0/5 e.ResultExpr/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    // closed e.ResultExpr as range 7
    //DEBUG: t.0: 5
    //DEBUG: e.ResultExpr: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Function/4 AsIs: t.0/5 } # GN-Local/9 (/10"__INIT"/11 )/13 # Sentences/14 (/15 (/16 )/17 (/18 Tile{ AsIs: e.ResultExpr/7 } )/19 (/20 )/21 )/22 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_ident(vm, context[9], identifiers[ident_GNm_Local]);
    refalrts::alloc_open_bracket(vm, context[10]);
    refalrts::alloc_chars(vm, context[11], context[12], "__INIT", 6);
    refalrts::alloc_close_bracket(vm, context[13]);
    refalrts::alloc_ident(vm, context[14], identifiers[ident_Sentences]);
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_open_bracket(vm, context[16]);
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_open_bracket(vm, context[18]);
    refalrts::alloc_close_bracket(vm, context[19]);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Function]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::link_brackets( context[15], context[22] );
    refalrts::link_brackets( context[20], context[21] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[10], context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[22] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[9], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MakeInitFinalFunc$2=2@2/4 t.0/5 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: t.0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MakeInitFinalFunc$2=2@0/4 AsIs: t.0/5 } (/7"__INIT"/8 )/10 Tile{ AsIs: e.dyn/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_chars(vm, context[8], context[9], "__INIT", 6);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_gen_MakeInitFinalFunc_S2A2Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MakeInitFinalFunc_S2A2Z2("MakeInitFinalFunc$2=2@2", COOKIE1_, COOKIE2_, func_gen_MakeInitFinalFunc_S2A2Z2);


static refalrts::FnResult func_gen_Map_Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & Map@15/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@15/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Map@15/4 (/7 e.new5/9 )/8 t.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Map@15/4 (/7 e.MetatableExtension/15 )/8 (/13 # Function/21 t.0/22 s.ScopeClass/24 (/27 e.4/25 )/28 # Metatable/29 e.5/19 )/14 e.Tail/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      context[21] = refalrts::ident_left( identifiers[ident_Function], context[19], context[20] );
      if( ! context[21] )
        continue;
      // closed e.MetatableExtension as range 15
      // closed e.Tail as range 17
      context[23] = refalrts::tvar_left( context[22], context[19], context[20] );
      if( ! context[23] )
        continue;
      if( ! refalrts::svar_left( context[24], context[19], context[20] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[19], context[20] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Metatable], context[19], context[20] );
      if( ! context[29] )
        continue;
      // closed e.4 as range 25
      // closed e.5 as range 19
      //DEBUG: e.MetatableExtension: 15
      //DEBUG: e.Tail: 17
      //DEBUG: t.0: 22
      //DEBUG: s.ScopeClass: 24
      //DEBUG: e.4: 25
      //DEBUG: e.5: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # Function/21 AsIs: t.0/22 AsIs: s.ScopeClass/24 AsIs: (/27 AsIs: e.4/25 AsIs: )/28 AsIs: # Metatable/29 } </30 & CleanupDuplicates/31 Tile{ AsIs: e.5/19 } e.MetatableExtension/15/32 >/34 Tile{ AsIs: )/14 } Tile{ AsIs: </0 AsIs: & Map@15/4 AsIs: (/7 AsIs: e.MetatableExtension/15 AsIs: )/8 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_CleanupDuplicates]);
      refalrts::copy_evar(vm, context[32], context[33], context[15], context[16]);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[30] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[13], context[29] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@15/4 (/7 e.MetatableExtension/15 )/8 t.Next/13 e.Tail/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.MetatableExtension as range 15
    // closed e.Tail as range 17
    //DEBUG: t.Next: 13
    //DEBUG: e.MetatableExtension: 15
    //DEBUG: e.Tail: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next/13 } Tile{ AsIs: </0 AsIs: & Map@15/4 AsIs: (/7 AsIs: e.MetatableExtension/15 AsIs: )/8 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@15/4 (/7 e.MetatableExtension/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.MetatableExtension as range 9
    //DEBUG: e.MetatableExtension: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@15/4 (/7 e.MetatableExtension/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@15/4 (/7 e.MetatableExtension/5 )/8 e.items/2 >/1
  // closed e.MetatableExtension as range 5
  // closed e.items as range 2
  //DEBUG: e.MetatableExtension: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 Tile{ HalfReuse: [*]/0 Reuse: & ExtendMetatables\1@0/4 AsIs: (/7 AsIs: e.MetatableExtension/5 AsIs: )/8 } {*}/11 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtendMetatables_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z15("Map@15", COOKIE1_, COOKIE2_, func_gen_Map_Z15);


static refalrts::FnResult func_gen_CreateMetaFunctions_S1A1L1D2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & CreateMetaFunctions$1=1\1*2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CreateMetaFunctions$1=1\1*2/4 (/7 e.new1/5 )/8 t.new2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & CreateMetaFunctions$1=1\1*2/4 (/7 e.FunctionNames/11 )/8 (/9 s.Definition/15 t.SrcPos/16 s.ScopeClass/18 e.Name/13 )/10 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
      continue;
    // closed e.FunctionNames as range 11
    if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
      continue;
    context[17] = refalrts::tvar_left( context[16], context[13], context[14] );
    if( ! context[17] )
      continue;
    if( ! refalrts::svar_left( context[18], context[13], context[14] ) )
      continue;
    // closed e.Name as range 13
    //DEBUG: e.FunctionNames: 11
    //DEBUG: s.Definition: 15
    //DEBUG: t.SrcPos: 16
    //DEBUG: s.ScopeClass: 18
    //DEBUG: e.Name: 13
    //11: e.FunctionNames
    //13: e.Name
    //15: s.Definition
    //16: t.SrcPos
    //18: s.ScopeClass
    //24: s.Definition

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_CreateMetaFunctions_S1A1L1D2S3C1]);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_OneOf]);
    refalrts::copy_stvar(vm, context[24], context[15]);
    refalrts::alloc_ident(vm, context[25], identifiers[ident_Swap]);
    refalrts::alloc_ident(vm, context[26], identifiers[ident_Enum]);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[19] );
    res = refalrts::splice_elem( res, context[20] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[22] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_stvar( res, context[24] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_elem( res, context[19] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </19 & CreateMetaFunctions$1=1\1*2$3?1/23 # True/24 >/20
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::call_left( context[21], context[22], context[19], context[20] );
      context[24] = refalrts::ident_left( identifiers[ident_True], context[21], context[22] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      //DEBUG: e.FunctionNames: 11
      //DEBUG: s.Definition: 15
      //DEBUG: t.SrcPos: 16
      //DEBUG: s.ScopeClass: 18
      //DEBUG: e.Name: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & CreateMetaFunctions$1=1\1*2/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} </19 & CreateMetaFunctions$1=1\1*2$3?1/23 # True/24 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.FunctionNames/11 } Tile{ AsIs: (/7 } e.Name/13/25 Tile{ HalfReuse: )/20 } Tile{ AsIs: )/8 AsIs: (/9 AsIs: s.Definition/15 AsIs: t.SrcPos/16 AsIs: s.ScopeClass/18 AsIs: e.Name/13 AsIs: )/10 } Tile{ ]] }
      refalrts::copy_evar(vm, context[25], context[26], context[13], context[14]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_close_bracket(context[20]);
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[0], context[8] );
      refalrts::link_brackets( context[7], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[8], context[10] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[19], context[20]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CreateMetaFunctions$1=1\1*2/4 (/7 e.FunctionNames/5 )/8 t.OtherItem/9 >/1
  // closed e.FunctionNames as range 5
  //DEBUG: t.OtherItem: 9
  //DEBUG: e.FunctionNames: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CreateMetaFunctions$1=1\1*2/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.FunctionNames/5 AsIs: )/8 AsIs: t.OtherItem/9 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CreateMetaFunctions_S1A1L1D2("CreateMetaFunctions$1=1\\1*2", COOKIE1_, COOKIE2_, func_gen_CreateMetaFunctions_S1A1L1D2);


static refalrts::FnResult func_gen_GlobalASTStoragem_AddAST_A1L1D1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & GlobalASTStorage-AddAST=1\1*1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & GlobalASTStorage-AddAST=1\1*1/4 t.new1/5 t.new2/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & GlobalASTStorage-AddAST=1\1*1/4 t.Accum/5 (/7 s.Label/11 t.SrcPos/12 s.ScopeClass/14 e.Name/9 )/8 >/1
    context[9] = 0;
    context[10] = 0;
    if( ! refalrts::brackets_term( context[9], context[10], context[7] ) )
      continue;
    if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
      continue;
    context[13] = refalrts::tvar_left( context[12], context[9], context[10] );
    if( ! context[13] )
      continue;
    if( ! refalrts::svar_left( context[14], context[9], context[10] ) )
      continue;
    // closed e.Name as range 9
    //DEBUG: t.Accum: 5
    //DEBUG: s.Label: 11
    //DEBUG: t.SrcPos: 12
    //DEBUG: s.ScopeClass: 14
    //DEBUG: e.Name: 9
    //5: t.Accum
    //9: e.Name
    //11: s.Label
    //12: t.SrcPos
    //14: s.ScopeClass
    //20: s.Label

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[17], functions[efunc_gen_GlobalASTStoragem_AddAST_A1L1D1S2C1]);
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[19], functions[efunc_OneOf]);
    refalrts::copy_stvar(vm, context[20], context[11]);
    refalrts::alloc_ident(vm, context[21], identifiers[ident_Enum]);
    refalrts::alloc_ident(vm, context[22], identifiers[ident_Swap]);
    refalrts::alloc_ident(vm, context[23], identifiers[ident_Entry]);
    refalrts::alloc_ident(vm, context[24], identifiers[ident_Meta]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[15] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[18] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_stvar( res, context[20] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[15] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </15 & GlobalASTStorage-AddAST=1\1*1$2?1/19 # True/20 >/16
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::call_left( context[17], context[18], context[15], context[16] );
      context[20] = refalrts::ident_left( identifiers[ident_True], context[17], context[18] );
      if( ! context[20] )
        continue;
      if( ! refalrts::empty_seq( context[17], context[18] ) )
        continue;
      //DEBUG: t.Accum: 5
      //DEBUG: s.Label: 11
      //DEBUG: t.SrcPos: 12
      //DEBUG: s.ScopeClass: 14
      //DEBUG: e.Name: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} </15 {REMOVED TILE} # True/20 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateAccum/4 AsIs: t.Accum/5 } t.SrcPos/12/21 Tile{ HalfReuse: s.ScopeClass14 /19 } e.Name/9/23 Tile{ AsIs: >/16 } Tile{ AsIs: (/7 AsIs: s.Label/11 AsIs: t.SrcPos/12 AsIs: s.ScopeClass/14 AsIs: e.Name/9 AsIs: )/8 } Tile{ ]] }
      refalrts::copy_evar(vm, context[21], context[22], context[12], context[13]);
      refalrts::copy_evar(vm, context[23], context[24], context[9], context[10]);
      refalrts::update_name(context[4], functions[efunc_UpdateAccum]);
      refalrts::reinit_svar( context[19], context[14] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::splice_to_freelist_open( vm, context[6], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[15], context[16]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GlobalASTStorage-AddAST=1\1*1/4 t.Accum/5 t.Other/7 >/1
  //DEBUG: t.Accum: 5
  //DEBUG: t.Other: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & GlobalASTStorage-AddAST=1\1*1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Accum/5 AsIs: t.Other/7 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GlobalASTStoragem_AddAST_A1L1D1("GlobalASTStorage-AddAST=1\\1*1", COOKIE1_, COOKIE2_, func_gen_GlobalASTStoragem_AddAST_A1L1D1);


static refalrts::FnResult func_gen_Apply_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@3/4 t.new1/5 e.new2/2 t.new3/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply@3/4 s.Fn/5 e.X/9 t.X/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X as range 9
    //DEBUG: t.X: 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.X: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.X/9 AsIs: t.X/7 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@3/4 (/5 t.Closure/13 e.Bounded/11 )/6 e.X/9 t.X/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    // closed e.X as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded as range 11
    //DEBUG: t.X: 7
    //DEBUG: e.X: 9
    //DEBUG: t.Closure: 13
    //DEBUG: e.Bounded: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@3/4 } Tile{ AsIs: t.Closure/13 } Tile{ AsIs: e.Bounded/11 } Tile{ AsIs: e.X/9 } Tile{ AsIs: t.X/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@3/4 t.dyn0/5 e.X/2 t.X/7 >/1
  // closed e.X as range 2
  //DEBUG: t.dyn0: 5
  //DEBUG: t.X: 7
  //DEBUG: e.X: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: e.X/2 AsIs: t.X/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z3("Apply@3", COOKIE1_, COOKIE2_, func_gen_Apply_Z3);


static refalrts::FnResult func_gen_Apply_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Apply@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@4/4 t.new1/5 e.new2/2 t.new3/9 t.new4/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_right( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply@4/4 s.Fn/5 e.X/11 t.X/9 t.X0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X as range 11
    //DEBUG: t.X: 9
    //DEBUG: t.X0: 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.X: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.X/11 AsIs: t.X/9 AsIs: t.X0/7 HalfReuse: & $table/1 } >/13 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@4/4 (/5 t.Closure/15 e.Bounded/13 )/6 e.X/11 t.X/9 t.X0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
      continue;
    // closed e.X as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Bounded as range 13
    //DEBUG: t.X: 9
    //DEBUG: t.X0: 7
    //DEBUG: e.X: 11
    //DEBUG: t.Closure: 15
    //DEBUG: e.Bounded: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@4/4 } Tile{ AsIs: t.Closure/15 } Tile{ AsIs: e.Bounded/13 } Tile{ AsIs: e.X/11 } Tile{ AsIs: t.X/9 AsIs: t.X0/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@4/4 t.dyn0/5 e.X/2 t.X/9 t.X0/7 >/1
  // closed e.X as range 2
  //DEBUG: t.dyn0: 5
  //DEBUG: t.X: 9
  //DEBUG: t.X0: 7
  //DEBUG: e.X: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: e.X/2 AsIs: t.X/9 AsIs: t.X0/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z4("Apply@4", COOKIE1_, COOKIE2_, func_gen_Apply_Z4);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@1/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@1/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@1/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & FilterLexerMessages\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FilterLexerMessages_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z1("DoMapAccum$1=1@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z1);


static refalrts::FnResult func_gen_LoadAST_S3B1S1A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & LoadAST$3:1$1=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & LoadAST$3:1$1=1@2/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & LoadAST$3:1$1=1@2/4 (/7 e.BaseName/9 )/8 t.ErrorList/13 e.AST/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.BaseName as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.AST as range 11
    //DEBUG: e.BaseName: 9
    //DEBUG: t.ErrorList: 13
    //DEBUG: e.AST: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & LoadAST$3:1$1:1@2/15 Tile{ AsIs: t.ErrorList/13 } (/16 Tile{ AsIs: e.AST/11 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.BaseName/9 AsIs: )/8 } </17 & RemoveFile/18 e.BaseName/9/19"-decompiled.ref"/21 >/23 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[15], functions[efunc_gen_LoadAST_S3B1S1B1Z2]);
    refalrts::alloc_open_bracket(vm, context[16]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_RemoveFile]);
    refalrts::copy_evar(vm, context[19], context[20], context[9], context[10]);
    refalrts::alloc_chars(vm, context[21], context[22], "-decompiled.ref", 15);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[17] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[16], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[23] );
    res = refalrts::splice_evar( res, context[4], context[8] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & LoadAST$3:1$1=1@2/4 (/7 e.BaseName/5 )/8 e.dyn/2 >/1
  // closed e.BaseName as range 5
  // closed e.dyn as range 2
  //DEBUG: e.BaseName: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & LoadAST$3:1$1=1@0/4 AsIs: (/7 } # FileRowCol/9 (/10 1/11 1/12 )/13 Tile{ AsIs: e.BaseName/5 }"-decompiled.ref"/14 )/16 (/17 e.BaseName/5/18"-decompiled.ref"/20 Tile{ AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[9], identifiers[ident_FileRowCol]);
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_number(vm, context[11], 1UL);
  refalrts::alloc_number(vm, context[12], 1UL);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::alloc_chars(vm, context[14], context[15], "-decompiled.ref", 15);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::copy_evar(vm, context[18], context[19], context[5], context[6]);
  refalrts::alloc_chars(vm, context[20], context[21], "-decompiled.ref", 15);
  refalrts::update_name(context[4], functions[efunc_gen_LoadAST_S3B1S1A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[8] );
  refalrts::link_brackets( context[7], context[16] );
  refalrts::link_brackets( context[10], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[14], context[21] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_LoadAST_S3B1S1A1Z2("LoadAST$3:1$1=1@2", COOKIE1_, COOKIE2_, func_gen_LoadAST_S3B1S1A1Z2);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@2/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@2/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@2/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & CreateMetaFunctions$1=1\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CreateMetaFunctions_S1A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z2("DoMapAccum$1=1@2", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z2);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@3/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@3/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@3/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@3/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & GlobalASTStorage-AddAST=1\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_GlobalASTStoragem_AddAST_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z3("DoMapAccum$1=1@3", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z3);


static refalrts::FnResult func_gen_GlobalASTStoragem_AddAST_A4L1D1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & GlobalASTStorage-AddAST=4\1*1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & GlobalASTStorage-AddAST=4\1*1/4 (/7 e.new1/5 )/8 s.new2/9 # Name/10 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::ident_left( identifiers[ident_Name], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & GlobalASTStorage-AddAST=4\1*1/4 (/7 e.Locals$a/11 )/8 s.NextLocalId/9 # Name/10 e.Name/13 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Locals$a as range 11
    // closed e.Name as range 13
    //DEBUG: s.NextLocalId: 9
    //DEBUG: e.Locals$a: 11
    //DEBUG: e.Name: 13
    //9: s.NextLocalId
    //11: e.Locals$a
    //13: e.Name
    //18: e.Locals$a

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[17], functions[efunc_gen_GlobalASTStoragem_AddAST_A4L1D1S2C1]);
    refalrts::copy_evar(vm, context[18], context[19], context[11], context[12]);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[15] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[15] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </15 & GlobalASTStorage-AddAST=4\1*1$2?1/19 e._/20 (/26 e.Name/28 t._/30 )/27 e._0/22 >/16
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::call_left( context[17], context[18], context[15], context[16] );
      context[20] = 0;
      context[21] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[22] = context[17];
        context[23] = context[18];
        context[24] = 0;
        context[25] = 0;
        context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
        if( ! context[26] )
          continue;
        refalrts::bracket_pointers(context[26], context[27]);
        if( ! refalrts::repeated_evar_left( vm, context[28], context[29], context[13], context[14], context[24], context[25] ) )
          continue;
        // closed e._0 as range 22
        context[31] = refalrts::tvar_left( context[30], context[24], context[25] );
        if( ! context[31] )
          continue;
        if( ! refalrts::empty_seq( context[24], context[25] ) )
          continue;
        //DEBUG: s.NextLocalId: 9
        //DEBUG: e.Locals$a: 11
        //DEBUG: e.Name: 13
        //DEBUG: e._: 20
        //DEBUG: e._0: 22
        //DEBUG: t._: 30

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & GlobalASTStorage-AddAST=4\1*1/4 (/7 e.Locals$a/11 )/8 s.NextLocalId/9 {REMOVED TILE} e.Name/13 </15 & GlobalASTStorage-AddAST=4\1*1$2?1/19 e._/20 (/26 {REMOVED TILE} t._/30 )/27 e._0/22 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: e.Name/28 } Tile{ Reuse: # SUF/10 } Tile{ HalfReuse: '~'/16 HalfReuse: s.NextLocalId9 /1 ]] }
        refalrts::update_ident(context[10], identifiers[ident_SUF]);
        refalrts::reinit_char(context[16], '~');
        refalrts::reinit_svar( context[1], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[16];
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[20], context[21], context[17], context[18] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[15], context[16]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GlobalASTStorage-AddAST=4\1*1/4 (/7 e.Locals$a/5 )/8 s.NextLocalId/9 # Name/10 e.Name/2 >/1
  // closed e.Locals$a as range 5
  // closed e.Name as range 2
  //DEBUG: s.NextLocalId: 9
  //DEBUG: e.Locals$a: 5
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & GlobalASTStorage-AddAST=4\1*1/4 (/7 e.Locals$a/5 )/8 s.NextLocalId/9 # Name/10 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Name/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GlobalASTStoragem_AddAST_A4L1D1("GlobalASTStorage-AddAST=4\\1*1", COOKIE1_, COOKIE2_, func_gen_GlobalASTStoragem_AddAST_A4L1D1);


static refalrts::FnResult func_gen_LoadAST_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & LoadAST$1=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & LoadAST$1=1@1/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & LoadAST$1=1@1/4 t.Config0/5 (/9 e.BaseName/11 )/10 s.Mode/15 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.BaseName as range 11
    if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    //DEBUG: t.Config0: 5
    //DEBUG: e.BaseName: 11
    //DEBUG: s.Mode: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & LoadAST$1=2@1/4 AsIs: t.Config0/5 HalfReuse: s.Mode15 /9 } (/16 Tile{ AsIs: e.BaseName/11 } )/17 </18 Tile{ HalfReuse: & R5-Scan/10 AsIs: s.Mode/15 } e.BaseName/11/19"-decompiled.ref"/21 >/23 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[16]);
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::copy_evar(vm, context[19], context[20], context[11], context[12]);
    refalrts::alloc_chars(vm, context[21], context[22], "-decompiled.ref", 15);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::update_name(context[4], functions[efunc_gen_LoadAST_S1A2Z1]);
    refalrts::reinit_svar( context[9], context[15] );
    refalrts::reinit_name(context[10], functions[efunc_R5m_Scan]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[18] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[23] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[10], context[15] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & LoadAST$1=1@1/4 t.Config0/5 (/9 e.BaseName/7 )/10 e.dyn/2 >/1
  // closed e.BaseName as range 7
  // closed e.dyn as range 2
  //DEBUG: t.Config0: 5
  //DEBUG: e.BaseName: 7
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & LoadAST$1=1@0/4 AsIs: t.Config0/5 AsIs: (/9 AsIs: e.BaseName/7 HalfReuse: '-'/10 }"decompiled.ref"/11 )/13 Tile{ AsIs: e.dyn/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_chars(vm, context[11], context[12], "decompiled.ref", 14);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_LoadAST_S1A1Z0]);
  refalrts::reinit_char(context[10], '-');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_LoadAST_S1A1Z1("LoadAST$1=1@1", COOKIE1_, COOKIE2_, func_gen_LoadAST_S1A1Z1);


static refalrts::FnResult func_gen_LoadAST_S3B1S1B1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & LoadAST$3:1$1:1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & LoadAST$3:1$1:1@2/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 2
  do {
    // </0 & LoadAST$3:1$1:1@2/4 t.new5/5 (/9 e.new8/15 )/10 (/13 e.new9/17 )/14 s.new6/25 (/23 e.new7/21 )/24 >/1
    context[15] = context[7];
    context[16] = context[8];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    context[21] = 0;
    context[22] = 0;
    context[23] = refalrts::brackets_right( context[21], context[22], context[19], context[20] );
    if( ! context[23] )
      continue;
    refalrts::bracket_pointers(context[23], context[24]);
    // closed e.new8 as range 15
    // closed e.new9 as range 17
    // closed e.new7 as range 21
    if( ! refalrts::svar_left( context[25], context[19], context[20] ) )
      continue;
    if( ! refalrts::empty_seq( context[19], context[20] ) )
      continue;
    do {
      // </0 & LoadAST$3:1$1:1@2/4 t.ErrorList0/5 (/9 e.AST0/26 )/10 (/13 e.BaseName/28 )/14 # True/25 (/23 )/24 >/1
      context[26] = context[15];
      context[27] = context[16];
      context[28] = context[17];
      context[29] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_True], context[25] ) )
        continue;
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      // closed e.AST0 as range 26
      // closed e.BaseName as range 28
      //DEBUG: t.ErrorList0: 5
      //DEBUG: e.AST0: 26
      //DEBUG: e.BaseName: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & LoadAST$3:1$1:1@2/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 (/13 e.BaseName/28 )/14 # True/25 (/23 )/24 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.ErrorList0/5 } Tile{ AsIs: e.AST0/26 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & LoadAST$3:1$1:1@2/4 t.ErrorList0/5 (/9 e.AST0/26 )/10 (/13 e.BaseName/28 )/14 # False/25 (/23 e.Message/30 )/24 >/1
    context[26] = context[15];
    context[27] = context[16];
    context[28] = context[17];
    context[29] = context[18];
    context[30] = context[21];
    context[31] = context[22];
    if( ! refalrts::ident_term( identifiers[ident_False], context[25] ) )
      continue;
    // closed e.AST0 as range 26
    // closed e.BaseName as range 28
    // closed e.Message as range 30
    //DEBUG: t.ErrorList0: 5
    //DEBUG: e.AST0: 26
    //DEBUG: e.BaseName: 28
    //DEBUG: e.Message: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} e.AST0/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & EL-AddErrorAt/4 AsIs: t.ErrorList0/5 AsIs: (/9 } Tile{ HalfReuse: # FileRowCol/10 AsIs: (/13 } 1/32 1/33 )/34 e.BaseName/28/35"-decompiled.ref"/37 )/39"Can\'t remove file "/40 Tile{ AsIs: e.BaseName/28 }"-decompiled.re"/42 Tile{ HalfReuse: 'f'/14 HalfReuse: ' '/25 HalfReuse: '('/23 AsIs: e.Message/30 HalfReuse: ')'/24 AsIs: >/1 ]] }
    refalrts::alloc_number(vm, context[32], 1UL);
    refalrts::alloc_number(vm, context[33], 1UL);
    refalrts::alloc_close_bracket(vm, context[34]);
    refalrts::copy_evar(vm, context[35], context[36], context[28], context[29]);
    refalrts::alloc_chars(vm, context[37], context[38], "-decompiled.ref", 15);
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_chars(vm, context[40], context[41], "Can\'t remove file ", 18);
    refalrts::alloc_chars(vm, context[42], context[43], "-decompiled.re", 14);
    refalrts::update_name(context[4], functions[efunc_ELm_AddErrorAt]);
    refalrts::reinit_ident(context[10], identifiers[ident_FileRowCol]);
    refalrts::reinit_char(context[14], 'f');
    refalrts::reinit_char(context[25], ' ');
    refalrts::reinit_char(context[23], '(');
    refalrts::reinit_char(context[24], ')');
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[39] );
    refalrts::link_brackets( context[13], context[34] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[14];
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[32], context[41] );
    res = refalrts::splice_evar( res, context[10], context[13] );
    refalrts::splice_to_freelist_open( vm, context[9], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & LoadAST$3:1$1:1@2/4 t.ErrorList0/5 (/9 e.AST0/7 )/10 (/13 e.BaseName/11 )/14 e.dyn/2 >/1
  // closed e.AST0 as range 7
  // closed e.BaseName as range 11
  // closed e.dyn as range 2
  //DEBUG: t.ErrorList0: 5
  //DEBUG: e.AST0: 7
  //DEBUG: e.BaseName: 11
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & LoadAST$3:1$1:1@0/4 AsIs: t.ErrorList0/5 AsIs: (/9 AsIs: e.AST0/7 AsIs: )/10 AsIs: (/13 } # FileRowCol/15 (/16 1/17 1/18 )/19 Tile{ AsIs: e.BaseName/11 }"-decompiled.ref"/20 )/22 (/23 e.BaseName/11/24"-decompiled.ref"/26 Tile{ AsIs: )/14 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[15], identifiers[ident_FileRowCol]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_number(vm, context[17], 1UL);
  refalrts::alloc_number(vm, context[18], 1UL);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_chars(vm, context[20], context[21], "-decompiled.ref", 15);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::copy_evar(vm, context[24], context[25], context[11], context[12]);
  refalrts::alloc_chars(vm, context[26], context[27], "-decompiled.ref", 15);
  refalrts::update_name(context[4], functions[efunc_gen_LoadAST_S3B1S1B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[23], context[14] );
  refalrts::link_brackets( context[13], context[22] );
  refalrts::link_brackets( context[16], context[19] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[14];
  res = refalrts::splice_evar( res, context[20], context[27] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[15], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_LoadAST_S3B1S1B1Z2("LoadAST$3:1$1:1@2", COOKIE1_, COOKIE2_, func_gen_LoadAST_S3B1S1B1Z2);


static refalrts::FnResult func_gen_PatchASTm_Body_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & PatchAST-Body@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PatchAST-Body@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & PatchAST-Body@1/4 (/7 e.new5/9 )/8 s.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & PatchAST-Body@1/4 (/7 e.UnitName/14 )/8 # Sentences/13 e.Sentences/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_Sentences], context[13] ) )
        continue;
      // closed e.UnitName as range 14
      // closed e.Sentences as range 16
      //DEBUG: e.UnitName: 14
      //DEBUG: e.Sentences: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: # Sentences/13 } Tile{ AsIs: </0 Reuse: & Map@18/4 AsIs: (/7 AsIs: e.UnitName/14 AsIs: )/8 } Tile{ AsIs: e.Sentences/16 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Map_Z18]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_elem( res, context[13] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PatchAST-Body@1/4 (/7 e.new8/14 )/8 # NativeBody/13 t.new6/18 e.new7/16 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[13] ) )
        continue;
      // closed e.new8 as range 14
      context[19] = refalrts::tvar_left( context[18], context[16], context[17] );
      if( ! context[19] )
        continue;
      // closed e.new7 as range 16
      do {
        // </0 & PatchAST-Body@1/4 (/7 e.new11/20 )/8 # NativeBody/13 s.new9/18 e.new10/22 >/1
        context[20] = context[14];
        context[21] = context[15];
        context[22] = context[16];
        context[23] = context[17];
        if( ! refalrts::svar_term( context[18], context[18] ) )
          continue;
        // closed e.new11 as range 20
        // closed e.new10 as range 22
        do {
          // </0 & PatchAST-Body@1/4 (/7 e.UnitName/24 )/8 # NativeBody/13 # NoPos/18 e.Code/26 >/1
          context[24] = context[20];
          context[25] = context[21];
          context[26] = context[22];
          context[27] = context[23];
          if( ! refalrts::ident_term( identifiers[ident_NoPos], context[18] ) )
            continue;
          // closed e.UnitName as range 24
          // closed e.Code as range 26
          //DEBUG: e.UnitName: 24
          //DEBUG: e.Code: 26

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & PatchAST-Body@1/4 (/7 e.UnitName/24 )/8 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: # NativeBody/13 AsIs: # NoPos/18 } Tile{ AsIs: e.Code/26 } Tile{ ]] }
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[13], context[18] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PatchAST-Body@1/4 (/7 e.UnitName/24 )/8 # NativeBody/13 s.LnNum/18 e.Code/26 >/1
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        // closed e.UnitName as range 24
        // closed e.Code as range 26
        //DEBUG: s.LnNum: 18
        //DEBUG: e.UnitName: 24
        //DEBUG: e.Code: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum/18 {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: # NativeBody/13 } Tile{ HalfReuse: (/0 HalfReuse: # FileLine/4 HalfReuse: s.LnNum18 /7 AsIs: e.UnitName/24 AsIs: )/8 } Tile{ AsIs: e.Code/26 } Tile{ ]] }
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_FileLine]);
        refalrts::reinit_svar( context[7], context[18] );
        refalrts::link_brackets( context[0], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_elem( res, context[13] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PatchAST-Body@1/4 (/7 e.UnitName/20 )/8 # NativeBody/13 (/18 # RowCol/26 s.Row/27 s.Col/28 )/19 e.Code/22 >/1
        context[20] = context[14];
        context[21] = context[15];
        context[22] = context[16];
        context[23] = context[17];
        context[24] = 0;
        context[25] = 0;
        if( ! refalrts::brackets_term( context[24], context[25], context[18] ) )
          continue;
        context[26] = refalrts::ident_left( identifiers[ident_RowCol], context[24], context[25] );
        if( ! context[26] )
          continue;
        // closed e.UnitName as range 20
        // closed e.Code as range 22
        if( ! refalrts::svar_left( context[27], context[24], context[25] ) )
          continue;
        if( ! refalrts::svar_left( context[28], context[24], context[25] ) )
          continue;
        if( ! refalrts::empty_seq( context[24], context[25] ) )
          continue;
        //DEBUG: e.UnitName: 20
        //DEBUG: e.Code: 22
        //DEBUG: s.Row: 27
        //DEBUG: s.Col: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & PatchAST-Body@1/4 (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # NativeBody/8 HalfReuse: (/13 HalfReuse: # FileRowCol/18 HalfReuse: (/26 AsIs: s.Row/27 AsIs: s.Col/28 AsIs: )/19 } Tile{ AsIs: e.UnitName/20 } Tile{ HalfReuse: )/1 } Tile{ AsIs: e.Code/22 } Tile{ ]] }
        refalrts::reinit_ident(context[8], identifiers[ident_NativeBody]);
        refalrts::reinit_open_bracket(context[13]);
        refalrts::reinit_ident(context[18], identifiers[ident_FileRowCol]);
        refalrts::reinit_open_bracket(context[26]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[13], context[1] );
        refalrts::link_brackets( context[26], context[19] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[1] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        res = refalrts::splice_evar( res, context[8], context[19] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PatchAST-Body@1/4 (/7 e.UnitName/20 )/8 # NativeBody/13 t.SrcPos/18 e.Code/22 >/1
      context[20] = context[14];
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      // closed e.UnitName as range 20
      // closed e.Code as range 22
      //DEBUG: t.SrcPos: 18
      //DEBUG: e.UnitName: 20
      //DEBUG: e.Code: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } # NativeBody/24 Tile{ AsIs: </0 Reuse: & PatchASTSrcPos=1\1*4/4 AsIs: (/7 AsIs: e.UnitName/20 AsIs: )/8 Reuse: # SrcPos/13 AsIs: t.SrcPos/18 } Tile{ AsIs: >/1 } Tile{ AsIs: e.Code/22 } Tile{ ]] }
      refalrts::alloc_ident(vm, context[24], identifiers[ident_NativeBody]);
      refalrts::update_name(context[4], functions[efunc_gen_PatchASTSrcPos_A1L1D4]);
      refalrts::update_ident(context[13], identifiers[ident_SrcPos]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[0], context[19] );
      res = refalrts::splice_elem( res, context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PatchAST-Body@1/4 (/7 e.UnitName/14 )/8 # Metatable/13 e.Metatable/16 >/1
    context[14] = context[9];
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    if( ! refalrts::ident_term( identifiers[ident_Metatable], context[13] ) )
      continue;
    // closed e.UnitName as range 14
    // closed e.Metatable as range 16
    //DEBUG: e.UnitName: 14
    //DEBUG: e.Metatable: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: # Metatable/13 } Tile{ AsIs: </0 Reuse: & Map@19/4 AsIs: (/7 AsIs: e.UnitName/14 AsIs: )/8 } Tile{ AsIs: e.Metatable/16 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z19]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PatchAST-Body@1/4 (/7 e.UnitName/5 )/8 e.body/2 >/1
  // closed e.UnitName as range 5
  // closed e.body as range 2
  //DEBUG: e.UnitName: 5
  //DEBUG: e.body: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & PatchAST-Body@0/10 Tile{ HalfReuse: [*]/0 Reuse: & PatchASTSrcPos=1\1@0/4 AsIs: (/7 AsIs: e.UnitName/5 AsIs: )/8 } {*}/11 Tile{ AsIs: e.body/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_PatchASTm_Body_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_PatchASTSrcPos_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PatchASTm_Body_Z1("PatchAST-Body@1", COOKIE1_, COOKIE2_, func_gen_PatchASTm_Body_Z1);


static refalrts::FnResult func_gen_Map_Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & Map@16/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@16/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Map@16/4 (/7 e.UnitName/9 )/8 t.Next/13 e.Tail/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.UnitName as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Tail as range 11
    //DEBUG: e.UnitName: 9
    //DEBUG: t.Next: 13
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PatchAST-Expr\1@1/4 AsIs: (/7 AsIs: e.UnitName/9 AsIs: )/8 AsIs: t.Next/13 } >/15 </16 & Map@16/17 (/18 e.UnitName/9/19 )/21 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[15]);
    refalrts::alloc_open_call(vm, context[16]);
    refalrts::alloc_name(vm, context[17], functions[efunc_gen_Map_Z16]);
    refalrts::alloc_open_bracket(vm, context[18]);
    refalrts::copy_evar(vm, context[19], context[20], context[9], context[10]);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_PatchASTm_Expr_L1Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[16] );
    refalrts::link_brackets( context[18], context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[15], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@16/4 (/7 e.UnitName/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.UnitName as range 9
    //DEBUG: e.UnitName: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@16/4 (/7 e.UnitName/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@16/4 (/7 e.UnitName/5 )/8 e.items/2 >/1
  // closed e.UnitName as range 5
  // closed e.items as range 2
  //DEBUG: e.UnitName: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 [*]/11 & PatchAST-Expr\1@0/12 Tile{ HalfReuse: [*]/0 Reuse: & PatchASTSrcPos=1\1@0/4 AsIs: (/7 AsIs: e.UnitName/5 AsIs: )/8 } {*}/13 {*}/14 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_PatchASTm_Expr_L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[13], context[0]);
  refalrts::alloc_unwrapped_closure(vm, context[14], context[11]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_PatchASTSrcPos_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  refalrts::wrap_closure( context[13] );
  refalrts::wrap_closure( context[14] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z16("Map@16", COOKIE1_, COOKIE2_, func_gen_Map_Z16);


static refalrts::FnResult func_gen_PatchASTm_Body_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & PatchAST-Body@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PatchAST-Body@2/4 (/7 e.new1/5 )/8 s.new2/9 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & PatchAST-Body@2/4 (/7 e.new7/10 )/8 s.new4/9 s.new5/14 e.new6/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.new7 as range 10
    if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
      continue;
    // closed e.new6 as range 12
    do {
      // </0 & PatchAST-Body@2/4 (/7 e.Locals$a/15 )/8 s.NextLocalId/9 # Sentences/14 e.Sentences/17 >/1
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      if( ! refalrts::ident_term( identifiers[ident_Sentences], context[14] ) )
        continue;
      // closed e.Locals$a as range 15
      // closed e.Sentences as range 17
      //DEBUG: s.NextLocalId: 9
      //DEBUG: e.Locals$a: 15
      //DEBUG: e.Sentences: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: # Sentences/14 } Tile{ AsIs: </0 Reuse: & Map@20/4 AsIs: (/7 AsIs: e.Locals$a/15 AsIs: )/8 AsIs: s.NextLocalId/9 } Tile{ AsIs: e.Sentences/17 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Map_Z20]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PatchAST-Body@2/4 (/7 e.Locals$a/15 )/8 s.NextLocalId/9 # NativeBody/14 t.SrcPos/19 e.Code/17 >/1
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      context[18] = context[13];
      if( ! refalrts::ident_term( identifiers[ident_NativeBody], context[14] ) )
        continue;
      // closed e.Locals$a as range 15
      context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
      if( ! context[20] )
        continue;
      // closed e.Code as range 17
      //DEBUG: s.NextLocalId: 9
      //DEBUG: e.Locals$a: 15
      //DEBUG: t.SrcPos: 19
      //DEBUG: e.Code: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & PatchAST-Body@2/4 (/7 e.Locals$a/15 )/8 s.NextLocalId/9 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: # NativeBody/14 AsIs: t.SrcPos/19 } Tile{ AsIs: e.Code/17 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[14], context[20] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PatchAST-Body@2/4 (/7 e.Locals$a/15 )/8 s.NextLocalId/9 # Metatable/14 e.Metatable/17 >/1
    context[15] = context[10];
    context[16] = context[11];
    context[17] = context[12];
    context[18] = context[13];
    if( ! refalrts::ident_term( identifiers[ident_Metatable], context[14] ) )
      continue;
    // closed e.Locals$a as range 15
    // closed e.Metatable as range 17
    //DEBUG: s.NextLocalId: 9
    //DEBUG: e.Locals$a: 15
    //DEBUG: e.Metatable: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: # Metatable/14 } Tile{ AsIs: </0 Reuse: & Map@21/4 AsIs: (/7 AsIs: e.Locals$a/15 AsIs: )/8 AsIs: s.NextLocalId/9 } Tile{ AsIs: e.Metatable/17 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z21]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_elem( res, context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PatchAST-Body@2/4 (/7 e.Locals$a/5 )/8 s.NextLocalId/9 e.body/2 >/1
  // closed e.Locals$a as range 5
  // closed e.body as range 2
  //DEBUG: s.NextLocalId: 9
  //DEBUG: e.Locals$a: 5
  //DEBUG: e.body: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </10 & PatchAST-Body@0/11 Tile{ HalfReuse: [*]/0 Reuse: & GlobalASTStorage-AddAST=4\1@0/4 AsIs: (/7 AsIs: e.Locals$a/5 AsIs: )/8 AsIs: s.NextLocalId/9 } {*}/12 Tile{ AsIs: e.body/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_PatchASTm_Body_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[12], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_GlobalASTStoragem_AddAST_A4L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[0], context[9] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  refalrts::use( res );
  refalrts::wrap_closure( context[12] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PatchASTm_Body_Z2("PatchAST-Body@2", COOKIE1_, COOKIE2_, func_gen_PatchASTm_Body_Z2);


static refalrts::FnResult func_gen_Map_Z17(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & Map@17/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@17/4 (/7 e.new1/5 )/8 s.new2/9 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Map@17/4 (/7 e.new7/10 )/8 s.new4/9 t.new5/14 e.new6/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.new7 as range 10
    context[15] = refalrts::tvar_left( context[14], context[12], context[13] );
    if( ! context[15] )
      continue;
    // closed e.new6 as range 12
    do {
      // </0 & Map@17/4 (/7 e.new12/16 )/8 s.new8/9 (/14 s.new9/22 e.new10/20 )/15 e.new11/18 >/1
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = 0;
      context[21] = 0;
      if( ! refalrts::brackets_term( context[20], context[21], context[14] ) )
        continue;
      // closed e.new12 as range 16
      // closed e.new11 as range 18
      if( ! refalrts::svar_left( context[22], context[20], context[21] ) )
        continue;
      // closed e.new10 as range 20
      do {
        // </0 & Map@17/4 (/7 e.new19/23 )/8 s.new13/9 (/14 s.new14/22 t.new15/29 t.new16/31 e.new17/25 )/15 e.new18/27 >/1
        context[23] = context[16];
        context[24] = context[17];
        context[25] = context[20];
        context[26] = context[21];
        context[27] = context[18];
        context[28] = context[19];
        // closed e.new19 as range 23
        // closed e.new18 as range 27
        context[30] = refalrts::tvar_left( context[29], context[25], context[26] );
        if( ! context[30] )
          continue;
        context[32] = refalrts::tvar_left( context[31], context[25], context[26] );
        if( ! context[32] )
          continue;
        // closed e.new17 as range 25
        do {
          // </0 & Map@17/4 (/7 e.new26/33 )/8 s.new20/9 (/14 s.new21/22 t.new22/29 s.new23/31 e.new24/35 )/15 e.new25/37 >/1
          context[33] = context[23];
          context[34] = context[24];
          context[35] = context[25];
          context[36] = context[26];
          context[37] = context[27];
          context[38] = context[28];
          if( ! refalrts::svar_term( context[31], context[31] ) )
            continue;
          // closed e.new26 as range 33
          // closed e.new24 as range 35
          // closed e.new25 as range 37
          do {
            // </0 & Map@17/4 (/7 e.Locals$a/39 )/8 s.NextLocalId/9 (/14 # Var/22 t.0/29 s.Mode/31 e.2/41 )/15 e.Tail/43 >/1
            context[39] = context[33];
            context[40] = context[34];
            context[41] = context[35];
            context[42] = context[36];
            context[43] = context[37];
            context[44] = context[38];
            if( ! refalrts::ident_term( identifiers[ident_Var], context[22] ) )
              continue;
            // closed e.Locals$a as range 39
            // closed e.2 as range 41
            // closed e.Tail as range 43
            //DEBUG: t.0: 29
            //DEBUG: s.NextLocalId: 9
            //DEBUG: s.Mode: 31
            //DEBUG: e.Locals$a: 39
            //DEBUG: e.2: 41
            //DEBUG: e.Tail: 43

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/14 AsIs: # Var/22 AsIs: t.0/29 AsIs: s.Mode/31 AsIs: e.2/41 AsIs: )/15 } Tile{ AsIs: </0 AsIs: & Map@17/4 AsIs: (/7 AsIs: e.Locals$a/39 AsIs: )/8 AsIs: s.NextLocalId/9 } Tile{ AsIs: e.Tail/43 } Tile{ AsIs: >/1 ]] }
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::link_brackets( context[14], context[15] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[43], context[44] );
            res = refalrts::splice_evar( res, context[0], context[9] );
            res = refalrts::splice_evar( res, context[14], context[15] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & Map@17/4 (/7 e.Locals$a/39 )/8 s.NextLocalId/9 (/14 # NewVar/22 t.0/29 s.Mode/31 e.2/41 )/15 e.Tail/43 >/1
          context[39] = context[33];
          context[40] = context[34];
          context[41] = context[35];
          context[42] = context[36];
          context[43] = context[37];
          context[44] = context[38];
          if( ! refalrts::ident_term( identifiers[ident_NewVar], context[22] ) )
            continue;
          // closed e.Locals$a as range 39
          // closed e.2 as range 41
          // closed e.Tail as range 43
          //DEBUG: t.0: 29
          //DEBUG: s.NextLocalId: 9
          //DEBUG: s.Mode: 31
          //DEBUG: e.Locals$a: 39
          //DEBUG: e.2: 41
          //DEBUG: e.Tail: 43

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/14 AsIs: # NewVar/22 AsIs: t.0/29 AsIs: s.Mode/31 AsIs: e.2/41 AsIs: )/15 } Tile{ AsIs: </0 AsIs: & Map@17/4 AsIs: (/7 AsIs: e.Locals$a/39 AsIs: )/8 AsIs: s.NextLocalId/9 } Tile{ AsIs: e.Tail/43 } Tile{ AsIs: >/1 ]] }
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[14], context[15] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[43], context[44] );
          res = refalrts::splice_evar( res, context[0], context[9] );
          res = refalrts::splice_evar( res, context[14], context[15] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@17/4 (/7 e.Locals$a/33 )/8 s.NextLocalId/9 (/14 # Symbol/22 # Name/29 t.1/31 e.2/35 )/15 e.Tail/37 >/1
        context[33] = context[23];
        context[34] = context[24];
        context[35] = context[25];
        context[36] = context[26];
        context[37] = context[27];
        context[38] = context[28];
        if( ! refalrts::ident_term( identifiers[ident_Name], context[29] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_Symbol], context[22] ) )
          continue;
        // closed e.Locals$a as range 33
        // closed e.2 as range 35
        // closed e.Tail as range 37
        //DEBUG: t.1: 31
        //DEBUG: s.NextLocalId: 9
        //DEBUG: e.Locals$a: 33
        //DEBUG: e.2: 35
        //DEBUG: e.Tail: 37

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/39 Tile{ AsIs: # Symbol/22 AsIs: # Name/29 AsIs: t.1/31 } Tile{ AsIs: </0 Reuse: & GlobalASTStorage-AddAST=4\1*1/4 AsIs: (/7 AsIs: e.Locals$a/33 AsIs: )/8 AsIs: s.NextLocalId/9 HalfReuse: # Name/14 } Tile{ AsIs: e.2/35 } >/40 )/41 </42 & Map@17/43 (/44 e.Locals$a/33/45 )/47 Tile{ HalfReuse: s.NextLocalId9 /15 AsIs: e.Tail/37 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[39]);
        refalrts::alloc_close_call(vm, context[40]);
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[43], functions[efunc_gen_Map_Z17]);
        refalrts::alloc_open_bracket(vm, context[44]);
        refalrts::copy_evar(vm, context[45], context[46], context[33], context[34]);
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::update_name(context[4], functions[efunc_gen_GlobalASTStoragem_AddAST_A4L1D1]);
        refalrts::reinit_ident(context[14], identifiers[ident_Name]);
        refalrts::reinit_svar( context[15], context[9] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[42] );
        refalrts::link_brackets( context[44], context[47] );
        refalrts::link_brackets( context[39], context[41] );
        refalrts::push_stack( vm, context[40] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[15];
        res = refalrts::splice_evar( res, context[40], context[47] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[0], context[14] );
        res = refalrts::splice_evar( res, context[22], context[32] );
        res = refalrts::splice_elem( res, context[39] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@17/4 (/7 e.Locals$a/23 )/8 s.NextLocalId/9 (/14 # Brackets/22 e.0/25 )/15 e.Tail/27 >/1
        context[23] = context[16];
        context[24] = context[17];
        context[25] = context[20];
        context[26] = context[21];
        context[27] = context[18];
        context[28] = context[19];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[22] ) )
          continue;
        // closed e.Locals$a as range 23
        // closed e.0 as range 25
        // closed e.Tail as range 27
        //DEBUG: s.NextLocalId: 9
        //DEBUG: e.Locals$a: 23
        //DEBUG: e.0: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/14 AsIs: # Brackets/22 } Tile{ AsIs: </0 AsIs: & Map@17/4 AsIs: (/7 AsIs: e.Locals$a/23 AsIs: )/8 AsIs: s.NextLocalId/9 } Tile{ AsIs: e.0/25 } >/29 )/30 </31 & Map@17/32 (/33 e.Locals$a/23/34 )/36 Tile{ HalfReuse: s.NextLocalId9 /15 AsIs: e.Tail/27 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::alloc_close_bracket(vm, context[30]);
        refalrts::alloc_open_call(vm, context[31]);
        refalrts::alloc_name(vm, context[32], functions[efunc_gen_Map_Z17]);
        refalrts::alloc_open_bracket(vm, context[33]);
        refalrts::copy_evar(vm, context[34], context[35], context[23], context[24]);
        refalrts::alloc_close_bracket(vm, context[36]);
        refalrts::reinit_svar( context[15], context[9] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[31] );
        refalrts::link_brackets( context[33], context[36] );
        refalrts::link_brackets( context[14], context[30] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[15];
        res = refalrts::splice_evar( res, context[29], context[36] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[14], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@17/4 (/7 e.Locals$a/23 )/8 s.NextLocalId/9 (/14 # ADT-Brackets/22 t.0/29 (/33 e.3/31 )/34 e.2/25 )/15 e.Tail/27 >/1
        context[23] = context[16];
        context[24] = context[17];
        context[25] = context[20];
        context[26] = context[21];
        context[27] = context[18];
        context[28] = context[19];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[22] ) )
          continue;
        // closed e.Locals$a as range 23
        // closed e.Tail as range 27
        context[30] = refalrts::tvar_left( context[29], context[25], context[26] );
        if( ! context[30] )
          continue;
        context[31] = 0;
        context[32] = 0;
        context[33] = refalrts::brackets_left( context[31], context[32], context[25], context[26] );
        if( ! context[33] )
          continue;
        refalrts::bracket_pointers(context[33], context[34]);
        // closed e.3 as range 31
        // closed e.2 as range 25
        //DEBUG: s.NextLocalId: 9
        //DEBUG: e.Locals$a: 23
        //DEBUG: e.Tail: 27
        //DEBUG: t.0: 29
        //DEBUG: e.3: 31
        //DEBUG: e.2: 25

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/35 Tile{ AsIs: # ADT-Brackets/22 AsIs: t.0/29 AsIs: (/33 } Tile{ AsIs: </0 Reuse: & GlobalASTStorage-AddAST=4\1*1/4 AsIs: (/7 AsIs: e.Locals$a/23 AsIs: )/8 AsIs: s.NextLocalId/9 HalfReuse: # Name/14 } Tile{ AsIs: e.3/31 } >/36 Tile{ AsIs: )/34 } </37 & Map@17/38 (/39 e.Locals$a/23/40 )/42 s.NextLocalId/9/43 Tile{ AsIs: e.2/25 } >/44 )/45 </46 & Map@17/47 (/48 e.Locals$a/23/49 )/51 Tile{ HalfReuse: s.NextLocalId9 /15 AsIs: e.Tail/27 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[35]);
        refalrts::alloc_close_call(vm, context[36]);
        refalrts::alloc_open_call(vm, context[37]);
        refalrts::alloc_name(vm, context[38], functions[efunc_gen_Map_Z17]);
        refalrts::alloc_open_bracket(vm, context[39]);
        refalrts::copy_evar(vm, context[40], context[41], context[23], context[24]);
        refalrts::alloc_close_bracket(vm, context[42]);
        refalrts::copy_stvar(vm, context[43], context[9]);
        refalrts::alloc_close_call(vm, context[44]);
        refalrts::alloc_close_bracket(vm, context[45]);
        refalrts::alloc_open_call(vm, context[46]);
        refalrts::alloc_name(vm, context[47], functions[efunc_gen_Map_Z17]);
        refalrts::alloc_open_bracket(vm, context[48]);
        refalrts::copy_evar(vm, context[49], context[50], context[23], context[24]);
        refalrts::alloc_close_bracket(vm, context[51]);
        refalrts::update_name(context[4], functions[efunc_gen_GlobalASTStoragem_AddAST_A4L1D1]);
        refalrts::reinit_ident(context[14], identifiers[ident_Name]);
        refalrts::reinit_svar( context[15], context[9] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[46] );
        refalrts::link_brackets( context[48], context[51] );
        refalrts::link_brackets( context[35], context[45] );
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[37] );
        refalrts::link_brackets( context[39], context[42] );
        refalrts::link_brackets( context[33], context[34] );
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[15];
        res = refalrts::splice_evar( res, context[44], context[51] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[37], context[43] );
        res = refalrts::splice_elem( res, context[34] );
        res = refalrts::splice_elem( res, context[36] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[0], context[14] );
        res = refalrts::splice_evar( res, context[22], context[33] );
        res = refalrts::splice_elem( res, context[35] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@17/4 (/7 e.Locals$a/23 )/8 s.NextLocalId/9 (/14 # CallBrackets/22 e.0/25 )/15 e.Tail/27 >/1
        context[23] = context[16];
        context[24] = context[17];
        context[25] = context[20];
        context[26] = context[21];
        context[27] = context[18];
        context[28] = context[19];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[22] ) )
          continue;
        // closed e.Locals$a as range 23
        // closed e.0 as range 25
        // closed e.Tail as range 27
        //DEBUG: s.NextLocalId: 9
        //DEBUG: e.Locals$a: 23
        //DEBUG: e.0: 25
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/14 AsIs: # CallBrackets/22 } Tile{ AsIs: </0 AsIs: & Map@17/4 AsIs: (/7 AsIs: e.Locals$a/23 AsIs: )/8 AsIs: s.NextLocalId/9 } Tile{ AsIs: e.0/25 } >/29 )/30 </31 & Map@17/32 (/33 e.Locals$a/23/34 )/36 Tile{ HalfReuse: s.NextLocalId9 /15 AsIs: e.Tail/27 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::alloc_close_bracket(vm, context[30]);
        refalrts::alloc_open_call(vm, context[31]);
        refalrts::alloc_name(vm, context[32], functions[efunc_gen_Map_Z17]);
        refalrts::alloc_open_bracket(vm, context[33]);
        refalrts::copy_evar(vm, context[34], context[35], context[23], context[24]);
        refalrts::alloc_close_bracket(vm, context[36]);
        refalrts::reinit_svar( context[15], context[9] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[31] );
        refalrts::link_brackets( context[33], context[36] );
        refalrts::link_brackets( context[14], context[30] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[15];
        res = refalrts::splice_evar( res, context[29], context[36] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_evar( res, context[14], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@17/4 (/7 e.Locals$a/23 )/8 s.NextLocalId/9 (/14 # Closure/22 e.0/25 )/15 e.Tail/27 >/1
      context[23] = context[16];
      context[24] = context[17];
      context[25] = context[20];
      context[26] = context[21];
      context[27] = context[18];
      context[28] = context[19];
      if( ! refalrts::ident_term( identifiers[ident_Closure], context[22] ) )
        continue;
      // closed e.Locals$a as range 23
      // closed e.0 as range 25
      // closed e.Tail as range 27
      //DEBUG: s.NextLocalId: 9
      //DEBUG: e.Locals$a: 23
      //DEBUG: e.0: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/29 # Closure/30 </31 & PatchAST-Body@2/32 (/33 e.Locals$a/23/34 Tile{ HalfReuse: )/14 HalfReuse: s.NextLocalId9 /22 AsIs: e.0/25 HalfReuse: >/15 } )/36 Tile{ AsIs: </0 AsIs: & Map@17/4 AsIs: (/7 AsIs: e.Locals$a/23 AsIs: )/8 AsIs: s.NextLocalId/9 } Tile{ AsIs: e.Tail/27 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_ident(vm, context[30], identifiers[ident_Closure]);
      refalrts::alloc_open_call(vm, context[31]);
      refalrts::alloc_name(vm, context[32], functions[efunc_gen_PatchASTm_Body_Z2]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::copy_evar(vm, context[34], context[35], context[23], context[24]);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::reinit_close_bracket(context[14]);
      refalrts::reinit_svar( context[22], context[9] );
      refalrts::reinit_close_call(context[15]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[29], context[36] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[31] );
      refalrts::link_brackets( context[33], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[29], context[33] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@17/4 (/7 e.Locals$a/16 )/8 s.NextLocalId/9 t.Next/14 e.Tail/18 >/1
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    // closed e.Locals$a as range 16
    // closed e.Tail as range 18
    //DEBUG: t.Next: 14
    //DEBUG: s.NextLocalId: 9
    //DEBUG: e.Locals$a: 16
    //DEBUG: e.Tail: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next/14 } Tile{ AsIs: </0 AsIs: & Map@17/4 AsIs: (/7 AsIs: e.Locals$a/16 AsIs: )/8 AsIs: s.NextLocalId/9 } Tile{ AsIs: e.Tail/18 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@17/4 (/7 e.Locals$a/10 )/8 s.NextLocalId/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Locals$a as range 10
    //DEBUG: s.NextLocalId: 9
    //DEBUG: e.Locals$a: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@17/4 (/7 e.Locals$a/10 )/8 s.NextLocalId/9 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@17/4 (/7 e.Locals$a/5 )/8 s.NextLocalId/9 e.items/2 >/1
  // closed e.Locals$a as range 5
  // closed e.items as range 2
  //DEBUG: s.NextLocalId: 9
  //DEBUG: e.Locals$a: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </10 & Map@0/11 [*]/12 & PatchAST-Expr\1@0/13 Tile{ HalfReuse: [*]/0 Reuse: & GlobalASTStorage-AddAST=4\1@0/4 AsIs: (/7 AsIs: e.Locals$a/5 AsIs: )/8 AsIs: s.NextLocalId/9 } {*}/14 {*}/15 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_closure_head(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_PatchASTm_Expr_L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[14], context[0]);
  refalrts::alloc_unwrapped_closure(vm, context[15], context[12]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_GlobalASTStoragem_AddAST_A4L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[0], context[9] );
  res = refalrts::splice_evar( res, context[10], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[14] );
  refalrts::wrap_closure( context[15] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z17("Map@17", COOKIE1_, COOKIE2_, func_gen_Map_Z17);


static refalrts::FnResult func_gen_LoadAST_S1A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & LoadAST$1=2@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & LoadAST$1=2@1/4 t.new1/5 s.new2/7 (/10 e.new3/8 )/11 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  // closed e.new3 as range 8
  // closed e.new4 as range 2
  do {
    // </0 & LoadAST$1=2@1/4 t.Config0/5 s.Mode0/7 (/10 e.BaseName/12 )/11 e.Tokens/14 >/1
    context[12] = context[8];
    context[13] = context[9];
    context[14] = context[2];
    context[15] = context[3];
    // closed e.BaseName as range 12
    // closed e.Tokens as range 14
    //DEBUG: t.Config0: 5
    //DEBUG: s.Mode0: 7
    //DEBUG: e.BaseName: 12
    //DEBUG: e.Tokens: 14

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & LoadAST$1=3/4 AsIs: t.Config0/5 AsIs: s.Mode0/7 HalfReuse: </10 } & FilterLexerMessages/16 </17 & EL-Create/18 Tile{ AsIs: e.BaseName/12 }"-decompiled.ref"/19 Tile{ HalfReuse: >/11 AsIs: e.Tokens/14 AsIs: >/1 } >/21 Tile{ ]] }
    refalrts::alloc_name(vm, context[16], functions[efunc_FilterLexerMessages]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_ELm_Create]);
    refalrts::alloc_chars(vm, context[19], context[20], "-decompiled.ref", 15);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_LoadAST_S1A3]);
    refalrts::reinit_open_call(context[10]);
    refalrts::reinit_close_call(context[11]);
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[11], context[1] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[16], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & LoadAST$1=2@1/4 t.Config0/5 s.Mode0/7 (/10 e.BaseName/8 )/11 e.dyn/2 >/1
  // closed e.BaseName as range 8
  // closed e.dyn as range 2
  //DEBUG: t.Config0: 5
  //DEBUG: s.Mode0: 7
  //DEBUG: e.BaseName: 8
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & LoadAST$1=2@0/4 AsIs: t.Config0/5 AsIs: s.Mode0/7 AsIs: (/10 AsIs: e.BaseName/8 HalfReuse: '-'/11 }"decompiled.ref"/12 )/14 Tile{ AsIs: e.dyn/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_chars(vm, context[12], context[13], "decompiled.ref", 14);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_LoadAST_S1A2Z0]);
  refalrts::reinit_char(context[11], '-');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[10], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[12], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_LoadAST_S1A2Z1("LoadAST$1=2@1", COOKIE1_, COOKIE2_, func_gen_LoadAST_S1A2Z1);


static refalrts::FnResult func_gen_Map_Z18(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 61 elems
  refalrts::Iter context[61];
  refalrts::zeros( context, 61 );
  // </0 & Map@18/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@18/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Map@18/4 (/7 e.new5/9 )/8 t.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Map@18/4 (/7 e.UnitName/15 )/8 (/13 (/23 e.1/21 )/24 e.4/19 (/31 e.5/29 )/32 (/27 e.3/25 )/28 )/14 e.Tail/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_right( context[25], context[26], context[19], context[20] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_right( context[29], context[30], context[19], context[20] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      // closed e.UnitName as range 15
      // closed e.1 as range 21
      // closed e.4 as range 19
      // closed e.5 as range 29
      // closed e.3 as range 25
      // closed e.Tail as range 17
      //DEBUG: e.UnitName: 15
      //DEBUG: e.1: 21
      //DEBUG: e.4: 19
      //DEBUG: e.5: 29
      //DEBUG: e.3: 25
      //DEBUG: e.Tail: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: (/23 } </33 & Map@16/34 (/35 e.UnitName/15/36 )/38 Tile{ AsIs: e.1/21 } >/39 Tile{ AsIs: )/32 } </40 & Map@22/41 (/42 e.UnitName/15/43 Tile{ AsIs: )/24 AsIs: e.4/19 HalfReuse: >/31 } (/45 </46 & Map@16/47 (/48 e.UnitName/15/49 )/51 Tile{ AsIs: e.5/29 } >/52 )/53 (/54 </55 & Map@23/56 (/57 e.UnitName/15/58 Tile{ HalfReuse: )/27 AsIs: e.3/25 HalfReuse: >/28 AsIs: )/14 } )/60 Tile{ AsIs: </0 AsIs: & Map@18/4 AsIs: (/7 AsIs: e.UnitName/15 AsIs: )/8 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_gen_Map_Z16]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::copy_evar(vm, context[36], context[37], context[15], context[16]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_close_call(vm, context[39]);
      refalrts::alloc_open_call(vm, context[40]);
      refalrts::alloc_name(vm, context[41], functions[efunc_gen_Map_Z22]);
      refalrts::alloc_open_bracket(vm, context[42]);
      refalrts::copy_evar(vm, context[43], context[44], context[15], context[16]);
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::alloc_open_call(vm, context[46]);
      refalrts::alloc_name(vm, context[47], functions[efunc_gen_Map_Z16]);
      refalrts::alloc_open_bracket(vm, context[48]);
      refalrts::copy_evar(vm, context[49], context[50], context[15], context[16]);
      refalrts::alloc_close_bracket(vm, context[51]);
      refalrts::alloc_close_call(vm, context[52]);
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::alloc_open_bracket(vm, context[54]);
      refalrts::alloc_open_call(vm, context[55]);
      refalrts::alloc_name(vm, context[56], functions[efunc_gen_Map_Z23]);
      refalrts::alloc_open_bracket(vm, context[57]);
      refalrts::copy_evar(vm, context[58], context[59], context[15], context[16]);
      refalrts::alloc_close_bracket(vm, context[60]);
      refalrts::reinit_close_call(context[31]);
      refalrts::reinit_close_bracket(context[27]);
      refalrts::reinit_close_call(context[28]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[13], context[60] );
      refalrts::link_brackets( context[54], context[14] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[55] );
      refalrts::link_brackets( context[57], context[27] );
      refalrts::link_brackets( context[45], context[53] );
      refalrts::push_stack( vm, context[52] );
      refalrts::push_stack( vm, context[46] );
      refalrts::link_brackets( context[48], context[51] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[40] );
      refalrts::link_brackets( context[42], context[24] );
      refalrts::link_brackets( context[23], context[32] );
      refalrts::push_stack( vm, context[39] );
      refalrts::push_stack( vm, context[33] );
      refalrts::link_brackets( context[35], context[38] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_elem( res, context[60] );
      res = refalrts::splice_evar( res, context[27], context[14] );
      res = refalrts::splice_evar( res, context[58], context[59] );
      res = refalrts::splice_evar( res, context[52], context[57] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[45], context[51] );
      res = refalrts::splice_evar( res, context[24], context[31] );
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[40], context[42] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[39] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[33], context[38] );
      res = refalrts::splice_evar( res, context[13], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@18/4 (/7 e.UnitName/15 )/8 t.Next/13 e.Tail/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.UnitName as range 15
    // closed e.Tail as range 17
    //DEBUG: t.Next: 13
    //DEBUG: e.UnitName: 15
    //DEBUG: e.Tail: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </19 & PatchAST-Sentence@0/20 [*]/21 & PatchASTSrcPos=1\1@0/22 (/23 e.UnitName/15/24 )/26 {*}/27 Tile{ AsIs: t.Next/13 } >/28 Tile{ AsIs: </0 AsIs: & Map@18/4 AsIs: (/7 AsIs: e.UnitName/15 AsIs: )/8 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_PatchASTm_Sentence_Z0]);
    refalrts::alloc_closure_head(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_PatchASTSrcPos_A1L1Z0]);
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::copy_evar(vm, context[24], context[25], context[15], context[16]);
    refalrts::alloc_close_bracket(vm, context[26]);
    refalrts::alloc_unwrapped_closure(vm, context[27], context[21]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[23], context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[19], context[27] );
    refalrts::use( res );
    refalrts::wrap_closure( context[27] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@18/4 (/7 e.UnitName/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.UnitName as range 9
    //DEBUG: e.UnitName: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@18/4 (/7 e.UnitName/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@18/4 (/7 e.UnitName/5 )/8 e.items/2 >/1
  // closed e.UnitName as range 5
  // closed e.items as range 2
  //DEBUG: e.UnitName: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 (/11 & PatchAST-Sentence@0/12 Tile{ HalfReuse: [*]/0 Reuse: & PatchASTSrcPos=1\1@0/4 AsIs: (/7 AsIs: e.UnitName/5 AsIs: )/8 } {*}/13 )/14 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_PatchASTm_Sentence_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[13], context[0]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_PatchASTSrcPos_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[11], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  refalrts::wrap_closure( context[13] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z18("Map@18", COOKIE1_, COOKIE2_, func_gen_Map_Z18);


static refalrts::FnResult func_gen_Map_Z19(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 54 elems
  refalrts::Iter context[54];
  refalrts::zeros( context, 54 );
  // </0 & Map@19/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@19/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Map@19/4 (/7 e.new5/9 )/8 t.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Map@19/4 (/7 e.new10/15 )/8 (/13 (/23 e.new6/21 )/24 (/27 # Symbol/29 # Name/30 t.new7/31 e.new8/25 )/28 )/14 e.new9/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[19], context[20] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Symbol], context[25], context[26] );
      if( ! context[29] )
        continue;
      context[30] = refalrts::ident_left( identifiers[ident_Name], context[25], context[26] );
      if( ! context[30] )
        continue;
      if( ! refalrts::empty_seq( context[19], context[20] ) )
        continue;
      // closed e.new10 as range 15
      // closed e.new6 as range 21
      // closed e.new9 as range 17
      context[32] = refalrts::tvar_left( context[31], context[25], context[26] );
      if( ! context[32] )
        continue;
      // closed e.new8 as range 25
      do {
        // </0 & Map@19/4 (/7 e.new15/33 )/8 (/13 (/23 e.new11/35 )/24 (/27 # Symbol/29 # Name/30 s.new12/31 e.new13/37 )/28 )/14 e.new14/39 >/1
        context[33] = context[15];
        context[34] = context[16];
        context[35] = context[21];
        context[36] = context[22];
        context[37] = context[25];
        context[38] = context[26];
        context[39] = context[17];
        context[40] = context[18];
        if( ! refalrts::svar_term( context[31], context[31] ) )
          continue;
        // closed e.new15 as range 33
        // closed e.new11 as range 35
        // closed e.new13 as range 37
        // closed e.new14 as range 39
        do {
          // </0 & Map@19/4 (/7 e.UnitName/41 )/8 (/13 (/23 e.1/43 )/24 (/27 # Symbol/29 # Name/30 # NoPos/31 e.6/45 )/28 )/14 e.Tail/47 >/1
          context[41] = context[33];
          context[42] = context[34];
          context[43] = context[35];
          context[44] = context[36];
          context[45] = context[37];
          context[46] = context[38];
          context[47] = context[39];
          context[48] = context[40];
          if( ! refalrts::ident_term( identifiers[ident_NoPos], context[31] ) )
            continue;
          // closed e.UnitName as range 41
          // closed e.1 as range 43
          // closed e.6 as range 45
          // closed e.Tail as range 47
          //DEBUG: e.UnitName: 41
          //DEBUG: e.1: 43
          //DEBUG: e.6: 45
          //DEBUG: e.Tail: 47

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: (/23 AsIs: e.1/43 AsIs: )/24 AsIs: (/27 AsIs: # Symbol/29 AsIs: # Name/30 AsIs: # NoPos/31 AsIs: e.6/45 AsIs: )/28 AsIs: )/14 } Tile{ AsIs: </0 AsIs: & Map@19/4 AsIs: (/7 AsIs: e.UnitName/41 AsIs: )/8 } Tile{ AsIs: e.Tail/47 } Tile{ AsIs: >/1 ]] }
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[27], context[28] );
          refalrts::link_brackets( context[23], context[24] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[47], context[48] );
          res = refalrts::splice_evar( res, context[0], context[8] );
          res = refalrts::splice_evar( res, context[13], context[14] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@19/4 (/7 e.UnitName/41 )/8 (/13 (/23 e.1/43 )/24 (/27 # Symbol/29 # Name/30 s.LnNum/31 e.6/45 )/28 )/14 e.Tail/47 >/1
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = context[37];
        context[46] = context[38];
        context[47] = context[39];
        context[48] = context[40];
        // closed e.UnitName as range 41
        // closed e.1 as range 43
        // closed e.6 as range 45
        // closed e.Tail as range 47
        //DEBUG: s.LnNum: 31
        //DEBUG: e.UnitName: 41
        //DEBUG: e.1: 43
        //DEBUG: e.6: 45
        //DEBUG: e.Tail: 47

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: (/23 AsIs: e.1/43 AsIs: )/24 AsIs: (/27 AsIs: # Symbol/29 AsIs: # Name/30 } (/49 # FileLine/50 Tile{ AsIs: s.LnNum/31 } e.UnitName/41/51 )/53 Tile{ AsIs: e.6/45 } Tile{ AsIs: )/28 AsIs: )/14 } Tile{ AsIs: </0 AsIs: & Map@19/4 AsIs: (/7 AsIs: e.UnitName/41 AsIs: )/8 } Tile{ AsIs: e.Tail/47 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[49]);
        refalrts::alloc_ident(vm, context[50], identifiers[ident_FileLine]);
        refalrts::copy_evar(vm, context[51], context[52], context[41], context[42]);
        refalrts::alloc_close_bracket(vm, context[53]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[27], context[28] );
        refalrts::link_brackets( context[49], context[53] );
        refalrts::link_brackets( context[23], context[24] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[47], context[48] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[28], context[14] );
        res = refalrts::splice_evar( res, context[45], context[46] );
        res = refalrts::splice_elem( res, context[53] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_evar( res, context[49], context[50] );
        res = refalrts::splice_evar( res, context[13], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@19/4 (/7 e.UnitName/33 )/8 (/13 (/23 e.1/35 )/24 (/27 # Symbol/29 # Name/30 (/31 # RowCol/43 s.Row/44 s.Col/45 )/32 e.6/37 )/28 )/14 e.Tail/39 >/1
        context[33] = context[15];
        context[34] = context[16];
        context[35] = context[21];
        context[36] = context[22];
        context[37] = context[25];
        context[38] = context[26];
        context[39] = context[17];
        context[40] = context[18];
        context[41] = 0;
        context[42] = 0;
        if( ! refalrts::brackets_term( context[41], context[42], context[31] ) )
          continue;
        context[43] = refalrts::ident_left( identifiers[ident_RowCol], context[41], context[42] );
        if( ! context[43] )
          continue;
        // closed e.UnitName as range 33
        // closed e.1 as range 35
        // closed e.6 as range 37
        // closed e.Tail as range 39
        if( ! refalrts::svar_left( context[44], context[41], context[42] ) )
          continue;
        if( ! refalrts::svar_left( context[45], context[41], context[42] ) )
          continue;
        if( ! refalrts::empty_seq( context[41], context[42] ) )
          continue;
        //DEBUG: e.UnitName: 33
        //DEBUG: e.1: 35
        //DEBUG: e.6: 37
        //DEBUG: e.Tail: 39
        //DEBUG: s.Row: 44
        //DEBUG: s.Col: 45

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: (/23 AsIs: e.1/35 AsIs: )/24 AsIs: (/27 AsIs: # Symbol/29 AsIs: # Name/30 AsIs: (/31 Reuse: # FileRowCol/43 } (/46 Tile{ AsIs: s.Row/44 AsIs: s.Col/45 } )/47 e.UnitName/33/48 Tile{ AsIs: )/32 AsIs: e.6/37 AsIs: )/28 AsIs: )/14 } Tile{ AsIs: </0 AsIs: & Map@19/4 AsIs: (/7 AsIs: e.UnitName/33 AsIs: )/8 } Tile{ AsIs: e.Tail/39 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[46]);
        refalrts::alloc_close_bracket(vm, context[47]);
        refalrts::copy_evar(vm, context[48], context[49], context[33], context[34]);
        refalrts::update_ident(context[43], identifiers[ident_FileRowCol]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[27], context[28] );
        refalrts::link_brackets( context[31], context[32] );
        refalrts::link_brackets( context[46], context[47] );
        refalrts::link_brackets( context[23], context[24] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[39], context[40] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[32], context[14] );
        res = refalrts::splice_evar( res, context[48], context[49] );
        res = refalrts::splice_elem( res, context[47] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_evar( res, context[13], context[43] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@19/4 (/7 e.UnitName/33 )/8 (/13 (/23 e.1/35 )/24 (/27 # Symbol/29 # Name/30 t.3/31 e.6/37 )/28 )/14 e.Tail/39 >/1
      context[33] = context[15];
      context[34] = context[16];
      context[35] = context[21];
      context[36] = context[22];
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[17];
      context[40] = context[18];
      // closed e.UnitName as range 33
      // closed e.1 as range 35
      // closed e.6 as range 37
      // closed e.Tail as range 39
      //DEBUG: t.3: 31
      //DEBUG: e.UnitName: 33
      //DEBUG: e.1: 35
      //DEBUG: e.6: 37
      //DEBUG: e.Tail: 39

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </29 HalfReuse: & PatchAST-Body$3\1=1@1/30 } Tile{ AsIs: (/23 AsIs: e.1/35 AsIs: )/24 AsIs: (/27 } e.UnitName/33/41 Tile{ AsIs: )/28 } (/43 Tile{ AsIs: e.6/37 } )/44 Tile{ AsIs: </0 Reuse: & PatchASTSrcPos=1\1*4/4 AsIs: (/7 AsIs: e.UnitName/33 AsIs: )/8 HalfReuse: # SrcPos/13 } Tile{ AsIs: t.3/31 } >/45 >/46 </47 & Map@19/48 (/49 e.UnitName/33/50 Tile{ AsIs: )/14 AsIs: e.Tail/39 AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[41], context[42], context[33], context[34]);
      refalrts::alloc_open_bracket(vm, context[43]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::alloc_close_call(vm, context[45]);
      refalrts::alloc_close_call(vm, context[46]);
      refalrts::alloc_open_call(vm, context[47]);
      refalrts::alloc_name(vm, context[48], functions[efunc_gen_Map_Z19]);
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::copy_evar(vm, context[50], context[51], context[33], context[34]);
      refalrts::reinit_open_call(context[29]);
      refalrts::reinit_name(context[30], functions[efunc_gen_PatchASTm_Body_S3L1A1Z1]);
      refalrts::update_name(context[4], functions[efunc_gen_PatchASTSrcPos_A1L1D4]);
      refalrts::reinit_ident(context[13], identifiers[ident_SrcPos]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[47] );
      refalrts::link_brackets( context[49], context[14] );
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[43], context[44] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[50], context[51] );
      res = refalrts::splice_evar( res, context[45], context[49] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[0], context[13] );
      res = refalrts::splice_elem( res, context[44] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[43] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[23], context[27] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@19/4 (/7 e.UnitName/15 )/8 t.Next/13 e.Tail/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.UnitName as range 15
    // closed e.Tail as range 17
    //DEBUG: t.Next: 13
    //DEBUG: e.UnitName: 15
    //DEBUG: e.Tail: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </19 & PatchAST-Body$3\1@0/20 [*]/21 & PatchASTSrcPos=1\1@0/22 (/23 e.UnitName/15/24 )/26 {*}/27 Tile{ AsIs: t.Next/13 } >/28 Tile{ AsIs: </0 AsIs: & Map@19/4 AsIs: (/7 AsIs: e.UnitName/15 AsIs: )/8 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_PatchASTm_Body_S3L1Z0]);
    refalrts::alloc_closure_head(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_PatchASTSrcPos_A1L1Z0]);
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::copy_evar(vm, context[24], context[25], context[15], context[16]);
    refalrts::alloc_close_bracket(vm, context[26]);
    refalrts::alloc_unwrapped_closure(vm, context[27], context[21]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[23], context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[19], context[27] );
    refalrts::use( res );
    refalrts::wrap_closure( context[27] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@19/4 (/7 e.UnitName/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.UnitName as range 9
    //DEBUG: e.UnitName: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@19/4 (/7 e.UnitName/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@19/4 (/7 e.UnitName/5 )/8 e.items/2 >/1
  // closed e.UnitName as range 5
  // closed e.items as range 2
  //DEBUG: e.UnitName: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 [*]/11 & PatchAST-Body$3\1@0/12 Tile{ HalfReuse: [*]/0 Reuse: & PatchASTSrcPos=1\1@0/4 AsIs: (/7 AsIs: e.UnitName/5 AsIs: )/8 } {*}/13 {*}/14 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_PatchASTm_Body_S3L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[13], context[0]);
  refalrts::alloc_unwrapped_closure(vm, context[14], context[11]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_PatchASTSrcPos_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  refalrts::wrap_closure( context[13] );
  refalrts::wrap_closure( context[14] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z19("Map@19", COOKIE1_, COOKIE2_, func_gen_Map_Z19);


static refalrts::FnResult func_gen_PatchASTm_Expr_L1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  // </0 & PatchAST-Expr\1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PatchAST-Expr\1@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & PatchAST-Expr\1@1/4 (/7 e.new4/9 )/8 t.new3/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new4 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    do {
      // </0 & PatchAST-Expr\1@1/4 (/7 e.new7/15 )/8 (/13 s.new5/19 e.new6/17 )/14 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = 0;
      context[18] = 0;
      if( ! refalrts::brackets_term( context[17], context[18], context[13] ) )
        continue;
      // closed e.new7 as range 15
      if( ! refalrts::svar_left( context[19], context[17], context[18] ) )
        continue;
      // closed e.new6 as range 17
      do {
        // </0 & PatchAST-Expr\1@1/4 (/7 e.new12/20 )/8 (/13 s.new8/19 t.new9/24 t.new10/26 e.new11/22 )/14 >/1
        context[20] = context[15];
        context[21] = context[16];
        context[22] = context[17];
        context[23] = context[18];
        // closed e.new12 as range 20
        context[25] = refalrts::tvar_left( context[24], context[22], context[23] );
        if( ! context[25] )
          continue;
        context[27] = refalrts::tvar_left( context[26], context[22], context[23] );
        if( ! context[27] )
          continue;
        // closed e.new11 as range 22
        do {
          // </0 & PatchAST-Expr\1@1/4 (/7 e.new17/28 )/8 (/13 s.new13/19 t.new14/24 s.new15/26 e.new16/30 )/14 >/1
          context[28] = context[20];
          context[29] = context[21];
          context[30] = context[22];
          context[31] = context[23];
          if( ! refalrts::svar_term( context[26], context[26] ) )
            continue;
          // closed e.new17 as range 28
          // closed e.new16 as range 30
          do {
            // </0 & PatchAST-Expr\1@1/4 (/7 e.new21/32 )/8 (/13 # Var/19 t.new18/24 s.new19/26 e.new20/34 )/14 >/1
            context[32] = context[28];
            context[33] = context[29];
            context[34] = context[30];
            context[35] = context[31];
            if( ! refalrts::ident_term( identifiers[ident_Var], context[19] ) )
              continue;
            // closed e.new21 as range 32
            // closed e.new20 as range 34
            do {
              // </0 & PatchAST-Expr\1@1/4 (/7 e.new25/36 )/8 (/13 # Var/19 s.new22/24 s.new23/26 e.new24/38 )/14 >/1
              context[36] = context[32];
              context[37] = context[33];
              context[38] = context[34];
              context[39] = context[35];
              if( ! refalrts::svar_term( context[24], context[24] ) )
                continue;
              // closed e.new25 as range 36
              // closed e.new24 as range 38
              do {
                // </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/40 )/8 (/13 # Var/19 # NoPos/24 s.Mode/26 e.Index/42 )/14 >/1
                context[40] = context[36];
                context[41] = context[37];
                context[42] = context[38];
                context[43] = context[39];
                if( ! refalrts::ident_term( identifiers[ident_NoPos], context[24] ) )
                  continue;
                // closed e.UnitName as range 40
                // closed e.Index as range 42
                //DEBUG: s.Mode: 26
                //DEBUG: e.UnitName: 40
                //DEBUG: e.Index: 42

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/40 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
                //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # Var/19 AsIs: # NoPos/24 AsIs: s.Mode/26 AsIs: e.Index/42 AsIs: )/14 } Tile{ ]] }
                refalrts::link_brackets( context[13], context[14] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[13], context[14] );
                refalrts::splice_to_freelist_open( vm, trash_prev, res );
                return refalrts::cSuccess;
              } while ( 0 );
              refalrts::stop_sentence(vm);

              // </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/40 )/8 (/13 # Var/19 s.LnNum/24 s.Mode/26 e.Index/42 )/14 >/1
              context[40] = context[36];
              context[41] = context[37];
              context[42] = context[38];
              context[43] = context[39];
              // closed e.UnitName as range 40
              // closed e.Index as range 42
              //DEBUG: s.LnNum: 24
              //DEBUG: s.Mode: 26
              //DEBUG: e.UnitName: 40
              //DEBUG: e.Index: 42

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum/24 s.Mode/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } Tile{ HalfReuse: (/14 } Tile{ AsIs: # Var/19 } Tile{ HalfReuse: (/0 HalfReuse: # FileLine/4 HalfReuse: s.LnNum24 /7 AsIs: e.UnitName/40 AsIs: )/8 HalfReuse: s.Mode26 /13 } Tile{ AsIs: e.Index/42 } Tile{ HalfReuse: )/1 ]] }
              refalrts::reinit_open_bracket(context[14]);
              refalrts::reinit_open_bracket(context[0]);
              refalrts::reinit_ident(context[4], identifiers[ident_FileLine]);
              refalrts::reinit_svar( context[7], context[24] );
              refalrts::reinit_svar( context[13], context[26] );
              refalrts::reinit_close_bracket(context[1]);
              refalrts::link_brackets( context[14], context[1] );
              refalrts::link_brackets( context[0], context[8] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[1];
              res = refalrts::splice_evar( res, context[42], context[43] );
              res = refalrts::splice_evar( res, context[0], context[13] );
              res = refalrts::splice_elem( res, context[19] );
              res = refalrts::splice_elem( res, context[14] );
              refalrts::splice_to_freelist_open( vm, trash_prev, res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/36 )/8 (/13 # Var/19 (/24 # RowCol/42 s.Row/43 s.Col/44 )/25 s.Mode/26 e.Index/38 )/14 >/1
              context[36] = context[32];
              context[37] = context[33];
              context[38] = context[34];
              context[39] = context[35];
              context[40] = 0;
              context[41] = 0;
              if( ! refalrts::brackets_term( context[40], context[41], context[24] ) )
                continue;
              context[42] = refalrts::ident_left( identifiers[ident_RowCol], context[40], context[41] );
              if( ! context[42] )
                continue;
              // closed e.UnitName as range 36
              // closed e.Index as range 38
              if( ! refalrts::svar_left( context[43], context[40], context[41] ) )
                continue;
              if( ! refalrts::svar_left( context[44], context[40], context[41] ) )
                continue;
              if( ! refalrts::empty_seq( context[40], context[41] ) )
                continue;
              //DEBUG: s.Mode: 26
              //DEBUG: e.UnitName: 36
              //DEBUG: e.Index: 38
              //DEBUG: s.Row: 43
              //DEBUG: s.Col: 44

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} </0 & PatchAST-Expr\1@1/4 (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } Tile{ HalfReuse: (/8 HalfReuse: # Var/13 HalfReuse: (/19 HalfReuse: # FileRowCol/24 HalfReuse: (/42 AsIs: s.Row/43 AsIs: s.Col/44 AsIs: )/25 } Tile{ AsIs: e.UnitName/36 } Tile{ HalfReuse: )/1 } Tile{ AsIs: s.Mode/26 AsIs: e.Index/38 AsIs: )/14 } Tile{ ]] }
              refalrts::reinit_open_bracket(context[8]);
              refalrts::reinit_ident(context[13], identifiers[ident_Var]);
              refalrts::reinit_open_bracket(context[19]);
              refalrts::reinit_ident(context[24], identifiers[ident_FileRowCol]);
              refalrts::reinit_open_bracket(context[42]);
              refalrts::reinit_close_bracket(context[1]);
              refalrts::link_brackets( context[8], context[14] );
              refalrts::link_brackets( context[19], context[1] );
              refalrts::link_brackets( context[42], context[25] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[26], context[14] );
              res = refalrts::splice_elem( res, context[1] );
              res = refalrts::splice_evar( res, context[36], context[37] );
              res = refalrts::splice_evar( res, context[8], context[25] );
              refalrts::splice_to_freelist_open( vm, trash_prev, res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/36 )/8 (/13 # Var/19 t.SrcPos/24 s.Mode/26 e.Index/38 )/14 >/1
            context[36] = context[32];
            context[37] = context[33];
            context[38] = context[34];
            context[39] = context[35];
            // closed e.UnitName as range 36
            // closed e.Index as range 38
            //DEBUG: t.SrcPos: 24
            //DEBUG: s.Mode: 26
            //DEBUG: e.UnitName: 36
            //DEBUG: e.Index: 38

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } (/40 Tile{ AsIs: # Var/19 } Tile{ AsIs: </0 Reuse: & PatchASTSrcPos=1\1*4/4 AsIs: (/7 AsIs: e.UnitName/36 AsIs: )/8 HalfReuse: # SrcPos/13 } Tile{ AsIs: t.SrcPos/24 } Tile{ AsIs: >/1 } Tile{ AsIs: s.Mode/26 AsIs: e.Index/38 AsIs: )/14 } Tile{ ]] }
            refalrts::alloc_open_bracket(vm, context[40]);
            refalrts::update_name(context[4], functions[efunc_gen_PatchASTSrcPos_A1L1D4]);
            refalrts::reinit_ident(context[13], identifiers[ident_SrcPos]);
            refalrts::link_brackets( context[40], context[14] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[26], context[14] );
            res = refalrts::splice_elem( res, context[1] );
            res = refalrts::splice_evar( res, context[24], context[25] );
            res = refalrts::splice_evar( res, context[0], context[13] );
            res = refalrts::splice_elem( res, context[19] );
            res = refalrts::splice_elem( res, context[40] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & PatchAST-Expr\1@1/4 (/7 e.new21/32 )/8 (/13 # NewVar/19 t.new18/24 s.new19/26 e.new20/34 )/14 >/1
            context[32] = context[28];
            context[33] = context[29];
            context[34] = context[30];
            context[35] = context[31];
            if( ! refalrts::ident_term( identifiers[ident_NewVar], context[19] ) )
              continue;
            // closed e.new21 as range 32
            // closed e.new20 as range 34
            do {
              // </0 & PatchAST-Expr\1@1/4 (/7 e.new25/36 )/8 (/13 # NewVar/19 s.new22/24 s.new23/26 e.new24/38 )/14 >/1
              context[36] = context[32];
              context[37] = context[33];
              context[38] = context[34];
              context[39] = context[35];
              if( ! refalrts::svar_term( context[24], context[24] ) )
                continue;
              // closed e.new25 as range 36
              // closed e.new24 as range 38
              do {
                // </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/40 )/8 (/13 # NewVar/19 # NoPos/24 s.Mode/26 e.Index/42 )/14 >/1
                context[40] = context[36];
                context[41] = context[37];
                context[42] = context[38];
                context[43] = context[39];
                if( ! refalrts::ident_term( identifiers[ident_NoPos], context[24] ) )
                  continue;
                // closed e.UnitName as range 40
                // closed e.Index as range 42
                //DEBUG: s.Mode: 26
                //DEBUG: e.UnitName: 40
                //DEBUG: e.Index: 42

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/40 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
                //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # NewVar/19 AsIs: # NoPos/24 AsIs: s.Mode/26 AsIs: e.Index/42 AsIs: )/14 } Tile{ ]] }
                refalrts::link_brackets( context[13], context[14] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[13], context[14] );
                refalrts::splice_to_freelist_open( vm, trash_prev, res );
                return refalrts::cSuccess;
              } while ( 0 );
              refalrts::stop_sentence(vm);

              // </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/40 )/8 (/13 # NewVar/19 s.LnNum/24 s.Mode/26 e.Index/42 )/14 >/1
              context[40] = context[36];
              context[41] = context[37];
              context[42] = context[38];
              context[43] = context[39];
              // closed e.UnitName as range 40
              // closed e.Index as range 42
              //DEBUG: s.LnNum: 24
              //DEBUG: s.Mode: 26
              //DEBUG: e.UnitName: 40
              //DEBUG: e.Index: 42

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum/24 s.Mode/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } Tile{ HalfReuse: (/14 } Tile{ AsIs: # NewVar/19 } Tile{ HalfReuse: (/0 HalfReuse: # FileLine/4 HalfReuse: s.LnNum24 /7 AsIs: e.UnitName/40 AsIs: )/8 HalfReuse: s.Mode26 /13 } Tile{ AsIs: e.Index/42 } Tile{ HalfReuse: )/1 ]] }
              refalrts::reinit_open_bracket(context[14]);
              refalrts::reinit_open_bracket(context[0]);
              refalrts::reinit_ident(context[4], identifiers[ident_FileLine]);
              refalrts::reinit_svar( context[7], context[24] );
              refalrts::reinit_svar( context[13], context[26] );
              refalrts::reinit_close_bracket(context[1]);
              refalrts::link_brackets( context[14], context[1] );
              refalrts::link_brackets( context[0], context[8] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[1];
              res = refalrts::splice_evar( res, context[42], context[43] );
              res = refalrts::splice_evar( res, context[0], context[13] );
              res = refalrts::splice_elem( res, context[19] );
              res = refalrts::splice_elem( res, context[14] );
              refalrts::splice_to_freelist_open( vm, trash_prev, res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/36 )/8 (/13 # NewVar/19 (/24 # RowCol/42 s.Row/43 s.Col/44 )/25 s.Mode/26 e.Index/38 )/14 >/1
              context[36] = context[32];
              context[37] = context[33];
              context[38] = context[34];
              context[39] = context[35];
              context[40] = 0;
              context[41] = 0;
              if( ! refalrts::brackets_term( context[40], context[41], context[24] ) )
                continue;
              context[42] = refalrts::ident_left( identifiers[ident_RowCol], context[40], context[41] );
              if( ! context[42] )
                continue;
              // closed e.UnitName as range 36
              // closed e.Index as range 38
              if( ! refalrts::svar_left( context[43], context[40], context[41] ) )
                continue;
              if( ! refalrts::svar_left( context[44], context[40], context[41] ) )
                continue;
              if( ! refalrts::empty_seq( context[40], context[41] ) )
                continue;
              //DEBUG: s.Mode: 26
              //DEBUG: e.UnitName: 36
              //DEBUG: e.Index: 38
              //DEBUG: s.Row: 43
              //DEBUG: s.Col: 44

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} </0 & PatchAST-Expr\1@1/4 (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } Tile{ HalfReuse: (/8 HalfReuse: # NewVar/13 HalfReuse: (/19 HalfReuse: # FileRowCol/24 HalfReuse: (/42 AsIs: s.Row/43 AsIs: s.Col/44 AsIs: )/25 } Tile{ AsIs: e.UnitName/36 } Tile{ HalfReuse: )/1 } Tile{ AsIs: s.Mode/26 AsIs: e.Index/38 AsIs: )/14 } Tile{ ]] }
              refalrts::reinit_open_bracket(context[8]);
              refalrts::reinit_ident(context[13], identifiers[ident_NewVar]);
              refalrts::reinit_open_bracket(context[19]);
              refalrts::reinit_ident(context[24], identifiers[ident_FileRowCol]);
              refalrts::reinit_open_bracket(context[42]);
              refalrts::reinit_close_bracket(context[1]);
              refalrts::link_brackets( context[8], context[14] );
              refalrts::link_brackets( context[19], context[1] );
              refalrts::link_brackets( context[42], context[25] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[26], context[14] );
              res = refalrts::splice_elem( res, context[1] );
              res = refalrts::splice_evar( res, context[36], context[37] );
              res = refalrts::splice_evar( res, context[8], context[25] );
              refalrts::splice_to_freelist_open( vm, trash_prev, res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/36 )/8 (/13 # NewVar/19 t.SrcPos/24 s.Mode/26 e.Index/38 )/14 >/1
            context[36] = context[32];
            context[37] = context[33];
            context[38] = context[34];
            context[39] = context[35];
            // closed e.UnitName as range 36
            // closed e.Index as range 38
            //DEBUG: t.SrcPos: 24
            //DEBUG: s.Mode: 26
            //DEBUG: e.UnitName: 36
            //DEBUG: e.Index: 38

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } (/40 Tile{ AsIs: # NewVar/19 } Tile{ AsIs: </0 Reuse: & PatchASTSrcPos=1\1*4/4 AsIs: (/7 AsIs: e.UnitName/36 AsIs: )/8 HalfReuse: # SrcPos/13 } Tile{ AsIs: t.SrcPos/24 } Tile{ AsIs: >/1 } Tile{ AsIs: s.Mode/26 AsIs: e.Index/38 AsIs: )/14 } Tile{ ]] }
            refalrts::alloc_open_bracket(vm, context[40]);
            refalrts::update_name(context[4], functions[efunc_gen_PatchASTSrcPos_A1L1D4]);
            refalrts::reinit_ident(context[13], identifiers[ident_SrcPos]);
            refalrts::link_brackets( context[40], context[14] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[26], context[14] );
            res = refalrts::splice_elem( res, context[1] );
            res = refalrts::splice_evar( res, context[24], context[25] );
            res = refalrts::splice_evar( res, context[0], context[13] );
            res = refalrts::splice_elem( res, context[19] );
            res = refalrts::splice_elem( res, context[40] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & PatchAST-Expr\1@1/4 (/7 e.new20/32 )/8 (/13 # Symbol/19 # Name/24 s.new18/26 e.new19/34 )/14 >/1
          context[32] = context[28];
          context[33] = context[29];
          context[34] = context[30];
          context[35] = context[31];
          if( ! refalrts::ident_term( identifiers[ident_Name], context[24] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_Symbol], context[19] ) )
            continue;
          // closed e.new20 as range 32
          // closed e.new19 as range 34
          do {
            // </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/36 )/8 (/13 # Symbol/19 # Name/24 # NoPos/26 e.Name/38 )/14 >/1
            context[36] = context[32];
            context[37] = context[33];
            context[38] = context[34];
            context[39] = context[35];
            if( ! refalrts::ident_term( identifiers[ident_NoPos], context[26] ) )
              continue;
            // closed e.UnitName as range 36
            // closed e.Name as range 38
            //DEBUG: e.UnitName: 36
            //DEBUG: e.Name: 38

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/36 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # Symbol/19 AsIs: # Name/24 AsIs: # NoPos/26 AsIs: e.Name/38 AsIs: )/14 } Tile{ ]] }
            refalrts::link_brackets( context[13], context[14] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[13], context[14] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/36 )/8 (/13 # Symbol/19 # Name/24 s.LnNum/26 e.Name/38 )/14 >/1
          context[36] = context[32];
          context[37] = context[33];
          context[38] = context[34];
          context[39] = context[35];
          // closed e.UnitName as range 36
          // closed e.Name as range 38
          //DEBUG: s.LnNum: 26
          //DEBUG: e.UnitName: 36
          //DEBUG: e.Name: 38

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LnNum/26 {REMOVED TILE} )/14 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # Symbol/19 AsIs: # Name/24 } Tile{ HalfReuse: (/0 HalfReuse: # FileLine/4 HalfReuse: s.LnNum26 /7 AsIs: e.UnitName/36 AsIs: )/8 } Tile{ AsIs: e.Name/38 } Tile{ HalfReuse: )/1 ]] }
          refalrts::reinit_open_bracket(context[0]);
          refalrts::reinit_ident(context[4], identifiers[ident_FileLine]);
          refalrts::reinit_svar( context[7], context[26] );
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[13], context[1] );
          refalrts::link_brackets( context[0], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[38], context[39] );
          res = refalrts::splice_evar( res, context[0], context[8] );
          res = refalrts::splice_evar( res, context[13], context[24] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PatchAST-Expr\1@1/4 (/7 e.new15/28 )/8 (/13 # Symbol/19 # Name/24 t.new13/26 e.new14/30 )/14 >/1
        context[28] = context[20];
        context[29] = context[21];
        context[30] = context[22];
        context[31] = context[23];
        if( ! refalrts::ident_term( identifiers[ident_Name], context[24] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_Symbol], context[19] ) )
          continue;
        // closed e.new15 as range 28
        // closed e.new14 as range 30
        do {
          // </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/32 )/8 (/13 # Symbol/19 # Name/24 (/26 # RowCol/38 s.Row/39 s.Col/40 )/27 e.Name/34 )/14 >/1
          context[32] = context[28];
          context[33] = context[29];
          context[34] = context[30];
          context[35] = context[31];
          context[36] = 0;
          context[37] = 0;
          if( ! refalrts::brackets_term( context[36], context[37], context[26] ) )
            continue;
          context[38] = refalrts::ident_left( identifiers[ident_RowCol], context[36], context[37] );
          if( ! context[38] )
            continue;
          // closed e.UnitName as range 32
          // closed e.Name as range 34
          if( ! refalrts::svar_left( context[39], context[36], context[37] ) )
            continue;
          if( ! refalrts::svar_left( context[40], context[36], context[37] ) )
            continue;
          if( ! refalrts::empty_seq( context[36], context[37] ) )
            continue;
          //DEBUG: e.UnitName: 32
          //DEBUG: e.Name: 34
          //DEBUG: s.Row: 39
          //DEBUG: s.Col: 40

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & PatchAST-Expr\1@1/4 (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: (/8 HalfReuse: # Symbol/13 Reuse: # Name/19 HalfReuse: (/24 HalfReuse: # FileRowCol/26 HalfReuse: (/38 AsIs: s.Row/39 AsIs: s.Col/40 AsIs: )/27 } Tile{ AsIs: e.UnitName/32 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Name/34 } Tile{ HalfReuse: )/1 ]] }
          refalrts::reinit_open_bracket(context[8]);
          refalrts::reinit_ident(context[13], identifiers[ident_Symbol]);
          refalrts::update_ident(context[19], identifiers[ident_Name]);
          refalrts::reinit_open_bracket(context[24]);
          refalrts::reinit_ident(context[26], identifiers[ident_FileRowCol]);
          refalrts::reinit_open_bracket(context[38]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[8], context[1] );
          refalrts::link_brackets( context[24], context[14] );
          refalrts::link_brackets( context[38], context[27] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[34], context[35] );
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[8], context[27] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/32 )/8 (/13 # Symbol/19 # Name/24 t.SrcPos/26 e.Name/34 )/14 >/1
        context[32] = context[28];
        context[33] = context[29];
        context[34] = context[30];
        context[35] = context[31];
        // closed e.UnitName as range 32
        // closed e.Name as range 34
        //DEBUG: t.SrcPos: 26
        //DEBUG: e.UnitName: 32
        //DEBUG: e.Name: 34

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: (/14 } Tile{ AsIs: # Symbol/19 AsIs: # Name/24 } Tile{ AsIs: </0 Reuse: & PatchASTSrcPos=1\1*4/4 AsIs: (/7 AsIs: e.UnitName/32 AsIs: )/8 HalfReuse: # SrcPos/13 } Tile{ AsIs: t.SrcPos/26 } >/36 Tile{ AsIs: e.Name/34 } Tile{ HalfReuse: )/1 ]] }
        refalrts::alloc_close_call(vm, context[36]);
        refalrts::reinit_open_bracket(context[14]);
        refalrts::update_name(context[4], functions[efunc_gen_PatchASTSrcPos_A1L1D4]);
        refalrts::reinit_ident(context[13], identifiers[ident_SrcPos]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[14], context[1] );
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_elem( res, context[36] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[0], context[13] );
        res = refalrts::splice_evar( res, context[19], context[24] );
        res = refalrts::splice_elem( res, context[14] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/20 )/8 (/13 # Brackets/19 e.InBrackets/22 )/14 >/1
        context[20] = context[15];
        context[21] = context[16];
        context[22] = context[17];
        context[23] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[19] ) )
          continue;
        // closed e.UnitName as range 20
        // closed e.InBrackets as range 22
        //DEBUG: e.UnitName: 20
        //DEBUG: e.InBrackets: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # Brackets/19 } Tile{ AsIs: </0 Reuse: & Map@16/4 AsIs: (/7 AsIs: e.UnitName/20 AsIs: )/8 } Tile{ AsIs: e.InBrackets/22 } Tile{ HalfReuse: >/14 HalfReuse: )/1 ]] }
        refalrts::update_name(context[4], functions[efunc_gen_Map_Z16]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[13], context[1] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[13], context[19] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PatchAST-Expr\1@1/4 (/7 e.new11/20 )/8 (/13 # ADT-Brackets/19 t.new8/24 (/28 e.new9/26 )/29 e.new10/22 )/14 >/1
        context[20] = context[15];
        context[21] = context[16];
        context[22] = context[17];
        context[23] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[19] ) )
          continue;
        // closed e.new11 as range 20
        context[25] = refalrts::tvar_left( context[24], context[22], context[23] );
        if( ! context[25] )
          continue;
        context[26] = 0;
        context[27] = 0;
        context[28] = refalrts::brackets_left( context[26], context[27], context[22], context[23] );
        if( ! context[28] )
          continue;
        refalrts::bracket_pointers(context[28], context[29]);
        // closed e.new9 as range 26
        // closed e.new10 as range 22
        do {
          // </0 & PatchAST-Expr\1@1/4 (/7 e.new15/30 )/8 (/13 # ADT-Brackets/19 s.new12/24 (/28 e.new14/32 )/29 e.new13/34 )/14 >/1
          context[30] = context[20];
          context[31] = context[21];
          context[32] = context[26];
          context[33] = context[27];
          context[34] = context[22];
          context[35] = context[23];
          if( ! refalrts::svar_term( context[24], context[24] ) )
            continue;
          // closed e.new15 as range 30
          // closed e.new14 as range 32
          // closed e.new13 as range 34
          do {
            // </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/36 )/8 (/13 # ADT-Brackets/19 # NoPos/24 (/28 e.Name/38 )/29 e.InBrackets/40 )/14 >/1
            context[36] = context[30];
            context[37] = context[31];
            context[38] = context[32];
            context[39] = context[33];
            context[40] = context[34];
            context[41] = context[35];
            if( ! refalrts::ident_term( identifiers[ident_NoPos], context[24] ) )
              continue;
            // closed e.UnitName as range 36
            // closed e.Name as range 38
            // closed e.InBrackets as range 40
            //DEBUG: e.UnitName: 36
            //DEBUG: e.Name: 38
            //DEBUG: e.InBrackets: 40

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # ADT-Brackets/19 AsIs: # NoPos/24 AsIs: (/28 AsIs: e.Name/38 AsIs: )/29 } Tile{ AsIs: </0 Reuse: & Map@16/4 AsIs: (/7 AsIs: e.UnitName/36 AsIs: )/8 } Tile{ AsIs: e.InBrackets/40 } Tile{ HalfReuse: >/14 HalfReuse: )/1 ]] }
            refalrts::update_name(context[4], functions[efunc_gen_Map_Z16]);
            refalrts::reinit_close_call(context[14]);
            refalrts::reinit_close_bracket(context[1]);
            refalrts::link_brackets( context[13], context[1] );
            refalrts::push_stack( vm, context[14] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::link_brackets( context[28], context[29] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[14];
            res = refalrts::splice_evar( res, context[40], context[41] );
            res = refalrts::splice_evar( res, context[0], context[8] );
            res = refalrts::splice_evar( res, context[13], context[29] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/36 )/8 (/13 # ADT-Brackets/19 s.LnNum/24 (/28 e.Name/38 )/29 e.InBrackets/40 )/14 >/1
          context[36] = context[30];
          context[37] = context[31];
          context[38] = context[32];
          context[39] = context[33];
          context[40] = context[34];
          context[41] = context[35];
          // closed e.UnitName as range 36
          // closed e.Name as range 38
          // closed e.InBrackets as range 40
          //DEBUG: s.LnNum: 24
          //DEBUG: e.UnitName: 36
          //DEBUG: e.Name: 38
          //DEBUG: e.InBrackets: 40

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } (/42 # ADT-Brackets/43 Tile{ AsIs: (/13 Reuse: # FileLine/19 AsIs: s.LnNum/24 } e.UnitName/36/44 )/46 Tile{ AsIs: (/28 AsIs: e.Name/38 AsIs: )/29 } Tile{ AsIs: </0 Reuse: & Map@16/4 AsIs: (/7 AsIs: e.UnitName/36 AsIs: )/8 } Tile{ AsIs: e.InBrackets/40 } Tile{ HalfReuse: >/14 HalfReuse: )/1 ]] }
          refalrts::alloc_open_bracket(vm, context[42]);
          refalrts::alloc_ident(vm, context[43], identifiers[ident_ADTm_Brackets]);
          refalrts::copy_evar(vm, context[44], context[45], context[36], context[37]);
          refalrts::alloc_close_bracket(vm, context[46]);
          refalrts::update_ident(context[19], identifiers[ident_FileLine]);
          refalrts::update_name(context[4], functions[efunc_gen_Map_Z16]);
          refalrts::reinit_close_call(context[14]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[42], context[1] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[28], context[29] );
          refalrts::link_brackets( context[13], context[46] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[14];
          res = refalrts::splice_evar( res, context[40], context[41] );
          res = refalrts::splice_evar( res, context[0], context[8] );
          res = refalrts::splice_evar( res, context[28], context[29] );
          res = refalrts::splice_elem( res, context[46] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[13], context[24] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/30 )/8 (/13 # ADT-Brackets/19 (/24 # RowCol/38 s.Row/39 s.Col/40 )/25 (/28 e.Name/32 )/29 e.InBrackets/34 )/14 >/1
          context[30] = context[20];
          context[31] = context[21];
          context[32] = context[26];
          context[33] = context[27];
          context[34] = context[22];
          context[35] = context[23];
          context[36] = 0;
          context[37] = 0;
          if( ! refalrts::brackets_term( context[36], context[37], context[24] ) )
            continue;
          context[38] = refalrts::ident_left( identifiers[ident_RowCol], context[36], context[37] );
          if( ! context[38] )
            continue;
          // closed e.UnitName as range 30
          // closed e.Name as range 32
          // closed e.InBrackets as range 34
          if( ! refalrts::svar_left( context[39], context[36], context[37] ) )
            continue;
          if( ! refalrts::svar_left( context[40], context[36], context[37] ) )
            continue;
          if( ! refalrts::empty_seq( context[36], context[37] ) )
            continue;
          //DEBUG: e.UnitName: 30
          //DEBUG: e.Name: 32
          //DEBUG: e.InBrackets: 34
          //DEBUG: s.Row: 39
          //DEBUG: s.Col: 40

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: (/8 HalfReuse: # ADT-Brackets/13 HalfReuse: (/19 HalfReuse: # FileRowCol/24 HalfReuse: (/38 AsIs: s.Row/39 AsIs: s.Col/40 AsIs: )/25 } Tile{ AsIs: e.UnitName/30 } )/41 Tile{ AsIs: (/28 } Tile{ AsIs: e.Name/32 } )/42 Tile{ AsIs: </0 Reuse: & Map@16/4 AsIs: (/7 } e.UnitName/30/43 Tile{ AsIs: )/29 AsIs: e.InBrackets/34 HalfReuse: >/14 HalfReuse: )/1 ]] }
          refalrts::alloc_close_bracket(vm, context[41]);
          refalrts::alloc_close_bracket(vm, context[42]);
          refalrts::copy_evar(vm, context[43], context[44], context[30], context[31]);
          refalrts::reinit_open_bracket(context[8]);
          refalrts::reinit_ident(context[13], identifiers[ident_ADTm_Brackets]);
          refalrts::reinit_open_bracket(context[19]);
          refalrts::reinit_ident(context[24], identifiers[ident_FileRowCol]);
          refalrts::reinit_open_bracket(context[38]);
          refalrts::update_name(context[4], functions[efunc_gen_Map_Z16]);
          refalrts::reinit_close_call(context[14]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[8], context[1] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[29] );
          refalrts::link_brackets( context[28], context[42] );
          refalrts::link_brackets( context[19], context[41] );
          refalrts::link_brackets( context[38], context[25] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[29];
          res = refalrts::splice_evar( res, context[43], context[44] );
          res = refalrts::splice_evar( res, context[0], context[7] );
          res = refalrts::splice_elem( res, context[42] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_elem( res, context[28] );
          res = refalrts::splice_elem( res, context[41] );
          res = refalrts::splice_evar( res, context[30], context[31] );
          res = refalrts::splice_evar( res, context[8], context[25] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/30 )/8 (/13 # ADT-Brackets/19 t.SrcPos/24 (/28 e.Name/32 )/29 e.InBrackets/34 )/14 >/1
        context[30] = context[20];
        context[31] = context[21];
        context[32] = context[26];
        context[33] = context[27];
        context[34] = context[22];
        context[35] = context[23];
        // closed e.UnitName as range 30
        // closed e.Name as range 32
        // closed e.InBrackets as range 34
        //DEBUG: t.SrcPos: 24
        //DEBUG: e.UnitName: 30
        //DEBUG: e.Name: 32
        //DEBUG: e.InBrackets: 34

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/36 Tile{ AsIs: # ADT-Brackets/19 } Tile{ AsIs: </0 Reuse: & PatchASTSrcPos=1\1*4/4 AsIs: (/7 AsIs: e.UnitName/30 AsIs: )/8 HalfReuse: # SrcPos/13 } Tile{ AsIs: t.SrcPos/24 HalfReuse: >/28 } (/37 Tile{ AsIs: e.Name/32 } )/38 </39 & Map@16/40 (/41 e.UnitName/30/42 Tile{ AsIs: )/29 AsIs: e.InBrackets/34 HalfReuse: >/14 HalfReuse: )/1 ]] }
        refalrts::alloc_open_bracket(vm, context[36]);
        refalrts::alloc_open_bracket(vm, context[37]);
        refalrts::alloc_close_bracket(vm, context[38]);
        refalrts::alloc_open_call(vm, context[39]);
        refalrts::alloc_name(vm, context[40], functions[efunc_gen_Map_Z16]);
        refalrts::alloc_open_bracket(vm, context[41]);
        refalrts::copy_evar(vm, context[42], context[43], context[30], context[31]);
        refalrts::update_name(context[4], functions[efunc_gen_PatchASTSrcPos_A1L1D4]);
        refalrts::reinit_ident(context[13], identifiers[ident_SrcPos]);
        refalrts::reinit_close_call(context[28]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[36], context[1] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[39] );
        refalrts::link_brackets( context[41], context[29] );
        refalrts::link_brackets( context[37], context[38] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[29];
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[38], context[41] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_elem( res, context[37] );
        res = refalrts::splice_evar( res, context[24], context[28] );
        res = refalrts::splice_evar( res, context[0], context[13] );
        res = refalrts::splice_elem( res, context[19] );
        res = refalrts::splice_elem( res, context[36] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/20 )/8 (/13 # CallBrackets/19 e.InBrackets/22 )/14 >/1
        context[20] = context[15];
        context[21] = context[16];
        context[22] = context[17];
        context[23] = context[18];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[19] ) )
          continue;
        // closed e.UnitName as range 20
        // closed e.InBrackets as range 22
        //DEBUG: e.UnitName: 20
        //DEBUG: e.InBrackets: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # CallBrackets/19 } Tile{ AsIs: </0 Reuse: & Map@16/4 AsIs: (/7 AsIs: e.UnitName/20 AsIs: )/8 } Tile{ AsIs: e.InBrackets/22 } Tile{ HalfReuse: >/14 HalfReuse: )/1 ]] }
        refalrts::update_name(context[4], functions[efunc_gen_Map_Z16]);
        refalrts::reinit_close_call(context[14]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[13], context[1] );
        refalrts::push_stack( vm, context[14] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[14];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_evar( res, context[0], context[8] );
        res = refalrts::splice_evar( res, context[13], context[19] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/20 )/8 (/13 # Closure/19 e.Sentences/22 )/14 >/1
      context[20] = context[15];
      context[21] = context[16];
      context[22] = context[17];
      context[23] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_Closure], context[19] ) )
        continue;
      // closed e.UnitName as range 20
      // closed e.Sentences as range 22
      //DEBUG: e.UnitName: 20
      //DEBUG: e.Sentences: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: # Closure/19 } Tile{ AsIs: </0 Reuse: & PatchAST-Body@1/4 AsIs: (/7 AsIs: e.UnitName/20 AsIs: )/8 } Tile{ AsIs: e.Sentences/22 } Tile{ HalfReuse: >/14 HalfReuse: )/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_PatchASTm_Body_Z1]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[13], context[1] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[13], context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/15 )/8 t.OtherTerm/13 >/1
    context[15] = context[9];
    context[16] = context[10];
    // closed e.UnitName as range 15
    //DEBUG: t.OtherTerm: 13
    //DEBUG: e.UnitName: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/15 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.OtherTerm/13 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PatchAST-Expr\1@1/4 (/7 e.UnitName/5 )/8 e.dyn/2 >/1
  // closed e.UnitName as range 5
  // closed e.dyn as range 2
  //DEBUG: e.UnitName: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & PatchAST-Expr\1@0/10 Tile{ HalfReuse: [*]/0 Reuse: & PatchASTSrcPos=1\1@0/4 AsIs: (/7 AsIs: e.UnitName/5 AsIs: )/8 } {*}/11 Tile{ AsIs: e.dyn/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_PatchASTm_Expr_L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_PatchASTSrcPos_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PatchASTm_Expr_L1Z1("PatchAST-Expr\\1@1", COOKIE1_, COOKIE2_, func_gen_PatchASTm_Expr_L1Z1);


static refalrts::FnResult func_gen_Map_Z20(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 66 elems
  refalrts::Iter context[66];
  refalrts::zeros( context, 66 );
  // </0 & Map@20/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@20/4 (/7 e.new1/5 )/8 s.new2/9 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Map@20/4 (/7 e.new7/10 )/8 s.new4/9 t.new5/14 e.new6/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.new7 as range 10
    context[15] = refalrts::tvar_left( context[14], context[12], context[13] );
    if( ! context[15] )
      continue;
    // closed e.new6 as range 12
    do {
      // </0 & Map@20/4 (/7 e.Locals$a/16 )/8 s.NextLocalId/9 (/14 (/24 e.1/22 )/25 e.4/20 (/32 e.5/30 )/33 (/28 e.3/26 )/29 )/15 e.Tail/18 >/1
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = 0;
      context[21] = 0;
      if( ! refalrts::brackets_term( context[20], context[21], context[14] ) )
        continue;
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[20], context[21] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      context[26] = 0;
      context[27] = 0;
      context[28] = refalrts::brackets_right( context[26], context[27], context[20], context[21] );
      if( ! context[28] )
        continue;
      refalrts::bracket_pointers(context[28], context[29]);
      context[30] = 0;
      context[31] = 0;
      context[32] = refalrts::brackets_right( context[30], context[31], context[20], context[21] );
      if( ! context[32] )
        continue;
      refalrts::bracket_pointers(context[32], context[33]);
      // closed e.Locals$a as range 16
      // closed e.1 as range 22
      // closed e.4 as range 20
      // closed e.5 as range 30
      // closed e.3 as range 26
      // closed e.Tail as range 18
      //DEBUG: s.NextLocalId: 9
      //DEBUG: e.Locals$a: 16
      //DEBUG: e.1: 22
      //DEBUG: e.4: 20
      //DEBUG: e.5: 30
      //DEBUG: e.3: 26
      //DEBUG: e.Tail: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/14 AsIs: (/24 } </34 & Map@17/35 (/36 e.Locals$a/16/37 )/39 s.NextLocalId/9/40 Tile{ AsIs: e.1/22 } >/41 )/42 </43 & Map@24/44 (/45 e.Locals$a/16/46 )/48 Tile{ HalfReuse: s.NextLocalId9 /25 AsIs: e.4/20 HalfReuse: >/32 } (/49 </50 & Map@17/51 (/52 e.Locals$a/16/53 )/55 s.NextLocalId/9/56 Tile{ AsIs: e.5/30 } >/57 )/58 (/59 </60 & Map@25/61 (/62 e.Locals$a/16/63 Tile{ AsIs: )/33 HalfReuse: s.NextLocalId9 /28 AsIs: e.3/26 HalfReuse: >/29 AsIs: )/15 } )/65 Tile{ AsIs: </0 AsIs: & Map@20/4 AsIs: (/7 AsIs: e.Locals$a/16 AsIs: )/8 AsIs: s.NextLocalId/9 } Tile{ AsIs: e.Tail/18 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[34]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Map_Z17]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::copy_evar(vm, context[37], context[38], context[16], context[17]);
      refalrts::alloc_close_bracket(vm, context[39]);
      refalrts::copy_stvar(vm, context[40], context[9]);
      refalrts::alloc_close_call(vm, context[41]);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::alloc_open_call(vm, context[43]);
      refalrts::alloc_name(vm, context[44], functions[efunc_gen_Map_Z24]);
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::copy_evar(vm, context[46], context[47], context[16], context[17]);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::alloc_open_bracket(vm, context[49]);
      refalrts::alloc_open_call(vm, context[50]);
      refalrts::alloc_name(vm, context[51], functions[efunc_gen_Map_Z17]);
      refalrts::alloc_open_bracket(vm, context[52]);
      refalrts::copy_evar(vm, context[53], context[54], context[16], context[17]);
      refalrts::alloc_close_bracket(vm, context[55]);
      refalrts::copy_stvar(vm, context[56], context[9]);
      refalrts::alloc_close_call(vm, context[57]);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::alloc_open_bracket(vm, context[59]);
      refalrts::alloc_open_call(vm, context[60]);
      refalrts::alloc_name(vm, context[61], functions[efunc_gen_Map_Z25]);
      refalrts::alloc_open_bracket(vm, context[62]);
      refalrts::copy_evar(vm, context[63], context[64], context[16], context[17]);
      refalrts::alloc_close_bracket(vm, context[65]);
      refalrts::reinit_svar( context[25], context[9] );
      refalrts::reinit_close_call(context[32]);
      refalrts::reinit_svar( context[28], context[9] );
      refalrts::reinit_close_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[14], context[65] );
      refalrts::link_brackets( context[59], context[15] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[60] );
      refalrts::link_brackets( context[62], context[33] );
      refalrts::link_brackets( context[49], context[58] );
      refalrts::push_stack( vm, context[57] );
      refalrts::push_stack( vm, context[50] );
      refalrts::link_brackets( context[52], context[55] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[43] );
      refalrts::link_brackets( context[45], context[48] );
      refalrts::link_brackets( context[24], context[42] );
      refalrts::push_stack( vm, context[41] );
      refalrts::push_stack( vm, context[34] );
      refalrts::link_brackets( context[36], context[39] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[65] );
      res = refalrts::splice_evar( res, context[33], context[15] );
      res = refalrts::splice_evar( res, context[63], context[64] );
      res = refalrts::splice_evar( res, context[57], context[62] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[49], context[56] );
      res = refalrts::splice_evar( res, context[25], context[32] );
      res = refalrts::splice_evar( res, context[41], context[48] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[34], context[40] );
      res = refalrts::splice_evar( res, context[14], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@20/4 (/7 e.Locals$a/16 )/8 s.NextLocalId/9 t.Next/14 e.Tail/18 >/1
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    // closed e.Locals$a as range 16
    // closed e.Tail as range 18
    //DEBUG: t.Next: 14
    //DEBUG: s.NextLocalId: 9
    //DEBUG: e.Locals$a: 16
    //DEBUG: e.Tail: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </20 & PatchAST-Sentence@0/21 [*]/22 & GlobalASTStorage-AddAST=4\1@0/23 (/24 e.Locals$a/16/25 )/27 s.NextLocalId/9/28 {*}/29 Tile{ AsIs: t.Next/14 } >/30 Tile{ AsIs: </0 AsIs: & Map@20/4 AsIs: (/7 AsIs: e.Locals$a/16 AsIs: )/8 AsIs: s.NextLocalId/9 } Tile{ AsIs: e.Tail/18 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_PatchASTm_Sentence_Z0]);
    refalrts::alloc_closure_head(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_GlobalASTStoragem_AddAST_A4L1Z0]);
    refalrts::alloc_open_bracket(vm, context[24]);
    refalrts::copy_evar(vm, context[25], context[26], context[16], context[17]);
    refalrts::alloc_close_bracket(vm, context[27]);
    refalrts::copy_stvar(vm, context[28], context[9]);
    refalrts::alloc_unwrapped_closure(vm, context[29], context[22]);
    refalrts::alloc_close_call(vm, context[30]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[30] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[24], context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[20], context[29] );
    refalrts::use( res );
    refalrts::wrap_closure( context[29] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@20/4 (/7 e.Locals$a/10 )/8 s.NextLocalId/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Locals$a as range 10
    //DEBUG: s.NextLocalId: 9
    //DEBUG: e.Locals$a: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@20/4 (/7 e.Locals$a/10 )/8 s.NextLocalId/9 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@20/4 (/7 e.Locals$a/5 )/8 s.NextLocalId/9 e.items/2 >/1
  // closed e.Locals$a as range 5
  // closed e.items as range 2
  //DEBUG: s.NextLocalId: 9
  //DEBUG: e.Locals$a: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </10 & Map@0/11 (/12 & PatchAST-Sentence@0/13 Tile{ HalfReuse: [*]/0 Reuse: & GlobalASTStorage-AddAST=4\1@0/4 AsIs: (/7 AsIs: e.Locals$a/5 AsIs: )/8 AsIs: s.NextLocalId/9 } {*}/14 )/15 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_PatchASTm_Sentence_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[14], context[0]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_GlobalASTStoragem_AddAST_A4L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[12], context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[0], context[9] );
  res = refalrts::splice_evar( res, context[10], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[14] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z20("Map@20", COOKIE1_, COOKIE2_, func_gen_Map_Z20);


static refalrts::FnResult func_gen_Map_Z21(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & Map@21/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@21/4 (/7 e.new1/5 )/8 s.new2/9 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Map@21/4 (/7 e.new7/10 )/8 s.new4/9 t.new5/14 e.new6/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.new7 as range 10
    context[15] = refalrts::tvar_left( context[14], context[12], context[13] );
    if( ! context[15] )
      continue;
    // closed e.new6 as range 12
    do {
      // </0 & Map@21/4 (/7 e.Locals$a/16 )/8 s.NextLocalId/9 (/14 (/24 e.1/22 )/25 (/28 # Symbol/30 # Name/31 t.3/32 e.6/26 )/29 )/15 e.Tail/18 >/1
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = 0;
      context[21] = 0;
      if( ! refalrts::brackets_term( context[20], context[21], context[14] ) )
        continue;
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[20], context[21] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      context[26] = 0;
      context[27] = 0;
      context[28] = refalrts::brackets_left( context[26], context[27], context[20], context[21] );
      if( ! context[28] )
        continue;
      refalrts::bracket_pointers(context[28], context[29]);
      context[30] = refalrts::ident_left( identifiers[ident_Symbol], context[26], context[27] );
      if( ! context[30] )
        continue;
      context[31] = refalrts::ident_left( identifiers[ident_Name], context[26], context[27] );
      if( ! context[31] )
        continue;
      if( ! refalrts::empty_seq( context[20], context[21] ) )
        continue;
      // closed e.Locals$a as range 16
      // closed e.1 as range 22
      // closed e.Tail as range 18
      context[33] = refalrts::tvar_left( context[32], context[26], context[27] );
      if( ! context[33] )
        continue;
      // closed e.6 as range 26
      //DEBUG: s.NextLocalId: 9
      //DEBUG: e.Locals$a: 16
      //DEBUG: e.1: 22
      //DEBUG: e.Tail: 18
      //DEBUG: t.3: 32
      //DEBUG: e.6: 26

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </34 & PatchAST-Body$3\1=2/35 Tile{ AsIs: (/24 AsIs: e.1/22 AsIs: )/25 } Tile{ AsIs: t.3/32 } Tile{ AsIs: </0 Reuse: & GlobalASTStorage-AddAST=4\1*1/4 AsIs: (/7 AsIs: e.Locals$a/16 AsIs: )/8 AsIs: s.NextLocalId/9 HalfReuse: # Name/14 } Tile{ AsIs: e.6/26 } Tile{ HalfReuse: >/28 HalfReuse: >/30 HalfReuse: </31 } & Map@21/36 (/37 e.Locals$a/16/38 Tile{ AsIs: )/29 HalfReuse: s.NextLocalId9 /15 AsIs: e.Tail/18 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[34]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_PatchASTm_Body_S3L1A2]);
      refalrts::alloc_name(vm, context[36], functions[efunc_gen_Map_Z21]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::copy_evar(vm, context[38], context[39], context[16], context[17]);
      refalrts::update_name(context[4], functions[efunc_gen_GlobalASTStoragem_AddAST_A4L1D1]);
      refalrts::reinit_ident(context[14], identifiers[ident_Name]);
      refalrts::reinit_close_call(context[28]);
      refalrts::reinit_close_call(context[30]);
      refalrts::reinit_open_call(context[31]);
      refalrts::reinit_svar( context[15], context[9] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[31] );
      refalrts::link_brackets( context[37], context[29] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[29];
      res = refalrts::splice_evar( res, context[38], context[39] );
      res = refalrts::splice_evar( res, context[36], context[37] );
      res = refalrts::splice_evar( res, context[28], context[31] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[0], context[14] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@21/4 (/7 e.Locals$a/16 )/8 s.NextLocalId/9 t.Next/14 e.Tail/18 >/1
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    // closed e.Locals$a as range 16
    // closed e.Tail as range 18
    //DEBUG: t.Next: 14
    //DEBUG: s.NextLocalId: 9
    //DEBUG: e.Locals$a: 16
    //DEBUG: e.Tail: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </20 & PatchAST-Body$3\1@0/21 [*]/22 & GlobalASTStorage-AddAST=4\1@0/23 (/24 e.Locals$a/16/25 )/27 s.NextLocalId/9/28 {*}/29 Tile{ AsIs: t.Next/14 } >/30 Tile{ AsIs: </0 AsIs: & Map@21/4 AsIs: (/7 AsIs: e.Locals$a/16 AsIs: )/8 AsIs: s.NextLocalId/9 } Tile{ AsIs: e.Tail/18 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_PatchASTm_Body_S3L1Z0]);
    refalrts::alloc_closure_head(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_GlobalASTStoragem_AddAST_A4L1Z0]);
    refalrts::alloc_open_bracket(vm, context[24]);
    refalrts::copy_evar(vm, context[25], context[26], context[16], context[17]);
    refalrts::alloc_close_bracket(vm, context[27]);
    refalrts::copy_stvar(vm, context[28], context[9]);
    refalrts::alloc_unwrapped_closure(vm, context[29], context[22]);
    refalrts::alloc_close_call(vm, context[30]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[30] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[24], context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[20], context[29] );
    refalrts::use( res );
    refalrts::wrap_closure( context[29] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@21/4 (/7 e.Locals$a/10 )/8 s.NextLocalId/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Locals$a as range 10
    //DEBUG: s.NextLocalId: 9
    //DEBUG: e.Locals$a: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@21/4 (/7 e.Locals$a/10 )/8 s.NextLocalId/9 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@21/4 (/7 e.Locals$a/5 )/8 s.NextLocalId/9 e.items/2 >/1
  // closed e.Locals$a as range 5
  // closed e.items as range 2
  //DEBUG: s.NextLocalId: 9
  //DEBUG: e.Locals$a: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </10 & Map@0/11 [*]/12 & PatchAST-Body$3\1@0/13 Tile{ HalfReuse: [*]/0 Reuse: & GlobalASTStorage-AddAST=4\1@0/4 AsIs: (/7 AsIs: e.Locals$a/5 AsIs: )/8 AsIs: s.NextLocalId/9 } {*}/14 {*}/15 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_closure_head(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_PatchASTm_Body_S3L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[14], context[0]);
  refalrts::alloc_unwrapped_closure(vm, context[15], context[12]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_GlobalASTStoragem_AddAST_A4L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[0], context[9] );
  res = refalrts::splice_evar( res, context[10], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[14] );
  refalrts::wrap_closure( context[15] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z21("Map@21", COOKIE1_, COOKIE2_, func_gen_Map_Z21);


static refalrts::FnResult func_gen_Map_Z22(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & Map@22/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@22/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Map@22/4 (/7 e.new5/9 )/8 t.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Map@22/4 (/7 e.UnitName/15 )/8 (/13 s.ChainType/33 (/31 e.2/29 )/32 (/27 e.4/25 )/28 (/23 e.6/21 )/24 )/14 e.Tail/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_right( context[21], context[22], context[19], context[20] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_right( context[25], context[26], context[19], context[20] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = 0;
      context[30] = 0;
      context[31] = refalrts::brackets_right( context[29], context[30], context[19], context[20] );
      if( ! context[31] )
        continue;
      refalrts::bracket_pointers(context[31], context[32]);
      // closed e.UnitName as range 15
      // closed e.2 as range 29
      // closed e.4 as range 25
      // closed e.6 as range 21
      // closed e.Tail as range 17
      if( ! refalrts::svar_left( context[33], context[19], context[20] ) )
        continue;
      if( ! refalrts::empty_seq( context[19], context[20] ) )
        continue;
      //DEBUG: e.UnitName: 15
      //DEBUG: e.2: 29
      //DEBUG: e.4: 25
      //DEBUG: e.6: 21
      //DEBUG: e.Tail: 17
      //DEBUG: s.ChainType: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: s.ChainType/33 AsIs: (/31 } </34 & Map@16/35 (/36 e.UnitName/15/37 Tile{ AsIs: )/28 } Tile{ AsIs: e.2/29 } >/39 )/40 (/41 </42 & Map@23/43 (/44 e.UnitName/15/45 )/47 Tile{ AsIs: e.4/25 } >/48 Tile{ AsIs: )/32 AsIs: (/27 } </49 & Map@16/50 (/51 e.UnitName/15/52 Tile{ HalfReuse: )/23 AsIs: e.6/21 HalfReuse: >/24 AsIs: )/14 } )/54 Tile{ AsIs: </0 AsIs: & Map@22/4 AsIs: (/7 AsIs: e.UnitName/15 AsIs: )/8 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[34]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Map_Z16]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::copy_evar(vm, context[37], context[38], context[15], context[16]);
      refalrts::alloc_close_call(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_open_call(vm, context[42]);
      refalrts::alloc_name(vm, context[43], functions[efunc_gen_Map_Z23]);
      refalrts::alloc_open_bracket(vm, context[44]);
      refalrts::copy_evar(vm, context[45], context[46], context[15], context[16]);
      refalrts::alloc_close_bracket(vm, context[47]);
      refalrts::alloc_close_call(vm, context[48]);
      refalrts::alloc_open_call(vm, context[49]);
      refalrts::alloc_name(vm, context[50], functions[efunc_gen_Map_Z16]);
      refalrts::alloc_open_bracket(vm, context[51]);
      refalrts::copy_evar(vm, context[52], context[53], context[15], context[16]);
      refalrts::alloc_close_bracket(vm, context[54]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_close_call(context[24]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[13], context[54] );
      refalrts::link_brackets( context[27], context[14] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[49] );
      refalrts::link_brackets( context[51], context[23] );
      refalrts::link_brackets( context[41], context[32] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[42] );
      refalrts::link_brackets( context[44], context[47] );
      refalrts::link_brackets( context[31], context[40] );
      refalrts::push_stack( vm, context[39] );
      refalrts::push_stack( vm, context[34] );
      refalrts::link_brackets( context[36], context[28] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_elem( res, context[54] );
      res = refalrts::splice_evar( res, context[23], context[14] );
      res = refalrts::splice_evar( res, context[52], context[53] );
      res = refalrts::splice_evar( res, context[49], context[51] );
      res = refalrts::splice_evar( res, context[32], context[27] );
      res = refalrts::splice_elem( res, context[48] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[39], context[47] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_evar( res, context[34], context[36] );
      res = refalrts::splice_evar( res, context[13], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@22/4 (/7 e.UnitName/15 )/8 t.Next/13 e.Tail/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.UnitName as range 15
    // closed e.Tail as range 17
    //DEBUG: t.Next: 13
    //DEBUG: e.UnitName: 15
    //DEBUG: e.Tail: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </19 & PatchAST-Chain\1@0/20 [*]/21 & PatchAST-Sentence=1\1@0/22 [*]/23 & PatchASTSrcPos=1\1@0/24 (/25 e.UnitName/15/26 )/28 {*}/29 {*}/30 [*]/31 & PatchASTSrcPos=1\1@0/32 (/33 e.UnitName/15/34 )/36 {*}/37 Tile{ AsIs: t.Next/13 } >/38 Tile{ AsIs: </0 AsIs: & Map@22/4 AsIs: (/7 AsIs: e.UnitName/15 AsIs: )/8 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_PatchASTm_Chain_L1Z0]);
    refalrts::alloc_closure_head(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_PatchASTm_Sentence_A1L1Z0]);
    refalrts::alloc_closure_head(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_PatchASTSrcPos_A1L1Z0]);
    refalrts::alloc_open_bracket(vm, context[25]);
    refalrts::copy_evar(vm, context[26], context[27], context[15], context[16]);
    refalrts::alloc_close_bracket(vm, context[28]);
    refalrts::alloc_unwrapped_closure(vm, context[29], context[23]);
    refalrts::alloc_unwrapped_closure(vm, context[30], context[21]);
    refalrts::alloc_closure_head(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_gen_PatchASTSrcPos_A1L1Z0]);
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::copy_evar(vm, context[34], context[35], context[15], context[16]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::alloc_unwrapped_closure(vm, context[37], context[31]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[33], context[36] );
    refalrts::link_brackets( context[25], context[28] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[19], context[37] );
    refalrts::use( res );
    refalrts::wrap_closure( context[29] );
    refalrts::wrap_closure( context[30] );
    refalrts::wrap_closure( context[37] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@22/4 (/7 e.UnitName/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.UnitName as range 9
    //DEBUG: e.UnitName: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@22/4 (/7 e.UnitName/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@22/4 (/7 e.UnitName/5 )/8 e.items/2 >/1
  // closed e.UnitName as range 5
  // closed e.items as range 2
  //DEBUG: e.UnitName: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 [*]/11 & PatchAST-Chain\1@0/12 [*]/13 & PatchAST-Sentence=1\1@0/14 Tile{ HalfReuse: [*]/0 Reuse: & PatchASTSrcPos=1\1@0/4 AsIs: (/7 AsIs: e.UnitName/5 AsIs: )/8 } {*}/15 {*}/16 [*]/17 & PatchASTSrcPos=1\1@0/18 (/19 e.UnitName/5/20 )/22 {*}/23 {*}/24 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_PatchASTm_Chain_L1Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_PatchASTm_Sentence_A1L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[15], context[0]);
  refalrts::alloc_unwrapped_closure(vm, context[16], context[13]);
  refalrts::alloc_closure_head(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_PatchASTSrcPos_A1L1Z0]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::copy_evar(vm, context[20], context[21], context[5], context[6]);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_unwrapped_closure(vm, context[23], context[17]);
  refalrts::alloc_unwrapped_closure(vm, context[24], context[11]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_PatchASTSrcPos_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[19], context[22] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[15], context[24] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[14] );
  refalrts::use( res );
  refalrts::wrap_closure( context[15] );
  refalrts::wrap_closure( context[16] );
  refalrts::wrap_closure( context[23] );
  refalrts::wrap_closure( context[24] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z22("Map@22", COOKIE1_, COOKIE2_, func_gen_Map_Z22);


static refalrts::FnResult func_gen_Map_Z23(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & Map@23/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@23/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Map@23/4 (/7 e.new5/9 )/8 t.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Map@23/4 (/7 e.UnitName/15 )/8 (/13 e./19 )/14 e.Tail/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      // closed e.UnitName as range 15
      // closed e. as range 19
      // closed e.Tail as range 17
      //DEBUG: e.UnitName: 15
      //DEBUG: e.: 19
      //DEBUG: e.Tail: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/21 </22 & PatchAST-Body@1/23 (/24 e.UnitName/15/25 Tile{ HalfReuse: )/13 AsIs: e./19 HalfReuse: >/14 } )/27 Tile{ AsIs: </0 AsIs: & Map@23/4 AsIs: (/7 AsIs: e.UnitName/15 AsIs: )/8 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_open_call(vm, context[22]);
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_PatchASTm_Body_Z1]);
      refalrts::alloc_open_bracket(vm, context[24]);
      refalrts::copy_evar(vm, context[25], context[26], context[15], context[16]);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::reinit_close_call(context[14]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[21], context[27] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[22] );
      refalrts::link_brackets( context[24], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[21], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@23/4 (/7 e.UnitName/15 )/8 t.Next/13 e.Tail/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.UnitName as range 15
    // closed e.Tail as range 17
    //DEBUG: t.Next: 13
    //DEBUG: e.UnitName: 15
    //DEBUG: e.Tail: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </19 & PatchAST-Blocks\1*1/20 [*]/21 & PatchASTSrcPos=1\1/22 (/23 e.UnitName/15/24 )/26 {*}/27 Tile{ AsIs: t.Next/13 } >/28 Tile{ AsIs: </0 AsIs: & Map@23/4 AsIs: (/7 AsIs: e.UnitName/15 AsIs: )/8 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_PatchASTm_Blocks_L1D1]);
    refalrts::alloc_closure_head(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_PatchASTSrcPos_A1L1]);
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::copy_evar(vm, context[24], context[25], context[15], context[16]);
    refalrts::alloc_close_bracket(vm, context[26]);
    refalrts::alloc_unwrapped_closure(vm, context[27], context[21]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[23], context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[19], context[27] );
    refalrts::use( res );
    refalrts::wrap_closure( context[27] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@23/4 (/7 e.UnitName/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.UnitName as range 9
    //DEBUG: e.UnitName: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@23/4 (/7 e.UnitName/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@23/4 (/7 e.UnitName/5 )/8 e.items/2 >/1
  // closed e.UnitName as range 5
  // closed e.items as range 2
  //DEBUG: e.UnitName: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 [*]/11 & PatchAST-Blocks\1@0/12 Tile{ HalfReuse: [*]/0 Reuse: & PatchASTSrcPos=1\1@0/4 AsIs: (/7 AsIs: e.UnitName/5 AsIs: )/8 } {*}/13 {*}/14 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_PatchASTm_Blocks_L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[13], context[0]);
  refalrts::alloc_unwrapped_closure(vm, context[14], context[11]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_PatchASTSrcPos_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  refalrts::wrap_closure( context[13] );
  refalrts::wrap_closure( context[14] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z23("Map@23", COOKIE1_, COOKIE2_, func_gen_Map_Z23);


static refalrts::FnResult func_gen_PatchASTm_Body_S3L1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & PatchAST-Body$3\1=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PatchAST-Body$3\1=1@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & PatchAST-Body$3\1=1@1/4 (/7 e.Identifier0/17 )/8 (/11 e.UnitName/19 )/12 (/15 e.Name0/21 )/16 t.SrcPos$a/25 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.Identifier0 as range 17
    // closed e.UnitName as range 19
    // closed e.Name0 as range 21
    context[26] = refalrts::tvar_left( context[25], context[23], context[24] );
    if( ! context[26] )
      continue;
    if( ! refalrts::empty_seq( context[23], context[24] ) )
      continue;
    //DEBUG: e.Identifier0: 17
    //DEBUG: e.UnitName: 19
    //DEBUG: e.Name0: 21
    //DEBUG: t.SrcPos$a: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} e.UnitName/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: (/7 AsIs: e.Identifier0/17 AsIs: )/8 AsIs: (/11 } Tile{ HalfReuse: # Symbol/15 } Tile{ HalfReuse: # Name/16 AsIs: t.SrcPos$a/25 } Tile{ AsIs: e.Name0/21 } Tile{ AsIs: )/12 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_ident(context[15], identifiers[ident_Symbol]);
    refalrts::reinit_ident(context[16], identifiers[ident_Name]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[4], context[1] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[16], context[26] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[4], context[11] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PatchAST-Body$3\1=1@1/4 (/7 e.Identifier0/5 )/8 (/11 e.UnitName/9 )/12 (/15 e.Name0/13 )/16 e.dyn/2 >/1
  // closed e.Identifier0 as range 5
  // closed e.UnitName as range 9
  // closed e.Name0 as range 13
  // closed e.dyn as range 2
  //DEBUG: e.Identifier0: 5
  //DEBUG: e.UnitName: 9
  //DEBUG: e.Name0: 13
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PatchAST-Body$3\1=1@0/4 AsIs: (/7 AsIs: e.Identifier0/5 AsIs: )/8 HalfReuse: [*]/11 } & PatchASTSrcPos=1\1@0/17 (/18 Tile{ AsIs: e.UnitName/9 } )/19 Tile{ HalfReuse: {*}/12 AsIs: (/15 AsIs: e.Name0/13 AsIs: )/16 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_PatchASTSrcPos_A1L1Z0]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_PatchASTm_Body_S3L1A1Z0]);
  refalrts::reinit_closure_head(context[11]);
  refalrts::reinit_unwrapped_closure(context[12], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  refalrts::wrap_closure( context[12] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PatchASTm_Body_S3L1A1Z1("PatchAST-Body$3\\1=1@1", COOKIE1_, COOKIE2_, func_gen_PatchASTm_Body_S3L1A1Z1);


static refalrts::FnResult func_gen_Map_Z24(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 59 elems
  refalrts::Iter context[59];
  refalrts::zeros( context, 59 );
  // </0 & Map@24/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@24/4 (/7 e.new1/5 )/8 s.new2/9 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Map@24/4 (/7 e.new7/10 )/8 s.new4/9 t.new5/14 e.new6/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.new7 as range 10
    context[15] = refalrts::tvar_left( context[14], context[12], context[13] );
    if( ! context[15] )
      continue;
    // closed e.new6 as range 12
    do {
      // </0 & Map@24/4 (/7 e.Locals$a/16 )/8 s.NextLocalId/9 (/14 s.ChainType/34 (/32 e.2/30 )/33 (/28 e.4/26 )/29 (/24 e.6/22 )/25 )/15 e.Tail/18 >/1
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = 0;
      context[21] = 0;
      if( ! refalrts::brackets_term( context[20], context[21], context[14] ) )
        continue;
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_right( context[22], context[23], context[20], context[21] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      context[26] = 0;
      context[27] = 0;
      context[28] = refalrts::brackets_right( context[26], context[27], context[20], context[21] );
      if( ! context[28] )
        continue;
      refalrts::bracket_pointers(context[28], context[29]);
      context[30] = 0;
      context[31] = 0;
      context[32] = refalrts::brackets_right( context[30], context[31], context[20], context[21] );
      if( ! context[32] )
        continue;
      refalrts::bracket_pointers(context[32], context[33]);
      // closed e.Locals$a as range 16
      // closed e.2 as range 30
      // closed e.4 as range 26
      // closed e.6 as range 22
      // closed e.Tail as range 18
      if( ! refalrts::svar_left( context[34], context[20], context[21] ) )
        continue;
      if( ! refalrts::empty_seq( context[20], context[21] ) )
        continue;
      //DEBUG: s.NextLocalId: 9
      //DEBUG: e.Locals$a: 16
      //DEBUG: e.2: 30
      //DEBUG: e.4: 26
      //DEBUG: e.6: 22
      //DEBUG: e.Tail: 18
      //DEBUG: s.ChainType: 34

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/14 AsIs: s.ChainType/34 AsIs: (/32 } </35 & Map@17/36 (/37 e.Locals$a/16/38 )/40 s.NextLocalId/9/41 Tile{ AsIs: e.2/30 } >/42 Tile{ AsIs: )/33 AsIs: (/28 } </43 & Map@25/44 (/45 e.Locals$a/16/46 )/48 s.NextLocalId/9/49 Tile{ AsIs: e.4/26 } >/50 )/51 (/52 </53 & Map@17/54 (/55 e.Locals$a/16/56 Tile{ AsIs: )/29 HalfReuse: s.NextLocalId9 /24 AsIs: e.6/22 HalfReuse: >/25 AsIs: )/15 } )/58 Tile{ AsIs: </0 AsIs: & Map@24/4 AsIs: (/7 AsIs: e.Locals$a/16 AsIs: )/8 AsIs: s.NextLocalId/9 } Tile{ AsIs: e.Tail/18 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[35]);
      refalrts::alloc_name(vm, context[36], functions[efunc_gen_Map_Z17]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::copy_evar(vm, context[38], context[39], context[16], context[17]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::copy_stvar(vm, context[41], context[9]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_open_call(vm, context[43]);
      refalrts::alloc_name(vm, context[44], functions[efunc_gen_Map_Z25]);
      refalrts::alloc_open_bracket(vm, context[45]);
      refalrts::copy_evar(vm, context[46], context[47], context[16], context[17]);
      refalrts::alloc_close_bracket(vm, context[48]);
      refalrts::copy_stvar(vm, context[49], context[9]);
      refalrts::alloc_close_call(vm, context[50]);
      refalrts::alloc_close_bracket(vm, context[51]);
      refalrts::alloc_open_bracket(vm, context[52]);
      refalrts::alloc_open_call(vm, context[53]);
      refalrts::alloc_name(vm, context[54], functions[efunc_gen_Map_Z17]);
      refalrts::alloc_open_bracket(vm, context[55]);
      refalrts::copy_evar(vm, context[56], context[57], context[16], context[17]);
      refalrts::alloc_close_bracket(vm, context[58]);
      refalrts::reinit_svar( context[24], context[9] );
      refalrts::reinit_close_call(context[25]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[14], context[58] );
      refalrts::link_brackets( context[52], context[15] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[53] );
      refalrts::link_brackets( context[55], context[29] );
      refalrts::link_brackets( context[28], context[51] );
      refalrts::push_stack( vm, context[50] );
      refalrts::push_stack( vm, context[43] );
      refalrts::link_brackets( context[45], context[48] );
      refalrts::link_brackets( context[32], context[33] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[35] );
      refalrts::link_brackets( context[37], context[40] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[58] );
      res = refalrts::splice_evar( res, context[29], context[15] );
      res = refalrts::splice_evar( res, context[56], context[57] );
      res = refalrts::splice_evar( res, context[50], context[55] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[43], context[49] );
      res = refalrts::splice_evar( res, context[33], context[28] );
      res = refalrts::splice_elem( res, context[42] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[35], context[41] );
      res = refalrts::splice_evar( res, context[14], context[32] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@24/4 (/7 e.Locals$a/16 )/8 s.NextLocalId/9 t.Next/14 e.Tail/18 >/1
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    // closed e.Locals$a as range 16
    // closed e.Tail as range 18
    //DEBUG: t.Next: 14
    //DEBUG: s.NextLocalId: 9
    //DEBUG: e.Locals$a: 16
    //DEBUG: e.Tail: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </20 & PatchAST-Chain\1@0/21 [*]/22 & PatchAST-Sentence=1\1@0/23 [*]/24 & GlobalASTStorage-AddAST=4\1@0/25 (/26 e.Locals$a/16/27 )/29 s.NextLocalId/9/30 {*}/31 {*}/32 [*]/33 & GlobalASTStorage-AddAST=4\1@0/34 (/35 e.Locals$a/16/36 )/38 s.NextLocalId/9/39 {*}/40 Tile{ AsIs: t.Next/14 } >/41 Tile{ AsIs: </0 AsIs: & Map@24/4 AsIs: (/7 AsIs: e.Locals$a/16 AsIs: )/8 AsIs: s.NextLocalId/9 } Tile{ AsIs: e.Tail/18 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_PatchASTm_Chain_L1Z0]);
    refalrts::alloc_closure_head(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_PatchASTm_Sentence_A1L1Z0]);
    refalrts::alloc_closure_head(vm, context[24]);
    refalrts::alloc_name(vm, context[25], functions[efunc_gen_GlobalASTStoragem_AddAST_A4L1Z0]);
    refalrts::alloc_open_bracket(vm, context[26]);
    refalrts::copy_evar(vm, context[27], context[28], context[16], context[17]);
    refalrts::alloc_close_bracket(vm, context[29]);
    refalrts::copy_stvar(vm, context[30], context[9]);
    refalrts::alloc_unwrapped_closure(vm, context[31], context[24]);
    refalrts::alloc_unwrapped_closure(vm, context[32], context[22]);
    refalrts::alloc_closure_head(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_gen_GlobalASTStoragem_AddAST_A4L1Z0]);
    refalrts::alloc_open_bracket(vm, context[35]);
    refalrts::copy_evar(vm, context[36], context[37], context[16], context[17]);
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::copy_stvar(vm, context[39], context[9]);
    refalrts::alloc_unwrapped_closure(vm, context[40], context[33]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[35], context[38] );
    refalrts::link_brackets( context[26], context[29] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[20], context[40] );
    refalrts::use( res );
    refalrts::wrap_closure( context[31] );
    refalrts::wrap_closure( context[32] );
    refalrts::wrap_closure( context[40] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@24/4 (/7 e.Locals$a/10 )/8 s.NextLocalId/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Locals$a as range 10
    //DEBUG: s.NextLocalId: 9
    //DEBUG: e.Locals$a: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@24/4 (/7 e.Locals$a/10 )/8 s.NextLocalId/9 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@24/4 (/7 e.Locals$a/5 )/8 s.NextLocalId/9 e.items/2 >/1
  // closed e.Locals$a as range 5
  // closed e.items as range 2
  //DEBUG: s.NextLocalId: 9
  //DEBUG: e.Locals$a: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </10 & Map@0/11 [*]/12 & PatchAST-Chain\1@0/13 [*]/14 & PatchAST-Sentence=1\1@0/15 Tile{ HalfReuse: [*]/0 Reuse: & GlobalASTStorage-AddAST=4\1@0/4 AsIs: (/7 AsIs: e.Locals$a/5 AsIs: )/8 AsIs: s.NextLocalId/9 } {*}/16 {*}/17 [*]/18 & GlobalASTStorage-AddAST=4\1@0/19 (/20 e.Locals$a/5/21 )/23 s.NextLocalId/9/24 {*}/25 {*}/26 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_closure_head(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_PatchASTm_Chain_L1Z0]);
  refalrts::alloc_closure_head(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_PatchASTm_Sentence_A1L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[16], context[0]);
  refalrts::alloc_unwrapped_closure(vm, context[17], context[14]);
  refalrts::alloc_closure_head(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_gen_GlobalASTStoragem_AddAST_A4L1Z0]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::copy_evar(vm, context[21], context[22], context[5], context[6]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::copy_stvar(vm, context[24], context[9]);
  refalrts::alloc_unwrapped_closure(vm, context[25], context[18]);
  refalrts::alloc_unwrapped_closure(vm, context[26], context[12]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_GlobalASTStoragem_AddAST_A4L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[20], context[23] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[16], context[26] );
  res = refalrts::splice_evar( res, context[0], context[9] );
  res = refalrts::splice_evar( res, context[10], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[16] );
  refalrts::wrap_closure( context[17] );
  refalrts::wrap_closure( context[25] );
  refalrts::wrap_closure( context[26] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z24("Map@24", COOKIE1_, COOKIE2_, func_gen_Map_Z24);


static refalrts::FnResult func_gen_Map_Z25(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & Map@25/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@25/4 (/7 e.new1/5 )/8 s.new2/9 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Map@25/4 (/7 e.new7/10 )/8 s.new4/9 t.new5/14 e.new6/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.new7 as range 10
    context[15] = refalrts::tvar_left( context[14], context[12], context[13] );
    if( ! context[15] )
      continue;
    // closed e.new6 as range 12
    do {
      // </0 & Map@25/4 (/7 e.Locals$a/16 )/8 s.NextLocalId/9 (/14 e./20 )/15 e.Tail/18 >/1
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = 0;
      context[21] = 0;
      if( ! refalrts::brackets_term( context[20], context[21], context[14] ) )
        continue;
      // closed e.Locals$a as range 16
      // closed e. as range 20
      // closed e.Tail as range 18
      //DEBUG: s.NextLocalId: 9
      //DEBUG: e.Locals$a: 16
      //DEBUG: e.: 20
      //DEBUG: e.Tail: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/22 </23 & PatchAST-Body@2/24 (/25 e.Locals$a/16/26 )/28 Tile{ HalfReuse: s.NextLocalId9 /14 AsIs: e./20 HalfReuse: >/15 } )/29 Tile{ AsIs: </0 AsIs: & Map@25/4 AsIs: (/7 AsIs: e.Locals$a/16 AsIs: )/8 AsIs: s.NextLocalId/9 } Tile{ AsIs: e.Tail/18 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[22]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_gen_PatchASTm_Body_Z2]);
      refalrts::alloc_open_bracket(vm, context[25]);
      refalrts::copy_evar(vm, context[26], context[27], context[16], context[17]);
      refalrts::alloc_close_bracket(vm, context[28]);
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::reinit_svar( context[14], context[9] );
      refalrts::reinit_close_call(context[15]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[22], context[29] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[25], context[28] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[0], context[9] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[22], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@25/4 (/7 e.Locals$a/16 )/8 s.NextLocalId/9 t.Next/14 e.Tail/18 >/1
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    // closed e.Locals$a as range 16
    // closed e.Tail as range 18
    //DEBUG: t.Next: 14
    //DEBUG: s.NextLocalId: 9
    //DEBUG: e.Locals$a: 16
    //DEBUG: e.Tail: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </20 & PatchAST-Blocks\1*1/21 [*]/22 & GlobalASTStorage-AddAST=4\1/23 (/24 e.Locals$a/16/25 )/27 s.NextLocalId/9/28 {*}/29 Tile{ AsIs: t.Next/14 } >/30 Tile{ AsIs: </0 AsIs: & Map@25/4 AsIs: (/7 AsIs: e.Locals$a/16 AsIs: )/8 AsIs: s.NextLocalId/9 } Tile{ AsIs: e.Tail/18 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_PatchASTm_Blocks_L1D1]);
    refalrts::alloc_closure_head(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_GlobalASTStoragem_AddAST_A4L1]);
    refalrts::alloc_open_bracket(vm, context[24]);
    refalrts::copy_evar(vm, context[25], context[26], context[16], context[17]);
    refalrts::alloc_close_bracket(vm, context[27]);
    refalrts::copy_stvar(vm, context[28], context[9]);
    refalrts::alloc_unwrapped_closure(vm, context[29], context[22]);
    refalrts::alloc_close_call(vm, context[30]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::push_stack( vm, context[30] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[24], context[27] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[18], context[19] );
    res = refalrts::splice_evar( res, context[0], context[9] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    res = refalrts::splice_evar( res, context[20], context[29] );
    refalrts::use( res );
    refalrts::wrap_closure( context[29] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@25/4 (/7 e.Locals$a/10 )/8 s.NextLocalId/9 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Locals$a as range 10
    //DEBUG: s.NextLocalId: 9
    //DEBUG: e.Locals$a: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@25/4 (/7 e.Locals$a/10 )/8 s.NextLocalId/9 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@25/4 (/7 e.Locals$a/5 )/8 s.NextLocalId/9 e.items/2 >/1
  // closed e.Locals$a as range 5
  // closed e.items as range 2
  //DEBUG: s.NextLocalId: 9
  //DEBUG: e.Locals$a: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </10 & Map@0/11 [*]/12 & PatchAST-Blocks\1@0/13 Tile{ HalfReuse: [*]/0 Reuse: & GlobalASTStorage-AddAST=4\1@0/4 AsIs: (/7 AsIs: e.Locals$a/5 AsIs: )/8 AsIs: s.NextLocalId/9 } {*}/14 {*}/15 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_closure_head(vm, context[12]);
  refalrts::alloc_name(vm, context[13], functions[efunc_gen_PatchASTm_Blocks_L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[14], context[0]);
  refalrts::alloc_unwrapped_closure(vm, context[15], context[12]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_GlobalASTStoragem_AddAST_A4L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[0], context[9] );
  res = refalrts::splice_evar( res, context[10], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[14] );
  refalrts::wrap_closure( context[15] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z25("Map@25", COOKIE1_, COOKIE2_, func_gen_Map_Z25);


static refalrts::FnResult func_gen_PatchASTm_Item_Z1D13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & PatchAST-Item@1*13/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PatchAST-Item@1*13/4 e.new1/2 t.new2/5 >/1
  context[6] = refalrts::tvar_right( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 2
  do {
    // </0 & PatchAST-Item@1*13/4 e.new7/7 (/5 s.new3/11 t.new4/12 t.new5/14 e.new6/9 )/6 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[9] = 0;
    context[10] = 0;
    if( ! refalrts::brackets_term( context[9], context[10], context[5] ) )
      continue;
    // closed e.new7 as range 7
    if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
      continue;
    context[13] = refalrts::tvar_left( context[12], context[9], context[10] );
    if( ! context[13] )
      continue;
    context[15] = refalrts::tvar_left( context[14], context[9], context[10] );
    if( ! context[15] )
      continue;
    // closed e.new6 as range 9
    do {
      // </0 & PatchAST-Item@1*13/4 e.UnitName/16 (/5 s.Label/11 t.SrcPos/12 s.ScopeClass/14 e.Name/18 )/6 >/1
      context[16] = context[7];
      context[17] = context[8];
      context[18] = context[9];
      context[19] = context[10];
      if( ! refalrts::svar_term( context[14], context[14] ) )
        continue;
      // closed e.UnitName as range 16
      // closed e.Name as range 18
      //DEBUG: t.SrcPos: 12
      //DEBUG: s.ScopeClass: 14
      //DEBUG: s.Label: 11
      //DEBUG: e.UnitName: 16
      //DEBUG: e.Name: 18
      //11: s.Label
      //12: t.SrcPos
      //14: s.ScopeClass
      //16: e.UnitName
      //18: e.Name
      //25: s.Label

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[22], functions[efunc_gen_PatchASTm_Item_Z1D13S5C1]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_OneOf]);
      refalrts::copy_stvar(vm, context[25], context[11]);
      refalrts::alloc_ident(vm, context[26], identifiers[ident_Enum]);
      refalrts::alloc_ident(vm, context[27], identifiers[ident_Swap]);
      refalrts::alloc_ident(vm, context[28], identifiers[ident_Declaration]);
      refalrts::alloc_ident(vm, context[29], identifiers[ident_Entry]);
      refalrts::alloc_ident(vm, context[30], identifiers[ident_Inline]);
      refalrts::alloc_ident(vm, context[31], identifiers[ident_Drive]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Intrinsic]);
      refalrts::alloc_ident(vm, context[33], identifiers[ident_Meta]);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[23] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_stvar( res, context[25] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_elem( res, context[20] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </20 & PatchAST-Item@1*13$5?1/24 # True/25 >/21
        context[22] = 0;
        context[23] = 0;
        context[24] = refalrts::call_left( context[22], context[23], context[20], context[21] );
        context[25] = refalrts::ident_left( identifiers[ident_True], context[22], context[23] );
        if( ! context[25] )
          continue;
        if( ! refalrts::empty_seq( context[22], context[23] ) )
          continue;
        //DEBUG: t.SrcPos: 12
        //DEBUG: s.ScopeClass: 14
        //DEBUG: s.Label: 11
        //DEBUG: e.UnitName: 16
        //DEBUG: e.Name: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Label/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/26 Tile{ HalfReuse: s.Label11 /6 AsIs: </20 Reuse: & PatchASTSrcPos=1\1/24 HalfReuse: (/25 } e.UnitName/16/27 )/29 # SrcPos/30 Tile{ AsIs: t.SrcPos/12 } >/31 Tile{ AsIs: s.ScopeClass/14 } </32 Tile{ HalfReuse: & PatchASTSrcPos=1\1/0 HalfReuse: (/4 AsIs: e.UnitName/16 HalfReuse: )/5 } # Name/33 Tile{ AsIs: e.Name/18 } Tile{ AsIs: >/21 HalfReuse: )/1 ]] }
        refalrts::alloc_open_bracket(vm, context[26]);
        refalrts::copy_evar(vm, context[27], context[28], context[16], context[17]);
        refalrts::alloc_close_bracket(vm, context[29]);
        refalrts::alloc_ident(vm, context[30], identifiers[ident_SrcPos]);
        refalrts::alloc_close_call(vm, context[31]);
        refalrts::alloc_open_call(vm, context[32]);
        refalrts::alloc_ident(vm, context[33], identifiers[ident_Name]);
        refalrts::reinit_svar( context[6], context[11] );
        refalrts::update_name(context[24], functions[efunc_gen_PatchASTSrcPos_A1L1]);
        refalrts::reinit_open_bracket(context[25]);
        refalrts::reinit_name(context[0], functions[efunc_gen_PatchASTSrcPos_A1L1]);
        refalrts::reinit_open_bracket(context[4]);
        refalrts::reinit_close_bracket(context[5]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[26], context[1] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[32] );
        refalrts::link_brackets( context[4], context[5] );
        refalrts::push_stack( vm, context[31] );
        refalrts::push_stack( vm, context[20] );
        refalrts::link_brackets( context[25], context[29] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[21];
        res = refalrts::splice_evar( res, context[18], context[19] );
        res = refalrts::splice_elem( res, context[33] );
        res = refalrts::splice_evar( res, context[0], context[5] );
        res = refalrts::splice_elem( res, context[32] );
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_elem( res, context[31] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[6], context[25] );
        res = refalrts::splice_elem( res, context[26] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[20], context[21]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PatchAST-Item@1*13/4 e.new11/16 (/5 # Spec/11 t.new8/12 (/14 e.new9/20 )/15 e.new10/18 )/6 >/1
    context[16] = context[7];
    context[17] = context[8];
    context[18] = context[9];
    context[19] = context[10];
    context[20] = 0;
    context[21] = 0;
    if( ! refalrts::brackets_term( context[20], context[21], context[14] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_Spec], context[11] ) )
      continue;
    // closed e.new11 as range 16
    // closed e.new9 as range 20
    // closed e.new10 as range 18
    do {
      // </0 & PatchAST-Item@1*13/4 e.new15/22 (/5 # Spec/11 s.new12/12 (/14 e.new13/24 )/15 e.new14/26 )/6 >/1
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[18];
      context[27] = context[19];
      if( ! refalrts::svar_term( context[12], context[12] ) )
        continue;
      // closed e.new15 as range 22
      // closed e.new13 as range 24
      // closed e.new14 as range 26
      do {
        // </0 & PatchAST-Item@1*13/4 e.UnitName/28 (/5 # Spec/11 # NoPos/12 (/14 e.Name/30 )/15 e.Pattern/32 )/6 >/1
        context[28] = context[22];
        context[29] = context[23];
        context[30] = context[24];
        context[31] = context[25];
        context[32] = context[26];
        context[33] = context[27];
        if( ! refalrts::ident_term( identifiers[ident_NoPos], context[12] ) )
          continue;
        // closed e.UnitName as range 28
        // closed e.Name as range 30
        // closed e.Pattern as range 32
        //DEBUG: e.UnitName: 28
        //DEBUG: e.Name: 30
        //DEBUG: e.Pattern: 32

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/5 AsIs: # Spec/11 AsIs: # NoPos/12 AsIs: (/14 AsIs: e.Name/30 AsIs: )/15 } Tile{ AsIs: </0 Reuse: & Map@16/4 } (/34 Tile{ AsIs: e.UnitName/28 } )/35 Tile{ AsIs: e.Pattern/32 } Tile{ HalfReuse: >/6 HalfReuse: )/1 ]] }
        refalrts::alloc_open_bracket(vm, context[34]);
        refalrts::alloc_close_bracket(vm, context[35]);
        refalrts::update_name(context[4], functions[efunc_gen_Map_Z16]);
        refalrts::reinit_close_call(context[6]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[5], context[1] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[34], context[35] );
        refalrts::link_brackets( context[14], context[15] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[6];
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_elem( res, context[34] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[5], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PatchAST-Item@1*13/4 e.UnitName/28 (/5 # Spec/11 s.LnNum/12 (/14 e.Name/30 )/15 e.Pattern/32 )/6 >/1
      context[28] = context[22];
      context[29] = context[23];
      context[30] = context[24];
      context[31] = context[25];
      context[32] = context[26];
      context[33] = context[27];
      // closed e.UnitName as range 28
      // closed e.Name as range 30
      // closed e.Pattern as range 32
      //DEBUG: s.LnNum: 12
      //DEBUG: e.UnitName: 28
      //DEBUG: e.Name: 30
      //DEBUG: e.Pattern: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Spec/4 } Tile{ AsIs: (/5 Reuse: # FileLine/11 AsIs: s.LnNum/12 } Tile{ AsIs: e.UnitName/28 } )/34 (/35 Tile{ AsIs: e.Name/30 } )/36 </37 & Map@16/38 Tile{ AsIs: (/14 } e.UnitName/28/39 Tile{ AsIs: )/15 AsIs: e.Pattern/32 HalfReuse: >/6 HalfReuse: )/1 ]] }
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::alloc_open_bracket(vm, context[35]);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::alloc_open_call(vm, context[37]);
      refalrts::alloc_name(vm, context[38], functions[efunc_gen_Map_Z16]);
      refalrts::copy_evar(vm, context[39], context[40], context[28], context[29]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Spec]);
      refalrts::update_ident(context[11], identifiers[ident_FileLine]);
      refalrts::reinit_close_call(context[6]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      refalrts::push_stack( vm, context[6] );
      refalrts::push_stack( vm, context[37] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::link_brackets( context[35], context[36] );
      refalrts::link_brackets( context[5], context[34] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[15];
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[36], context[38] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[5], context[12] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PatchAST-Item@1*13/4 e.UnitName/22 (/5 # Spec/11 (/12 # RowCol/30 s.Row/31 s.Col/32 )/13 (/14 e.Name/24 )/15 e.Pattern/26 )/6 >/1
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[20];
      context[25] = context[21];
      context[26] = context[18];
      context[27] = context[19];
      context[28] = 0;
      context[29] = 0;
      if( ! refalrts::brackets_term( context[28], context[29], context[12] ) )
        continue;
      context[30] = refalrts::ident_left( identifiers[ident_RowCol], context[28], context[29] );
      if( ! context[30] )
        continue;
      // closed e.UnitName as range 22
      // closed e.Name as range 24
      // closed e.Pattern as range 26
      if( ! refalrts::svar_left( context[31], context[28], context[29] ) )
        continue;
      if( ! refalrts::svar_left( context[32], context[28], context[29] ) )
        continue;
      if( ! refalrts::empty_seq( context[28], context[29] ) )
        continue;
      //DEBUG: e.UnitName: 22
      //DEBUG: e.Name: 24
      //DEBUG: e.Pattern: 26
      //DEBUG: s.Row: 31
      //DEBUG: s.Col: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/14 } Tile{ HalfReuse: # Spec/5 HalfReuse: (/11 HalfReuse: # FileRowCol/12 HalfReuse: (/30 AsIs: s.Row/31 AsIs: s.Col/32 AsIs: )/13 } Tile{ AsIs: e.UnitName/22 } )/33 (/34 Tile{ AsIs: e.Name/24 } )/35 Tile{ AsIs: </0 Reuse: & Map@16/4 } (/36 e.UnitName/22/37 Tile{ AsIs: )/15 AsIs: e.Pattern/26 HalfReuse: >/6 HalfReuse: )/1 ]] }
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_open_bracket(vm, context[34]);
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::copy_evar(vm, context[37], context[38], context[22], context[23]);
      refalrts::reinit_ident(context[5], identifiers[ident_Spec]);
      refalrts::reinit_open_bracket(context[11]);
      refalrts::reinit_ident(context[12], identifiers[ident_FileRowCol]);
      refalrts::reinit_open_bracket(context[30]);
      refalrts::update_name(context[4], functions[efunc_gen_Map_Z16]);
      refalrts::reinit_close_call(context[6]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[14], context[1] );
      refalrts::push_stack( vm, context[6] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[36], context[15] );
      refalrts::link_brackets( context[34], context[35] );
      refalrts::link_brackets( context[11], context[33] );
      refalrts::link_brackets( context[30], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[15];
      res = refalrts::splice_evar( res, context[37], context[38] );
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_evar( res, context[5], context[13] );
      res = refalrts::splice_elem( res, context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PatchAST-Item@1*13/4 e.UnitName/22 (/5 # Spec/11 t.SrcPos/12 (/14 e.Name/24 )/15 e.Pattern/26 )/6 >/1
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[20];
    context[25] = context[21];
    context[26] = context[18];
    context[27] = context[19];
    // closed e.UnitName as range 22
    // closed e.Name as range 24
    // closed e.Pattern as range 26
    //DEBUG: t.SrcPos: 12
    //DEBUG: e.UnitName: 22
    //DEBUG: e.Name: 24
    //DEBUG: e.Pattern: 26

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/28 # Spec/29 </30 Tile{ HalfReuse: & PatchASTSrcPos=1\1*4/0 HalfReuse: (/4 AsIs: e.UnitName/22 HalfReuse: )/5 Reuse: # SrcPos/11 AsIs: t.SrcPos/12 HalfReuse: >/14 } (/31 Tile{ AsIs: e.Name/24 } )/32 </33 & Map@16/34 (/35 e.UnitName/22/36 Tile{ AsIs: )/15 AsIs: e.Pattern/26 HalfReuse: >/6 HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[28]);
    refalrts::alloc_ident(vm, context[29], identifiers[ident_Spec]);
    refalrts::alloc_open_call(vm, context[30]);
    refalrts::alloc_open_bracket(vm, context[31]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_gen_Map_Z16]);
    refalrts::alloc_open_bracket(vm, context[35]);
    refalrts::copy_evar(vm, context[36], context[37], context[22], context[23]);
    refalrts::reinit_name(context[0], functions[efunc_gen_PatchASTSrcPos_A1L1D4]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_close_bracket(context[5]);
    refalrts::update_ident(context[11], identifiers[ident_SrcPos]);
    refalrts::reinit_close_call(context[14]);
    refalrts::reinit_close_call(context[6]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[28], context[1] );
    refalrts::push_stack( vm, context[6] );
    refalrts::push_stack( vm, context[33] );
    refalrts::link_brackets( context[35], context[15] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[30] );
    refalrts::link_brackets( context[4], context[5] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[15];
    res = refalrts::splice_evar( res, context[36], context[37] );
    res = refalrts::splice_evar( res, context[32], context[35] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_elem( res, context[31] );
    res = refalrts::splice_evar( res, context[0], context[14] );
    res = refalrts::splice_evar( res, context[28], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PatchAST-Item@1*13/4 e.UnitName/2 t.item/5 >/1
  // closed e.UnitName as range 2
  //DEBUG: t.item: 5
  //DEBUG: e.UnitName: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PatchAST-Item@0/4 } [*]/7 & PatchASTSrcPos=1\1@0/8 (/9 Tile{ AsIs: e.UnitName/2 } )/10 {*}/11 Tile{ AsIs: t.item/5 AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_PatchASTSrcPos_A1L1Z0]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[7]);
  refalrts::update_name(context[4], functions[efunc_gen_PatchASTm_Item_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[5];
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[9] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PatchASTm_Item_Z1D13("PatchAST-Item@1*13", COOKIE1_, COOKIE2_, func_gen_PatchASTm_Item_Z1D13);


static refalrts::FnResult func_gen_PatchASTm_Item_D4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & PatchAST-Item*4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PatchAST-Item*4/4 s.new1/9 (/7 s.new2/10 t.new3/11 t.new4/13 e.new5/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = refalrts::tvar_left( context[11], context[5], context[6] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[14] = refalrts::tvar_left( context[13], context[5], context[6] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 5
  do {
    // </0 & PatchAST-Item*4/4 s.FnPatch/9 (/7 s.Label/10 t.SrcPos/11 s.ScopeClass/13 e.Name/15 )/8 >/1
    context[15] = context[5];
    context[16] = context[6];
    if( ! refalrts::svar_term( context[13], context[13] ) )
      continue;
    // closed e.Name as range 15
    //DEBUG: t.SrcPos: 11
    //DEBUG: s.ScopeClass: 13
    //DEBUG: s.FnPatch: 9
    //DEBUG: s.Label: 10
    //DEBUG: e.Name: 15
    //9: s.FnPatch
    //10: s.Label
    //11: t.SrcPos
    //13: s.ScopeClass
    //15: e.Name
    //22: s.Label

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[19], functions[efunc_gen_PatchASTm_Item_D4S5C1]);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_OneOf]);
    refalrts::copy_stvar(vm, context[22], context[10]);
    refalrts::alloc_ident(vm, context[23], identifiers[ident_Enum]);
    refalrts::alloc_ident(vm, context[24], identifiers[ident_Swap]);
    refalrts::alloc_ident(vm, context[25], identifiers[ident_Declaration]);
    refalrts::alloc_ident(vm, context[26], identifiers[ident_Entry]);
    refalrts::alloc_ident(vm, context[27], identifiers[ident_Inline]);
    refalrts::alloc_ident(vm, context[28], identifiers[ident_Drive]);
    refalrts::alloc_ident(vm, context[29], identifiers[ident_Intrinsic]);
    refalrts::alloc_ident(vm, context[30], identifiers[ident_Meta]);
    refalrts::alloc_close_call(vm, context[31]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[17] );
    res = refalrts::splice_elem( res, context[18] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[20] );
    res = refalrts::splice_elem( res, context[31] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_stvar( res, context[22] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_elem( res, context[17] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </17 & PatchAST-Item*4$5?1/21 # True/22 >/18
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::call_left( context[19], context[20], context[17], context[18] );
      context[22] = refalrts::ident_left( identifiers[ident_True], context[19], context[20] );
      if( ! context[22] )
        continue;
      if( ! refalrts::empty_seq( context[19], context[20] ) )
        continue;
      //DEBUG: t.SrcPos: 11
      //DEBUG: s.ScopeClass: 13
      //DEBUG: s.FnPatch: 9
      //DEBUG: s.Label: 10
      //DEBUG: e.Name: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Label/10 {REMOVED TILE} s.ScopeClass/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/23 Tile{ HalfReuse: s.Label10 /8 AsIs: </17 HalfReuse: s.FnPatch9 /21 Reuse: # SrcPos/22 } Tile{ AsIs: t.SrcPos/11 } >/24 Tile{ HalfReuse: s.ScopeClass13 /0 HalfReuse: </4 AsIs: s.FnPatch/9 HalfReuse: # Name/7 } Tile{ AsIs: e.Name/15 } Tile{ AsIs: >/18 HalfReuse: )/1 ]] }
      refalrts::alloc_open_bracket(vm, context[23]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_svar( context[8], context[10] );
      refalrts::reinit_svar( context[21], context[9] );
      refalrts::update_ident(context[22], identifiers[ident_SrcPos]);
      refalrts::reinit_svar( context[0], context[13] );
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_ident(context[7], identifiers[ident_Name]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[23], context[1] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[4] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[18];
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[0], context[7] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[8], context[22] );
      res = refalrts::splice_elem( res, context[23] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[17], context[18]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PatchAST-Item*4/4 s.FnPatch/9 (/7 # Spec/10 t.SrcPos/11 (/13 e.Name/15 )/14 e.Pattern/5 )/8 >/1
  context[15] = 0;
  context[16] = 0;
  if( ! refalrts::brackets_term( context[15], context[16], context[13] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::ident_term( identifiers[ident_Spec], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 15
  // closed e.Pattern as range 5
  //DEBUG: t.SrcPos: 11
  //DEBUG: s.FnPatch: 9
  //DEBUG: e.Name: 15
  //DEBUG: e.Pattern: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Spec/4 } </17 Tile{ HalfReuse: s.FnPatch9 /7 Reuse: # SrcPos/10 AsIs: t.SrcPos/11 HalfReuse: >/13 } (/18 </19 Tile{ AsIs: s.FnPatch/9 } # Name/20 Tile{ AsIs: e.Name/15 } >/21 )/22 </23 & Map@5/24 Tile{ HalfReuse: s.FnPatch9 /14 AsIs: e.Pattern/5 HalfReuse: >/8 HalfReuse: )/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_ident(vm, context[20], identifiers[ident_Name]);
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_gen_Map_Z5]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Spec]);
  refalrts::reinit_svar( context[7], context[9] );
  refalrts::update_ident(context[10], identifiers[ident_SrcPos]);
  refalrts::reinit_close_call(context[13]);
  refalrts::reinit_svar( context[14], context[9] );
  refalrts::reinit_close_call(context[8]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[18], context[22] );
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[14];
  res = refalrts::splice_evar( res, context[21], context[24] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_evar( res, context[7], context[13] );
  res = refalrts::splice_elem( res, context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PatchASTm_Item_D4("PatchAST-Item*4", COOKIE1_, COOKIE2_, func_gen_PatchASTm_Item_D4);


static refalrts::FnResult func_gen_PatchASTm_Item_Z2D4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & PatchAST-Item@2*4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PatchAST-Item@2*4/4 e.new1/2 s.new2/7 t.new3/5 >/1
  context[6] = refalrts::tvar_right( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_right( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 2
  do {
    // </0 & PatchAST-Item@2*4/4 e.new9/8 s.new8/7 (/5 s.new4/12 t.new5/13 t.new6/15 e.new7/10 )/6 >/1
    context[8] = context[2];
    context[9] = context[3];
    context[10] = 0;
    context[11] = 0;
    if( ! refalrts::brackets_term( context[10], context[11], context[5] ) )
      continue;
    // closed e.new9 as range 8
    if( ! refalrts::svar_left( context[12], context[10], context[11] ) )
      continue;
    context[14] = refalrts::tvar_left( context[13], context[10], context[11] );
    if( ! context[14] )
      continue;
    context[16] = refalrts::tvar_left( context[15], context[10], context[11] );
    if( ! context[16] )
      continue;
    // closed e.new7 as range 10
    do {
      // </0 & PatchAST-Item@2*4/4 e.Locals$a/17 s.NextLocalId/7 (/5 s.Label/12 t.SrcPos/13 s.ScopeClass/15 e.Name/19 )/6 >/1
      context[17] = context[8];
      context[18] = context[9];
      context[19] = context[10];
      context[20] = context[11];
      if( ! refalrts::svar_term( context[15], context[15] ) )
        continue;
      // closed e.Locals$a as range 17
      // closed e.Name as range 19
      //DEBUG: t.SrcPos: 13
      //DEBUG: s.ScopeClass: 15
      //DEBUG: s.NextLocalId: 7
      //DEBUG: s.Label: 12
      //DEBUG: e.Locals$a: 17
      //DEBUG: e.Name: 19
      //7: s.NextLocalId
      //12: s.Label
      //13: t.SrcPos
      //15: s.ScopeClass
      //17: e.Locals$a
      //19: e.Name
      //26: s.Label

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_PatchASTm_Item_Z2D4S5C1]);
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_name(vm, context[25], functions[efunc_OneOf]);
      refalrts::copy_stvar(vm, context[26], context[12]);
      refalrts::alloc_ident(vm, context[27], identifiers[ident_Enum]);
      refalrts::alloc_ident(vm, context[28], identifiers[ident_Swap]);
      refalrts::alloc_ident(vm, context[29], identifiers[ident_Declaration]);
      refalrts::alloc_ident(vm, context[30], identifiers[ident_Entry]);
      refalrts::alloc_ident(vm, context[31], identifiers[ident_Inline]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Drive]);
      refalrts::alloc_ident(vm, context[33], identifiers[ident_Intrinsic]);
      refalrts::alloc_ident(vm, context[34], identifiers[ident_Meta]);
      refalrts::alloc_close_call(vm, context[35]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[21] );
      res = refalrts::splice_elem( res, context[22] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[24] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_elem( res, context[32] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_stvar( res, context[26] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </21 & PatchAST-Item@2*4$5?1/25 # True/26 >/22
        context[23] = 0;
        context[24] = 0;
        context[25] = refalrts::call_left( context[23], context[24], context[21], context[22] );
        context[26] = refalrts::ident_left( identifiers[ident_True], context[23], context[24] );
        if( ! context[26] )
          continue;
        if( ! refalrts::empty_seq( context[23], context[24] ) )
          continue;
        //DEBUG: t.SrcPos: 13
        //DEBUG: s.ScopeClass: 15
        //DEBUG: s.NextLocalId: 7
        //DEBUG: s.Label: 12
        //DEBUG: e.Locals$a: 17
        //DEBUG: e.Name: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Label/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } (/27 Tile{ HalfReuse: s.Label12 /6 AsIs: </21 Reuse: & GlobalASTStorage-AddAST=4\1/25 HalfReuse: (/26 } Tile{ AsIs: e.Locals$a/17 } )/28 Tile{ AsIs: s.NextLocalId/7 HalfReuse: # SrcPos/5 } Tile{ AsIs: t.SrcPos/13 } >/29 Tile{ AsIs: s.ScopeClass/15 } Tile{ AsIs: </0 Reuse: & GlobalASTStorage-AddAST=4\1/4 } (/30 e.Locals$a/17/31 )/33 s.NextLocalId/7/34 # Name/35 Tile{ AsIs: e.Name/19 } Tile{ AsIs: >/22 HalfReuse: )/1 ]] }
        refalrts::alloc_open_bracket(vm, context[27]);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::alloc_open_bracket(vm, context[30]);
        refalrts::copy_evar(vm, context[31], context[32], context[17], context[18]);
        refalrts::alloc_close_bracket(vm, context[33]);
        refalrts::copy_stvar(vm, context[34], context[7]);
        refalrts::alloc_ident(vm, context[35], identifiers[ident_Name]);
        refalrts::reinit_svar( context[6], context[12] );
        refalrts::update_name(context[25], functions[efunc_gen_GlobalASTStoragem_AddAST_A4L1]);
        refalrts::reinit_open_bracket(context[26]);
        refalrts::reinit_ident(context[5], identifiers[ident_SrcPos]);
        refalrts::update_name(context[4], functions[efunc_gen_GlobalASTStoragem_AddAST_A4L1]);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[27], context[1] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[30], context[33] );
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[21] );
        refalrts::link_brackets( context[26], context[28] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[22];
        res = refalrts::splice_evar( res, context[19], context[20] );
        res = refalrts::splice_evar( res, context[30], context[35] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_elem( res, context[29] );
        res = refalrts::splice_evar( res, context[13], context[14] );
        res = refalrts::splice_evar( res, context[7], context[5] );
        res = refalrts::splice_elem( res, context[28] );
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_evar( res, context[6], context[26] );
        res = refalrts::splice_elem( res, context[27] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[21], context[22]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PatchAST-Item@2*4/4 e.Locals$a/17 s.NextLocalId/7 (/5 # Spec/12 t.SrcPos/13 (/15 e.Name/21 )/16 e.Pattern/19 )/6 >/1
    context[17] = context[8];
    context[18] = context[9];
    context[19] = context[10];
    context[20] = context[11];
    context[21] = 0;
    context[22] = 0;
    if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_Spec], context[12] ) )
      continue;
    // closed e.Locals$a as range 17
    // closed e.Name as range 21
    // closed e.Pattern as range 19
    //DEBUG: t.SrcPos: 13
    //DEBUG: s.NextLocalId: 7
    //DEBUG: e.Locals$a: 17
    //DEBUG: e.Name: 21
    //DEBUG: e.Pattern: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/5 AsIs: # Spec/12 AsIs: t.SrcPos/13 AsIs: (/15 } Tile{ AsIs: </0 Reuse: & GlobalASTStorage-AddAST=4\1*1/4 } (/23 Tile{ AsIs: e.Locals$a/17 } )/24 Tile{ AsIs: s.NextLocalId/7 } # Name/25 Tile{ AsIs: e.Name/21 } >/26 )/27 </28 & Map@17/29 (/30 e.Locals$a/17/31 )/33 Tile{ HalfReuse: s.NextLocalId7 /16 AsIs: e.Pattern/19 HalfReuse: >/6 HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::alloc_ident(vm, context[25], identifiers[ident_Name]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::alloc_close_bracket(vm, context[27]);
    refalrts::alloc_open_call(vm, context[28]);
    refalrts::alloc_name(vm, context[29], functions[efunc_gen_Map_Z17]);
    refalrts::alloc_open_bracket(vm, context[30]);
    refalrts::copy_evar(vm, context[31], context[32], context[17], context[18]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::update_name(context[4], functions[efunc_gen_GlobalASTStoragem_AddAST_A4L1D1]);
    refalrts::reinit_svar( context[16], context[7] );
    refalrts::reinit_close_call(context[6]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[5], context[1] );
    refalrts::push_stack( vm, context[6] );
    refalrts::push_stack( vm, context[28] );
    refalrts::link_brackets( context[30], context[33] );
    refalrts::link_brackets( context[15], context[27] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[16];
    res = refalrts::splice_evar( res, context[26], context[33] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[5], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PatchAST-Item@2*4/4 e.Locals$a/2 s.NextLocalId/7 t.item/5 >/1
  // closed e.Locals$a as range 2
  //DEBUG: t.item: 5
  //DEBUG: s.NextLocalId: 7
  //DEBUG: e.Locals$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PatchAST-Item@0/4 } [*]/8 & GlobalASTStorage-AddAST=4\1@0/9 (/10 Tile{ AsIs: e.Locals$a/2 } )/11 Tile{ AsIs: s.NextLocalId/7 } {*}/12 Tile{ AsIs: t.item/5 AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_GlobalASTStoragem_AddAST_A4L1Z0]);
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::alloc_unwrapped_closure(vm, context[12], context[8]);
  refalrts::update_name(context[4], functions[efunc_gen_PatchASTm_Item_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[5];
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[8], context[10] );
  refalrts::use( res );
  refalrts::wrap_closure( context[12] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PatchASTm_Item_Z2D4("PatchAST-Item@2*4", COOKIE1_, COOKIE2_, func_gen_PatchASTm_Item_Z2D4);


//End of file
