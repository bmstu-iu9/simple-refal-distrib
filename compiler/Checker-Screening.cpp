// This file automatically generated from 'Checker-Screening.ref'
// Don't edit! Edit 'Checker-Screening.ref' and recompile it

#include "refalrts.h"

#define cookie_ns cookie_ns_2922715431_3031266580
#define COOKIE1_ 2922715431U
#define COOKIE2_ 3031266580U

enum efunc {
  efunc_u_u_Stepm_Drop = 0,
  efunc_u_u_Metau_Mu = 1,
  efunc_d_table = 2,
  efunc_Map = 3,
  efunc_gen_Apply_Z3 = 4,
  efunc_gen_Apply_Z0 = 5,
  efunc_Reduce = 6,
  efunc_gen_Reduce_S1A1 = 7,
  efunc_gen_Apply_Z2 = 8,
  efunc_Apply = 9,
  efunc_DoMapAccum = 10,
  efunc_gen_DoMapAccum_S1A1 = 11,
  efunc_Add = 12,
  efunc_Sub = 13,
  efunc_Fetch = 14,
  efunc_Pipe = 15,
  efunc_gen_Pipe_S2L1 = 16,
  efunc_gen_Pipe_S3L1 = 17,
  efunc_gen_Map_Z1 = 18,
  efunc_gen_CheckScreening_S1A4 = 19,
  efunc_Zip = 20,
  efunc_Passm_EnumerateVariables = 21,
  efunc_gen_CheckScreening_S1A3 = 22,
  efunc_Passm_RemovePos = 23,
  efunc_gen_CheckScreening_S1A2 = 24,
  efunc_gen_CheckScreening_S1A1 = 25,
  efunc_gen_DoMapAccum_Z1 = 26,
  efunc_MakePairs = 27,
  efunc_gen_Map_Z2 = 28,
  efunc_gen_CheckSentences_A1Z1 = 29,
  efunc_gen_Enumerate_A1 = 30,
  efunc_gen_DoMapAccum_Z2 = 31,
  efunc_DelAccumulator = 32,
  efunc_gen_DoMapAccum_Z3 = 33,
  efunc_gen_DoMapAccum_Z4 = 34,
  efunc_gen_DoMapAccum_Z5 = 35,
  efunc_gen_Map_Z3 = 36,
  efunc_gen_CheckSentences_L1A3Z1 = 37,
  efunc_Unique = 38,
  efunc_ExtractVariablesm_Expr = 39,
  efunc_gen_DoMapAccum_Z6 = 40,
  efunc_gen_CheckPatternPairs_S1A1 = 41,
  efunc_gen_Map_Z4 = 42,
  efunc_gen_CheckSentences_A3 = 43,
  efunc_gen_CheckSentences_A2 = 44,
  efunc_gen_CheckSentences_A1 = 45,
  efunc_gen_DoMapAccum_Z7 = 46,
  efunc_gen_DoMapAccum_Z8 = 47,
  efunc_gen_CheckSentenceAssignsAndConditions_L1S1C1 = 48,
  efunc_gen_CheckSentenceAssignsAndConditions_L1S1C1B1 = 49,
  efunc_gen_CheckSentenceAssignsAndConditions_L1S1A2 = 50,
  efunc_Symb = 51,
  efunc_gen_CreateScreeningWarning_Z1 = 52,
  efunc_gen_CheckPatternPairs_S1L1B1S1C1 = 53,
  efunc_gen_CheckPatternPairs_S1L1B1S3B1 = 54,
  efunc_gen_PatternLanguagesCheck_Z1 = 55,
  efunc_gen_Map_Z5 = 56,
  efunc_CreateContext = 57,
  efunc_gen_CheckPatternPairs_S1A2 = 58,
  efunc_gen_CheckEveryMatch_S1B1Z1 = 59,
  efunc_ObjectMatch = 60,
  efunc_gen_CheckEveryMatch_Z0 = 61,
  efunc_gen_PatternLanguagesCheck_S1A10 = 62,
  efunc_gen_DoMapAccum_Z9 = 63,
  efunc_gen_PatternLanguagesCheck_S1A9 = 64,
  efunc_GenericMatch = 65,
  efunc_gen_PatternLanguagesCheck_S1A8 = 66,
  efunc_gen_DoMapAccum_Z10 = 67,
  efunc_gen_PatternLanguagesCheck_S1A7 = 68,
  efunc_gen_Generalize_A1 = 69,
  efunc_GlobalGen = 70,
  efunc_gen_PatternLanguagesCheck_S1A6 = 71,
  efunc_gen_PatternLanguagesCheck_S1A5 = 72,
  efunc_gen_Map_Z6 = 73,
  efunc_gen_Normalize_A1 = 74,
  efunc_gen_Map_Z7 = 75,
  efunc_gen_PatternLanguagesCheck_S1A4 = 76,
  efunc_gen_PatternLanguagesCheck_S1C1 = 77,
  efunc_FlattenPattern = 78,
  efunc_gen_PatternLanguagesCheck_S1C2 = 79,
  efunc_IsPatternLinear = 80,
  efunc_gen_PatternLanguagesCheck_S1A3 = 81,
  efunc_ReplaceADTBrackets = 82,
  efunc_gen_CheckEveryMatch_S1B1 = 83,
  efunc_gen_CheckEveryMatch_D2 = 84,
  efunc_AppendAssigns = 85,
  efunc_gen_CheckEveryMatch_S1B1S1B1 = 86,
  efunc_gen_CreateTuplePairs_L1C1 = 87,
  efunc_gen_CreateTuplePairs_L1C2 = 88,
  efunc_gen_DoMapAccum_Z11 = 89,
  efunc_gen_Map_Z8 = 90,
  efunc_gen_Normalize_A5 = 91,
  efunc_InsertFakeEVars = 92,
  efunc_gen_Normalize_A4 = 93,
  efunc_gen_MarkupNeighbourHelper_Z1 = 94,
  efunc_gen_Normalize_A3 = 95,
  efunc_gen_Map_Z9 = 96,
  efunc_gen_CountTVarsMultiplicity_B1 = 97,
  efunc_gen_DoMapAccum_Z12 = 98,
  efunc_gen_Normalize_A2 = 99,
  efunc_gen_MarkupNeighbourHelper_S1C1 = 100,
  efunc_HasAnchorsPrefix = 101,
  efunc_gen_MarkupNeighbourHelper_S1C2 = 102,
  efunc_HasAnchorsSuffix = 103,
  efunc_gen_MarkupMultipleAnchorTVars_L1S1C1 = 104,
  efunc_HasMultiplicity = 105,
  efunc_gen_HasMultiplicity_B1 = 106,
  efunc_Mu = 107,
  efunc_Up = 108,
  efunc_Evm_met = 109,
  efunc_Residue = 110,
  efunc_u_u_Metau_Residue = 111,
  efunc_MapAccum = 112,
  efunc_UnBracket = 113,
  efunc_Inc = 114,
  efunc_Dec = 115,
  efunc_CheckScreening = 116,
  efunc_FindFunctionsPosInAST = 117,
  efunc_CheckFunction = 118,
  efunc_CheckSentences = 119,
  efunc_FilterConditions = 120,
  efunc_CheckSentenceBlocks = 121,
  efunc_CheckBlocks = 122,
  efunc_CheckSentenceAssignsAndConditions = 123,
  efunc_CheckSentenceResult = 124,
  efunc_CheckSentencePattern = 125,
  efunc_CheckExpression = 126,
  efunc_CheckPatternPairs = 127,
  efunc_PatternLanguagesCheck = 128,
  efunc_CheckEveryMatch = 129,
  efunc_CreateTuplePairs = 130,
  efunc_RenameVars = 131,
  efunc_Normalize = 132,
  efunc_DeleteMarkup = 133,
  efunc_MarkupNeighbourAnchorTVars = 134,
  efunc_MarkupNeighbourHelper = 135,
  efunc_MarkupMultipleAnchorTVars = 136,
  efunc_CountTVarsMultiplicity = 137,
  efunc_IncMultiplicity = 138,
  efunc_HasPatternTVars = 139,
  efunc_IsPatternFlat = 140,
  efunc_Generalize = 141,
  efunc_CreateScreeningWarning = 142,
  efunc_Enumerate = 143,
  efunc_gen_Apply_Z4 = 144,
  efunc_gen_CheckFunction_D1 = 145,
  efunc_gen_Map_Z0 = 146,
  efunc_gen_CheckFunction_Z0 = 147,
  efunc_gen_FindFunctionsPosInAST_L1D2 = 148,
  efunc_gen_DoMapAccum_S1A1Z1 = 149,
  efunc_gen_DoMapAccum_Z0 = 150,
  efunc_gen_FindFunctionsPosInAST_L1Z0 = 151,
  efunc_gen_MakePairs_S1L1Z0 = 152,
  efunc_gen_DoMapAccum_S1A1Z2 = 153,
  efunc_gen_Enumerate_A1L1D1 = 154,
  efunc_gen_Enumerate_A1L1Z0 = 155,
  efunc_gen_CheckSentences_A2Z1 = 156,
  efunc_gen_CheckSentences_A1Z0 = 157,
  efunc_gen_CheckSentenceAssignsAndConditions_L1 = 158,
  efunc_gen_DoMapAccum_S1A1Z3 = 159,
  efunc_gen_CheckSentenceAssignsAndConditions_L1Z0 = 160,
  efunc_gen_DoMapAccum_S1A1Z4 = 161,
  efunc_gen_CheckSentences_Z3 = 162,
  efunc_gen_CheckExpression_L1D5 = 163,
  efunc_gen_CheckExpression_L1Z0 = 164,
  efunc_gen_CheckSentences_Z4 = 165,
  efunc_gen_DoMapAccum_S1A1Z5 = 166,
  efunc_gen_CheckBlocks_L1D2 = 167,
  efunc_gen_CheckBlocks_L1Z0 = 168,
  efunc_gen_CheckSentences_L1A3L1D1 = 169,
  efunc_gen_CheckSentences_L1A3L1Z0 = 170,
  efunc_gen_DoMapAccum_Z13 = 171,
  efunc_gen_DoMapAccum_Z14 = 172,
  efunc_gen_CheckSentences_L1A3Z0 = 173,
  efunc_gen_CheckSentences_L1A1 = 174,
  efunc_gen_DoMapAccum_S1A1Z6 = 175,
  efunc_gen_CheckSentences_L1D1 = 176,
  efunc_gen_CheckSentences_L1Z0 = 177,
  efunc_gen_FilterConditions_L1D1 = 178,
  efunc_gen_FilterConditions_L1Z0 = 179,
  efunc_gen_CheckSentences_Z1 = 180,
  efunc_gen_DoMapAccum_S1A1Z7 = 181,
  efunc_gen_CheckSentences_A1Z2 = 182,
  efunc_gen_CheckSentences_Z0 = 183,
  efunc_gen_DoMapAccum_S1A1Z8 = 184,
  efunc_gen_CheckSentences_Z2 = 185,
  efunc_gen_CheckSentences_A1Z3 = 186,
  efunc_gen_CreateScreeningWarning_Z0 = 187,
  efunc_gen_PatternLanguagesCheck_Z1S1C1 = 188,
  efunc_gen_FlattenPattern_Z1 = 189,
  efunc_gen_PatternLanguagesCheck_Z1S1C2 = 190,
  efunc_gen_PatternLanguagesCheck_S1A3Z1 = 191,
  efunc_gen_ReplaceADTBrackets_Z1 = 192,
  efunc_gen_PatternLanguagesCheck_Z0 = 193,
  efunc_gen_CheckPatternPairs_S1L1B1 = 194,
  efunc_gen_CheckPatternPairs_S1L1D1 = 195,
  efunc_gen_CheckPatternPairs_S1L1Z0 = 196,
  efunc_gen_CreateTuplePairs_L1 = 197,
  efunc_gen_DoMapAccum_S1A1Z9 = 198,
  efunc_gen_CreateTuplePairs_L1Z0 = 199,
  efunc_gen_DoMapAccum_S1A1Z10 = 200,
  efunc_gen_RenameVars_Z2 = 201,
  efunc_gen_RenameVars_L1D3 = 202,
  efunc_gen_RenameVars_L1Z0 = 203,
  efunc_gen_FlattenPattern_L1Z0 = 204,
  efunc_gen_ReplaceADTBrackets_L1Z0 = 205,
  efunc_gen_DoMapAccum_Z15 = 206,
  efunc_gen_RenameVars_Z0 = 207,
  efunc_gen_DoMapAccum_S1A1Z11 = 208,
  efunc_gen_RenameVars_Z1 = 209,
  efunc_gen_DeleteMarkup_L1Z0 = 210,
  efunc_gen_MarkupNeighbourHelper_Z1S1C1 = 211,
  efunc_gen_MarkupNeighbourHelper_Z1S1C2 = 212,
  efunc_gen_MarkupNeighbourHelper_Z0 = 213,
  efunc_gen_MarkupMultipleAnchorTVars_L1 = 214,
  efunc_gen_MarkupMultipleAnchorTVars_L1Z0 = 215,
  efunc_gen_DoMapAccum_S1A1Z12 = 216,
  efunc_gen_CountTVarsMultiplicity_L1D2 = 217,
  efunc_gen_CountTVarsMultiplicity_L1Z0 = 218,
  efunc_gen_DoMapAccum_S1A1Z0 = 219,
  efunc_gen_CheckSentences_A3Z1 = 220,
  efunc_gen_CheckSentences_A2Z0 = 221,
  efunc_gen_CheckSentences_A1Z4 = 222,
  efunc_gen_CheckSentences_A1Z5 = 223,
  efunc_gen_DoMapAccum_S1A1Z13 = 224,
  efunc_gen_CheckSentences_Z5 = 225,
  efunc_gen_CheckSentences_Z6 = 226,
  efunc_gen_DoMapAccum_S1A1Z14 = 227,
  efunc_gen_CheckSentences_A2Z2 = 228,
  efunc_gen_CheckSentences_A2Z3 = 229,
  efunc_gen_FlattenPattern_Z0 = 230,
  efunc_gen_ReplaceADTBrackets_Z0 = 231,
  efunc_gen_PatternLanguagesCheck_S1A3Z0 = 232,
  efunc_gen_CheckEveryMatch_S1B1Z0 = 233,
  efunc_gen_DoMapAccum_Z16 = 234,
  efunc_gen_DoMapAccum_S1A1Z15 = 235,
  efunc_gen_DoMapAccum_Z17 = 236,
  efunc_gen_CheckPatternPairs_S1A1Z1 = 237,
  efunc_gen_CheckSentences_A3Z0 = 238,
  efunc_gen_CheckSentences_A2Z4 = 239,
  efunc_gen_CheckSentences_A2Z5 = 240,
  efunc_gen_CheckSentences_A1Z6 = 241,
  efunc_gen_CheckSentences_A1Z7 = 242,
  efunc_gen_CheckSentences_A3Z2 = 243,
  efunc_gen_CheckSentences_A3Z3 = 244,
  efunc_gen_DoMapAccum_S1A1Z16 = 245,
  efunc_gen_CheckPatternPairs_S1A2Z1 = 246,
  efunc_gen_CheckPatternPairs_S1A1Z0 = 247,
  efunc_gen_CheckSentences_L1A1Z1 = 248,
  efunc_gen_DoMapAccum_S1A1Z17 = 249,
  efunc_gen_CheckSentences_A3Z4 = 250,
  efunc_gen_CheckSentences_A3Z5 = 251,
  efunc_gen_CheckSentences_A2Z6 = 252,
  efunc_gen_CheckSentences_A2Z7 = 253,
  efunc_gen_DoMapAccum_Z18 = 254,
  efunc_gen_CheckPatternPairs_S1A1Z2 = 255,
  efunc_gen_DoMapAccum_Z19 = 256,
  efunc_gen_CheckPatternPairs_S1A1Z3 = 257,
  efunc_gen_Map_Z10 = 258,
  efunc_gen_CheckPatternPairs_S1A2Z0 = 259,
  efunc_gen_CheckSentences_L1A3 = 260,
  efunc_gen_CheckSentences_L1A1Z0 = 261,
  efunc_gen_DoMapAccum_Z20 = 262,
  efunc_gen_DoMapAccum_Z21 = 263,
  efunc_gen_CheckSentences_A3Z6 = 264,
  efunc_gen_CheckSentences_A3Z7 = 265,
  efunc_gen_CheckPatternPairs_S1A2Z2 = 266,
  efunc_gen_DoMapAccum_S1A1Z18 = 267,
  efunc_gen_CheckPatternPairs_S1A2Z3 = 268,
  efunc_gen_DoMapAccum_S1A1Z19 = 269,
  efunc_gen_CheckPatternPairs_S1L1B1Z1 = 270,
  efunc_gen_CheckSentences_L1A1Z2 = 271,
  efunc_gen_DoMapAccum_S1A1Z20 = 272,
  efunc_gen_DoMapAccum_S1A1Z21 = 273,
  efunc_gen_DoMapAccum_Z22 = 274,
  efunc_gen_DoMapAccum_Z23 = 275,
  efunc_gen_Map_Z11 = 276,
  efunc_gen_Map_Z12 = 277,
  efunc_gen_CheckPatternPairs_S1L1B1Z1S1C1 = 278,
  efunc_gen_CreateScreeningWarning_Z2 = 279,
  efunc_gen_CheckPatternPairs_S1L1B1S3B1Z1 = 280,
  efunc_gen_CheckPatternPairs_S1L1B1Z0 = 281,
  efunc_gen_DoMapAccum_S1A1Z22 = 282,
  efunc_gen_DoMapAccum_S1A1Z23 = 283,
  efunc_gen_CheckPatternPairs_S1L1B1Z2 = 284,
  efunc_gen_CheckPatternPairs_S1L1B1Z3 = 285,
  efunc_gen_CheckPatternPairs_S1L1B1S3B1Z0 = 286,
  efunc_gen_CheckPatternPairs_S1L1B1Z2S1C1 = 287,
  efunc_gen_CreateScreeningWarning_Z3 = 288,
  efunc_gen_CheckPatternPairs_S1L1B1S3B1Z2 = 289,
  efunc_gen_CheckPatternPairs_S1L1B1Z3S1C1 = 290,
  efunc_gen_CreateScreeningWarning_Z4 = 291,
  efunc_gen_CheckPatternPairs_S1L1B1S3B1Z3 = 292,
};


enum ident {
  ident_screening = 0,
  ident_Function = 1,
  ident_Sentences = 2,
  ident_Assign = 3,
  ident_Condition = 4,
  ident_True = 5,
  ident_False = 6,
  ident_Clear = 7,
  ident_NoMarkupContext = 8,
  ident_Success = 9,
  ident_Fails = 10,
  ident_Var = 11,
  ident_Float = 12,
  ident_Brackets = 13,
  ident_MarkedBrackets = 14,
  ident_Anchor = 15,
  ident_Symbol = 16,
  ident_Screening = 17,
  ident_Warning = 18,
  ident_Mu = 19,
  ident_Up = 20,
  ident_Evm_met = 21,
  ident_Residue = 22,
  ident_u_u_Metau_Residue = 23,
  ident_Apply = 24,
  ident_Map = 25,
  ident_Reduce = 26,
  ident_Fetch = 27,
  ident_MapAccum = 28,
  ident_DoMapAccum = 29,
  ident_UnBracket = 30,
  ident_DelAccumulator = 31,
  ident_Inc = 32,
  ident_Dec = 33,
  ident_Pipe = 34,
  ident_CheckScreening = 35,
  ident_FindFunctionsPosInAST = 36,
  ident_MakePairs = 37,
  ident_CheckFunction = 38,
  ident_CheckSentences = 39,
  ident_FilterConditions = 40,
  ident_CheckSentenceBlocks = 41,
  ident_CheckBlocks = 42,
  ident_CheckSentenceAssignsAndConditions = 43,
  ident_CheckSentenceResult = 44,
  ident_CheckSentencePattern = 45,
  ident_CheckExpression = 46,
  ident_CheckPatternPairs = 47,
  ident_PatternLanguagesCheck = 48,
  ident_ReplaceADTBrackets = 49,
  ident_CheckEveryMatch = 50,
  ident_AppendAssigns = 51,
  ident_CreateTuplePairs = 52,
  ident_RenameVars = 53,
  ident_Normalize = 54,
  ident_DeleteMarkup = 55,
  ident_InsertFakeEVars = 56,
  ident_MarkupNeighbourAnchorTVars = 57,
  ident_MarkupNeighbourHelper = 58,
  ident_HasAnchorsPrefix = 59,
  ident_HasAnchorsSuffix = 60,
  ident_MarkupMultipleAnchorTVars = 61,
  ident_CountTVarsMultiplicity = 62,
  ident_HasMultiplicity = 63,
  ident_IncMultiplicity = 64,
  ident_HasPatternTVars = 65,
  ident_IsPatternLinear = 66,
  ident_IsPatternFlat = 67,
  ident_FlattenPattern = 68,
  ident_Generalize = 69,
  ident_CreateScreeningWarning = 70,
  ident_Enumerate = 71,
  ident_Zip = 72,
  ident_ADTm_Brackets = 73,
  ident_CallBrackets = 74,
  ident_Closure = 75,
  ident_Identifier = 76,
  ident_Char = 77,
};


static refalrts::FnResult func_Mu(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Mu/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Mu("Mu", COOKIE1_, COOKIE2_, func_Mu);


static refalrts::FnResult func_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Residue("Residue", COOKIE1_, COOKIE2_, func_Residue);


static refalrts::FnResult func_u_u_Metau_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & __Meta_Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_Metau_Residue("__Meta_Residue", COOKIE1_, COOKIE2_, func_u_u_Metau_Residue);


static refalrts::FnResult func_Apply(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Apply/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply/4 s.Fn/5 e.Argument/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.Argument as range 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.Argument: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.Argument/7 HalfReuse: & $table/1 } >/9 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply/4 (/5 t.Closure/9 e.Bounded/7 )/6 e.Argument/2 >/1
  context[7] = 0;
  context[8] = 0;
  if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument as range 2
  context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.Bounded as range 7
  //DEBUG: e.Argument: 2
  //DEBUG: t.Closure: 9
  //DEBUG: e.Bounded: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply/4 } Tile{ AsIs: t.Closure/9 } Tile{ AsIs: e.Bounded/7 } Tile{ AsIs: e.Argument/2 } Tile{ AsIs: >/1 ]] }
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Apply("Apply", COOKIE1_, COOKIE2_, func_Apply);


static refalrts::FnResult func_Map(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Map/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Map/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Map/4 s.Fn/5 t.Next/9 e.Tail/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      if( ! refalrts::svar_term( context[5], context[5] ) )
        continue;
      // closed e.Tail as range 11
      //DEBUG: t.Next: 9
      //DEBUG: s.Fn: 5
      //DEBUG: e.Tail: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: t.Next/9 } & $table/13 >/14 </15 & Map/16 s.Fn/5/17 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[13], functions[efunc_d_table]);
      refalrts::alloc_close_call(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_Map]);
      refalrts::copy_stvar(vm, context[17], context[5]);
      refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[13], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Map/4 (/5 t./15 e.0/13 )/6 t.Next/9 e.Tail/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      // closed e.Tail as range 11
      context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
      if( ! context[16] )
        continue;
      // closed e.0 as range 13
      //DEBUG: t.Next: 9
      //DEBUG: e.Tail: 11
      //DEBUG: t.: 15
      //DEBUG: e.0: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </17 & Apply@3/18 t./15/19 e.0/13/21 Tile{ AsIs: t.Next/9 } >/23 Tile{ AsIs: </0 AsIs: & Map/4 AsIs: (/5 AsIs: t./15 AsIs: e.0/13 AsIs: )/6 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_gen_Apply_Z3]);
      refalrts::copy_evar(vm, context[19], context[20], context[15], context[16]);
      refalrts::copy_evar(vm, context[21], context[22], context[13], context[14]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[17], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map/4 t.Fn/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Fn: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.Fn/5 AsIs: t.Next/9 } >/13 </14 & Map/15 t.Fn/5/16 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_Map]);
    refalrts::copy_evar(vm, context[16], context[17], context[5], context[6]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map/4 t.Fn/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Map/4 t.Fn/5 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Map("Map", COOKIE1_, COOKIE2_, func_Map);


static refalrts::FnResult func_gen_Reduce_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Reduce$1=1/4 t.Fn/5 (/9 e.Tail/7 )/10 t.Acc$a/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Tail as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5
  //DEBUG: e.Tail: 7
  //DEBUG: t.Acc$a: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce/4 AsIs: t.Fn/5 } Tile{ AsIs: t.Acc$a/11 } Tile{ AsIs: e.Tail/7 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Reduce]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1("Reduce$1=1", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1);


static refalrts::FnResult func_Reduce(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Reduce/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce/4 t.new1/5 t.new2/7 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Reduce/4 t.Fn/5 t.Acc/7 t.Next/11 e.Tail/9 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[12] = refalrts::tvar_left( context[11], context[9], context[10] );
    if( ! context[12] )
      continue;
    // closed e.Tail as range 9
    //DEBUG: t.Fn: 5
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 11
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & Reduce$1=1/14 t.Fn/5/15 (/17 Tile{ AsIs: e.Tail/9 } )/18 Tile{ AsIs: </0 Reuse: & Apply@2/4 AsIs: t.Fn/5 AsIs: t.Acc/7 AsIs: t.Next/11 } >/19 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Reduce_S1A1]);
    refalrts::copy_evar(vm, context[15], context[16], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce/4 t.Fn/5 t.Acc/7 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Reduce/4 t.Fn/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Reduce("Reduce", COOKIE1_, COOKIE2_, func_Reduce);


static refalrts::FnResult func_Fetch(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & Fetch/4 e.Argument/2 t.Function/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_right( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument as range 2
  //DEBUG: t.Function: 5
  //DEBUG: e.Argument: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply/4 } Tile{ AsIs: t.Function/5 } Tile{ AsIs: e.Argument/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Apply]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Fetch("Fetch", COOKIE1_, COOKIE2_, func_Fetch);


static refalrts::FnResult func_MapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & MapAccum/4 t.Fn/5 t.Acc/7 e.Tail/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail as range 2
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn/5 AsIs: t.Acc/7 } (/9 )/10 Tile{ AsIs: e.Tail/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MapAccum("MapAccum", COOKIE1_, COOKIE2_, func_MapAccum);


static refalrts::FnResult func_gen_DoMapAccum_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DoMapAccum$1=1/4 t.Fn/5 (/9 e.Scanned/7 )/10 (/13 e.Tail/11 )/14 t.Acc$a/15 e.StepScanned/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Scanned as range 7
  // closed e.Tail as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  // closed e.StepScanned as range 2
  //DEBUG: t.Fn: 5
  //DEBUG: e.Scanned: 7
  //DEBUG: e.Tail: 11
  //DEBUG: t.Acc$a: 15
  //DEBUG: e.StepScanned: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn/5 } Tile{ AsIs: t.Acc$a/15 } Tile{ AsIs: (/13 } Tile{ AsIs: e.Scanned/7 } Tile{ AsIs: e.StepScanned/2 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1("DoMapAccum$1=1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1);


static refalrts::FnResult func_DoMapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & DoMapAccum/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum/4 t.new1/5 t.new2/7 (/11 e.new3/9 )/12 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new3 as range 9
  // closed e.new4 as range 2
  do {
    // </0 & DoMapAccum/4 t.Fn/5 t.Acc/7 (/11 e.Scanned/13 )/12 t.Next/17 e.Tail/15 >/1
    context[13] = context[9];
    context[14] = context[10];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.Scanned as range 13
    context[18] = refalrts::tvar_left( context[17], context[15], context[16] );
    if( ! context[18] )
      continue;
    // closed e.Tail as range 15
    //DEBUG: t.Fn: 5
    //DEBUG: t.Acc: 7
    //DEBUG: e.Scanned: 13
    //DEBUG: t.Next: 17
    //DEBUG: e.Tail: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1/4 AsIs: t.Fn/5 } Tile{ AsIs: (/11 AsIs: e.Scanned/13 AsIs: )/12 } (/19 Tile{ AsIs: e.Tail/15 } )/20 </21 & Apply@2/22 t.Fn/5/23 Tile{ AsIs: t.Acc/7 } Tile{ AsIs: t.Next/17 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_Apply_Z2]);
    refalrts::copy_evar(vm, context[23], context[24], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[20], context[24] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum/4 t.Fn/5 t.Acc/7 (/11 e.Scanned/9 )/12 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Scanned as range 9
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7
  //DEBUG: e.Scanned: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoMapAccum/4 t.Fn/5 {REMOVED TILE} (/11 {REMOVED TILE} )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ AsIs: e.Scanned/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoMapAccum("DoMapAccum", COOKIE1_, COOKIE2_, func_DoMapAccum);


static refalrts::FnResult func_UnBracket(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & UnBracket/4 (/7 e.Expr/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr as range 5
  //DEBUG: e.Expr: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & UnBracket/4 (/7 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Expr/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnBracket("UnBracket", COOKIE1_, COOKIE2_, func_UnBracket);


static refalrts::FnResult func_DelAccumulator(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & DelAccumulator/4 t.Acc/5 e.Tail/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail as range 2
  //DEBUG: t.Acc: 5
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DelAccumulator/4 t.Acc/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Tail/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DelAccumulator("DelAccumulator", COOKIE1_, COOKIE2_, func_DelAccumulator);


static refalrts::FnResult func_Inc(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Inc/4 e.Num/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Num as range 2
  //DEBUG: e.Num: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: e.Num/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_Add]);
  refalrts::reinit_number(context[4], 1UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Inc("Inc", COOKIE1_, COOKIE2_, func_Inc);


static refalrts::FnResult func_Dec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Dec/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Dec/4 s.Num/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.Num: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 AsIs: s.Num/7 HalfReuse: 1/1 } >/8 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::update_name(context[4], functions[efunc_Sub]);
    refalrts::reinit_number(context[1], 1UL);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Dec/4 e.Num/2 >/1
  // closed e.Num as range 2
  //DEBUG: e.Num: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 } (/5 Tile{ AsIs: e.Num/2 } )/6 1/7 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_number(vm, context[7], 1UL);
  refalrts::update_name(context[4], functions[efunc_Sub]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Dec("Dec", COOKIE1_, COOKIE2_, func_Dec);


static refalrts::FnResult func_gen_Pipe_S2L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Pipe$2\1/4 t.Func/5 (/9 e.Funcs/7 )/10 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Funcs as range 7
  // closed e.Arg as range 2
  //DEBUG: t.Func: 5
  //DEBUG: e.Funcs: 7
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch/4 } </11 & Apply/12 Tile{ AsIs: t.Func/5 } Tile{ AsIs: e.Arg/2 } >/13 </14 Tile{ HalfReuse: & Pipe/9 AsIs: e.Funcs/7 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_Apply]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_Fetch]);
  refalrts::reinit_name(context[9], functions[efunc_Pipe]);
  refalrts::reinit_close_call(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S2L1("Pipe$2\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S2L1);


static refalrts::FnResult func_gen_Pipe_S3L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Pipe$3\1/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe$3\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Arg/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S3L1("Pipe$3\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S3L1);


static refalrts::FnResult func_Pipe(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Pipe/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Pipe/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Pipe/4 t.Func/7 >/1
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;
      //DEBUG: t.Func: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.Func/7 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Pipe/4 t.Func/7 e.Funcs/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Funcs as range 9
    //DEBUG: t.Func: 7
    //DEBUG: e.Funcs: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: [*]/0 Reuse: & Pipe$2\1/4 AsIs: t.Func/7 } (/11 Tile{ AsIs: e.Funcs/9 } )/12 Tile{ HalfReuse: {*}/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::reinit_closure_head(context[0]);
    refalrts::update_name(context[4], functions[efunc_gen_Pipe_S2L1]);
    refalrts::reinit_unwrapped_closure(context[1], context[0]);
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    refalrts::wrap_closure( context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Pipe/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: & Pipe$3\1/1 ]] }
  refalrts::reinit_name(context[1], functions[efunc_gen_Pipe_S3L1]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Pipe("Pipe", COOKIE1_, COOKIE2_, func_Pipe);


static refalrts::FnResult func_gen_CheckScreening_S1A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & CheckScreening$1=4/4 e.FunctionsWithPos/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.FunctionsWithPos as range 2
  //DEBUG: e.FunctionsWithPos: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@1/4 AsIs: e.FunctionsWithPos/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckScreening_S1A4("CheckScreening$1=4", COOKIE1_, COOKIE2_, func_gen_CheckScreening_S1A4);


static refalrts::FnResult func_gen_CheckScreening_S1A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & CheckScreening$1=3/4 (/7 e.FunctionsPos/5 )/8 e.AST$c/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.FunctionsPos as range 5
  // closed e.AST$c as range 2
  //DEBUG: e.FunctionsPos: 5
  //DEBUG: e.AST$c: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 } & CheckScreening$1=4/9 </10 & Zip/11 (/12 Tile{ AsIs: e.AST$c/2 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.FunctionsPos/5 AsIs: )/8 } >/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_CheckScreening_S1A4]);
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_Zip]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[10] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[12], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[4], context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckScreening_S1A3("CheckScreening$1=3", COOKIE1_, COOKIE2_, func_gen_CheckScreening_S1A3);


static refalrts::FnResult func_gen_CheckScreening_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & CheckScreening$1=2/4 (/7 e.FunctionsPos/5 )/8 e.AST$b/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.FunctionsPos as range 5
  // closed e.AST$b as range 2
  //DEBUG: e.FunctionsPos: 5
  //DEBUG: e.AST$b: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckScreening$1=3/4 AsIs: (/7 AsIs: e.FunctionsPos/5 AsIs: )/8 } </9 & Pass-EnumerateVariables/10 Tile{ AsIs: e.AST$b/2 } >/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_Passm_EnumerateVariables]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckScreening_S1A3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckScreening_S1A2("CheckScreening$1=2", COOKIE1_, COOKIE2_, func_gen_CheckScreening_S1A2);


static refalrts::FnResult func_gen_CheckScreening_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & CheckScreening$1=1/4 (/7 e.FunctionsPos/5 )/8 e.AST$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.FunctionsPos as range 5
  // closed e.AST$a as range 2
  //DEBUG: e.FunctionsPos: 5
  //DEBUG: e.AST$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckScreening$1=2/4 AsIs: (/7 AsIs: e.FunctionsPos/5 AsIs: )/8 } </9 & Pass-RemovePos/10 Tile{ AsIs: e.AST$a/2 } >/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_Passm_RemovePos]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckScreening_S1A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckScreening_S1A1("CheckScreening$1=1", COOKIE1_, COOKIE2_, func_gen_CheckScreening_S1A1);


static refalrts::FnResult func_CheckScreening(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & CheckScreening/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckScreening/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  do {
    // </0 & CheckScreening/4 (/7 e._/17 # screening/21 e._0/19 )/8 (/11 e.AST/15 )/12 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    // closed e.AST as range 15
    context[17] = 0;
    context[18] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[19] = context[13];
      context[20] = context[14];
      context[21] = refalrts::ident_left( identifiers[ident_screening], context[19], context[20] );
      if( ! context[21] )
        continue;
      // closed e._0 as range 19
      //DEBUG: e.AST: 15
      //DEBUG: e._: 17
      //DEBUG: e._0: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} e._/17 {REMOVED TILE} e._0/19 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckScreening$1=1/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@1/21 } (/22 )/23 Tile{ HalfReuse: (/8 HalfReuse: )/11 AsIs: e.AST/15 HalfReuse: >/12 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[22]);
      refalrts::alloc_close_bracket(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_gen_CheckScreening_S1A1]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[21], functions[efunc_gen_DoMapAccum_Z1]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[11]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[7] );
      refalrts::link_brackets( context[8], context[11] );
      refalrts::link_brackets( context[22], context[23] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[17], context[18], context[13], context[14] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckScreening/4 (/7 e._/5 )/8 (/11 e.AST/9 )/12 >/1
  // closed e._ as range 5
  // closed e.AST as range 9
  //DEBUG: e._: 5
  //DEBUG: e.AST: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckScreening/4 (/7 e._/5 )/8 (/11 e.AST/9 )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckScreening("CheckScreening", 0U, 0U, func_CheckScreening);


static refalrts::FnResult func_FindFunctionsPosInAST(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & FindFunctionsPosInAST/4 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST as range 2
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DoMapAccum@1/6 (/7 )/8 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.AST/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoMapAccum_Z1]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FindFunctionsPosInAST("FindFunctionsPosInAST", COOKIE1_, COOKIE2_, func_FindFunctionsPosInAST);


static refalrts::FnResult func_MakePairs(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & MakePairs/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & MakePairs/4 t.NumberedSentence/7 e.Tail/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.Tail as range 5
    //DEBUG: t.NumberedSentence: 7
    //DEBUG: e.Tail: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@2/4 AsIs: t.NumberedSentence/7 AsIs: e.Tail/5 AsIs: >/1 } </9 & MakePairs/10 e.Tail/5/11 >/13 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_MakePairs]);
    refalrts::copy_evar(vm, context[11], context[12], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z2]);
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[9], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MakePairs/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & MakePairs/4 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MakePairs("MakePairs", COOKIE1_, COOKIE2_, func_MakePairs);


static refalrts::FnResult func_CheckFunction(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & CheckFunction/4 (/7 (/11 # Function/13 s.ScopeClass/14 (/17 e.Name/15 )/18 # Sentences/19 e.Sentences/9 )/12 t.SrcPos/20 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = refalrts::ident_left( identifiers[ident_Function], context[9], context[10] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[9], context[10] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = refalrts::ident_left( identifiers[ident_Sentences], context[9], context[10] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 15
  // closed e.Sentences as range 9
  context[21] = refalrts::tvar_left( context[20], context[5], context[6] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.ScopeClass: 14
  //DEBUG: e.Name: 15
  //DEBUG: e.Sentences: 9
  //DEBUG: t.SrcPos: 20

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} s.ScopeClass/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </22 & CheckSentences=1@1/23 Tile{ AsIs: t.SrcPos/20 } Tile{ AsIs: (/17 AsIs: e.Name/15 AsIs: )/18 HalfReuse: (/19 AsIs: e.Sentences/9 AsIs: )/12 } </24 & Enumerate=1/25 Tile{ AsIs: </0 Reuse: & DoMapAccum@2/4 HalfReuse: 1/7 AsIs: (/11 HalfReuse: )/13 } e.Sentences/9/26 >/28 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::alloc_name(vm, context[23], functions[efunc_gen_CheckSentences_A1Z1]);
  refalrts::alloc_open_call(vm, context[24]);
  refalrts::alloc_name(vm, context[25], functions[efunc_gen_Enumerate_A1]);
  refalrts::copy_evar(vm, context[26], context[27], context[9], context[10]);
  refalrts::alloc_close_call(vm, context[28]);
  refalrts::reinit_open_bracket(context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z2]);
  refalrts::reinit_number(context[7], 1UL);
  refalrts::reinit_close_bracket(context[13]);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[22] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[28] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[13] );
  refalrts::link_brackets( context[19], context[12] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_evar( res, context[0], context[13] );
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[17], context[12] );
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckFunction("CheckFunction", COOKIE1_, COOKIE2_, func_CheckFunction);


static refalrts::FnResult func_gen_CheckSentences_L1A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 90 elems
  refalrts::Iter context[90];
  refalrts::zeros( context, 90 );
  // </0 & CheckSentences\1=3/4 s.Num/5 t.SrcPos/6 (/10 e.FuncName/8 )/11 (/14 e.Prefix$a/12 )/15 (/18 e.ContextVars$a/16 )/19 (/22 e.Pattern/20 )/23 (/26 e.AssignsOrConds/24 )/27 (/30 e.Result/28 )/31 (/34 e.Blocks/32 )/35 e.ContextAllAssignsOrConds/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  context[28] = 0;
  context[29] = 0;
  context[30] = refalrts::brackets_left( context[28], context[29], context[2], context[3] );
  if( ! context[30] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[30], context[31]);
  context[32] = 0;
  context[33] = 0;
  context[34] = refalrts::brackets_left( context[32], context[33], context[2], context[3] );
  if( ! context[34] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[34], context[35]);
  // closed e.FuncName as range 8
  // closed e.Prefix$a as range 12
  // closed e.ContextVars$a as range 16
  // closed e.Pattern as range 20
  // closed e.AssignsOrConds as range 24
  // closed e.Result as range 28
  // closed e.Blocks as range 32
  // closed e.ContextAllAssignsOrConds as range 2
  //DEBUG: s.Num: 5
  //DEBUG: t.SrcPos: 6
  //DEBUG: e.FuncName: 8
  //DEBUG: e.Prefix$a: 12
  //DEBUG: e.ContextVars$a: 16
  //DEBUG: e.Pattern: 20
  //DEBUG: e.AssignsOrConds: 24
  //DEBUG: e.Result: 28
  //DEBUG: e.Blocks: 32
  //DEBUG: e.ContextAllAssignsOrConds: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Pattern/20 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Add/4 } 1/36 Tile{ AsIs: s.Num/5 } >/37 </38 & DelAccumulator/39 </40 & DoMapAccum@3/41 t.SrcPos/6/42 (/44 e.FuncName/8/45 Tile{ AsIs: )/31 AsIs: (/34 } e.Prefix$a/12/47 )/49 (/50 1/51 e.ContextVars$a/16/52 Tile{ AsIs: )/35 } Tile{ HalfReuse: (/23 HalfReuse: )/26 AsIs: e.AssignsOrConds/24 HalfReuse: >/27 HalfReuse: >/30 } </54 & DelAccumulator/55 </56 & DoMapAccum@4/57 Tile{ AsIs: t.SrcPos/6 AsIs: (/10 AsIs: e.FuncName/8 AsIs: )/11 AsIs: (/14 AsIs: e.Prefix$a/12 AsIs: )/15 AsIs: (/18 AsIs: e.ContextVars$a/16 AsIs: )/19 AsIs: (/22 } Tile{ AsIs: e.ContextAllAssignsOrConds/2 } )/58 1/59 (/60 )/61 Tile{ AsIs: e.Result/28 } >/62 >/63 </64 & DelAccumulator/65 </66 & DoMapAccum@5/67 t.SrcPos/6/68 (/70 e.FuncName/8/71 )/73 (/74 e.Prefix$a/12/75 )/77 (/78 e.ContextVars$a/16/79 )/81 (/82 e.ContextAllAssignsOrConds/2/83 )/85 1/86 (/87 )/88 Tile{ AsIs: e.Blocks/32 } >/89 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_number(vm, context[36], 1UL);
  refalrts::alloc_close_call(vm, context[37]);
  refalrts::alloc_open_call(vm, context[38]);
  refalrts::alloc_name(vm, context[39], functions[efunc_DelAccumulator]);
  refalrts::alloc_open_call(vm, context[40]);
  refalrts::alloc_name(vm, context[41], functions[efunc_gen_DoMapAccum_Z3]);
  refalrts::copy_evar(vm, context[42], context[43], context[6], context[7]);
  refalrts::alloc_open_bracket(vm, context[44]);
  refalrts::copy_evar(vm, context[45], context[46], context[8], context[9]);
  refalrts::copy_evar(vm, context[47], context[48], context[12], context[13]);
  refalrts::alloc_close_bracket(vm, context[49]);
  refalrts::alloc_open_bracket(vm, context[50]);
  refalrts::alloc_number(vm, context[51], 1UL);
  refalrts::copy_evar(vm, context[52], context[53], context[16], context[17]);
  refalrts::alloc_open_call(vm, context[54]);
  refalrts::alloc_name(vm, context[55], functions[efunc_DelAccumulator]);
  refalrts::alloc_open_call(vm, context[56]);
  refalrts::alloc_name(vm, context[57], functions[efunc_gen_DoMapAccum_Z4]);
  refalrts::alloc_close_bracket(vm, context[58]);
  refalrts::alloc_number(vm, context[59], 1UL);
  refalrts::alloc_open_bracket(vm, context[60]);
  refalrts::alloc_close_bracket(vm, context[61]);
  refalrts::alloc_close_call(vm, context[62]);
  refalrts::alloc_close_call(vm, context[63]);
  refalrts::alloc_open_call(vm, context[64]);
  refalrts::alloc_name(vm, context[65], functions[efunc_DelAccumulator]);
  refalrts::alloc_open_call(vm, context[66]);
  refalrts::alloc_name(vm, context[67], functions[efunc_gen_DoMapAccum_Z5]);
  refalrts::copy_evar(vm, context[68], context[69], context[6], context[7]);
  refalrts::alloc_open_bracket(vm, context[70]);
  refalrts::copy_evar(vm, context[71], context[72], context[8], context[9]);
  refalrts::alloc_close_bracket(vm, context[73]);
  refalrts::alloc_open_bracket(vm, context[74]);
  refalrts::copy_evar(vm, context[75], context[76], context[12], context[13]);
  refalrts::alloc_close_bracket(vm, context[77]);
  refalrts::alloc_open_bracket(vm, context[78]);
  refalrts::copy_evar(vm, context[79], context[80], context[16], context[17]);
  refalrts::alloc_close_bracket(vm, context[81]);
  refalrts::alloc_open_bracket(vm, context[82]);
  refalrts::copy_evar(vm, context[83], context[84], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[85]);
  refalrts::alloc_number(vm, context[86], 1UL);
  refalrts::alloc_open_bracket(vm, context[87]);
  refalrts::alloc_close_bracket(vm, context[88]);
  refalrts::alloc_close_call(vm, context[89]);
  refalrts::update_name(context[4], functions[efunc_Add]);
  refalrts::reinit_open_bracket(context[23]);
  refalrts::reinit_close_bracket(context[26]);
  refalrts::reinit_close_call(context[27]);
  refalrts::reinit_close_call(context[30]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[64] );
  refalrts::push_stack( vm, context[89] );
  refalrts::push_stack( vm, context[66] );
  refalrts::link_brackets( context[87], context[88] );
  refalrts::link_brackets( context[82], context[85] );
  refalrts::link_brackets( context[78], context[81] );
  refalrts::link_brackets( context[74], context[77] );
  refalrts::link_brackets( context[70], context[73] );
  refalrts::push_stack( vm, context[63] );
  refalrts::push_stack( vm, context[54] );
  refalrts::push_stack( vm, context[62] );
  refalrts::push_stack( vm, context[56] );
  refalrts::link_brackets( context[60], context[61] );
  refalrts::link_brackets( context[22], context[58] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[38] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[40] );
  refalrts::link_brackets( context[23], context[26] );
  refalrts::link_brackets( context[50], context[35] );
  refalrts::link_brackets( context[34], context[49] );
  refalrts::link_brackets( context[44], context[31] );
  refalrts::push_stack( vm, context[37] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[89] );
  res = refalrts::splice_evar( res, context[32], context[33] );
  res = refalrts::splice_evar( res, context[62], context[88] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[58], context[61] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[6], context[22] );
  res = refalrts::splice_evar( res, context[54], context[57] );
  res = refalrts::splice_evar( res, context[23], context[30] );
  res = refalrts::splice_elem( res, context[35] );
  res = refalrts::splice_evar( res, context[52], context[53] );
  res = refalrts::splice_evar( res, context[49], context[51] );
  res = refalrts::splice_evar( res, context[47], context[48] );
  res = refalrts::splice_evar( res, context[31], context[34] );
  res = refalrts::splice_evar( res, context[45], context[46] );
  res = refalrts::splice_evar( res, context[37], context[44] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_elem( res, context[36] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_L1A3("CheckSentences\\1=3", COOKIE1_, COOKIE2_, func_gen_CheckSentences_L1A3);


static refalrts::FnResult func_gen_CheckSentences_L1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & CheckSentences\1=1/4 s.Num/5 t.SrcPos/6 (/10 e.FuncName/8 )/11 (/14 e.Pattern/12 )/15 (/18 e.AssignsOrConds/16 )/19 (/22 e.Result/20 )/23 (/26 e.Blocks/24 )/27 (/30 e.ContextVars/28 )/31 e.Prefix$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  context[28] = 0;
  context[29] = 0;
  context[30] = refalrts::brackets_left( context[28], context[29], context[2], context[3] );
  if( ! context[30] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[30], context[31]);
  // closed e.FuncName as range 8
  // closed e.Pattern as range 12
  // closed e.AssignsOrConds as range 16
  // closed e.Result as range 20
  // closed e.Blocks as range 24
  // closed e.ContextVars as range 28
  // closed e.Prefix$a as range 2
  //DEBUG: s.Num: 5
  //DEBUG: t.SrcPos: 6
  //DEBUG: e.FuncName: 8
  //DEBUG: e.Pattern: 12
  //DEBUG: e.AssignsOrConds: 16
  //DEBUG: e.Result: 20
  //DEBUG: e.Blocks: 24
  //DEBUG: e.ContextVars: 28
  //DEBUG: e.Prefix$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences\1=3@1/4 AsIs: s.Num/5 AsIs: t.SrcPos/6 AsIs: (/10 } Tile{ AsIs: e.FuncName/8 } )/32 (/33 Tile{ AsIs: e.Prefix$a/2 } Tile{ AsIs: )/31 } (/34 Tile{ AsIs: e.ContextVars/28 } Tile{ AsIs: )/11 AsIs: (/14 AsIs: e.Pattern/12 AsIs: )/15 AsIs: (/18 AsIs: e.AssignsOrConds/16 AsIs: )/19 AsIs: (/22 AsIs: e.Result/20 AsIs: )/23 AsIs: (/26 AsIs: e.Blocks/24 AsIs: )/27 HalfReuse: </30 } & Map@3/35 e.AssignsOrConds/16/36 >/38 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::alloc_open_bracket(vm, context[34]);
  refalrts::alloc_name(vm, context[35], functions[efunc_gen_Map_Z3]);
  refalrts::copy_evar(vm, context[36], context[37], context[16], context[17]);
  refalrts::alloc_close_call(vm, context[38]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_L1A3Z1]);
  refalrts::reinit_open_call(context[30]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[38] );
  refalrts::push_stack( vm, context[30] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[34], context[11] );
  refalrts::link_brackets( context[33], context[31] );
  refalrts::link_brackets( context[10], context[32] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[35], context[38] );
  res = refalrts::splice_evar( res, context[11], context[30] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_elem( res, context[34] );
  res = refalrts::splice_elem( res, context[31] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[32], context[33] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_L1A1("CheckSentences\\1=1", COOKIE1_, COOKIE2_, func_gen_CheckSentences_L1A1);


static refalrts::FnResult func_gen_CheckSentences_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 50 elems
  refalrts::Iter context[50];
  refalrts::zeros( context, 50 );
  // </0 & CheckSentences=3/4 t.SrcPos/5 (/9 e.FuncName/7 )/10 (/13 e.Prefix/11 )/14 (/17 e.ContextVars/15 )/18 (/21 e.Sentences/19 )/22 e.NumberedSentencesPairs$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.FuncName as range 7
  // closed e.Prefix as range 11
  // closed e.ContextVars as range 15
  // closed e.Sentences as range 19
  // closed e.NumberedSentencesPairs$a as range 2
  //DEBUG: t.SrcPos: 5
  //DEBUG: e.FuncName: 7
  //DEBUG: e.Prefix: 11
  //DEBUG: e.ContextVars: 15
  //DEBUG: e.Sentences: 19
  //DEBUG: e.NumberedSentencesPairs$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1=1/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix/11 AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.NumberedSentencesPairs$a/2 } )/23 </24 & Unique/25 </26 & ExtractVariables-Expr/27 Tile{ AsIs: e.ContextVars/15 } >/28 >/29 >/30 </31 & DelAccumulator/32 </33 & DoMapAccum@6/34 t.SrcPos/5/35 (/37 e.FuncName/7/38 Tile{ AsIs: )/18 AsIs: (/21 } e.ContextVars/15/40 Tile{ AsIs: )/22 } (/42 e.Prefix/11/43 )/45 1/46 (/47 )/48 Tile{ AsIs: e.Sentences/19 } >/49 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::alloc_open_call(vm, context[24]);
  refalrts::alloc_name(vm, context[25], functions[efunc_Unique]);
  refalrts::alloc_open_call(vm, context[26]);
  refalrts::alloc_name(vm, context[27], functions[efunc_ExtractVariablesm_Expr]);
  refalrts::alloc_close_call(vm, context[28]);
  refalrts::alloc_close_call(vm, context[29]);
  refalrts::alloc_close_call(vm, context[30]);
  refalrts::alloc_open_call(vm, context[31]);
  refalrts::alloc_name(vm, context[32], functions[efunc_DelAccumulator]);
  refalrts::alloc_open_call(vm, context[33]);
  refalrts::alloc_name(vm, context[34], functions[efunc_gen_DoMapAccum_Z6]);
  refalrts::copy_evar(vm, context[35], context[36], context[5], context[6]);
  refalrts::alloc_open_bracket(vm, context[37]);
  refalrts::copy_evar(vm, context[38], context[39], context[7], context[8]);
  refalrts::copy_evar(vm, context[40], context[41], context[15], context[16]);
  refalrts::alloc_open_bracket(vm, context[42]);
  refalrts::copy_evar(vm, context[43], context[44], context[11], context[12]);
  refalrts::alloc_close_bracket(vm, context[45]);
  refalrts::alloc_number(vm, context[46], 1UL);
  refalrts::alloc_open_bracket(vm, context[47]);
  refalrts::alloc_close_bracket(vm, context[48]);
  refalrts::alloc_close_call(vm, context[49]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[49] );
  refalrts::push_stack( vm, context[33] );
  refalrts::link_brackets( context[47], context[48] );
  refalrts::link_brackets( context[42], context[45] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[37], context[18] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[29] );
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[28] );
  refalrts::push_stack( vm, context[26] );
  refalrts::link_brackets( context[17], context[23] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[49] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[42], context[48] );
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[40], context[41] );
  res = refalrts::splice_evar( res, context[18], context[21] );
  res = refalrts::splice_evar( res, context[38], context[39] );
  res = refalrts::splice_evar( res, context[28], context[37] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[23], context[27] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_A3("CheckSentences=3", COOKIE1_, COOKIE2_, func_gen_CheckSentences_A3);


static refalrts::FnResult func_gen_CheckSentences_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & CheckSentences=2/4 t.SrcPos/5 (/9 e.FuncName/7 )/10 (/13 e.Prefix/11 )/14 (/17 e.ContextVars/15 )/18 (/21 e.Sentences/19 )/22 e.NumberedSentencesPairs/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.FuncName as range 7
  // closed e.Prefix as range 11
  // closed e.ContextVars as range 15
  // closed e.Sentences as range 19
  // closed e.NumberedSentencesPairs as range 2
  //DEBUG: t.SrcPos: 5
  //DEBUG: e.FuncName: 7
  //DEBUG: e.Prefix: 11
  //DEBUG: e.ContextVars: 15
  //DEBUG: e.Sentences: 19
  //DEBUG: e.NumberedSentencesPairs: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=3/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix/11 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars/15 AsIs: )/18 AsIs: (/21 AsIs: e.Sentences/19 AsIs: )/22 } </23 & Map@4/24 Tile{ AsIs: e.NumberedSentencesPairs/2 } >/25 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_gen_Map_Z4]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_A2("CheckSentences=2", COOKIE1_, COOKIE2_, func_gen_CheckSentences_A2);


static refalrts::FnResult func_gen_CheckSentences_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & CheckSentences=1/4 t.SrcPos/5 (/9 e.FuncName/7 )/10 (/13 e.Prefix/11 )/14 (/17 e.ContextVars/15 )/18 (/21 e.Sentences/19 )/22 e.NumberedSentences/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.FuncName as range 7
  // closed e.Prefix as range 11
  // closed e.ContextVars as range 15
  // closed e.Sentences as range 19
  // closed e.NumberedSentences as range 2
  //DEBUG: t.SrcPos: 5
  //DEBUG: e.FuncName: 7
  //DEBUG: e.Prefix: 11
  //DEBUG: e.ContextVars: 15
  //DEBUG: e.Sentences: 19
  //DEBUG: e.NumberedSentences: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=2/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix/11 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars/15 AsIs: )/18 AsIs: (/21 AsIs: e.Sentences/19 AsIs: )/22 } </23 & MakePairs/24 Tile{ AsIs: e.NumberedSentences/2 } >/25 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_MakePairs]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_A1("CheckSentences=1", COOKIE1_, COOKIE2_, func_gen_CheckSentences_A1);


static refalrts::FnResult func_CheckSentences(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & CheckSentences/4 t.SrcPos/21 (/19 e.FuncName/17 )/20 (/15 e.Prefix/13 )/16 (/11 e.ContextVars/9 )/12 (/7 e.Sentences/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.FuncName as range 17
  // closed e.Prefix as range 13
  // closed e.ContextVars as range 9
  // closed e.Sentences as range 5
  context[22] = refalrts::tvar_left( context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.FuncName: 17
  //DEBUG: e.Prefix: 13
  //DEBUG: e.ContextVars: 9
  //DEBUG: e.Sentences: 5
  //DEBUG: t.SrcPos: 21

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=1/4 AsIs: t.SrcPos/21 AsIs: (/19 AsIs: e.FuncName/17 AsIs: )/20 AsIs: (/15 AsIs: e.Prefix/13 AsIs: )/16 AsIs: (/11 AsIs: e.ContextVars/9 AsIs: )/12 AsIs: (/7 AsIs: e.Sentences/5 AsIs: )/8 HalfReuse: </1 } & Enumerate=1/23 </24 & DoMapAccum@2/25 1/26 (/27 )/28 e.Sentences/5/29 >/31 >/32 >/33 Tile{ ]] }
  refalrts::alloc_name(vm, context[23], functions[efunc_gen_Enumerate_A1]);
  refalrts::alloc_open_call(vm, context[24]);
  refalrts::alloc_name(vm, context[25], functions[efunc_gen_DoMapAccum_Z2]);
  refalrts::alloc_number(vm, context[26], 1UL);
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_close_bracket(vm, context[28]);
  refalrts::copy_evar(vm, context[29], context[30], context[5], context[6]);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::alloc_close_call(vm, context[32]);
  refalrts::alloc_close_call(vm, context[33]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A1]);
  refalrts::reinit_open_call(context[1]);
  refalrts::push_stack( vm, context[33] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[24] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[23], context[33] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckSentences("CheckSentences", COOKIE1_, COOKIE2_, func_CheckSentences);


static refalrts::FnResult func_FilterConditions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & FilterConditions/4 e.NumberedSentencesPairs/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.NumberedSentencesPairs as range 2
  //DEBUG: e.NumberedSentencesPairs: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@4/4 AsIs: e.NumberedSentencesPairs/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FilterConditions("FilterConditions", COOKIE1_, COOKIE2_, func_FilterConditions);


static refalrts::FnResult func_CheckSentenceBlocks(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & CheckSentenceBlocks/4 t.SrcPos/33 (/23 e.FuncName/21 )/24 (/19 e.Prefix/17 )/20 (/15 e.ContextVars/13 )/16 (/7 (/11 e.SentencePattern/9 )/12 e._/5 (/31 e._0/29 )/32 (/27 e.Blocks/25 )/28 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_right( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_right( context[25], context[26], context[5], context[6] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_right( context[29], context[30], context[5], context[6] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.FuncName as range 21
  // closed e.Prefix as range 17
  // closed e.ContextVars as range 13
  // closed e.SentencePattern as range 9
  // closed e._ as range 5
  // closed e._0 as range 29
  // closed e.Blocks as range 25
  context[34] = refalrts::tvar_left( context[33], context[2], context[3] );
  if( ! context[34] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.FuncName: 21
  //DEBUG: e.Prefix: 17
  //DEBUG: e.ContextVars: 13
  //DEBUG: e.SentencePattern: 9
  //DEBUG: e._: 5
  //DEBUG: e._0: 29
  //DEBUG: e.Blocks: 25
  //DEBUG: t.SrcPos: 33

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} e.SentencePattern/9 )/12 e._/5 (/31 e._0/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </32 HalfReuse: & DelAccumulator/27 } Tile{ AsIs: </0 Reuse: & DoMapAccum@7/4 AsIs: t.SrcPos/33 AsIs: (/23 AsIs: e.FuncName/21 AsIs: )/24 AsIs: (/19 AsIs: e.Prefix/17 AsIs: )/20 AsIs: (/15 AsIs: e.ContextVars/13 AsIs: )/16 HalfReuse: 1/7 AsIs: (/11 } Tile{ AsIs: )/28 } Tile{ AsIs: e.Blocks/25 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[32]);
  refalrts::reinit_name(context[27], functions[efunc_DelAccumulator]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z7]);
  refalrts::reinit_number(context[7], 1UL);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[28] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_evar( res, context[32], context[27] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckSentenceBlocks("CheckSentenceBlocks", COOKIE1_, COOKIE2_, func_CheckSentenceBlocks);


static refalrts::FnResult func_CheckBlocks(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & CheckBlocks/4 t.SrcPos/21 (/19 e.FuncName/17 )/20 (/15 e.Prefix/13 )/16 (/11 e.ContextVars/9 )/12 (/7 e.Blocks/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.FuncName as range 17
  // closed e.Prefix as range 13
  // closed e.ContextVars as range 9
  // closed e.Blocks as range 5
  context[22] = refalrts::tvar_left( context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.FuncName: 17
  //DEBUG: e.Prefix: 13
  //DEBUG: e.ContextVars: 9
  //DEBUG: e.Blocks: 5
  //DEBUG: t.SrcPos: 21

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </23 & DelAccumulator/24 Tile{ AsIs: </0 Reuse: & DoMapAccum@7/4 AsIs: t.SrcPos/21 AsIs: (/19 AsIs: e.FuncName/17 AsIs: )/20 AsIs: (/15 AsIs: e.Prefix/13 AsIs: )/16 AsIs: (/11 AsIs: e.ContextVars/9 AsIs: )/12 HalfReuse: 1/7 } (/25 )/26 Tile{ AsIs: e.Blocks/5 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_DelAccumulator]);
  refalrts::alloc_open_bracket(vm, context[25]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z7]);
  refalrts::reinit_number(context[7], 1UL);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckBlocks("CheckBlocks", COOKIE1_, COOKIE2_, func_CheckBlocks);


static refalrts::FnResult func_gen_CheckSentenceAssignsAndConditions_L1S1C1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & CheckSentenceAssignsAndConditions\1$1?1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentenceAssignsAndConditions\1$1?1:1/4 s.new1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & CheckSentenceAssignsAndConditions\1$1?1:1/4 # Assign/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Assign], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckSentenceAssignsAndConditions\1$1?1:1/4 # Assign/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: '='/1 ]] }
    refalrts::reinit_char(context[1], '=');
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentenceAssignsAndConditions\1$1?1:1/4 # Condition/5 >/1
  if( ! refalrts::ident_term( identifiers[ident_Condition], context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckSentenceAssignsAndConditions\1$1?1:1/4 # Condition/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: '?'/1 ]] }
  refalrts::reinit_char(context[1], '?');
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentenceAssignsAndConditions_L1S1C1B1("CheckSentenceAssignsAndConditions\\1$1?1:1", COOKIE1_, COOKIE2_, func_gen_CheckSentenceAssignsAndConditions_L1S1C1B1);


static refalrts::FnResult func_gen_CheckSentenceAssignsAndConditions_L1S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 61 elems
  refalrts::Iter context[61];
  refalrts::zeros( context, 61 );
  // </0 & CheckSentenceAssignsAndConditions\1$1=2/4 s.Num/5 (/8 e.ContextVars$a/6 )/9 (/12 e.Pattern/10 )/13 t.SrcPos/14 (/18 e.FuncName/16 )/19 (/22 e.Blocks/20 )/23 (/26 e.Result/24 )/27 e.Prefix$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.ContextVars$a as range 6
  // closed e.Pattern as range 10
  context[15] = refalrts::tvar_left( context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  // closed e.FuncName as range 16
  // closed e.Blocks as range 20
  // closed e.Result as range 24
  // closed e.Prefix$a as range 2
  //DEBUG: s.Num: 5
  //DEBUG: e.ContextVars$a: 6
  //DEBUG: e.Pattern: 10
  //DEBUG: t.SrcPos: 14
  //DEBUG: e.FuncName: 16
  //DEBUG: e.Blocks: 20
  //DEBUG: e.Result: 24
  //DEBUG: e.Prefix$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/28 </29 & Add/30 1/31 Tile{ AsIs: s.Num/5 } >/32 e.ContextVars$a/6/33 Tile{ AsIs: e.Pattern/10 } )/35 Tile{ AsIs: </0 Reuse: & DelAccumulator/4 } </36 Tile{ HalfReuse: & DoMapAccum@7/13 AsIs: t.SrcPos/14 AsIs: (/18 AsIs: e.FuncName/16 AsIs: )/19 AsIs: (/22 } Tile{ AsIs: e.Prefix$a/2 } Tile{ AsIs: )/27 } Tile{ AsIs: (/8 AsIs: e.ContextVars$a/6 AsIs: )/9 HalfReuse: 1/12 } (/37 )/38 Tile{ AsIs: e.Blocks/20 } >/39 >/40 </41 & DelAccumulator/42 </43 & DoMapAccum@8/44 t.SrcPos/14/45 (/47 e.FuncName/16/48 Tile{ AsIs: )/23 AsIs: (/26 } e.Prefix$a/2/50 )/52 (/53 e.ContextVars$a/6/54 )/56 1/57 (/58 )/59 Tile{ AsIs: e.Result/24 } >/60 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[31], 1UL);
  refalrts::alloc_close_call(vm, context[32]);
  refalrts::copy_evar(vm, context[33], context[34], context[6], context[7]);
  refalrts::alloc_close_bracket(vm, context[35]);
  refalrts::alloc_open_call(vm, context[36]);
  refalrts::alloc_open_bracket(vm, context[37]);
  refalrts::alloc_close_bracket(vm, context[38]);
  refalrts::alloc_close_call(vm, context[39]);
  refalrts::alloc_close_call(vm, context[40]);
  refalrts::alloc_open_call(vm, context[41]);
  refalrts::alloc_name(vm, context[42], functions[efunc_DelAccumulator]);
  refalrts::alloc_open_call(vm, context[43]);
  refalrts::alloc_name(vm, context[44], functions[efunc_gen_DoMapAccum_Z8]);
  refalrts::copy_evar(vm, context[45], context[46], context[14], context[15]);
  refalrts::alloc_open_bracket(vm, context[47]);
  refalrts::copy_evar(vm, context[48], context[49], context[16], context[17]);
  refalrts::copy_evar(vm, context[50], context[51], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[52]);
  refalrts::alloc_open_bracket(vm, context[53]);
  refalrts::copy_evar(vm, context[54], context[55], context[6], context[7]);
  refalrts::alloc_close_bracket(vm, context[56]);
  refalrts::alloc_number(vm, context[57], 1UL);
  refalrts::alloc_open_bracket(vm, context[58]);
  refalrts::alloc_close_bracket(vm, context[59]);
  refalrts::alloc_close_call(vm, context[60]);
  refalrts::update_name(context[4], functions[efunc_DelAccumulator]);
  refalrts::reinit_name(context[13], functions[efunc_gen_DoMapAccum_Z7]);
  refalrts::reinit_number(context[12], 1UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[41] );
  refalrts::push_stack( vm, context[60] );
  refalrts::push_stack( vm, context[43] );
  refalrts::link_brackets( context[58], context[59] );
  refalrts::link_brackets( context[53], context[56] );
  refalrts::link_brackets( context[26], context[52] );
  refalrts::link_brackets( context[47], context[23] );
  refalrts::push_stack( vm, context[40] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[39] );
  refalrts::push_stack( vm, context[36] );
  refalrts::link_brackets( context[37], context[38] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[22], context[27] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[28], context[35] );
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[29] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[60] );
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[52], context[59] );
  res = refalrts::splice_evar( res, context[50], context[51] );
  res = refalrts::splice_evar( res, context[23], context[26] );
  res = refalrts::splice_evar( res, context[48], context[49] );
  res = refalrts::splice_evar( res, context[39], context[47] );
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[37], context[38] );
  res = refalrts::splice_evar( res, context[8], context[12] );
  res = refalrts::splice_elem( res, context[27] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[22] );
  res = refalrts::splice_elem( res, context[36] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_elem( res, context[35] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[33], context[34] );
  res = refalrts::splice_elem( res, context[32] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[28], context[31] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentenceAssignsAndConditions_L1S1A2("CheckSentenceAssignsAndConditions\\1$1=2", COOKIE1_, COOKIE2_, func_gen_CheckSentenceAssignsAndConditions_L1S1A2);


static refalrts::FnResult func_gen_CheckSentenceAssignsAndConditions_L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 50 elems
  refalrts::Iter context[50];
  refalrts::zeros( context, 50 );
  // </0 & CheckSentenceAssignsAndConditions\1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentenceAssignsAndConditions\1/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 s.new4/19 e.new5/15 )/18 t.new6/20 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  if( ! refalrts::svar_left( context[19], context[15], context[16] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 15
  context[21] = refalrts::tvar_left( context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & CheckSentenceAssignsAndConditions\1/4 t.SrcPos/5 (/9 e.FuncName/22 )/10 (/13 e.Prefix/24 )/14 (/17 s.Num/19 e.ContextVars$a/26 )/18 (/20 s.AssignOrCondition/42 (/40 e.Result/38 )/41 (/36 e.Blocks/34 )/37 (/32 e.Pattern/30 )/33 )/21 >/1
    context[22] = context[7];
    context[23] = context[8];
    context[24] = context[11];
    context[25] = context[12];
    context[26] = context[15];
    context[27] = context[16];
    context[28] = 0;
    context[29] = 0;
    if( ! refalrts::brackets_term( context[28], context[29], context[20] ) )
      continue;
    context[30] = 0;
    context[31] = 0;
    context[32] = refalrts::brackets_right( context[30], context[31], context[28], context[29] );
    if( ! context[32] )
      continue;
    refalrts::bracket_pointers(context[32], context[33]);
    context[34] = 0;
    context[35] = 0;
    context[36] = refalrts::brackets_right( context[34], context[35], context[28], context[29] );
    if( ! context[36] )
      continue;
    refalrts::bracket_pointers(context[36], context[37]);
    context[38] = 0;
    context[39] = 0;
    context[40] = refalrts::brackets_right( context[38], context[39], context[28], context[29] );
    if( ! context[40] )
      continue;
    refalrts::bracket_pointers(context[40], context[41]);
    // closed e.FuncName as range 22
    // closed e.Prefix as range 24
    // closed e.ContextVars$a as range 26
    // closed e.Result as range 38
    // closed e.Blocks as range 34
    // closed e.Pattern as range 30
    if( ! refalrts::svar_left( context[42], context[28], context[29] ) )
      continue;
    if( ! refalrts::empty_seq( context[28], context[29] ) )
      continue;
    //DEBUG: t.SrcPos: 5
    //DEBUG: s.Num: 19
    //DEBUG: e.FuncName: 22
    //DEBUG: e.Prefix: 24
    //DEBUG: e.ContextVars$a: 26
    //DEBUG: e.Result: 38
    //DEBUG: e.Blocks: 34
    //DEBUG: e.Pattern: 30
    //DEBUG: s.AssignOrCondition: 42
    //5: t.SrcPos
    //19: s.Num
    //22: e.FuncName
    //24: e.Prefix
    //26: e.ContextVars$a
    //30: e.Pattern
    //34: e.Blocks
    //38: e.Result
    //42: s.AssignOrCondition
    //48: s.AssignOrCondition

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[43]);
    refalrts::alloc_name(vm, context[45], functions[efunc_gen_CheckSentenceAssignsAndConditions_L1S1C1]);
    refalrts::alloc_open_call(vm, context[46]);
    refalrts::alloc_name(vm, context[47], functions[efunc_gen_CheckSentenceAssignsAndConditions_L1S1C1B1]);
    refalrts::copy_stvar(vm, context[48], context[42]);
    refalrts::alloc_close_call(vm, context[49]);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[43] );
    res = refalrts::splice_elem( res, context[44] );
    refalrts::push_stack( vm, context[49] );
    refalrts::push_stack( vm, context[46] );
    res = refalrts::splice_elem( res, context[49] );
    res = refalrts::splice_stvar( res, context[48] );
    res = refalrts::splice_elem( res, context[47] );
    res = refalrts::splice_elem( res, context[46] );
    res = refalrts::splice_elem( res, context[45] );
    res = refalrts::splice_elem( res, context[43] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </43 & CheckSentenceAssignsAndConditions\1$1?1/47 s.AssignOrCondition$a/48 >/44
      context[45] = 0;
      context[46] = 0;
      context[47] = refalrts::call_left( context[45], context[46], context[43], context[44] );
      if( ! refalrts::svar_left( context[48], context[45], context[46] ) )
        continue;
      if( ! refalrts::empty_seq( context[45], context[46] ) )
        continue;
      //DEBUG: t.SrcPos: 5
      //DEBUG: s.Num: 19
      //DEBUG: e.FuncName: 22
      //DEBUG: e.Prefix: 24
      //DEBUG: e.ContextVars$a: 26
      //DEBUG: e.Result: 38
      //DEBUG: e.Blocks: 34
      //DEBUG: e.Pattern: 30
      //DEBUG: s.AssignOrCondition: 42
      //DEBUG: s.AssignOrCondition$a: 48

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/20 s.AssignOrCondition/42 {REMOVED TILE} (/36 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.AssignOrCondition$a/48 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CheckSentenceAssignsAndConditions\1$1=2/18 } Tile{ HalfReuse: s.Num19 /14 AsIs: (/17 } Tile{ AsIs: e.ContextVars$a/26 } Tile{ AsIs: )/37 AsIs: (/32 } Tile{ AsIs: e.Pattern/30 } Tile{ HalfReuse: )/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/22 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Blocks/34 } Tile{ AsIs: )/33 } Tile{ AsIs: (/40 AsIs: e.Result/38 AsIs: )/41 } Tile{ AsIs: e.Prefix/24 } Tile{ HalfReuse: s.AssignOrCondition$a48 /21 AsIs: </43 Reuse: & Symb/47 } Tile{ AsIs: s.Num/19 } Tile{ AsIs: >/44 AsIs: >/1 ]] }
      refalrts::reinit_name(context[18], functions[efunc_gen_CheckSentenceAssignsAndConditions_L1S1A2]);
      refalrts::reinit_svar( context[14], context[19] );
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_svar( context[21], context[48] );
      refalrts::update_name(context[47], functions[efunc_Symb]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[43] );
      refalrts::link_brackets( context[40], context[41] );
      refalrts::link_brackets( context[13], context[33] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[32], context[4] );
      refalrts::link_brackets( context[17], context[37] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[44];
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[21], context[47] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[40], context[41] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_evar( res, context[4], context[13] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[37], context[32] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[14], context[17] );
      res = refalrts::splice_elem( res, context[18] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[43], context[44]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentenceAssignsAndConditions\1/4 t.SrcPos/5 (/9 e.FuncName/7 )/10 (/13 e.Prefix/11 )/14 (/17 s.Num/19 e.ContextVars$a/15 )/18 t.Other/20 >/1
  // closed e.FuncName as range 7
  // closed e.Prefix as range 11
  // closed e.ContextVars$a as range 15
  //DEBUG: t.SrcPos: 5
  //DEBUG: t.Other: 20
  //DEBUG: s.Num: 19
  //DEBUG: e.FuncName: 7
  //DEBUG: e.Prefix: 11
  //DEBUG: e.ContextVars$a: 15

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckSentenceAssignsAndConditions\1/4 t.SrcPos/5 (/9 e.FuncName/7 )/10 (/13 e.Prefix/11 )/14 {REMOVED TILE} t.Other/20 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/17 AsIs: s.Num/19 AsIs: e.ContextVars$a/15 AsIs: )/18 } Tile{ ]] }
  refalrts::link_brackets( context[17], context[18] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentenceAssignsAndConditions_L1("CheckSentenceAssignsAndConditions\\1", COOKIE1_, COOKIE2_, func_gen_CheckSentenceAssignsAndConditions_L1);


static refalrts::FnResult func_CheckSentenceAssignsAndConditions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & CheckSentenceAssignsAndConditions/4 t.SrcPos/33 (/23 e.FuncName/21 )/24 (/19 e.Prefix/17 )/20 (/15 e.ContextVars/13 )/16 (/7 (/11 e._/9 )/12 e.AssignsOrConditions/5 (/31 e._0/29 )/32 (/27 e._1/25 )/28 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_right( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_right( context[25], context[26], context[5], context[6] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_right( context[29], context[30], context[5], context[6] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.FuncName as range 21
  // closed e.Prefix as range 17
  // closed e.ContextVars as range 13
  // closed e._ as range 9
  // closed e.AssignsOrConditions as range 5
  // closed e._0 as range 29
  // closed e._1 as range 25
  context[34] = refalrts::tvar_left( context[33], context[2], context[3] );
  if( ! context[34] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.FuncName: 21
  //DEBUG: e.Prefix: 17
  //DEBUG: e.ContextVars: 13
  //DEBUG: e._: 9
  //DEBUG: e.AssignsOrConditions: 5
  //DEBUG: e._0: 29
  //DEBUG: e._1: 25
  //DEBUG: t.SrcPos: 33

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e._/9 )/12 {REMOVED TILE} (/31 e._0/29 {REMOVED TILE} e._1/25 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </32 HalfReuse: & DelAccumulator/27 } Tile{ AsIs: </0 Reuse: & DoMapAccum@3/4 AsIs: t.SrcPos/33 AsIs: (/23 AsIs: e.FuncName/21 AsIs: )/24 AsIs: (/19 AsIs: e.Prefix/17 AsIs: )/20 AsIs: (/15 } Tile{ HalfReuse: 1/28 } Tile{ AsIs: e.ContextVars/13 } Tile{ AsIs: )/16 AsIs: (/7 HalfReuse: )/11 } Tile{ AsIs: e.AssignsOrConditions/5 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[32]);
  refalrts::reinit_name(context[27], functions[efunc_DelAccumulator]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z3]);
  refalrts::reinit_number(context[28], 1UL);
  refalrts::reinit_close_bracket(context[11]);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[11] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[16], context[11] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[0], context[15] );
  res = refalrts::splice_evar( res, context[32], context[27] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckSentenceAssignsAndConditions("CheckSentenceAssignsAndConditions", COOKIE1_, COOKIE2_, func_CheckSentenceAssignsAndConditions);


static refalrts::FnResult func_CheckSentenceResult(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & CheckSentenceResult/4 t.SrcPos/33 (/23 e.FuncName/21 )/24 (/19 e.Prefix/17 )/20 (/15 e.ContextVars/13 )/16 (/7 (/11 e._/9 )/12 e._0/5 (/31 e.Result/29 )/32 (/27 e._1/25 )/28 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_right( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_right( context[25], context[26], context[5], context[6] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_right( context[29], context[30], context[5], context[6] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.FuncName as range 21
  // closed e.Prefix as range 17
  // closed e.ContextVars as range 13
  // closed e._ as range 9
  // closed e._0 as range 5
  // closed e.Result as range 29
  // closed e._1 as range 25
  context[34] = refalrts::tvar_left( context[33], context[2], context[3] );
  if( ! context[34] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.FuncName: 21
  //DEBUG: e.Prefix: 17
  //DEBUG: e.ContextVars: 13
  //DEBUG: e._: 9
  //DEBUG: e._0: 5
  //DEBUG: e.Result: 29
  //DEBUG: e._1: 25
  //DEBUG: t.SrcPos: 33

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} e._/9 )/12 e._0/5 (/31 {REMOVED TILE} {REMOVED TILE} e._1/25 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </32 HalfReuse: & DelAccumulator/27 } Tile{ AsIs: </0 Reuse: & DoMapAccum@8/4 AsIs: t.SrcPos/33 AsIs: (/23 AsIs: e.FuncName/21 AsIs: )/24 AsIs: (/19 AsIs: e.Prefix/17 AsIs: )/20 AsIs: (/15 AsIs: e.ContextVars/13 AsIs: )/16 HalfReuse: 1/7 AsIs: (/11 } Tile{ AsIs: )/28 } Tile{ AsIs: e.Result/29 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[32]);
  refalrts::reinit_name(context[27], functions[efunc_DelAccumulator]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z8]);
  refalrts::reinit_number(context[7], 1UL);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[28] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_evar( res, context[32], context[27] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckSentenceResult("CheckSentenceResult", COOKIE1_, COOKIE2_, func_CheckSentenceResult);


static refalrts::FnResult func_CheckSentencePattern(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & CheckSentencePattern/4 t.SrcPos/33 (/23 e.FuncName/21 )/24 (/19 e.Prefix/17 )/20 (/15 e.ContextVars/13 )/16 (/7 (/11 e.Pattern/9 )/12 e._/5 (/31 e._0/29 )/32 (/27 e._1/25 )/28 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_right( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_right( context[25], context[26], context[5], context[6] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_right( context[29], context[30], context[5], context[6] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.FuncName as range 21
  // closed e.Prefix as range 17
  // closed e.ContextVars as range 13
  // closed e.Pattern as range 9
  // closed e._ as range 5
  // closed e._0 as range 29
  // closed e._1 as range 25
  context[34] = refalrts::tvar_left( context[33], context[2], context[3] );
  if( ! context[34] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.FuncName: 21
  //DEBUG: e.Prefix: 17
  //DEBUG: e.ContextVars: 13
  //DEBUG: e.Pattern: 9
  //DEBUG: e._: 5
  //DEBUG: e._0: 29
  //DEBUG: e._1: 25
  //DEBUG: t.SrcPos: 33

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/12 e._/5 (/31 e._0/29 {REMOVED TILE} e._1/25 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </32 HalfReuse: & DelAccumulator/27 } Tile{ AsIs: </0 Reuse: & DoMapAccum@8/4 AsIs: t.SrcPos/33 AsIs: (/23 AsIs: e.FuncName/21 AsIs: )/24 AsIs: (/19 AsIs: e.Prefix/17 AsIs: )/20 AsIs: (/15 AsIs: e.ContextVars/13 AsIs: )/16 HalfReuse: 1/7 AsIs: (/11 } Tile{ AsIs: )/28 } Tile{ AsIs: e.Pattern/9 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[32]);
  refalrts::reinit_name(context[27], functions[efunc_DelAccumulator]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z8]);
  refalrts::reinit_number(context[7], 1UL);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[28] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_evar( res, context[32], context[27] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckSentencePattern("CheckSentencePattern", COOKIE1_, COOKIE2_, func_CheckSentencePattern);


static refalrts::FnResult func_CheckExpression(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & CheckExpression/4 t.SrcPos/21 (/19 e.FuncName/17 )/20 (/15 e.Prefix/13 )/16 (/11 e.ContextVars/9 )/12 (/7 e.Expression/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.FuncName as range 17
  // closed e.Prefix as range 13
  // closed e.ContextVars as range 9
  // closed e.Expression as range 5
  context[22] = refalrts::tvar_left( context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.FuncName: 17
  //DEBUG: e.Prefix: 13
  //DEBUG: e.ContextVars: 9
  //DEBUG: e.Expression: 5
  //DEBUG: t.SrcPos: 21

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </23 & DelAccumulator/24 Tile{ AsIs: </0 Reuse: & DoMapAccum@8/4 AsIs: t.SrcPos/21 AsIs: (/19 AsIs: e.FuncName/17 AsIs: )/20 AsIs: (/15 AsIs: e.Prefix/13 AsIs: )/16 AsIs: (/11 AsIs: e.ContextVars/9 AsIs: )/12 HalfReuse: 1/7 } (/25 )/26 Tile{ AsIs: e.Expression/5 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_DelAccumulator]);
  refalrts::alloc_open_bracket(vm, context[25]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z8]);
  refalrts::reinit_number(context[7], 1UL);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckExpression("CheckExpression", COOKIE1_, COOKIE2_, func_CheckExpression);


static refalrts::FnResult func_gen_CheckPatternPairs_S1L1B1S3B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & CheckPatternPairs$1\1:1$3:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckPatternPairs$1\1:1$3:1/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 s.new4/15 s.new5/16 s.new6/17 e.new7/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  if( ! refalrts::svar_left( context[15], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[16], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[17], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new7 as range 2
  do {
    // </0 & CheckPatternPairs$1\1:1$3:1/4 t.SrcPos/5 (/9 e.FuncName/18 )/10 (/13 e.Prefix/20 )/14 s.Num-R/15 s.Num-L/16 # True/17 e.Other/22 >/1
    context[18] = context[7];
    context[19] = context[8];
    context[20] = context[11];
    context[21] = context[12];
    context[22] = context[2];
    context[23] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_True], context[17] ) )
      continue;
    // closed e.FuncName as range 18
    // closed e.Prefix as range 20
    // closed e.Other as range 22
    //DEBUG: t.SrcPos: 5
    //DEBUG: s.Num-R: 15
    //DEBUG: s.Num-L: 16
    //DEBUG: e.FuncName: 18
    //DEBUG: e.Prefix: 20
    //DEBUG: e.Other: 22

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Other/22 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CreateScreeningWarning@1/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/18 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix/20 AsIs: )/14 } (/24 </25 & Symb/26 Tile{ AsIs: s.Num-R/15 } >/27 )/28 </29 & Symb/30 Tile{ AsIs: s.Num-L/16 HalfReuse: >/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[24]);
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_Symb]);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::alloc_close_bracket(vm, context[28]);
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_Symb]);
    refalrts::update_name(context[4], functions[efunc_gen_CreateScreeningWarning_Z1]);
    refalrts::reinit_close_call(context[17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[29] );
    refalrts::link_brackets( context[24], context[28] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[25] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_evar( res, context[27], context[30] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[24], context[26] );
    refalrts::splice_to_freelist_open( vm, context[14], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPatternPairs$1\1:1$3:1/4 t.SrcPos/5 (/9 e.FuncName/7 )/10 (/13 e.Prefix/11 )/14 s.Num-R/15 s.Num-L/16 # False/17 >/1
  if( ! refalrts::ident_term( identifiers[ident_False], context[17] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.FuncName as range 7
  // closed e.Prefix as range 11
  //DEBUG: t.SrcPos: 5
  //DEBUG: s.Num-R: 15
  //DEBUG: s.Num-L: 16
  //DEBUG: e.FuncName: 7
  //DEBUG: e.Prefix: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckPatternPairs$1\1:1$3:1/4 t.SrcPos/5 (/9 e.FuncName/7 )/10 (/13 e.Prefix/11 )/14 s.Num-R/15 s.Num-L/16 # False/17 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckPatternPairs_S1L1B1S3B1("CheckPatternPairs$1\\1:1$3:1", COOKIE1_, COOKIE2_, func_gen_CheckPatternPairs_S1L1B1S3B1);


static refalrts::FnResult func_gen_CheckPatternPairs_S1L1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 54 elems
  refalrts::Iter context[54];
  refalrts::zeros( context, 54 );
  // </0 & CheckPatternPairs$1\1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckPatternPairs$1\1:1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 t.new3/13 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 s.new6/23 s.new7/24 (/27 e.new8/25 )/28 e.new9/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  if( ! refalrts::svar_left( context[23], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[24], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new8 as range 25
  // closed e.new9 as range 2
  do {
    // </0 & CheckPatternPairs$1\1:1/4 (/7 e.Pattern-L/29 )/8 (/11 e.Pattern-R/31 )/12 t.SrcPos/13 (/17 e.FuncName/33 )/18 (/21 e.Prefix/35 )/22 s.Num-R/23 s.Num-L/24 (/27 e.ContextVars$b/37 )/28 e._5/39 >/1
    context[29] = context[5];
    context[30] = context[6];
    context[31] = context[9];
    context[32] = context[10];
    context[33] = context[15];
    context[34] = context[16];
    context[35] = context[19];
    context[36] = context[20];
    context[37] = context[25];
    context[38] = context[26];
    context[39] = context[2];
    context[40] = context[3];
    // closed e.Pattern-L as range 29
    // closed e.Pattern-R as range 31
    // closed e.FuncName as range 33
    // closed e.Prefix as range 35
    // closed e.ContextVars$b as range 37
    // closed e._5 as range 39
    //DEBUG: t.SrcPos: 13
    //DEBUG: s.Num-R: 23
    //DEBUG: s.Num-L: 24
    //DEBUG: e.Pattern-L: 29
    //DEBUG: e.Pattern-R: 31
    //DEBUG: e.FuncName: 33
    //DEBUG: e.Prefix: 35
    //DEBUG: e.ContextVars$b: 37
    //DEBUG: e._5: 39
    //13: t.SrcPos
    //23: s.Num-R
    //24: s.Num-L
    //29: e.Pattern-L
    //31: e.Pattern-R
    //33: e.FuncName
    //35: e.Prefix
    //37: e.ContextVars$b
    //39: e._5
    //45: e.Pattern-L
    //49: e.Pattern-R

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_name(vm, context[43], functions[efunc_gen_CheckPatternPairs_S1L1B1S1C1]);
    refalrts::alloc_open_bracket(vm, context[44]);
    refalrts::copy_evar(vm, context[45], context[46], context[29], context[30]);
    refalrts::alloc_close_bracket(vm, context[47]);
    refalrts::alloc_open_bracket(vm, context[48]);
    refalrts::copy_evar(vm, context[49], context[50], context[31], context[32]);
    refalrts::alloc_close_bracket(vm, context[51]);
    refalrts::alloc_close_call(vm, context[42]);
    refalrts::push_stack( vm, context[42] );
    refalrts::push_stack( vm, context[41] );
    res = refalrts::splice_elem( res, context[42] );
    refalrts::link_brackets( context[48], context[51] );
    res = refalrts::splice_elem( res, context[51] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_elem( res, context[48] );
    refalrts::link_brackets( context[44], context[47] );
    res = refalrts::splice_elem( res, context[47] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_elem( res, context[44] );
    res = refalrts::splice_elem( res, context[43] );
    res = refalrts::splice_elem( res, context[41] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </41 & CheckPatternPairs$1\1:1$1?1/45 (/48 )/49 (/52 )/53 >/42
      context[43] = 0;
      context[44] = 0;
      context[45] = refalrts::call_left( context[43], context[44], context[41], context[42] );
      context[46] = 0;
      context[47] = 0;
      context[48] = refalrts::brackets_left( context[46], context[47], context[43], context[44] );
      if( ! context[48] )
        continue;
      refalrts::bracket_pointers(context[48], context[49]);
      context[50] = 0;
      context[51] = 0;
      context[52] = refalrts::brackets_left( context[50], context[51], context[43], context[44] );
      if( ! context[52] )
        continue;
      refalrts::bracket_pointers(context[52], context[53]);
      if( ! refalrts::empty_seq( context[46], context[47] ) )
        continue;
      if( ! refalrts::empty_seq( context[50], context[51] ) )
        continue;
      if( ! refalrts::empty_seq( context[43], context[44] ) )
        continue;
      //DEBUG: t.SrcPos: 13
      //DEBUG: s.Num-R: 23
      //DEBUG: s.Num-L: 24
      //DEBUG: e.Pattern-L: 29
      //DEBUG: e.Pattern-R: 31
      //DEBUG: e.FuncName: 33
      //DEBUG: e.Prefix: 35
      //DEBUG: e.ContextVars$b: 37
      //DEBUG: e._5: 39

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & CheckPatternPairs$1\1:1/4 (/7 e.Pattern-L/29 {REMOVED TILE} e.Pattern-R/31 {REMOVED TILE} s.Num-R/23 s.Num-L/24 {REMOVED TILE} e.ContextVars$b/37 )/28 e._5/39 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CreateScreeningWarning@1/12 AsIs: t.SrcPos/13 AsIs: (/17 AsIs: e.FuncName/33 AsIs: )/18 AsIs: (/21 AsIs: e.Prefix/35 AsIs: )/22 } Tile{ AsIs: (/27 } Tile{ HalfReuse: </8 HalfReuse: & Symb/11 } Tile{ HalfReuse: s.Num-R23 /41 HalfReuse: >/45 HalfReuse: )/48 HalfReuse: </49 HalfReuse: & Symb/52 HalfReuse: s.Num-L24 /53 AsIs: >/42 AsIs: >/1 ]] }
      refalrts::reinit_name(context[12], functions[efunc_gen_CreateScreeningWarning_Z1]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[11], functions[efunc_Symb]);
      refalrts::reinit_svar( context[41], context[23] );
      refalrts::reinit_close_call(context[45]);
      refalrts::reinit_close_bracket(context[48]);
      refalrts::reinit_open_call(context[49]);
      refalrts::reinit_name(context[52], functions[efunc_Symb]);
      refalrts::reinit_svar( context[53], context[24] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[49] );
      refalrts::link_brackets( context[27], context[48] );
      refalrts::push_stack( vm, context[45] );
      refalrts::push_stack( vm, context[8] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[41];
      res = refalrts::splice_evar( res, context[8], context[11] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[12], context[22] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[41], context[42]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckPatternPairs$1\1:1/4 (/7 e.Pattern-L/29 )/8 (/11 e.Pattern-R/31 )/12 t.SrcPos/13 (/17 e.FuncName/33 )/18 (/21 e.Prefix/35 )/22 s.Num-R/23 s.Num-L/24 (/27 e.ContextVars$b/37 )/28 # Clear/41 e._5/39 >/1
    context[29] = context[5];
    context[30] = context[6];
    context[31] = context[9];
    context[32] = context[10];
    context[33] = context[15];
    context[34] = context[16];
    context[35] = context[19];
    context[36] = context[20];
    context[37] = context[25];
    context[38] = context[26];
    context[39] = context[2];
    context[40] = context[3];
    context[41] = refalrts::ident_left( identifiers[ident_Clear], context[39], context[40] );
    if( ! context[41] )
      continue;
    // closed e.Pattern-L as range 29
    // closed e.Pattern-R as range 31
    // closed e.FuncName as range 33
    // closed e.Prefix as range 35
    // closed e.ContextVars$b as range 37
    // closed e._5 as range 39
    //DEBUG: t.SrcPos: 13
    //DEBUG: s.Num-R: 23
    //DEBUG: s.Num-L: 24
    //DEBUG: e.Pattern-L: 29
    //DEBUG: e.Pattern-R: 31
    //DEBUG: e.FuncName: 33
    //DEBUG: e.Prefix: 35
    //DEBUG: e.ContextVars$b: 37
    //DEBUG: e._5: 39

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.Pattern-L/29 {REMOVED TILE} {REMOVED TILE} e.Pattern-R/31 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.ContextVars$b/37 {REMOVED TILE} e._5/39 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CreateScreeningWarning@1/12 AsIs: t.SrcPos/13 AsIs: (/17 AsIs: e.FuncName/33 AsIs: )/18 AsIs: (/21 AsIs: e.Prefix/35 AsIs: )/22 } Tile{ AsIs: (/11 } Tile{ HalfReuse: </4 HalfReuse: & Symb/7 } Tile{ AsIs: s.Num-R/23 } Tile{ HalfReuse: >/8 } Tile{ AsIs: )/28 HalfReuse: </41 } & Symb/42 Tile{ AsIs: s.Num-L/24 HalfReuse: >/27 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[42], functions[efunc_Symb]);
    refalrts::reinit_name(context[12], functions[efunc_gen_CreateScreeningWarning_Z1]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_Symb]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_open_call(context[41]);
    refalrts::reinit_close_call(context[27]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[41] );
    refalrts::link_brackets( context[11], context[28] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_elem( res, context[42] );
    res = refalrts::splice_evar( res, context[28], context[41] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[12], context[22] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPatternPairs$1\1:1/4 (/7 e.Pattern-L/5 )/8 (/11 e.Pattern-R/9 )/12 t.SrcPos/13 (/17 e.FuncName/15 )/18 (/21 e.Prefix/19 )/22 s.Num-R/23 s.Num-L/24 (/27 e.ContextVars$b/25 )/28 e._5/2 >/1
  // closed e.Pattern-L as range 5
  // closed e.Pattern-R as range 9
  // closed e.FuncName as range 15
  // closed e.Prefix as range 19
  // closed e.ContextVars$b as range 25
  // closed e._5 as range 2
  //DEBUG: t.SrcPos: 13
  //DEBUG: s.Num-R: 23
  //DEBUG: s.Num-L: 24
  //DEBUG: e.Pattern-L: 5
  //DEBUG: e.Pattern-R: 9
  //DEBUG: e.FuncName: 15
  //DEBUG: e.Prefix: 19
  //DEBUG: e.ContextVars$b: 25
  //DEBUG: e._5: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e._5/2 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CheckPatternPairs$1\1:1$3:1/12 AsIs: t.SrcPos/13 AsIs: (/17 AsIs: e.FuncName/15 AsIs: )/18 AsIs: (/21 AsIs: e.Prefix/19 AsIs: )/22 AsIs: s.Num-R/23 AsIs: s.Num-L/24 HalfReuse: </27 } Tile{ HalfReuse: & PatternLanguagesCheck@1/28 } Tile{ AsIs: (/11 } Tile{ AsIs: e.ContextVars$b/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Pattern-L/5 AsIs: )/8 } Tile{ AsIs: e.Pattern-R/9 } >/29 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_call(vm, context[29]);
  refalrts::reinit_name(context[12], functions[efunc_gen_CheckPatternPairs_S1L1B1S3B1]);
  refalrts::reinit_open_call(context[27]);
  refalrts::reinit_name(context[28], functions[efunc_gen_PatternLanguagesCheck_Z1]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[29] );
  refalrts::push_stack( vm, context[27] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[29] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[4], context[8] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[12], context[27] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckPatternPairs_S1L1B1("CheckPatternPairs$1\\1:1", COOKIE1_, COOKIE2_, func_gen_CheckPatternPairs_S1L1B1);


static refalrts::FnResult func_gen_CheckPatternPairs_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & CheckPatternPairs$1=2/4 t.SrcPos/5 (/9 e.FuncName/7 )/10 (/13 e.Prefix/11 )/14 (/17 e.Pairs/15 )/18 e.ContextVars$b/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.FuncName as range 7
  // closed e.Prefix as range 11
  // closed e.Pairs as range 15
  // closed e.ContextVars$b as range 2
  //DEBUG: t.SrcPos: 5
  //DEBUG: e.FuncName: 7
  //DEBUG: e.Prefix: 11
  //DEBUG: e.Pairs: 15
  //DEBUG: e.ContextVars$b: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@5/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix/11 AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.ContextVars$b/2 } Tile{ AsIs: )/18 } Tile{ AsIs: e.Pairs/15 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z5]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckPatternPairs_S1A2("CheckPatternPairs$1=2", COOKIE1_, COOKIE2_, func_gen_CheckPatternPairs_S1A2);


static refalrts::FnResult func_gen_CheckPatternPairs_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & CheckPatternPairs$1=1/4 t.SrcPos/5 (/9 e.FuncName/7 )/10 (/13 e.Prefix/11 )/14 (/17 e.Pairs/15 )/18 e.ContextVars$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.FuncName as range 7
  // closed e.Prefix as range 11
  // closed e.Pairs as range 15
  // closed e.ContextVars$a as range 2
  //DEBUG: t.SrcPos: 5
  //DEBUG: e.FuncName: 7
  //DEBUG: e.Prefix: 11
  //DEBUG: e.Pairs: 15
  //DEBUG: e.ContextVars$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1=2/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix/11 AsIs: )/14 AsIs: (/17 AsIs: e.Pairs/15 AsIs: )/18 } </19 & CreateContext/20 # NoMarkupContext/21 Tile{ AsIs: e.ContextVars$a/2 } >/22 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_name(vm, context[20], functions[efunc_CreateContext]);
  refalrts::alloc_ident(vm, context[21], identifiers[ident_NoMarkupContext]);
  refalrts::alloc_close_call(vm, context[22]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[22] );
  refalrts::push_stack( vm, context[19] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[19], context[21] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckPatternPairs_S1A1("CheckPatternPairs$1=1", COOKIE1_, COOKIE2_, func_gen_CheckPatternPairs_S1A1);


static refalrts::FnResult func_CheckPatternPairs(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & CheckPatternPairs/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & CheckPatternPairs/4 t.SrcPos/23 (/21 e.FuncName/19 )/22 (/17 e.Prefix/15 )/18 (/13 e.ContextVars/11 )/14 (/9 e.Pairs/7 )/10 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_right( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_right( context[11], context[12], context[5], context[6] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_right( context[15], context[16], context[5], context[6] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_right( context[19], context[20], context[5], context[6] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.FuncName as range 19
    // closed e.Prefix as range 15
    // closed e.ContextVars as range 11
    // closed e.Pairs as range 7
    context[24] = refalrts::tvar_left( context[23], context[5], context[6] );
    if( ! context[24] )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: e.FuncName: 19
    //DEBUG: e.Prefix: 15
    //DEBUG: e.ContextVars: 11
    //DEBUG: e.Pairs: 7
    //DEBUG: t.SrcPos: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1=1/4 AsIs: t.SrcPos/23 AsIs: (/21 AsIs: e.FuncName/19 AsIs: )/22 AsIs: (/17 AsIs: e.Prefix/15 AsIs: )/18 AsIs: (/13 } Tile{ AsIs: e.Pairs/7 } Tile{ AsIs: )/14 HalfReuse: </9 } & Unique/25 </26 & ExtractVariables-Expr/27 Tile{ AsIs: e.ContextVars/11 } >/28 Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[25], functions[efunc_Unique]);
    refalrts::alloc_open_call(vm, context[26]);
    refalrts::alloc_name(vm, context[27], functions[efunc_ExtractVariablesm_Expr]);
    refalrts::alloc_close_call(vm, context[28]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1A1]);
    refalrts::reinit_open_call(context[9]);
    refalrts::reinit_close_call(context[10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[26] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[10];
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[25], context[27] );
    res = refalrts::splice_evar( res, context[14], context[9] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPatternPairs/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckPatternPairs/4 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckPatternPairs("CheckPatternPairs", COOKIE1_, COOKIE2_, func_CheckPatternPairs);


static refalrts::FnResult func_gen_PatternLanguagesCheck_S1A10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & PatternLanguagesCheck$1=10/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & PatternLanguagesCheck$1=10/4 (/9 (/13 e.2/11 )/14 (/17 e.4/15 )/18 )/10 e./5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    context[11] = 0;
    context[12] = 0;
    context[13] = refalrts::brackets_left( context[11], context[12], context[7], context[8] );
    if( ! context[13] )
      continue;
    refalrts::bracket_pointers(context[13], context[14]);
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_left( context[15], context[16], context[7], context[8] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    // closed e.2 as range 11
    // closed e.4 as range 15
    // closed e. as range 5
    //DEBUG: e.2: 11
    //DEBUG: e.4: 15
    //DEBUG: e.: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </19 & CheckEveryMatch$1:1@1/20 (/21 Tile{ AsIs: e./5 } Tile{ HalfReuse: )/0 HalfReuse: </4 HalfReuse: & ObjectMatch/9 AsIs: (/13 AsIs: e.2/11 AsIs: )/14 AsIs: (/17 AsIs: e.4/15 AsIs: )/18 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_CheckEveryMatch_S1B1Z1]);
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::reinit_close_bracket(context[0]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[9], functions[efunc_ObjectMatch]);
    refalrts::reinit_close_call(context[10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[4] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[21], context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[0], context[10] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[19], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PatternLanguagesCheck$1=10/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: # True/0 HalfReuse: (/4 HalfReuse: )/1 ]] }
    refalrts::reinit_ident(context[0], identifiers[ident_True]);
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[4], context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PatternLanguagesCheck$1=10/4 e.Tuples/2 >/1
  // closed e.Tuples as range 2
  //DEBUG: e.Tuples: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckEveryMatch@0/4 AsIs: e.Tuples/2 HalfReuse: (/1 } )/5 >/6 Tile{ ]] }
  refalrts::alloc_close_bracket(vm, context[5]);
  refalrts::alloc_close_call(vm, context[6]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckEveryMatch_Z0]);
  refalrts::reinit_open_bracket(context[1]);
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[1], context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PatternLanguagesCheck_S1A10("PatternLanguagesCheck$1=10", COOKIE1_, COOKIE2_, func_gen_PatternLanguagesCheck_S1A10);


static refalrts::FnResult func_gen_PatternLanguagesCheck_S1A9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & PatternLanguagesCheck$1=9/4 (/7 e.Tuple-R/5 )/8 # Clear/9 e.Tuple-L/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = refalrts::ident_left( identifiers[ident_Clear], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tuple-R as range 5
  // closed e.Tuple-L as range 2
  //DEBUG: e.Tuple-R: 5
  //DEBUG: e.Tuple-L: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PatternLanguagesCheck$1=10/4 HalfReuse: </7 } & DelAccumulator/10 </11 Tile{ HalfReuse: & DoMapAccum@9/8 HalfReuse: (/9 AsIs: e.Tuple-L/2 HalfReuse: )/1 } (/12 )/13 Tile{ AsIs: e.Tuple-R/5 } >/14 >/15 >/16 Tile{ ]] }
  refalrts::alloc_name(vm, context[10], functions[efunc_DelAccumulator]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_PatternLanguagesCheck_S1A10]);
  refalrts::reinit_open_call(context[7]);
  refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z9]);
  refalrts::reinit_open_bracket(context[9]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[9], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[14], context[16] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[8], context[1] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PatternLanguagesCheck_S1A9("PatternLanguagesCheck$1=9", COOKIE1_, COOKIE2_, func_gen_PatternLanguagesCheck_S1A9);


static refalrts::FnResult func_gen_PatternLanguagesCheck_S1A8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & PatternLanguagesCheck$1=8/4 (/7 e.Pattern-L$a/5 )/8 (/11 e.Generalized$a/9 )/12 # Clear/13 e.Tuple-R/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = refalrts::ident_left( identifiers[ident_Clear], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  // closed e.Pattern-L$a as range 5
  // closed e.Generalized$a as range 9
  // closed e.Tuple-R as range 2
  //DEBUG: e.Pattern-L$a: 5
  //DEBUG: e.Generalized$a: 9
  //DEBUG: e.Tuple-R: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </14 & PatternLanguagesCheck$1=9/15 (/16 Tile{ AsIs: e.Tuple-R/2 } )/17 Tile{ AsIs: </0 Reuse: & GenericMatch/4 AsIs: (/7 AsIs: e.Pattern-L$a/5 AsIs: )/8 AsIs: (/11 AsIs: e.Generalized$a/9 AsIs: )/12 HalfReuse: >/13 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_PatternLanguagesCheck_S1A9]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_GenericMatch]);
  refalrts::reinit_close_call(context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[0], context[13] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[14], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PatternLanguagesCheck_S1A8("PatternLanguagesCheck$1=8", COOKIE1_, COOKIE2_, func_gen_PatternLanguagesCheck_S1A8);


static refalrts::FnResult func_gen_PatternLanguagesCheck_S1A7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & PatternLanguagesCheck$1=7/4 (/7 e.Pattern-L$a/5 )/8 (/11 e.Pattern-R$b/9 )/12 e.Generalized$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Pattern-L$a as range 5
  // closed e.Pattern-R$b as range 9
  // closed e.Generalized$a as range 2
  //DEBUG: e.Pattern-L$a: 5
  //DEBUG: e.Pattern-R$b: 9
  //DEBUG: e.Generalized$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PatternLanguagesCheck$1=8/4 AsIs: (/7 AsIs: e.Pattern-L$a/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Generalized$a/2 } Tile{ AsIs: )/12 } </13 & GenericMatch/14 (/15 Tile{ AsIs: e.Pattern-R$b/9 } )/16 (/17 e.Generalized$a/2/18 )/20 >/21 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_GenericMatch]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::copy_evar(vm, context[18], context[19], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::update_name(context[4], functions[efunc_gen_PatternLanguagesCheck_S1A8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[17], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[16], context[21] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[13], context[15] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PatternLanguagesCheck_S1A7("PatternLanguagesCheck$1=7", COOKIE1_, COOKIE2_, func_gen_PatternLanguagesCheck_S1A7);


static refalrts::FnResult func_gen_PatternLanguagesCheck_S1A6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & PatternLanguagesCheck$1=6/4 (/7 e.Pattern-L$a/5 )/8 (/11 e.Pattern-R$b/9 )/12 e.Generalized/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Pattern-L$a as range 5
  // closed e.Pattern-R$b as range 9
  // closed e.Generalized as range 2
  //DEBUG: e.Pattern-L$a: 5
  //DEBUG: e.Pattern-R$b: 9
  //DEBUG: e.Generalized: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PatternLanguagesCheck$1=7/4 AsIs: (/7 AsIs: e.Pattern-L$a/5 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R$b/9 AsIs: )/12 } </13 & DelAccumulator/14 </15 & DoMapAccum@10/16 1/17 (/18 )/19 Tile{ AsIs: e.Generalized/2 } >/20 >/21 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_DelAccumulator]);
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DoMapAccum_Z10]);
  refalrts::alloc_number(vm, context[17], 1UL);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_close_call(vm, context[20]);
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::update_name(context[4], functions[efunc_gen_PatternLanguagesCheck_S1A7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PatternLanguagesCheck_S1A6("PatternLanguagesCheck$1=6", COOKIE1_, COOKIE2_, func_gen_PatternLanguagesCheck_S1A6);


static refalrts::FnResult func_gen_PatternLanguagesCheck_S1A5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & PatternLanguagesCheck$1=5/4 (/7 e.Pattern-L$a/5 )/8 e.Pattern-R$b/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Pattern-L$a as range 5
  // closed e.Pattern-R$b as range 2
  //DEBUG: e.Pattern-L$a: 5
  //DEBUG: e.Pattern-R$b: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PatternLanguagesCheck$1=6/4 AsIs: (/7 AsIs: e.Pattern-L$a/5 AsIs: )/8 } (/9 e.Pattern-R$b/2/10 )/12 </13 & Generalize=1/14 </15 & GlobalGen/16 (/17 e.Pattern-L$a/5/18 )/20 (/21 Tile{ AsIs: e.Pattern-R$b/2 } )/22 >/23 >/24 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::copy_evar(vm, context[10], context[11], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_Generalize_A1]);
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_GlobalGen]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::copy_evar(vm, context[18], context[19], context[5], context[6]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::alloc_open_bracket(vm, context[21]);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::alloc_close_call(vm, context[24]);
  refalrts::update_name(context[4], functions[efunc_gen_PatternLanguagesCheck_S1A6]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[20] );
  refalrts::link_brackets( context[9], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[22], context[24] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[21] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PatternLanguagesCheck_S1A5("PatternLanguagesCheck$1=5", COOKIE1_, COOKIE2_, func_gen_PatternLanguagesCheck_S1A5);


static refalrts::FnResult func_gen_PatternLanguagesCheck_S1A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & PatternLanguagesCheck$1=4/4 (/7 e.Pattern-R$a/5 )/8 e.Pattern-L$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Pattern-R$a as range 5
  // closed e.Pattern-L$a as range 2
  //DEBUG: e.Pattern-R$a: 5
  //DEBUG: e.Pattern-L$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & PatternLanguagesCheck$1=5/10 (/11 Tile{ AsIs: e.Pattern-L$a/2 } )/12 Tile{ AsIs: </0 Reuse: & Normalize=1/4 AsIs: (/7 AsIs: e.Pattern-R$a/5 AsIs: )/8 } </13 & Map@6/14 e.Pattern-R$a/5/15 >/17 >/18 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_PatternLanguagesCheck_S1A5]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_Map_Z6]);
  refalrts::copy_evar(vm, context[15], context[16], context[5], context[6]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::alloc_close_call(vm, context[18]);
  refalrts::update_name(context[4], functions[efunc_gen_Normalize_A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[18] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[13], context[18] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PatternLanguagesCheck_S1A4("PatternLanguagesCheck$1=4", COOKIE1_, COOKIE2_, func_gen_PatternLanguagesCheck_S1A4);


static refalrts::FnResult func_gen_PatternLanguagesCheck_S1A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & PatternLanguagesCheck$1=3/4 (/7 e.Pattern-L/5 )/8 e.Pattern-R$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Pattern-L as range 5
  // closed e.Pattern-R$a as range 2
  //DEBUG: e.Pattern-L: 5
  //DEBUG: e.Pattern-R$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PatternLanguagesCheck$1=4/4 AsIs: (/7 } Tile{ AsIs: e.Pattern-R$a/2 } Tile{ AsIs: )/8 } </9 & Map@7/10 Tile{ AsIs: e.Pattern-L/5 } >/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z7]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_PatternLanguagesCheck_S1A4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PatternLanguagesCheck_S1A3("PatternLanguagesCheck$1=3", COOKIE1_, COOKIE2_, func_gen_PatternLanguagesCheck_S1A3);


static refalrts::FnResult func_PatternLanguagesCheck(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & PatternLanguagesCheck/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PatternLanguagesCheck/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  do {
    // </0 & PatternLanguagesCheck/4 (/7 e.Pattern-L/13 )/8 (/11 e.Pattern-R/15 )/12 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    // closed e.Pattern-L as range 13
    // closed e.Pattern-R as range 15
    //DEBUG: e.Pattern-L: 13
    //DEBUG: e.Pattern-R: 15
    //13: e.Pattern-L
    //15: e.Pattern-R
    //22: e.Pattern-R

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[19], functions[efunc_gen_PatternLanguagesCheck_S1C1]);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_FlattenPattern]);
    refalrts::copy_evar(vm, context[22], context[23], context[15], context[16]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[17] );
    res = refalrts::splice_elem( res, context[18] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[20] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_elem( res, context[17] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </17 & PatternLanguagesCheck$1?1/21 e.FlattenedPattern-R/19 >/18
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::call_left( context[19], context[20], context[17], context[18] );
      // closed e.FlattenedPattern-R as range 19
      //DEBUG: e.Pattern-L: 13
      //DEBUG: e.Pattern-R: 15
      //DEBUG: e.FlattenedPattern-R: 19
      //13: e.Pattern-L
      //15: e.Pattern-R
      //19: e.FlattenedPattern-R
      //27: e.FlattenedPattern-R

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[22]);
      refalrts::alloc_name(vm, context[24], functions[efunc_gen_PatternLanguagesCheck_S1C2]);
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::alloc_name(vm, context[26], functions[efunc_IsPatternLinear]);
      refalrts::copy_evar(vm, context[27], context[28], context[19], context[20]);
      refalrts::alloc_close_call(vm, context[29]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[22] );
      res = refalrts::splice_elem( res, context[23] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[25] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_elem( res, context[22] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </22 & PatternLanguagesCheck$1?2/26 # True/27 >/23
        context[24] = 0;
        context[25] = 0;
        context[26] = refalrts::call_left( context[24], context[25], context[22], context[23] );
        context[27] = refalrts::ident_left( identifiers[ident_True], context[24], context[25] );
        if( ! context[27] )
          continue;
        if( ! refalrts::empty_seq( context[24], context[25] ) )
          continue;
        //DEBUG: e.Pattern-L: 13
        //DEBUG: e.Pattern-R: 15
        //DEBUG: e.FlattenedPattern-R: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} )/12 </17 {REMOVED TILE} e.FlattenedPattern-R/19 >/18 </22 & PatternLanguagesCheck$1?2/26 # True/27 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PatternLanguagesCheck$1=3/4 AsIs: (/7 AsIs: e.Pattern-L/13 AsIs: )/8 HalfReuse: </11 } Tile{ Reuse: & ReplaceADTBrackets/21 } Tile{ AsIs: e.Pattern-R/15 } Tile{ AsIs: >/23 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_gen_PatternLanguagesCheck_S1A3]);
        refalrts::reinit_open_call(context[11]);
        refalrts::update_name(context[21], functions[efunc_ReplaceADTBrackets]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[11] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[23];
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_elem( res, context[21] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[22], context[23]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[17], context[18]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PatternLanguagesCheck/4 (/7 e.Pattern-L/5 )/8 (/11 e.Pattern-R/9 )/12 >/1
  // closed e.Pattern-L as range 5
  // closed e.Pattern-R as range 9
  //DEBUG: e.Pattern-L: 5
  //DEBUG: e.Pattern-R: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & PatternLanguagesCheck/4 (/7 e.Pattern-L/5 )/8 (/11 e.Pattern-R/9 )/12 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PatternLanguagesCheck("PatternLanguagesCheck", COOKIE1_, COOKIE2_, func_PatternLanguagesCheck);


static refalrts::FnResult func_ReplaceADTBrackets(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & ReplaceADTBrackets/4 e.Pattern/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Pattern as range 2
  //DEBUG: e.Pattern: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@7/4 AsIs: e.Pattern/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ReplaceADTBrackets("ReplaceADTBrackets", COOKIE1_, COOKIE2_, func_ReplaceADTBrackets);


static refalrts::FnResult func_gen_CheckEveryMatch_S1B1S1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & CheckEveryMatch$1:1$1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckEveryMatch$1:1$1:1/4 (/7 e.new1/5 )/8 s.new2/9 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & CheckEveryMatch$1:1$1:1/4 (/7 e.new5/10 )/8 # Success/9 e.new4/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Success], context[9] ) )
      continue;
    // closed e.new5 as range 10
    // closed e.new4 as range 12
    do {
      // </0 & CheckEveryMatch$1:1$1:1/4 (/7 (/20 (/24 e.2/22 )/25 (/28 e.4/26 )/29 )/21 e./14 )/8 # Success/9 e.UpdatedAssigns/16 >/1
      context[14] = context[10];
      context[15] = context[11];
      context[16] = context[12];
      context[17] = context[13];
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[14], context[15] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[18], context[19] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      context[26] = 0;
      context[27] = 0;
      context[28] = refalrts::brackets_left( context[26], context[27], context[18], context[19] );
      if( ! context[28] )
        continue;
      refalrts::bracket_pointers(context[28], context[29]);
      if( ! refalrts::empty_seq( context[18], context[19] ) )
        continue;
      // closed e.2 as range 22
      // closed e.4 as range 26
      // closed e. as range 14
      // closed e.UpdatedAssigns as range 16
      //DEBUG: e.2: 22
      //DEBUG: e.4: 26
      //DEBUG: e.: 14
      //DEBUG: e.UpdatedAssigns: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & CheckEveryMatch$1:1/30 (/31 Tile{ AsIs: e./14 } Tile{ AsIs: )/8 HalfReuse: (/9 } Tile{ AsIs: e.UpdatedAssigns/16 } Tile{ HalfReuse: )/4 HalfReuse: </7 HalfReuse: & ObjectMatch/20 AsIs: (/24 AsIs: e.2/22 AsIs: )/25 AsIs: (/28 AsIs: e.4/26 AsIs: )/29 HalfReuse: >/21 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_CheckEveryMatch_S1B1]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::reinit_open_bracket(context[9]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[20], functions[efunc_ObjectMatch]);
      refalrts::reinit_close_call(context[21]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[7] );
      refalrts::link_brackets( context[28], context[29] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[9], context[4] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[4], context[21] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CheckEveryMatch$1:1$1:1/4 (/7 )/8 # Success/9 e.UpdatedAssigns/14 >/1
      context[14] = context[12];
      context[15] = context[13];
      if( ! refalrts::empty_seq( context[10], context[11] ) )
        continue;
      // closed e.UpdatedAssigns as range 14
      //DEBUG: e.UpdatedAssigns: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & CheckEveryMatch$1:1$1:1/4 (/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/8 HalfReuse: (/9 AsIs: e.UpdatedAssigns/14 HalfReuse: )/1 ]] }
      refalrts::reinit_ident(context[8], identifiers[ident_True]);
      refalrts::reinit_open_bracket(context[9]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckEveryMatch$1:1$1:1/4 (/7 e.Tuples/14 )/8 # Success/9 e.UpdatedAssigns/16 >/1
    context[14] = context[10];
    context[15] = context[11];
    context[16] = context[12];
    context[17] = context[13];
    // closed e.Tuples as range 14
    // closed e.UpdatedAssigns as range 16
    //DEBUG: e.Tuples: 14
    //DEBUG: e.UpdatedAssigns: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # Success/9 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckEveryMatch*2/4 } Tile{ AsIs: e.Tuples/14 } Tile{ AsIs: (/7 } Tile{ AsIs: e.UpdatedAssigns/16 } Tile{ AsIs: )/8 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_CheckEveryMatch_D2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[16], context[17] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckEveryMatch$1:1$1:1/4 (/7 e.Tuples/5 )/8 # Fails/9 >/1
  if( ! refalrts::ident_term( identifiers[ident_Fails], context[9] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Tuples as range 5
  //DEBUG: e.Tuples: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckEveryMatch$1:1$1:1/4 (/7 e.Tuples/5 )/8 # Fails/9 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckEveryMatch_S1B1S1B1("CheckEveryMatch$1:1$1:1", COOKIE1_, COOKIE2_, func_gen_CheckEveryMatch_S1B1S1B1);


static refalrts::FnResult func_gen_CheckEveryMatch_S1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & CheckEveryMatch$1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckEveryMatch$1:1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & CheckEveryMatch$1:1/4 (/7 e.Tuples/13 )/8 (/11 e.Assigns/15 )/12 # Clear/19 e.NewAssigns/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = refalrts::ident_left( identifiers[ident_Clear], context[17], context[18] );
    if( ! context[19] )
      continue;
    // closed e.Tuples as range 13
    // closed e.Assigns as range 15
    // closed e.NewAssigns as range 17
    //DEBUG: e.Tuples: 13
    //DEBUG: e.Assigns: 15
    //DEBUG: e.NewAssigns: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckEveryMatch$1:1$1:1/4 AsIs: (/7 AsIs: e.Tuples/13 AsIs: )/8 HalfReuse: </11 } & AppendAssigns/20 Tile{ HalfReuse: (/12 } Tile{ AsIs: e.Assigns/15 } Tile{ HalfReuse: )/19 AsIs: e.NewAssigns/17 AsIs: >/1 } >/21 Tile{ ]] }
    refalrts::alloc_name(vm, context[20], functions[efunc_AppendAssigns]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckEveryMatch_S1B1S1B1]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_open_bracket(context[12]);
    refalrts::reinit_close_bracket(context[19]);
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[11] );
    refalrts::link_brackets( context[12], context[19] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[19], context[1] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_elem( res, context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckEveryMatch$1:1/4 (/7 e.Tuples/5 )/8 (/11 e.Assigns/9 )/12 e.Other/2 >/1
  // closed e.Tuples as range 5
  // closed e.Assigns as range 9
  // closed e.Other as range 2
  //DEBUG: e.Tuples: 5
  //DEBUG: e.Assigns: 9
  //DEBUG: e.Other: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CheckEveryMatch$1:1/4 (/7 e.Tuples/5 )/8 (/11 e.Assigns/9 )/12 e.Other/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckEveryMatch_S1B1("CheckEveryMatch$1:1", COOKIE1_, COOKIE2_, func_gen_CheckEveryMatch_S1B1);


static refalrts::FnResult func_CheckEveryMatch(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & CheckEveryMatch/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckEveryMatch/4 e.new1/2 (/7 e.new2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 2
  // closed e.new2 as range 5
  do {
    // </0 & CheckEveryMatch/4 (/15 (/19 e.Pattern-L/17 )/20 (/23 e.Pattern-R/21 )/24 )/16 e.Tuples/9 (/7 e.Assigns/11 )/8 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[9], context[10] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    context[17] = 0;
    context[18] = 0;
    context[19] = refalrts::brackets_left( context[17], context[18], context[13], context[14] );
    if( ! context[19] )
      continue;
    refalrts::bracket_pointers(context[19], context[20]);
    context[21] = 0;
    context[22] = 0;
    context[23] = refalrts::brackets_left( context[21], context[22], context[13], context[14] );
    if( ! context[23] )
      continue;
    refalrts::bracket_pointers(context[23], context[24]);
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    // closed e.Pattern-L as range 17
    // closed e.Pattern-R as range 21
    // closed e.Tuples as range 9
    // closed e.Assigns as range 11
    //DEBUG: e.Pattern-L: 17
    //DEBUG: e.Pattern-R: 21
    //DEBUG: e.Tuples: 9
    //DEBUG: e.Assigns: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </25 & CheckEveryMatch$1:1/26 Tile{ AsIs: (/7 } Tile{ AsIs: e.Tuples/9 } Tile{ AsIs: )/8 } (/27 Tile{ AsIs: e.Assigns/11 } Tile{ HalfReuse: )/0 HalfReuse: </4 HalfReuse: & ObjectMatch/15 AsIs: (/19 AsIs: e.Pattern-L/17 AsIs: )/20 AsIs: (/23 AsIs: e.Pattern-R/21 AsIs: )/24 HalfReuse: >/16 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[25]);
    refalrts::alloc_name(vm, context[26], functions[efunc_gen_CheckEveryMatch_S1B1]);
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::reinit_close_bracket(context[0]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[15], functions[efunc_ObjectMatch]);
    refalrts::reinit_close_call(context[16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[4] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[27], context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[0], context[16] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckEveryMatch/4 (/7 e.Assigns/5 )/8 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Assigns as range 5
  //DEBUG: e.Assigns: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/4 AsIs: (/7 AsIs: e.Assigns/5 AsIs: )/8 } Tile{ ]] }
  refalrts::reinit_ident(context[4], identifiers[ident_True]);
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[4], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CheckEveryMatch("CheckEveryMatch", COOKIE1_, COOKIE2_, func_CheckEveryMatch);


static refalrts::FnResult func_AppendAssigns(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 45 elems
  refalrts::Iter context[45];
  refalrts::zeros( context, 45 );
  // </0 & AppendAssigns/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & AppendAssigns/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & AppendAssigns/4 (/7 e.new5/9 )/8 (/15 e.new3/13 )/16 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    // closed e.new5 as range 9
    // closed e.new3 as range 13
    // closed e.new4 as range 11
    do {
      // </0 & AppendAssigns/4 (/7 e.Assigns-L/23 (/31 e.Vars-L/33 ':'/39 e.Vars-R/35 )/32 e.Assigns-R/25 )/8 (/15 e.Vars-L/40 ':'/42 e.Vars-R/43 )/16 e.NewAssignsTail/21 >/1
      context[17] = context[9];
      context[18] = context[10];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = context[11];
      context[22] = context[12];
      // closed e.NewAssignsTail as range 21
      context[23] = 0;
      context[24] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[25] = context[17];
        context[26] = context[18];
        context[27] = context[19];
        context[28] = context[20];
        context[29] = 0;
        context[30] = 0;
        context[31] = refalrts::brackets_left( context[29], context[30], context[25], context[26] );
        if( ! context[31] )
          continue;
        refalrts::bracket_pointers(context[31], context[32]);
        // closed e.Assigns-R as range 25
        context[33] = 0;
        context[34] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[35] = context[29];
          context[36] = context[30];
          context[37] = context[27];
          context[38] = context[28];
          context[39] = refalrts::char_left( ':', context[35], context[36] );
          if( ! context[39] )
            continue;
          if( ! refalrts::repeated_evar_left( vm, context[40], context[41], context[33], context[34], context[37], context[38] ) )
            continue;
          context[42] = refalrts::char_left( ':', context[37], context[38] );
          if( ! context[42] )
            continue;
          // closed e.Vars-R as range 35
          if( ! refalrts::repeated_evar_left( vm, context[43], context[44], context[35], context[36], context[37], context[38] ) )
            continue;
          if( ! refalrts::empty_seq( context[37], context[38] ) )
            continue;
          //DEBUG: e.NewAssignsTail: 21
          //DEBUG: e.Assigns-L: 23
          //DEBUG: e.Assigns-R: 25
          //DEBUG: e.Vars-L: 33
          //DEBUG: e.Vars-R: 35

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} (/15 e.Vars-L/40 ':'/42 e.Vars-R/43 )/16 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & AppendAssigns/4 AsIs: (/7 AsIs: e.Assigns-L/23 AsIs: (/31 AsIs: e.Vars-L/33 AsIs: ':'/39 AsIs: e.Vars-R/35 AsIs: )/32 AsIs: e.Assigns-R/25 AsIs: )/8 } Tile{ AsIs: e.NewAssignsTail/21 } Tile{ AsIs: >/1 ]] }
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::link_brackets( context[31], context[32] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[21], context[22] );
          refalrts::splice_to_freelist_open( vm, context[8], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[33], context[34], context[29], context[30] ) );
      } while ( refalrts::open_evar_advance( context[23], context[24], context[17], context[18] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & AppendAssigns/4 (/7 e.Assigns-L/23 (/31 e.Vars-L/33 ':'/39 e.Vars-R/35 )/32 e.Assigns-R/25 )/8 (/15 e.Vars-L-Other/37 ':'/42 e.Vars-R/40 )/16 e.NewAssignsTail/21 >/1
      context[17] = context[9];
      context[18] = context[10];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = context[11];
      context[22] = context[12];
      // closed e.NewAssignsTail as range 21
      context[23] = 0;
      context[24] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[25] = context[17];
        context[26] = context[18];
        context[27] = context[19];
        context[28] = context[20];
        context[29] = 0;
        context[30] = 0;
        context[31] = refalrts::brackets_left( context[29], context[30], context[25], context[26] );
        if( ! context[31] )
          continue;
        refalrts::bracket_pointers(context[31], context[32]);
        // closed e.Assigns-R as range 25
        context[33] = 0;
        context[34] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[35] = context[29];
          context[36] = context[30];
          context[37] = context[27];
          context[38] = context[28];
          context[39] = refalrts::char_left( ':', context[35], context[36] );
          if( ! context[39] )
            continue;
          // closed e.Vars-R as range 35
          if( ! refalrts::repeated_evar_right( vm, context[40], context[41], context[35], context[36], context[37], context[38] ) )
            continue;
          context[42] = refalrts::char_right( ':', context[37], context[38] );
          if( ! context[42] )
            continue;
          // closed e.Vars-L-Other as range 37
          //DEBUG: e.NewAssignsTail: 21
          //DEBUG: e.Assigns-L: 23
          //DEBUG: e.Assigns-R: 25
          //DEBUG: e.Vars-L: 33
          //DEBUG: e.Vars-R: 35
          //DEBUG: e.Vars-L-Other: 37

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & AppendAssigns/4 (/7 e.Assigns-L/23 (/31 e.Vars-L/33 ':'/39 e.Vars-R/35 )/32 e.Assigns-R/25 )/8 (/15 e.Vars-L-Other/37 ':'/42 e.Vars-R/40 )/16 e.NewAssignsTail/21 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: # Fails/1 ]] }
          refalrts::reinit_ident(context[1], identifiers[ident_Fails]);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[33], context[34], context[29], context[30] ) );
      } while ( refalrts::open_evar_advance( context[23], context[24], context[17], context[18] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & AppendAssigns/4 (/7 e.Assigns/17 )/8 (/15 e.Vars-L/23 ':'/27 e.Vars-R/25 )/16 e.NewAssignsTail/21 >/1
    context[17] = context[9];
    context[18] = context[10];
    context[19] = context[13];
    context[20] = context[14];
    context[21] = context[11];
    context[22] = context[12];
    // closed e.Assigns as range 17
    // closed e.NewAssignsTail as range 21
    context[23] = 0;
    context[24] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[25] = context[19];
      context[26] = context[20];
      context[27] = refalrts::char_left( ':', context[25], context[26] );
      if( ! context[27] )
        continue;
      // closed e.Vars-R as range 25
      //DEBUG: e.Assigns: 17
      //DEBUG: e.NewAssignsTail: 21
      //DEBUG: e.Vars-L: 23
      //DEBUG: e.Vars-R: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & AppendAssigns/4 AsIs: (/7 AsIs: e.Assigns/17 HalfReuse: (/8 } Tile{ AsIs: e.Vars-L/23 } Tile{ AsIs: ':'/27 } Tile{ AsIs: e.Vars-R/25 } Tile{ HalfReuse: )/15 } Tile{ AsIs: )/16 AsIs: e.NewAssignsTail/21 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[15]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[16] );
      refalrts::link_brackets( context[8], context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[16];
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[23], context[24], context[19], context[20] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AppendAssigns/4 (/7 e.Assigns/5 )/8 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Assigns as range 5
  //DEBUG: e.Assigns: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} & AppendAssigns/4 (/7 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: # Success/0 } Tile{ AsIs: e.Assigns/5 } Tile{ ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_Success]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[0], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_AppendAssigns("AppendAssigns", COOKIE1_, COOKIE2_, func_AppendAssigns);


static refalrts::FnResult func_gen_CreateTuplePairs_L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & CreateTuplePairs\1/4 (/7 t.L/9 e.Tail-L/5 )/8 t.R/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[10] = refalrts::tvar_left( context[9], context[5], context[6] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail-L as range 5
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.L: 9
  //DEBUG: e.Tail-L: 5
  //DEBUG: t.R: 11
  //5: e.Tail-L
  //9: t.L
  //11: t.R
  //16: t.L

  refalrts::reset_allocator(vm);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_CreateTuplePairs_L1C1]);
  refalrts::copy_stvar(vm, context[16], context[9]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[13] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_stvar( res, context[16] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
  if (rec_res != refalrts::cSuccess)
    return rec_res;
  refalrts::this_is_generated_function(vm);
  do {
    // </13 & CreateTuplePairs\1?1/17 (/20 e.Vars-L/22 ':'/26 e._/24 )/21 >/14
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::call_left( context[15], context[16], context[13], context[14] );
    context[18] = 0;
    context[19] = 0;
    context[20] = refalrts::brackets_left( context[18], context[19], context[15], context[16] );
    if( ! context[20] )
      continue;
    refalrts::bracket_pointers(context[20], context[21]);
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    context[22] = 0;
    context[23] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[24] = context[18];
      context[25] = context[19];
      context[26] = refalrts::char_left( ':', context[24], context[25] );
      if( ! context[26] )
        continue;
      // closed e._ as range 24
      //DEBUG: t.L: 9
      //DEBUG: e.Tail-L: 5
      //DEBUG: t.R: 11
      //DEBUG: e.Vars-L: 22
      //DEBUG: e._: 24
      //5: e.Tail-L
      //9: t.L
      //11: t.R
      //22: e.Vars-L
      //24: e._
      //30: t.R

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[27]);
      refalrts::alloc_name(vm, context[29], functions[efunc_gen_CreateTuplePairs_L1C2]);
      refalrts::copy_stvar(vm, context[30], context[11]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[27] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_stvar( res, context[30] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[27] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </27 & CreateTuplePairs\1?2/31 (/34 e.Vars-R/36 ':'/40 e._0/38 )/35 >/28
        context[29] = 0;
        context[30] = 0;
        context[31] = refalrts::call_left( context[29], context[30], context[27], context[28] );
        context[32] = 0;
        context[33] = 0;
        context[34] = refalrts::brackets_left( context[32], context[33], context[29], context[30] );
        if( ! context[34] )
          continue;
        refalrts::bracket_pointers(context[34], context[35]);
        if( ! refalrts::empty_seq( context[29], context[30] ) )
          continue;
        context[36] = 0;
        context[37] = 0;
        refalrts::start_e_loop(vm);
        do {
          context[38] = context[32];
          context[39] = context[33];
          context[40] = refalrts::char_left( ':', context[38], context[39] );
          if( ! context[40] )
            continue;
          // closed e._0 as range 38
          //DEBUG: t.L: 9
          //DEBUG: e.Tail-L: 5
          //DEBUG: t.R: 11
          //DEBUG: e.Vars-L: 22
          //DEBUG: e._: 24
          //DEBUG: e.Vars-R: 36
          //DEBUG: e._0: 38

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} & CreateTuplePairs\1/4 (/7 t.L/9 {REMOVED TILE} )/8 t.R/11 {REMOVED TILE} e._/24 )/21 >/14 </27 & CreateTuplePairs\1?2/31 {REMOVED TILE} e._0/38 )/35 >/28 {REMOVED TILE}
          //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Tail-L/5 } Tile{ HalfReuse: )/13 HalfReuse: (/17 AsIs: (/20 AsIs: e.Vars-L/22 HalfReuse: )/26 } Tile{ AsIs: (/34 AsIs: e.Vars-R/36 HalfReuse: )/40 } Tile{ HalfReuse: )/1 ]] }
          refalrts::reinit_open_bracket(context[0]);
          refalrts::reinit_close_bracket(context[13]);
          refalrts::reinit_open_bracket(context[17]);
          refalrts::reinit_close_bracket(context[26]);
          refalrts::reinit_close_bracket(context[40]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::link_brackets( context[17], context[1] );
          refalrts::link_brackets( context[34], context[40] );
          refalrts::link_brackets( context[20], context[26] );
          refalrts::link_brackets( context[0], context[13] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[34], context[40] );
          res = refalrts::splice_evar( res, context[13], context[26] );
          res = refalrts::splice_evar( res, context[5], context[6] );
          refalrts::splice_to_freelist_open( vm, context[0], res );
          return refalrts::cSuccess;
        } while ( refalrts::open_evar_advance( context[36], context[37], context[32], context[33] ) );
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[27], context[28]);
      continue;
    } while ( refalrts::open_evar_advance( context[22], context[23], context[18], context[19] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  refalrts::splice_to_freelist(vm, context[13], context[14]);
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_gen_CreateTuplePairs_L1("CreateTuplePairs\\1", COOKIE1_, COOKIE2_, func_gen_CreateTuplePairs_L1);


static refalrts::FnResult func_CreateTuplePairs(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & CreateTuplePairs/4 (/7 e.Tuple-L/5 )/8 (/11 e.Tuple-R/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Tuple-L as range 5
  // closed e.Tuple-R as range 9
  //DEBUG: e.Tuple-L: 5
  //DEBUG: e.Tuple-R: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DelAccumulator/14 Tile{ AsIs: </0 Reuse: & DoMapAccum@9/4 AsIs: (/7 AsIs: e.Tuple-L/5 AsIs: )/8 AsIs: (/11 } )/15 Tile{ AsIs: e.Tuple-R/9 } Tile{ HalfReuse: >/12 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_DelAccumulator]);
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z9]);
  refalrts::reinit_close_call(context[12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[15] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[0], context[11] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CreateTuplePairs("CreateTuplePairs", COOKIE1_, COOKIE2_, func_CreateTuplePairs);


static refalrts::FnResult func_RenameVars(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & RenameVars/4 (/7 e.Prefix/5 )/8 e.Pattern/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Prefix as range 5
  // closed e.Pattern as range 2
  //DEBUG: e.Prefix: 5
  //DEBUG: e.Pattern: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DelAccumulator/10 Tile{ AsIs: </0 Reuse: & DoMapAccum@11/4 AsIs: (/7 AsIs: e.Prefix/5 AsIs: )/8 } 1/11 (/12 )/13 Tile{ AsIs: e.Pattern/2 } >/14 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_DelAccumulator]);
  refalrts::alloc_number(vm, context[11], 1UL);
  refalrts::alloc_open_bracket(vm, context[12]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[13] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_RenameVars("RenameVars", COOKIE1_, COOKIE2_, func_RenameVars);


static refalrts::FnResult func_gen_Normalize_A5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Normalize=5/4 e.NormalizedPattern/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.NormalizedPattern as range 2
  //DEBUG: e.NormalizedPattern: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@8/4 AsIs: e.NormalizedPattern/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Normalize_A5("Normalize=5", COOKIE1_, COOKIE2_, func_gen_Normalize_A5);


static refalrts::FnResult func_gen_Normalize_A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Normalize=4/4 e.MarkedPattern$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.MarkedPattern$a as range 2
  //DEBUG: e.MarkedPattern$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Normalize=5/6 Tile{ AsIs: </0 Reuse: & InsertFakeEVars/4 AsIs: e.MarkedPattern$a/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Normalize_A5]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_InsertFakeEVars]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Normalize_A4("Normalize=4", COOKIE1_, COOKIE2_, func_gen_Normalize_A4);


static refalrts::FnResult func_gen_Normalize_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Normalize=3/4 e.MarkedPattern/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.MarkedPattern as range 2
  //DEBUG: e.MarkedPattern: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Normalize=4/6 Tile{ AsIs: </0 Reuse: & MarkupNeighbourHelper@1/4 AsIs: e.MarkedPattern/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Normalize_A4]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_gen_MarkupNeighbourHelper_Z1]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Normalize_A3("Normalize=3", COOKIE1_, COOKIE2_, func_gen_Normalize_A3);


static refalrts::FnResult func_gen_Normalize_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & Normalize=2/4 (/7 e.Pattern/5 )/8 t.Multiplicity/9 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Pattern as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Pattern: 5
  //DEBUG: t.Multiplicity: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Normalize=3/4 HalfReuse: </7 } Tile{ HalfReuse: & Map@9/8 AsIs: t.Multiplicity/9 } Tile{ AsIs: e.Pattern/5 } >/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_Normalize_A3]);
  refalrts::reinit_open_call(context[7]);
  refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[8], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Normalize_A2("Normalize=2", COOKIE1_, COOKIE2_, func_gen_Normalize_A2);


static refalrts::FnResult func_gen_Normalize_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & Normalize=1/4 (/7 e.Pattern/5 )/8 e.FlatPattern/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Pattern as range 5
  // closed e.FlatPattern as range 2
  //DEBUG: e.Pattern: 5
  //DEBUG: e.FlatPattern: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Normalize=2/4 AsIs: (/7 AsIs: e.Pattern/5 AsIs: )/8 } </9 & CountTVarsMultiplicity:1/10 </11 & DoMapAccum@12/12 (/13 )/14 (/15 )/16 Tile{ AsIs: e.FlatPattern/2 } >/17 >/18 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_CountTVarsMultiplicity_B1]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z12]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::alloc_close_call(vm, context[18]);
  refalrts::update_name(context[4], functions[efunc_gen_Normalize_A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[18] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Normalize_A1("Normalize=1", COOKIE1_, COOKIE2_, func_gen_Normalize_A1);


static refalrts::FnResult func_Normalize(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & Normalize/4 e.Pattern/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Pattern as range 2
  //DEBUG: e.Pattern: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Normalize=1/6 (/7 e.Pattern/2/8 )/10 Tile{ AsIs: </0 Reuse: & Map@6/4 AsIs: e.Pattern/2 AsIs: >/1 } >/11 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Normalize_A1]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::copy_evar(vm, context[8], context[9], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z6]);
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Normalize("Normalize", COOKIE1_, COOKIE2_, func_Normalize);


static refalrts::FnResult func_DeleteMarkup(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & DeleteMarkup/4 e.MarkedPattern/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.MarkedPattern as range 2
  //DEBUG: e.MarkedPattern: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@8/4 AsIs: e.MarkedPattern/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DeleteMarkup("DeleteMarkup", COOKIE1_, COOKIE2_, func_DeleteMarkup);


static refalrts::FnResult func_InsertFakeEVars(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & InsertFakeEVars/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & InsertFakeEVars/4 e.Prefix/7 (/13 # Var/15 'e'/16 e.Index1/11 )/14 (/19 # Var/21 't'/22 e.Index2/17 )/20 (/25 # Var/27 'e'/28 e.Index3/23 )/26 e.Suffix/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Var], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[16] = refalrts::char_left( 'e', context[11], context[12] );
      if( ! context[16] )
        continue;
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[9], context[10] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left( identifiers[ident_Var], context[17], context[18] );
      if( ! context[21] )
        continue;
      context[22] = refalrts::char_left( 't', context[17], context[18] );
      if( ! context[22] )
        continue;
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[9], context[10] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_Var], context[23], context[24] );
      if( ! context[27] )
        continue;
      context[28] = refalrts::char_left( 'e', context[23], context[24] );
      if( ! context[28] )
        continue;
      // closed e.Index1 as range 11
      // closed e.Index2 as range 17
      // closed e.Index3 as range 23
      // closed e.Suffix as range 9
      //DEBUG: e.Prefix: 7
      //DEBUG: e.Index1: 11
      //DEBUG: e.Index2: 17
      //DEBUG: e.Index3: 23
      //DEBUG: e.Suffix: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & InsertFakeEVars/4 AsIs: e.Prefix/7 AsIs: (/13 AsIs: # Var/15 AsIs: 'e'/16 AsIs: e.Index1/11 AsIs: )/14 AsIs: (/19 Reuse: # Float/21 HalfReuse: (/22 } # Var/29 't'/30 Tile{ AsIs: e.Index2/17 } )/31 Tile{ AsIs: )/20 AsIs: (/25 AsIs: # Var/27 AsIs: 'e'/28 AsIs: e.Index3/23 AsIs: )/26 AsIs: e.Suffix/9 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[29], identifiers[ident_Var]);
      refalrts::alloc_char(vm, context[30], 't');
      refalrts::alloc_close_bracket(vm, context[31]);
      refalrts::update_ident(context[21], identifiers[ident_Float]);
      refalrts::reinit_open_bracket(context[22]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[22], context[31] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[20];
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & InsertFakeEVars/4 e.Prefix/7 (/13 # Var/15 'e'/16 e.Index1/11 )/14 (/19 # Var/21 't'/22 e.Index2/17 )/20 e.Suffix/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Var], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[16] = refalrts::char_left( 'e', context[11], context[12] );
      if( ! context[16] )
        continue;
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[9], context[10] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left( identifiers[ident_Var], context[17], context[18] );
      if( ! context[21] )
        continue;
      context[22] = refalrts::char_left( 't', context[17], context[18] );
      if( ! context[22] )
        continue;
      // closed e.Index1 as range 11
      // closed e.Index2 as range 17
      // closed e.Suffix as range 9
      //DEBUG: e.Prefix: 7
      //DEBUG: e.Index1: 11
      //DEBUG: e.Index2: 17
      //DEBUG: e.Suffix: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & InsertFakeEVars/4 AsIs: e.Prefix/7 AsIs: (/13 AsIs: # Var/15 AsIs: 'e'/16 AsIs: e.Index1/11 AsIs: )/14 AsIs: (/19 Reuse: # Float/21 HalfReuse: (/22 } # Var/23 't'/24 e.Index2/17/25 )/27 )/28 (/29 # Var/30 'e'/31 Tile{ AsIs: e.Index2/17 }"fake"/32 Tile{ AsIs: )/20 AsIs: e.Suffix/9 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[23], identifiers[ident_Var]);
      refalrts::alloc_char(vm, context[24], 't');
      refalrts::copy_evar(vm, context[25], context[26], context[17], context[18]);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::alloc_close_bracket(vm, context[28]);
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_ident(vm, context[30], identifiers[ident_Var]);
      refalrts::alloc_char(vm, context[31], 'e');
      refalrts::alloc_chars(vm, context[32], context[33], "fake", 4);
      refalrts::update_ident(context[21], identifiers[ident_Float]);
      refalrts::reinit_open_bracket(context[22]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[29], context[20] );
      refalrts::link_brackets( context[19], context[28] );
      refalrts::link_brackets( context[22], context[27] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[20];
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[23], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & InsertFakeEVars/4 e.Prefix/7 (/13 # Var/15 't'/16 e.Index2/11 )/14 (/19 # Var/21 'e'/22 e.Index3/17 )/20 e.Suffix/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Var], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[16] = refalrts::char_left( 't', context[11], context[12] );
      if( ! context[16] )
        continue;
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[9], context[10] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left( identifiers[ident_Var], context[17], context[18] );
      if( ! context[21] )
        continue;
      context[22] = refalrts::char_left( 'e', context[17], context[18] );
      if( ! context[22] )
        continue;
      // closed e.Index2 as range 11
      // closed e.Index3 as range 17
      // closed e.Suffix as range 9
      //DEBUG: e.Prefix: 7
      //DEBUG: e.Index2: 11
      //DEBUG: e.Index3: 17
      //DEBUG: e.Suffix: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & InsertFakeEVars/4 AsIs: e.Prefix/7 AsIs: (/13 AsIs: # Var/15 Reuse: 'e'/16 AsIs: e.Index2/11 HalfReuse: 'f'/14 HalfReuse: 'a'/19 HalfReuse: 'k'/21 AsIs: 'e'/22 } )/23 (/24 # Float/25 (/26 # Var/27 't'/28 e.Index2/11/29 )/31 )/32 (/33 # Var/34 'e'/35 Tile{ AsIs: e.Index3/17 } Tile{ AsIs: )/20 AsIs: e.Suffix/9 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[23]);
      refalrts::alloc_open_bracket(vm, context[24]);
      refalrts::alloc_ident(vm, context[25], identifiers[ident_Float]);
      refalrts::alloc_open_bracket(vm, context[26]);
      refalrts::alloc_ident(vm, context[27], identifiers[ident_Var]);
      refalrts::alloc_char(vm, context[28], 't');
      refalrts::copy_evar(vm, context[29], context[30], context[11], context[12]);
      refalrts::alloc_close_bracket(vm, context[31]);
      refalrts::alloc_close_bracket(vm, context[32]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_ident(vm, context[34], identifiers[ident_Var]);
      refalrts::alloc_char(vm, context[35], 'e');
      refalrts::update_char(context[16], 'e');
      refalrts::reinit_char(context[14], 'f');
      refalrts::reinit_char(context[19], 'a');
      refalrts::reinit_char(context[21], 'k');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[33], context[20] );
      refalrts::link_brackets( context[24], context[32] );
      refalrts::link_brackets( context[26], context[31] );
      refalrts::link_brackets( context[13], context[23] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[20];
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[23], context[35] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & InsertFakeEVars/4 e.Prefix/7 (/13 # Var/15 't'/16 e.Index2/11 )/14 e.Suffix/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Var], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[16] = refalrts::char_left( 't', context[11], context[12] );
      if( ! context[16] )
        continue;
      // closed e.Index2 as range 11
      // closed e.Suffix as range 9
      //DEBUG: e.Prefix: 7
      //DEBUG: e.Index2: 11
      //DEBUG: e.Suffix: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & InsertFakeEVars/4 AsIs: e.Prefix/7 AsIs: (/13 AsIs: # Var/15 Reuse: 'e'/16 AsIs: e.Index2/11 HalfReuse: 'f'/14 }"ake1"/17 )/19 (/20 # Float/21 (/22 # Var/23 't'/24 e.Index2/11/25 )/27 )/28 (/29 # Var/30 'e'/31 e.Index2/11/32"fake2"/34 )/36 Tile{ AsIs: e.Suffix/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_chars(vm, context[17], context[18], "ake1", 4);
      refalrts::alloc_close_bracket(vm, context[19]);
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_ident(vm, context[21], identifiers[ident_Float]);
      refalrts::alloc_open_bracket(vm, context[22]);
      refalrts::alloc_ident(vm, context[23], identifiers[ident_Var]);
      refalrts::alloc_char(vm, context[24], 't');
      refalrts::copy_evar(vm, context[25], context[26], context[11], context[12]);
      refalrts::alloc_close_bracket(vm, context[27]);
      refalrts::alloc_close_bracket(vm, context[28]);
      refalrts::alloc_open_bracket(vm, context[29]);
      refalrts::alloc_ident(vm, context[30], identifiers[ident_Var]);
      refalrts::alloc_char(vm, context[31], 'e');
      refalrts::copy_evar(vm, context[32], context[33], context[11], context[12]);
      refalrts::alloc_chars(vm, context[34], context[35], "fake2", 5);
      refalrts::alloc_close_bracket(vm, context[36]);
      refalrts::update_char(context[16], 'e');
      refalrts::reinit_char(context[14], 'f');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[29], context[36] );
      refalrts::link_brackets( context[20], context[28] );
      refalrts::link_brackets( context[22], context[27] );
      refalrts::link_brackets( context[13], context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[17], context[36] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & InsertFakeEVars/4 e.Prefix/7 (/13 # Brackets/15 e.Brackets/11 )/14 e.Suffix/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Brackets], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e.Brackets as range 11
      // closed e.Suffix as range 9
      //DEBUG: e.Prefix: 7
      //DEBUG: e.Brackets: 11
      //DEBUG: e.Suffix: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & InsertFakeEVars/4 AsIs: e.Prefix/7 AsIs: (/13 Reuse: # MarkedBrackets/15 } </16 & InsertFakeEVars/17 Tile{ AsIs: e.Brackets/11 } >/18 Tile{ AsIs: )/14 AsIs: e.Suffix/9 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_InsertFakeEVars]);
      refalrts::alloc_close_call(vm, context[18]);
      refalrts::update_ident(context[15], identifiers[ident_MarkedBrackets]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & InsertFakeEVars/4 e.Other/2 >/1
  // closed e.Other as range 2
  //DEBUG: e.Other: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & InsertFakeEVars/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Other/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_InsertFakeEVars("InsertFakeEVars", COOKIE1_, COOKIE2_, func_InsertFakeEVars);


static refalrts::FnResult func_MarkupNeighbourAnchorTVars(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & MarkupNeighbourAnchorTVars/4 e.MarkedPattern/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.MarkedPattern as range 2
  //DEBUG: e.MarkedPattern: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MarkupNeighbourHelper@1/4 AsIs: e.MarkedPattern/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_MarkupNeighbourHelper_Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MarkupNeighbourAnchorTVars("MarkupNeighbourAnchorTVars", COOKIE1_, COOKIE2_, func_MarkupNeighbourAnchorTVars);


static refalrts::FnResult func_MarkupNeighbourHelper(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  // </0 & MarkupNeighbourHelper/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & MarkupNeighbourHelper/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  do {
    // </0 & MarkupNeighbourHelper/4 (/7 e.new3/13 )/8 (/11 t.new4/17 e.new5/15 )/12 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    // closed e.new3 as range 13
    context[18] = refalrts::tvar_left( context[17], context[15], context[16] );
    if( ! context[18] )
      continue;
    // closed e.new5 as range 15
    do {
      // </0 & MarkupNeighbourHelper/4 (/7 e.new6/19 )/8 (/11 (/17 s.new7/25 e.new8/23 )/18 e.new9/21 )/12 >/1
      context[19] = context[13];
      context[20] = context[14];
      context[21] = context[15];
      context[22] = context[16];
      context[23] = 0;
      context[24] = 0;
      if( ! refalrts::brackets_term( context[23], context[24], context[17] ) )
        continue;
      // closed e.new6 as range 19
      // closed e.new9 as range 21
      if( ! refalrts::svar_left( context[25], context[23], context[24] ) )
        continue;
      // closed e.new8 as range 23
      do {
        // </0 & MarkupNeighbourHelper/4 (/7 e.Prefix/26 )/8 (/11 (/17 # Var/25 't'/32 e.Index/28 )/18 e.Suffix/30 )/12 >/1
        context[26] = context[19];
        context[27] = context[20];
        context[28] = context[23];
        context[29] = context[24];
        context[30] = context[21];
        context[31] = context[22];
        if( ! refalrts::ident_term( identifiers[ident_Var], context[25] ) )
          continue;
        context[32] = refalrts::char_left( 't', context[28], context[29] );
        if( ! context[32] )
          continue;
        // closed e.Prefix as range 26
        // closed e.Index as range 28
        // closed e.Suffix as range 30
        //DEBUG: e.Prefix: 26
        //DEBUG: e.Index: 28
        //DEBUG: e.Suffix: 30
        //26: e.Prefix
        //28: e.Index
        //30: e.Suffix
        //38: e.Prefix

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[33]);
        refalrts::alloc_name(vm, context[35], functions[efunc_gen_MarkupNeighbourHelper_S1C1]);
        refalrts::alloc_open_call(vm, context[36]);
        refalrts::alloc_name(vm, context[37], functions[efunc_HasAnchorsPrefix]);
        refalrts::copy_evar(vm, context[38], context[39], context[26], context[27]);
        refalrts::alloc_close_call(vm, context[40]);
        refalrts::alloc_close_call(vm, context[34]);
        refalrts::push_stack( vm, context[34] );
        refalrts::push_stack( vm, context[33] );
        res = refalrts::splice_elem( res, context[34] );
        refalrts::push_stack( vm, context[40] );
        refalrts::push_stack( vm, context[36] );
        res = refalrts::splice_elem( res, context[40] );
        res = refalrts::splice_evar( res, context[38], context[39] );
        res = refalrts::splice_elem( res, context[37] );
        res = refalrts::splice_elem( res, context[36] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_elem( res, context[33] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </33 & MarkupNeighbourHelper$1?1/37 # True/38 >/34
          context[35] = 0;
          context[36] = 0;
          context[37] = refalrts::call_left( context[35], context[36], context[33], context[34] );
          context[38] = refalrts::ident_left( identifiers[ident_True], context[35], context[36] );
          if( ! context[38] )
            continue;
          if( ! refalrts::empty_seq( context[35], context[36] ) )
            continue;
          //DEBUG: e.Prefix: 26
          //DEBUG: e.Index: 28
          //DEBUG: e.Suffix: 30
          //26: e.Prefix
          //28: e.Index
          //30: e.Suffix
          //44: e.Suffix

          refalrts::reset_allocator(vm);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::alloc_open_call(vm, context[39]);
          refalrts::alloc_name(vm, context[41], functions[efunc_gen_MarkupNeighbourHelper_S1C2]);
          refalrts::alloc_open_call(vm, context[42]);
          refalrts::alloc_name(vm, context[43], functions[efunc_HasAnchorsSuffix]);
          refalrts::copy_evar(vm, context[44], context[45], context[30], context[31]);
          refalrts::alloc_close_call(vm, context[46]);
          refalrts::alloc_close_call(vm, context[40]);
          refalrts::push_stack( vm, context[40] );
          refalrts::push_stack( vm, context[39] );
          res = refalrts::splice_elem( res, context[40] );
          refalrts::push_stack( vm, context[46] );
          refalrts::push_stack( vm, context[42] );
          res = refalrts::splice_elem( res, context[46] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_elem( res, context[43] );
          res = refalrts::splice_elem( res, context[42] );
          res = refalrts::splice_elem( res, context[41] );
          res = refalrts::splice_elem( res, context[39] );
          refalrts::use( res );
          refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
          if (rec_res != refalrts::cSuccess)
            return rec_res;
          refalrts::this_is_generated_function(vm);
          do {
            // </39 & MarkupNeighbourHelper$1?2/43 # True/44 >/40
            context[41] = 0;
            context[42] = 0;
            context[43] = refalrts::call_left( context[41], context[42], context[39], context[40] );
            context[44] = refalrts::ident_left( identifiers[ident_True], context[41], context[42] );
            if( ! context[44] )
              continue;
            if( ! refalrts::empty_seq( context[41], context[42] ) )
              continue;
            //DEBUG: e.Prefix: 26
            //DEBUG: e.Index: 28
            //DEBUG: e.Suffix: 30

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} # True/38 >/34 </39 & MarkupNeighbourHelper$1?2/43 # True/44 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 AsIs: & MarkupNeighbourHelper/4 AsIs: (/7 AsIs: e.Prefix/26 HalfReuse: (/8 HalfReuse: # Anchor/11 AsIs: (/17 AsIs: # Var/25 AsIs: 't'/32 AsIs: e.Index/28 AsIs: )/18 } Tile{ AsIs: )/12 HalfReuse: )/33 HalfReuse: (/37 } Tile{ AsIs: e.Suffix/30 } Tile{ HalfReuse: )/40 AsIs: >/1 ]] }
            refalrts::reinit_open_bracket(context[8]);
            refalrts::reinit_ident(context[11], identifiers[ident_Anchor]);
            refalrts::reinit_close_bracket(context[33]);
            refalrts::reinit_open_bracket(context[37]);
            refalrts::reinit_close_bracket(context[40]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::link_brackets( context[37], context[40] );
            refalrts::link_brackets( context[7], context[33] );
            refalrts::link_brackets( context[8], context[12] );
            refalrts::link_brackets( context[17], context[18] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[40];
            res = refalrts::splice_evar( res, context[30], context[31] );
            res = refalrts::splice_evar( res, context[12], context[37] );
            refalrts::splice_to_freelist_open( vm, context[18], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          refalrts::splice_to_freelist(vm, context[39], context[40]);
          continue;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[33], context[34]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & MarkupNeighbourHelper/4 (/7 e.Prefix/26 )/8 (/11 (/17 # Brackets/25 e.Brackets/28 )/18 e.Suffix/30 )/12 >/1
      context[26] = context[19];
      context[27] = context[20];
      context[28] = context[23];
      context[29] = context[24];
      context[30] = context[21];
      context[31] = context[22];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[25] ) )
        continue;
      // closed e.Prefix as range 26
      // closed e.Brackets as range 28
      // closed e.Suffix as range 30
      //DEBUG: e.Prefix: 26
      //DEBUG: e.Brackets: 28
      //DEBUG: e.Suffix: 30

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & MarkupNeighbourHelper/4 AsIs: (/7 AsIs: e.Prefix/26 HalfReuse: (/8 HalfReuse: # Brackets/11 HalfReuse: </17 HalfReuse: & MarkupNeighbourHelper@1/25 AsIs: e.Brackets/28 HalfReuse: >/18 } )/32 )/33 (/34 Tile{ AsIs: e.Suffix/30 } Tile{ AsIs: )/12 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[32]);
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::alloc_open_bracket(vm, context[34]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_ident(context[11], identifiers[ident_Brackets]);
      refalrts::reinit_open_call(context[17]);
      refalrts::reinit_name(context[25], functions[efunc_gen_MarkupNeighbourHelper_Z1]);
      refalrts::reinit_close_call(context[18]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[34], context[12] );
      refalrts::link_brackets( context[7], context[33] );
      refalrts::link_brackets( context[8], context[32] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[12];
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[32], context[34] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & MarkupNeighbourHelper/4 (/7 e.Prefix/19 )/8 (/11 t.Item/17 e.Suffix/21 )/12 >/1
    context[19] = context[13];
    context[20] = context[14];
    context[21] = context[15];
    context[22] = context[16];
    // closed e.Prefix as range 19
    // closed e.Suffix as range 21
    //DEBUG: t.Item: 17
    //DEBUG: e.Prefix: 19
    //DEBUG: e.Suffix: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & MarkupNeighbourHelper/4 AsIs: (/7 } Tile{ AsIs: e.Prefix/19 } Tile{ AsIs: t.Item/17 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Suffix/21 } Tile{ AsIs: )/12 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MarkupNeighbourHelper/4 (/7 e.Prefix/5 )/8 (/11 )/12 >/1
  if( ! refalrts::empty_seq( context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Prefix as range 5
  //DEBUG: e.Prefix: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & MarkupNeighbourHelper/4 (/7 {REMOVED TILE} )/8 (/11 )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Prefix/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MarkupNeighbourHelper("MarkupNeighbourHelper", COOKIE1_, COOKIE2_, func_MarkupNeighbourHelper);


static refalrts::FnResult func_HasAnchorsPrefix(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & HasAnchorsPrefix/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & HasAnchorsPrefix/4 e.new1/5 t.new2/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_right( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new1 as range 5
    do {
      // </0 & HasAnchorsPrefix/4 e.new5/9 (/7 s.new3/13 e.new4/11 )/8 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new4 as range 11
      do {
        // </0 & HasAnchorsPrefix/4 e.new9/14 (/7 s.new6/13 t.new7/18 e.new8/16 )/8 >/1
        context[14] = context[9];
        context[15] = context[10];
        context[16] = context[11];
        context[17] = context[12];
        // closed e.new9 as range 14
        context[19] = refalrts::tvar_left( context[18], context[16], context[17] );
        if( ! context[19] )
          continue;
        // closed e.new8 as range 16
        do {
          // </0 & HasAnchorsPrefix/4 e.Prefix/20 (/7 # Anchor/13 (/18 # Var/24 't'/25 e.Index/22 )/19 )/8 >/1
          context[20] = context[14];
          context[21] = context[15];
          context[22] = 0;
          context[23] = 0;
          if( ! refalrts::brackets_term( context[22], context[23], context[18] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_Anchor], context[13] ) )
            continue;
          context[24] = refalrts::ident_left( identifiers[ident_Var], context[22], context[23] );
          if( ! context[24] )
            continue;
          context[25] = refalrts::char_left( 't', context[22], context[23] );
          if( ! context[25] )
            continue;
          if( ! refalrts::empty_seq( context[16], context[17] ) )
            continue;
          // closed e.Prefix as range 20
          // closed e.Index as range 22
          //DEBUG: e.Prefix: 20
          //DEBUG: e.Index: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & HasAnchorsPrefix/4 e.Prefix/20 (/7 # Anchor/13 (/18 # Var/24 't'/25 e.Index/22 )/19 )/8 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
          refalrts::reinit_ident(context[1], identifiers[ident_True]);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & HasAnchorsPrefix/4 e.new13/20 (/7 s.new10/13 s.new11/18 e.new12/22 )/8 >/1
        context[20] = context[14];
        context[21] = context[15];
        context[22] = context[16];
        context[23] = context[17];
        if( ! refalrts::svar_term( context[18], context[18] ) )
          continue;
        // closed e.new13 as range 20
        // closed e.new12 as range 22
        do {
          // </0 & HasAnchorsPrefix/4 e.Prefix/24 (/7 # Symbol/13 s.Mode/18 e.Index/26 )/8 >/1
          context[24] = context[20];
          context[25] = context[21];
          context[26] = context[22];
          context[27] = context[23];
          if( ! refalrts::ident_term( identifiers[ident_Symbol], context[13] ) )
            continue;
          // closed e.Prefix as range 24
          // closed e.Index as range 26
          //DEBUG: s.Mode: 18
          //DEBUG: e.Prefix: 24
          //DEBUG: e.Index: 26

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & HasAnchorsPrefix/4 e.Prefix/24 (/7 # Symbol/13 s.Mode/18 e.Index/26 )/8 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
          refalrts::reinit_ident(context[1], identifiers[ident_True]);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & HasAnchorsPrefix/4 e.Prefix/24 (/7 # Var/13 'e'/18 e.Index/26 )/8 >/1
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        if( ! refalrts::char_term( 'e', context[18] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_Var], context[13] ) )
          continue;
        // closed e.Prefix as range 24
        // closed e.Index as range 26
        //DEBUG: e.Prefix: 24
        //DEBUG: e.Index: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & HasAnchorsPrefix/4 e.Prefix/24 (/7 # Var/13 'e'/18 e.Index/26 )/8 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
        refalrts::reinit_ident(context[1], identifiers[ident_False]);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & HasAnchorsPrefix/4 e.Prefix/14 (/7 # Brackets/13 e._/16 )/8 >/1
      context[14] = context[9];
      context[15] = context[10];
      context[16] = context[11];
      context[17] = context[12];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[13] ) )
        continue;
      // closed e.Prefix as range 14
      // closed e._ as range 16
      //DEBUG: e.Prefix: 14
      //DEBUG: e._: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & HasAnchorsPrefix/4 e.Prefix/14 (/7 # Brackets/13 e._/16 )/8 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_True]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & HasAnchorsPrefix/4 e.Prefix/9 t.Other/7 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Prefix as range 9
    //DEBUG: t.Other: 7
    //DEBUG: e.Prefix: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} t.Other/7 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & HasAnchorsPrefix/4 } Tile{ AsIs: e.Prefix/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & HasAnchorsPrefix/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & HasAnchorsPrefix/4 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_True]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_HasAnchorsPrefix("HasAnchorsPrefix", COOKIE1_, COOKIE2_, func_HasAnchorsPrefix);


static refalrts::FnResult func_HasAnchorsSuffix(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & HasAnchorsSuffix/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & HasAnchorsSuffix/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & HasAnchorsSuffix/4 (/7 s.new3/13 e.new4/11 )/8 e.new5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new4 as range 11
      do {
        // </0 & HasAnchorsSuffix/4 (/7 s.new6/13 t.new7/18 e.new8/14 )/8 e.new9/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        // closed e.new9 as range 16
        context[19] = refalrts::tvar_left( context[18], context[14], context[15] );
        if( ! context[19] )
          continue;
        // closed e.new8 as range 14
        do {
          // </0 & HasAnchorsSuffix/4 (/7 # Anchor/13 (/18 # Var/24 't'/25 e.Index/22 )/19 )/8 e.Suffix/20 >/1
          context[20] = context[16];
          context[21] = context[17];
          context[22] = 0;
          context[23] = 0;
          if( ! refalrts::brackets_term( context[22], context[23], context[18] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_Anchor], context[13] ) )
            continue;
          context[24] = refalrts::ident_left( identifiers[ident_Var], context[22], context[23] );
          if( ! context[24] )
            continue;
          context[25] = refalrts::char_left( 't', context[22], context[23] );
          if( ! context[25] )
            continue;
          if( ! refalrts::empty_seq( context[14], context[15] ) )
            continue;
          // closed e.Index as range 22
          // closed e.Suffix as range 20
          //DEBUG: e.Index: 22
          //DEBUG: e.Suffix: 20

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & HasAnchorsSuffix/4 (/7 # Anchor/13 (/18 # Var/24 't'/25 e.Index/22 )/19 )/8 e.Suffix/20 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
          refalrts::reinit_ident(context[1], identifiers[ident_True]);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & HasAnchorsSuffix/4 (/7 s.new10/13 s.new11/18 e.new12/20 )/8 e.new13/22 >/1
        context[20] = context[14];
        context[21] = context[15];
        context[22] = context[16];
        context[23] = context[17];
        if( ! refalrts::svar_term( context[18], context[18] ) )
          continue;
        // closed e.new12 as range 20
        // closed e.new13 as range 22
        do {
          // </0 & HasAnchorsSuffix/4 (/7 # Symbol/13 s.Mode/18 e.Index/24 )/8 e.Suffix/26 >/1
          context[24] = context[20];
          context[25] = context[21];
          context[26] = context[22];
          context[27] = context[23];
          if( ! refalrts::ident_term( identifiers[ident_Symbol], context[13] ) )
            continue;
          // closed e.Index as range 24
          // closed e.Suffix as range 26
          //DEBUG: s.Mode: 18
          //DEBUG: e.Index: 24
          //DEBUG: e.Suffix: 26

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & HasAnchorsSuffix/4 (/7 # Symbol/13 s.Mode/18 e.Index/24 )/8 e.Suffix/26 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
          refalrts::reinit_ident(context[1], identifiers[ident_True]);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & HasAnchorsSuffix/4 (/7 # Var/13 'e'/18 e.Index/24 )/8 e.Suffix/26 >/1
        context[24] = context[20];
        context[25] = context[21];
        context[26] = context[22];
        context[27] = context[23];
        if( ! refalrts::char_term( 'e', context[18] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_Var], context[13] ) )
          continue;
        // closed e.Index as range 24
        // closed e.Suffix as range 26
        //DEBUG: e.Index: 24
        //DEBUG: e.Suffix: 26

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & HasAnchorsSuffix/4 (/7 # Var/13 'e'/18 e.Index/24 )/8 e.Suffix/26 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
        refalrts::reinit_ident(context[1], identifiers[ident_False]);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & HasAnchorsSuffix/4 (/7 # Brackets/13 e._/14 )/8 e.Suffix/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[13] ) )
        continue;
      // closed e._ as range 14
      // closed e.Suffix as range 16
      //DEBUG: e._: 14
      //DEBUG: e.Suffix: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & HasAnchorsSuffix/4 (/7 # Brackets/13 e._/14 )/8 e.Suffix/16 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_True]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & HasAnchorsSuffix/4 t.Other/7 e.Suffix/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Suffix as range 9
    //DEBUG: t.Other: 7
    //DEBUG: e.Suffix: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} t.Other/7 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & HasAnchorsSuffix/4 } Tile{ AsIs: e.Suffix/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & HasAnchorsSuffix/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & HasAnchorsSuffix/4 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_True]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_HasAnchorsSuffix("HasAnchorsSuffix", COOKIE1_, COOKIE2_, func_HasAnchorsSuffix);


static refalrts::FnResult func_gen_MarkupMultipleAnchorTVars_L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & MarkupMultipleAnchorTVars\1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & MarkupMultipleAnchorTVars\1/4 t.new1/5 t.new2/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & MarkupMultipleAnchorTVars\1/4 t.new3/5 (/7 s.new4/11 e.new5/9 )/8 >/1
    context[9] = 0;
    context[10] = 0;
    if( ! refalrts::brackets_term( context[9], context[10], context[7] ) )
      continue;
    if( ! refalrts::svar_left( context[11], context[9], context[10] ) )
      continue;
    // closed e.new5 as range 9
    do {
      // </0 & MarkupMultipleAnchorTVars\1/4 t.Multiplicity/5 (/7 # Var/11 't'/14 e.Index/12 )/8 >/1
      context[12] = context[9];
      context[13] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_Var], context[11] ) )
        continue;
      context[14] = refalrts::char_left( 't', context[12], context[13] );
      if( ! context[14] )
        continue;
      // closed e.Index as range 12
      //DEBUG: t.Multiplicity: 5
      //DEBUG: e.Index: 12
      //5: t.Multiplicity
      //12: e.Index
      //23: e.Index
      //26: t.Multiplicity

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[17], functions[efunc_gen_MarkupMultipleAnchorTVars_L1S1C1]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_HasMultiplicity]);
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_ident(vm, context[21], identifiers[ident_Var]);
      refalrts::alloc_char(vm, context[22], 't');
      refalrts::copy_evar(vm, context[23], context[24], context[12], context[13]);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::copy_stvar(vm, context[26], context[5]);
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[15] );
      res = refalrts::splice_elem( res, context[16] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[18] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_stvar( res, context[26] );
      refalrts::link_brackets( context[20], context[25] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_elem( res, context[15] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </15 & MarkupMultipleAnchorTVars\1$1?1/19 # True/20 >/16
        context[17] = 0;
        context[18] = 0;
        context[19] = refalrts::call_left( context[17], context[18], context[15], context[16] );
        context[20] = refalrts::ident_left( identifiers[ident_True], context[17], context[18] );
        if( ! context[20] )
          continue;
        if( ! refalrts::empty_seq( context[17], context[18] ) )
          continue;
        //DEBUG: t.Multiplicity: 5
        //DEBUG: e.Index: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} t.Multiplicity/5 {REMOVED TILE} & MarkupMultipleAnchorTVars\1$1?1/19 # True/20 >/16 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Anchor/4 } Tile{ AsIs: (/7 AsIs: # Var/11 AsIs: 't'/14 AsIs: e.Index/12 AsIs: )/8 HalfReuse: )/15 } Tile{ ]] }
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Anchor]);
        refalrts::reinit_close_bracket(context[15]);
        refalrts::link_brackets( context[0], context[15] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[7], context[15] );
        refalrts::splice_to_freelist_open( vm, context[4], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[15], context[16]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & MarkupMultipleAnchorTVars\1/4 t.Multiplicity/5 (/7 # Brackets/11 e.Brackets/12 )/8 >/1
    context[12] = context[9];
    context[13] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_Brackets], context[11] ) )
      continue;
    // closed e.Brackets as range 12
    //DEBUG: t.Multiplicity: 5
    //DEBUG: e.Brackets: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Brackets/11 } Tile{ AsIs: </0 Reuse: & Map@9/4 AsIs: t.Multiplicity/5 } Tile{ AsIs: e.Brackets/12 } Tile{ HalfReuse: >/8 HalfReuse: )/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z9]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[1] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[0], context[6] );
    res = refalrts::splice_evar( res, context[7], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MarkupMultipleAnchorTVars\1/4 t.Multiplicity/5 t.Other/7 >/1
  //DEBUG: t.Multiplicity: 5
  //DEBUG: t.Other: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & MarkupMultipleAnchorTVars\1/4 t.Multiplicity/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Other/7 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MarkupMultipleAnchorTVars_L1("MarkupMultipleAnchorTVars\\1", COOKIE1_, COOKIE2_, func_gen_MarkupMultipleAnchorTVars_L1);


static refalrts::FnResult func_MarkupMultipleAnchorTVars(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & MarkupMultipleAnchorTVars/4 (/7 e.Pattern/5 )/8 t.Multiplicity/9 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Pattern as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Pattern: 5
  //DEBUG: t.Multiplicity: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@9/4 } Tile{ AsIs: t.Multiplicity/9 } Tile{ AsIs: e.Pattern/5 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MarkupMultipleAnchorTVars("MarkupMultipleAnchorTVars", COOKIE1_, COOKIE2_, func_MarkupMultipleAnchorTVars);


static refalrts::FnResult func_gen_CountTVarsMultiplicity_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & CountTVarsMultiplicity:1/4 t.Accum/5 e._/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e._ as range 2
  //DEBUG: t.Accum: 5
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CountTVarsMultiplicity:1/4 {REMOVED TILE} e._/2 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Accum/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CountTVarsMultiplicity_B1("CountTVarsMultiplicity:1", COOKIE1_, COOKIE2_, func_gen_CountTVarsMultiplicity_B1);


static refalrts::FnResult func_CountTVarsMultiplicity(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & CountTVarsMultiplicity/4 e.FlatPattern/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.FlatPattern as range 2
  //DEBUG: e.FlatPattern: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CountTVarsMultiplicity:1/4 } </5 & DoMapAccum@12/6 (/7 )/8 (/9 )/10 Tile{ AsIs: e.FlatPattern/2 } >/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoMapAccum_Z12]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_CountTVarsMultiplicity_B1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CountTVarsMultiplicity("CountTVarsMultiplicity", COOKIE1_, COOKIE2_, func_CountTVarsMultiplicity);


static refalrts::FnResult func_gen_HasMultiplicity_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & HasMultiplicity:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & HasMultiplicity:1/4 s.new1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & HasMultiplicity:1/4 1/5 >/1
    if( ! refalrts::number_term( 1UL, context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & HasMultiplicity:1/4 1/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_False]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & HasMultiplicity:1/4 s._/5 >/1
  //DEBUG: s._: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & HasMultiplicity:1/4 s._/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_True]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_HasMultiplicity_B1("HasMultiplicity:1", COOKIE1_, COOKIE2_, func_gen_HasMultiplicity_B1);


static refalrts::FnResult func_HasMultiplicity(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & HasMultiplicity/4 (/7 # Var/9 't'/10 e.Index/5 )/8 (/13 e.Accum-L/15 (/21 (/25 # Var/27 't'/28 e.Index/29 )/26 s.Count/31 )/22 e.Accum-R/17 )/14 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = refalrts::ident_left( identifiers[ident_Var], context[5], context[6] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::char_left( 't', context[5], context[6] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Index as range 5
  context[15] = 0;
  context[16] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[17] = context[11];
    context[18] = context[12];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    context[23] = 0;
    context[24] = 0;
    context[25] = refalrts::brackets_left( context[23], context[24], context[19], context[20] );
    if( ! context[25] )
      continue;
    refalrts::bracket_pointers(context[25], context[26]);
    context[27] = refalrts::ident_left( identifiers[ident_Var], context[23], context[24] );
    if( ! context[27] )
      continue;
    context[28] = refalrts::char_left( 't', context[23], context[24] );
    if( ! context[28] )
      continue;
    if( ! refalrts::repeated_evar_left( vm, context[29], context[30], context[5], context[6], context[23], context[24] ) )
      continue;
    if( ! refalrts::empty_seq( context[23], context[24] ) )
      continue;
    // closed e.Accum-R as range 17
    if( ! refalrts::svar_left( context[31], context[19], context[20] ) )
      continue;
    if( ! refalrts::empty_seq( context[19], context[20] ) )
      continue;
    //DEBUG: e.Index: 5
    //DEBUG: e.Accum-L: 15
    //DEBUG: e.Accum-R: 17
    //DEBUG: s.Count: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} 't'/10 e.Index/5 )/8 (/13 e.Accum-L/15 (/21 (/25 # Var/27 't'/28 e.Index/29 )/26 s.Count/31 )/22 e.Accum-R/17 )/14 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & HasMultiplicity:1/4 HalfReuse: s.Count31 /7 HalfReuse: >/9 } Tile{ ]] }
    refalrts::update_name(context[4], functions[efunc_gen_HasMultiplicity_B1]);
    refalrts::reinit_svar( context[7], context[31] );
    refalrts::reinit_close_call(context[9]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, context[9], res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[15], context[16], context[11], context[12] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_HasMultiplicity("HasMultiplicity", COOKIE1_, COOKIE2_, func_HasMultiplicity);


static refalrts::FnResult func_IncMultiplicity(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & IncMultiplicity/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & IncMultiplicity/4 (/7 # Var/9 't'/10 e.new1/5 )/8 (/13 e.new2/11 )/14 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = refalrts::ident_left( identifiers[ident_Var], context[5], context[6] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::char_left( 't', context[5], context[6] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  // closed e.new2 as range 11
  do {
    // </0 & IncMultiplicity/4 (/7 # Var/9 't'/10 e.Index/15 )/8 (/13 e.Accum-L/19 (/25 (/29 # Var/31 't'/32 e.Index/33 )/30 s.Count/35 )/26 e.Accum-R/21 )/14 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.Index as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = 0;
      context[28] = 0;
      context[29] = refalrts::brackets_left( context[27], context[28], context[23], context[24] );
      if( ! context[29] )
        continue;
      refalrts::bracket_pointers(context[29], context[30]);
      context[31] = refalrts::ident_left( identifiers[ident_Var], context[27], context[28] );
      if( ! context[31] )
        continue;
      context[32] = refalrts::char_left( 't', context[27], context[28] );
      if( ! context[32] )
        continue;
      if( ! refalrts::repeated_evar_left( vm, context[33], context[34], context[15], context[16], context[27], context[28] ) )
        continue;
      if( ! refalrts::empty_seq( context[27], context[28] ) )
        continue;
      // closed e.Accum-R as range 21
      if( ! refalrts::svar_left( context[35], context[23], context[24] ) )
        continue;
      if( ! refalrts::empty_seq( context[23], context[24] ) )
        continue;
      //DEBUG: e.Index: 15
      //DEBUG: e.Accum-L: 19
      //DEBUG: e.Accum-R: 21
      //DEBUG: s.Count: 35

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} e.Index/15 )/8 {REMOVED TILE} s.Count/35 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/13 AsIs: e.Accum-L/19 AsIs: (/25 AsIs: (/29 AsIs: # Var/31 AsIs: 't'/32 AsIs: e.Index/33 AsIs: )/30 } Tile{ AsIs: </0 Reuse: & Add/4 HalfReuse: 1/7 HalfReuse: s.Count35 /9 HalfReuse: >/10 } Tile{ AsIs: )/26 AsIs: e.Accum-R/21 AsIs: )/14 } Tile{ ]] }
      refalrts::update_name(context[4], functions[efunc_Add]);
      refalrts::reinit_number(context[7], 1UL);
      refalrts::reinit_svar( context[9], context[35] );
      refalrts::reinit_close_call(context[10]);
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[26], context[14] );
      res = refalrts::splice_evar( res, context[0], context[10] );
      res = refalrts::splice_evar( res, context[13], context[30] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IncMultiplicity/4 (/7 # Var/9 't'/10 e.Index/5 )/8 (/13 e.Accum/11 )/14 >/1
  // closed e.Index as range 5
  // closed e.Accum as range 11
  //DEBUG: e.Index: 5
  //DEBUG: e.Accum: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Accum/11 } Tile{ HalfReuse: (/4 AsIs: (/7 AsIs: # Var/9 AsIs: 't'/10 AsIs: e.Index/5 AsIs: )/8 HalfReuse: 1/13 } Tile{ AsIs: )/14 HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_number(context[13], 1UL);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[4], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[14];
  res = refalrts::splice_evar( res, context[4], context[13] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IncMultiplicity("IncMultiplicity", COOKIE1_, COOKIE2_, func_IncMultiplicity);


static refalrts::FnResult func_HasPatternTVars(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & HasPatternTVars/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & HasPatternTVars/4 (/7 e.new1/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  do {
    // </0 & HasPatternTVars/4 (/7 e._/11 (/17 # Var/19 't'/20 e._0/15 )/18 e._1/13 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = 0;
    context[12] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[13] = context[9];
      context[14] = context[10];
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_left( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = refalrts::ident_left( identifiers[ident_Var], context[15], context[16] );
      if( ! context[19] )
        continue;
      context[20] = refalrts::char_left( 't', context[15], context[16] );
      if( ! context[20] )
        continue;
      // closed e._0 as range 15
      // closed e._1 as range 13
      //DEBUG: e._: 11
      //DEBUG: e._0: 15
      //DEBUG: e._1: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & HasPatternTVars/4 (/7 e._/11 (/17 # Var/19 't'/20 e._0/15 )/18 e._1/13 )/8 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_True]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[11], context[12], context[9], context[10] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & HasPatternTVars/4 (/7 e._/5 )/8 >/1
  // closed e._ as range 5
  //DEBUG: e._: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & HasPatternTVars/4 (/7 e._/5 )/8 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_False]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_HasPatternTVars("HasPatternTVars", COOKIE1_, COOKIE2_, func_HasPatternTVars);


static refalrts::FnResult func_IsPatternLinear(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & IsPatternLinear/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & IsPatternLinear/4 e._/7 (/13 # Var/15 'e'/16 e.VarName/11 )/14 e._0/17 (/23 # Var/25 'e'/26 e.VarName/27 )/24 e._1/19 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Var], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[16] = refalrts::char_left( 'e', context[11], context[12] );
      if( ! context[16] )
        continue;
      // closed e.VarName as range 11
      context[17] = 0;
      context[18] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[19] = context[9];
        context[20] = context[10];
        context[21] = 0;
        context[22] = 0;
        context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
        if( ! context[23] )
          continue;
        refalrts::bracket_pointers(context[23], context[24]);
        context[25] = refalrts::ident_left( identifiers[ident_Var], context[21], context[22] );
        if( ! context[25] )
          continue;
        context[26] = refalrts::char_left( 'e', context[21], context[22] );
        if( ! context[26] )
          continue;
        if( ! refalrts::repeated_evar_left( vm, context[27], context[28], context[11], context[12], context[21], context[22] ) )
          continue;
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        // closed e._1 as range 19
        //DEBUG: e._: 7
        //DEBUG: e.VarName: 11
        //DEBUG: e._0: 17
        //DEBUG: e._1: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & IsPatternLinear/4 e._/7 (/13 # Var/15 'e'/16 e.VarName/11 )/14 e._0/17 (/23 # Var/25 'e'/26 e.VarName/27 )/24 e._1/19 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
        refalrts::reinit_ident(context[1], identifiers[ident_False]);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[17], context[18], context[9], context[10] ) );
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IsPatternLinear/4 e._/2 >/1
  // closed e._ as range 2
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & IsPatternLinear/4 e._/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_True]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IsPatternLinear("IsPatternLinear", COOKIE1_, COOKIE2_, func_IsPatternLinear);


static refalrts::FnResult func_IsPatternFlat(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & IsPatternFlat/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & IsPatternFlat/4 e._/7 (/13 # Brackets/15 e._0/11 )/14 e._1/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Brackets], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e._0 as range 11
      // closed e._1 as range 9
      //DEBUG: e._: 7
      //DEBUG: e._0: 11
      //DEBUG: e._1: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & IsPatternFlat/4 e._/7 (/13 # Brackets/15 e._0/11 )/14 e._1/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_False]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IsPatternFlat/4 e._/2 >/1
  // closed e._ as range 2
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & IsPatternFlat/4 e._/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_True]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IsPatternFlat("IsPatternFlat", COOKIE1_, COOKIE2_, func_IsPatternFlat);


static refalrts::FnResult func_FlattenPattern(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & FlattenPattern/4 e.Pattern/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Pattern as range 2
  //DEBUG: e.Pattern: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@6/4 AsIs: e.Pattern/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z6]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FlattenPattern("FlattenPattern", COOKIE1_, COOKIE2_, func_FlattenPattern);


static refalrts::FnResult func_gen_Generalize_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Generalize=1/4 e.GlobalComplexGeneralization/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.GlobalComplexGeneralization as range 2
  //DEBUG: e.GlobalComplexGeneralization: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Generalize=1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.GlobalComplexGeneralization/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Generalize_A1("Generalize=1", COOKIE1_, COOKIE2_, func_gen_Generalize_A1);


static refalrts::FnResult func_Generalize(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Generalize/4 (/7 e.Pattern-L/5 )/8 (/11 e.Pattern-R/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Pattern-L as range 5
  // closed e.Pattern-R as range 9
  //DEBUG: e.Pattern-L: 5
  //DEBUG: e.Pattern-R: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & Generalize=1/14 Tile{ AsIs: </0 Reuse: & GlobalGen/4 AsIs: (/7 AsIs: e.Pattern-L/5 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-R/9 AsIs: )/12 AsIs: >/1 } >/15 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_Generalize_A1]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_GlobalGen]);
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Generalize("Generalize", COOKIE1_, COOKIE2_, func_Generalize);


static refalrts::FnResult func_CreateScreeningWarning(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & CreateScreeningWarning/4 t.SrcPos/17 (/15 e.FunName/13 )/16 (/11 e.Screening/9 )/12 (/7 e.Screened/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.FunName as range 13
  // closed e.Screening as range 9
  // closed e.Screened as range 5
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.FunName: 13
  //DEBUG: e.Screening: 9
  //DEBUG: e.Screened: 5
  //DEBUG: t.SrcPos: 17

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Warning/4 } # screening/19 Tile{ AsIs: t.SrcPos/17 } # Screening/20 Tile{ AsIs: (/15 AsIs: e.FunName/13 AsIs: )/16 AsIs: (/11 AsIs: e.Screening/9 AsIs: )/12 AsIs: (/7 AsIs: e.Screened/5 AsIs: )/8 HalfReuse: )/1 ]] }
  refalrts::alloc_ident(vm, context[19], identifiers[ident_screening]);
  refalrts::alloc_ident(vm, context[20], identifiers[ident_Screening]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Warning]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[15];
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_elem( res, context[19] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CreateScreeningWarning("CreateScreeningWarning", COOKIE1_, COOKIE2_, func_CreateScreeningWarning);


static refalrts::FnResult func_gen_Enumerate_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Enumerate=1/4 s._/5 e.NumberedItems/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.NumberedItems as range 2
  //DEBUG: s._: 5
  //DEBUG: e.NumberedItems: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Enumerate=1/4 s._/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.NumberedItems/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Enumerate_A1("Enumerate=1", COOKIE1_, COOKIE2_, func_gen_Enumerate_A1);


static refalrts::FnResult func_Enumerate(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Enumerate/4 e.Items/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Items as range 2
  //DEBUG: e.Items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Enumerate=1/4 } </5 & DoMapAccum@2/6 1/7 (/8 )/9 Tile{ AsIs: e.Items/2 } >/10 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoMapAccum_Z2]);
  refalrts::alloc_number(vm, context[7], 1UL);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::alloc_close_call(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_gen_Enumerate_A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Enumerate("Enumerate", COOKIE1_, COOKIE2_, func_Enumerate);


static refalrts::FnResult func_Zip(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & Zip/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Zip/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  do {
    // </0 & Zip/4 (/7 t.L/17 e.L/13 )/8 (/11 t.R/19 e.R/15 )/12 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[18] = refalrts::tvar_left( context[17], context[13], context[14] );
    if( ! context[18] )
      continue;
    // closed e.L as range 13
    context[20] = refalrts::tvar_left( context[19], context[15], context[16] );
    if( ! context[20] )
      continue;
    // closed e.R as range 15
    //DEBUG: t.L: 17
    //DEBUG: e.L: 13
    //DEBUG: t.R: 19
    //DEBUG: e.R: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/21 Tile{ AsIs: t.L/17 } Tile{ AsIs: t.R/19 } )/22 Tile{ AsIs: </0 AsIs: & Zip/4 AsIs: (/7 } Tile{ AsIs: e.L/13 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.R/15 } Tile{ AsIs: )/12 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Zip/4 (/7 )/8 (/11 )/12 >/1
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Zip/4 (/7 )/8 (/11 )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Zip("Zip", COOKIE1_, COOKIE2_, func_Zip);


static refalrts::FnResult func_gen_Apply_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@2/4 t.new1/5 t.new2/7 t.new3/9 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Apply@2/4 s.Fn/5 t.Acc/7 t.Next/9 >/1
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 9
    //DEBUG: s.Fn: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: t.Acc/7 AsIs: t.Next/9 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@2/4 (/5 t.Closure/13 e.Bounded/11 )/6 t.Acc/7 t.Next/9 >/1
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded as range 11
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 9
    //DEBUG: t.Closure: 13
    //DEBUG: e.Bounded: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@4/4 } Tile{ AsIs: t.Closure/13 } Tile{ AsIs: e.Bounded/11 } Tile{ AsIs: t.Acc/7 AsIs: t.Next/9 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@2/4 t.dyn0/5 t.Acc/7 t.Next/9 >/1
  //DEBUG: t.dyn0: 5
  //DEBUG: t.Acc: 7
  //DEBUG: t.Next: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: t.Acc/7 AsIs: t.Next/9 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z2("Apply@2", COOKIE1_, COOKIE2_, func_gen_Apply_Z2);


static refalrts::FnResult func_gen_Map_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & Map@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@1/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@1/4 (/7 (/15 # Function/17 s.ScopeClass/18 (/21 e.6/19 )/22 # Sentences/23 e.7/13 )/16 t.0/24 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = 0;
      context[14] = 0;
      context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
      if( ! context[15] )
        continue;
      refalrts::bracket_pointers(context[15], context[16]);
      context[17] = refalrts::ident_left( identifiers[ident_Function], context[13], context[14] );
      if( ! context[17] )
        continue;
      // closed e.Tail as range 9
      if( ! refalrts::svar_left( context[18], context[13], context[14] ) )
        continue;
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_left( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      context[23] = refalrts::ident_left( identifiers[ident_Sentences], context[13], context[14] );
      if( ! context[23] )
        continue;
      // closed e.6 as range 19
      // closed e.7 as range 13
      context[25] = refalrts::tvar_left( context[24], context[11], context[12] );
      if( ! context[25] )
        continue;
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      //DEBUG: e.Tail: 9
      //DEBUG: s.ScopeClass: 18
      //DEBUG: e.6: 19
      //DEBUG: e.7: 13
      //DEBUG: t.0: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.ScopeClass/18 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </26 & CheckSentences=1@1/27 Tile{ AsIs: t.0/24 } Tile{ AsIs: (/21 AsIs: e.6/19 AsIs: )/22 HalfReuse: (/23 AsIs: e.7/13 AsIs: )/16 } </28 & Enumerate=1/29 Tile{ AsIs: </0 Reuse: & DoMapAccum@2/4 HalfReuse: 1/7 AsIs: (/15 HalfReuse: )/17 } e.7/13/30 >/32 >/33 >/34 </35 Tile{ HalfReuse: & Map@1/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_CheckSentences_A1Z1]);
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_gen_Enumerate_A1]);
      refalrts::copy_evar(vm, context[30], context[31], context[13], context[14]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_close_call(vm, context[33]);
      refalrts::alloc_close_call(vm, context[34]);
      refalrts::alloc_open_call(vm, context[35]);
      refalrts::reinit_open_bracket(context[23]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z2]);
      refalrts::reinit_number(context[7], 1UL);
      refalrts::reinit_close_bracket(context[17]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[17] );
      refalrts::link_brackets( context[23], context[16] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[32], context[35] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[0], context[17] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[21], context[16] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@1/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckFunction*1/4 AsIs: t.Next/7 } >/11 </12 & Map@1/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z1]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckFunction_D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@1/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@1/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@1/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & CheckFunction@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckFunction_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z1("Map@1", COOKIE1_, COOKIE2_, func_gen_Map_Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & DoMapAccum@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@1/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@1/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@1/4 (/5 e.new8/21 )/6 (/9 e.new11/17 )/10 t.new9/15 e.new10/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      // closed e.new8 as range 21
      // closed e.new11 as range 17
      // closed e.new10 as range 19
      do {
        // </0 & DoMapAccum@1/4 (/5 e./23 )/6 (/9 e.Scanned/25 )/10 (/15 # Function/31 t.0/32 s.ScopeClass/34 (/37 e.5/35 )/38 # Sentences/39 e.6/29 )/16 e.Tail/27 >/1
        context[23] = context[21];
        context[24] = context[22];
        context[25] = context[17];
        context[26] = context[18];
        context[27] = context[19];
        context[28] = context[20];
        context[29] = 0;
        context[30] = 0;
        if( ! refalrts::brackets_term( context[29], context[30], context[15] ) )
          continue;
        context[31] = refalrts::ident_left( identifiers[ident_Function], context[29], context[30] );
        if( ! context[31] )
          continue;
        // closed e. as range 23
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        context[33] = refalrts::tvar_left( context[32], context[29], context[30] );
        if( ! context[33] )
          continue;
        if( ! refalrts::svar_left( context[34], context[29], context[30] ) )
          continue;
        context[35] = 0;
        context[36] = 0;
        context[37] = refalrts::brackets_left( context[35], context[36], context[29], context[30] );
        if( ! context[37] )
          continue;
        refalrts::bracket_pointers(context[37], context[38]);
        context[39] = refalrts::ident_left( identifiers[ident_Sentences], context[29], context[30] );
        if( ! context[39] )
          continue;
        // closed e.5 as range 35
        // closed e.6 as range 29
        //DEBUG: e.: 23
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27
        //DEBUG: t.0: 32
        //DEBUG: s.ScopeClass: 34
        //DEBUG: e.5: 35
        //DEBUG: e.6: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@1/4 AsIs: (/5 } Tile{ AsIs: e./23 } t.0/32/40 Tile{ AsIs: )/6 AsIs: (/9 } Tile{ AsIs: e.Scanned/25 } Tile{ AsIs: (/15 AsIs: # Function/31 AsIs: t.0/32 AsIs: s.ScopeClass/34 AsIs: (/37 AsIs: e.5/35 AsIs: )/38 AsIs: # Sentences/39 AsIs: e.6/29 AsIs: )/16 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/27 } Tile{ AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[40], context[41], context[32], context[33]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[37], context[38] );
        refalrts::link_brackets( context[5], context[6] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[6], context[9] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@1/4 (/5 e./23 )/6 (/9 e.Scanned/25 )/10 t.Next/15 e.Tail/27 >/1
      context[23] = context[21];
      context[24] = context[22];
      context[25] = context[17];
      context[26] = context[18];
      context[27] = context[19];
      context[28] = context[20];
      // closed e. as range 23
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: t.Next: 15
      //DEBUG: e.: 23
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.Next/15 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@1/4 AsIs: (/5 AsIs: e./23 AsIs: )/6 AsIs: (/9 AsIs: e.Scanned/25 AsIs: )/10 } Tile{ AsIs: e.Tail/27 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::splice_to_freelist_open( vm, context[10], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@1/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@1/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & FindFunctionsPosInAST\1*2/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_FindFunctionsPosInAST_L1D2]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@1/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@1/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@1/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & FindFunctionsPosInAST\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FindFunctionsPosInAST_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z1("DoMapAccum@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z1);


static refalrts::FnResult func_gen_Map_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Map@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@2/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Map@2/4 t.NumberedSentence/5 t.Next/9 e.Tail/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.Tail as range 7
    //DEBUG: t.NumberedSentence: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/11 Tile{ AsIs: t.Next/9 } t.NumberedSentence/5/12 )/14 Tile{ AsIs: </0 AsIs: & Map@2/4 AsIs: t.NumberedSentence/5 } Tile{ AsIs: e.Tail/7 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::copy_evar(vm, context[12], context[13], context[5], context[6]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[0], context[6] );
    res = refalrts::splice_evar( res, context[12], context[14] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@2/4 t.NumberedSentence/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.NumberedSentence: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@2/4 t.NumberedSentence/5 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@2/4 t.NumberedSentence/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.NumberedSentence: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@0/4 } [*]/7 & MakePairs$1\1@0/8 Tile{ AsIs: t.NumberedSentence/5 } {*}/9 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_MakePairs_S1L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[9], context[7]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  refalrts::wrap_closure( context[9] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z2("Map@2", COOKIE1_, COOKIE2_, func_gen_Map_Z2);


static refalrts::FnResult func_gen_DoMapAccum_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & DoMapAccum@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@2/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@2/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@2/4 s.Count/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      if( ! refalrts::svar_term( context[5], context[5] ) )
        continue;
      // closed e.Scanned as range 17
      // closed e.Tail as range 19
      //DEBUG: t.Next: 15
      //DEBUG: s.Count: 5
      //DEBUG: e.Scanned: 17
      //DEBUG: e.Tail: 19

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@2/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & Add/24 1/25 Tile{ AsIs: s.Count/5 } >/26 (/27 Tile{ AsIs: t.Next/15 } s.Count/5/28 )/29 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_close_bracket(vm, context[22]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[25], 1UL);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::alloc_open_bracket(vm, context[27]);
      refalrts::copy_stvar(vm, context[28], context[5]);
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z2]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[27], context[29] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_elem( res, context[5] );
      res = refalrts::splice_evar( res, context[22], context[25] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@2/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@2/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & Enumerate=1\1*1/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_Enumerate_A1L1D1]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@2/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@2/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@2/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & Enumerate=1\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_Enumerate_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z2("DoMapAccum@2", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z2);


static refalrts::FnResult func_gen_CheckSentences_A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & CheckSentences=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences=1@1/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 2
  do {
    // </0 & CheckSentences=1@1/4 t.SrcPos0/5 (/9 e.Name/15 )/10 (/13 e.Sentences0/17 )/14 e.NumberedSentences/19 >/1
    context[15] = context[7];
    context[16] = context[8];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.Name as range 15
    // closed e.Sentences0 as range 17
    // closed e.NumberedSentences as range 19
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.Name: 15
    //DEBUG: e.Sentences0: 17
    //DEBUG: e.NumberedSentences: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=2@1/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.Name/15 AsIs: )/10 AsIs: (/13 AsIs: e.Sentences0/17 AsIs: )/14 } </21 & MakePairs/22 Tile{ AsIs: e.NumberedSentences/19 } >/23 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_MakePairs]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A2Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences=1@1/4 t.SrcPos0/5 (/9 e.Name/7 )/10 (/13 e.Sentences0/11 )/14 e.dyn/2 >/1
  // closed e.Name as range 7
  // closed e.Sentences0 as range 11
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.Name: 7
  //DEBUG: e.Sentences0: 11
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.Name/7 AsIs: )/10 AsIs: (/13 } )/15 (/16 )/17 (/18 Tile{ AsIs: e.Sentences0/11 } Tile{ AsIs: )/14 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[18], context[14] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[13], context[15] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[14];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[15], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_A1Z1("CheckSentences=1@1", COOKIE1_, COOKIE2_, func_gen_CheckSentences_A1Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & DoMapAccum@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@3/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 t.new4/15 (/19 e.new5/17 )/20 e.new6/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new5 as range 17
  // closed e.new6 as range 2
  do {
    // </0 & DoMapAccum@3/4 t.SrcPos/5 (/9 e.FuncName/21 )/10 (/13 e.Prefix$a/23 )/14 t.Acc/15 (/19 e.Scanned/25 )/20 t.Next/29 e.Tail/27 >/1
    context[21] = context[7];
    context[22] = context[8];
    context[23] = context[11];
    context[24] = context[12];
    context[25] = context[17];
    context[26] = context[18];
    context[27] = context[2];
    context[28] = context[3];
    // closed e.FuncName as range 21
    // closed e.Prefix$a as range 23
    // closed e.Scanned as range 25
    context[30] = refalrts::tvar_left( context[29], context[27], context[28] );
    if( ! context[30] )
      continue;
    // closed e.Tail as range 27
    //DEBUG: t.SrcPos: 5
    //DEBUG: t.Acc: 15
    //DEBUG: e.FuncName: 21
    //DEBUG: e.Prefix$a: 23
    //DEBUG: e.Scanned: 25
    //DEBUG: t.Next: 29
    //DEBUG: e.Tail: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@3/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/21 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/23 AsIs: )/14 } Tile{ AsIs: (/19 AsIs: e.Scanned/25 AsIs: )/20 } (/31 Tile{ AsIs: e.Tail/27 } )/32 </33 & CheckSentenceAssignsAndConditions\1/34 t.SrcPos/5/35 (/37 e.FuncName/21/38 )/40 (/41 e.Prefix$a/23/42 )/44 Tile{ AsIs: t.Acc/15 } Tile{ AsIs: t.Next/29 } >/45 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[31]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_gen_CheckSentenceAssignsAndConditions_L1]);
    refalrts::copy_evar(vm, context[35], context[36], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::copy_evar(vm, context[38], context[39], context[21], context[22]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::copy_evar(vm, context[42], context[43], context[23], context[24]);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[33] );
    refalrts::link_brackets( context[41], context[44] );
    refalrts::link_brackets( context[37], context[40] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[45] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[32], context[44] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[31] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@3/4 t.SrcPos/5 (/9 e.FuncName/21 )/10 (/13 e.Prefix$a/23 )/14 t.Acc/15 (/19 e.Scanned/25 )/20 >/1
    context[21] = context[7];
    context[22] = context[8];
    context[23] = context[11];
    context[24] = context[12];
    context[25] = context[17];
    context[26] = context[18];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.FuncName as range 21
    // closed e.Prefix$a as range 23
    // closed e.Scanned as range 25
    //DEBUG: t.SrcPos: 5
    //DEBUG: t.Acc: 15
    //DEBUG: e.FuncName: 21
    //DEBUG: e.Prefix$a: 23
    //DEBUG: e.Scanned: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@3/4 t.SrcPos/5 (/9 e.FuncName/21 )/10 (/13 e.Prefix$a/23 )/14 {REMOVED TILE} (/19 {REMOVED TILE} )/20 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/15 } Tile{ AsIs: e.Scanned/25 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@3/4 t.SrcPos/5 (/9 e.FuncName/7 )/10 (/13 e.Prefix$a/11 )/14 t.acc/15 (/19 e.scanned/17 )/20 e.items/2 >/1
  // closed e.FuncName as range 7
  // closed e.Prefix$a as range 11
  // closed e.scanned as range 17
  // closed e.items as range 2
  //DEBUG: t.SrcPos: 5
  //DEBUG: t.acc: 15
  //DEBUG: e.FuncName: 7
  //DEBUG: e.Prefix$a: 11
  //DEBUG: e.scanned: 17
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </21 & DoMapAccum@0/22 Tile{ HalfReuse: [*]/0 Reuse: & CheckSentenceAssignsAndConditions\1@0/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/11 AsIs: )/14 } {*}/23 Tile{ AsIs: t.acc/15 AsIs: (/19 AsIs: e.scanned/17 AsIs: )/20 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[23], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentenceAssignsAndConditions_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[15];
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[0], context[14] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  refalrts::use( res );
  refalrts::wrap_closure( context[23] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z3("DoMapAccum@3", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z3);


static refalrts::FnResult func_gen_DoMapAccum_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 114 elems
  refalrts::Iter context[114];
  refalrts::zeros( context, 114 );
  // </0 & DoMapAccum@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@4/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 t.new6/23 (/27 e.new7/25 )/28 e.new8/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  context[24] = refalrts::tvar_left( context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new7 as range 25
  // closed e.new8 as range 2
  do {
    // </0 & DoMapAccum@4/4 t.new9/5 (/9 e.new13/29 )/10 (/13 e.new14/31 )/14 (/17 e.new15/33 )/18 (/21 e.new16/35 )/22 t.new10/23 (/27 e.new17/37 )/28 t.new11/41 e.new12/39 >/1
    context[29] = context[7];
    context[30] = context[8];
    context[31] = context[11];
    context[32] = context[12];
    context[33] = context[15];
    context[34] = context[16];
    context[35] = context[19];
    context[36] = context[20];
    context[37] = context[25];
    context[38] = context[26];
    context[39] = context[2];
    context[40] = context[3];
    // closed e.new13 as range 29
    // closed e.new14 as range 31
    // closed e.new15 as range 33
    // closed e.new16 as range 35
    // closed e.new17 as range 37
    context[42] = refalrts::tvar_left( context[41], context[39], context[40] );
    if( ! context[42] )
      continue;
    // closed e.new12 as range 39
    do {
      // </0 & DoMapAccum@4/4 t.new18/5 (/9 e.new22/43 )/10 (/13 e.new23/45 )/14 (/17 e.new24/47 )/18 (/21 e.new25/49 )/22 s.new19/23 (/27 e.new26/51 )/28 t.new20/41 e.new21/53 >/1
      context[43] = context[29];
      context[44] = context[30];
      context[45] = context[31];
      context[46] = context[32];
      context[47] = context[33];
      context[48] = context[34];
      context[49] = context[35];
      context[50] = context[36];
      context[51] = context[37];
      context[52] = context[38];
      context[53] = context[39];
      context[54] = context[40];
      if( ! refalrts::svar_term( context[23], context[23] ) )
        continue;
      // closed e.new22 as range 43
      // closed e.new23 as range 45
      // closed e.new24 as range 47
      // closed e.new25 as range 49
      // closed e.new26 as range 51
      // closed e.new21 as range 53
      do {
        // </0 & DoMapAccum@4/4 t.new27/5 (/9 e.new32/55 )/10 (/13 e.new33/57 )/14 (/17 e.new34/59 )/18 (/21 e.new35/61 )/22 s.new28/23 (/27 e.new36/63 )/28 (/41 s.new29/69 e.new30/67 )/42 e.new31/65 >/1
        context[55] = context[43];
        context[56] = context[44];
        context[57] = context[45];
        context[58] = context[46];
        context[59] = context[47];
        context[60] = context[48];
        context[61] = context[49];
        context[62] = context[50];
        context[63] = context[51];
        context[64] = context[52];
        context[65] = context[53];
        context[66] = context[54];
        context[67] = 0;
        context[68] = 0;
        if( ! refalrts::brackets_term( context[67], context[68], context[41] ) )
          continue;
        // closed e.new32 as range 55
        // closed e.new33 as range 57
        // closed e.new34 as range 59
        // closed e.new35 as range 61
        // closed e.new36 as range 63
        // closed e.new31 as range 65
        if( ! refalrts::svar_left( context[69], context[67], context[68] ) )
          continue;
        // closed e.new30 as range 67
        do {
          // </0 & DoMapAccum@4/4 t.SrcPos/5 (/9 e.FuncName/70 )/10 (/13 e.Prefix$a/72 )/14 (/17 e.ContextVars$a/74 )/18 (/21 e.ContextAllAssignsOrConds/76 )/22 s.Num/23 (/27 e.Scanned/78 )/28 (/41 # Brackets/69 e.0/80 )/42 e.Tail/82 >/1
          context[70] = context[55];
          context[71] = context[56];
          context[72] = context[57];
          context[73] = context[58];
          context[74] = context[59];
          context[75] = context[60];
          context[76] = context[61];
          context[77] = context[62];
          context[78] = context[63];
          context[79] = context[64];
          context[80] = context[67];
          context[81] = context[68];
          context[82] = context[65];
          context[83] = context[66];
          if( ! refalrts::ident_term( identifiers[ident_Brackets], context[69] ) )
            continue;
          // closed e.FuncName as range 70
          // closed e.Prefix$a as range 72
          // closed e.ContextVars$a as range 74
          // closed e.ContextAllAssignsOrConds as range 76
          // closed e.Scanned as range 78
          // closed e.0 as range 80
          // closed e.Tail as range 82
          //DEBUG: t.SrcPos: 5
          //DEBUG: s.Num: 23
          //DEBUG: e.FuncName: 70
          //DEBUG: e.Prefix$a: 72
          //DEBUG: e.ContextVars$a: 74
          //DEBUG: e.ContextAllAssignsOrConds: 76
          //DEBUG: e.Scanned: 78
          //DEBUG: e.0: 80
          //DEBUG: e.Tail: 82

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@4/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/70 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/72 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars$a/74 AsIs: )/18 AsIs: (/21 AsIs: e.ContextAllAssignsOrConds/76 AsIs: )/22 } Tile{ AsIs: (/27 AsIs: e.Scanned/78 AsIs: )/28 AsIs: (/41 } Tile{ AsIs: e.Tail/82 } )/84 Tile{ AsIs: s.Num/23 } </85 & DelAccumulator/86 </87 & DoMapAccum@4/88 t.SrcPos/5/89 (/91 e.FuncName/70/92 )/94 (/95 e.Prefix$a/72/96 )/98 (/99 e.ContextVars$a/74/100 )/102 (/103 e.ContextAllAssignsOrConds/76/104 )/106 1/107 (/108 Tile{ HalfReuse: )/69 AsIs: e.0/80 HalfReuse: >/42 } >/109 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[84]);
          refalrts::alloc_open_call(vm, context[85]);
          refalrts::alloc_name(vm, context[86], functions[efunc_DelAccumulator]);
          refalrts::alloc_open_call(vm, context[87]);
          refalrts::alloc_name(vm, context[88], functions[efunc_gen_DoMapAccum_Z4]);
          refalrts::copy_evar(vm, context[89], context[90], context[5], context[6]);
          refalrts::alloc_open_bracket(vm, context[91]);
          refalrts::copy_evar(vm, context[92], context[93], context[70], context[71]);
          refalrts::alloc_close_bracket(vm, context[94]);
          refalrts::alloc_open_bracket(vm, context[95]);
          refalrts::copy_evar(vm, context[96], context[97], context[72], context[73]);
          refalrts::alloc_close_bracket(vm, context[98]);
          refalrts::alloc_open_bracket(vm, context[99]);
          refalrts::copy_evar(vm, context[100], context[101], context[74], context[75]);
          refalrts::alloc_close_bracket(vm, context[102]);
          refalrts::alloc_open_bracket(vm, context[103]);
          refalrts::copy_evar(vm, context[104], context[105], context[76], context[77]);
          refalrts::alloc_close_bracket(vm, context[106]);
          refalrts::alloc_number(vm, context[107], 1UL);
          refalrts::alloc_open_bracket(vm, context[108]);
          refalrts::alloc_close_call(vm, context[109]);
          refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z4]);
          refalrts::reinit_close_bracket(context[69]);
          refalrts::reinit_close_call(context[42]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[109] );
          refalrts::push_stack( vm, context[85] );
          refalrts::push_stack( vm, context[42] );
          refalrts::push_stack( vm, context[87] );
          refalrts::link_brackets( context[108], context[69] );
          refalrts::link_brackets( context[103], context[106] );
          refalrts::link_brackets( context[99], context[102] );
          refalrts::link_brackets( context[95], context[98] );
          refalrts::link_brackets( context[91], context[94] );
          refalrts::link_brackets( context[41], context[84] );
          refalrts::link_brackets( context[27], context[28] );
          refalrts::link_brackets( context[21], context[22] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[109] );
          res = refalrts::splice_evar( res, context[69], context[42] );
          res = refalrts::splice_evar( res, context[85], context[108] );
          res = refalrts::splice_elem( res, context[23] );
          res = refalrts::splice_elem( res, context[84] );
          res = refalrts::splice_evar( res, context[82], context[83] );
          res = refalrts::splice_evar( res, context[27], context[41] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoMapAccum@4/4 t.SrcPos/5 (/9 e.FuncName/70 )/10 (/13 e.Prefix$a/72 )/14 (/17 e.ContextVars$a/74 )/18 (/21 e.ContextAllAssignsOrConds/76 )/22 s.Num/23 (/27 e.Scanned/78 )/28 (/41 # ADT-Brackets/69 t.0/84 (/88 e.3/86 )/89 e.2/80 )/42 e.Tail/82 >/1
          context[70] = context[55];
          context[71] = context[56];
          context[72] = context[57];
          context[73] = context[58];
          context[74] = context[59];
          context[75] = context[60];
          context[76] = context[61];
          context[77] = context[62];
          context[78] = context[63];
          context[79] = context[64];
          context[80] = context[67];
          context[81] = context[68];
          context[82] = context[65];
          context[83] = context[66];
          if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[69] ) )
            continue;
          // closed e.FuncName as range 70
          // closed e.Prefix$a as range 72
          // closed e.ContextVars$a as range 74
          // closed e.ContextAllAssignsOrConds as range 76
          // closed e.Scanned as range 78
          // closed e.Tail as range 82
          context[85] = refalrts::tvar_left( context[84], context[80], context[81] );
          if( ! context[85] )
            continue;
          context[86] = 0;
          context[87] = 0;
          context[88] = refalrts::brackets_left( context[86], context[87], context[80], context[81] );
          if( ! context[88] )
            continue;
          refalrts::bracket_pointers(context[88], context[89]);
          // closed e.3 as range 86
          // closed e.2 as range 80
          //DEBUG: t.SrcPos: 5
          //DEBUG: s.Num: 23
          //DEBUG: e.FuncName: 70
          //DEBUG: e.Prefix$a: 72
          //DEBUG: e.ContextVars$a: 74
          //DEBUG: e.ContextAllAssignsOrConds: 76
          //DEBUG: e.Scanned: 78
          //DEBUG: e.Tail: 82
          //DEBUG: t.0: 84
          //DEBUG: e.3: 86
          //DEBUG: e.2: 80

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.0/84 {REMOVED TILE} e.3/86 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@4/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/70 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/72 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars$a/74 AsIs: )/18 AsIs: (/21 AsIs: e.ContextAllAssignsOrConds/76 AsIs: )/22 } Tile{ AsIs: (/27 AsIs: e.Scanned/78 AsIs: )/28 AsIs: (/41 } Tile{ AsIs: e.Tail/82 } )/90 Tile{ AsIs: s.Num/23 } </91 Tile{ HalfReuse: & DelAccumulator/69 } </92 & DoMapAccum@4/93 t.SrcPos/5/94 Tile{ AsIs: (/88 } e.FuncName/70/96 )/98 (/99 e.Prefix$a/72/100 )/102 (/103 e.ContextVars$a/74/104 )/106 (/107 e.ContextAllAssignsOrConds/76/108 )/110 1/111 (/112 Tile{ AsIs: )/89 AsIs: e.2/80 HalfReuse: >/42 } >/113 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[90]);
          refalrts::alloc_open_call(vm, context[91]);
          refalrts::alloc_open_call(vm, context[92]);
          refalrts::alloc_name(vm, context[93], functions[efunc_gen_DoMapAccum_Z4]);
          refalrts::copy_evar(vm, context[94], context[95], context[5], context[6]);
          refalrts::copy_evar(vm, context[96], context[97], context[70], context[71]);
          refalrts::alloc_close_bracket(vm, context[98]);
          refalrts::alloc_open_bracket(vm, context[99]);
          refalrts::copy_evar(vm, context[100], context[101], context[72], context[73]);
          refalrts::alloc_close_bracket(vm, context[102]);
          refalrts::alloc_open_bracket(vm, context[103]);
          refalrts::copy_evar(vm, context[104], context[105], context[74], context[75]);
          refalrts::alloc_close_bracket(vm, context[106]);
          refalrts::alloc_open_bracket(vm, context[107]);
          refalrts::copy_evar(vm, context[108], context[109], context[76], context[77]);
          refalrts::alloc_close_bracket(vm, context[110]);
          refalrts::alloc_number(vm, context[111], 1UL);
          refalrts::alloc_open_bracket(vm, context[112]);
          refalrts::alloc_close_call(vm, context[113]);
          refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z4]);
          refalrts::reinit_name(context[69], functions[efunc_DelAccumulator]);
          refalrts::reinit_close_call(context[42]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[113] );
          refalrts::push_stack( vm, context[91] );
          refalrts::push_stack( vm, context[42] );
          refalrts::push_stack( vm, context[92] );
          refalrts::link_brackets( context[112], context[89] );
          refalrts::link_brackets( context[107], context[110] );
          refalrts::link_brackets( context[103], context[106] );
          refalrts::link_brackets( context[99], context[102] );
          refalrts::link_brackets( context[88], context[98] );
          refalrts::link_brackets( context[41], context[90] );
          refalrts::link_brackets( context[27], context[28] );
          refalrts::link_brackets( context[21], context[22] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[113] );
          res = refalrts::splice_evar( res, context[89], context[42] );
          res = refalrts::splice_evar( res, context[98], context[112] );
          res = refalrts::splice_evar( res, context[96], context[97] );
          res = refalrts::splice_elem( res, context[88] );
          res = refalrts::splice_evar( res, context[92], context[95] );
          res = refalrts::splice_elem( res, context[69] );
          res = refalrts::splice_elem( res, context[91] );
          res = refalrts::splice_elem( res, context[23] );
          res = refalrts::splice_elem( res, context[90] );
          res = refalrts::splice_evar( res, context[82], context[83] );
          res = refalrts::splice_evar( res, context[27], context[41] );
          refalrts::splice_to_freelist_open( vm, context[22], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoMapAccum@4/4 t.SrcPos/5 (/9 e.FuncName/70 )/10 (/13 e.Prefix$a/72 )/14 (/17 e.ContextVars$a/74 )/18 (/21 e.ContextAllAssignsOrConds/76 )/22 s.Num/23 (/27 e.Scanned/78 )/28 (/41 # CallBrackets/69 e.0/80 )/42 e.Tail/82 >/1
          context[70] = context[55];
          context[71] = context[56];
          context[72] = context[57];
          context[73] = context[58];
          context[74] = context[59];
          context[75] = context[60];
          context[76] = context[61];
          context[77] = context[62];
          context[78] = context[63];
          context[79] = context[64];
          context[80] = context[67];
          context[81] = context[68];
          context[82] = context[65];
          context[83] = context[66];
          if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[69] ) )
            continue;
          // closed e.FuncName as range 70
          // closed e.Prefix$a as range 72
          // closed e.ContextVars$a as range 74
          // closed e.ContextAllAssignsOrConds as range 76
          // closed e.Scanned as range 78
          // closed e.0 as range 80
          // closed e.Tail as range 82
          //DEBUG: t.SrcPos: 5
          //DEBUG: s.Num: 23
          //DEBUG: e.FuncName: 70
          //DEBUG: e.Prefix$a: 72
          //DEBUG: e.ContextVars$a: 74
          //DEBUG: e.ContextAllAssignsOrConds: 76
          //DEBUG: e.Scanned: 78
          //DEBUG: e.0: 80
          //DEBUG: e.Tail: 82

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@4/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/70 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/72 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars$a/74 AsIs: )/18 AsIs: (/21 AsIs: e.ContextAllAssignsOrConds/76 AsIs: )/22 } Tile{ AsIs: (/27 AsIs: e.Scanned/78 AsIs: )/28 AsIs: (/41 } Tile{ AsIs: e.Tail/82 } )/84 Tile{ AsIs: s.Num/23 } </85 & DelAccumulator/86 </87 & DoMapAccum@4/88 t.SrcPos/5/89 (/91 e.FuncName/70/92 )/94 (/95 e.Prefix$a/72/96 )/98 (/99 e.ContextVars$a/74/100 )/102 (/103 e.ContextAllAssignsOrConds/76/104 )/106 1/107 (/108 Tile{ HalfReuse: )/69 AsIs: e.0/80 HalfReuse: >/42 } >/109 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[84]);
          refalrts::alloc_open_call(vm, context[85]);
          refalrts::alloc_name(vm, context[86], functions[efunc_DelAccumulator]);
          refalrts::alloc_open_call(vm, context[87]);
          refalrts::alloc_name(vm, context[88], functions[efunc_gen_DoMapAccum_Z4]);
          refalrts::copy_evar(vm, context[89], context[90], context[5], context[6]);
          refalrts::alloc_open_bracket(vm, context[91]);
          refalrts::copy_evar(vm, context[92], context[93], context[70], context[71]);
          refalrts::alloc_close_bracket(vm, context[94]);
          refalrts::alloc_open_bracket(vm, context[95]);
          refalrts::copy_evar(vm, context[96], context[97], context[72], context[73]);
          refalrts::alloc_close_bracket(vm, context[98]);
          refalrts::alloc_open_bracket(vm, context[99]);
          refalrts::copy_evar(vm, context[100], context[101], context[74], context[75]);
          refalrts::alloc_close_bracket(vm, context[102]);
          refalrts::alloc_open_bracket(vm, context[103]);
          refalrts::copy_evar(vm, context[104], context[105], context[76], context[77]);
          refalrts::alloc_close_bracket(vm, context[106]);
          refalrts::alloc_number(vm, context[107], 1UL);
          refalrts::alloc_open_bracket(vm, context[108]);
          refalrts::alloc_close_call(vm, context[109]);
          refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z4]);
          refalrts::reinit_close_bracket(context[69]);
          refalrts::reinit_close_call(context[42]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[109] );
          refalrts::push_stack( vm, context[85] );
          refalrts::push_stack( vm, context[42] );
          refalrts::push_stack( vm, context[87] );
          refalrts::link_brackets( context[108], context[69] );
          refalrts::link_brackets( context[103], context[106] );
          refalrts::link_brackets( context[99], context[102] );
          refalrts::link_brackets( context[95], context[98] );
          refalrts::link_brackets( context[91], context[94] );
          refalrts::link_brackets( context[41], context[84] );
          refalrts::link_brackets( context[27], context[28] );
          refalrts::link_brackets( context[21], context[22] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[109] );
          res = refalrts::splice_evar( res, context[69], context[42] );
          res = refalrts::splice_evar( res, context[85], context[108] );
          res = refalrts::splice_elem( res, context[23] );
          res = refalrts::splice_elem( res, context[84] );
          res = refalrts::splice_evar( res, context[82], context[83] );
          res = refalrts::splice_evar( res, context[27], context[41] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@4/4 t.SrcPos/5 (/9 e.FuncName/70 )/10 (/13 e.Prefix$a/72 )/14 (/17 e.ContextVars$a/74 )/18 (/21 e.ContextAllAssignsOrConds/76 )/22 s.Num/23 (/27 e.Scanned/78 )/28 (/41 # Closure/69 # Sentences/84 e.1/80 )/42 e.Tail/82 >/1
        context[70] = context[55];
        context[71] = context[56];
        context[72] = context[57];
        context[73] = context[58];
        context[74] = context[59];
        context[75] = context[60];
        context[76] = context[61];
        context[77] = context[62];
        context[78] = context[63];
        context[79] = context[64];
        context[80] = context[67];
        context[81] = context[68];
        context[82] = context[65];
        context[83] = context[66];
        if( ! refalrts::ident_term( identifiers[ident_Closure], context[69] ) )
          continue;
        context[84] = refalrts::ident_left( identifiers[ident_Sentences], context[80], context[81] );
        if( ! context[84] )
          continue;
        // closed e.FuncName as range 70
        // closed e.Prefix$a as range 72
        // closed e.ContextVars$a as range 74
        // closed e.ContextAllAssignsOrConds as range 76
        // closed e.Scanned as range 78
        // closed e.1 as range 80
        // closed e.Tail as range 82
        //DEBUG: t.SrcPos: 5
        //DEBUG: s.Num: 23
        //DEBUG: e.FuncName: 70
        //DEBUG: e.Prefix$a: 72
        //DEBUG: e.ContextVars$a: 74
        //DEBUG: e.ContextAllAssignsOrConds: 76
        //DEBUG: e.Scanned: 78
        //DEBUG: e.1: 80
        //DEBUG: e.Tail: 82

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@4/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/70 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/72 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars$a/74 AsIs: )/18 AsIs: (/21 AsIs: e.ContextAllAssignsOrConds/76 AsIs: )/22 } Tile{ AsIs: (/27 AsIs: e.Scanned/78 AsIs: )/28 AsIs: (/41 } Tile{ AsIs: e.Tail/82 } )/85 </86 Tile{ HalfReuse: & Add/69 } 1/87 Tile{ AsIs: s.Num/23 } >/88 </89 & CheckSentences@3/90 t.SrcPos/5/91 (/93 e.FuncName/70/94 )/96 (/97 e.Prefix$a/72/98 )/100 (/101 </102 & Symb/103 s.Num/23/104 >/105 )/106 (/107 e.ContextVars$a/74/108 )/110 (/111 e.ContextAllAssignsOrConds/76/112 Tile{ HalfReuse: )/84 AsIs: e.1/80 HalfReuse: >/42 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[85]);
        refalrts::alloc_open_call(vm, context[86]);
        refalrts::alloc_number(vm, context[87], 1UL);
        refalrts::alloc_close_call(vm, context[88]);
        refalrts::alloc_open_call(vm, context[89]);
        refalrts::alloc_name(vm, context[90], functions[efunc_gen_CheckSentences_Z3]);
        refalrts::copy_evar(vm, context[91], context[92], context[5], context[6]);
        refalrts::alloc_open_bracket(vm, context[93]);
        refalrts::copy_evar(vm, context[94], context[95], context[70], context[71]);
        refalrts::alloc_close_bracket(vm, context[96]);
        refalrts::alloc_open_bracket(vm, context[97]);
        refalrts::copy_evar(vm, context[98], context[99], context[72], context[73]);
        refalrts::alloc_close_bracket(vm, context[100]);
        refalrts::alloc_open_bracket(vm, context[101]);
        refalrts::alloc_open_call(vm, context[102]);
        refalrts::alloc_name(vm, context[103], functions[efunc_Symb]);
        refalrts::copy_stvar(vm, context[104], context[23]);
        refalrts::alloc_close_call(vm, context[105]);
        refalrts::alloc_close_bracket(vm, context[106]);
        refalrts::alloc_open_bracket(vm, context[107]);
        refalrts::copy_evar(vm, context[108], context[109], context[74], context[75]);
        refalrts::alloc_close_bracket(vm, context[110]);
        refalrts::alloc_open_bracket(vm, context[111]);
        refalrts::copy_evar(vm, context[112], context[113], context[76], context[77]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z4]);
        refalrts::reinit_name(context[69], functions[efunc_Add]);
        refalrts::reinit_close_bracket(context[84]);
        refalrts::reinit_close_call(context[42]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[89] );
        refalrts::link_brackets( context[111], context[84] );
        refalrts::link_brackets( context[107], context[110] );
        refalrts::link_brackets( context[101], context[106] );
        refalrts::push_stack( vm, context[105] );
        refalrts::push_stack( vm, context[102] );
        refalrts::link_brackets( context[97], context[100] );
        refalrts::link_brackets( context[93], context[96] );
        refalrts::push_stack( vm, context[88] );
        refalrts::push_stack( vm, context[86] );
        refalrts::link_brackets( context[41], context[85] );
        refalrts::link_brackets( context[27], context[28] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[84], context[42] );
        res = refalrts::splice_evar( res, context[112], context[113] );
        res = refalrts::splice_evar( res, context[88], context[111] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_elem( res, context[87] );
        res = refalrts::splice_elem( res, context[69] );
        res = refalrts::splice_evar( res, context[85], context[86] );
        res = refalrts::splice_evar( res, context[82], context[83] );
        res = refalrts::splice_evar( res, context[27], context[41] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@4/4 t.SrcPos/5 (/9 e.FuncName/55 )/10 (/13 e.Prefix$a/57 )/14 (/17 e.ContextVars$a/59 )/18 (/21 e.ContextAllAssignsOrConds/61 )/22 s.Num/23 (/27 e.Scanned/63 )/28 t.Next/41 e.Tail/65 >/1
      context[55] = context[43];
      context[56] = context[44];
      context[57] = context[45];
      context[58] = context[46];
      context[59] = context[47];
      context[60] = context[48];
      context[61] = context[49];
      context[62] = context[50];
      context[63] = context[51];
      context[64] = context[52];
      context[65] = context[53];
      context[66] = context[54];
      // closed e.FuncName as range 55
      // closed e.Prefix$a as range 57
      // closed e.ContextVars$a as range 59
      // closed e.ContextAllAssignsOrConds as range 61
      // closed e.Scanned as range 63
      // closed e.Tail as range 65
      //DEBUG: t.SrcPos: 5
      //DEBUG: t.Next: 41
      //DEBUG: s.Num: 23
      //DEBUG: e.FuncName: 55
      //DEBUG: e.Prefix$a: 57
      //DEBUG: e.ContextVars$a: 59
      //DEBUG: e.ContextAllAssignsOrConds: 61
      //DEBUG: e.Scanned: 63
      //DEBUG: e.Tail: 65

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.Next/41 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@4/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/55 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/57 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars$a/59 AsIs: )/18 AsIs: (/21 AsIs: e.ContextAllAssignsOrConds/61 AsIs: )/22 AsIs: s.Num/23 AsIs: (/27 AsIs: e.Scanned/63 AsIs: )/28 } Tile{ AsIs: e.Tail/65 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[65], context[66] );
      refalrts::splice_to_freelist_open( vm, context[28], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@4/4 t.SrcPos/5 (/9 e.FuncName/43 )/10 (/13 e.Prefix$a/45 )/14 (/17 e.ContextVars$a/47 )/18 (/21 e.ContextAllAssignsOrConds/49 )/22 t.Acc/23 (/27 e.Scanned/51 )/28 t.Next/41 e.Tail/53 >/1
    context[43] = context[29];
    context[44] = context[30];
    context[45] = context[31];
    context[46] = context[32];
    context[47] = context[33];
    context[48] = context[34];
    context[49] = context[35];
    context[50] = context[36];
    context[51] = context[37];
    context[52] = context[38];
    context[53] = context[39];
    context[54] = context[40];
    // closed e.FuncName as range 43
    // closed e.Prefix$a as range 45
    // closed e.ContextVars$a as range 47
    // closed e.ContextAllAssignsOrConds as range 49
    // closed e.Scanned as range 51
    // closed e.Tail as range 53
    //DEBUG: t.SrcPos: 5
    //DEBUG: t.Acc: 23
    //DEBUG: t.Next: 41
    //DEBUG: e.FuncName: 43
    //DEBUG: e.Prefix$a: 45
    //DEBUG: e.ContextVars$a: 47
    //DEBUG: e.ContextAllAssignsOrConds: 49
    //DEBUG: e.Scanned: 51
    //DEBUG: e.Tail: 53

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@4/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/43 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/45 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars$a/47 AsIs: )/18 AsIs: (/21 AsIs: e.ContextAllAssignsOrConds/49 AsIs: )/22 } Tile{ AsIs: (/27 AsIs: e.Scanned/51 AsIs: )/28 } (/55 Tile{ AsIs: e.Tail/53 } )/56 </57 & CheckExpression\1*5/58 t.SrcPos/5/59 (/61 e.FuncName/43/62 )/64 (/65 e.Prefix$a/45/66 )/68 (/69 e.ContextVars$a/47/70 e.ContextAllAssignsOrConds/49/72 )/74 Tile{ AsIs: t.Acc/23 } Tile{ AsIs: t.Next/41 } >/75 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[55]);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_open_call(vm, context[57]);
    refalrts::alloc_name(vm, context[58], functions[efunc_gen_CheckExpression_L1D5]);
    refalrts::copy_evar(vm, context[59], context[60], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[61]);
    refalrts::copy_evar(vm, context[62], context[63], context[43], context[44]);
    refalrts::alloc_close_bracket(vm, context[64]);
    refalrts::alloc_open_bracket(vm, context[65]);
    refalrts::copy_evar(vm, context[66], context[67], context[45], context[46]);
    refalrts::alloc_close_bracket(vm, context[68]);
    refalrts::alloc_open_bracket(vm, context[69]);
    refalrts::copy_evar(vm, context[70], context[71], context[47], context[48]);
    refalrts::copy_evar(vm, context[72], context[73], context[49], context[50]);
    refalrts::alloc_close_bracket(vm, context[74]);
    refalrts::alloc_close_call(vm, context[75]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[75] );
    refalrts::push_stack( vm, context[57] );
    refalrts::link_brackets( context[69], context[74] );
    refalrts::link_brackets( context[65], context[68] );
    refalrts::link_brackets( context[61], context[64] );
    refalrts::link_brackets( context[55], context[56] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[75] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[56], context[74] );
    res = refalrts::splice_evar( res, context[53], context[54] );
    res = refalrts::splice_elem( res, context[55] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@4/4 t.SrcPos/5 (/9 e.FuncName/29 )/10 (/13 e.Prefix$a/31 )/14 (/17 e.ContextVars$a/33 )/18 (/21 e.ContextAllAssignsOrConds/35 )/22 t.Acc/23 (/27 e.Scanned/37 )/28 >/1
    context[29] = context[7];
    context[30] = context[8];
    context[31] = context[11];
    context[32] = context[12];
    context[33] = context[15];
    context[34] = context[16];
    context[35] = context[19];
    context[36] = context[20];
    context[37] = context[25];
    context[38] = context[26];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.FuncName as range 29
    // closed e.Prefix$a as range 31
    // closed e.ContextVars$a as range 33
    // closed e.ContextAllAssignsOrConds as range 35
    // closed e.Scanned as range 37
    //DEBUG: t.SrcPos: 5
    //DEBUG: t.Acc: 23
    //DEBUG: e.FuncName: 29
    //DEBUG: e.Prefix$a: 31
    //DEBUG: e.ContextVars$a: 33
    //DEBUG: e.ContextAllAssignsOrConds: 35
    //DEBUG: e.Scanned: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@4/4 t.SrcPos/5 (/9 e.FuncName/29 )/10 (/13 e.Prefix$a/31 )/14 (/17 e.ContextVars$a/33 )/18 (/21 e.ContextAllAssignsOrConds/35 )/22 {REMOVED TILE} (/27 {REMOVED TILE} )/28 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/23 } Tile{ AsIs: e.Scanned/37 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@4/4 t.SrcPos/5 (/9 e.FuncName/7 )/10 (/13 e.Prefix$a/11 )/14 (/17 e.ContextVars$a/15 )/18 (/21 e.ContextAllAssignsOrConds/19 )/22 t.acc/23 (/27 e.scanned/25 )/28 e.items/2 >/1
  // closed e.FuncName as range 7
  // closed e.Prefix$a as range 11
  // closed e.ContextVars$a as range 15
  // closed e.ContextAllAssignsOrConds as range 19
  // closed e.scanned as range 25
  // closed e.items as range 2
  //DEBUG: t.SrcPos: 5
  //DEBUG: t.acc: 23
  //DEBUG: e.FuncName: 7
  //DEBUG: e.Prefix$a: 11
  //DEBUG: e.ContextVars$a: 15
  //DEBUG: e.ContextAllAssignsOrConds: 19
  //DEBUG: e.scanned: 25
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </21 } & DoMapAccum@0/29 Tile{ HalfReuse: [*]/0 Reuse: & CheckExpression\1@0/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/11 AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.ContextVars$a/15 } Tile{ AsIs: e.ContextAllAssignsOrConds/19 } Tile{ AsIs: )/18 } Tile{ HalfReuse: {*}/22 AsIs: t.acc/23 AsIs: (/27 AsIs: e.scanned/25 AsIs: )/28 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[29], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::reinit_open_call(context[21]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckExpression_L1Z0]);
  refalrts::reinit_unwrapped_closure(context[22], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[22];
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[0], context[17] );
  res = refalrts::splice_elem( res, context[29] );
  res = refalrts::splice_elem( res, context[21] );
  refalrts::use( res );
  refalrts::wrap_closure( context[22] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z4("DoMapAccum@4", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z4);


static refalrts::FnResult func_gen_DoMapAccum_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 100 elems
  refalrts::Iter context[100];
  refalrts::zeros( context, 100 );
  // </0 & DoMapAccum@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@5/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 t.new6/23 (/27 e.new7/25 )/28 e.new8/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  context[24] = refalrts::tvar_left( context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new7 as range 25
  // closed e.new8 as range 2
  do {
    // </0 & DoMapAccum@5/4 t.new9/5 (/9 e.new13/29 )/10 (/13 e.new14/31 )/14 (/17 e.new15/33 )/18 (/21 e.new16/35 )/22 t.new10/23 (/27 e.new17/37 )/28 t.new11/41 e.new12/39 >/1
    context[29] = context[7];
    context[30] = context[8];
    context[31] = context[11];
    context[32] = context[12];
    context[33] = context[15];
    context[34] = context[16];
    context[35] = context[19];
    context[36] = context[20];
    context[37] = context[25];
    context[38] = context[26];
    context[39] = context[2];
    context[40] = context[3];
    // closed e.new13 as range 29
    // closed e.new14 as range 31
    // closed e.new15 as range 33
    // closed e.new16 as range 35
    // closed e.new17 as range 37
    context[42] = refalrts::tvar_left( context[41], context[39], context[40] );
    if( ! context[42] )
      continue;
    // closed e.new12 as range 39
    do {
      // </0 & DoMapAccum@5/4 t.new18/5 (/9 e.new22/43 )/10 (/13 e.new23/45 )/14 (/17 e.new24/47 )/18 (/21 e.new25/49 )/22 s.new19/23 (/27 e.new26/51 )/28 t.new20/41 e.new21/53 >/1
      context[43] = context[29];
      context[44] = context[30];
      context[45] = context[31];
      context[46] = context[32];
      context[47] = context[33];
      context[48] = context[34];
      context[49] = context[35];
      context[50] = context[36];
      context[51] = context[37];
      context[52] = context[38];
      context[53] = context[39];
      context[54] = context[40];
      if( ! refalrts::svar_term( context[23], context[23] ) )
        continue;
      // closed e.new22 as range 43
      // closed e.new23 as range 45
      // closed e.new24 as range 47
      // closed e.new25 as range 49
      // closed e.new26 as range 51
      // closed e.new21 as range 53
      do {
        // </0 & DoMapAccum@5/4 t.SrcPos/5 (/9 e.FuncName/55 )/10 (/13 e.Prefix$a/57 )/14 (/17 e.ContextVars$a/59 )/18 (/21 e.ContextAllAssignsOrConds/61 )/22 s.Num/23 (/27 e.Scanned/63 )/28 (/41 # Sentences/69 e.0/67 )/42 e.Tail/65 >/1
        context[55] = context[43];
        context[56] = context[44];
        context[57] = context[45];
        context[58] = context[46];
        context[59] = context[47];
        context[60] = context[48];
        context[61] = context[49];
        context[62] = context[50];
        context[63] = context[51];
        context[64] = context[52];
        context[65] = context[53];
        context[66] = context[54];
        context[67] = 0;
        context[68] = 0;
        if( ! refalrts::brackets_term( context[67], context[68], context[41] ) )
          continue;
        context[69] = refalrts::ident_left( identifiers[ident_Sentences], context[67], context[68] );
        if( ! context[69] )
          continue;
        // closed e.FuncName as range 55
        // closed e.Prefix$a as range 57
        // closed e.ContextVars$a as range 59
        // closed e.ContextAllAssignsOrConds as range 61
        // closed e.Scanned as range 63
        // closed e.0 as range 67
        // closed e.Tail as range 65
        //DEBUG: t.SrcPos: 5
        //DEBUG: s.Num: 23
        //DEBUG: e.FuncName: 55
        //DEBUG: e.Prefix$a: 57
        //DEBUG: e.ContextVars$a: 59
        //DEBUG: e.ContextAllAssignsOrConds: 61
        //DEBUG: e.Scanned: 63
        //DEBUG: e.0: 67
        //DEBUG: e.Tail: 65

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@5/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/55 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/57 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars$a/59 AsIs: )/18 AsIs: (/21 AsIs: e.ContextAllAssignsOrConds/61 AsIs: )/22 } Tile{ AsIs: (/27 AsIs: e.Scanned/63 AsIs: )/28 AsIs: (/41 } Tile{ AsIs: e.Tail/65 } )/70 </71 & Add/72 1/73 Tile{ AsIs: s.Num/23 } >/74 </75 & CheckSentences@4/76 t.SrcPos/5/77 (/79 e.FuncName/55/80 )/82 (/83 e.Prefix$a/57/84 )/86 (/87 </88 & Symb/89 s.Num/23/90 >/91 )/92 (/93 e.ContextVars$a/59/94 )/96 (/97 e.ContextAllAssignsOrConds/61/98 Tile{ HalfReuse: )/69 AsIs: e.0/67 HalfReuse: >/42 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[70]);
        refalrts::alloc_open_call(vm, context[71]);
        refalrts::alloc_name(vm, context[72], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[73], 1UL);
        refalrts::alloc_close_call(vm, context[74]);
        refalrts::alloc_open_call(vm, context[75]);
        refalrts::alloc_name(vm, context[76], functions[efunc_gen_CheckSentences_Z4]);
        refalrts::copy_evar(vm, context[77], context[78], context[5], context[6]);
        refalrts::alloc_open_bracket(vm, context[79]);
        refalrts::copy_evar(vm, context[80], context[81], context[55], context[56]);
        refalrts::alloc_close_bracket(vm, context[82]);
        refalrts::alloc_open_bracket(vm, context[83]);
        refalrts::copy_evar(vm, context[84], context[85], context[57], context[58]);
        refalrts::alloc_close_bracket(vm, context[86]);
        refalrts::alloc_open_bracket(vm, context[87]);
        refalrts::alloc_open_call(vm, context[88]);
        refalrts::alloc_name(vm, context[89], functions[efunc_Symb]);
        refalrts::copy_stvar(vm, context[90], context[23]);
        refalrts::alloc_close_call(vm, context[91]);
        refalrts::alloc_close_bracket(vm, context[92]);
        refalrts::alloc_open_bracket(vm, context[93]);
        refalrts::copy_evar(vm, context[94], context[95], context[59], context[60]);
        refalrts::alloc_close_bracket(vm, context[96]);
        refalrts::alloc_open_bracket(vm, context[97]);
        refalrts::copy_evar(vm, context[98], context[99], context[61], context[62]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z5]);
        refalrts::reinit_close_bracket(context[69]);
        refalrts::reinit_close_call(context[42]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[75] );
        refalrts::link_brackets( context[97], context[69] );
        refalrts::link_brackets( context[93], context[96] );
        refalrts::link_brackets( context[87], context[92] );
        refalrts::push_stack( vm, context[91] );
        refalrts::push_stack( vm, context[88] );
        refalrts::link_brackets( context[83], context[86] );
        refalrts::link_brackets( context[79], context[82] );
        refalrts::push_stack( vm, context[74] );
        refalrts::push_stack( vm, context[71] );
        refalrts::link_brackets( context[41], context[70] );
        refalrts::link_brackets( context[27], context[28] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[69], context[42] );
        res = refalrts::splice_evar( res, context[98], context[99] );
        res = refalrts::splice_evar( res, context[74], context[97] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_evar( res, context[70], context[73] );
        res = refalrts::splice_evar( res, context[65], context[66] );
        res = refalrts::splice_evar( res, context[27], context[41] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@5/4 t.SrcPos/5 (/9 e.FuncName/55 )/10 (/13 e.Prefix$a/57 )/14 (/17 e.ContextVars$a/59 )/18 (/21 e.ContextAllAssignsOrConds/61 )/22 s.Num/23 (/27 e.Scanned/63 )/28 t.Next/41 e.Tail/65 >/1
      context[55] = context[43];
      context[56] = context[44];
      context[57] = context[45];
      context[58] = context[46];
      context[59] = context[47];
      context[60] = context[48];
      context[61] = context[49];
      context[62] = context[50];
      context[63] = context[51];
      context[64] = context[52];
      context[65] = context[53];
      context[66] = context[54];
      // closed e.FuncName as range 55
      // closed e.Prefix$a as range 57
      // closed e.ContextVars$a as range 59
      // closed e.ContextAllAssignsOrConds as range 61
      // closed e.Scanned as range 63
      // closed e.Tail as range 65
      //DEBUG: t.SrcPos: 5
      //DEBUG: t.Next: 41
      //DEBUG: s.Num: 23
      //DEBUG: e.FuncName: 55
      //DEBUG: e.Prefix$a: 57
      //DEBUG: e.ContextVars$a: 59
      //DEBUG: e.ContextAllAssignsOrConds: 61
      //DEBUG: e.Scanned: 63
      //DEBUG: e.Tail: 65

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.Next/41 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@5/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/55 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/57 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars$a/59 AsIs: )/18 AsIs: (/21 AsIs: e.ContextAllAssignsOrConds/61 AsIs: )/22 AsIs: s.Num/23 AsIs: (/27 AsIs: e.Scanned/63 AsIs: )/28 } Tile{ AsIs: e.Tail/65 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[65], context[66] );
      refalrts::splice_to_freelist_open( vm, context[28], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@5/4 t.SrcPos/5 (/9 e.FuncName/43 )/10 (/13 e.Prefix$a/45 )/14 (/17 e.ContextVars$a/47 )/18 (/21 e.ContextAllAssignsOrConds/49 )/22 t.Acc/23 (/27 e.Scanned/51 )/28 t.Next/41 e.Tail/53 >/1
    context[43] = context[29];
    context[44] = context[30];
    context[45] = context[31];
    context[46] = context[32];
    context[47] = context[33];
    context[48] = context[34];
    context[49] = context[35];
    context[50] = context[36];
    context[51] = context[37];
    context[52] = context[38];
    context[53] = context[39];
    context[54] = context[40];
    // closed e.FuncName as range 43
    // closed e.Prefix$a as range 45
    // closed e.ContextVars$a as range 47
    // closed e.ContextAllAssignsOrConds as range 49
    // closed e.Scanned as range 51
    // closed e.Tail as range 53
    //DEBUG: t.SrcPos: 5
    //DEBUG: t.Acc: 23
    //DEBUG: t.Next: 41
    //DEBUG: e.FuncName: 43
    //DEBUG: e.Prefix$a: 45
    //DEBUG: e.ContextVars$a: 47
    //DEBUG: e.ContextAllAssignsOrConds: 49
    //DEBUG: e.Scanned: 51
    //DEBUG: e.Tail: 53

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@5/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/43 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/45 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars$a/47 AsIs: )/18 AsIs: (/21 AsIs: e.ContextAllAssignsOrConds/49 AsIs: )/22 } Tile{ AsIs: (/27 AsIs: e.Scanned/51 AsIs: )/28 } (/55 Tile{ AsIs: e.Tail/53 } )/56 </57 & CheckBlocks\1*2/58 t.SrcPos/5/59 (/61 e.FuncName/43/62 )/64 (/65 e.Prefix$a/45/66 )/68 (/69 e.ContextVars$a/47/70 e.ContextAllAssignsOrConds/49/72 )/74 Tile{ AsIs: t.Acc/23 } Tile{ AsIs: t.Next/41 } >/75 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[55]);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_open_call(vm, context[57]);
    refalrts::alloc_name(vm, context[58], functions[efunc_gen_CheckBlocks_L1D2]);
    refalrts::copy_evar(vm, context[59], context[60], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[61]);
    refalrts::copy_evar(vm, context[62], context[63], context[43], context[44]);
    refalrts::alloc_close_bracket(vm, context[64]);
    refalrts::alloc_open_bracket(vm, context[65]);
    refalrts::copy_evar(vm, context[66], context[67], context[45], context[46]);
    refalrts::alloc_close_bracket(vm, context[68]);
    refalrts::alloc_open_bracket(vm, context[69]);
    refalrts::copy_evar(vm, context[70], context[71], context[47], context[48]);
    refalrts::copy_evar(vm, context[72], context[73], context[49], context[50]);
    refalrts::alloc_close_bracket(vm, context[74]);
    refalrts::alloc_close_call(vm, context[75]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[75] );
    refalrts::push_stack( vm, context[57] );
    refalrts::link_brackets( context[69], context[74] );
    refalrts::link_brackets( context[65], context[68] );
    refalrts::link_brackets( context[61], context[64] );
    refalrts::link_brackets( context[55], context[56] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[75] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[56], context[74] );
    res = refalrts::splice_evar( res, context[53], context[54] );
    res = refalrts::splice_elem( res, context[55] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@5/4 t.SrcPos/5 (/9 e.FuncName/29 )/10 (/13 e.Prefix$a/31 )/14 (/17 e.ContextVars$a/33 )/18 (/21 e.ContextAllAssignsOrConds/35 )/22 t.Acc/23 (/27 e.Scanned/37 )/28 >/1
    context[29] = context[7];
    context[30] = context[8];
    context[31] = context[11];
    context[32] = context[12];
    context[33] = context[15];
    context[34] = context[16];
    context[35] = context[19];
    context[36] = context[20];
    context[37] = context[25];
    context[38] = context[26];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.FuncName as range 29
    // closed e.Prefix$a as range 31
    // closed e.ContextVars$a as range 33
    // closed e.ContextAllAssignsOrConds as range 35
    // closed e.Scanned as range 37
    //DEBUG: t.SrcPos: 5
    //DEBUG: t.Acc: 23
    //DEBUG: e.FuncName: 29
    //DEBUG: e.Prefix$a: 31
    //DEBUG: e.ContextVars$a: 33
    //DEBUG: e.ContextAllAssignsOrConds: 35
    //DEBUG: e.Scanned: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@5/4 t.SrcPos/5 (/9 e.FuncName/29 )/10 (/13 e.Prefix$a/31 )/14 (/17 e.ContextVars$a/33 )/18 (/21 e.ContextAllAssignsOrConds/35 )/22 {REMOVED TILE} (/27 {REMOVED TILE} )/28 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/23 } Tile{ AsIs: e.Scanned/37 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@5/4 t.SrcPos/5 (/9 e.FuncName/7 )/10 (/13 e.Prefix$a/11 )/14 (/17 e.ContextVars$a/15 )/18 (/21 e.ContextAllAssignsOrConds/19 )/22 t.acc/23 (/27 e.scanned/25 )/28 e.items/2 >/1
  // closed e.FuncName as range 7
  // closed e.Prefix$a as range 11
  // closed e.ContextVars$a as range 15
  // closed e.ContextAllAssignsOrConds as range 19
  // closed e.scanned as range 25
  // closed e.items as range 2
  //DEBUG: t.SrcPos: 5
  //DEBUG: t.acc: 23
  //DEBUG: e.FuncName: 7
  //DEBUG: e.Prefix$a: 11
  //DEBUG: e.ContextVars$a: 15
  //DEBUG: e.ContextAllAssignsOrConds: 19
  //DEBUG: e.scanned: 25
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </21 } & DoMapAccum@0/29 Tile{ HalfReuse: [*]/0 Reuse: & CheckBlocks\1@0/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/11 AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.ContextVars$a/15 } Tile{ AsIs: e.ContextAllAssignsOrConds/19 } Tile{ AsIs: )/18 } Tile{ HalfReuse: {*}/22 AsIs: t.acc/23 AsIs: (/27 AsIs: e.scanned/25 AsIs: )/28 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[29], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::reinit_open_call(context[21]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckBlocks_L1Z0]);
  refalrts::reinit_unwrapped_closure(context[22], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[22];
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[0], context[17] );
  res = refalrts::splice_elem( res, context[29] );
  res = refalrts::splice_elem( res, context[21] );
  refalrts::use( res );
  refalrts::wrap_closure( context[22] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z5("DoMapAccum@5", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z5);


static refalrts::FnResult func_gen_Map_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & Map@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@3/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@3/4 (/7 s.AssignOrCond/25 (/23 e.2/21 )/24 (/19 e.4/17 )/20 (/15 e.6/13 )/16 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = 0;
      context[14] = 0;
      context[15] = refalrts::brackets_right( context[13], context[14], context[11], context[12] );
      if( ! context[15] )
        continue;
      refalrts::bracket_pointers(context[15], context[16]);
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_right( context[17], context[18], context[11], context[12] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_right( context[21], context[22], context[11], context[12] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      // closed e.2 as range 21
      // closed e.4 as range 17
      // closed e.6 as range 13
      // closed e.Tail as range 9
      if( ! refalrts::svar_left( context[25], context[11], context[12] ) )
        continue;
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      //DEBUG: e.2: 21
      //DEBUG: e.4: 17
      //DEBUG: e.6: 13
      //DEBUG: e.Tail: 9
      //DEBUG: s.AssignOrCond: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Map@3/4 (/7 s.AssignOrCond/25 (/23 e.2/21 )/24 (/19 e.4/17 )/20 (/15 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.6/13 } Tile{ HalfReuse: </16 HalfReuse: & Map@3/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[16];
      res = refalrts::splice_evar( res, context[13], context[14] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@3/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences\1=3\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@3/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z3]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_L1A3L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@3/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@3/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@3/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & CheckSentences\1=3\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_L1A3L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z3("Map@3", COOKIE1_, COOKIE2_, func_gen_Map_Z3);


static refalrts::FnResult func_gen_CheckSentences_L1A3Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 114 elems
  refalrts::Iter context[114];
  refalrts::zeros( context, 114 );
  // </0 & CheckSentences\1=3@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences\1=3@1/4 s.new1/5 t.new2/6 (/10 e.new3/8 )/11 (/14 e.new4/12 )/15 (/18 e.new5/16 )/19 (/22 e.new6/20 )/23 (/26 e.new7/24 )/27 (/30 e.new8/28 )/31 (/34 e.new9/32 )/35 e.new10/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  context[28] = 0;
  context[29] = 0;
  context[30] = refalrts::brackets_left( context[28], context[29], context[2], context[3] );
  if( ! context[30] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[30], context[31]);
  context[32] = 0;
  context[33] = 0;
  context[34] = refalrts::brackets_left( context[32], context[33], context[2], context[3] );
  if( ! context[34] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[34], context[35]);
  // closed e.new3 as range 8
  // closed e.new4 as range 12
  // closed e.new5 as range 16
  // closed e.new6 as range 20
  // closed e.new7 as range 24
  // closed e.new8 as range 28
  // closed e.new9 as range 32
  // closed e.new10 as range 2
  do {
    // </0 & CheckSentences\1=3@1/4 s.Num0/5 t.SrcPos0/6 (/10 e.FuncName0/36 )/11 (/14 e.Prefix$a0/38 )/15 (/18 e.ContextVars/40 )/19 (/22 e.Pattern0/42 )/23 (/26 e.AssignsOrConds0/44 )/27 (/30 e.Result0/46 )/31 (/34 e.Blocks0/48 )/35 e.ContextAllAssignsOrConds/50 >/1
    context[36] = context[8];
    context[37] = context[9];
    context[38] = context[12];
    context[39] = context[13];
    context[40] = context[16];
    context[41] = context[17];
    context[42] = context[20];
    context[43] = context[21];
    context[44] = context[24];
    context[45] = context[25];
    context[46] = context[28];
    context[47] = context[29];
    context[48] = context[32];
    context[49] = context[33];
    context[50] = context[2];
    context[51] = context[3];
    // closed e.FuncName0 as range 36
    // closed e.Prefix$a0 as range 38
    // closed e.ContextVars as range 40
    // closed e.Pattern0 as range 42
    // closed e.AssignsOrConds0 as range 44
    // closed e.Result0 as range 46
    // closed e.Blocks0 as range 48
    // closed e.ContextAllAssignsOrConds as range 50
    //DEBUG: t.SrcPos0: 6
    //DEBUG: s.Num0: 5
    //DEBUG: e.FuncName0: 36
    //DEBUG: e.Prefix$a0: 38
    //DEBUG: e.ContextVars: 40
    //DEBUG: e.Pattern0: 42
    //DEBUG: e.AssignsOrConds0: 44
    //DEBUG: e.Result0: 46
    //DEBUG: e.Blocks0: 48
    //DEBUG: e.ContextAllAssignsOrConds: 50

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Add/4 } 1/52 Tile{ AsIs: s.Num0/5 } >/53 </54 & DelAccumulator/55 </56 & DoMapAccum@3/57 t.SrcPos0/6/58 (/60 e.FuncName0/36/61 )/63 (/64 e.Prefix$a0/38/65 Tile{ AsIs: )/35 } (/67 1/68 e.ContextVars/40/69 e.Pattern0/42/71 )/73 (/74 )/75 Tile{ AsIs: e.AssignsOrConds0/44 } >/76 >/77 </78 & DelAccumulator/79 </80 & DoMapAccum@13/81 Tile{ AsIs: t.SrcPos0/6 AsIs: (/10 AsIs: e.FuncName0/36 AsIs: )/11 AsIs: (/14 AsIs: e.Prefix$a0/38 AsIs: )/15 AsIs: (/18 AsIs: e.ContextVars/40 AsIs: )/19 AsIs: (/22 AsIs: e.Pattern0/42 AsIs: )/23 AsIs: (/26 } Tile{ AsIs: e.ContextAllAssignsOrConds/50 } )/82 1/83 Tile{ HalfReuse: (/27 HalfReuse: )/30 AsIs: e.Result0/46 HalfReuse: >/31 HalfReuse: >/34 } </84 & DelAccumulator/85 </86 & DoMapAccum@14/87 t.SrcPos0/6/88 (/90 e.FuncName0/36/91 )/93 (/94 e.Prefix$a0/38/95 )/97 (/98 e.ContextVars/40/99 )/101 (/102 e.Pattern0/42/103 )/105 (/106 e.ContextAllAssignsOrConds/50/107 )/109 1/110 (/111 )/112 Tile{ AsIs: e.Blocks0/48 } >/113 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_number(vm, context[52], 1UL);
    refalrts::alloc_close_call(vm, context[53]);
    refalrts::alloc_open_call(vm, context[54]);
    refalrts::alloc_name(vm, context[55], functions[efunc_DelAccumulator]);
    refalrts::alloc_open_call(vm, context[56]);
    refalrts::alloc_name(vm, context[57], functions[efunc_gen_DoMapAccum_Z3]);
    refalrts::copy_evar(vm, context[58], context[59], context[6], context[7]);
    refalrts::alloc_open_bracket(vm, context[60]);
    refalrts::copy_evar(vm, context[61], context[62], context[36], context[37]);
    refalrts::alloc_close_bracket(vm, context[63]);
    refalrts::alloc_open_bracket(vm, context[64]);
    refalrts::copy_evar(vm, context[65], context[66], context[38], context[39]);
    refalrts::alloc_open_bracket(vm, context[67]);
    refalrts::alloc_number(vm, context[68], 1UL);
    refalrts::copy_evar(vm, context[69], context[70], context[40], context[41]);
    refalrts::copy_evar(vm, context[71], context[72], context[42], context[43]);
    refalrts::alloc_close_bracket(vm, context[73]);
    refalrts::alloc_open_bracket(vm, context[74]);
    refalrts::alloc_close_bracket(vm, context[75]);
    refalrts::alloc_close_call(vm, context[76]);
    refalrts::alloc_close_call(vm, context[77]);
    refalrts::alloc_open_call(vm, context[78]);
    refalrts::alloc_name(vm, context[79], functions[efunc_DelAccumulator]);
    refalrts::alloc_open_call(vm, context[80]);
    refalrts::alloc_name(vm, context[81], functions[efunc_gen_DoMapAccum_Z13]);
    refalrts::alloc_close_bracket(vm, context[82]);
    refalrts::alloc_number(vm, context[83], 1UL);
    refalrts::alloc_open_call(vm, context[84]);
    refalrts::alloc_name(vm, context[85], functions[efunc_DelAccumulator]);
    refalrts::alloc_open_call(vm, context[86]);
    refalrts::alloc_name(vm, context[87], functions[efunc_gen_DoMapAccum_Z14]);
    refalrts::copy_evar(vm, context[88], context[89], context[6], context[7]);
    refalrts::alloc_open_bracket(vm, context[90]);
    refalrts::copy_evar(vm, context[91], context[92], context[36], context[37]);
    refalrts::alloc_close_bracket(vm, context[93]);
    refalrts::alloc_open_bracket(vm, context[94]);
    refalrts::copy_evar(vm, context[95], context[96], context[38], context[39]);
    refalrts::alloc_close_bracket(vm, context[97]);
    refalrts::alloc_open_bracket(vm, context[98]);
    refalrts::copy_evar(vm, context[99], context[100], context[40], context[41]);
    refalrts::alloc_close_bracket(vm, context[101]);
    refalrts::alloc_open_bracket(vm, context[102]);
    refalrts::copy_evar(vm, context[103], context[104], context[42], context[43]);
    refalrts::alloc_close_bracket(vm, context[105]);
    refalrts::alloc_open_bracket(vm, context[106]);
    refalrts::copy_evar(vm, context[107], context[108], context[50], context[51]);
    refalrts::alloc_close_bracket(vm, context[109]);
    refalrts::alloc_number(vm, context[110], 1UL);
    refalrts::alloc_open_bracket(vm, context[111]);
    refalrts::alloc_close_bracket(vm, context[112]);
    refalrts::alloc_close_call(vm, context[113]);
    refalrts::update_name(context[4], functions[efunc_Add]);
    refalrts::reinit_open_bracket(context[27]);
    refalrts::reinit_close_bracket(context[30]);
    refalrts::reinit_close_call(context[31]);
    refalrts::reinit_close_call(context[34]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[84] );
    refalrts::push_stack( vm, context[113] );
    refalrts::push_stack( vm, context[86] );
    refalrts::link_brackets( context[111], context[112] );
    refalrts::link_brackets( context[106], context[109] );
    refalrts::link_brackets( context[102], context[105] );
    refalrts::link_brackets( context[98], context[101] );
    refalrts::link_brackets( context[94], context[97] );
    refalrts::link_brackets( context[90], context[93] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[78] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[80] );
    refalrts::link_brackets( context[27], context[30] );
    refalrts::link_brackets( context[26], context[82] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::link_brackets( context[10], context[11] );
    refalrts::push_stack( vm, context[77] );
    refalrts::push_stack( vm, context[54] );
    refalrts::push_stack( vm, context[76] );
    refalrts::push_stack( vm, context[56] );
    refalrts::link_brackets( context[74], context[75] );
    refalrts::link_brackets( context[67], context[73] );
    refalrts::link_brackets( context[64], context[35] );
    refalrts::link_brackets( context[60], context[63] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[113] );
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_evar( res, context[84], context[112] );
    res = refalrts::splice_evar( res, context[27], context[34] );
    res = refalrts::splice_evar( res, context[82], context[83] );
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_evar( res, context[6], context[26] );
    res = refalrts::splice_evar( res, context[76], context[81] );
    res = refalrts::splice_evar( res, context[44], context[45] );
    res = refalrts::splice_evar( res, context[67], context[75] );
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_evar( res, context[65], context[66] );
    res = refalrts::splice_evar( res, context[53], context[64] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_elem( res, context[52] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences\1=3@1/4 s.Num0/5 t.SrcPos0/6 (/10 e.FuncName0/8 )/11 (/14 e.Prefix$a0/12 )/15 (/18 e.ContextVars/16 )/19 (/22 e.Pattern0/20 )/23 (/26 e.AssignsOrConds0/24 )/27 (/30 e.Result0/28 )/31 (/34 e.Blocks0/32 )/35 e.dyn/2 >/1
  // closed e.FuncName0 as range 8
  // closed e.Prefix$a0 as range 12
  // closed e.ContextVars as range 16
  // closed e.Pattern0 as range 20
  // closed e.AssignsOrConds0 as range 24
  // closed e.Result0 as range 28
  // closed e.Blocks0 as range 32
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 6
  //DEBUG: s.Num0: 5
  //DEBUG: e.FuncName0: 8
  //DEBUG: e.Prefix$a0: 12
  //DEBUG: e.ContextVars: 16
  //DEBUG: e.Pattern0: 20
  //DEBUG: e.AssignsOrConds0: 24
  //DEBUG: e.Result0: 28
  //DEBUG: e.Blocks0: 32
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences\1=3@0/4 AsIs: s.Num0/5 AsIs: t.SrcPos0/6 AsIs: (/10 AsIs: e.FuncName0/8 AsIs: )/11 AsIs: (/14 AsIs: e.Prefix$a0/12 AsIs: )/15 AsIs: (/18 } Tile{ AsIs: e.ContextVars/16 } e.Pattern0/20/36 Tile{ AsIs: )/19 AsIs: (/22 AsIs: e.Pattern0/20 AsIs: )/23 AsIs: (/26 AsIs: e.AssignsOrConds0/24 AsIs: )/27 AsIs: (/30 AsIs: e.Result0/28 AsIs: )/31 AsIs: (/34 AsIs: e.Blocks0/32 AsIs: )/35 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[36], context[37], context[20], context[21]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_L1A3Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[34], context[35] );
  refalrts::link_brackets( context[30], context[31] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[19];
  res = refalrts::splice_evar( res, context[36], context[37] );
  res = refalrts::splice_evar( res, context[16], context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_L1A3Z1("CheckSentences\\1=3@1", COOKIE1_, COOKIE2_, func_gen_CheckSentences_L1A3Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 83 elems
  refalrts::Iter context[83];
  refalrts::zeros( context, 83 );
  // </0 & DoMapAccum@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@6/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 t.new5/19 (/23 e.new6/21 )/24 e.new7/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  context[20] = refalrts::tvar_left( context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new6 as range 21
  // closed e.new7 as range 2
  do {
    // </0 & DoMapAccum@6/4 t.new8/5 (/9 e.new12/25 )/10 (/13 e.new13/27 )/14 (/17 e.new14/29 )/18 t.new9/19 (/23 e.new15/31 )/24 t.new10/35 e.new11/33 >/1
    context[25] = context[7];
    context[26] = context[8];
    context[27] = context[11];
    context[28] = context[12];
    context[29] = context[15];
    context[30] = context[16];
    context[31] = context[21];
    context[32] = context[22];
    context[33] = context[2];
    context[34] = context[3];
    // closed e.new12 as range 25
    // closed e.new13 as range 27
    // closed e.new14 as range 29
    // closed e.new15 as range 31
    context[36] = refalrts::tvar_left( context[35], context[33], context[34] );
    if( ! context[36] )
      continue;
    // closed e.new11 as range 33
    do {
      // </0 & DoMapAccum@6/4 t.SrcPos/5 (/9 e.FuncName/37 )/10 (/13 e.ContextVars/39 )/14 (/17 e.Prefix/41 )/18 s.Num/19 (/23 e.Scanned/43 )/24 (/35 (/51 e.1/49 )/52 e.4/47 (/59 e.5/57 )/60 (/55 e.3/53 )/56 )/36 e.Tail/45 >/1
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[29];
      context[42] = context[30];
      context[43] = context[31];
      context[44] = context[32];
      context[45] = context[33];
      context[46] = context[34];
      context[47] = 0;
      context[48] = 0;
      if( ! refalrts::brackets_term( context[47], context[48], context[35] ) )
        continue;
      if( ! refalrts::svar_term( context[19], context[19] ) )
        continue;
      context[49] = 0;
      context[50] = 0;
      context[51] = refalrts::brackets_left( context[49], context[50], context[47], context[48] );
      if( ! context[51] )
        continue;
      refalrts::bracket_pointers(context[51], context[52]);
      context[53] = 0;
      context[54] = 0;
      context[55] = refalrts::brackets_right( context[53], context[54], context[47], context[48] );
      if( ! context[55] )
        continue;
      refalrts::bracket_pointers(context[55], context[56]);
      context[57] = 0;
      context[58] = 0;
      context[59] = refalrts::brackets_right( context[57], context[58], context[47], context[48] );
      if( ! context[59] )
        continue;
      refalrts::bracket_pointers(context[59], context[60]);
      // closed e.FuncName as range 37
      // closed e.ContextVars as range 39
      // closed e.Prefix as range 41
      // closed e.Scanned as range 43
      // closed e.1 as range 49
      // closed e.4 as range 47
      // closed e.5 as range 57
      // closed e.3 as range 53
      // closed e.Tail as range 45
      //DEBUG: t.SrcPos: 5
      //DEBUG: s.Num: 19
      //DEBUG: e.FuncName: 37
      //DEBUG: e.ContextVars: 39
      //DEBUG: e.Prefix: 41
      //DEBUG: e.Scanned: 43
      //DEBUG: e.1: 49
      //DEBUG: e.4: 47
      //DEBUG: e.5: 57
      //DEBUG: e.3: 53
      //DEBUG: e.Tail: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@6/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/37 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars/39 AsIs: )/14 AsIs: (/17 AsIs: e.Prefix/41 AsIs: )/18 } Tile{ AsIs: (/23 AsIs: e.Scanned/43 AsIs: )/24 AsIs: (/35 } Tile{ AsIs: e.Tail/45 } )/61 </62 & CheckSentences\1=1/63 Tile{ AsIs: s.Num/19 } t.SrcPos/5/64 (/66 e.FuncName/37/67 )/69 Tile{ AsIs: (/51 AsIs: e.1/49 AsIs: )/52 } (/70 Tile{ AsIs: e.4/47 } )/71 Tile{ AsIs: (/59 AsIs: e.5/57 AsIs: )/60 AsIs: (/55 AsIs: e.3/53 AsIs: )/56 HalfReuse: (/36 } e.ContextVars/39/72 )/74 e.Prefix/41/75 '$'/77 </78 & Symb/79 s.Num/19/80 >/81 >/82 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[61]);
      refalrts::alloc_open_call(vm, context[62]);
      refalrts::alloc_name(vm, context[63], functions[efunc_gen_CheckSentences_L1A1]);
      refalrts::copy_evar(vm, context[64], context[65], context[5], context[6]);
      refalrts::alloc_open_bracket(vm, context[66]);
      refalrts::copy_evar(vm, context[67], context[68], context[37], context[38]);
      refalrts::alloc_close_bracket(vm, context[69]);
      refalrts::alloc_open_bracket(vm, context[70]);
      refalrts::alloc_close_bracket(vm, context[71]);
      refalrts::copy_evar(vm, context[72], context[73], context[39], context[40]);
      refalrts::alloc_close_bracket(vm, context[74]);
      refalrts::copy_evar(vm, context[75], context[76], context[41], context[42]);
      refalrts::alloc_char(vm, context[77], '$');
      refalrts::alloc_open_call(vm, context[78]);
      refalrts::alloc_name(vm, context[79], functions[efunc_Symb]);
      refalrts::copy_stvar(vm, context[80], context[19]);
      refalrts::alloc_close_call(vm, context[81]);
      refalrts::alloc_close_call(vm, context[82]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z6]);
      refalrts::reinit_open_bracket(context[36]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[82] );
      refalrts::push_stack( vm, context[62] );
      refalrts::push_stack( vm, context[81] );
      refalrts::push_stack( vm, context[78] );
      refalrts::link_brackets( context[36], context[74] );
      refalrts::link_brackets( context[55], context[56] );
      refalrts::link_brackets( context[59], context[60] );
      refalrts::link_brackets( context[70], context[71] );
      refalrts::link_brackets( context[51], context[52] );
      refalrts::link_brackets( context[66], context[69] );
      refalrts::link_brackets( context[35], context[61] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[74], context[82] );
      res = refalrts::splice_evar( res, context[72], context[73] );
      res = refalrts::splice_evar( res, context[59], context[36] );
      res = refalrts::splice_elem( res, context[71] );
      res = refalrts::splice_evar( res, context[47], context[48] );
      res = refalrts::splice_elem( res, context[70] );
      res = refalrts::splice_evar( res, context[51], context[52] );
      res = refalrts::splice_evar( res, context[64], context[69] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[61], context[63] );
      res = refalrts::splice_evar( res, context[45], context[46] );
      res = refalrts::splice_evar( res, context[23], context[35] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@6/4 t.SrcPos/5 (/9 e.FuncName/37 )/10 (/13 e.ContextVars/39 )/14 (/17 e.Prefix/41 )/18 t.Acc/19 (/23 e.Scanned/43 )/24 t.Next/35 e.Tail/45 >/1
    context[37] = context[25];
    context[38] = context[26];
    context[39] = context[27];
    context[40] = context[28];
    context[41] = context[29];
    context[42] = context[30];
    context[43] = context[31];
    context[44] = context[32];
    context[45] = context[33];
    context[46] = context[34];
    // closed e.FuncName as range 37
    // closed e.ContextVars as range 39
    // closed e.Prefix as range 41
    // closed e.Scanned as range 43
    // closed e.Tail as range 45
    //DEBUG: t.SrcPos: 5
    //DEBUG: t.Acc: 19
    //DEBUG: t.Next: 35
    //DEBUG: e.FuncName: 37
    //DEBUG: e.ContextVars: 39
    //DEBUG: e.Prefix: 41
    //DEBUG: e.Scanned: 43
    //DEBUG: e.Tail: 45

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@6/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/37 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars/39 AsIs: )/14 AsIs: (/17 AsIs: e.Prefix/41 AsIs: )/18 } Tile{ AsIs: (/23 AsIs: e.Scanned/43 AsIs: )/24 } (/47 Tile{ AsIs: e.Tail/45 } )/48 </49 & CheckSentences\1*1/50 t.SrcPos/5/51 (/53 e.FuncName/37/54 )/56 (/57 e.ContextVars/39/58 )/60 (/61 e.Prefix/41/62 )/64 Tile{ AsIs: t.Acc/19 } Tile{ AsIs: t.Next/35 } >/65 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[47]);
    refalrts::alloc_close_bracket(vm, context[48]);
    refalrts::alloc_open_call(vm, context[49]);
    refalrts::alloc_name(vm, context[50], functions[efunc_gen_CheckSentences_L1D1]);
    refalrts::copy_evar(vm, context[51], context[52], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[53]);
    refalrts::copy_evar(vm, context[54], context[55], context[37], context[38]);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::copy_evar(vm, context[58], context[59], context[39], context[40]);
    refalrts::alloc_close_bracket(vm, context[60]);
    refalrts::alloc_open_bracket(vm, context[61]);
    refalrts::copy_evar(vm, context[62], context[63], context[41], context[42]);
    refalrts::alloc_close_bracket(vm, context[64]);
    refalrts::alloc_close_call(vm, context[65]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z6]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[65] );
    refalrts::push_stack( vm, context[49] );
    refalrts::link_brackets( context[61], context[64] );
    refalrts::link_brackets( context[57], context[60] );
    refalrts::link_brackets( context[53], context[56] );
    refalrts::link_brackets( context[47], context[48] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[65] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[48], context[64] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_elem( res, context[47] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@6/4 t.SrcPos/5 (/9 e.FuncName/25 )/10 (/13 e.ContextVars/27 )/14 (/17 e.Prefix/29 )/18 t.Acc/19 (/23 e.Scanned/31 )/24 >/1
    context[25] = context[7];
    context[26] = context[8];
    context[27] = context[11];
    context[28] = context[12];
    context[29] = context[15];
    context[30] = context[16];
    context[31] = context[21];
    context[32] = context[22];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.FuncName as range 25
    // closed e.ContextVars as range 27
    // closed e.Prefix as range 29
    // closed e.Scanned as range 31
    //DEBUG: t.SrcPos: 5
    //DEBUG: t.Acc: 19
    //DEBUG: e.FuncName: 25
    //DEBUG: e.ContextVars: 27
    //DEBUG: e.Prefix: 29
    //DEBUG: e.Scanned: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@6/4 t.SrcPos/5 (/9 e.FuncName/25 )/10 (/13 e.ContextVars/27 )/14 (/17 e.Prefix/29 )/18 {REMOVED TILE} (/23 {REMOVED TILE} )/24 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/19 } Tile{ AsIs: e.Scanned/31 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@6/4 t.SrcPos/5 (/9 e.FuncName/7 )/10 (/13 e.ContextVars/11 )/14 (/17 e.Prefix/15 )/18 t.acc/19 (/23 e.scanned/21 )/24 e.items/2 >/1
  // closed e.FuncName as range 7
  // closed e.ContextVars as range 11
  // closed e.Prefix as range 15
  // closed e.scanned as range 21
  // closed e.items as range 2
  //DEBUG: t.SrcPos: 5
  //DEBUG: t.acc: 19
  //DEBUG: e.FuncName: 7
  //DEBUG: e.ContextVars: 11
  //DEBUG: e.Prefix: 15
  //DEBUG: e.scanned: 21
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </25 & DoMapAccum@0/26 Tile{ HalfReuse: [*]/0 Reuse: & CheckSentences\1@0/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/7 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars/11 AsIs: )/14 AsIs: (/17 AsIs: e.Prefix/15 AsIs: )/18 } {*}/27 Tile{ AsIs: t.acc/19 AsIs: (/23 AsIs: e.scanned/21 AsIs: )/24 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[27], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[19];
  res = refalrts::splice_elem( res, context[27] );
  res = refalrts::splice_evar( res, context[0], context[18] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  refalrts::wrap_closure( context[27] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z6("DoMapAccum@6", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z6);


static refalrts::FnResult func_gen_Map_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & Map@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@4/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@4/4 (/7 t./22 (/15 (/19 t.3/24 (/28 # Condition/30 e.9/26 )/29 e.7/17 )/20 s.Num/21 )/16 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = 0;
      context[14] = 0;
      context[15] = refalrts::brackets_right( context[13], context[14], context[11], context[12] );
      if( ! context[15] )
        continue;
      refalrts::bracket_pointers(context[15], context[16]);
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[13], context[14] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      // closed e.Tail as range 9
      if( ! refalrts::svar_left( context[21], context[13], context[14] ) )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      context[23] = refalrts::tvar_left( context[22], context[11], context[12] );
      if( ! context[23] )
        continue;
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      context[25] = refalrts::tvar_left( context[24], context[17], context[18] );
      if( ! context[25] )
        continue;
      context[26] = 0;
      context[27] = 0;
      context[28] = refalrts::brackets_left( context[26], context[27], context[17], context[18] );
      if( ! context[28] )
        continue;
      refalrts::bracket_pointers(context[28], context[29]);
      context[30] = refalrts::ident_left( identifiers[ident_Condition], context[26], context[27] );
      if( ! context[30] )
        continue;
      // closed e.9 as range 26
      // closed e.7 as range 17
      //DEBUG: e.Tail: 9
      //DEBUG: s.Num: 21
      //DEBUG: t.: 22
      //DEBUG: t.3: 24
      //DEBUG: e.9: 26
      //DEBUG: e.7: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Map@4/4 (/7 t./22 (/15 (/19 t.3/24 (/28 # Condition/30 e.9/26 )/29 e.7/17 )/20 s.Num/21 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </16 HalfReuse: & Map@4/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[16]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[16];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@4/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & FilterConditions\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@4/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z4]);
    refalrts::update_name(context[4], functions[efunc_gen_FilterConditions_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@4/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@4/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@4/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & FilterConditions\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FilterConditions_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z4("Map@4", COOKIE1_, COOKIE2_, func_gen_Map_Z4);


static refalrts::FnResult func_gen_DoMapAccum_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 86 elems
  refalrts::Iter context[86];
  refalrts::zeros( context, 86 );
  // </0 & DoMapAccum@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@7/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 t.new5/19 (/23 e.new6/21 )/24 e.new7/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  context[20] = refalrts::tvar_left( context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new6 as range 21
  // closed e.new7 as range 2
  do {
    // </0 & DoMapAccum@7/4 t.new8/5 (/9 e.new12/25 )/10 (/13 e.new13/27 )/14 (/17 e.new14/29 )/18 t.new9/19 (/23 e.new15/31 )/24 t.new10/35 e.new11/33 >/1
    context[25] = context[7];
    context[26] = context[8];
    context[27] = context[11];
    context[28] = context[12];
    context[29] = context[15];
    context[30] = context[16];
    context[31] = context[21];
    context[32] = context[22];
    context[33] = context[2];
    context[34] = context[3];
    // closed e.new12 as range 25
    // closed e.new13 as range 27
    // closed e.new14 as range 29
    // closed e.new15 as range 31
    context[36] = refalrts::tvar_left( context[35], context[33], context[34] );
    if( ! context[36] )
      continue;
    // closed e.new11 as range 33
    do {
      // </0 & DoMapAccum@7/4 t.new16/5 (/9 e.new20/37 )/10 (/13 e.new21/39 )/14 (/17 e.new22/41 )/18 s.new17/19 (/23 e.new23/43 )/24 t.new18/35 e.new19/45 >/1
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[29];
      context[42] = context[30];
      context[43] = context[31];
      context[44] = context[32];
      context[45] = context[33];
      context[46] = context[34];
      if( ! refalrts::svar_term( context[19], context[19] ) )
        continue;
      // closed e.new20 as range 37
      // closed e.new21 as range 39
      // closed e.new22 as range 41
      // closed e.new23 as range 43
      // closed e.new19 as range 45
      do {
        // </0 & DoMapAccum@7/4 t.SrcPos/5 (/9 e.FuncName/47 )/10 (/13 e.Prefix/49 )/14 (/17 e.ContextVars/51 )/18 s.Num/19 (/23 e.Scanned/53 )/24 (/35 # Sentences/59 e.0/57 )/36 e.Tail/55 >/1
        context[47] = context[37];
        context[48] = context[38];
        context[49] = context[39];
        context[50] = context[40];
        context[51] = context[41];
        context[52] = context[42];
        context[53] = context[43];
        context[54] = context[44];
        context[55] = context[45];
        context[56] = context[46];
        context[57] = 0;
        context[58] = 0;
        if( ! refalrts::brackets_term( context[57], context[58], context[35] ) )
          continue;
        context[59] = refalrts::ident_left( identifiers[ident_Sentences], context[57], context[58] );
        if( ! context[59] )
          continue;
        // closed e.FuncName as range 47
        // closed e.Prefix as range 49
        // closed e.ContextVars as range 51
        // closed e.Scanned as range 53
        // closed e.0 as range 57
        // closed e.Tail as range 55
        //DEBUG: t.SrcPos: 5
        //DEBUG: s.Num: 19
        //DEBUG: e.FuncName: 47
        //DEBUG: e.Prefix: 49
        //DEBUG: e.ContextVars: 51
        //DEBUG: e.Scanned: 53
        //DEBUG: e.0: 57
        //DEBUG: e.Tail: 55

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@7/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/47 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix/49 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars/51 AsIs: )/18 } Tile{ AsIs: (/23 AsIs: e.Scanned/53 AsIs: )/24 AsIs: (/35 } Tile{ AsIs: e.Tail/55 } )/60 </61 & Add/62 1/63 Tile{ AsIs: s.Num/19 } >/64 </65 & CheckSentences@1/66 t.SrcPos/5/67 (/69 e.FuncName/47/70 )/72 (/73 e.Prefix/49/74 )/76 (/77 </78 & Symb/79 s.Num/19/80 >/81 )/82 (/83 e.ContextVars/51/84 Tile{ HalfReuse: )/59 AsIs: e.0/57 HalfReuse: >/36 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[60]);
        refalrts::alloc_open_call(vm, context[61]);
        refalrts::alloc_name(vm, context[62], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[63], 1UL);
        refalrts::alloc_close_call(vm, context[64]);
        refalrts::alloc_open_call(vm, context[65]);
        refalrts::alloc_name(vm, context[66], functions[efunc_gen_CheckSentences_Z1]);
        refalrts::copy_evar(vm, context[67], context[68], context[5], context[6]);
        refalrts::alloc_open_bracket(vm, context[69]);
        refalrts::copy_evar(vm, context[70], context[71], context[47], context[48]);
        refalrts::alloc_close_bracket(vm, context[72]);
        refalrts::alloc_open_bracket(vm, context[73]);
        refalrts::copy_evar(vm, context[74], context[75], context[49], context[50]);
        refalrts::alloc_close_bracket(vm, context[76]);
        refalrts::alloc_open_bracket(vm, context[77]);
        refalrts::alloc_open_call(vm, context[78]);
        refalrts::alloc_name(vm, context[79], functions[efunc_Symb]);
        refalrts::copy_stvar(vm, context[80], context[19]);
        refalrts::alloc_close_call(vm, context[81]);
        refalrts::alloc_close_bracket(vm, context[82]);
        refalrts::alloc_open_bracket(vm, context[83]);
        refalrts::copy_evar(vm, context[84], context[85], context[51], context[52]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z7]);
        refalrts::reinit_close_bracket(context[59]);
        refalrts::reinit_close_call(context[36]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[65] );
        refalrts::link_brackets( context[83], context[59] );
        refalrts::link_brackets( context[77], context[82] );
        refalrts::push_stack( vm, context[81] );
        refalrts::push_stack( vm, context[78] );
        refalrts::link_brackets( context[73], context[76] );
        refalrts::link_brackets( context[69], context[72] );
        refalrts::push_stack( vm, context[64] );
        refalrts::push_stack( vm, context[61] );
        refalrts::link_brackets( context[35], context[60] );
        refalrts::link_brackets( context[23], context[24] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[59], context[36] );
        res = refalrts::splice_evar( res, context[84], context[85] );
        res = refalrts::splice_evar( res, context[64], context[83] );
        res = refalrts::splice_elem( res, context[19] );
        res = refalrts::splice_evar( res, context[60], context[63] );
        res = refalrts::splice_evar( res, context[55], context[56] );
        res = refalrts::splice_evar( res, context[23], context[35] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@7/4 t.SrcPos/5 (/9 e.FuncName/47 )/10 (/13 e.Prefix/49 )/14 (/17 e.ContextVars/51 )/18 s.Num/19 (/23 e.Scanned/53 )/24 t.Next/35 e.Tail/55 >/1
      context[47] = context[37];
      context[48] = context[38];
      context[49] = context[39];
      context[50] = context[40];
      context[51] = context[41];
      context[52] = context[42];
      context[53] = context[43];
      context[54] = context[44];
      context[55] = context[45];
      context[56] = context[46];
      // closed e.FuncName as range 47
      // closed e.Prefix as range 49
      // closed e.ContextVars as range 51
      // closed e.Scanned as range 53
      // closed e.Tail as range 55
      //DEBUG: t.SrcPos: 5
      //DEBUG: t.Next: 35
      //DEBUG: s.Num: 19
      //DEBUG: e.FuncName: 47
      //DEBUG: e.Prefix: 49
      //DEBUG: e.ContextVars: 51
      //DEBUG: e.Scanned: 53
      //DEBUG: e.Tail: 55

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.Next/35 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@7/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/47 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix/49 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars/51 AsIs: )/18 AsIs: s.Num/19 AsIs: (/23 AsIs: e.Scanned/53 AsIs: )/24 } Tile{ AsIs: e.Tail/55 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[55], context[56] );
      refalrts::splice_to_freelist_open( vm, context[24], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@7/4 t.SrcPos/5 (/9 e.FuncName/37 )/10 (/13 e.Prefix/39 )/14 (/17 e.ContextVars/41 )/18 t.Acc/19 (/23 e.Scanned/43 )/24 t.Next/35 e.Tail/45 >/1
    context[37] = context[25];
    context[38] = context[26];
    context[39] = context[27];
    context[40] = context[28];
    context[41] = context[29];
    context[42] = context[30];
    context[43] = context[31];
    context[44] = context[32];
    context[45] = context[33];
    context[46] = context[34];
    // closed e.FuncName as range 37
    // closed e.Prefix as range 39
    // closed e.ContextVars as range 41
    // closed e.Scanned as range 43
    // closed e.Tail as range 45
    //DEBUG: t.SrcPos: 5
    //DEBUG: t.Acc: 19
    //DEBUG: t.Next: 35
    //DEBUG: e.FuncName: 37
    //DEBUG: e.Prefix: 39
    //DEBUG: e.ContextVars: 41
    //DEBUG: e.Scanned: 43
    //DEBUG: e.Tail: 45

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@7/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/37 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix/39 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars/41 AsIs: )/18 } Tile{ AsIs: (/23 AsIs: e.Scanned/43 AsIs: )/24 } (/47 Tile{ AsIs: e.Tail/45 } )/48 </49 & CheckBlocks\1*2/50 t.SrcPos/5/51 (/53 e.FuncName/37/54 )/56 (/57 e.Prefix/39/58 )/60 (/61 e.ContextVars/41/62 )/64 Tile{ AsIs: t.Acc/19 } Tile{ AsIs: t.Next/35 } >/65 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[47]);
    refalrts::alloc_close_bracket(vm, context[48]);
    refalrts::alloc_open_call(vm, context[49]);
    refalrts::alloc_name(vm, context[50], functions[efunc_gen_CheckBlocks_L1D2]);
    refalrts::copy_evar(vm, context[51], context[52], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[53]);
    refalrts::copy_evar(vm, context[54], context[55], context[37], context[38]);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::copy_evar(vm, context[58], context[59], context[39], context[40]);
    refalrts::alloc_close_bracket(vm, context[60]);
    refalrts::alloc_open_bracket(vm, context[61]);
    refalrts::copy_evar(vm, context[62], context[63], context[41], context[42]);
    refalrts::alloc_close_bracket(vm, context[64]);
    refalrts::alloc_close_call(vm, context[65]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[65] );
    refalrts::push_stack( vm, context[49] );
    refalrts::link_brackets( context[61], context[64] );
    refalrts::link_brackets( context[57], context[60] );
    refalrts::link_brackets( context[53], context[56] );
    refalrts::link_brackets( context[47], context[48] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[65] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[48], context[64] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_elem( res, context[47] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@7/4 t.SrcPos/5 (/9 e.FuncName/25 )/10 (/13 e.Prefix/27 )/14 (/17 e.ContextVars/29 )/18 t.Acc/19 (/23 e.Scanned/31 )/24 >/1
    context[25] = context[7];
    context[26] = context[8];
    context[27] = context[11];
    context[28] = context[12];
    context[29] = context[15];
    context[30] = context[16];
    context[31] = context[21];
    context[32] = context[22];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.FuncName as range 25
    // closed e.Prefix as range 27
    // closed e.ContextVars as range 29
    // closed e.Scanned as range 31
    //DEBUG: t.SrcPos: 5
    //DEBUG: t.Acc: 19
    //DEBUG: e.FuncName: 25
    //DEBUG: e.Prefix: 27
    //DEBUG: e.ContextVars: 29
    //DEBUG: e.Scanned: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@7/4 t.SrcPos/5 (/9 e.FuncName/25 )/10 (/13 e.Prefix/27 )/14 (/17 e.ContextVars/29 )/18 {REMOVED TILE} (/23 {REMOVED TILE} )/24 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/19 } Tile{ AsIs: e.Scanned/31 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@7/4 t.SrcPos/5 (/9 e.FuncName/7 )/10 (/13 e.Prefix/11 )/14 (/17 e.ContextVars/15 )/18 t.acc/19 (/23 e.scanned/21 )/24 e.items/2 >/1
  // closed e.FuncName as range 7
  // closed e.Prefix as range 11
  // closed e.ContextVars as range 15
  // closed e.scanned as range 21
  // closed e.items as range 2
  //DEBUG: t.SrcPos: 5
  //DEBUG: t.acc: 19
  //DEBUG: e.FuncName: 7
  //DEBUG: e.Prefix: 11
  //DEBUG: e.ContextVars: 15
  //DEBUG: e.scanned: 21
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </25 & DoMapAccum@0/26 Tile{ HalfReuse: [*]/0 Reuse: & CheckBlocks\1@0/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix/11 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars/15 AsIs: )/18 } {*}/27 Tile{ AsIs: t.acc/19 AsIs: (/23 AsIs: e.scanned/21 AsIs: )/24 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[27], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckBlocks_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[19];
  res = refalrts::splice_elem( res, context[27] );
  res = refalrts::splice_evar( res, context[0], context[18] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  refalrts::wrap_closure( context[27] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z7("DoMapAccum@7", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z7);


static refalrts::FnResult func_gen_CheckSentences_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & CheckSentences@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences@1/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 e.new6/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 2
  do {
    // </0 & CheckSentences@1/4 t.SrcPos0/5 (/9 e.FuncName0/23 )/10 (/13 e.Prefix0/25 )/14 (/17 e.Call/27 )/18 (/21 e.ContextVars0/29 )/22 e.Sentences0/31 >/1
    context[23] = context[7];
    context[24] = context[8];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.FuncName0 as range 23
    // closed e.Prefix0 as range 25
    // closed e.Call as range 27
    // closed e.ContextVars0 as range 29
    // closed e.Sentences0 as range 31
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 23
    //DEBUG: e.Prefix0: 25
    //DEBUG: e.Call: 27
    //DEBUG: e.ContextVars0: 29
    //DEBUG: e.Sentences0: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=1@2/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/23 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/25 AsIs: )/14 AsIs: (/17 AsIs: e.Call/27 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars0/29 AsIs: )/22 } (/33 e.Sentences0/31/34 )/36 </37 & Enumerate=1/38 </39 & DoMapAccum@2/40 1/41 (/42 )/43 Tile{ AsIs: e.Sentences0/31 } >/44 >/45 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::copy_evar(vm, context[34], context[35], context[31], context[32]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::alloc_open_call(vm, context[37]);
    refalrts::alloc_name(vm, context[38], functions[efunc_gen_Enumerate_A1]);
    refalrts::alloc_open_call(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_gen_DoMapAccum_Z2]);
    refalrts::alloc_number(vm, context[41], 1UL);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::alloc_close_bracket(vm, context[43]);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A1Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[39] );
    refalrts::link_brackets( context[42], context[43] );
    refalrts::link_brackets( context[33], context[36] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[44], context[45] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[33], context[43] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences@1/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix0/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars0/19 )/22 e.Sentences0/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix0 as range 11
  // closed e.Call as range 15
  // closed e.ContextVars0 as range 19
  // closed e.Sentences0 as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars0: 19
  //DEBUG: e.Sentences0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/11 HalfReuse: ':'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars0/19 AsIs: )/22 } Tile{ AsIs: (/17 } Tile{ AsIs: e.Sentences0/2 } )/23 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_Z0]);
  refalrts::reinit_char(context[14], ':');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[23] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[13], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[18], context[22] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_Z1("CheckSentences@1", COOKIE1_, COOKIE2_, func_gen_CheckSentences_Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 98 elems
  refalrts::Iter context[98];
  refalrts::zeros( context, 98 );
  // </0 & DoMapAccum@8/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@8/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 t.new5/19 (/23 e.new6/21 )/24 e.new7/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  context[20] = refalrts::tvar_left( context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new6 as range 21
  // closed e.new7 as range 2
  do {
    // </0 & DoMapAccum@8/4 t.new8/5 (/9 e.new12/25 )/10 (/13 e.new13/27 )/14 (/17 e.new14/29 )/18 t.new9/19 (/23 e.new15/31 )/24 t.new10/35 e.new11/33 >/1
    context[25] = context[7];
    context[26] = context[8];
    context[27] = context[11];
    context[28] = context[12];
    context[29] = context[15];
    context[30] = context[16];
    context[31] = context[21];
    context[32] = context[22];
    context[33] = context[2];
    context[34] = context[3];
    // closed e.new12 as range 25
    // closed e.new13 as range 27
    // closed e.new14 as range 29
    // closed e.new15 as range 31
    context[36] = refalrts::tvar_left( context[35], context[33], context[34] );
    if( ! context[36] )
      continue;
    // closed e.new11 as range 33
    do {
      // </0 & DoMapAccum@8/4 t.new16/5 (/9 e.new20/37 )/10 (/13 e.new21/39 )/14 (/17 e.new22/41 )/18 s.new17/19 (/23 e.new23/43 )/24 t.new18/35 e.new19/45 >/1
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[29];
      context[42] = context[30];
      context[43] = context[31];
      context[44] = context[32];
      context[45] = context[33];
      context[46] = context[34];
      if( ! refalrts::svar_term( context[19], context[19] ) )
        continue;
      // closed e.new20 as range 37
      // closed e.new21 as range 39
      // closed e.new22 as range 41
      // closed e.new23 as range 43
      // closed e.new19 as range 45
      do {
        // </0 & DoMapAccum@8/4 t.new24/5 (/9 e.new29/47 )/10 (/13 e.new30/49 )/14 (/17 e.new31/51 )/18 s.new25/19 (/23 e.new32/53 )/24 (/35 s.new26/59 e.new27/57 )/36 e.new28/55 >/1
        context[47] = context[37];
        context[48] = context[38];
        context[49] = context[39];
        context[50] = context[40];
        context[51] = context[41];
        context[52] = context[42];
        context[53] = context[43];
        context[54] = context[44];
        context[55] = context[45];
        context[56] = context[46];
        context[57] = 0;
        context[58] = 0;
        if( ! refalrts::brackets_term( context[57], context[58], context[35] ) )
          continue;
        // closed e.new29 as range 47
        // closed e.new30 as range 49
        // closed e.new31 as range 51
        // closed e.new32 as range 53
        // closed e.new28 as range 55
        if( ! refalrts::svar_left( context[59], context[57], context[58] ) )
          continue;
        // closed e.new27 as range 57
        do {
          // </0 & DoMapAccum@8/4 t.SrcPos/5 (/9 e.FuncName/60 )/10 (/13 e.Prefix$a/62 )/14 (/17 e.ContextVars$a/64 )/18 s.Num/19 (/23 e.Scanned/66 )/24 (/35 # Brackets/59 e.0/68 )/36 e.Tail/70 >/1
          context[60] = context[47];
          context[61] = context[48];
          context[62] = context[49];
          context[63] = context[50];
          context[64] = context[51];
          context[65] = context[52];
          context[66] = context[53];
          context[67] = context[54];
          context[68] = context[57];
          context[69] = context[58];
          context[70] = context[55];
          context[71] = context[56];
          if( ! refalrts::ident_term( identifiers[ident_Brackets], context[59] ) )
            continue;
          // closed e.FuncName as range 60
          // closed e.Prefix$a as range 62
          // closed e.ContextVars$a as range 64
          // closed e.Scanned as range 66
          // closed e.0 as range 68
          // closed e.Tail as range 70
          //DEBUG: t.SrcPos: 5
          //DEBUG: s.Num: 19
          //DEBUG: e.FuncName: 60
          //DEBUG: e.Prefix$a: 62
          //DEBUG: e.ContextVars$a: 64
          //DEBUG: e.Scanned: 66
          //DEBUG: e.0: 68
          //DEBUG: e.Tail: 70

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@8/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/60 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/62 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars$a/64 AsIs: )/18 } Tile{ AsIs: (/23 AsIs: e.Scanned/66 AsIs: )/24 AsIs: (/35 } Tile{ AsIs: e.Tail/70 } )/72 Tile{ AsIs: s.Num/19 } </73 & DelAccumulator/74 </75 & DoMapAccum@8/76 t.SrcPos/5/77 (/79 e.FuncName/60/80 )/82 (/83 e.Prefix$a/62/84 )/86 (/87 e.ContextVars$a/64/88 )/90 1/91 (/92 Tile{ HalfReuse: )/59 AsIs: e.0/68 HalfReuse: >/36 } >/93 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[72]);
          refalrts::alloc_open_call(vm, context[73]);
          refalrts::alloc_name(vm, context[74], functions[efunc_DelAccumulator]);
          refalrts::alloc_open_call(vm, context[75]);
          refalrts::alloc_name(vm, context[76], functions[efunc_gen_DoMapAccum_Z8]);
          refalrts::copy_evar(vm, context[77], context[78], context[5], context[6]);
          refalrts::alloc_open_bracket(vm, context[79]);
          refalrts::copy_evar(vm, context[80], context[81], context[60], context[61]);
          refalrts::alloc_close_bracket(vm, context[82]);
          refalrts::alloc_open_bracket(vm, context[83]);
          refalrts::copy_evar(vm, context[84], context[85], context[62], context[63]);
          refalrts::alloc_close_bracket(vm, context[86]);
          refalrts::alloc_open_bracket(vm, context[87]);
          refalrts::copy_evar(vm, context[88], context[89], context[64], context[65]);
          refalrts::alloc_close_bracket(vm, context[90]);
          refalrts::alloc_number(vm, context[91], 1UL);
          refalrts::alloc_open_bracket(vm, context[92]);
          refalrts::alloc_close_call(vm, context[93]);
          refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z8]);
          refalrts::reinit_close_bracket(context[59]);
          refalrts::reinit_close_call(context[36]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[93] );
          refalrts::push_stack( vm, context[73] );
          refalrts::push_stack( vm, context[36] );
          refalrts::push_stack( vm, context[75] );
          refalrts::link_brackets( context[92], context[59] );
          refalrts::link_brackets( context[87], context[90] );
          refalrts::link_brackets( context[83], context[86] );
          refalrts::link_brackets( context[79], context[82] );
          refalrts::link_brackets( context[35], context[72] );
          refalrts::link_brackets( context[23], context[24] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[93] );
          res = refalrts::splice_evar( res, context[59], context[36] );
          res = refalrts::splice_evar( res, context[73], context[92] );
          res = refalrts::splice_elem( res, context[19] );
          res = refalrts::splice_elem( res, context[72] );
          res = refalrts::splice_evar( res, context[70], context[71] );
          res = refalrts::splice_evar( res, context[23], context[35] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoMapAccum@8/4 t.SrcPos/5 (/9 e.FuncName/60 )/10 (/13 e.Prefix$a/62 )/14 (/17 e.ContextVars$a/64 )/18 s.Num/19 (/23 e.Scanned/66 )/24 (/35 # ADT-Brackets/59 t.0/72 (/76 e.3/74 )/77 e.2/68 )/36 e.Tail/70 >/1
          context[60] = context[47];
          context[61] = context[48];
          context[62] = context[49];
          context[63] = context[50];
          context[64] = context[51];
          context[65] = context[52];
          context[66] = context[53];
          context[67] = context[54];
          context[68] = context[57];
          context[69] = context[58];
          context[70] = context[55];
          context[71] = context[56];
          if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[59] ) )
            continue;
          // closed e.FuncName as range 60
          // closed e.Prefix$a as range 62
          // closed e.ContextVars$a as range 64
          // closed e.Scanned as range 66
          // closed e.Tail as range 70
          context[73] = refalrts::tvar_left( context[72], context[68], context[69] );
          if( ! context[73] )
            continue;
          context[74] = 0;
          context[75] = 0;
          context[76] = refalrts::brackets_left( context[74], context[75], context[68], context[69] );
          if( ! context[76] )
            continue;
          refalrts::bracket_pointers(context[76], context[77]);
          // closed e.3 as range 74
          // closed e.2 as range 68
          //DEBUG: t.SrcPos: 5
          //DEBUG: s.Num: 19
          //DEBUG: e.FuncName: 60
          //DEBUG: e.Prefix$a: 62
          //DEBUG: e.ContextVars$a: 64
          //DEBUG: e.Scanned: 66
          //DEBUG: e.Tail: 70
          //DEBUG: t.0: 72
          //DEBUG: e.3: 74
          //DEBUG: e.2: 68

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.0/72 {REMOVED TILE} e.3/74 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@8/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/60 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/62 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars$a/64 AsIs: )/18 } Tile{ AsIs: (/23 AsIs: e.Scanned/66 AsIs: )/24 AsIs: (/35 } Tile{ AsIs: e.Tail/70 } )/78 Tile{ AsIs: s.Num/19 } </79 Tile{ HalfReuse: & DelAccumulator/59 } </80 & DoMapAccum@8/81 t.SrcPos/5/82 Tile{ AsIs: (/76 } e.FuncName/60/84 )/86 (/87 e.Prefix$a/62/88 )/90 (/91 e.ContextVars$a/64/92 )/94 1/95 (/96 Tile{ AsIs: )/77 AsIs: e.2/68 HalfReuse: >/36 } >/97 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[78]);
          refalrts::alloc_open_call(vm, context[79]);
          refalrts::alloc_open_call(vm, context[80]);
          refalrts::alloc_name(vm, context[81], functions[efunc_gen_DoMapAccum_Z8]);
          refalrts::copy_evar(vm, context[82], context[83], context[5], context[6]);
          refalrts::copy_evar(vm, context[84], context[85], context[60], context[61]);
          refalrts::alloc_close_bracket(vm, context[86]);
          refalrts::alloc_open_bracket(vm, context[87]);
          refalrts::copy_evar(vm, context[88], context[89], context[62], context[63]);
          refalrts::alloc_close_bracket(vm, context[90]);
          refalrts::alloc_open_bracket(vm, context[91]);
          refalrts::copy_evar(vm, context[92], context[93], context[64], context[65]);
          refalrts::alloc_close_bracket(vm, context[94]);
          refalrts::alloc_number(vm, context[95], 1UL);
          refalrts::alloc_open_bracket(vm, context[96]);
          refalrts::alloc_close_call(vm, context[97]);
          refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z8]);
          refalrts::reinit_name(context[59], functions[efunc_DelAccumulator]);
          refalrts::reinit_close_call(context[36]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[97] );
          refalrts::push_stack( vm, context[79] );
          refalrts::push_stack( vm, context[36] );
          refalrts::push_stack( vm, context[80] );
          refalrts::link_brackets( context[96], context[77] );
          refalrts::link_brackets( context[91], context[94] );
          refalrts::link_brackets( context[87], context[90] );
          refalrts::link_brackets( context[76], context[86] );
          refalrts::link_brackets( context[35], context[78] );
          refalrts::link_brackets( context[23], context[24] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[97] );
          res = refalrts::splice_evar( res, context[77], context[36] );
          res = refalrts::splice_evar( res, context[86], context[96] );
          res = refalrts::splice_evar( res, context[84], context[85] );
          res = refalrts::splice_elem( res, context[76] );
          res = refalrts::splice_evar( res, context[80], context[83] );
          res = refalrts::splice_elem( res, context[59] );
          res = refalrts::splice_elem( res, context[79] );
          res = refalrts::splice_elem( res, context[19] );
          res = refalrts::splice_elem( res, context[78] );
          res = refalrts::splice_evar( res, context[70], context[71] );
          res = refalrts::splice_evar( res, context[23], context[35] );
          refalrts::splice_to_freelist_open( vm, context[18], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoMapAccum@8/4 t.SrcPos/5 (/9 e.FuncName/60 )/10 (/13 e.Prefix$a/62 )/14 (/17 e.ContextVars$a/64 )/18 s.Num/19 (/23 e.Scanned/66 )/24 (/35 # CallBrackets/59 e.0/68 )/36 e.Tail/70 >/1
          context[60] = context[47];
          context[61] = context[48];
          context[62] = context[49];
          context[63] = context[50];
          context[64] = context[51];
          context[65] = context[52];
          context[66] = context[53];
          context[67] = context[54];
          context[68] = context[57];
          context[69] = context[58];
          context[70] = context[55];
          context[71] = context[56];
          if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[59] ) )
            continue;
          // closed e.FuncName as range 60
          // closed e.Prefix$a as range 62
          // closed e.ContextVars$a as range 64
          // closed e.Scanned as range 66
          // closed e.0 as range 68
          // closed e.Tail as range 70
          //DEBUG: t.SrcPos: 5
          //DEBUG: s.Num: 19
          //DEBUG: e.FuncName: 60
          //DEBUG: e.Prefix$a: 62
          //DEBUG: e.ContextVars$a: 64
          //DEBUG: e.Scanned: 66
          //DEBUG: e.0: 68
          //DEBUG: e.Tail: 70

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@8/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/60 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/62 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars$a/64 AsIs: )/18 } Tile{ AsIs: (/23 AsIs: e.Scanned/66 AsIs: )/24 AsIs: (/35 } Tile{ AsIs: e.Tail/70 } )/72 Tile{ AsIs: s.Num/19 } </73 & DelAccumulator/74 </75 & DoMapAccum@8/76 t.SrcPos/5/77 (/79 e.FuncName/60/80 )/82 (/83 e.Prefix$a/62/84 )/86 (/87 e.ContextVars$a/64/88 )/90 1/91 (/92 Tile{ HalfReuse: )/59 AsIs: e.0/68 HalfReuse: >/36 } >/93 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[72]);
          refalrts::alloc_open_call(vm, context[73]);
          refalrts::alloc_name(vm, context[74], functions[efunc_DelAccumulator]);
          refalrts::alloc_open_call(vm, context[75]);
          refalrts::alloc_name(vm, context[76], functions[efunc_gen_DoMapAccum_Z8]);
          refalrts::copy_evar(vm, context[77], context[78], context[5], context[6]);
          refalrts::alloc_open_bracket(vm, context[79]);
          refalrts::copy_evar(vm, context[80], context[81], context[60], context[61]);
          refalrts::alloc_close_bracket(vm, context[82]);
          refalrts::alloc_open_bracket(vm, context[83]);
          refalrts::copy_evar(vm, context[84], context[85], context[62], context[63]);
          refalrts::alloc_close_bracket(vm, context[86]);
          refalrts::alloc_open_bracket(vm, context[87]);
          refalrts::copy_evar(vm, context[88], context[89], context[64], context[65]);
          refalrts::alloc_close_bracket(vm, context[90]);
          refalrts::alloc_number(vm, context[91], 1UL);
          refalrts::alloc_open_bracket(vm, context[92]);
          refalrts::alloc_close_call(vm, context[93]);
          refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z8]);
          refalrts::reinit_close_bracket(context[59]);
          refalrts::reinit_close_call(context[36]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[93] );
          refalrts::push_stack( vm, context[73] );
          refalrts::push_stack( vm, context[36] );
          refalrts::push_stack( vm, context[75] );
          refalrts::link_brackets( context[92], context[59] );
          refalrts::link_brackets( context[87], context[90] );
          refalrts::link_brackets( context[83], context[86] );
          refalrts::link_brackets( context[79], context[82] );
          refalrts::link_brackets( context[35], context[72] );
          refalrts::link_brackets( context[23], context[24] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[93] );
          res = refalrts::splice_evar( res, context[59], context[36] );
          res = refalrts::splice_evar( res, context[73], context[92] );
          res = refalrts::splice_elem( res, context[19] );
          res = refalrts::splice_elem( res, context[72] );
          res = refalrts::splice_evar( res, context[70], context[71] );
          res = refalrts::splice_evar( res, context[23], context[35] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@8/4 t.SrcPos/5 (/9 e.FuncName/60 )/10 (/13 e.Prefix$a/62 )/14 (/17 e.ContextVars$a/64 )/18 s.Num/19 (/23 e.Scanned/66 )/24 (/35 # Closure/59 # Sentences/72 e.1/68 )/36 e.Tail/70 >/1
        context[60] = context[47];
        context[61] = context[48];
        context[62] = context[49];
        context[63] = context[50];
        context[64] = context[51];
        context[65] = context[52];
        context[66] = context[53];
        context[67] = context[54];
        context[68] = context[57];
        context[69] = context[58];
        context[70] = context[55];
        context[71] = context[56];
        if( ! refalrts::ident_term( identifiers[ident_Closure], context[59] ) )
          continue;
        context[72] = refalrts::ident_left( identifiers[ident_Sentences], context[68], context[69] );
        if( ! context[72] )
          continue;
        // closed e.FuncName as range 60
        // closed e.Prefix$a as range 62
        // closed e.ContextVars$a as range 64
        // closed e.Scanned as range 66
        // closed e.1 as range 68
        // closed e.Tail as range 70
        //DEBUG: t.SrcPos: 5
        //DEBUG: s.Num: 19
        //DEBUG: e.FuncName: 60
        //DEBUG: e.Prefix$a: 62
        //DEBUG: e.ContextVars$a: 64
        //DEBUG: e.Scanned: 66
        //DEBUG: e.1: 68
        //DEBUG: e.Tail: 70

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@8/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/60 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/62 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars$a/64 AsIs: )/18 } Tile{ AsIs: (/23 AsIs: e.Scanned/66 AsIs: )/24 AsIs: (/35 } Tile{ AsIs: e.Tail/70 } )/73 </74 Tile{ HalfReuse: & Add/59 } 1/75 Tile{ AsIs: s.Num/19 } >/76 </77 & CheckSentences@2/78 t.SrcPos/5/79 (/81 e.FuncName/60/82 )/84 (/85 e.Prefix$a/62/86 )/88 (/89 </90 & Symb/91 s.Num/19/92 >/93 )/94 (/95 e.ContextVars$a/64/96 Tile{ HalfReuse: )/72 AsIs: e.1/68 HalfReuse: >/36 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[73]);
        refalrts::alloc_open_call(vm, context[74]);
        refalrts::alloc_number(vm, context[75], 1UL);
        refalrts::alloc_close_call(vm, context[76]);
        refalrts::alloc_open_call(vm, context[77]);
        refalrts::alloc_name(vm, context[78], functions[efunc_gen_CheckSentences_Z2]);
        refalrts::copy_evar(vm, context[79], context[80], context[5], context[6]);
        refalrts::alloc_open_bracket(vm, context[81]);
        refalrts::copy_evar(vm, context[82], context[83], context[60], context[61]);
        refalrts::alloc_close_bracket(vm, context[84]);
        refalrts::alloc_open_bracket(vm, context[85]);
        refalrts::copy_evar(vm, context[86], context[87], context[62], context[63]);
        refalrts::alloc_close_bracket(vm, context[88]);
        refalrts::alloc_open_bracket(vm, context[89]);
        refalrts::alloc_open_call(vm, context[90]);
        refalrts::alloc_name(vm, context[91], functions[efunc_Symb]);
        refalrts::copy_stvar(vm, context[92], context[19]);
        refalrts::alloc_close_call(vm, context[93]);
        refalrts::alloc_close_bracket(vm, context[94]);
        refalrts::alloc_open_bracket(vm, context[95]);
        refalrts::copy_evar(vm, context[96], context[97], context[64], context[65]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z8]);
        refalrts::reinit_name(context[59], functions[efunc_Add]);
        refalrts::reinit_close_bracket(context[72]);
        refalrts::reinit_close_call(context[36]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[36] );
        refalrts::push_stack( vm, context[77] );
        refalrts::link_brackets( context[95], context[72] );
        refalrts::link_brackets( context[89], context[94] );
        refalrts::push_stack( vm, context[93] );
        refalrts::push_stack( vm, context[90] );
        refalrts::link_brackets( context[85], context[88] );
        refalrts::link_brackets( context[81], context[84] );
        refalrts::push_stack( vm, context[76] );
        refalrts::push_stack( vm, context[74] );
        refalrts::link_brackets( context[35], context[73] );
        refalrts::link_brackets( context[23], context[24] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[72], context[36] );
        res = refalrts::splice_evar( res, context[96], context[97] );
        res = refalrts::splice_evar( res, context[76], context[95] );
        res = refalrts::splice_elem( res, context[19] );
        res = refalrts::splice_elem( res, context[75] );
        res = refalrts::splice_elem( res, context[59] );
        res = refalrts::splice_evar( res, context[73], context[74] );
        res = refalrts::splice_evar( res, context[70], context[71] );
        res = refalrts::splice_evar( res, context[23], context[35] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@8/4 t.SrcPos/5 (/9 e.FuncName/47 )/10 (/13 e.Prefix$a/49 )/14 (/17 e.ContextVars$a/51 )/18 s.Num/19 (/23 e.Scanned/53 )/24 t.Next/35 e.Tail/55 >/1
      context[47] = context[37];
      context[48] = context[38];
      context[49] = context[39];
      context[50] = context[40];
      context[51] = context[41];
      context[52] = context[42];
      context[53] = context[43];
      context[54] = context[44];
      context[55] = context[45];
      context[56] = context[46];
      // closed e.FuncName as range 47
      // closed e.Prefix$a as range 49
      // closed e.ContextVars$a as range 51
      // closed e.Scanned as range 53
      // closed e.Tail as range 55
      //DEBUG: t.SrcPos: 5
      //DEBUG: t.Next: 35
      //DEBUG: s.Num: 19
      //DEBUG: e.FuncName: 47
      //DEBUG: e.Prefix$a: 49
      //DEBUG: e.ContextVars$a: 51
      //DEBUG: e.Scanned: 53
      //DEBUG: e.Tail: 55

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.Next/35 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@8/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/47 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/49 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars$a/51 AsIs: )/18 AsIs: s.Num/19 AsIs: (/23 AsIs: e.Scanned/53 AsIs: )/24 } Tile{ AsIs: e.Tail/55 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[55], context[56] );
      refalrts::splice_to_freelist_open( vm, context[24], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@8/4 t.SrcPos/5 (/9 e.FuncName/37 )/10 (/13 e.Prefix$a/39 )/14 (/17 e.ContextVars$a/41 )/18 t.Acc/19 (/23 e.Scanned/43 )/24 t.Next/35 e.Tail/45 >/1
    context[37] = context[25];
    context[38] = context[26];
    context[39] = context[27];
    context[40] = context[28];
    context[41] = context[29];
    context[42] = context[30];
    context[43] = context[31];
    context[44] = context[32];
    context[45] = context[33];
    context[46] = context[34];
    // closed e.FuncName as range 37
    // closed e.Prefix$a as range 39
    // closed e.ContextVars$a as range 41
    // closed e.Scanned as range 43
    // closed e.Tail as range 45
    //DEBUG: t.SrcPos: 5
    //DEBUG: t.Acc: 19
    //DEBUG: t.Next: 35
    //DEBUG: e.FuncName: 37
    //DEBUG: e.Prefix$a: 39
    //DEBUG: e.ContextVars$a: 41
    //DEBUG: e.Scanned: 43
    //DEBUG: e.Tail: 45

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@8/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/37 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/39 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars$a/41 AsIs: )/18 } Tile{ AsIs: (/23 AsIs: e.Scanned/43 AsIs: )/24 } (/47 Tile{ AsIs: e.Tail/45 } )/48 </49 & CheckExpression\1*5/50 t.SrcPos/5/51 (/53 e.FuncName/37/54 )/56 (/57 e.Prefix$a/39/58 )/60 (/61 e.ContextVars$a/41/62 )/64 Tile{ AsIs: t.Acc/19 } Tile{ AsIs: t.Next/35 } >/65 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[47]);
    refalrts::alloc_close_bracket(vm, context[48]);
    refalrts::alloc_open_call(vm, context[49]);
    refalrts::alloc_name(vm, context[50], functions[efunc_gen_CheckExpression_L1D5]);
    refalrts::copy_evar(vm, context[51], context[52], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[53]);
    refalrts::copy_evar(vm, context[54], context[55], context[37], context[38]);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_open_bracket(vm, context[57]);
    refalrts::copy_evar(vm, context[58], context[59], context[39], context[40]);
    refalrts::alloc_close_bracket(vm, context[60]);
    refalrts::alloc_open_bracket(vm, context[61]);
    refalrts::copy_evar(vm, context[62], context[63], context[41], context[42]);
    refalrts::alloc_close_bracket(vm, context[64]);
    refalrts::alloc_close_call(vm, context[65]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[65] );
    refalrts::push_stack( vm, context[49] );
    refalrts::link_brackets( context[61], context[64] );
    refalrts::link_brackets( context[57], context[60] );
    refalrts::link_brackets( context[53], context[56] );
    refalrts::link_brackets( context[47], context[48] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[65] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[48], context[64] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_elem( res, context[47] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@8/4 t.SrcPos/5 (/9 e.FuncName/25 )/10 (/13 e.Prefix$a/27 )/14 (/17 e.ContextVars$a/29 )/18 t.Acc/19 (/23 e.Scanned/31 )/24 >/1
    context[25] = context[7];
    context[26] = context[8];
    context[27] = context[11];
    context[28] = context[12];
    context[29] = context[15];
    context[30] = context[16];
    context[31] = context[21];
    context[32] = context[22];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.FuncName as range 25
    // closed e.Prefix$a as range 27
    // closed e.ContextVars$a as range 29
    // closed e.Scanned as range 31
    //DEBUG: t.SrcPos: 5
    //DEBUG: t.Acc: 19
    //DEBUG: e.FuncName: 25
    //DEBUG: e.Prefix$a: 27
    //DEBUG: e.ContextVars$a: 29
    //DEBUG: e.Scanned: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@8/4 t.SrcPos/5 (/9 e.FuncName/25 )/10 (/13 e.Prefix$a/27 )/14 (/17 e.ContextVars$a/29 )/18 {REMOVED TILE} (/23 {REMOVED TILE} )/24 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/19 } Tile{ AsIs: e.Scanned/31 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@8/4 t.SrcPos/5 (/9 e.FuncName/7 )/10 (/13 e.Prefix$a/11 )/14 (/17 e.ContextVars$a/15 )/18 t.acc/19 (/23 e.scanned/21 )/24 e.items/2 >/1
  // closed e.FuncName as range 7
  // closed e.Prefix$a as range 11
  // closed e.ContextVars$a as range 15
  // closed e.scanned as range 21
  // closed e.items as range 2
  //DEBUG: t.SrcPos: 5
  //DEBUG: t.acc: 19
  //DEBUG: e.FuncName: 7
  //DEBUG: e.Prefix$a: 11
  //DEBUG: e.ContextVars$a: 15
  //DEBUG: e.scanned: 21
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </25 & DoMapAccum@0/26 Tile{ HalfReuse: [*]/0 Reuse: & CheckExpression\1@0/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/11 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars$a/15 AsIs: )/18 } {*}/27 Tile{ AsIs: t.acc/19 AsIs: (/23 AsIs: e.scanned/21 AsIs: )/24 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[27], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckExpression_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[19];
  res = refalrts::splice_elem( res, context[27] );
  res = refalrts::splice_evar( res, context[0], context[18] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  refalrts::wrap_closure( context[27] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z8("DoMapAccum@8", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z8);


static refalrts::FnResult func_gen_CheckSentences_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & CheckSentences@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences@2/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 e.new6/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 2
  do {
    // </0 & CheckSentences@2/4 t.SrcPos0/5 (/9 e.FuncName0/23 )/10 (/13 e.Prefix0/25 )/14 (/17 e.Call/27 )/18 (/21 e.ContextVars0/29 )/22 e.Sentences0/31 >/1
    context[23] = context[7];
    context[24] = context[8];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.FuncName0 as range 23
    // closed e.Prefix0 as range 25
    // closed e.Call as range 27
    // closed e.ContextVars0 as range 29
    // closed e.Sentences0 as range 31
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 23
    //DEBUG: e.Prefix0: 25
    //DEBUG: e.Call: 27
    //DEBUG: e.ContextVars0: 29
    //DEBUG: e.Sentences0: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=1@3/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/23 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/25 AsIs: )/14 AsIs: (/17 AsIs: e.Call/27 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars0/29 AsIs: )/22 } (/33 e.Sentences0/31/34 )/36 </37 & Enumerate=1/38 </39 & DoMapAccum@2/40 1/41 (/42 )/43 Tile{ AsIs: e.Sentences0/31 } >/44 >/45 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::copy_evar(vm, context[34], context[35], context[31], context[32]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::alloc_open_call(vm, context[37]);
    refalrts::alloc_name(vm, context[38], functions[efunc_gen_Enumerate_A1]);
    refalrts::alloc_open_call(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_gen_DoMapAccum_Z2]);
    refalrts::alloc_number(vm, context[41], 1UL);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::alloc_close_bracket(vm, context[43]);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A1Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[39] );
    refalrts::link_brackets( context[42], context[43] );
    refalrts::link_brackets( context[33], context[36] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[44], context[45] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[33], context[43] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences@2/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix0/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars0/19 )/22 e.Sentences0/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix0 as range 11
  // closed e.Call as range 15
  // closed e.ContextVars0 as range 19
  // closed e.Sentences0 as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars0: 19
  //DEBUG: e.Sentences0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/11 HalfReuse: '\\'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars0/19 AsIs: )/22 } Tile{ AsIs: (/17 } Tile{ AsIs: e.Sentences0/2 } )/23 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_Z0]);
  refalrts::reinit_char(context[14], '\\');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[23] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[13], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[18], context[22] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_Z2("CheckSentences@2", COOKIE1_, COOKIE2_, func_gen_CheckSentences_Z2);


static refalrts::FnResult func_gen_CreateScreeningWarning_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & CreateScreeningWarning@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CreateScreeningWarning@1/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 e.new5/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 2
  do {
    // </0 & CreateScreeningWarning@1/4 t.SrcPos0/5 (/9 e.FuncName/19 )/10 (/13 e.Prefix/21 )/14 (/17 e.Call/23 )/18 e.Call0/25 >/1
    context[19] = context[7];
    context[20] = context[8];
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[2];
    context[26] = context[3];
    // closed e.FuncName as range 19
    // closed e.Prefix as range 21
    // closed e.Call as range 23
    // closed e.Call0 as range 25
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName: 19
    //DEBUG: e.Prefix: 21
    //DEBUG: e.Call: 23
    //DEBUG: e.Call0: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Warning/4 } # screening/27 Tile{ AsIs: t.SrcPos0/5 } # Screening/28 Tile{ AsIs: (/9 AsIs: e.FuncName/19 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix/21 HalfReuse: '$'/14 } Tile{ AsIs: e.Call/23 } )/29 Tile{ AsIs: (/17 } e.Prefix/21/30 Tile{ HalfReuse: '$'/18 AsIs: e.Call0/25 HalfReuse: )/1 } )/32 Tile{ ]] }
    refalrts::alloc_ident(vm, context[27], identifiers[ident_screening]);
    refalrts::alloc_ident(vm, context[28], identifiers[ident_Screening]);
    refalrts::alloc_close_bracket(vm, context[29]);
    refalrts::copy_evar(vm, context[30], context[31], context[21], context[22]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Warning]);
    refalrts::reinit_char(context[14], '$');
    refalrts::reinit_char(context[18], '$');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[32] );
    refalrts::link_brackets( context[17], context[1] );
    refalrts::link_brackets( context[13], context[29] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[32] );
    res = refalrts::splice_evar( res, context[18], context[1] );
    res = refalrts::splice_evar( res, context[30], context[31] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[9], context[14] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_elem( res, context[27] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CreateScreeningWarning@1/4 t.SrcPos0/5 (/9 e.FuncName/7 )/10 (/13 e.Prefix/11 )/14 (/17 e.Call/15 )/18 e.Call0/2 >/1
  // closed e.FuncName as range 7
  // closed e.Prefix as range 11
  // closed e.Call as range 15
  // closed e.Call0 as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName: 7
  //DEBUG: e.Prefix: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.Call0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CreateScreeningWarning@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix/11 HalfReuse: '$'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/18 } Tile{ AsIs: (/17 } e.Prefix/11/19 '$'/21 Tile{ AsIs: e.Call0/2 } )/22 Tile{ AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[19], context[20], context[11], context[12]);
  refalrts::alloc_char(vm, context[21], '$');
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::update_name(context[4], functions[efunc_gen_CreateScreeningWarning_Z0]);
  refalrts::reinit_char(context[14], '$');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[22] );
  refalrts::link_brackets( context[13], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CreateScreeningWarning_Z1("CreateScreeningWarning@1", COOKIE1_, COOKIE2_, func_gen_CreateScreeningWarning_Z1);


static refalrts::FnResult func_gen_PatternLanguagesCheck_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & PatternLanguagesCheck@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PatternLanguagesCheck@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & PatternLanguagesCheck@1/4 (/7 e.ContextVars$b/13 )/8 (/11 e.Pattern-L0/15 )/12 e.Pattern-R0/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.ContextVars$b as range 13
    // closed e.Pattern-L0 as range 15
    // closed e.Pattern-R0 as range 17
    //DEBUG: e.ContextVars$b: 13
    //DEBUG: e.Pattern-L0: 15
    //DEBUG: e.Pattern-R0: 17
    //13: e.ContextVars$b
    //15: e.Pattern-L0
    //17: e.Pattern-R0
    //25: e.ContextVars$b
    //28: e.Pattern-R0

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_PatternLanguagesCheck_Z1S1C1]);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_FlattenPattern_Z1]);
    refalrts::alloc_open_bracket(vm, context[24]);
    refalrts::copy_evar(vm, context[25], context[26], context[13], context[14]);
    refalrts::alloc_close_bracket(vm, context[27]);
    refalrts::copy_evar(vm, context[28], context[29], context[17], context[18]);
    refalrts::alloc_close_call(vm, context[30]);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[19] );
    res = refalrts::splice_elem( res, context[20] );
    refalrts::push_stack( vm, context[30] );
    refalrts::push_stack( vm, context[22] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    refalrts::link_brackets( context[24], context[27] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_elem( res, context[19] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </19 & PatternLanguagesCheck@1$1?1/23 e.FlattenedPattern-R/21 >/20
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::call_left( context[21], context[22], context[19], context[20] );
      // closed e.FlattenedPattern-R as range 21
      //DEBUG: e.ContextVars$b: 13
      //DEBUG: e.Pattern-L0: 15
      //DEBUG: e.Pattern-R0: 17
      //DEBUG: e.FlattenedPattern-R: 21
      //13: e.ContextVars$b
      //15: e.Pattern-L0
      //17: e.Pattern-R0
      //21: e.FlattenedPattern-R
      //29: e.FlattenedPattern-R

      refalrts::reset_allocator(vm);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_name(vm, context[26], functions[efunc_gen_PatternLanguagesCheck_Z1S1C2]);
      refalrts::alloc_open_call(vm, context[27]);
      refalrts::alloc_name(vm, context[28], functions[efunc_IsPatternLinear]);
      refalrts::copy_evar(vm, context[29], context[30], context[21], context[22]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[24] );
      res = refalrts::splice_elem( res, context[25] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[27] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_elem( res, context[24] );
      refalrts::use( res );
      refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
      if (rec_res != refalrts::cSuccess)
        return rec_res;
      refalrts::this_is_generated_function(vm);
      do {
        // </24 & PatternLanguagesCheck@1$1?2/28 # True/29 >/25
        context[26] = 0;
        context[27] = 0;
        context[28] = refalrts::call_left( context[26], context[27], context[24], context[25] );
        context[29] = refalrts::ident_left( identifiers[ident_True], context[26], context[27] );
        if( ! context[29] )
          continue;
        if( ! refalrts::empty_seq( context[26], context[27] ) )
          continue;
        //DEBUG: e.ContextVars$b: 13
        //DEBUG: e.Pattern-L0: 15
        //DEBUG: e.Pattern-R0: 17
        //DEBUG: e.FlattenedPattern-R: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} </19 {REMOVED TILE} e.FlattenedPattern-R/21 >/20 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PatternLanguagesCheck$1=3@1/4 AsIs: (/7 AsIs: e.ContextVars$b/13 AsIs: )/8 AsIs: (/11 AsIs: e.Pattern-L0/15 AsIs: )/12 } Tile{ AsIs: </24 Reuse: & ReplaceADTBrackets@1/28 HalfReuse: (/29 } e.ContextVars$b/13/30 Tile{ HalfReuse: )/23 } Tile{ AsIs: e.Pattern-R0/17 } Tile{ AsIs: >/25 AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[30], context[31], context[13], context[14]);
        refalrts::update_name(context[4], functions[efunc_gen_PatternLanguagesCheck_S1A3Z1]);
        refalrts::update_name(context[28], functions[efunc_gen_ReplaceADTBrackets_Z1]);
        refalrts::reinit_open_bracket(context[29]);
        refalrts::reinit_close_bracket(context[23]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[29], context[23] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[25];
        res = refalrts::splice_evar( res, context[17], context[18] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_evar( res, context[30], context[31] );
        res = refalrts::splice_evar( res, context[24], context[29] );
        refalrts::splice_to_freelist_open( vm, context[12], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      refalrts::splice_to_freelist(vm, context[24], context[25]);
      continue;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[19], context[20]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PatternLanguagesCheck@1/4 (/7 e.ContextVars$b/13 )/8 (/11 e.Pattern-L0/15 )/12 e.Pattern-R0/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.ContextVars$b as range 13
    // closed e.Pattern-L0 as range 15
    // closed e.Pattern-R0 as range 17
    //DEBUG: e.ContextVars$b: 13
    //DEBUG: e.Pattern-L0: 15
    //DEBUG: e.Pattern-R0: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & PatternLanguagesCheck@1/4 (/7 e.ContextVars$b/13 )/8 (/11 e.Pattern-L0/15 )/12 e.Pattern-R0/17 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_False]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PatternLanguagesCheck@1/4 (/7 e.ContextVars$b/5 )/8 (/11 e.Pattern-L0/9 )/12 e.Pattern-R0/2 >/1
  // closed e.ContextVars$b as range 5
  // closed e.Pattern-L0 as range 9
  // closed e.Pattern-R0 as range 2
  //DEBUG: e.ContextVars$b: 5
  //DEBUG: e.Pattern-L0: 9
  //DEBUG: e.Pattern-R0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PatternLanguagesCheck@0/4 AsIs: (/7 } Tile{ AsIs: e.ContextVars$b/5 } Tile{ AsIs: e.Pattern-L0/9 } Tile{ AsIs: )/8 AsIs: (/11 } e.ContextVars$b/5/13 Tile{ AsIs: e.Pattern-R0/2 } Tile{ AsIs: )/12 } Tile{ AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[13], context[14], context[5], context[6]);
  refalrts::update_name(context[4], functions[efunc_gen_PatternLanguagesCheck_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PatternLanguagesCheck_Z1("PatternLanguagesCheck@1", COOKIE1_, COOKIE2_, func_gen_PatternLanguagesCheck_Z1);


static refalrts::FnResult func_gen_Map_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 97 elems
  refalrts::Iter context[97];
  refalrts::zeros( context, 97 );
  // </0 & Map@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@5/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 e.new5/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 2
  do {
    // </0 & Map@5/4 t.new6/5 (/9 e.new9/19 )/10 (/13 e.new10/21 )/14 (/17 e.new11/23 )/18 t.new7/27 e.new8/25 >/1
    context[19] = context[7];
    context[20] = context[8];
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[2];
    context[26] = context[3];
    // closed e.new9 as range 19
    // closed e.new10 as range 21
    // closed e.new11 as range 23
    context[28] = refalrts::tvar_left( context[27], context[25], context[26] );
    if( ! context[28] )
      continue;
    // closed e.new8 as range 25
    do {
      // </0 & Map@5/4 t.SrcPos/5 (/9 e.FuncName/29 )/10 (/13 e.Prefix/31 )/14 (/17 e.ContextVars$b/33 )/18 (/27 (/41 (/45 (/49 e.01/47 )/50 e.04/43 (/69 e.05/67 )/70 (/65 e.03/63 )/66 )/46 s.Num-L/79 )/42 (/53 (/57 (/61 e.07/59 )/62 e.10/55 (/77 e.11/75 )/78 (/73 e.09/71 )/74 )/58 s.Num-R/80 )/54 )/28 e.Tail/35 >/1
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[24];
      context[35] = context[25];
      context[36] = context[26];
      context[37] = 0;
      context[38] = 0;
      if( ! refalrts::brackets_term( context[37], context[38], context[27] ) )
        continue;
      context[39] = 0;
      context[40] = 0;
      context[41] = refalrts::brackets_left( context[39], context[40], context[37], context[38] );
      if( ! context[41] )
        continue;
      refalrts::bracket_pointers(context[41], context[42]);
      context[43] = 0;
      context[44] = 0;
      context[45] = refalrts::brackets_left( context[43], context[44], context[39], context[40] );
      if( ! context[45] )
        continue;
      refalrts::bracket_pointers(context[45], context[46]);
      context[47] = 0;
      context[48] = 0;
      context[49] = refalrts::brackets_left( context[47], context[48], context[43], context[44] );
      if( ! context[49] )
        continue;
      refalrts::bracket_pointers(context[49], context[50]);
      context[51] = 0;
      context[52] = 0;
      context[53] = refalrts::brackets_left( context[51], context[52], context[37], context[38] );
      if( ! context[53] )
        continue;
      refalrts::bracket_pointers(context[53], context[54]);
      context[55] = 0;
      context[56] = 0;
      context[57] = refalrts::brackets_left( context[55], context[56], context[51], context[52] );
      if( ! context[57] )
        continue;
      refalrts::bracket_pointers(context[57], context[58]);
      context[59] = 0;
      context[60] = 0;
      context[61] = refalrts::brackets_left( context[59], context[60], context[55], context[56] );
      if( ! context[61] )
        continue;
      refalrts::bracket_pointers(context[61], context[62]);
      context[63] = 0;
      context[64] = 0;
      context[65] = refalrts::brackets_right( context[63], context[64], context[43], context[44] );
      if( ! context[65] )
        continue;
      refalrts::bracket_pointers(context[65], context[66]);
      context[67] = 0;
      context[68] = 0;
      context[69] = refalrts::brackets_right( context[67], context[68], context[43], context[44] );
      if( ! context[69] )
        continue;
      refalrts::bracket_pointers(context[69], context[70]);
      context[71] = 0;
      context[72] = 0;
      context[73] = refalrts::brackets_right( context[71], context[72], context[55], context[56] );
      if( ! context[73] )
        continue;
      refalrts::bracket_pointers(context[73], context[74]);
      context[75] = 0;
      context[76] = 0;
      context[77] = refalrts::brackets_right( context[75], context[76], context[55], context[56] );
      if( ! context[77] )
        continue;
      refalrts::bracket_pointers(context[77], context[78]);
      if( ! refalrts::empty_seq( context[37], context[38] ) )
        continue;
      // closed e.FuncName as range 29
      // closed e.Prefix as range 31
      // closed e.ContextVars$b as range 33
      // closed e.01 as range 47
      // closed e.04 as range 43
      // closed e.05 as range 67
      // closed e.03 as range 63
      // closed e.07 as range 59
      // closed e.10 as range 55
      // closed e.11 as range 75
      // closed e.09 as range 71
      // closed e.Tail as range 35
      if( ! refalrts::svar_left( context[79], context[39], context[40] ) )
        continue;
      if( ! refalrts::empty_seq( context[39], context[40] ) )
        continue;
      if( ! refalrts::svar_left( context[80], context[51], context[52] ) )
        continue;
      if( ! refalrts::empty_seq( context[51], context[52] ) )
        continue;
      //DEBUG: t.SrcPos: 5
      //DEBUG: e.FuncName: 29
      //DEBUG: e.Prefix: 31
      //DEBUG: e.ContextVars$b: 33
      //DEBUG: e.01: 47
      //DEBUG: e.04: 43
      //DEBUG: e.05: 67
      //DEBUG: e.03: 63
      //DEBUG: e.07: 59
      //DEBUG: e.10: 55
      //DEBUG: e.11: 75
      //DEBUG: e.09: 71
      //DEBUG: e.Tail: 35
      //DEBUG: s.Num-L: 79
      //DEBUG: s.Num-R: 80

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} (/27 {REMOVED TILE} e.04/43 {REMOVED TILE} e.05/67 {REMOVED TILE} e.03/63 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.10/55 {REMOVED TILE} e.11/75 {REMOVED TILE} e.09/71 {REMOVED TILE} s.Num-R/80 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </41 HalfReuse: & CheckPatternPairs$1\1:1/45 AsIs: (/49 AsIs: e.01/47 AsIs: )/50 } Tile{ AsIs: (/61 AsIs: e.07/59 AsIs: )/62 } t.SrcPos/5/81 Tile{ AsIs: (/69 } e.FuncName/29/83 Tile{ AsIs: )/78 AsIs: (/73 } e.Prefix/31/85 Tile{ AsIs: )/66 HalfReuse: s.Num-R80 /46 AsIs: s.Num-L/79 HalfReuse: (/42 } e.ContextVars$b/33/87 Tile{ AsIs: )/74 HalfReuse: </58 } Tile{ HalfReuse: & GenericMatch/53 AsIs: (/57 } e.ContextVars$b/33/89 e.01/47/91 Tile{ AsIs: )/70 AsIs: (/65 } e.ContextVars$b/33/93 e.07/59/95 Tile{ AsIs: )/54 HalfReuse: >/28 } Tile{ HalfReuse: >/77 } Tile{ AsIs: </0 AsIs: & Map@5/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/29 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix/31 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars$b/33 AsIs: )/18 } Tile{ AsIs: e.Tail/35 } Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[81], context[82], context[5], context[6]);
      refalrts::copy_evar(vm, context[83], context[84], context[29], context[30]);
      refalrts::copy_evar(vm, context[85], context[86], context[31], context[32]);
      refalrts::copy_evar(vm, context[87], context[88], context[33], context[34]);
      refalrts::copy_evar(vm, context[89], context[90], context[33], context[34]);
      refalrts::copy_evar(vm, context[91], context[92], context[47], context[48]);
      refalrts::copy_evar(vm, context[93], context[94], context[33], context[34]);
      refalrts::copy_evar(vm, context[95], context[96], context[59], context[60]);
      refalrts::reinit_open_call(context[41]);
      refalrts::reinit_name(context[45], functions[efunc_gen_CheckPatternPairs_S1L1B1]);
      refalrts::reinit_svar( context[46], context[80] );
      refalrts::reinit_open_bracket(context[42]);
      refalrts::reinit_open_call(context[58]);
      refalrts::reinit_name(context[53], functions[efunc_GenericMatch]);
      refalrts::reinit_close_call(context[28]);
      refalrts::reinit_close_call(context[77]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[77] );
      refalrts::push_stack( vm, context[41] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[58] );
      refalrts::link_brackets( context[65], context[54] );
      refalrts::link_brackets( context[57], context[70] );
      refalrts::link_brackets( context[42], context[74] );
      refalrts::link_brackets( context[73], context[66] );
      refalrts::link_brackets( context[69], context[78] );
      refalrts::link_brackets( context[61], context[62] );
      refalrts::link_brackets( context[49], context[50] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[0], context[18] );
      res = refalrts::splice_elem( res, context[77] );
      res = refalrts::splice_evar( res, context[54], context[28] );
      res = refalrts::splice_evar( res, context[95], context[96] );
      res = refalrts::splice_evar( res, context[93], context[94] );
      res = refalrts::splice_evar( res, context[70], context[65] );
      res = refalrts::splice_evar( res, context[91], context[92] );
      res = refalrts::splice_evar( res, context[89], context[90] );
      res = refalrts::splice_evar( res, context[53], context[57] );
      res = refalrts::splice_evar( res, context[74], context[58] );
      res = refalrts::splice_evar( res, context[87], context[88] );
      res = refalrts::splice_evar( res, context[66], context[42] );
      res = refalrts::splice_evar( res, context[85], context[86] );
      res = refalrts::splice_evar( res, context[78], context[73] );
      res = refalrts::splice_evar( res, context[83], context[84] );
      res = refalrts::splice_elem( res, context[69] );
      res = refalrts::splice_evar( res, context[81], context[82] );
      res = refalrts::splice_evar( res, context[61], context[62] );
      res = refalrts::splice_evar( res, context[41], context[50] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@5/4 t.SrcPos/5 (/9 e.FuncName/29 )/10 (/13 e.Prefix/31 )/14 (/17 e.ContextVars$b/33 )/18 t.Next/27 e.Tail/35 >/1
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[21];
    context[32] = context[22];
    context[33] = context[23];
    context[34] = context[24];
    context[35] = context[25];
    context[36] = context[26];
    // closed e.FuncName as range 29
    // closed e.Prefix as range 31
    // closed e.ContextVars$b as range 33
    // closed e.Tail as range 35
    //DEBUG: t.SrcPos: 5
    //DEBUG: t.Next: 27
    //DEBUG: e.FuncName: 29
    //DEBUG: e.Prefix: 31
    //DEBUG: e.ContextVars$b: 33
    //DEBUG: e.Tail: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1\1*1/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/29 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix/31 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars$b/33 AsIs: )/18 AsIs: t.Next/27 } >/37 </38 & Map@5/39 t.SrcPos/5/40 (/42 e.FuncName/29/43 )/45 (/46 e.Prefix/31/47 )/49 (/50 e.ContextVars$b/33/51 )/53 Tile{ AsIs: e.Tail/35 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::alloc_open_call(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_gen_Map_Z5]);
    refalrts::copy_evar(vm, context[40], context[41], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::copy_evar(vm, context[43], context[44], context[29], context[30]);
    refalrts::alloc_close_bracket(vm, context[45]);
    refalrts::alloc_open_bracket(vm, context[46]);
    refalrts::copy_evar(vm, context[47], context[48], context[31], context[32]);
    refalrts::alloc_close_bracket(vm, context[49]);
    refalrts::alloc_open_bracket(vm, context[50]);
    refalrts::copy_evar(vm, context[51], context[52], context[33], context[34]);
    refalrts::alloc_close_bracket(vm, context[53]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[38] );
    refalrts::link_brackets( context[50], context[53] );
    refalrts::link_brackets( context[46], context[49] );
    refalrts::link_brackets( context[42], context[45] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[37], context[53] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@5/4 t.SrcPos/5 (/9 e.FuncName/19 )/10 (/13 e.Prefix/21 )/14 (/17 e.ContextVars$b/23 )/18 >/1
    context[19] = context[7];
    context[20] = context[8];
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[15];
    context[24] = context[16];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.FuncName as range 19
    // closed e.Prefix as range 21
    // closed e.ContextVars$b as range 23
    //DEBUG: t.SrcPos: 5
    //DEBUG: e.FuncName: 19
    //DEBUG: e.Prefix: 21
    //DEBUG: e.ContextVars$b: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@5/4 t.SrcPos/5 (/9 e.FuncName/19 )/10 (/13 e.Prefix/21 )/14 (/17 e.ContextVars$b/23 )/18 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@5/4 t.SrcPos/5 (/9 e.FuncName/7 )/10 (/13 e.Prefix/11 )/14 (/17 e.ContextVars$b/15 )/18 e.items/2 >/1
  // closed e.FuncName as range 7
  // closed e.Prefix as range 11
  // closed e.ContextVars$b as range 15
  // closed e.items as range 2
  //DEBUG: t.SrcPos: 5
  //DEBUG: e.FuncName: 7
  //DEBUG: e.Prefix: 11
  //DEBUG: e.ContextVars$b: 15
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </19 & Map@0/20 Tile{ HalfReuse: [*]/0 Reuse: & CheckPatternPairs$1\1@0/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix/11 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars$b/15 AsIs: )/18 } {*}/21 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_name(vm, context[20], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[21], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[19] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[0], context[18] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  refalrts::use( res );
  refalrts::wrap_closure( context[21] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z5("Map@5", COOKIE1_, COOKIE2_, func_gen_Map_Z5);


static refalrts::FnResult func_gen_DoMapAccum_Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@9/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@9/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@9/4 t.Acc/5 (/9 e.Scanned/11 )/10 t.Next/15 e.Tail/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Scanned as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail as range 13
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11
    //DEBUG: t.Next: 15
    //DEBUG: e.Tail: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@9/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/11 AsIs: )/10 } (/17 Tile{ AsIs: e.Tail/13 } )/18 </19 & CreateTuplePairs\1/20 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_CreateTuplePairs_L1]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@9/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@9/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@9/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & CreateTuplePairs\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CreateTuplePairs_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z9("DoMapAccum@9", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z9);


static refalrts::FnResult func_gen_DoMapAccum_Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 49 elems
  refalrts::Iter context[49];
  refalrts::zeros( context, 49 );
  // </0 & DoMapAccum@10/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@10/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@10/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@10/4 s.new8/5 (/9 e.new11/17 )/10 t.new9/15 e.new10/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      if( ! refalrts::svar_term( context[5], context[5] ) )
        continue;
      // closed e.new11 as range 17
      // closed e.new10 as range 19
      do {
        // </0 & DoMapAccum@10/4 s.new12/5 (/9 e.new16/21 )/10 (/15 s.new13/27 e.new14/25 )/16 e.new15/23 >/1
        context[21] = context[17];
        context[22] = context[18];
        context[23] = context[19];
        context[24] = context[20];
        context[25] = 0;
        context[26] = 0;
        if( ! refalrts::brackets_term( context[25], context[26], context[15] ) )
          continue;
        // closed e.new16 as range 21
        // closed e.new15 as range 23
        if( ! refalrts::svar_left( context[27], context[25], context[26] ) )
          continue;
        // closed e.new14 as range 25
        do {
          // </0 & DoMapAccum@10/4 s.Count/5 (/9 e.Scanned/28 )/10 (/15 # Var/27 s.Type/34 e.1/30 )/16 e.Tail/32 >/1
          context[28] = context[21];
          context[29] = context[22];
          context[30] = context[25];
          context[31] = context[26];
          context[32] = context[23];
          context[33] = context[24];
          if( ! refalrts::ident_term( identifiers[ident_Var], context[27] ) )
            continue;
          // closed e.Scanned as range 28
          // closed e.Tail as range 32
          if( ! refalrts::svar_left( context[34], context[30], context[31] ) )
            continue;
          // closed e.1 as range 30
          //DEBUG: s.Count: 5
          //DEBUG: e.Scanned: 28
          //DEBUG: e.Tail: 32
          //DEBUG: s.Type: 34
          //DEBUG: e.1: 30

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </35 & DoMapAccum$1=1@10/36 (/37 Tile{ AsIs: e.Scanned/28 } )/38 (/39 Tile{ AsIs: e.Tail/32 } )/40 </41 & Add/42 1/43 s.Count/5/44 Tile{ HalfReuse: >/10 AsIs: (/15 AsIs: # Var/27 AsIs: s.Type/34 AsIs: e.1/30 HalfReuse: 's'/16 } Tile{ AsIs: </0 Reuse: & Symb/4 AsIs: s.Count/5 HalfReuse: >/9 } )/45 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[35]);
          refalrts::alloc_name(vm, context[36], functions[efunc_gen_DoMapAccum_S1A1Z10]);
          refalrts::alloc_open_bracket(vm, context[37]);
          refalrts::alloc_close_bracket(vm, context[38]);
          refalrts::alloc_open_bracket(vm, context[39]);
          refalrts::alloc_close_bracket(vm, context[40]);
          refalrts::alloc_open_call(vm, context[41]);
          refalrts::alloc_name(vm, context[42], functions[efunc_Add]);
          refalrts::alloc_number(vm, context[43], 1UL);
          refalrts::copy_stvar(vm, context[44], context[5]);
          refalrts::alloc_close_bracket(vm, context[45]);
          refalrts::reinit_close_call(context[10]);
          refalrts::reinit_char(context[16], 's');
          refalrts::update_name(context[4], functions[efunc_Symb]);
          refalrts::reinit_close_call(context[9]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[35] );
          refalrts::link_brackets( context[15], context[45] );
          refalrts::push_stack( vm, context[9] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[41] );
          refalrts::link_brackets( context[39], context[40] );
          refalrts::link_brackets( context[37], context[38] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[45] );
          res = refalrts::splice_evar( res, context[0], context[9] );
          res = refalrts::splice_evar( res, context[10], context[16] );
          res = refalrts::splice_evar( res, context[40], context[44] );
          res = refalrts::splice_evar( res, context[32], context[33] );
          res = refalrts::splice_evar( res, context[38], context[39] );
          res = refalrts::splice_evar( res, context[28], context[29] );
          res = refalrts::splice_evar( res, context[35], context[37] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@10/4 s.Count/5 (/9 e.Scanned/28 )/10 (/15 # Brackets/27 e.0/30 )/16 e.Tail/32 >/1
        context[28] = context[21];
        context[29] = context[22];
        context[30] = context[25];
        context[31] = context[26];
        context[32] = context[23];
        context[33] = context[24];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[27] ) )
          continue;
        // closed e.Scanned as range 28
        // closed e.0 as range 30
        // closed e.Tail as range 32
        //DEBUG: s.Count: 5
        //DEBUG: e.Scanned: 28
        //DEBUG: e.0: 30
        //DEBUG: e.Tail: 32

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@10/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/28 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/32 } )/34 </35 & Add/36 1/37 Tile{ AsIs: s.Count/5 } >/38 (/39 # Brackets/40 </41 & RenameVars@2/42 (/43 </44 & Symb/45 s.Count/5/46 >/47 Tile{ HalfReuse: )/27 AsIs: e.0/30 HalfReuse: >/16 } )/48 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[36], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[37], 1UL);
        refalrts::alloc_close_call(vm, context[38]);
        refalrts::alloc_open_bracket(vm, context[39]);
        refalrts::alloc_ident(vm, context[40], identifiers[ident_Brackets]);
        refalrts::alloc_open_call(vm, context[41]);
        refalrts::alloc_name(vm, context[42], functions[efunc_gen_RenameVars_Z2]);
        refalrts::alloc_open_bracket(vm, context[43]);
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_Symb]);
        refalrts::copy_stvar(vm, context[46], context[5]);
        refalrts::alloc_close_call(vm, context[47]);
        refalrts::alloc_close_bracket(vm, context[48]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z10]);
        refalrts::reinit_close_bracket(context[27]);
        refalrts::reinit_close_call(context[16]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[39], context[48] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[41] );
        refalrts::link_brackets( context[43], context[27] );
        refalrts::push_stack( vm, context[47] );
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[38] );
        refalrts::push_stack( vm, context[35] );
        refalrts::link_brackets( context[15], context[34] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[48] );
        res = refalrts::splice_evar( res, context[27], context[16] );
        res = refalrts::splice_evar( res, context[38], context[47] );
        res = refalrts::splice_elem( res, context[5] );
        res = refalrts::splice_evar( res, context[34], context[37] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[9], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@10/4 s.Count/5 (/9 e.Scanned/21 )/10 t.Next/15 e.Tail/23 >/1
      context[21] = context[17];
      context[22] = context[18];
      context[23] = context[19];
      context[24] = context[20];
      // closed e.Scanned as range 21
      // closed e.Tail as range 23
      //DEBUG: t.Next: 15
      //DEBUG: s.Count: 5
      //DEBUG: e.Scanned: 21
      //DEBUG: e.Tail: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@10/4 AsIs: s.Count/5 AsIs: (/9 } Tile{ AsIs: e.Scanned/21 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/23 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@10/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@10/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & RenameVars\1*3/24 (/25 )/26 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/27 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_RenameVars_L1D3]);
    refalrts::alloc_open_bracket(vm, context[25]);
    refalrts::alloc_close_bracket(vm, context[26]);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[26] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@10/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@10/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@10/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & RenameVars\1@0/14 (/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_RenameVars_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z10("DoMapAccum@10", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z10);


static refalrts::FnResult func_gen_Map_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Map@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@6/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@6/4 (/7 # Brackets/13 e.0/11 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = refalrts::ident_left( identifiers[ident_Brackets], context[11], context[12] );
      if( ! context[13] )
        continue;
      // closed e.0 as range 11
      // closed e.Tail as range 9
      //DEBUG: e.0: 11
      //DEBUG: e.Tail: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Map@6/4 } Tile{ AsIs: e.0/11 } Tile{ HalfReuse: >/7 HalfReuse: </13 } Tile{ HalfReuse: & Map@6/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::reinit_close_call(context[7]);
      refalrts::reinit_open_call(context[13]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z6]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[7], context[13] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@6/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next/7 } Tile{ AsIs: </0 AsIs: & Map@6/4 } Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@6/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@6/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@6/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & FlattenPattern\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FlattenPattern_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z6("Map@6", COOKIE1_, COOKIE2_, func_gen_Map_Z6);


static refalrts::FnResult func_gen_Map_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & Map@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@7/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@7/4 (/7 s.new3/13 e.new4/11 )/8 e.new5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new4 as range 11
      do {
        // </0 & Map@7/4 (/7 # ADT-Brackets/13 (/20 e.2/18 )/21 e.1/14 )/8 e.Tail/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[13] ) )
          continue;
        context[18] = 0;
        context[19] = 0;
        context[20] = refalrts::brackets_left( context[18], context[19], context[14], context[15] );
        if( ! context[20] )
          continue;
        refalrts::bracket_pointers(context[20], context[21]);
        // closed e.2 as range 18
        // closed e.1 as range 14
        // closed e.Tail as range 16
        //DEBUG: e.2: 18
        //DEBUG: e.1: 14
        //DEBUG: e.Tail: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Brackets/4 AsIs: (/7 Reuse: # Symbol/13 HalfReuse: # Identifier/20 AsIs: e.2/18 AsIs: )/21 } (/22 # Brackets/23 </24 & Map@7/25 Tile{ AsIs: e.1/14 } >/26 )/27 )/28 </29 Tile{ HalfReuse: & Map@7/8 AsIs: e.Tail/16 AsIs: >/1 ]] }
        refalrts::alloc_open_bracket(vm, context[22]);
        refalrts::alloc_ident(vm, context[23], identifiers[ident_Brackets]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_gen_Map_Z7]);
        refalrts::alloc_close_call(vm, context[26]);
        refalrts::alloc_close_bracket(vm, context[27]);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::alloc_open_call(vm, context[29]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Brackets]);
        refalrts::update_ident(context[13], identifiers[ident_Symbol]);
        refalrts::reinit_ident(context[20], identifiers[ident_Identifier]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z7]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[29] );
        refalrts::link_brackets( context[0], context[28] );
        refalrts::link_brackets( context[22], context[27] );
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[7], context[21] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[26], context[29] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@7/4 (/7 # Brackets/13 e.0/14 )/8 e.Tail/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[13] ) )
        continue;
      // closed e.0 as range 14
      // closed e.Tail as range 16
      //DEBUG: e.0: 14
      //DEBUG: e.Tail: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Brackets/4 AsIs: (/7 Reuse: # Symbol/13 } # Char/18 '*'/19 )/20 </21 & Map@7/22 Tile{ AsIs: e.0/14 } >/23 )/24 </25 Tile{ HalfReuse: & Map@7/8 AsIs: e.Tail/16 AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[18], identifiers[ident_Char]);
      refalrts::alloc_char(vm, context[19], '*');
      refalrts::alloc_close_bracket(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_gen_Map_Z7]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::alloc_open_call(vm, context[25]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Brackets]);
      refalrts::update_ident(context[13], identifiers[ident_Symbol]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[25] );
      refalrts::link_brackets( context[0], context[24] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[21] );
      refalrts::link_brackets( context[7], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[23], context[25] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[18], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@7/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next/7 } Tile{ AsIs: </0 AsIs: & Map@7/4 } Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@7/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@7/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@7/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & ReplaceADTBrackets\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ReplaceADTBrackets_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z7("Map@7", COOKIE1_, COOKIE2_, func_gen_Map_Z7);


static refalrts::FnResult func_gen_RenameVars_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & RenameVars@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & RenameVars@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & RenameVars@1/4 (/7 e.Prefix0/13 )/8 (/11 e.Call/15 )/12 e.Other/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Prefix0 as range 13
    // closed e.Call as range 15
    // closed e.Other as range 17
    //DEBUG: e.Prefix0: 13
    //DEBUG: e.Call: 15
    //DEBUG: e.Other: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </19 & DelAccumulator/20 Tile{ AsIs: </0 Reuse: & DoMapAccum@15/4 AsIs: (/7 AsIs: e.Prefix0/13 AsIs: )/8 AsIs: (/11 AsIs: e.Call/15 AsIs: )/12 } 1/21 (/22 )/23 Tile{ AsIs: e.Other/17 } >/24 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_DelAccumulator]);
    refalrts::alloc_number(vm, context[21], 1UL);
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::alloc_close_bracket(vm, context[23]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[21], context[23] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & RenameVars@1/4 (/7 e.Prefix0/5 )/8 (/11 e.Call/9 )/12 e.Other/2 >/1
  // closed e.Prefix0 as range 5
  // closed e.Call as range 9
  // closed e.Other as range 2
  //DEBUG: e.Prefix0: 5
  //DEBUG: e.Call: 9
  //DEBUG: e.Other: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & RenameVars@0/4 AsIs: (/7 } Tile{ AsIs: e.Prefix0/5 } Tile{ HalfReuse: 'p'/11 AsIs: e.Call/9 AsIs: )/12 AsIs: e.Other/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_RenameVars_Z0]);
  refalrts::reinit_char(context[11], 'p');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[11];
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_RenameVars_Z1("RenameVars@1", COOKIE1_, COOKIE2_, func_gen_RenameVars_Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 65 elems
  refalrts::Iter context[65];
  refalrts::zeros( context, 65 );
  // </0 & DoMapAccum@11/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@11/4 (/7 e.new1/5 )/8 t.new2/9 (/13 e.new3/11 )/14 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new3 as range 11
  // closed e.new4 as range 2
  do {
    // </0 & DoMapAccum@11/4 (/7 e.new8/15 )/8 t.new5/9 (/13 e.new9/17 )/14 t.new6/21 e.new7/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.new8 as range 15
    // closed e.new9 as range 17
    context[22] = refalrts::tvar_left( context[21], context[19], context[20] );
    if( ! context[22] )
      continue;
    // closed e.new7 as range 19
    do {
      // </0 & DoMapAccum@11/4 (/7 e.new13/23 )/8 s.new10/9 (/13 e.new14/25 )/14 t.new11/21 e.new12/27 >/1
      context[23] = context[15];
      context[24] = context[16];
      context[25] = context[17];
      context[26] = context[18];
      context[27] = context[19];
      context[28] = context[20];
      if( ! refalrts::svar_term( context[9], context[9] ) )
        continue;
      // closed e.new13 as range 23
      // closed e.new14 as range 25
      // closed e.new12 as range 27
      do {
        // </0 & DoMapAccum@11/4 (/7 e.new19/29 )/8 s.new15/9 (/13 e.new20/31 )/14 (/21 s.new16/37 e.new17/35 )/22 e.new18/33 >/1
        context[29] = context[23];
        context[30] = context[24];
        context[31] = context[25];
        context[32] = context[26];
        context[33] = context[27];
        context[34] = context[28];
        context[35] = 0;
        context[36] = 0;
        if( ! refalrts::brackets_term( context[35], context[36], context[21] ) )
          continue;
        // closed e.new19 as range 29
        // closed e.new20 as range 31
        // closed e.new18 as range 33
        if( ! refalrts::svar_left( context[37], context[35], context[36] ) )
          continue;
        // closed e.new17 as range 35
        do {
          // </0 & DoMapAccum@11/4 (/7 e.Prefix/38 )/8 s.Count/9 (/13 e.Scanned/40 )/14 (/21 # Var/37 s.Type/46 e.1/42 )/22 e.Tail/44 >/1
          context[38] = context[29];
          context[39] = context[30];
          context[40] = context[31];
          context[41] = context[32];
          context[42] = context[35];
          context[43] = context[36];
          context[44] = context[33];
          context[45] = context[34];
          if( ! refalrts::ident_term( identifiers[ident_Var], context[37] ) )
            continue;
          // closed e.Prefix as range 38
          // closed e.Scanned as range 40
          // closed e.Tail as range 44
          if( ! refalrts::svar_left( context[46], context[42], context[43] ) )
            continue;
          // closed e.1 as range 42
          //DEBUG: s.Count: 9
          //DEBUG: e.Prefix: 38
          //DEBUG: e.Scanned: 40
          //DEBUG: e.Tail: 44
          //DEBUG: s.Type: 46
          //DEBUG: e.1: 42

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@11/4 AsIs: (/7 AsIs: e.Prefix/38 AsIs: )/8 } Tile{ AsIs: (/13 AsIs: e.Scanned/40 AsIs: )/14 AsIs: (/21 } Tile{ AsIs: e.Tail/44 } Tile{ AsIs: )/22 } </47 & Add/48 1/49 Tile{ AsIs: s.Count/9 } >/50 (/51 Tile{ AsIs: # Var/37 AsIs: s.Type/46 } Tile{ AsIs: e.1/42 } e.Prefix/38/52 's'/54 </55 & Symb/56 s.Count/9/57 >/58 )/59 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[47]);
          refalrts::alloc_name(vm, context[48], functions[efunc_Add]);
          refalrts::alloc_number(vm, context[49], 1UL);
          refalrts::alloc_close_call(vm, context[50]);
          refalrts::alloc_open_bracket(vm, context[51]);
          refalrts::copy_evar(vm, context[52], context[53], context[38], context[39]);
          refalrts::alloc_char(vm, context[54], 's');
          refalrts::alloc_open_call(vm, context[55]);
          refalrts::alloc_name(vm, context[56], functions[efunc_Symb]);
          refalrts::copy_stvar(vm, context[57], context[9]);
          refalrts::alloc_close_call(vm, context[58]);
          refalrts::alloc_close_bracket(vm, context[59]);
          refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z11]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[51], context[59] );
          refalrts::push_stack( vm, context[58] );
          refalrts::push_stack( vm, context[55] );
          refalrts::push_stack( vm, context[50] );
          refalrts::push_stack( vm, context[47] );
          refalrts::link_brackets( context[21], context[22] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[54], context[59] );
          res = refalrts::splice_evar( res, context[52], context[53] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[37], context[46] );
          res = refalrts::splice_evar( res, context[50], context[51] );
          res = refalrts::splice_elem( res, context[9] );
          res = refalrts::splice_evar( res, context[47], context[49] );
          res = refalrts::splice_elem( res, context[22] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[13], context[21] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@11/4 (/7 e.Prefix/38 )/8 s.Count/9 (/13 e.Scanned/40 )/14 (/21 # Brackets/37 e.0/42 )/22 e.Tail/44 >/1
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[35];
        context[43] = context[36];
        context[44] = context[33];
        context[45] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[37] ) )
          continue;
        // closed e.Prefix as range 38
        // closed e.Scanned as range 40
        // closed e.0 as range 42
        // closed e.Tail as range 44
        //DEBUG: s.Count: 9
        //DEBUG: e.Prefix: 38
        //DEBUG: e.Scanned: 40
        //DEBUG: e.0: 42
        //DEBUG: e.Tail: 44

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@11/4 AsIs: (/7 AsIs: e.Prefix/38 AsIs: )/8 } Tile{ AsIs: (/13 AsIs: e.Scanned/40 AsIs: )/14 AsIs: (/21 } Tile{ AsIs: e.Tail/44 } )/46 </47 & Add/48 1/49 Tile{ AsIs: s.Count/9 } >/50 (/51 # Brackets/52 </53 & RenameVars@1/54 (/55 e.Prefix/38/56 )/58 (/59 </60 & Symb/61 s.Count/9/62 >/63 Tile{ HalfReuse: )/37 AsIs: e.0/42 HalfReuse: >/22 } )/64 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[46]);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[49], 1UL);
        refalrts::alloc_close_call(vm, context[50]);
        refalrts::alloc_open_bracket(vm, context[51]);
        refalrts::alloc_ident(vm, context[52], identifiers[ident_Brackets]);
        refalrts::alloc_open_call(vm, context[53]);
        refalrts::alloc_name(vm, context[54], functions[efunc_gen_RenameVars_Z1]);
        refalrts::alloc_open_bracket(vm, context[55]);
        refalrts::copy_evar(vm, context[56], context[57], context[38], context[39]);
        refalrts::alloc_close_bracket(vm, context[58]);
        refalrts::alloc_open_bracket(vm, context[59]);
        refalrts::alloc_open_call(vm, context[60]);
        refalrts::alloc_name(vm, context[61], functions[efunc_Symb]);
        refalrts::copy_stvar(vm, context[62], context[9]);
        refalrts::alloc_close_call(vm, context[63]);
        refalrts::alloc_close_bracket(vm, context[64]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z11]);
        refalrts::reinit_close_bracket(context[37]);
        refalrts::reinit_close_call(context[22]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[51], context[64] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[53] );
        refalrts::link_brackets( context[59], context[37] );
        refalrts::push_stack( vm, context[63] );
        refalrts::push_stack( vm, context[60] );
        refalrts::link_brackets( context[55], context[58] );
        refalrts::push_stack( vm, context[50] );
        refalrts::push_stack( vm, context[47] );
        refalrts::link_brackets( context[21], context[46] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[64] );
        res = refalrts::splice_evar( res, context[37], context[22] );
        res = refalrts::splice_evar( res, context[50], context[63] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[46], context[49] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_evar( res, context[13], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@11/4 (/7 e.Prefix/29 )/8 s.Count/9 (/13 e.Scanned/31 )/14 t.Next/21 e.Tail/33 >/1
      context[29] = context[23];
      context[30] = context[24];
      context[31] = context[25];
      context[32] = context[26];
      context[33] = context[27];
      context[34] = context[28];
      // closed e.Prefix as range 29
      // closed e.Scanned as range 31
      // closed e.Tail as range 33
      //DEBUG: t.Next: 21
      //DEBUG: s.Count: 9
      //DEBUG: e.Prefix: 29
      //DEBUG: e.Scanned: 31
      //DEBUG: e.Tail: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@11/4 AsIs: (/7 AsIs: e.Prefix/29 AsIs: )/8 AsIs: s.Count/9 AsIs: (/13 } Tile{ AsIs: e.Scanned/31 } Tile{ AsIs: t.Next/21 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Tail/33 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@11/4 (/7 e.Prefix/23 )/8 t.Acc/9 (/13 e.Scanned/25 )/14 t.Next/21 e.Tail/27 >/1
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[17];
    context[26] = context[18];
    context[27] = context[19];
    context[28] = context[20];
    // closed e.Prefix as range 23
    // closed e.Scanned as range 25
    // closed e.Tail as range 27
    //DEBUG: t.Acc: 9
    //DEBUG: t.Next: 21
    //DEBUG: e.Prefix: 23
    //DEBUG: e.Scanned: 25
    //DEBUG: e.Tail: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@11/4 AsIs: (/7 AsIs: e.Prefix/23 AsIs: )/8 } Tile{ AsIs: (/13 AsIs: e.Scanned/25 AsIs: )/14 } (/29 Tile{ AsIs: e.Tail/27 } )/30 </31 & RenameVars\1*3/32 (/33 e.Prefix/23/34 )/36 Tile{ AsIs: t.Acc/9 } Tile{ AsIs: t.Next/21 } >/37 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_gen_RenameVars_L1D3]);
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::copy_evar(vm, context[34], context[35], context[23], context[24]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[33], context[36] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[30], context[36] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@11/4 (/7 e.Prefix/15 )/8 t.Acc/9 (/13 e.Scanned/17 )/14 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Prefix as range 15
    // closed e.Scanned as range 17
    //DEBUG: t.Acc: 9
    //DEBUG: e.Prefix: 15
    //DEBUG: e.Scanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@11/4 (/7 e.Prefix/15 )/8 {REMOVED TILE} (/13 {REMOVED TILE} )/14 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/9 } Tile{ AsIs: e.Scanned/17 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@11/4 (/7 e.Prefix/5 )/8 t.acc/9 (/13 e.scanned/11 )/14 e.items/2 >/1
  // closed e.Prefix as range 5
  // closed e.scanned as range 11
  // closed e.items as range 2
  //DEBUG: t.acc: 9
  //DEBUG: e.Prefix: 5
  //DEBUG: e.scanned: 11
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@0/4 HalfReuse: [*]/7 } & RenameVars\1@0/15 (/16 Tile{ AsIs: e.Prefix/5 } )/17 Tile{ HalfReuse: {*}/8 AsIs: t.acc/9 AsIs: (/13 AsIs: e.scanned/11 AsIs: )/14 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_RenameVars_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::reinit_closure_head(context[7]);
  refalrts::reinit_unwrapped_closure(context[8], context[7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  refalrts::wrap_closure( context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z11("DoMapAccum@11", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z11);


static refalrts::FnResult func_gen_Map_Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & Map@8/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@8/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@8/4 (/7 s.new3/13 e.new4/11 )/8 e.new5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new4 as range 11
      do {
        // </0 & Map@8/4 (/7 s.new6/13 t.new7/18 )/8 e.new8/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        // closed e.new8 as range 16
        context[19] = refalrts::tvar_left( context[18], context[14], context[15] );
        if( ! context[19] )
          continue;
        if( ! refalrts::empty_seq( context[14], context[15] ) )
          continue;
        do {
          // </0 & Map@8/4 (/7 # Float/13 t.0/18 )/8 e.Tail/20 >/1
          context[20] = context[16];
          context[21] = context[17];
          if( ! refalrts::ident_term( identifiers[ident_Float], context[13] ) )
            continue;
          // closed e.Tail as range 20
          //DEBUG: t.0: 18
          //DEBUG: e.Tail: 20

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} & Map@8/4 (/7 # Float/13 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: t.0/18 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@8/8 AsIs: e.Tail/20 AsIs: >/1 ]] }
          refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_elem( res, context[0] );
          res = refalrts::splice_evar( res, context[18], context[19] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@8/4 (/7 # Anchor/13 t.0/18 )/8 e.Tail/20 >/1
        context[20] = context[16];
        context[21] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_Anchor], context[13] ) )
          continue;
        // closed e.Tail as range 20
        //DEBUG: t.0: 18
        //DEBUG: e.Tail: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} & Map@8/4 (/7 # Anchor/13 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: t.0/18 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@8/8 AsIs: e.Tail/20 AsIs: >/1 ]] }
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_elem( res, context[0] );
        res = refalrts::splice_evar( res, context[18], context[19] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@8/4 (/7 # MarkedBrackets/13 e.0/14 )/8 e.Tail/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_MarkedBrackets], context[13] ) )
        continue;
      // closed e.0 as range 14
      // closed e.Tail as range 16
      //DEBUG: e.0: 14
      //DEBUG: e.Tail: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Brackets/4 HalfReuse: </7 HalfReuse: & Map@8/13 AsIs: e.0/14 HalfReuse: >/8 } )/18 </19 & Map@8/20 Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_gen_Map_Z8]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Brackets]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[13], functions[efunc_gen_Map_Z8]);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[0], context[18] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[18], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@8/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next/7 } Tile{ AsIs: </0 AsIs: & Map@8/4 } Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@8/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@8/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@8/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & DeleteMarkup\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_DeleteMarkup_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z8("Map@8", COOKIE1_, COOKIE2_, func_gen_Map_Z8);


static refalrts::FnResult func_gen_MarkupNeighbourHelper_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & MarkupNeighbourHelper@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & MarkupNeighbourHelper@1/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & MarkupNeighbourHelper@1/4 (/7 s.new3/13 e.new4/11 )/8 e.new5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new4 as range 11
      do {
        // </0 & MarkupNeighbourHelper@1/4 (/7 # Var/13 't'/18 e.Index/14 )/8 e.Suffix/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Var], context[13] ) )
          continue;
        context[18] = refalrts::char_left( 't', context[14], context[15] );
        if( ! context[18] )
          continue;
        // closed e.Index as range 14
        // closed e.Suffix as range 16
        //DEBUG: e.Index: 14
        //DEBUG: e.Suffix: 16
        //14: e.Index
        //16: e.Suffix

        refalrts::reset_allocator(vm);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[21], functions[efunc_gen_MarkupNeighbourHelper_Z1S1C1]);
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_HasAnchorsPrefix]);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        res = refalrts::splice_elem( res, context[20] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[22] );
        res = refalrts::splice_elem( res, context[24] );
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_elem( res, context[22] );
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_elem( res, context[19] );
        refalrts::use( res );
        refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
        if (rec_res != refalrts::cSuccess)
          return rec_res;
        refalrts::this_is_generated_function(vm);
        do {
          // </19 & MarkupNeighbourHelper@1$1?1/23 # True/24 >/20
          context[21] = 0;
          context[22] = 0;
          context[23] = refalrts::call_left( context[21], context[22], context[19], context[20] );
          context[24] = refalrts::ident_left( identifiers[ident_True], context[21], context[22] );
          if( ! context[24] )
            continue;
          if( ! refalrts::empty_seq( context[21], context[22] ) )
            continue;
          //DEBUG: e.Index: 14
          //DEBUG: e.Suffix: 16
          //14: e.Index
          //16: e.Suffix
          //30: e.Suffix

          refalrts::reset_allocator(vm);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::alloc_open_call(vm, context[25]);
          refalrts::alloc_name(vm, context[27], functions[efunc_gen_MarkupNeighbourHelper_Z1S1C2]);
          refalrts::alloc_open_call(vm, context[28]);
          refalrts::alloc_name(vm, context[29], functions[efunc_HasAnchorsSuffix]);
          refalrts::copy_evar(vm, context[30], context[31], context[16], context[17]);
          refalrts::alloc_close_call(vm, context[32]);
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[25] );
          res = refalrts::splice_elem( res, context[26] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[28] );
          res = refalrts::splice_elem( res, context[32] );
          res = refalrts::splice_evar( res, context[30], context[31] );
          res = refalrts::splice_elem( res, context[29] );
          res = refalrts::splice_elem( res, context[28] );
          res = refalrts::splice_elem( res, context[27] );
          res = refalrts::splice_elem( res, context[25] );
          refalrts::use( res );
          refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
          if (rec_res != refalrts::cSuccess)
            return rec_res;
          refalrts::this_is_generated_function(vm);
          do {
            // </25 & MarkupNeighbourHelper@1$1?2/29 # True/30 >/26
            context[27] = 0;
            context[28] = 0;
            context[29] = refalrts::call_left( context[27], context[28], context[25], context[26] );
            context[30] = refalrts::ident_left( identifiers[ident_True], context[27], context[28] );
            if( ! context[30] )
              continue;
            if( ! refalrts::empty_seq( context[27], context[28] ) )
              continue;
            //DEBUG: e.Index: 14
            //DEBUG: e.Suffix: 16

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} </19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ AsIs: </25 Reuse: & MarkupNeighbourHelper/29 HalfReuse: (/30 } Tile{ HalfReuse: (/0 HalfReuse: # Anchor/4 AsIs: (/7 AsIs: # Var/13 AsIs: 't'/18 AsIs: e.Index/14 AsIs: )/8 } Tile{ HalfReuse: )/23 HalfReuse: )/24 HalfReuse: (/20 } Tile{ AsIs: e.Suffix/16 } Tile{ HalfReuse: )/26 AsIs: >/1 ]] }
            refalrts::update_name(context[29], functions[efunc_MarkupNeighbourHelper]);
            refalrts::reinit_open_bracket(context[30]);
            refalrts::reinit_open_bracket(context[0]);
            refalrts::reinit_ident(context[4], identifiers[ident_Anchor]);
            refalrts::reinit_close_bracket(context[23]);
            refalrts::reinit_close_bracket(context[24]);
            refalrts::reinit_open_bracket(context[20]);
            refalrts::reinit_close_bracket(context[26]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[25] );
            refalrts::link_brackets( context[20], context[26] );
            refalrts::link_brackets( context[30], context[24] );
            refalrts::link_brackets( context[0], context[23] );
            refalrts::link_brackets( context[7], context[8] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[26];
            res = refalrts::splice_evar( res, context[16], context[17] );
            res = refalrts::splice_evar( res, context[23], context[20] );
            res = refalrts::splice_evar( res, context[0], context[8] );
            res = refalrts::splice_evar( res, context[25], context[30] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          refalrts::splice_to_freelist(vm, context[25], context[26]);
          continue;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        refalrts::splice_to_freelist(vm, context[19], context[20]);
        continue;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & MarkupNeighbourHelper@1/4 (/7 # Brackets/13 e.Brackets/14 )/8 e.Suffix/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[13] ) )
        continue;
      // closed e.Brackets as range 14
      // closed e.Suffix as range 16
      //DEBUG: e.Brackets: 14
      //DEBUG: e.Suffix: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & MarkupNeighbourHelper/4 AsIs: (/7 HalfReuse: (/13 } # Brackets/18 </19 & MarkupNeighbourHelper@1/20 Tile{ AsIs: e.Brackets/14 } >/21 Tile{ AsIs: )/8 } )/22 (/23 Tile{ AsIs: e.Suffix/16 } )/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_ident(vm, context[18], identifiers[ident_Brackets]);
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_gen_MarkupNeighbourHelper_Z1]);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::alloc_close_bracket(vm, context[22]);
      refalrts::alloc_open_bracket(vm, context[23]);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_MarkupNeighbourHelper]);
      refalrts::reinit_open_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[7], context[22] );
      refalrts::link_brackets( context[13], context[8] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_evar( res, context[18], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & MarkupNeighbourHelper@1/4 t.Item/7 e.Suffix/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Suffix as range 9
    //DEBUG: t.Item: 7
    //DEBUG: e.Suffix: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & MarkupNeighbourHelper/4 } (/11 Tile{ AsIs: t.Item/7 } )/12 (/13 Tile{ AsIs: e.Suffix/9 } )/14 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::update_name(context[4], functions[efunc_MarkupNeighbourHelper]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & MarkupNeighbourHelper@1/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & MarkupNeighbourHelper@1/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MarkupNeighbourHelper@1/4 e.dyn1/2 >/1
  // closed e.dyn1 as range 2
  //DEBUG: e.dyn1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MarkupNeighbourHelper@0/4 } (/5 )/6 (/7 Tile{ AsIs: e.dyn1/2 } )/8 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_gen_MarkupNeighbourHelper_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MarkupNeighbourHelper_Z1("MarkupNeighbourHelper@1", COOKIE1_, COOKIE2_, func_gen_MarkupNeighbourHelper_Z1);


static refalrts::FnResult func_gen_Map_Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Map@9/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@9/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Map@9/4 t.Multiplicity/5 t.Next/9 e.Tail/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.Tail as range 7
    //DEBUG: t.Multiplicity: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & MarkupMultipleAnchorTVars\1/4 AsIs: t.Multiplicity/5 AsIs: t.Next/9 } >/11 </12 & Map@9/13 t.Multiplicity/5/14 Tile{ AsIs: e.Tail/7 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z9]);
    refalrts::copy_evar(vm, context[14], context[15], context[5], context[6]);
    refalrts::update_name(context[4], functions[efunc_gen_MarkupMultipleAnchorTVars_L1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[11], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@9/4 t.Multiplicity/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Multiplicity: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@9/4 t.Multiplicity/5 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@9/4 t.Multiplicity/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.Multiplicity: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@0/4 } [*]/7 & MarkupMultipleAnchorTVars\1@0/8 Tile{ AsIs: t.Multiplicity/5 } {*}/9 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_MarkupMultipleAnchorTVars_L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[9], context[7]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::use( res );
  refalrts::wrap_closure( context[9] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z9("Map@9", COOKIE1_, COOKIE2_, func_gen_Map_Z9);


static refalrts::FnResult func_gen_DoMapAccum_Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & DoMapAccum@12/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@12/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@12/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@12/4 (/5 e.new8/21 )/6 (/9 e.new11/17 )/10 t.new9/15 e.new10/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      // closed e.new8 as range 21
      // closed e.new11 as range 17
      // closed e.new10 as range 19
      do {
        // </0 & DoMapAccum@12/4 (/5 e./23 )/6 (/9 e.Scanned/25 )/10 (/15 # Var/31 't'/32 e.2/29 )/16 e.Tail/27 >/1
        context[23] = context[21];
        context[24] = context[22];
        context[25] = context[17];
        context[26] = context[18];
        context[27] = context[19];
        context[28] = context[20];
        context[29] = 0;
        context[30] = 0;
        if( ! refalrts::brackets_term( context[29], context[30], context[15] ) )
          continue;
        context[31] = refalrts::ident_left( identifiers[ident_Var], context[29], context[30] );
        if( ! context[31] )
          continue;
        context[32] = refalrts::char_left( 't', context[29], context[30] );
        if( ! context[32] )
          continue;
        // closed e. as range 23
        // closed e.Scanned as range 25
        // closed e.2 as range 29
        // closed e.Tail as range 27
        //DEBUG: e.: 23
        //DEBUG: e.Scanned: 25
        //DEBUG: e.2: 29
        //DEBUG: e.Tail: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@12/4 AsIs: (/5 } Tile{ AsIs: e.Scanned/25 } Tile{ AsIs: )/6 AsIs: (/9 } Tile{ AsIs: e.Tail/27 } )/33 </34 Tile{ HalfReuse: & IncMultiplicity/10 AsIs: (/15 AsIs: # Var/31 AsIs: 't'/32 AsIs: e.2/29 AsIs: )/16 } (/35 Tile{ AsIs: e./23 } )/36 >/37 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[33]);
        refalrts::alloc_open_call(vm, context[34]);
        refalrts::alloc_open_bracket(vm, context[35]);
        refalrts::alloc_close_bracket(vm, context[36]);
        refalrts::alloc_close_call(vm, context[37]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z12]);
        refalrts::reinit_name(context[10], functions[efunc_IncMultiplicity]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[37] );
        refalrts::push_stack( vm, context[34] );
        refalrts::link_brackets( context[35], context[36] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[9], context[33] );
        refalrts::link_brackets( context[5], context[6] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[10], context[16] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[6], context[9] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@12/4 (/5 e./23 )/6 (/9 e.Scanned/25 )/10 t.Next/15 e.Tail/27 >/1
      context[23] = context[21];
      context[24] = context[22];
      context[25] = context[17];
      context[26] = context[18];
      context[27] = context[19];
      context[28] = context[20];
      // closed e. as range 23
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: t.Next: 15
      //DEBUG: e.: 23
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.Next/15 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@12/4 AsIs: (/5 AsIs: e./23 AsIs: )/6 AsIs: (/9 AsIs: e.Scanned/25 AsIs: )/10 } Tile{ AsIs: e.Tail/27 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::splice_to_freelist_open( vm, context[10], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@12/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@12/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & CountTVarsMultiplicity\1*2/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_CountTVarsMultiplicity_L1D2]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@12/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@12/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@12/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & CountTVarsMultiplicity\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CountTVarsMultiplicity_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z12("DoMapAccum@12", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z12);


static refalrts::FnResult func_gen_FilterConditions_L1D1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & FilterConditions\1*1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FilterConditions\1*1/4 (/7 t.new1/9 t.new2/11 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_left( context[9], context[5], context[6] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[12] = refalrts::tvar_left( context[11], context[5], context[6] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & FilterConditions\1*1/4 (/7 t.NumberedSentence-L/9 (/11 (/17 t.Pattern/33 e._/15 (/30 e._0/35 (/41 # CallBrackets/43 e.1/39 )/42 e._1/37 )/31 (/21 (/25 # Sentences/27 e.2/23 )/26 e._2/19 )/22 )/18 s.Num/32 )/12 )/8 >/1
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[11] ) )
      continue;
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_left( context[15], context[16], context[13], context[14] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_right( context[19], context[20], context[15], context[16] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    context[23] = 0;
    context[24] = 0;
    context[25] = refalrts::brackets_left( context[23], context[24], context[19], context[20] );
    if( ! context[25] )
      continue;
    refalrts::bracket_pointers(context[25], context[26]);
    context[27] = refalrts::ident_left( identifiers[ident_Sentences], context[23], context[24] );
    if( ! context[27] )
      continue;
    context[28] = 0;
    context[29] = 0;
    context[30] = refalrts::brackets_right( context[28], context[29], context[15], context[16] );
    if( ! context[30] )
      continue;
    refalrts::bracket_pointers(context[30], context[31]);
    // closed e.2 as range 23
    // closed e._2 as range 19
    if( ! refalrts::svar_left( context[32], context[13], context[14] ) )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    context[34] = refalrts::tvar_left( context[33], context[15], context[16] );
    if( ! context[34] )
      continue;
    // closed e._ as range 15
    context[35] = 0;
    context[36] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[37] = context[28];
      context[38] = context[29];
      context[39] = 0;
      context[40] = 0;
      context[41] = refalrts::brackets_left( context[39], context[40], context[37], context[38] );
      if( ! context[41] )
        continue;
      refalrts::bracket_pointers(context[41], context[42]);
      context[43] = refalrts::ident_left( identifiers[ident_CallBrackets], context[39], context[40] );
      if( ! context[43] )
        continue;
      // closed e.1 as range 39
      // closed e._1 as range 37
      //DEBUG: t.NumberedSentence-L: 9
      //DEBUG: e.2: 23
      //DEBUG: e._2: 19
      //DEBUG: s.Num: 32
      //DEBUG: t.Pattern: 33
      //DEBUG: e._: 15
      //DEBUG: e._0: 35
      //DEBUG: e.1: 39
      //DEBUG: e._1: 37

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & FilterConditions\1*1/4 (/7 t.NumberedSentence-L/9 (/11 (/17 t.Pattern/33 e._/15 (/30 e._0/35 (/41 # CallBrackets/43 e.1/39 )/42 e._1/37 )/31 (/21 (/25 # Sentences/27 e.2/23 )/26 e._2/19 )/22 )/18 s.Num/32 )/12 )/8 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[35], context[36], context[28], context[29] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FilterConditions\1*1/4 (/7 t.NumberedSentence-L/9 t.NumberedSentence-R/11 )/8 >/1
  //DEBUG: t.NumberedSentence-L: 9
  //DEBUG: t.NumberedSentence-R: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & FilterConditions\1*1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: t.NumberedSentence-L/9 AsIs: t.NumberedSentence-R/11 AsIs: )/8 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FilterConditions_L1D1("FilterConditions\\1*1", COOKIE1_, COOKIE2_, func_gen_FilterConditions_L1D1);


static refalrts::FnResult func_gen_Apply_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@3/4 t.new1/5 e.new2/2 t.new3/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply@3/4 s.Fn/5 e.X/9 t.X/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X as range 9
    //DEBUG: t.X: 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.X: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.X/9 AsIs: t.X/7 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@3/4 (/5 t.Closure/13 e.Bounded/11 )/6 e.X/9 t.X/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    // closed e.X as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded as range 11
    //DEBUG: t.X: 7
    //DEBUG: e.X: 9
    //DEBUG: t.Closure: 13
    //DEBUG: e.Bounded: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@3/4 } Tile{ AsIs: t.Closure/13 } Tile{ AsIs: e.Bounded/11 } Tile{ AsIs: e.X/9 } Tile{ AsIs: t.X/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@3/4 t.dyn0/5 e.X/2 t.X/7 >/1
  // closed e.X as range 2
  //DEBUG: t.dyn0: 5
  //DEBUG: t.X: 7
  //DEBUG: e.X: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: e.X/2 AsIs: t.X/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z3("Apply@3", COOKIE1_, COOKIE2_, func_gen_Apply_Z3);


static refalrts::FnResult func_gen_Apply_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Apply@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@4/4 t.new1/5 e.new2/2 t.new3/9 t.new4/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_right( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply@4/4 s.Fn/5 e.X/11 t.X/9 t.X0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X as range 11
    //DEBUG: t.X: 9
    //DEBUG: t.X0: 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.X: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.X/11 AsIs: t.X/9 AsIs: t.X0/7 HalfReuse: & $table/1 } >/13 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@4/4 (/5 t.Closure/15 e.Bounded/13 )/6 e.X/11 t.X/9 t.X0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
      continue;
    // closed e.X as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Bounded as range 13
    //DEBUG: t.X: 9
    //DEBUG: t.X0: 7
    //DEBUG: e.X: 11
    //DEBUG: t.Closure: 15
    //DEBUG: e.Bounded: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@4/4 } Tile{ AsIs: t.Closure/15 } Tile{ AsIs: e.Bounded/13 } Tile{ AsIs: e.X/11 } Tile{ AsIs: t.X/9 AsIs: t.X0/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@4/4 t.dyn0/5 e.X/2 t.X/9 t.X0/7 >/1
  // closed e.X as range 2
  //DEBUG: t.dyn0: 5
  //DEBUG: t.X: 9
  //DEBUG: t.X0: 7
  //DEBUG: e.X: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: e.X/2 AsIs: t.X/9 AsIs: t.X0/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z4("Apply@4", COOKIE1_, COOKIE2_, func_gen_Apply_Z4);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@1/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@1/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@1/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & FindFunctionsPosInAST\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FindFunctionsPosInAST_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z1("DoMapAccum$1=1@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@2/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@2/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@2/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & Enumerate=1\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_Enumerate_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z2("DoMapAccum$1=1@2", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z2);


static refalrts::FnResult func_gen_CheckSentences_A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & CheckSentences=2@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences=2@1/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 2
  do {
    // </0 & CheckSentences=2@1/4 t.SrcPos0/5 (/9 e.Name/15 )/10 (/13 e.Sentences0/17 )/14 e.NumberedSentencesPairs/19 >/1
    context[15] = context[7];
    context[16] = context[8];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.Name as range 15
    // closed e.Sentences0 as range 17
    // closed e.NumberedSentencesPairs as range 19
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.Name: 15
    //DEBUG: e.Sentences0: 17
    //DEBUG: e.NumberedSentencesPairs: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=3@1/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.Name/15 AsIs: )/10 AsIs: (/13 AsIs: e.Sentences0/17 AsIs: )/14 } </21 & Map@4/22 Tile{ AsIs: e.NumberedSentencesPairs/19 } >/23 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_Map_Z4]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A3Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences=2@1/4 t.SrcPos0/5 (/9 e.Name/7 )/10 (/13 e.Sentences0/11 )/14 e.dyn/2 >/1
  // closed e.Name as range 7
  // closed e.Sentences0 as range 11
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.Name: 7
  //DEBUG: e.Sentences0: 11
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=2@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.Name/7 AsIs: )/10 AsIs: (/13 } )/15 (/16 )/17 (/18 Tile{ AsIs: e.Sentences0/11 } Tile{ AsIs: )/14 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A2Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[18], context[14] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[13], context[15] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[14];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[15], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_A2Z1("CheckSentences=2@1", COOKIE1_, COOKIE2_, func_gen_CheckSentences_A2Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & DoMapAccum$1=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@3/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 e.new6/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 2
  do {
    // </0 & DoMapAccum$1=1@3/4 t.SrcPos/5 (/9 e.FuncName/23 )/10 (/13 e.Prefix$a/25 )/14 (/17 e.Scanned0/27 )/18 (/21 e.Tail0/29 )/22 t.Acc$a/33 e.StepScanned/31 >/1
    context[23] = context[7];
    context[24] = context[8];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.FuncName as range 23
    // closed e.Prefix$a as range 25
    // closed e.Scanned0 as range 27
    // closed e.Tail0 as range 29
    context[34] = refalrts::tvar_left( context[33], context[31], context[32] );
    if( ! context[34] )
      continue;
    // closed e.StepScanned as range 31
    //DEBUG: t.SrcPos: 5
    //DEBUG: e.FuncName: 23
    //DEBUG: e.Prefix$a: 25
    //DEBUG: e.Scanned0: 27
    //DEBUG: e.Tail0: 29
    //DEBUG: t.Acc$a: 33
    //DEBUG: e.StepScanned: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} )/18 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@3/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/23 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/25 AsIs: )/14 } Tile{ AsIs: t.Acc$a/33 } Tile{ AsIs: (/21 } Tile{ AsIs: e.Scanned0/27 } Tile{ AsIs: e.StepScanned/31 } Tile{ AsIs: )/22 } Tile{ AsIs: e.Tail0/29 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    refalrts::splice_to_freelist_open( vm, context[14], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@3/4 t.SrcPos/5 (/9 e.FuncName/7 )/10 (/13 e.Prefix$a/11 )/14 (/17 e.Scanned0/15 )/18 (/21 e.Tail0/19 )/22 e.dyn/2 >/1
  // closed e.FuncName as range 7
  // closed e.Prefix$a as range 11
  // closed e.Scanned0 as range 15
  // closed e.Tail0 as range 19
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos: 5
  //DEBUG: e.FuncName: 7
  //DEBUG: e.Prefix$a: 11
  //DEBUG: e.Scanned0: 15
  //DEBUG: e.Tail0: 19
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </23 & DoMapAccum$1=1@0/24 Tile{ HalfReuse: [*]/0 Reuse: & CheckSentenceAssignsAndConditions\1@0/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/7 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Prefix$a/11 } )/25 Tile{ HalfReuse: {*}/14 AsIs: (/17 AsIs: e.Scanned0/15 AsIs: )/18 AsIs: (/21 AsIs: e.Tail0/19 AsIs: )/22 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_name(vm, context[24], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_close_bracket(vm, context[25]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentenceAssignsAndConditions_L1Z0]);
  refalrts::reinit_unwrapped_closure(context[14], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[25] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[14];
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[0], context[13] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  refalrts::use( res );
  refalrts::wrap_closure( context[14] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z3("DoMapAccum$1=1@3", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z3);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  // </0 & DoMapAccum$1=1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@4/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 e.new8/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  // closed e.new8 as range 2
  do {
    // </0 & DoMapAccum$1=1@4/4 t.SrcPos/5 (/9 e.FuncName/31 )/10 (/13 e.Prefix$a/33 )/14 (/17 e.ContextVars$a/35 )/18 (/21 e.ContextAllAssignsOrConds/37 )/22 (/25 e.Scanned0/39 )/26 (/29 e.Tail0/41 )/30 t.Acc$a/45 e.StepScanned/43 >/1
    context[31] = context[7];
    context[32] = context[8];
    context[33] = context[11];
    context[34] = context[12];
    context[35] = context[15];
    context[36] = context[16];
    context[37] = context[19];
    context[38] = context[20];
    context[39] = context[23];
    context[40] = context[24];
    context[41] = context[27];
    context[42] = context[28];
    context[43] = context[2];
    context[44] = context[3];
    // closed e.FuncName as range 31
    // closed e.Prefix$a as range 33
    // closed e.ContextVars$a as range 35
    // closed e.ContextAllAssignsOrConds as range 37
    // closed e.Scanned0 as range 39
    // closed e.Tail0 as range 41
    context[46] = refalrts::tvar_left( context[45], context[43], context[44] );
    if( ! context[46] )
      continue;
    // closed e.StepScanned as range 43
    //DEBUG: t.SrcPos: 5
    //DEBUG: e.FuncName: 31
    //DEBUG: e.Prefix$a: 33
    //DEBUG: e.ContextVars$a: 35
    //DEBUG: e.ContextAllAssignsOrConds: 37
    //DEBUG: e.Scanned0: 39
    //DEBUG: e.Tail0: 41
    //DEBUG: t.Acc$a: 45
    //DEBUG: e.StepScanned: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/25 {REMOVED TILE} )/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@4/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/31 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/33 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars$a/35 AsIs: )/18 AsIs: (/21 AsIs: e.ContextAllAssignsOrConds/37 AsIs: )/22 } Tile{ AsIs: t.Acc$a/45 } Tile{ AsIs: (/29 } Tile{ AsIs: e.Scanned0/39 } Tile{ AsIs: e.StepScanned/43 } Tile{ AsIs: )/30 } Tile{ AsIs: e.Tail0/41 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    refalrts::splice_to_freelist_open( vm, context[22], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@4/4 t.SrcPos/5 (/9 e.FuncName/7 )/10 (/13 e.Prefix$a/11 )/14 (/17 e.ContextVars$a/15 )/18 (/21 e.ContextAllAssignsOrConds/19 )/22 (/25 e.Scanned0/23 )/26 (/29 e.Tail0/27 )/30 e.dyn/2 >/1
  // closed e.FuncName as range 7
  // closed e.Prefix$a as range 11
  // closed e.ContextVars$a as range 15
  // closed e.ContextAllAssignsOrConds as range 19
  // closed e.Scanned0 as range 23
  // closed e.Tail0 as range 27
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos: 5
  //DEBUG: e.FuncName: 7
  //DEBUG: e.Prefix$a: 11
  //DEBUG: e.ContextVars$a: 15
  //DEBUG: e.ContextAllAssignsOrConds: 19
  //DEBUG: e.Scanned0: 23
  //DEBUG: e.Tail0: 27
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </21 } & DoMapAccum$1=1@0/31 Tile{ HalfReuse: [*]/0 Reuse: & CheckExpression\1@0/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/11 AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.ContextVars$a/15 } Tile{ AsIs: e.ContextAllAssignsOrConds/19 } Tile{ AsIs: )/18 } Tile{ HalfReuse: {*}/22 AsIs: (/25 AsIs: e.Scanned0/23 AsIs: )/26 AsIs: (/29 AsIs: e.Tail0/27 AsIs: )/30 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[31], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::reinit_open_call(context[21]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckExpression_L1Z0]);
  refalrts::reinit_unwrapped_closure(context[22], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[22];
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[0], context[17] );
  res = refalrts::splice_elem( res, context[31] );
  res = refalrts::splice_elem( res, context[21] );
  refalrts::use( res );
  refalrts::wrap_closure( context[22] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z4("DoMapAccum$1=1@4", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z4);


static refalrts::FnResult func_gen_CheckSentences_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & CheckSentences@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences@3/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 e.new7/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 2
  do {
    // </0 & CheckSentences@3/4 t.SrcPos0/5 (/9 e.FuncName0/27 )/10 (/13 e.Prefix$a/29 )/14 (/17 e.Call/31 )/18 (/21 e.ContextVars$a/33 )/22 (/25 e.ContextAllAssignsOrConds/35 )/26 e.1/37 >/1
    context[27] = context[7];
    context[28] = context[8];
    context[29] = context[11];
    context[30] = context[12];
    context[31] = context[15];
    context[32] = context[16];
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[23];
    context[36] = context[24];
    context[37] = context[2];
    context[38] = context[3];
    // closed e.FuncName0 as range 27
    // closed e.Prefix$a as range 29
    // closed e.Call as range 31
    // closed e.ContextVars$a as range 33
    // closed e.ContextAllAssignsOrConds as range 35
    // closed e.1 as range 37
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 27
    //DEBUG: e.Prefix$a: 29
    //DEBUG: e.Call: 31
    //DEBUG: e.ContextVars$a: 33
    //DEBUG: e.ContextAllAssignsOrConds: 35
    //DEBUG: e.1: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=1@4/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/27 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/29 AsIs: )/14 AsIs: (/17 AsIs: e.Call/31 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars$a/33 AsIs: )/22 AsIs: (/25 AsIs: e.ContextAllAssignsOrConds/35 AsIs: )/26 } (/39 e.1/37/40 )/42 </43 & Enumerate=1/44 </45 & DoMapAccum@2/46 1/47 (/48 )/49 Tile{ AsIs: e.1/37 } >/50 >/51 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::copy_evar(vm, context[40], context[41], context[37], context[38]);
    refalrts::alloc_close_bracket(vm, context[42]);
    refalrts::alloc_open_call(vm, context[43]);
    refalrts::alloc_name(vm, context[44], functions[efunc_gen_Enumerate_A1]);
    refalrts::alloc_open_call(vm, context[45]);
    refalrts::alloc_name(vm, context[46], functions[efunc_gen_DoMapAccum_Z2]);
    refalrts::alloc_number(vm, context[47], 1UL);
    refalrts::alloc_open_bracket(vm, context[48]);
    refalrts::alloc_close_bracket(vm, context[49]);
    refalrts::alloc_close_call(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A1Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[50] );
    refalrts::push_stack( vm, context[45] );
    refalrts::link_brackets( context[48], context[49] );
    refalrts::link_brackets( context[39], context[42] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[39], context[49] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences@3/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix$a/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars$a/19 )/22 (/25 e.ContextAllAssignsOrConds/23 )/26 e.1/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix$a as range 11
  // closed e.Call as range 15
  // closed e.ContextVars$a as range 19
  // closed e.ContextAllAssignsOrConds as range 23
  // closed e.1 as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix$a: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars$a: 19
  //DEBUG: e.ContextAllAssignsOrConds: 23
  //DEBUG: e.1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/11 HalfReuse: '\\'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/22 AsIs: (/25 } Tile{ AsIs: e.ContextVars$a/19 } Tile{ AsIs: e.ContextAllAssignsOrConds/23 } Tile{ AsIs: )/18 AsIs: (/21 } Tile{ AsIs: e.1/2 } Tile{ AsIs: )/26 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_Z0]);
  refalrts::reinit_char(context[14], '\\');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[21], context[26] );
  refalrts::link_brackets( context[25], context[18] );
  refalrts::link_brackets( context[13], context[22] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[18], context[21] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[22], context[25] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_Z3("CheckSentences@3", COOKIE1_, COOKIE2_, func_gen_CheckSentences_Z3);


static refalrts::FnResult func_gen_CheckSentences_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & CheckSentences@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences@4/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 e.new7/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 2
  do {
    // </0 & CheckSentences@4/4 t.SrcPos0/5 (/9 e.FuncName0/27 )/10 (/13 e.Prefix$a/29 )/14 (/17 e.Call/31 )/18 (/21 e.ContextVars$a/33 )/22 (/25 e.ContextAllAssignsOrConds/35 )/26 e.0/37 >/1
    context[27] = context[7];
    context[28] = context[8];
    context[29] = context[11];
    context[30] = context[12];
    context[31] = context[15];
    context[32] = context[16];
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[23];
    context[36] = context[24];
    context[37] = context[2];
    context[38] = context[3];
    // closed e.FuncName0 as range 27
    // closed e.Prefix$a as range 29
    // closed e.Call as range 31
    // closed e.ContextVars$a as range 33
    // closed e.ContextAllAssignsOrConds as range 35
    // closed e.0 as range 37
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 27
    //DEBUG: e.Prefix$a: 29
    //DEBUG: e.Call: 31
    //DEBUG: e.ContextVars$a: 33
    //DEBUG: e.ContextAllAssignsOrConds: 35
    //DEBUG: e.0: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=1@5/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/27 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/29 AsIs: )/14 AsIs: (/17 AsIs: e.Call/31 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars$a/33 AsIs: )/22 AsIs: (/25 AsIs: e.ContextAllAssignsOrConds/35 AsIs: )/26 } (/39 e.0/37/40 )/42 </43 & Enumerate=1/44 </45 & DoMapAccum@2/46 1/47 (/48 )/49 Tile{ AsIs: e.0/37 } >/50 >/51 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::copy_evar(vm, context[40], context[41], context[37], context[38]);
    refalrts::alloc_close_bracket(vm, context[42]);
    refalrts::alloc_open_call(vm, context[43]);
    refalrts::alloc_name(vm, context[44], functions[efunc_gen_Enumerate_A1]);
    refalrts::alloc_open_call(vm, context[45]);
    refalrts::alloc_name(vm, context[46], functions[efunc_gen_DoMapAccum_Z2]);
    refalrts::alloc_number(vm, context[47], 1UL);
    refalrts::alloc_open_bracket(vm, context[48]);
    refalrts::alloc_close_bracket(vm, context[49]);
    refalrts::alloc_close_call(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A1Z5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[50] );
    refalrts::push_stack( vm, context[45] );
    refalrts::link_brackets( context[48], context[49] );
    refalrts::link_brackets( context[39], context[42] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[39], context[49] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences@4/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix$a/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars$a/19 )/22 (/25 e.ContextAllAssignsOrConds/23 )/26 e.0/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix$a as range 11
  // closed e.Call as range 15
  // closed e.ContextVars$a as range 19
  // closed e.ContextAllAssignsOrConds as range 23
  // closed e.0 as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix$a: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars$a: 19
  //DEBUG: e.ContextAllAssignsOrConds: 23
  //DEBUG: e.0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/11 HalfReuse: ':'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/22 AsIs: (/25 } Tile{ AsIs: e.ContextVars$a/19 } Tile{ AsIs: e.ContextAllAssignsOrConds/23 } Tile{ AsIs: )/18 AsIs: (/21 } Tile{ AsIs: e.0/2 } Tile{ AsIs: )/26 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_Z0]);
  refalrts::reinit_char(context[14], ':');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[21], context[26] );
  refalrts::link_brackets( context[25], context[18] );
  refalrts::link_brackets( context[13], context[22] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[18], context[21] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[22], context[25] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_Z4("CheckSentences@4", COOKIE1_, COOKIE2_, func_gen_CheckSentences_Z4);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  // </0 & DoMapAccum$1=1@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@5/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 e.new8/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  // closed e.new8 as range 2
  do {
    // </0 & DoMapAccum$1=1@5/4 t.SrcPos/5 (/9 e.FuncName/31 )/10 (/13 e.Prefix$a/33 )/14 (/17 e.ContextVars$a/35 )/18 (/21 e.ContextAllAssignsOrConds/37 )/22 (/25 e.Scanned0/39 )/26 (/29 e.Tail0/41 )/30 t.Acc$a/45 e.StepScanned/43 >/1
    context[31] = context[7];
    context[32] = context[8];
    context[33] = context[11];
    context[34] = context[12];
    context[35] = context[15];
    context[36] = context[16];
    context[37] = context[19];
    context[38] = context[20];
    context[39] = context[23];
    context[40] = context[24];
    context[41] = context[27];
    context[42] = context[28];
    context[43] = context[2];
    context[44] = context[3];
    // closed e.FuncName as range 31
    // closed e.Prefix$a as range 33
    // closed e.ContextVars$a as range 35
    // closed e.ContextAllAssignsOrConds as range 37
    // closed e.Scanned0 as range 39
    // closed e.Tail0 as range 41
    context[46] = refalrts::tvar_left( context[45], context[43], context[44] );
    if( ! context[46] )
      continue;
    // closed e.StepScanned as range 43
    //DEBUG: t.SrcPos: 5
    //DEBUG: e.FuncName: 31
    //DEBUG: e.Prefix$a: 33
    //DEBUG: e.ContextVars$a: 35
    //DEBUG: e.ContextAllAssignsOrConds: 37
    //DEBUG: e.Scanned0: 39
    //DEBUG: e.Tail0: 41
    //DEBUG: t.Acc$a: 45
    //DEBUG: e.StepScanned: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/25 {REMOVED TILE} )/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@5/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/31 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/33 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars$a/35 AsIs: )/18 AsIs: (/21 AsIs: e.ContextAllAssignsOrConds/37 AsIs: )/22 } Tile{ AsIs: t.Acc$a/45 } Tile{ AsIs: (/29 } Tile{ AsIs: e.Scanned0/39 } Tile{ AsIs: e.StepScanned/43 } Tile{ AsIs: )/30 } Tile{ AsIs: e.Tail0/41 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    refalrts::splice_to_freelist_open( vm, context[22], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@5/4 t.SrcPos/5 (/9 e.FuncName/7 )/10 (/13 e.Prefix$a/11 )/14 (/17 e.ContextVars$a/15 )/18 (/21 e.ContextAllAssignsOrConds/19 )/22 (/25 e.Scanned0/23 )/26 (/29 e.Tail0/27 )/30 e.dyn/2 >/1
  // closed e.FuncName as range 7
  // closed e.Prefix$a as range 11
  // closed e.ContextVars$a as range 15
  // closed e.ContextAllAssignsOrConds as range 19
  // closed e.Scanned0 as range 23
  // closed e.Tail0 as range 27
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos: 5
  //DEBUG: e.FuncName: 7
  //DEBUG: e.Prefix$a: 11
  //DEBUG: e.ContextVars$a: 15
  //DEBUG: e.ContextAllAssignsOrConds: 19
  //DEBUG: e.Scanned0: 23
  //DEBUG: e.Tail0: 27
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </21 } & DoMapAccum$1=1@0/31 Tile{ HalfReuse: [*]/0 Reuse: & CheckBlocks\1@0/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/11 AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.ContextVars$a/15 } Tile{ AsIs: e.ContextAllAssignsOrConds/19 } Tile{ AsIs: )/18 } Tile{ HalfReuse: {*}/22 AsIs: (/25 AsIs: e.Scanned0/23 AsIs: )/26 AsIs: (/29 AsIs: e.Tail0/27 AsIs: )/30 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[31], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::reinit_open_call(context[21]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckBlocks_L1Z0]);
  refalrts::reinit_unwrapped_closure(context[22], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[22];
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[0], context[17] );
  res = refalrts::splice_elem( res, context[31] );
  res = refalrts::splice_elem( res, context[21] );
  refalrts::use( res );
  refalrts::wrap_closure( context[22] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z5("DoMapAccum$1=1@5", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z5);


static refalrts::FnResult func_gen_DoMapAccum_Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 130 elems
  refalrts::Iter context[130];
  refalrts::zeros( context, 130 );
  // </0 & DoMapAccum@13/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@13/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 t.new7/27 (/31 e.new8/29 )/32 e.new9/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  context[28] = refalrts::tvar_left( context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.new8 as range 29
  // closed e.new9 as range 2
  do {
    // </0 & DoMapAccum@13/4 t.new10/5 (/9 e.new14/33 )/10 (/13 e.new15/35 )/14 (/17 e.new16/37 )/18 (/21 e.new17/39 )/22 (/25 e.new18/41 )/26 t.new11/27 (/31 e.new19/43 )/32 t.new12/47 e.new13/45 >/1
    context[33] = context[7];
    context[34] = context[8];
    context[35] = context[11];
    context[36] = context[12];
    context[37] = context[15];
    context[38] = context[16];
    context[39] = context[19];
    context[40] = context[20];
    context[41] = context[23];
    context[42] = context[24];
    context[43] = context[29];
    context[44] = context[30];
    context[45] = context[2];
    context[46] = context[3];
    // closed e.new14 as range 33
    // closed e.new15 as range 35
    // closed e.new16 as range 37
    // closed e.new17 as range 39
    // closed e.new18 as range 41
    // closed e.new19 as range 43
    context[48] = refalrts::tvar_left( context[47], context[45], context[46] );
    if( ! context[48] )
      continue;
    // closed e.new13 as range 45
    do {
      // </0 & DoMapAccum@13/4 t.new20/5 (/9 e.new24/49 )/10 (/13 e.new25/51 )/14 (/17 e.new26/53 )/18 (/21 e.new27/55 )/22 (/25 e.new28/57 )/26 s.new21/27 (/31 e.new29/59 )/32 t.new22/47 e.new23/61 >/1
      context[49] = context[33];
      context[50] = context[34];
      context[51] = context[35];
      context[52] = context[36];
      context[53] = context[37];
      context[54] = context[38];
      context[55] = context[39];
      context[56] = context[40];
      context[57] = context[41];
      context[58] = context[42];
      context[59] = context[43];
      context[60] = context[44];
      context[61] = context[45];
      context[62] = context[46];
      if( ! refalrts::svar_term( context[27], context[27] ) )
        continue;
      // closed e.new24 as range 49
      // closed e.new25 as range 51
      // closed e.new26 as range 53
      // closed e.new27 as range 55
      // closed e.new28 as range 57
      // closed e.new29 as range 59
      // closed e.new23 as range 61
      do {
        // </0 & DoMapAccum@13/4 t.new30/5 (/9 e.new35/63 )/10 (/13 e.new36/65 )/14 (/17 e.new37/67 )/18 (/21 e.new38/69 )/22 (/25 e.new39/71 )/26 s.new31/27 (/31 e.new40/73 )/32 (/47 s.new32/79 e.new33/77 )/48 e.new34/75 >/1
        context[63] = context[49];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[52];
        context[67] = context[53];
        context[68] = context[54];
        context[69] = context[55];
        context[70] = context[56];
        context[71] = context[57];
        context[72] = context[58];
        context[73] = context[59];
        context[74] = context[60];
        context[75] = context[61];
        context[76] = context[62];
        context[77] = 0;
        context[78] = 0;
        if( ! refalrts::brackets_term( context[77], context[78], context[47] ) )
          continue;
        // closed e.new35 as range 63
        // closed e.new36 as range 65
        // closed e.new37 as range 67
        // closed e.new38 as range 69
        // closed e.new39 as range 71
        // closed e.new40 as range 73
        // closed e.new34 as range 75
        if( ! refalrts::svar_left( context[79], context[77], context[78] ) )
          continue;
        // closed e.new33 as range 77
        do {
          // </0 & DoMapAccum@13/4 t.SrcPos0/5 (/9 e.FuncName0/80 )/10 (/13 e.Prefix$a0/82 )/14 (/17 e.ContextVars/84 )/18 (/21 e.Pattern0/86 )/22 (/25 e.ContextAllAssignsOrConds/88 )/26 s.Num/27 (/31 e.Scanned/90 )/32 (/47 # Brackets/79 e.0/92 )/48 e.Tail/94 >/1
          context[80] = context[63];
          context[81] = context[64];
          context[82] = context[65];
          context[83] = context[66];
          context[84] = context[67];
          context[85] = context[68];
          context[86] = context[69];
          context[87] = context[70];
          context[88] = context[71];
          context[89] = context[72];
          context[90] = context[73];
          context[91] = context[74];
          context[92] = context[77];
          context[93] = context[78];
          context[94] = context[75];
          context[95] = context[76];
          if( ! refalrts::ident_term( identifiers[ident_Brackets], context[79] ) )
            continue;
          // closed e.FuncName0 as range 80
          // closed e.Prefix$a0 as range 82
          // closed e.ContextVars as range 84
          // closed e.Pattern0 as range 86
          // closed e.ContextAllAssignsOrConds as range 88
          // closed e.Scanned as range 90
          // closed e.0 as range 92
          // closed e.Tail as range 94
          //DEBUG: t.SrcPos0: 5
          //DEBUG: s.Num: 27
          //DEBUG: e.FuncName0: 80
          //DEBUG: e.Prefix$a0: 82
          //DEBUG: e.ContextVars: 84
          //DEBUG: e.Pattern0: 86
          //DEBUG: e.ContextAllAssignsOrConds: 88
          //DEBUG: e.Scanned: 90
          //DEBUG: e.0: 92
          //DEBUG: e.Tail: 94

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@13/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/80 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/82 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars/84 AsIs: )/18 AsIs: (/21 AsIs: e.Pattern0/86 AsIs: )/22 AsIs: (/25 AsIs: e.ContextAllAssignsOrConds/88 AsIs: )/26 } Tile{ AsIs: (/31 AsIs: e.Scanned/90 AsIs: )/32 AsIs: (/47 } Tile{ AsIs: e.Tail/94 } )/96 Tile{ AsIs: s.Num/27 } </97 & DelAccumulator/98 </99 & DoMapAccum@13/100 t.SrcPos0/5/101 (/103 e.FuncName0/80/104 )/106 (/107 e.Prefix$a0/82/108 )/110 (/111 e.ContextVars/84/112 )/114 (/115 e.Pattern0/86/116 )/118 (/119 e.ContextAllAssignsOrConds/88/120 )/122 1/123 (/124 Tile{ HalfReuse: )/79 AsIs: e.0/92 HalfReuse: >/48 } >/125 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[96]);
          refalrts::alloc_open_call(vm, context[97]);
          refalrts::alloc_name(vm, context[98], functions[efunc_DelAccumulator]);
          refalrts::alloc_open_call(vm, context[99]);
          refalrts::alloc_name(vm, context[100], functions[efunc_gen_DoMapAccum_Z13]);
          refalrts::copy_evar(vm, context[101], context[102], context[5], context[6]);
          refalrts::alloc_open_bracket(vm, context[103]);
          refalrts::copy_evar(vm, context[104], context[105], context[80], context[81]);
          refalrts::alloc_close_bracket(vm, context[106]);
          refalrts::alloc_open_bracket(vm, context[107]);
          refalrts::copy_evar(vm, context[108], context[109], context[82], context[83]);
          refalrts::alloc_close_bracket(vm, context[110]);
          refalrts::alloc_open_bracket(vm, context[111]);
          refalrts::copy_evar(vm, context[112], context[113], context[84], context[85]);
          refalrts::alloc_close_bracket(vm, context[114]);
          refalrts::alloc_open_bracket(vm, context[115]);
          refalrts::copy_evar(vm, context[116], context[117], context[86], context[87]);
          refalrts::alloc_close_bracket(vm, context[118]);
          refalrts::alloc_open_bracket(vm, context[119]);
          refalrts::copy_evar(vm, context[120], context[121], context[88], context[89]);
          refalrts::alloc_close_bracket(vm, context[122]);
          refalrts::alloc_number(vm, context[123], 1UL);
          refalrts::alloc_open_bracket(vm, context[124]);
          refalrts::alloc_close_call(vm, context[125]);
          refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z13]);
          refalrts::reinit_close_bracket(context[79]);
          refalrts::reinit_close_call(context[48]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[125] );
          refalrts::push_stack( vm, context[97] );
          refalrts::push_stack( vm, context[48] );
          refalrts::push_stack( vm, context[99] );
          refalrts::link_brackets( context[124], context[79] );
          refalrts::link_brackets( context[119], context[122] );
          refalrts::link_brackets( context[115], context[118] );
          refalrts::link_brackets( context[111], context[114] );
          refalrts::link_brackets( context[107], context[110] );
          refalrts::link_brackets( context[103], context[106] );
          refalrts::link_brackets( context[47], context[96] );
          refalrts::link_brackets( context[31], context[32] );
          refalrts::link_brackets( context[25], context[26] );
          refalrts::link_brackets( context[21], context[22] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[125] );
          res = refalrts::splice_evar( res, context[79], context[48] );
          res = refalrts::splice_evar( res, context[97], context[124] );
          res = refalrts::splice_elem( res, context[27] );
          res = refalrts::splice_elem( res, context[96] );
          res = refalrts::splice_evar( res, context[94], context[95] );
          res = refalrts::splice_evar( res, context[31], context[47] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoMapAccum@13/4 t.SrcPos0/5 (/9 e.FuncName0/80 )/10 (/13 e.Prefix$a0/82 )/14 (/17 e.ContextVars/84 )/18 (/21 e.Pattern0/86 )/22 (/25 e.ContextAllAssignsOrConds/88 )/26 s.Num/27 (/31 e.Scanned/90 )/32 (/47 # ADT-Brackets/79 t.0/96 (/100 e.3/98 )/101 e.2/92 )/48 e.Tail/94 >/1
          context[80] = context[63];
          context[81] = context[64];
          context[82] = context[65];
          context[83] = context[66];
          context[84] = context[67];
          context[85] = context[68];
          context[86] = context[69];
          context[87] = context[70];
          context[88] = context[71];
          context[89] = context[72];
          context[90] = context[73];
          context[91] = context[74];
          context[92] = context[77];
          context[93] = context[78];
          context[94] = context[75];
          context[95] = context[76];
          if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[79] ) )
            continue;
          // closed e.FuncName0 as range 80
          // closed e.Prefix$a0 as range 82
          // closed e.ContextVars as range 84
          // closed e.Pattern0 as range 86
          // closed e.ContextAllAssignsOrConds as range 88
          // closed e.Scanned as range 90
          // closed e.Tail as range 94
          context[97] = refalrts::tvar_left( context[96], context[92], context[93] );
          if( ! context[97] )
            continue;
          context[98] = 0;
          context[99] = 0;
          context[100] = refalrts::brackets_left( context[98], context[99], context[92], context[93] );
          if( ! context[100] )
            continue;
          refalrts::bracket_pointers(context[100], context[101]);
          // closed e.3 as range 98
          // closed e.2 as range 92
          //DEBUG: t.SrcPos0: 5
          //DEBUG: s.Num: 27
          //DEBUG: e.FuncName0: 80
          //DEBUG: e.Prefix$a0: 82
          //DEBUG: e.ContextVars: 84
          //DEBUG: e.Pattern0: 86
          //DEBUG: e.ContextAllAssignsOrConds: 88
          //DEBUG: e.Scanned: 90
          //DEBUG: e.Tail: 94
          //DEBUG: t.0: 96
          //DEBUG: e.3: 98
          //DEBUG: e.2: 92

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.0/96 {REMOVED TILE} e.3/98 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@13/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/80 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/82 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars/84 AsIs: )/18 AsIs: (/21 AsIs: e.Pattern0/86 AsIs: )/22 AsIs: (/25 AsIs: e.ContextAllAssignsOrConds/88 AsIs: )/26 } Tile{ AsIs: (/31 AsIs: e.Scanned/90 AsIs: )/32 AsIs: (/47 } Tile{ AsIs: e.Tail/94 } )/102 Tile{ AsIs: s.Num/27 } </103 Tile{ HalfReuse: & DelAccumulator/79 } </104 & DoMapAccum@13/105 t.SrcPos0/5/106 Tile{ AsIs: (/100 } e.FuncName0/80/108 )/110 (/111 e.Prefix$a0/82/112 )/114 (/115 e.ContextVars/84/116 )/118 (/119 e.Pattern0/86/120 )/122 (/123 e.ContextAllAssignsOrConds/88/124 )/126 1/127 (/128 Tile{ AsIs: )/101 AsIs: e.2/92 HalfReuse: >/48 } >/129 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[102]);
          refalrts::alloc_open_call(vm, context[103]);
          refalrts::alloc_open_call(vm, context[104]);
          refalrts::alloc_name(vm, context[105], functions[efunc_gen_DoMapAccum_Z13]);
          refalrts::copy_evar(vm, context[106], context[107], context[5], context[6]);
          refalrts::copy_evar(vm, context[108], context[109], context[80], context[81]);
          refalrts::alloc_close_bracket(vm, context[110]);
          refalrts::alloc_open_bracket(vm, context[111]);
          refalrts::copy_evar(vm, context[112], context[113], context[82], context[83]);
          refalrts::alloc_close_bracket(vm, context[114]);
          refalrts::alloc_open_bracket(vm, context[115]);
          refalrts::copy_evar(vm, context[116], context[117], context[84], context[85]);
          refalrts::alloc_close_bracket(vm, context[118]);
          refalrts::alloc_open_bracket(vm, context[119]);
          refalrts::copy_evar(vm, context[120], context[121], context[86], context[87]);
          refalrts::alloc_close_bracket(vm, context[122]);
          refalrts::alloc_open_bracket(vm, context[123]);
          refalrts::copy_evar(vm, context[124], context[125], context[88], context[89]);
          refalrts::alloc_close_bracket(vm, context[126]);
          refalrts::alloc_number(vm, context[127], 1UL);
          refalrts::alloc_open_bracket(vm, context[128]);
          refalrts::alloc_close_call(vm, context[129]);
          refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z13]);
          refalrts::reinit_name(context[79], functions[efunc_DelAccumulator]);
          refalrts::reinit_close_call(context[48]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[129] );
          refalrts::push_stack( vm, context[103] );
          refalrts::push_stack( vm, context[48] );
          refalrts::push_stack( vm, context[104] );
          refalrts::link_brackets( context[128], context[101] );
          refalrts::link_brackets( context[123], context[126] );
          refalrts::link_brackets( context[119], context[122] );
          refalrts::link_brackets( context[115], context[118] );
          refalrts::link_brackets( context[111], context[114] );
          refalrts::link_brackets( context[100], context[110] );
          refalrts::link_brackets( context[47], context[102] );
          refalrts::link_brackets( context[31], context[32] );
          refalrts::link_brackets( context[25], context[26] );
          refalrts::link_brackets( context[21], context[22] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[129] );
          res = refalrts::splice_evar( res, context[101], context[48] );
          res = refalrts::splice_evar( res, context[110], context[128] );
          res = refalrts::splice_evar( res, context[108], context[109] );
          res = refalrts::splice_elem( res, context[100] );
          res = refalrts::splice_evar( res, context[104], context[107] );
          res = refalrts::splice_elem( res, context[79] );
          res = refalrts::splice_elem( res, context[103] );
          res = refalrts::splice_elem( res, context[27] );
          res = refalrts::splice_elem( res, context[102] );
          res = refalrts::splice_evar( res, context[94], context[95] );
          res = refalrts::splice_evar( res, context[31], context[47] );
          refalrts::splice_to_freelist_open( vm, context[26], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & DoMapAccum@13/4 t.SrcPos0/5 (/9 e.FuncName0/80 )/10 (/13 e.Prefix$a0/82 )/14 (/17 e.ContextVars/84 )/18 (/21 e.Pattern0/86 )/22 (/25 e.ContextAllAssignsOrConds/88 )/26 s.Num/27 (/31 e.Scanned/90 )/32 (/47 # CallBrackets/79 e.0/92 )/48 e.Tail/94 >/1
          context[80] = context[63];
          context[81] = context[64];
          context[82] = context[65];
          context[83] = context[66];
          context[84] = context[67];
          context[85] = context[68];
          context[86] = context[69];
          context[87] = context[70];
          context[88] = context[71];
          context[89] = context[72];
          context[90] = context[73];
          context[91] = context[74];
          context[92] = context[77];
          context[93] = context[78];
          context[94] = context[75];
          context[95] = context[76];
          if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[79] ) )
            continue;
          // closed e.FuncName0 as range 80
          // closed e.Prefix$a0 as range 82
          // closed e.ContextVars as range 84
          // closed e.Pattern0 as range 86
          // closed e.ContextAllAssignsOrConds as range 88
          // closed e.Scanned as range 90
          // closed e.0 as range 92
          // closed e.Tail as range 94
          //DEBUG: t.SrcPos0: 5
          //DEBUG: s.Num: 27
          //DEBUG: e.FuncName0: 80
          //DEBUG: e.Prefix$a0: 82
          //DEBUG: e.ContextVars: 84
          //DEBUG: e.Pattern0: 86
          //DEBUG: e.ContextAllAssignsOrConds: 88
          //DEBUG: e.Scanned: 90
          //DEBUG: e.0: 92
          //DEBUG: e.Tail: 94

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@13/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/80 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/82 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars/84 AsIs: )/18 AsIs: (/21 AsIs: e.Pattern0/86 AsIs: )/22 AsIs: (/25 AsIs: e.ContextAllAssignsOrConds/88 AsIs: )/26 } Tile{ AsIs: (/31 AsIs: e.Scanned/90 AsIs: )/32 AsIs: (/47 } Tile{ AsIs: e.Tail/94 } )/96 Tile{ AsIs: s.Num/27 } </97 & DelAccumulator/98 </99 & DoMapAccum@13/100 t.SrcPos0/5/101 (/103 e.FuncName0/80/104 )/106 (/107 e.Prefix$a0/82/108 )/110 (/111 e.ContextVars/84/112 )/114 (/115 e.Pattern0/86/116 )/118 (/119 e.ContextAllAssignsOrConds/88/120 )/122 1/123 (/124 Tile{ HalfReuse: )/79 AsIs: e.0/92 HalfReuse: >/48 } >/125 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[96]);
          refalrts::alloc_open_call(vm, context[97]);
          refalrts::alloc_name(vm, context[98], functions[efunc_DelAccumulator]);
          refalrts::alloc_open_call(vm, context[99]);
          refalrts::alloc_name(vm, context[100], functions[efunc_gen_DoMapAccum_Z13]);
          refalrts::copy_evar(vm, context[101], context[102], context[5], context[6]);
          refalrts::alloc_open_bracket(vm, context[103]);
          refalrts::copy_evar(vm, context[104], context[105], context[80], context[81]);
          refalrts::alloc_close_bracket(vm, context[106]);
          refalrts::alloc_open_bracket(vm, context[107]);
          refalrts::copy_evar(vm, context[108], context[109], context[82], context[83]);
          refalrts::alloc_close_bracket(vm, context[110]);
          refalrts::alloc_open_bracket(vm, context[111]);
          refalrts::copy_evar(vm, context[112], context[113], context[84], context[85]);
          refalrts::alloc_close_bracket(vm, context[114]);
          refalrts::alloc_open_bracket(vm, context[115]);
          refalrts::copy_evar(vm, context[116], context[117], context[86], context[87]);
          refalrts::alloc_close_bracket(vm, context[118]);
          refalrts::alloc_open_bracket(vm, context[119]);
          refalrts::copy_evar(vm, context[120], context[121], context[88], context[89]);
          refalrts::alloc_close_bracket(vm, context[122]);
          refalrts::alloc_number(vm, context[123], 1UL);
          refalrts::alloc_open_bracket(vm, context[124]);
          refalrts::alloc_close_call(vm, context[125]);
          refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z13]);
          refalrts::reinit_close_bracket(context[79]);
          refalrts::reinit_close_call(context[48]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[125] );
          refalrts::push_stack( vm, context[97] );
          refalrts::push_stack( vm, context[48] );
          refalrts::push_stack( vm, context[99] );
          refalrts::link_brackets( context[124], context[79] );
          refalrts::link_brackets( context[119], context[122] );
          refalrts::link_brackets( context[115], context[118] );
          refalrts::link_brackets( context[111], context[114] );
          refalrts::link_brackets( context[107], context[110] );
          refalrts::link_brackets( context[103], context[106] );
          refalrts::link_brackets( context[47], context[96] );
          refalrts::link_brackets( context[31], context[32] );
          refalrts::link_brackets( context[25], context[26] );
          refalrts::link_brackets( context[21], context[22] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::link_brackets( context[13], context[14] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[125] );
          res = refalrts::splice_evar( res, context[79], context[48] );
          res = refalrts::splice_evar( res, context[97], context[124] );
          res = refalrts::splice_elem( res, context[27] );
          res = refalrts::splice_elem( res, context[96] );
          res = refalrts::splice_evar( res, context[94], context[95] );
          res = refalrts::splice_evar( res, context[31], context[47] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@13/4 t.SrcPos0/5 (/9 e.FuncName0/80 )/10 (/13 e.Prefix$a0/82 )/14 (/17 e.ContextVars/84 )/18 (/21 e.Pattern0/86 )/22 (/25 e.ContextAllAssignsOrConds/88 )/26 s.Num/27 (/31 e.Scanned/90 )/32 (/47 # Closure/79 # Sentences/96 e.1/92 )/48 e.Tail/94 >/1
        context[80] = context[63];
        context[81] = context[64];
        context[82] = context[65];
        context[83] = context[66];
        context[84] = context[67];
        context[85] = context[68];
        context[86] = context[69];
        context[87] = context[70];
        context[88] = context[71];
        context[89] = context[72];
        context[90] = context[73];
        context[91] = context[74];
        context[92] = context[77];
        context[93] = context[78];
        context[94] = context[75];
        context[95] = context[76];
        if( ! refalrts::ident_term( identifiers[ident_Closure], context[79] ) )
          continue;
        context[96] = refalrts::ident_left( identifiers[ident_Sentences], context[92], context[93] );
        if( ! context[96] )
          continue;
        // closed e.FuncName0 as range 80
        // closed e.Prefix$a0 as range 82
        // closed e.ContextVars as range 84
        // closed e.Pattern0 as range 86
        // closed e.ContextAllAssignsOrConds as range 88
        // closed e.Scanned as range 90
        // closed e.1 as range 92
        // closed e.Tail as range 94
        //DEBUG: t.SrcPos0: 5
        //DEBUG: s.Num: 27
        //DEBUG: e.FuncName0: 80
        //DEBUG: e.Prefix$a0: 82
        //DEBUG: e.ContextVars: 84
        //DEBUG: e.Pattern0: 86
        //DEBUG: e.ContextAllAssignsOrConds: 88
        //DEBUG: e.Scanned: 90
        //DEBUG: e.1: 92
        //DEBUG: e.Tail: 94

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@13/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/80 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/82 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars/84 AsIs: )/18 AsIs: (/21 AsIs: e.Pattern0/86 AsIs: )/22 AsIs: (/25 AsIs: e.ContextAllAssignsOrConds/88 AsIs: )/26 } Tile{ AsIs: (/31 AsIs: e.Scanned/90 AsIs: )/32 AsIs: (/47 } Tile{ AsIs: e.Tail/94 } )/97 </98 Tile{ HalfReuse: & Add/79 } 1/99 Tile{ AsIs: s.Num/27 } >/100 </101 & CheckSentences@5/102 t.SrcPos0/5/103 (/105 e.FuncName0/80/106 )/108 (/109 e.Prefix$a0/82/110 )/112 (/113 </114 & Symb/115 s.Num/27/116 >/117 )/118 (/119 e.ContextVars/84/120 )/122 (/123 e.Pattern0/86/124 )/126 (/127 e.ContextAllAssignsOrConds/88/128 Tile{ HalfReuse: )/96 AsIs: e.1/92 HalfReuse: >/48 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[97]);
        refalrts::alloc_open_call(vm, context[98]);
        refalrts::alloc_number(vm, context[99], 1UL);
        refalrts::alloc_close_call(vm, context[100]);
        refalrts::alloc_open_call(vm, context[101]);
        refalrts::alloc_name(vm, context[102], functions[efunc_gen_CheckSentences_Z5]);
        refalrts::copy_evar(vm, context[103], context[104], context[5], context[6]);
        refalrts::alloc_open_bracket(vm, context[105]);
        refalrts::copy_evar(vm, context[106], context[107], context[80], context[81]);
        refalrts::alloc_close_bracket(vm, context[108]);
        refalrts::alloc_open_bracket(vm, context[109]);
        refalrts::copy_evar(vm, context[110], context[111], context[82], context[83]);
        refalrts::alloc_close_bracket(vm, context[112]);
        refalrts::alloc_open_bracket(vm, context[113]);
        refalrts::alloc_open_call(vm, context[114]);
        refalrts::alloc_name(vm, context[115], functions[efunc_Symb]);
        refalrts::copy_stvar(vm, context[116], context[27]);
        refalrts::alloc_close_call(vm, context[117]);
        refalrts::alloc_close_bracket(vm, context[118]);
        refalrts::alloc_open_bracket(vm, context[119]);
        refalrts::copy_evar(vm, context[120], context[121], context[84], context[85]);
        refalrts::alloc_close_bracket(vm, context[122]);
        refalrts::alloc_open_bracket(vm, context[123]);
        refalrts::copy_evar(vm, context[124], context[125], context[86], context[87]);
        refalrts::alloc_close_bracket(vm, context[126]);
        refalrts::alloc_open_bracket(vm, context[127]);
        refalrts::copy_evar(vm, context[128], context[129], context[88], context[89]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z13]);
        refalrts::reinit_name(context[79], functions[efunc_Add]);
        refalrts::reinit_close_bracket(context[96]);
        refalrts::reinit_close_call(context[48]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[101] );
        refalrts::link_brackets( context[127], context[96] );
        refalrts::link_brackets( context[123], context[126] );
        refalrts::link_brackets( context[119], context[122] );
        refalrts::link_brackets( context[113], context[118] );
        refalrts::push_stack( vm, context[117] );
        refalrts::push_stack( vm, context[114] );
        refalrts::link_brackets( context[109], context[112] );
        refalrts::link_brackets( context[105], context[108] );
        refalrts::push_stack( vm, context[100] );
        refalrts::push_stack( vm, context[98] );
        refalrts::link_brackets( context[47], context[97] );
        refalrts::link_brackets( context[31], context[32] );
        refalrts::link_brackets( context[25], context[26] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[96], context[48] );
        res = refalrts::splice_evar( res, context[128], context[129] );
        res = refalrts::splice_evar( res, context[100], context[127] );
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_elem( res, context[99] );
        res = refalrts::splice_elem( res, context[79] );
        res = refalrts::splice_evar( res, context[97], context[98] );
        res = refalrts::splice_evar( res, context[94], context[95] );
        res = refalrts::splice_evar( res, context[31], context[47] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@13/4 t.SrcPos0/5 (/9 e.FuncName0/63 )/10 (/13 e.Prefix$a0/65 )/14 (/17 e.ContextVars/67 )/18 (/21 e.Pattern0/69 )/22 (/25 e.ContextAllAssignsOrConds/71 )/26 s.Num/27 (/31 e.Scanned/73 )/32 t.Next/47 e.Tail/75 >/1
      context[63] = context[49];
      context[64] = context[50];
      context[65] = context[51];
      context[66] = context[52];
      context[67] = context[53];
      context[68] = context[54];
      context[69] = context[55];
      context[70] = context[56];
      context[71] = context[57];
      context[72] = context[58];
      context[73] = context[59];
      context[74] = context[60];
      context[75] = context[61];
      context[76] = context[62];
      // closed e.FuncName0 as range 63
      // closed e.Prefix$a0 as range 65
      // closed e.ContextVars as range 67
      // closed e.Pattern0 as range 69
      // closed e.ContextAllAssignsOrConds as range 71
      // closed e.Scanned as range 73
      // closed e.Tail as range 75
      //DEBUG: t.SrcPos0: 5
      //DEBUG: t.Next: 47
      //DEBUG: s.Num: 27
      //DEBUG: e.FuncName0: 63
      //DEBUG: e.Prefix$a0: 65
      //DEBUG: e.ContextVars: 67
      //DEBUG: e.Pattern0: 69
      //DEBUG: e.ContextAllAssignsOrConds: 71
      //DEBUG: e.Scanned: 73
      //DEBUG: e.Tail: 75

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.Next/47 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@13/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/63 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/65 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars/67 AsIs: )/18 AsIs: (/21 AsIs: e.Pattern0/69 AsIs: )/22 AsIs: (/25 AsIs: e.ContextAllAssignsOrConds/71 AsIs: )/26 AsIs: s.Num/27 AsIs: (/31 AsIs: e.Scanned/73 AsIs: )/32 } Tile{ AsIs: e.Tail/75 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[31], context[32] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[75], context[76] );
      refalrts::splice_to_freelist_open( vm, context[32], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@13/4 t.SrcPos0/5 (/9 e.FuncName0/49 )/10 (/13 e.Prefix$a0/51 )/14 (/17 e.ContextVars/53 )/18 (/21 e.Pattern0/55 )/22 (/25 e.ContextAllAssignsOrConds/57 )/26 t.Acc/27 (/31 e.Scanned/59 )/32 t.Next/47 e.Tail/61 >/1
    context[49] = context[33];
    context[50] = context[34];
    context[51] = context[35];
    context[52] = context[36];
    context[53] = context[37];
    context[54] = context[38];
    context[55] = context[39];
    context[56] = context[40];
    context[57] = context[41];
    context[58] = context[42];
    context[59] = context[43];
    context[60] = context[44];
    context[61] = context[45];
    context[62] = context[46];
    // closed e.FuncName0 as range 49
    // closed e.Prefix$a0 as range 51
    // closed e.ContextVars as range 53
    // closed e.Pattern0 as range 55
    // closed e.ContextAllAssignsOrConds as range 57
    // closed e.Scanned as range 59
    // closed e.Tail as range 61
    //DEBUG: t.SrcPos0: 5
    //DEBUG: t.Acc: 27
    //DEBUG: t.Next: 47
    //DEBUG: e.FuncName0: 49
    //DEBUG: e.Prefix$a0: 51
    //DEBUG: e.ContextVars: 53
    //DEBUG: e.Pattern0: 55
    //DEBUG: e.ContextAllAssignsOrConds: 57
    //DEBUG: e.Scanned: 59
    //DEBUG: e.Tail: 61

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@13/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/49 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/51 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars/53 AsIs: )/18 AsIs: (/21 AsIs: e.Pattern0/55 AsIs: )/22 AsIs: (/25 AsIs: e.ContextAllAssignsOrConds/57 AsIs: )/26 } Tile{ AsIs: (/31 AsIs: e.Scanned/59 AsIs: )/32 } (/63 Tile{ AsIs: e.Tail/61 } )/64 </65 & CheckExpression\1*5/66 t.SrcPos0/5/67 (/69 e.FuncName0/49/70 )/72 (/73 e.Prefix$a0/51/74 )/76 (/77 e.ContextVars/53/78 e.Pattern0/55/80 e.ContextAllAssignsOrConds/57/82 )/84 Tile{ AsIs: t.Acc/27 } Tile{ AsIs: t.Next/47 } >/85 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[63]);
    refalrts::alloc_close_bracket(vm, context[64]);
    refalrts::alloc_open_call(vm, context[65]);
    refalrts::alloc_name(vm, context[66], functions[efunc_gen_CheckExpression_L1D5]);
    refalrts::copy_evar(vm, context[67], context[68], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[69]);
    refalrts::copy_evar(vm, context[70], context[71], context[49], context[50]);
    refalrts::alloc_close_bracket(vm, context[72]);
    refalrts::alloc_open_bracket(vm, context[73]);
    refalrts::copy_evar(vm, context[74], context[75], context[51], context[52]);
    refalrts::alloc_close_bracket(vm, context[76]);
    refalrts::alloc_open_bracket(vm, context[77]);
    refalrts::copy_evar(vm, context[78], context[79], context[53], context[54]);
    refalrts::copy_evar(vm, context[80], context[81], context[55], context[56]);
    refalrts::copy_evar(vm, context[82], context[83], context[57], context[58]);
    refalrts::alloc_close_bracket(vm, context[84]);
    refalrts::alloc_close_call(vm, context[85]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[85] );
    refalrts::push_stack( vm, context[65] );
    refalrts::link_brackets( context[77], context[84] );
    refalrts::link_brackets( context[73], context[76] );
    refalrts::link_brackets( context[69], context[72] );
    refalrts::link_brackets( context[63], context[64] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[85] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[64], context[84] );
    res = refalrts::splice_evar( res, context[61], context[62] );
    res = refalrts::splice_elem( res, context[63] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@13/4 t.SrcPos0/5 (/9 e.FuncName0/33 )/10 (/13 e.Prefix$a0/35 )/14 (/17 e.ContextVars/37 )/18 (/21 e.Pattern0/39 )/22 (/25 e.ContextAllAssignsOrConds/41 )/26 t.Acc/27 (/31 e.Scanned/43 )/32 >/1
    context[33] = context[7];
    context[34] = context[8];
    context[35] = context[11];
    context[36] = context[12];
    context[37] = context[15];
    context[38] = context[16];
    context[39] = context[19];
    context[40] = context[20];
    context[41] = context[23];
    context[42] = context[24];
    context[43] = context[29];
    context[44] = context[30];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.FuncName0 as range 33
    // closed e.Prefix$a0 as range 35
    // closed e.ContextVars as range 37
    // closed e.Pattern0 as range 39
    // closed e.ContextAllAssignsOrConds as range 41
    // closed e.Scanned as range 43
    //DEBUG: t.SrcPos0: 5
    //DEBUG: t.Acc: 27
    //DEBUG: e.FuncName0: 33
    //DEBUG: e.Prefix$a0: 35
    //DEBUG: e.ContextVars: 37
    //DEBUG: e.Pattern0: 39
    //DEBUG: e.ContextAllAssignsOrConds: 41
    //DEBUG: e.Scanned: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@13/4 t.SrcPos0/5 (/9 e.FuncName0/33 )/10 (/13 e.Prefix$a0/35 )/14 (/17 e.ContextVars/37 )/18 (/21 e.Pattern0/39 )/22 (/25 e.ContextAllAssignsOrConds/41 )/26 {REMOVED TILE} (/31 {REMOVED TILE} )/32 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/27 } Tile{ AsIs: e.Scanned/43 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@13/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix$a0/11 )/14 (/17 e.ContextVars/15 )/18 (/21 e.Pattern0/19 )/22 (/25 e.ContextAllAssignsOrConds/23 )/26 t.acc/27 (/31 e.scanned/29 )/32 e.items/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix$a0 as range 11
  // closed e.ContextVars as range 15
  // closed e.Pattern0 as range 19
  // closed e.ContextAllAssignsOrConds as range 23
  // closed e.scanned as range 29
  // closed e.items as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: t.acc: 27
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix$a0: 11
  //DEBUG: e.ContextVars: 15
  //DEBUG: e.Pattern0: 19
  //DEBUG: e.ContextAllAssignsOrConds: 23
  //DEBUG: e.scanned: 29
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/25 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </18 HalfReuse: & DoMapAccum@0/21 } Tile{ HalfReuse: [*]/0 Reuse: & CheckExpression\1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/11 AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.ContextVars/15 } Tile{ AsIs: e.Pattern0/19 } Tile{ AsIs: e.ContextAllAssignsOrConds/23 } Tile{ AsIs: )/22 } Tile{ HalfReuse: {*}/26 AsIs: t.acc/27 AsIs: (/31 AsIs: e.scanned/29 AsIs: )/32 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[18]);
  refalrts::reinit_name(context[21], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckExpression_L1Z0]);
  refalrts::reinit_unwrapped_closure(context[26], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[18] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[17], context[22] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[26];
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[0], context[17] );
  res = refalrts::splice_evar( res, context[18], context[21] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  refalrts::wrap_closure( context[26] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z13("DoMapAccum@13", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z13);


static refalrts::FnResult func_gen_DoMapAccum_Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 114 elems
  refalrts::Iter context[114];
  refalrts::zeros( context, 114 );
  // </0 & DoMapAccum@14/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@14/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 t.new7/27 (/31 e.new8/29 )/32 e.new9/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  context[28] = refalrts::tvar_left( context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.new8 as range 29
  // closed e.new9 as range 2
  do {
    // </0 & DoMapAccum@14/4 t.new10/5 (/9 e.new14/33 )/10 (/13 e.new15/35 )/14 (/17 e.new16/37 )/18 (/21 e.new17/39 )/22 (/25 e.new18/41 )/26 t.new11/27 (/31 e.new19/43 )/32 t.new12/47 e.new13/45 >/1
    context[33] = context[7];
    context[34] = context[8];
    context[35] = context[11];
    context[36] = context[12];
    context[37] = context[15];
    context[38] = context[16];
    context[39] = context[19];
    context[40] = context[20];
    context[41] = context[23];
    context[42] = context[24];
    context[43] = context[29];
    context[44] = context[30];
    context[45] = context[2];
    context[46] = context[3];
    // closed e.new14 as range 33
    // closed e.new15 as range 35
    // closed e.new16 as range 37
    // closed e.new17 as range 39
    // closed e.new18 as range 41
    // closed e.new19 as range 43
    context[48] = refalrts::tvar_left( context[47], context[45], context[46] );
    if( ! context[48] )
      continue;
    // closed e.new13 as range 45
    do {
      // </0 & DoMapAccum@14/4 t.new20/5 (/9 e.new24/49 )/10 (/13 e.new25/51 )/14 (/17 e.new26/53 )/18 (/21 e.new27/55 )/22 (/25 e.new28/57 )/26 s.new21/27 (/31 e.new29/59 )/32 t.new22/47 e.new23/61 >/1
      context[49] = context[33];
      context[50] = context[34];
      context[51] = context[35];
      context[52] = context[36];
      context[53] = context[37];
      context[54] = context[38];
      context[55] = context[39];
      context[56] = context[40];
      context[57] = context[41];
      context[58] = context[42];
      context[59] = context[43];
      context[60] = context[44];
      context[61] = context[45];
      context[62] = context[46];
      if( ! refalrts::svar_term( context[27], context[27] ) )
        continue;
      // closed e.new24 as range 49
      // closed e.new25 as range 51
      // closed e.new26 as range 53
      // closed e.new27 as range 55
      // closed e.new28 as range 57
      // closed e.new29 as range 59
      // closed e.new23 as range 61
      do {
        // </0 & DoMapAccum@14/4 t.SrcPos0/5 (/9 e.FuncName0/63 )/10 (/13 e.Prefix$a0/65 )/14 (/17 e.ContextVars/67 )/18 (/21 e.Pattern0/69 )/22 (/25 e.ContextAllAssignsOrConds/71 )/26 s.Num/27 (/31 e.Scanned/73 )/32 (/47 # Sentences/79 e.0/77 )/48 e.Tail/75 >/1
        context[63] = context[49];
        context[64] = context[50];
        context[65] = context[51];
        context[66] = context[52];
        context[67] = context[53];
        context[68] = context[54];
        context[69] = context[55];
        context[70] = context[56];
        context[71] = context[57];
        context[72] = context[58];
        context[73] = context[59];
        context[74] = context[60];
        context[75] = context[61];
        context[76] = context[62];
        context[77] = 0;
        context[78] = 0;
        if( ! refalrts::brackets_term( context[77], context[78], context[47] ) )
          continue;
        context[79] = refalrts::ident_left( identifiers[ident_Sentences], context[77], context[78] );
        if( ! context[79] )
          continue;
        // closed e.FuncName0 as range 63
        // closed e.Prefix$a0 as range 65
        // closed e.ContextVars as range 67
        // closed e.Pattern0 as range 69
        // closed e.ContextAllAssignsOrConds as range 71
        // closed e.Scanned as range 73
        // closed e.0 as range 77
        // closed e.Tail as range 75
        //DEBUG: t.SrcPos0: 5
        //DEBUG: s.Num: 27
        //DEBUG: e.FuncName0: 63
        //DEBUG: e.Prefix$a0: 65
        //DEBUG: e.ContextVars: 67
        //DEBUG: e.Pattern0: 69
        //DEBUG: e.ContextAllAssignsOrConds: 71
        //DEBUG: e.Scanned: 73
        //DEBUG: e.0: 77
        //DEBUG: e.Tail: 75

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@14/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/63 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/65 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars/67 AsIs: )/18 AsIs: (/21 AsIs: e.Pattern0/69 AsIs: )/22 AsIs: (/25 AsIs: e.ContextAllAssignsOrConds/71 AsIs: )/26 } Tile{ AsIs: (/31 AsIs: e.Scanned/73 AsIs: )/32 AsIs: (/47 } Tile{ AsIs: e.Tail/75 } )/80 </81 & Add/82 1/83 Tile{ AsIs: s.Num/27 } >/84 </85 & CheckSentences@6/86 t.SrcPos0/5/87 (/89 e.FuncName0/63/90 )/92 (/93 e.Prefix$a0/65/94 )/96 (/97 </98 & Symb/99 s.Num/27/100 >/101 )/102 (/103 e.ContextVars/67/104 )/106 (/107 e.Pattern0/69/108 )/110 (/111 e.ContextAllAssignsOrConds/71/112 Tile{ HalfReuse: )/79 AsIs: e.0/77 HalfReuse: >/48 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[80]);
        refalrts::alloc_open_call(vm, context[81]);
        refalrts::alloc_name(vm, context[82], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[83], 1UL);
        refalrts::alloc_close_call(vm, context[84]);
        refalrts::alloc_open_call(vm, context[85]);
        refalrts::alloc_name(vm, context[86], functions[efunc_gen_CheckSentences_Z6]);
        refalrts::copy_evar(vm, context[87], context[88], context[5], context[6]);
        refalrts::alloc_open_bracket(vm, context[89]);
        refalrts::copy_evar(vm, context[90], context[91], context[63], context[64]);
        refalrts::alloc_close_bracket(vm, context[92]);
        refalrts::alloc_open_bracket(vm, context[93]);
        refalrts::copy_evar(vm, context[94], context[95], context[65], context[66]);
        refalrts::alloc_close_bracket(vm, context[96]);
        refalrts::alloc_open_bracket(vm, context[97]);
        refalrts::alloc_open_call(vm, context[98]);
        refalrts::alloc_name(vm, context[99], functions[efunc_Symb]);
        refalrts::copy_stvar(vm, context[100], context[27]);
        refalrts::alloc_close_call(vm, context[101]);
        refalrts::alloc_close_bracket(vm, context[102]);
        refalrts::alloc_open_bracket(vm, context[103]);
        refalrts::copy_evar(vm, context[104], context[105], context[67], context[68]);
        refalrts::alloc_close_bracket(vm, context[106]);
        refalrts::alloc_open_bracket(vm, context[107]);
        refalrts::copy_evar(vm, context[108], context[109], context[69], context[70]);
        refalrts::alloc_close_bracket(vm, context[110]);
        refalrts::alloc_open_bracket(vm, context[111]);
        refalrts::copy_evar(vm, context[112], context[113], context[71], context[72]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z14]);
        refalrts::reinit_close_bracket(context[79]);
        refalrts::reinit_close_call(context[48]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[85] );
        refalrts::link_brackets( context[111], context[79] );
        refalrts::link_brackets( context[107], context[110] );
        refalrts::link_brackets( context[103], context[106] );
        refalrts::link_brackets( context[97], context[102] );
        refalrts::push_stack( vm, context[101] );
        refalrts::push_stack( vm, context[98] );
        refalrts::link_brackets( context[93], context[96] );
        refalrts::link_brackets( context[89], context[92] );
        refalrts::push_stack( vm, context[84] );
        refalrts::push_stack( vm, context[81] );
        refalrts::link_brackets( context[47], context[80] );
        refalrts::link_brackets( context[31], context[32] );
        refalrts::link_brackets( context[25], context[26] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[79], context[48] );
        res = refalrts::splice_evar( res, context[112], context[113] );
        res = refalrts::splice_evar( res, context[84], context[111] );
        res = refalrts::splice_elem( res, context[27] );
        res = refalrts::splice_evar( res, context[80], context[83] );
        res = refalrts::splice_evar( res, context[75], context[76] );
        res = refalrts::splice_evar( res, context[31], context[47] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@14/4 t.SrcPos0/5 (/9 e.FuncName0/63 )/10 (/13 e.Prefix$a0/65 )/14 (/17 e.ContextVars/67 )/18 (/21 e.Pattern0/69 )/22 (/25 e.ContextAllAssignsOrConds/71 )/26 s.Num/27 (/31 e.Scanned/73 )/32 t.Next/47 e.Tail/75 >/1
      context[63] = context[49];
      context[64] = context[50];
      context[65] = context[51];
      context[66] = context[52];
      context[67] = context[53];
      context[68] = context[54];
      context[69] = context[55];
      context[70] = context[56];
      context[71] = context[57];
      context[72] = context[58];
      context[73] = context[59];
      context[74] = context[60];
      context[75] = context[61];
      context[76] = context[62];
      // closed e.FuncName0 as range 63
      // closed e.Prefix$a0 as range 65
      // closed e.ContextVars as range 67
      // closed e.Pattern0 as range 69
      // closed e.ContextAllAssignsOrConds as range 71
      // closed e.Scanned as range 73
      // closed e.Tail as range 75
      //DEBUG: t.SrcPos0: 5
      //DEBUG: t.Next: 47
      //DEBUG: s.Num: 27
      //DEBUG: e.FuncName0: 63
      //DEBUG: e.Prefix$a0: 65
      //DEBUG: e.ContextVars: 67
      //DEBUG: e.Pattern0: 69
      //DEBUG: e.ContextAllAssignsOrConds: 71
      //DEBUG: e.Scanned: 73
      //DEBUG: e.Tail: 75

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} t.Next/47 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@14/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/63 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/65 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars/67 AsIs: )/18 AsIs: (/21 AsIs: e.Pattern0/69 AsIs: )/22 AsIs: (/25 AsIs: e.ContextAllAssignsOrConds/71 AsIs: )/26 AsIs: s.Num/27 AsIs: (/31 AsIs: e.Scanned/73 AsIs: )/32 } Tile{ AsIs: e.Tail/75 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[31], context[32] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[75], context[76] );
      refalrts::splice_to_freelist_open( vm, context[32], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@14/4 t.SrcPos0/5 (/9 e.FuncName0/49 )/10 (/13 e.Prefix$a0/51 )/14 (/17 e.ContextVars/53 )/18 (/21 e.Pattern0/55 )/22 (/25 e.ContextAllAssignsOrConds/57 )/26 t.Acc/27 (/31 e.Scanned/59 )/32 t.Next/47 e.Tail/61 >/1
    context[49] = context[33];
    context[50] = context[34];
    context[51] = context[35];
    context[52] = context[36];
    context[53] = context[37];
    context[54] = context[38];
    context[55] = context[39];
    context[56] = context[40];
    context[57] = context[41];
    context[58] = context[42];
    context[59] = context[43];
    context[60] = context[44];
    context[61] = context[45];
    context[62] = context[46];
    // closed e.FuncName0 as range 49
    // closed e.Prefix$a0 as range 51
    // closed e.ContextVars as range 53
    // closed e.Pattern0 as range 55
    // closed e.ContextAllAssignsOrConds as range 57
    // closed e.Scanned as range 59
    // closed e.Tail as range 61
    //DEBUG: t.SrcPos0: 5
    //DEBUG: t.Acc: 27
    //DEBUG: t.Next: 47
    //DEBUG: e.FuncName0: 49
    //DEBUG: e.Prefix$a0: 51
    //DEBUG: e.ContextVars: 53
    //DEBUG: e.Pattern0: 55
    //DEBUG: e.ContextAllAssignsOrConds: 57
    //DEBUG: e.Scanned: 59
    //DEBUG: e.Tail: 61

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@14/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/49 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/51 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars/53 AsIs: )/18 AsIs: (/21 AsIs: e.Pattern0/55 AsIs: )/22 AsIs: (/25 AsIs: e.ContextAllAssignsOrConds/57 AsIs: )/26 } Tile{ AsIs: (/31 AsIs: e.Scanned/59 AsIs: )/32 } (/63 Tile{ AsIs: e.Tail/61 } )/64 </65 & CheckBlocks\1*2/66 t.SrcPos0/5/67 (/69 e.FuncName0/49/70 )/72 (/73 e.Prefix$a0/51/74 )/76 (/77 e.ContextVars/53/78 e.Pattern0/55/80 e.ContextAllAssignsOrConds/57/82 )/84 Tile{ AsIs: t.Acc/27 } Tile{ AsIs: t.Next/47 } >/85 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[63]);
    refalrts::alloc_close_bracket(vm, context[64]);
    refalrts::alloc_open_call(vm, context[65]);
    refalrts::alloc_name(vm, context[66], functions[efunc_gen_CheckBlocks_L1D2]);
    refalrts::copy_evar(vm, context[67], context[68], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[69]);
    refalrts::copy_evar(vm, context[70], context[71], context[49], context[50]);
    refalrts::alloc_close_bracket(vm, context[72]);
    refalrts::alloc_open_bracket(vm, context[73]);
    refalrts::copy_evar(vm, context[74], context[75], context[51], context[52]);
    refalrts::alloc_close_bracket(vm, context[76]);
    refalrts::alloc_open_bracket(vm, context[77]);
    refalrts::copy_evar(vm, context[78], context[79], context[53], context[54]);
    refalrts::copy_evar(vm, context[80], context[81], context[55], context[56]);
    refalrts::copy_evar(vm, context[82], context[83], context[57], context[58]);
    refalrts::alloc_close_bracket(vm, context[84]);
    refalrts::alloc_close_call(vm, context[85]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z14]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[85] );
    refalrts::push_stack( vm, context[65] );
    refalrts::link_brackets( context[77], context[84] );
    refalrts::link_brackets( context[73], context[76] );
    refalrts::link_brackets( context[69], context[72] );
    refalrts::link_brackets( context[63], context[64] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[85] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[64], context[84] );
    res = refalrts::splice_evar( res, context[61], context[62] );
    res = refalrts::splice_elem( res, context[63] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@14/4 t.SrcPos0/5 (/9 e.FuncName0/33 )/10 (/13 e.Prefix$a0/35 )/14 (/17 e.ContextVars/37 )/18 (/21 e.Pattern0/39 )/22 (/25 e.ContextAllAssignsOrConds/41 )/26 t.Acc/27 (/31 e.Scanned/43 )/32 >/1
    context[33] = context[7];
    context[34] = context[8];
    context[35] = context[11];
    context[36] = context[12];
    context[37] = context[15];
    context[38] = context[16];
    context[39] = context[19];
    context[40] = context[20];
    context[41] = context[23];
    context[42] = context[24];
    context[43] = context[29];
    context[44] = context[30];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.FuncName0 as range 33
    // closed e.Prefix$a0 as range 35
    // closed e.ContextVars as range 37
    // closed e.Pattern0 as range 39
    // closed e.ContextAllAssignsOrConds as range 41
    // closed e.Scanned as range 43
    //DEBUG: t.SrcPos0: 5
    //DEBUG: t.Acc: 27
    //DEBUG: e.FuncName0: 33
    //DEBUG: e.Prefix$a0: 35
    //DEBUG: e.ContextVars: 37
    //DEBUG: e.Pattern0: 39
    //DEBUG: e.ContextAllAssignsOrConds: 41
    //DEBUG: e.Scanned: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@14/4 t.SrcPos0/5 (/9 e.FuncName0/33 )/10 (/13 e.Prefix$a0/35 )/14 (/17 e.ContextVars/37 )/18 (/21 e.Pattern0/39 )/22 (/25 e.ContextAllAssignsOrConds/41 )/26 {REMOVED TILE} (/31 {REMOVED TILE} )/32 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/27 } Tile{ AsIs: e.Scanned/43 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@14/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix$a0/11 )/14 (/17 e.ContextVars/15 )/18 (/21 e.Pattern0/19 )/22 (/25 e.ContextAllAssignsOrConds/23 )/26 t.acc/27 (/31 e.scanned/29 )/32 e.items/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix$a0 as range 11
  // closed e.ContextVars as range 15
  // closed e.Pattern0 as range 19
  // closed e.ContextAllAssignsOrConds as range 23
  // closed e.scanned as range 29
  // closed e.items as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: t.acc: 27
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix$a0: 11
  //DEBUG: e.ContextVars: 15
  //DEBUG: e.Pattern0: 19
  //DEBUG: e.ContextAllAssignsOrConds: 23
  //DEBUG: e.scanned: 29
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/25 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </18 HalfReuse: & DoMapAccum@0/21 } Tile{ HalfReuse: [*]/0 Reuse: & CheckBlocks\1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/11 AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.ContextVars/15 } Tile{ AsIs: e.Pattern0/19 } Tile{ AsIs: e.ContextAllAssignsOrConds/23 } Tile{ AsIs: )/22 } Tile{ HalfReuse: {*}/26 AsIs: t.acc/27 AsIs: (/31 AsIs: e.scanned/29 AsIs: )/32 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[18]);
  refalrts::reinit_name(context[21], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckBlocks_L1Z0]);
  refalrts::reinit_unwrapped_closure(context[26], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[18] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[17], context[22] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[26];
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[0], context[17] );
  res = refalrts::splice_evar( res, context[18], context[21] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  refalrts::wrap_closure( context[26] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z14("DoMapAccum@14", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z14);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & DoMapAccum$1=1@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@6/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 e.new7/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 2
  do {
    // </0 & DoMapAccum$1=1@6/4 t.SrcPos/5 (/9 e.FuncName/27 )/10 (/13 e.ContextVars/29 )/14 (/17 e.Prefix/31 )/18 (/21 e.Scanned0/33 )/22 (/25 e.Tail0/35 )/26 t.Acc$a/39 e.StepScanned/37 >/1
    context[27] = context[7];
    context[28] = context[8];
    context[29] = context[11];
    context[30] = context[12];
    context[31] = context[15];
    context[32] = context[16];
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[23];
    context[36] = context[24];
    context[37] = context[2];
    context[38] = context[3];
    // closed e.FuncName as range 27
    // closed e.ContextVars as range 29
    // closed e.Prefix as range 31
    // closed e.Scanned0 as range 33
    // closed e.Tail0 as range 35
    context[40] = refalrts::tvar_left( context[39], context[37], context[38] );
    if( ! context[40] )
      continue;
    // closed e.StepScanned as range 37
    //DEBUG: t.SrcPos: 5
    //DEBUG: e.FuncName: 27
    //DEBUG: e.ContextVars: 29
    //DEBUG: e.Prefix: 31
    //DEBUG: e.Scanned0: 33
    //DEBUG: e.Tail0: 35
    //DEBUG: t.Acc$a: 39
    //DEBUG: e.StepScanned: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/21 {REMOVED TILE} )/22 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@6/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/27 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars/29 AsIs: )/14 AsIs: (/17 AsIs: e.Prefix/31 AsIs: )/18 } Tile{ AsIs: t.Acc$a/39 } Tile{ AsIs: (/25 } Tile{ AsIs: e.Scanned0/33 } Tile{ AsIs: e.StepScanned/37 } Tile{ AsIs: )/26 } Tile{ AsIs: e.Tail0/35 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z6]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    refalrts::splice_to_freelist_open( vm, context[18], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@6/4 t.SrcPos/5 (/9 e.FuncName/7 )/10 (/13 e.ContextVars/11 )/14 (/17 e.Prefix/15 )/18 (/21 e.Scanned0/19 )/22 (/25 e.Tail0/23 )/26 e.dyn/2 >/1
  // closed e.FuncName as range 7
  // closed e.ContextVars as range 11
  // closed e.Prefix as range 15
  // closed e.Scanned0 as range 19
  // closed e.Tail0 as range 23
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos: 5
  //DEBUG: e.FuncName: 7
  //DEBUG: e.ContextVars: 11
  //DEBUG: e.Prefix: 15
  //DEBUG: e.Scanned0: 19
  //DEBUG: e.Tail0: 23
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </27 & DoMapAccum$1=1@0/28 Tile{ HalfReuse: [*]/0 Reuse: & CheckSentences\1@0/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/7 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars/11 AsIs: )/14 AsIs: (/17 AsIs: e.Prefix/15 AsIs: )/18 HalfReuse: {*}/21 } (/29 Tile{ AsIs: e.Scanned0/19 } Tile{ AsIs: )/22 AsIs: (/25 AsIs: e.Tail0/23 AsIs: )/26 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_open_bracket(vm, context[29]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_L1Z0]);
  refalrts::reinit_unwrapped_closure(context[21], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[27] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[29], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[22];
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_elem( res, context[29] );
  res = refalrts::splice_evar( res, context[0], context[21] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  refalrts::use( res );
  refalrts::wrap_closure( context[21] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z6("DoMapAccum$1=1@6", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z6);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & DoMapAccum$1=1@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@7/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 e.new7/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 2
  do {
    // </0 & DoMapAccum$1=1@7/4 t.SrcPos/5 (/9 e.FuncName/27 )/10 (/13 e.Prefix/29 )/14 (/17 e.ContextVars/31 )/18 (/21 e.Scanned0/33 )/22 (/25 e.Tail0/35 )/26 t.Acc$a/39 e.StepScanned/37 >/1
    context[27] = context[7];
    context[28] = context[8];
    context[29] = context[11];
    context[30] = context[12];
    context[31] = context[15];
    context[32] = context[16];
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[23];
    context[36] = context[24];
    context[37] = context[2];
    context[38] = context[3];
    // closed e.FuncName as range 27
    // closed e.Prefix as range 29
    // closed e.ContextVars as range 31
    // closed e.Scanned0 as range 33
    // closed e.Tail0 as range 35
    context[40] = refalrts::tvar_left( context[39], context[37], context[38] );
    if( ! context[40] )
      continue;
    // closed e.StepScanned as range 37
    //DEBUG: t.SrcPos: 5
    //DEBUG: e.FuncName: 27
    //DEBUG: e.Prefix: 29
    //DEBUG: e.ContextVars: 31
    //DEBUG: e.Scanned0: 33
    //DEBUG: e.Tail0: 35
    //DEBUG: t.Acc$a: 39
    //DEBUG: e.StepScanned: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/21 {REMOVED TILE} )/22 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@7/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/27 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix/29 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars/31 AsIs: )/18 } Tile{ AsIs: t.Acc$a/39 } Tile{ AsIs: (/25 } Tile{ AsIs: e.Scanned0/33 } Tile{ AsIs: e.StepScanned/37 } Tile{ AsIs: )/26 } Tile{ AsIs: e.Tail0/35 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    refalrts::splice_to_freelist_open( vm, context[18], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@7/4 t.SrcPos/5 (/9 e.FuncName/7 )/10 (/13 e.Prefix/11 )/14 (/17 e.ContextVars/15 )/18 (/21 e.Scanned0/19 )/22 (/25 e.Tail0/23 )/26 e.dyn/2 >/1
  // closed e.FuncName as range 7
  // closed e.Prefix as range 11
  // closed e.ContextVars as range 15
  // closed e.Scanned0 as range 19
  // closed e.Tail0 as range 23
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos: 5
  //DEBUG: e.FuncName: 7
  //DEBUG: e.Prefix: 11
  //DEBUG: e.ContextVars: 15
  //DEBUG: e.Scanned0: 19
  //DEBUG: e.Tail0: 23
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </27 & DoMapAccum$1=1@0/28 Tile{ HalfReuse: [*]/0 Reuse: & CheckBlocks\1@0/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix/11 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars/15 AsIs: )/18 HalfReuse: {*}/21 } (/29 Tile{ AsIs: e.Scanned0/19 } Tile{ AsIs: )/22 AsIs: (/25 AsIs: e.Tail0/23 AsIs: )/26 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_open_bracket(vm, context[29]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckBlocks_L1Z0]);
  refalrts::reinit_unwrapped_closure(context[21], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[27] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[29], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[22];
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_elem( res, context[29] );
  res = refalrts::splice_evar( res, context[0], context[21] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  refalrts::use( res );
  refalrts::wrap_closure( context[21] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z7("DoMapAccum$1=1@7", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z7);


static refalrts::FnResult func_gen_CheckSentences_A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & CheckSentences=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences=1@2/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 e.new7/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 2
  do {
    // </0 & CheckSentences=1@2/4 t.SrcPos0/5 (/9 e.FuncName0/27 )/10 (/13 e.Prefix0/29 )/14 (/17 e.Call/31 )/18 (/21 e.ContextVars0/33 )/22 (/25 e.Sentences0/35 )/26 e.NumberedSentences/37 >/1
    context[27] = context[7];
    context[28] = context[8];
    context[29] = context[11];
    context[30] = context[12];
    context[31] = context[15];
    context[32] = context[16];
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[23];
    context[36] = context[24];
    context[37] = context[2];
    context[38] = context[3];
    // closed e.FuncName0 as range 27
    // closed e.Prefix0 as range 29
    // closed e.Call as range 31
    // closed e.ContextVars0 as range 33
    // closed e.Sentences0 as range 35
    // closed e.NumberedSentences as range 37
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 27
    //DEBUG: e.Prefix0: 29
    //DEBUG: e.Call: 31
    //DEBUG: e.ContextVars0: 33
    //DEBUG: e.Sentences0: 35
    //DEBUG: e.NumberedSentences: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=2@2/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/27 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/29 AsIs: )/14 AsIs: (/17 AsIs: e.Call/31 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars0/33 AsIs: )/22 AsIs: (/25 AsIs: e.Sentences0/35 AsIs: )/26 } </39 & MakePairs/40 Tile{ AsIs: e.NumberedSentences/37 } >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_MakePairs]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A2Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[39] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences=1@2/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix0/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars0/19 )/22 (/25 e.Sentences0/23 )/26 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix0 as range 11
  // closed e.Call as range 15
  // closed e.ContextVars0 as range 19
  // closed e.Sentences0 as range 23
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars0: 19
  //DEBUG: e.Sentences0: 23
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/14 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Prefix0/11 } Tile{ HalfReuse: ':'/17 AsIs: e.Call/15 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars0/19 AsIs: )/22 AsIs: (/25 AsIs: e.Sentences0/23 AsIs: )/26 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A1Z0]);
  refalrts::reinit_char(context[17], ':');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[13], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, context[13], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_A1Z2("CheckSentences=1@2", COOKIE1_, COOKIE2_, func_gen_CheckSentences_A1Z2);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & DoMapAccum$1=1@8/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@8/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 e.new7/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 2
  do {
    // </0 & DoMapAccum$1=1@8/4 t.SrcPos/5 (/9 e.FuncName/27 )/10 (/13 e.Prefix$a/29 )/14 (/17 e.ContextVars$a/31 )/18 (/21 e.Scanned0/33 )/22 (/25 e.Tail0/35 )/26 t.Acc$a/39 e.StepScanned/37 >/1
    context[27] = context[7];
    context[28] = context[8];
    context[29] = context[11];
    context[30] = context[12];
    context[31] = context[15];
    context[32] = context[16];
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[23];
    context[36] = context[24];
    context[37] = context[2];
    context[38] = context[3];
    // closed e.FuncName as range 27
    // closed e.Prefix$a as range 29
    // closed e.ContextVars$a as range 31
    // closed e.Scanned0 as range 33
    // closed e.Tail0 as range 35
    context[40] = refalrts::tvar_left( context[39], context[37], context[38] );
    if( ! context[40] )
      continue;
    // closed e.StepScanned as range 37
    //DEBUG: t.SrcPos: 5
    //DEBUG: e.FuncName: 27
    //DEBUG: e.Prefix$a: 29
    //DEBUG: e.ContextVars$a: 31
    //DEBUG: e.Scanned0: 33
    //DEBUG: e.Tail0: 35
    //DEBUG: t.Acc$a: 39
    //DEBUG: e.StepScanned: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/21 {REMOVED TILE} )/22 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@8/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/27 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/29 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars$a/31 AsIs: )/18 } Tile{ AsIs: t.Acc$a/39 } Tile{ AsIs: (/25 } Tile{ AsIs: e.Scanned0/33 } Tile{ AsIs: e.StepScanned/37 } Tile{ AsIs: )/26 } Tile{ AsIs: e.Tail0/35 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    refalrts::splice_to_freelist_open( vm, context[18], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@8/4 t.SrcPos/5 (/9 e.FuncName/7 )/10 (/13 e.Prefix$a/11 )/14 (/17 e.ContextVars$a/15 )/18 (/21 e.Scanned0/19 )/22 (/25 e.Tail0/23 )/26 e.dyn/2 >/1
  // closed e.FuncName as range 7
  // closed e.Prefix$a as range 11
  // closed e.ContextVars$a as range 15
  // closed e.Scanned0 as range 19
  // closed e.Tail0 as range 23
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos: 5
  //DEBUG: e.FuncName: 7
  //DEBUG: e.Prefix$a: 11
  //DEBUG: e.ContextVars$a: 15
  //DEBUG: e.Scanned0: 19
  //DEBUG: e.Tail0: 23
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </27 & DoMapAccum$1=1@0/28 Tile{ HalfReuse: [*]/0 Reuse: & CheckExpression\1@0/4 AsIs: t.SrcPos/5 AsIs: (/9 AsIs: e.FuncName/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/11 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars$a/15 AsIs: )/18 HalfReuse: {*}/21 } (/29 Tile{ AsIs: e.Scanned0/19 } Tile{ AsIs: )/22 AsIs: (/25 AsIs: e.Tail0/23 AsIs: )/26 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_open_bracket(vm, context[29]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckExpression_L1Z0]);
  refalrts::reinit_unwrapped_closure(context[21], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[27] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[29], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[22];
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_elem( res, context[29] );
  res = refalrts::splice_evar( res, context[0], context[21] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  refalrts::use( res );
  refalrts::wrap_closure( context[21] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z8("DoMapAccum$1=1@8", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z8);


static refalrts::FnResult func_gen_CheckSentences_A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & CheckSentences=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences=1@3/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 e.new7/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 2
  do {
    // </0 & CheckSentences=1@3/4 t.SrcPos0/5 (/9 e.FuncName0/27 )/10 (/13 e.Prefix0/29 )/14 (/17 e.Call/31 )/18 (/21 e.ContextVars0/33 )/22 (/25 e.Sentences0/35 )/26 e.NumberedSentences/37 >/1
    context[27] = context[7];
    context[28] = context[8];
    context[29] = context[11];
    context[30] = context[12];
    context[31] = context[15];
    context[32] = context[16];
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[23];
    context[36] = context[24];
    context[37] = context[2];
    context[38] = context[3];
    // closed e.FuncName0 as range 27
    // closed e.Prefix0 as range 29
    // closed e.Call as range 31
    // closed e.ContextVars0 as range 33
    // closed e.Sentences0 as range 35
    // closed e.NumberedSentences as range 37
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 27
    //DEBUG: e.Prefix0: 29
    //DEBUG: e.Call: 31
    //DEBUG: e.ContextVars0: 33
    //DEBUG: e.Sentences0: 35
    //DEBUG: e.NumberedSentences: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=2@3/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/27 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/29 AsIs: )/14 AsIs: (/17 AsIs: e.Call/31 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars0/33 AsIs: )/22 AsIs: (/25 AsIs: e.Sentences0/35 AsIs: )/26 } </39 & MakePairs/40 Tile{ AsIs: e.NumberedSentences/37 } >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_MakePairs]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A2Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[39] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences=1@3/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix0/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars0/19 )/22 (/25 e.Sentences0/23 )/26 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix0 as range 11
  // closed e.Call as range 15
  // closed e.ContextVars0 as range 19
  // closed e.Sentences0 as range 23
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars0: 19
  //DEBUG: e.Sentences0: 23
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/14 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Prefix0/11 } Tile{ HalfReuse: '\\'/17 AsIs: e.Call/15 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars0/19 AsIs: )/22 AsIs: (/25 AsIs: e.Sentences0/23 AsIs: )/26 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A1Z0]);
  refalrts::reinit_char(context[17], '\\');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[13], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, context[13], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_A1Z3("CheckSentences=1@3", COOKIE1_, COOKIE2_, func_gen_CheckSentences_A1Z3);


static refalrts::FnResult func_gen_FlattenPattern_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & FlattenPattern@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FlattenPattern@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & FlattenPattern@1/4 (/7 e.ContextVars$b/9 )/8 e.Pattern-R0/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.ContextVars$b as range 9
    // closed e.Pattern-R0 as range 11
    //DEBUG: e.ContextVars$b: 9
    //DEBUG: e.Pattern-R0: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@6/4 } Tile{ AsIs: e.ContextVars$b/9 } Tile{ AsIs: e.Pattern-R0/11 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z6]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FlattenPattern@1/4 (/7 e.ContextVars$b/5 )/8 e.Pattern-R0/2 >/1
  // closed e.ContextVars$b as range 5
  // closed e.Pattern-R0 as range 2
  //DEBUG: e.ContextVars$b: 5
  //DEBUG: e.Pattern-R0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & FlattenPattern@0/4 } Tile{ AsIs: e.ContextVars$b/5 } Tile{ AsIs: e.Pattern-R0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_FlattenPattern_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FlattenPattern_Z1("FlattenPattern@1", COOKIE1_, COOKIE2_, func_gen_FlattenPattern_Z1);


static refalrts::FnResult func_gen_ReplaceADTBrackets_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & ReplaceADTBrackets@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ReplaceADTBrackets@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & ReplaceADTBrackets@1/4 (/7 e.ContextVars$b/9 )/8 e.Pattern-R0/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.ContextVars$b as range 9
    // closed e.Pattern-R0 as range 11
    //DEBUG: e.ContextVars$b: 9
    //DEBUG: e.Pattern-R0: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@7/4 } Tile{ AsIs: e.ContextVars$b/9 } Tile{ AsIs: e.Pattern-R0/11 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ReplaceADTBrackets@1/4 (/7 e.ContextVars$b/5 )/8 e.Pattern-R0/2 >/1
  // closed e.ContextVars$b as range 5
  // closed e.Pattern-R0 as range 2
  //DEBUG: e.ContextVars$b: 5
  //DEBUG: e.Pattern-R0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ReplaceADTBrackets@0/4 } Tile{ AsIs: e.ContextVars$b/5 } Tile{ AsIs: e.Pattern-R0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_ReplaceADTBrackets_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ReplaceADTBrackets_Z1("ReplaceADTBrackets@1", COOKIE1_, COOKIE2_, func_gen_ReplaceADTBrackets_Z1);


static refalrts::FnResult func_gen_PatternLanguagesCheck_S1A3Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & PatternLanguagesCheck$1=3@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PatternLanguagesCheck$1=3@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & PatternLanguagesCheck$1=3@1/4 (/7 e.ContextVars$b/13 )/8 (/11 e.Pattern-L0/15 )/12 e.Pattern-R$a/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.ContextVars$b as range 13
    // closed e.Pattern-L0 as range 15
    // closed e.Pattern-R$a as range 17
    //DEBUG: e.ContextVars$b: 13
    //DEBUG: e.Pattern-L0: 15
    //DEBUG: e.Pattern-R$a: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PatternLanguagesCheck$1=4/4 AsIs: (/7 } Tile{ AsIs: e.Pattern-R$a/17 } Tile{ AsIs: )/8 HalfReuse: </11 } & Map@7/19 Tile{ AsIs: e.ContextVars$b/13 } Tile{ AsIs: e.Pattern-L0/15 } Tile{ HalfReuse: >/12 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[19], functions[efunc_gen_Map_Z7]);
    refalrts::update_name(context[4], functions[efunc_gen_PatternLanguagesCheck_S1A4]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_close_call(context[12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PatternLanguagesCheck$1=3@1/4 (/7 e.ContextVars$b/5 )/8 (/11 e.Pattern-L0/9 )/12 e.dyn/2 >/1
  // closed e.ContextVars$b as range 5
  // closed e.Pattern-L0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.ContextVars$b: 5
  //DEBUG: e.Pattern-L0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 (/11 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PatternLanguagesCheck$1=3@0/4 AsIs: (/7 } Tile{ AsIs: e.ContextVars$b/5 } Tile{ AsIs: e.Pattern-L0/9 } Tile{ AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_PatternLanguagesCheck_S1A3Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PatternLanguagesCheck_S1A3Z1("PatternLanguagesCheck$1=3@1", COOKIE1_, COOKIE2_, func_gen_PatternLanguagesCheck_S1A3Z1);


static refalrts::FnResult func_gen_CheckEveryMatch_S1B1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & CheckEveryMatch$1:1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckEveryMatch$1:1@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & CheckEveryMatch$1:1@1/4 (/7 e.Tuples0/9 )/8 # Clear/13 e.NewAssigns/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = refalrts::ident_left( identifiers[ident_Clear], context[11], context[12] );
    if( ! context[13] )
      continue;
    // closed e.Tuples0 as range 9
    // closed e.NewAssigns as range 11
    //DEBUG: e.Tuples0: 9
    //DEBUG: e.NewAssigns: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckEveryMatch$1:1$1:1/4 AsIs: (/7 AsIs: e.Tuples0/9 AsIs: )/8 HalfReuse: </13 } & AppendAssigns/14 (/15 )/16 Tile{ AsIs: e.NewAssigns/11 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[14], functions[efunc_AppendAssigns]);
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckEveryMatch_S1B1S1B1]);
    refalrts::reinit_open_call(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[13] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[14], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckEveryMatch$1:1@1/4 (/7 e.Tuples0/9 )/8 e.Other/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tuples0 as range 9
    // closed e.Other as range 11
    //DEBUG: e.Tuples0: 9
    //DEBUG: e.Other: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckEveryMatch$1:1@1/4 (/7 e.Tuples0/9 )/8 e.Other/11 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_False]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckEveryMatch$1:1@1/4 (/7 e.Tuples0/5 )/8 e.dyn/2 >/1
  // closed e.Tuples0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Tuples0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckEveryMatch$1:1@0/4 AsIs: (/7 AsIs: e.Tuples0/5 AsIs: )/8 } (/9 )/10 Tile{ AsIs: e.dyn/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckEveryMatch_S1B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckEveryMatch_S1B1Z1("CheckEveryMatch$1:1@1", COOKIE1_, COOKIE2_, func_gen_CheckEveryMatch_S1B1Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@9/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@9/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@9/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@9/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@9/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & CreateTuplePairs\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CreateTuplePairs_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z9("DoMapAccum$1=1@9", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z9);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@10/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@10/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@10/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@10/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@10/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & RenameVars\1@0/16 (/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_RenameVars_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z10("DoMapAccum$1=1@10", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z10);


static refalrts::FnResult func_gen_RenameVars_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & RenameVars@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & RenameVars@2/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & RenameVars@2/4 (/7 e.Call/9 )/8 e.0/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Call as range 9
    // closed e.0 as range 11
    //DEBUG: e.Call: 9
    //DEBUG: e.0: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & DelAccumulator/14 Tile{ AsIs: </0 Reuse: & DoMapAccum@16/4 AsIs: (/7 AsIs: e.Call/9 AsIs: )/8 } 1/15 (/16 )/17 Tile{ AsIs: e.0/11 } >/18 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_DelAccumulator]);
    refalrts::alloc_number(vm, context[15], 1UL);
    refalrts::alloc_open_bracket(vm, context[16]);
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[15], context[17] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & RenameVars@2/4 (/7 e.Call/5 )/8 e.0/2 >/1
  // closed e.Call as range 5
  // closed e.0 as range 2
  //DEBUG: e.Call: 5
  //DEBUG: e.0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 Tile{ HalfReuse: & RenameVars@0/0 HalfReuse: (/4 HalfReuse: 'p'/7 AsIs: e.Call/5 AsIs: )/8 AsIs: e.0/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::reinit_name(context[0], functions[efunc_gen_RenameVars_Z0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::reinit_char(context[7], 'p');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[4], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_RenameVars_Z2("RenameVars@2", COOKIE1_, COOKIE2_, func_gen_RenameVars_Z2);


static refalrts::FnResult func_gen_DoMapAccum_Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 79 elems
  refalrts::Iter context[79];
  refalrts::zeros( context, 79 );
  // </0 & DoMapAccum@15/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@15/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 t.new3/13 (/17 e.new4/15 )/18 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new4 as range 15
  // closed e.new5 as range 2
  do {
    // </0 & DoMapAccum@15/4 (/7 e.new9/19 )/8 (/11 e.new10/21 )/12 t.new6/13 (/17 e.new11/23 )/18 t.new7/27 e.new8/25 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[2];
    context[26] = context[3];
    // closed e.new9 as range 19
    // closed e.new10 as range 21
    // closed e.new11 as range 23
    context[28] = refalrts::tvar_left( context[27], context[25], context[26] );
    if( ! context[28] )
      continue;
    // closed e.new8 as range 25
    do {
      // </0 & DoMapAccum@15/4 (/7 e.new15/29 )/8 (/11 e.new16/31 )/12 s.new12/13 (/17 e.new17/33 )/18 t.new13/27 e.new14/35 >/1
      context[29] = context[19];
      context[30] = context[20];
      context[31] = context[21];
      context[32] = context[22];
      context[33] = context[23];
      context[34] = context[24];
      context[35] = context[25];
      context[36] = context[26];
      if( ! refalrts::svar_term( context[13], context[13] ) )
        continue;
      // closed e.new15 as range 29
      // closed e.new16 as range 31
      // closed e.new17 as range 33
      // closed e.new14 as range 35
      do {
        // </0 & DoMapAccum@15/4 (/7 e.new22/37 )/8 (/11 e.new23/39 )/12 s.new18/13 (/17 e.new24/41 )/18 (/27 s.new19/47 e.new20/45 )/28 e.new21/43 >/1
        context[37] = context[29];
        context[38] = context[30];
        context[39] = context[31];
        context[40] = context[32];
        context[41] = context[33];
        context[42] = context[34];
        context[43] = context[35];
        context[44] = context[36];
        context[45] = 0;
        context[46] = 0;
        if( ! refalrts::brackets_term( context[45], context[46], context[27] ) )
          continue;
        // closed e.new22 as range 37
        // closed e.new23 as range 39
        // closed e.new24 as range 41
        // closed e.new21 as range 43
        if( ! refalrts::svar_left( context[47], context[45], context[46] ) )
          continue;
        // closed e.new20 as range 45
        do {
          // </0 & DoMapAccum@15/4 (/7 e.Prefix0/48 )/8 (/11 e.Call/50 )/12 s.Count/13 (/17 e.Scanned/52 )/18 (/27 # Var/47 s.Type/58 e.1/54 )/28 e.Tail/56 >/1
          context[48] = context[37];
          context[49] = context[38];
          context[50] = context[39];
          context[51] = context[40];
          context[52] = context[41];
          context[53] = context[42];
          context[54] = context[45];
          context[55] = context[46];
          context[56] = context[43];
          context[57] = context[44];
          if( ! refalrts::ident_term( identifiers[ident_Var], context[47] ) )
            continue;
          // closed e.Prefix0 as range 48
          // closed e.Call as range 50
          // closed e.Scanned as range 52
          // closed e.Tail as range 56
          if( ! refalrts::svar_left( context[58], context[54], context[55] ) )
            continue;
          // closed e.1 as range 54
          //DEBUG: s.Count: 13
          //DEBUG: e.Prefix0: 48
          //DEBUG: e.Call: 50
          //DEBUG: e.Scanned: 52
          //DEBUG: e.Tail: 56
          //DEBUG: s.Type: 58
          //DEBUG: e.1: 54

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@15/4 AsIs: (/7 AsIs: e.Prefix0/48 AsIs: )/8 AsIs: (/11 AsIs: e.Call/50 AsIs: )/12 } Tile{ AsIs: (/17 AsIs: e.Scanned/52 AsIs: )/18 AsIs: (/27 } Tile{ AsIs: e.Tail/56 } Tile{ AsIs: )/28 } </59 & Add/60 1/61 Tile{ AsIs: s.Count/13 } >/62 (/63 Tile{ AsIs: # Var/47 AsIs: s.Type/58 } Tile{ AsIs: e.1/54 } e.Prefix0/48/64 'p'/66 e.Call/50/67 's'/69 </70 & Symb/71 s.Count/13/72 >/73 )/74 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[59]);
          refalrts::alloc_name(vm, context[60], functions[efunc_Add]);
          refalrts::alloc_number(vm, context[61], 1UL);
          refalrts::alloc_close_call(vm, context[62]);
          refalrts::alloc_open_bracket(vm, context[63]);
          refalrts::copy_evar(vm, context[64], context[65], context[48], context[49]);
          refalrts::alloc_char(vm, context[66], 'p');
          refalrts::copy_evar(vm, context[67], context[68], context[50], context[51]);
          refalrts::alloc_char(vm, context[69], 's');
          refalrts::alloc_open_call(vm, context[70]);
          refalrts::alloc_name(vm, context[71], functions[efunc_Symb]);
          refalrts::copy_stvar(vm, context[72], context[13]);
          refalrts::alloc_close_call(vm, context[73]);
          refalrts::alloc_close_bracket(vm, context[74]);
          refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z15]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[63], context[74] );
          refalrts::push_stack( vm, context[73] );
          refalrts::push_stack( vm, context[70] );
          refalrts::push_stack( vm, context[62] );
          refalrts::push_stack( vm, context[59] );
          refalrts::link_brackets( context[27], context[28] );
          refalrts::link_brackets( context[17], context[18] );
          refalrts::link_brackets( context[11], context[12] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[66], context[74] );
          res = refalrts::splice_evar( res, context[64], context[65] );
          res = refalrts::splice_evar( res, context[54], context[55] );
          res = refalrts::splice_evar( res, context[47], context[58] );
          res = refalrts::splice_evar( res, context[62], context[63] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[59], context[61] );
          res = refalrts::splice_elem( res, context[28] );
          res = refalrts::splice_evar( res, context[56], context[57] );
          res = refalrts::splice_evar( res, context[17], context[27] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@15/4 (/7 e.Prefix0/48 )/8 (/11 e.Call/50 )/12 s.Count/13 (/17 e.Scanned/52 )/18 (/27 # Brackets/47 e.0/54 )/28 e.Tail/56 >/1
        context[48] = context[37];
        context[49] = context[38];
        context[50] = context[39];
        context[51] = context[40];
        context[52] = context[41];
        context[53] = context[42];
        context[54] = context[45];
        context[55] = context[46];
        context[56] = context[43];
        context[57] = context[44];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[47] ) )
          continue;
        // closed e.Prefix0 as range 48
        // closed e.Call as range 50
        // closed e.Scanned as range 52
        // closed e.0 as range 54
        // closed e.Tail as range 56
        //DEBUG: s.Count: 13
        //DEBUG: e.Prefix0: 48
        //DEBUG: e.Call: 50
        //DEBUG: e.Scanned: 52
        //DEBUG: e.0: 54
        //DEBUG: e.Tail: 56

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@15/4 AsIs: (/7 AsIs: e.Prefix0/48 AsIs: )/8 AsIs: (/11 AsIs: e.Call/50 AsIs: )/12 } Tile{ AsIs: (/17 AsIs: e.Scanned/52 AsIs: )/18 AsIs: (/27 } Tile{ AsIs: e.Tail/56 } )/58 </59 & Add/60 1/61 Tile{ AsIs: s.Count/13 } >/62 (/63 # Brackets/64 </65 & RenameVars/66 (/67 e.Prefix0/48/68 'p'/70 e.Call/50/71 'p'/73 </74 & Symb/75 s.Count/13/76 >/77 Tile{ HalfReuse: )/47 AsIs: e.0/54 HalfReuse: >/28 } )/78 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[58]);
        refalrts::alloc_open_call(vm, context[59]);
        refalrts::alloc_name(vm, context[60], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[61], 1UL);
        refalrts::alloc_close_call(vm, context[62]);
        refalrts::alloc_open_bracket(vm, context[63]);
        refalrts::alloc_ident(vm, context[64], identifiers[ident_Brackets]);
        refalrts::alloc_open_call(vm, context[65]);
        refalrts::alloc_name(vm, context[66], functions[efunc_RenameVars]);
        refalrts::alloc_open_bracket(vm, context[67]);
        refalrts::copy_evar(vm, context[68], context[69], context[48], context[49]);
        refalrts::alloc_char(vm, context[70], 'p');
        refalrts::copy_evar(vm, context[71], context[72], context[50], context[51]);
        refalrts::alloc_char(vm, context[73], 'p');
        refalrts::alloc_open_call(vm, context[74]);
        refalrts::alloc_name(vm, context[75], functions[efunc_Symb]);
        refalrts::copy_stvar(vm, context[76], context[13]);
        refalrts::alloc_close_call(vm, context[77]);
        refalrts::alloc_close_bracket(vm, context[78]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z15]);
        refalrts::reinit_close_bracket(context[47]);
        refalrts::reinit_close_call(context[28]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[63], context[78] );
        refalrts::push_stack( vm, context[28] );
        refalrts::push_stack( vm, context[65] );
        refalrts::link_brackets( context[67], context[47] );
        refalrts::push_stack( vm, context[77] );
        refalrts::push_stack( vm, context[74] );
        refalrts::push_stack( vm, context[62] );
        refalrts::push_stack( vm, context[59] );
        refalrts::link_brackets( context[27], context[58] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[78] );
        res = refalrts::splice_evar( res, context[47], context[28] );
        res = refalrts::splice_evar( res, context[62], context[77] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[58], context[61] );
        res = refalrts::splice_evar( res, context[56], context[57] );
        res = refalrts::splice_evar( res, context[17], context[27] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@15/4 (/7 e.Prefix0/37 )/8 (/11 e.Call/39 )/12 s.Count/13 (/17 e.Scanned/41 )/18 t.Next/27 e.Tail/43 >/1
      context[37] = context[29];
      context[38] = context[30];
      context[39] = context[31];
      context[40] = context[32];
      context[41] = context[33];
      context[42] = context[34];
      context[43] = context[35];
      context[44] = context[36];
      // closed e.Prefix0 as range 37
      // closed e.Call as range 39
      // closed e.Scanned as range 41
      // closed e.Tail as range 43
      //DEBUG: t.Next: 27
      //DEBUG: s.Count: 13
      //DEBUG: e.Prefix0: 37
      //DEBUG: e.Call: 39
      //DEBUG: e.Scanned: 41
      //DEBUG: e.Tail: 43

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@15/4 AsIs: (/7 AsIs: e.Prefix0/37 AsIs: )/8 AsIs: (/11 AsIs: e.Call/39 AsIs: )/12 AsIs: s.Count/13 AsIs: (/17 } Tile{ AsIs: e.Scanned/41 } Tile{ AsIs: t.Next/27 } Tile{ AsIs: )/18 } Tile{ AsIs: e.Tail/43 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@15/4 (/7 e.Prefix0/29 )/8 (/11 e.Call/31 )/12 t.Acc/13 (/17 e.Scanned/33 )/18 t.Next/27 e.Tail/35 >/1
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[21];
    context[32] = context[22];
    context[33] = context[23];
    context[34] = context[24];
    context[35] = context[25];
    context[36] = context[26];
    // closed e.Prefix0 as range 29
    // closed e.Call as range 31
    // closed e.Scanned as range 33
    // closed e.Tail as range 35
    //DEBUG: t.Acc: 13
    //DEBUG: t.Next: 27
    //DEBUG: e.Prefix0: 29
    //DEBUG: e.Call: 31
    //DEBUG: e.Scanned: 33
    //DEBUG: e.Tail: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@15/4 AsIs: (/7 AsIs: e.Prefix0/29 AsIs: )/8 AsIs: (/11 AsIs: e.Call/31 AsIs: )/12 } Tile{ AsIs: (/17 AsIs: e.Scanned/33 AsIs: )/18 } (/37 Tile{ AsIs: e.Tail/35 } )/38 </39 & RenameVars\1*3/40 (/41 e.Prefix0/29/42 'p'/44 e.Call/31/45 )/47 Tile{ AsIs: t.Acc/13 } Tile{ AsIs: t.Next/27 } >/48 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::alloc_open_call(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_gen_RenameVars_L1D3]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::copy_evar(vm, context[42], context[43], context[29], context[30]);
    refalrts::alloc_char(vm, context[44], 'p');
    refalrts::copy_evar(vm, context[45], context[46], context[31], context[32]);
    refalrts::alloc_close_bracket(vm, context[47]);
    refalrts::alloc_close_call(vm, context[48]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[39] );
    refalrts::link_brackets( context[41], context[47] );
    refalrts::link_brackets( context[37], context[38] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[48] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[38], context[47] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@15/4 (/7 e.Prefix0/19 )/8 (/11 e.Call/21 )/12 t.Acc/13 (/17 e.Scanned/23 )/18 >/1
    context[19] = context[5];
    context[20] = context[6];
    context[21] = context[9];
    context[22] = context[10];
    context[23] = context[15];
    context[24] = context[16];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Prefix0 as range 19
    // closed e.Call as range 21
    // closed e.Scanned as range 23
    //DEBUG: t.Acc: 13
    //DEBUG: e.Prefix0: 19
    //DEBUG: e.Call: 21
    //DEBUG: e.Scanned: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@15/4 (/7 e.Prefix0/19 )/8 (/11 e.Call/21 )/12 {REMOVED TILE} (/17 {REMOVED TILE} )/18 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/13 } Tile{ AsIs: e.Scanned/23 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@15/4 (/7 e.Prefix0/5 )/8 (/11 e.Call/9 )/12 t.acc/13 (/17 e.scanned/15 )/18 e.items/2 >/1
  // closed e.Prefix0 as range 5
  // closed e.Call as range 9
  // closed e.scanned as range 15
  // closed e.items as range 2
  //DEBUG: t.acc: 13
  //DEBUG: e.Prefix0: 5
  //DEBUG: e.Call: 9
  //DEBUG: e.scanned: 15
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </11 } & DoMapAccum@0/19 Tile{ HalfReuse: [*]/0 Reuse: & RenameVars\1@0/4 AsIs: (/7 AsIs: e.Prefix0/5 HalfReuse: 'p'/8 } Tile{ AsIs: e.Call/9 } )/20 Tile{ HalfReuse: {*}/12 AsIs: t.acc/13 AsIs: (/17 AsIs: e.scanned/15 AsIs: )/18 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[19], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::reinit_open_call(context[11]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_RenameVars_L1Z0]);
  refalrts::reinit_char(context[8], 'p');
  refalrts::reinit_unwrapped_closure(context[12], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[7], context[20] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  refalrts::wrap_closure( context[12] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z15("DoMapAccum@15", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z15);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DoMapAccum$1=1@11/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@11/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & DoMapAccum$1=1@11/4 (/7 e.Prefix/17 )/8 (/11 e.Scanned0/19 )/12 (/15 e.Tail0/21 )/16 t.Acc$a/25 e.StepScanned/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.Prefix as range 17
    // closed e.Scanned0 as range 19
    // closed e.Tail0 as range 21
    context[26] = refalrts::tvar_left( context[25], context[23], context[24] );
    if( ! context[26] )
      continue;
    // closed e.StepScanned as range 23
    //DEBUG: e.Prefix: 17
    //DEBUG: e.Scanned0: 19
    //DEBUG: e.Tail0: 21
    //DEBUG: t.Acc$a: 25
    //DEBUG: e.StepScanned: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/11 {REMOVED TILE} )/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@11/4 AsIs: (/7 AsIs: e.Prefix/17 AsIs: )/8 } Tile{ AsIs: t.Acc$a/25 } Tile{ AsIs: (/15 } Tile{ AsIs: e.Scanned0/19 } Tile{ AsIs: e.StepScanned/23 } Tile{ AsIs: )/16 } Tile{ AsIs: e.Tail0/21 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@11/4 (/7 e.Prefix/5 )/8 (/11 e.Scanned0/9 )/12 (/15 e.Tail0/13 )/16 e.dyn/2 >/1
  // closed e.Prefix as range 5
  // closed e.Scanned0 as range 9
  // closed e.Tail0 as range 13
  // closed e.dyn as range 2
  //DEBUG: e.Prefix: 5
  //DEBUG: e.Scanned0: 9
  //DEBUG: e.Tail0: 13
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@0/4 HalfReuse: [*]/7 } & RenameVars\1@0/17 (/18 Tile{ AsIs: e.Prefix/5 } )/19 Tile{ HalfReuse: {*}/8 AsIs: (/11 AsIs: e.Scanned0/9 AsIs: )/12 AsIs: (/15 AsIs: e.Tail0/13 AsIs: )/16 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_RenameVars_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::reinit_closure_head(context[7]);
  refalrts::reinit_unwrapped_closure(context[8], context[7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  refalrts::wrap_closure( context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z11("DoMapAccum$1=1@11", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z11);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@12/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@12/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@12/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@12/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@12/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & CountTVarsMultiplicity\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CountTVarsMultiplicity_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z12("DoMapAccum$1=1@12", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z12);


static refalrts::FnResult func_gen_CheckSentences_A3Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & CheckSentences=3@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences=3@1/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 2
  do {
    // </0 & CheckSentences=3@1/4 t.SrcPos0/5 (/9 e.Name/15 )/10 (/13 e.Sentences0/17 )/14 e.NumberedSentencesPairs$a/19 >/1
    context[15] = context[7];
    context[16] = context[8];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.Name as range 15
    // closed e.Sentences0 as range 17
    // closed e.NumberedSentencesPairs$a as range 19
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.Name: 15
    //DEBUG: e.Sentences0: 17
    //DEBUG: e.NumberedSentencesPairs$a: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1=1@1/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.Name/15 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.NumberedSentencesPairs$a/19 } Tile{ AsIs: )/14 } </21 & Unique/22 </23 & ExtractVariables-Expr/24 >/25 >/26 >/27 </28 & DelAccumulator/29 </30 & DoMapAccum@17/31 t.SrcPos0/5/32 (/34 e.Name/15/35 )/37 1/38 (/39 )/40 Tile{ AsIs: e.Sentences0/17 } >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Unique]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_ExtractVariablesm_Expr]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::alloc_open_call(vm, context[28]);
    refalrts::alloc_name(vm, context[29], functions[efunc_DelAccumulator]);
    refalrts::alloc_open_call(vm, context[30]);
    refalrts::alloc_name(vm, context[31], functions[efunc_gen_DoMapAccum_Z17]);
    refalrts::copy_evar(vm, context[32], context[33], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[34]);
    refalrts::copy_evar(vm, context[35], context[36], context[15], context[16]);
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::alloc_number(vm, context[38], 1UL);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1A1Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[28] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[30] );
    refalrts::link_brackets( context[39], context[40] );
    refalrts::link_brackets( context[34], context[37] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[21], context[40] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences=3@1/4 t.SrcPos0/5 (/9 e.Name/7 )/10 (/13 e.Sentences0/11 )/14 e.dyn/2 >/1
  // closed e.Name as range 7
  // closed e.Sentences0 as range 11
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.Name: 7
  //DEBUG: e.Sentences0: 11
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=3@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.Name/7 AsIs: )/10 AsIs: (/13 } )/15 (/16 )/17 (/18 Tile{ AsIs: e.Sentences0/11 } Tile{ AsIs: )/14 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A3Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[18], context[14] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[13], context[15] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[14];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[15], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_A3Z1("CheckSentences=3@1", COOKIE1_, COOKIE2_, func_gen_CheckSentences_A3Z1);


static refalrts::FnResult func_gen_CheckSentences_A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & CheckSentences=1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences=1@4/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 e.new8/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  // closed e.new8 as range 2
  do {
    // </0 & CheckSentences=1@4/4 t.SrcPos0/5 (/9 e.FuncName0/31 )/10 (/13 e.Prefix$a/33 )/14 (/17 e.Call/35 )/18 (/21 e.ContextVars$a/37 )/22 (/25 e.ContextAllAssignsOrConds/39 )/26 (/29 e.1/41 )/30 e.NumberedSentences/43 >/1
    context[31] = context[7];
    context[32] = context[8];
    context[33] = context[11];
    context[34] = context[12];
    context[35] = context[15];
    context[36] = context[16];
    context[37] = context[19];
    context[38] = context[20];
    context[39] = context[23];
    context[40] = context[24];
    context[41] = context[27];
    context[42] = context[28];
    context[43] = context[2];
    context[44] = context[3];
    // closed e.FuncName0 as range 31
    // closed e.Prefix$a as range 33
    // closed e.Call as range 35
    // closed e.ContextVars$a as range 37
    // closed e.ContextAllAssignsOrConds as range 39
    // closed e.1 as range 41
    // closed e.NumberedSentences as range 43
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 31
    //DEBUG: e.Prefix$a: 33
    //DEBUG: e.Call: 35
    //DEBUG: e.ContextVars$a: 37
    //DEBUG: e.ContextAllAssignsOrConds: 39
    //DEBUG: e.1: 41
    //DEBUG: e.NumberedSentences: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=2@4/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/31 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/33 AsIs: )/14 AsIs: (/17 AsIs: e.Call/35 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars$a/37 AsIs: )/22 AsIs: (/25 AsIs: e.ContextAllAssignsOrConds/39 AsIs: )/26 AsIs: (/29 AsIs: e.1/41 AsIs: )/30 } </45 & MakePairs/46 Tile{ AsIs: e.NumberedSentences/43 } >/47 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[45]);
    refalrts::alloc_name(vm, context[46], functions[efunc_MakePairs]);
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A2Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[45] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[47] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences=1@4/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix$a/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars$a/19 )/22 (/25 e.ContextAllAssignsOrConds/23 )/26 (/29 e.1/27 )/30 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix$a as range 11
  // closed e.Call as range 15
  // closed e.ContextVars$a as range 19
  // closed e.ContextAllAssignsOrConds as range 23
  // closed e.1 as range 27
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix$a: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars$a: 19
  //DEBUG: e.ContextAllAssignsOrConds: 23
  //DEBUG: e.1: 27
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} )/18 (/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/11 HalfReuse: '\\'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/22 AsIs: (/25 } Tile{ AsIs: e.ContextVars$a/19 } Tile{ AsIs: e.ContextAllAssignsOrConds/23 } Tile{ AsIs: )/26 AsIs: (/29 AsIs: e.1/27 AsIs: )/30 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A1Z0]);
  refalrts::reinit_char(context[14], '\\');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[13], context[22] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[26];
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[22], context[25] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_A1Z4("CheckSentences=1@4", COOKIE1_, COOKIE2_, func_gen_CheckSentences_A1Z4);


static refalrts::FnResult func_gen_CheckSentences_A1Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & CheckSentences=1@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences=1@5/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 e.new8/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  // closed e.new8 as range 2
  do {
    // </0 & CheckSentences=1@5/4 t.SrcPos0/5 (/9 e.FuncName0/31 )/10 (/13 e.Prefix$a/33 )/14 (/17 e.Call/35 )/18 (/21 e.ContextVars$a/37 )/22 (/25 e.ContextAllAssignsOrConds/39 )/26 (/29 e.0/41 )/30 e.NumberedSentences/43 >/1
    context[31] = context[7];
    context[32] = context[8];
    context[33] = context[11];
    context[34] = context[12];
    context[35] = context[15];
    context[36] = context[16];
    context[37] = context[19];
    context[38] = context[20];
    context[39] = context[23];
    context[40] = context[24];
    context[41] = context[27];
    context[42] = context[28];
    context[43] = context[2];
    context[44] = context[3];
    // closed e.FuncName0 as range 31
    // closed e.Prefix$a as range 33
    // closed e.Call as range 35
    // closed e.ContextVars$a as range 37
    // closed e.ContextAllAssignsOrConds as range 39
    // closed e.0 as range 41
    // closed e.NumberedSentences as range 43
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 31
    //DEBUG: e.Prefix$a: 33
    //DEBUG: e.Call: 35
    //DEBUG: e.ContextVars$a: 37
    //DEBUG: e.ContextAllAssignsOrConds: 39
    //DEBUG: e.0: 41
    //DEBUG: e.NumberedSentences: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=2@5/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/31 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/33 AsIs: )/14 AsIs: (/17 AsIs: e.Call/35 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars$a/37 AsIs: )/22 AsIs: (/25 AsIs: e.ContextAllAssignsOrConds/39 AsIs: )/26 AsIs: (/29 AsIs: e.0/41 AsIs: )/30 } </45 & MakePairs/46 Tile{ AsIs: e.NumberedSentences/43 } >/47 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[45]);
    refalrts::alloc_name(vm, context[46], functions[efunc_MakePairs]);
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A2Z5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[45] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[47] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences=1@5/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix$a/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars$a/19 )/22 (/25 e.ContextAllAssignsOrConds/23 )/26 (/29 e.0/27 )/30 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix$a as range 11
  // closed e.Call as range 15
  // closed e.ContextVars$a as range 19
  // closed e.ContextAllAssignsOrConds as range 23
  // closed e.0 as range 27
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix$a: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars$a: 19
  //DEBUG: e.ContextAllAssignsOrConds: 23
  //DEBUG: e.0: 27
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} )/18 (/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/11 HalfReuse: ':'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/22 AsIs: (/25 } Tile{ AsIs: e.ContextVars$a/19 } Tile{ AsIs: e.ContextAllAssignsOrConds/23 } Tile{ AsIs: )/26 AsIs: (/29 AsIs: e.0/27 AsIs: )/30 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A1Z0]);
  refalrts::reinit_char(context[14], ':');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[13], context[22] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[26];
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[22], context[25] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_A1Z5("CheckSentences=1@5", COOKIE1_, COOKIE2_, func_gen_CheckSentences_A1Z5);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  // </0 & DoMapAccum$1=1@13/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@13/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 (/33 e.new8/31 )/34 e.new9/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  // closed e.new8 as range 31
  // closed e.new9 as range 2
  do {
    // </0 & DoMapAccum$1=1@13/4 t.SrcPos0/5 (/9 e.FuncName0/35 )/10 (/13 e.Prefix$a0/37 )/14 (/17 e.ContextVars/39 )/18 (/21 e.Pattern0/41 )/22 (/25 e.ContextAllAssignsOrConds/43 )/26 (/29 e.Scanned0/45 )/30 (/33 e.Tail0/47 )/34 t.Acc$a/51 e.StepScanned/49 >/1
    context[35] = context[7];
    context[36] = context[8];
    context[37] = context[11];
    context[38] = context[12];
    context[39] = context[15];
    context[40] = context[16];
    context[41] = context[19];
    context[42] = context[20];
    context[43] = context[23];
    context[44] = context[24];
    context[45] = context[27];
    context[46] = context[28];
    context[47] = context[31];
    context[48] = context[32];
    context[49] = context[2];
    context[50] = context[3];
    // closed e.FuncName0 as range 35
    // closed e.Prefix$a0 as range 37
    // closed e.ContextVars as range 39
    // closed e.Pattern0 as range 41
    // closed e.ContextAllAssignsOrConds as range 43
    // closed e.Scanned0 as range 45
    // closed e.Tail0 as range 47
    context[52] = refalrts::tvar_left( context[51], context[49], context[50] );
    if( ! context[52] )
      continue;
    // closed e.StepScanned as range 49
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 35
    //DEBUG: e.Prefix$a0: 37
    //DEBUG: e.ContextVars: 39
    //DEBUG: e.Pattern0: 41
    //DEBUG: e.ContextAllAssignsOrConds: 43
    //DEBUG: e.Scanned0: 45
    //DEBUG: e.Tail0: 47
    //DEBUG: t.Acc$a: 51
    //DEBUG: e.StepScanned: 49

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/29 {REMOVED TILE} )/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@13/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/35 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/37 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars/39 AsIs: )/18 AsIs: (/21 AsIs: e.Pattern0/41 AsIs: )/22 AsIs: (/25 AsIs: e.ContextAllAssignsOrConds/43 AsIs: )/26 } Tile{ AsIs: t.Acc$a/51 } Tile{ AsIs: (/33 } Tile{ AsIs: e.Scanned0/45 } Tile{ AsIs: e.StepScanned/49 } Tile{ AsIs: )/34 } Tile{ AsIs: e.Tail0/47 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[33], context[34] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    refalrts::splice_to_freelist_open( vm, context[26], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@13/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix$a0/11 )/14 (/17 e.ContextVars/15 )/18 (/21 e.Pattern0/19 )/22 (/25 e.ContextAllAssignsOrConds/23 )/26 (/29 e.Scanned0/27 )/30 (/33 e.Tail0/31 )/34 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix$a0 as range 11
  // closed e.ContextVars as range 15
  // closed e.Pattern0 as range 19
  // closed e.ContextAllAssignsOrConds as range 23
  // closed e.Scanned0 as range 27
  // closed e.Tail0 as range 31
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix$a0: 11
  //DEBUG: e.ContextVars: 15
  //DEBUG: e.Pattern0: 19
  //DEBUG: e.ContextAllAssignsOrConds: 23
  //DEBUG: e.Scanned0: 27
  //DEBUG: e.Tail0: 31
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/25 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </18 HalfReuse: & DoMapAccum$1=1@0/21 } Tile{ HalfReuse: [*]/0 Reuse: & CheckExpression\1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/11 AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.ContextVars/15 } Tile{ AsIs: e.Pattern0/19 } Tile{ AsIs: e.ContextAllAssignsOrConds/23 } Tile{ AsIs: )/22 } Tile{ HalfReuse: {*}/26 AsIs: (/29 AsIs: e.Scanned0/27 AsIs: )/30 AsIs: (/33 AsIs: e.Tail0/31 AsIs: )/34 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[18]);
  refalrts::reinit_name(context[21], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckExpression_L1Z0]);
  refalrts::reinit_unwrapped_closure(context[26], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[18] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[17], context[22] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[26];
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[0], context[17] );
  res = refalrts::splice_evar( res, context[18], context[21] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  refalrts::wrap_closure( context[26] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z13("DoMapAccum$1=1@13", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z13);


static refalrts::FnResult func_gen_CheckSentences_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 58 elems
  refalrts::Iter context[58];
  refalrts::zeros( context, 58 );
  // </0 & CheckSentences@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences@5/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 e.new8/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  // closed e.new8 as range 2
  do {
    // </0 & CheckSentences@5/4 t.SrcPos0/5 (/9 e.FuncName0/31 )/10 (/13 e.Prefix$a0/33 )/14 (/17 e.Call/35 )/18 (/21 e.ContextVars0/37 )/22 (/25 e.Pattern0/39 )/26 (/29 e.ContextAllAssignsOrConds/41 )/30 e.1/43 >/1
    context[31] = context[7];
    context[32] = context[8];
    context[33] = context[11];
    context[34] = context[12];
    context[35] = context[15];
    context[36] = context[16];
    context[37] = context[19];
    context[38] = context[20];
    context[39] = context[23];
    context[40] = context[24];
    context[41] = context[27];
    context[42] = context[28];
    context[43] = context[2];
    context[44] = context[3];
    // closed e.FuncName0 as range 31
    // closed e.Prefix$a0 as range 33
    // closed e.Call as range 35
    // closed e.ContextVars0 as range 37
    // closed e.Pattern0 as range 39
    // closed e.ContextAllAssignsOrConds as range 41
    // closed e.1 as range 43
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 31
    //DEBUG: e.Prefix$a0: 33
    //DEBUG: e.Call: 35
    //DEBUG: e.ContextVars0: 37
    //DEBUG: e.Pattern0: 39
    //DEBUG: e.ContextAllAssignsOrConds: 41
    //DEBUG: e.1: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=1@6/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/31 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/33 AsIs: )/14 AsIs: (/17 AsIs: e.Call/35 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars0/37 AsIs: )/22 AsIs: (/25 AsIs: e.Pattern0/39 AsIs: )/26 AsIs: (/29 AsIs: e.ContextAllAssignsOrConds/41 AsIs: )/30 } (/45 e.1/43/46 )/48 </49 & Enumerate=1/50 </51 & DoMapAccum@2/52 1/53 (/54 )/55 Tile{ AsIs: e.1/43 } >/56 >/57 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[45]);
    refalrts::copy_evar(vm, context[46], context[47], context[43], context[44]);
    refalrts::alloc_close_bracket(vm, context[48]);
    refalrts::alloc_open_call(vm, context[49]);
    refalrts::alloc_name(vm, context[50], functions[efunc_gen_Enumerate_A1]);
    refalrts::alloc_open_call(vm, context[51]);
    refalrts::alloc_name(vm, context[52], functions[efunc_gen_DoMapAccum_Z2]);
    refalrts::alloc_number(vm, context[53], 1UL);
    refalrts::alloc_open_bracket(vm, context[54]);
    refalrts::alloc_close_bracket(vm, context[55]);
    refalrts::alloc_close_call(vm, context[56]);
    refalrts::alloc_close_call(vm, context[57]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A1Z6]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[57] );
    refalrts::push_stack( vm, context[49] );
    refalrts::push_stack( vm, context[56] );
    refalrts::push_stack( vm, context[51] );
    refalrts::link_brackets( context[54], context[55] );
    refalrts::link_brackets( context[45], context[48] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[56], context[57] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[45], context[55] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences@5/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix$a0/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars0/19 )/22 (/25 e.Pattern0/23 )/26 (/29 e.ContextAllAssignsOrConds/27 )/30 e.1/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix$a0 as range 11
  // closed e.Call as range 15
  // closed e.ContextVars0 as range 19
  // closed e.Pattern0 as range 23
  // closed e.ContextAllAssignsOrConds as range 27
  // closed e.1 as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix$a0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars0: 19
  //DEBUG: e.Pattern0: 23
  //DEBUG: e.ContextAllAssignsOrConds: 27
  //DEBUG: e.1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} )/18 (/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/11 HalfReuse: '\\'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/26 AsIs: (/29 } Tile{ AsIs: e.ContextVars0/19 } Tile{ AsIs: e.Pattern0/23 } Tile{ AsIs: e.ContextAllAssignsOrConds/27 } Tile{ AsIs: )/22 AsIs: (/25 } Tile{ AsIs: e.1/2 } Tile{ AsIs: )/30 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_Z0]);
  refalrts::reinit_char(context[14], '\\');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[25], context[30] );
  refalrts::link_brackets( context[29], context[22] );
  refalrts::link_brackets( context[13], context[26] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[30] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[22], context[25] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[26], context[29] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_Z5("CheckSentences@5", COOKIE1_, COOKIE2_, func_gen_CheckSentences_Z5);


static refalrts::FnResult func_gen_CheckSentences_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 58 elems
  refalrts::Iter context[58];
  refalrts::zeros( context, 58 );
  // </0 & CheckSentences@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences@6/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 e.new8/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  // closed e.new8 as range 2
  do {
    // </0 & CheckSentences@6/4 t.SrcPos0/5 (/9 e.FuncName0/31 )/10 (/13 e.Prefix$a0/33 )/14 (/17 e.Call/35 )/18 (/21 e.ContextVars0/37 )/22 (/25 e.Pattern0/39 )/26 (/29 e.ContextAllAssignsOrConds/41 )/30 e.0/43 >/1
    context[31] = context[7];
    context[32] = context[8];
    context[33] = context[11];
    context[34] = context[12];
    context[35] = context[15];
    context[36] = context[16];
    context[37] = context[19];
    context[38] = context[20];
    context[39] = context[23];
    context[40] = context[24];
    context[41] = context[27];
    context[42] = context[28];
    context[43] = context[2];
    context[44] = context[3];
    // closed e.FuncName0 as range 31
    // closed e.Prefix$a0 as range 33
    // closed e.Call as range 35
    // closed e.ContextVars0 as range 37
    // closed e.Pattern0 as range 39
    // closed e.ContextAllAssignsOrConds as range 41
    // closed e.0 as range 43
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 31
    //DEBUG: e.Prefix$a0: 33
    //DEBUG: e.Call: 35
    //DEBUG: e.ContextVars0: 37
    //DEBUG: e.Pattern0: 39
    //DEBUG: e.ContextAllAssignsOrConds: 41
    //DEBUG: e.0: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=1@7/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/31 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/33 AsIs: )/14 AsIs: (/17 AsIs: e.Call/35 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars0/37 AsIs: )/22 AsIs: (/25 AsIs: e.Pattern0/39 AsIs: )/26 AsIs: (/29 AsIs: e.ContextAllAssignsOrConds/41 AsIs: )/30 } (/45 e.0/43/46 )/48 </49 & Enumerate=1/50 </51 & DoMapAccum@2/52 1/53 (/54 )/55 Tile{ AsIs: e.0/43 } >/56 >/57 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[45]);
    refalrts::copy_evar(vm, context[46], context[47], context[43], context[44]);
    refalrts::alloc_close_bracket(vm, context[48]);
    refalrts::alloc_open_call(vm, context[49]);
    refalrts::alloc_name(vm, context[50], functions[efunc_gen_Enumerate_A1]);
    refalrts::alloc_open_call(vm, context[51]);
    refalrts::alloc_name(vm, context[52], functions[efunc_gen_DoMapAccum_Z2]);
    refalrts::alloc_number(vm, context[53], 1UL);
    refalrts::alloc_open_bracket(vm, context[54]);
    refalrts::alloc_close_bracket(vm, context[55]);
    refalrts::alloc_close_call(vm, context[56]);
    refalrts::alloc_close_call(vm, context[57]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A1Z7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[57] );
    refalrts::push_stack( vm, context[49] );
    refalrts::push_stack( vm, context[56] );
    refalrts::push_stack( vm, context[51] );
    refalrts::link_brackets( context[54], context[55] );
    refalrts::link_brackets( context[45], context[48] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[56], context[57] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[45], context[55] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences@6/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix$a0/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars0/19 )/22 (/25 e.Pattern0/23 )/26 (/29 e.ContextAllAssignsOrConds/27 )/30 e.0/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix$a0 as range 11
  // closed e.Call as range 15
  // closed e.ContextVars0 as range 19
  // closed e.Pattern0 as range 23
  // closed e.ContextAllAssignsOrConds as range 27
  // closed e.0 as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix$a0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars0: 19
  //DEBUG: e.Pattern0: 23
  //DEBUG: e.ContextAllAssignsOrConds: 27
  //DEBUG: e.0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} )/18 (/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/11 HalfReuse: ':'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/26 AsIs: (/29 } Tile{ AsIs: e.ContextVars0/19 } Tile{ AsIs: e.Pattern0/23 } Tile{ AsIs: e.ContextAllAssignsOrConds/27 } Tile{ AsIs: )/22 AsIs: (/25 } Tile{ AsIs: e.0/2 } Tile{ AsIs: )/30 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_Z0]);
  refalrts::reinit_char(context[14], ':');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[25], context[30] );
  refalrts::link_brackets( context[29], context[22] );
  refalrts::link_brackets( context[13], context[26] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[30] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[22], context[25] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[26], context[29] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_Z6("CheckSentences@6", COOKIE1_, COOKIE2_, func_gen_CheckSentences_Z6);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  // </0 & DoMapAccum$1=1@14/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@14/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 (/33 e.new8/31 )/34 e.new9/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  // closed e.new8 as range 31
  // closed e.new9 as range 2
  do {
    // </0 & DoMapAccum$1=1@14/4 t.SrcPos0/5 (/9 e.FuncName0/35 )/10 (/13 e.Prefix$a0/37 )/14 (/17 e.ContextVars/39 )/18 (/21 e.Pattern0/41 )/22 (/25 e.ContextAllAssignsOrConds/43 )/26 (/29 e.Scanned0/45 )/30 (/33 e.Tail0/47 )/34 t.Acc$a/51 e.StepScanned/49 >/1
    context[35] = context[7];
    context[36] = context[8];
    context[37] = context[11];
    context[38] = context[12];
    context[39] = context[15];
    context[40] = context[16];
    context[41] = context[19];
    context[42] = context[20];
    context[43] = context[23];
    context[44] = context[24];
    context[45] = context[27];
    context[46] = context[28];
    context[47] = context[31];
    context[48] = context[32];
    context[49] = context[2];
    context[50] = context[3];
    // closed e.FuncName0 as range 35
    // closed e.Prefix$a0 as range 37
    // closed e.ContextVars as range 39
    // closed e.Pattern0 as range 41
    // closed e.ContextAllAssignsOrConds as range 43
    // closed e.Scanned0 as range 45
    // closed e.Tail0 as range 47
    context[52] = refalrts::tvar_left( context[51], context[49], context[50] );
    if( ! context[52] )
      continue;
    // closed e.StepScanned as range 49
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 35
    //DEBUG: e.Prefix$a0: 37
    //DEBUG: e.ContextVars: 39
    //DEBUG: e.Pattern0: 41
    //DEBUG: e.ContextAllAssignsOrConds: 43
    //DEBUG: e.Scanned0: 45
    //DEBUG: e.Tail0: 47
    //DEBUG: t.Acc$a: 51
    //DEBUG: e.StepScanned: 49

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/29 {REMOVED TILE} )/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@14/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/35 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/37 AsIs: )/14 AsIs: (/17 AsIs: e.ContextVars/39 AsIs: )/18 AsIs: (/21 AsIs: e.Pattern0/41 AsIs: )/22 AsIs: (/25 AsIs: e.ContextAllAssignsOrConds/43 AsIs: )/26 } Tile{ AsIs: t.Acc$a/51 } Tile{ AsIs: (/33 } Tile{ AsIs: e.Scanned0/45 } Tile{ AsIs: e.StepScanned/49 } Tile{ AsIs: )/34 } Tile{ AsIs: e.Tail0/47 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z14]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[33], context[34] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    refalrts::splice_to_freelist_open( vm, context[26], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@14/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix$a0/11 )/14 (/17 e.ContextVars/15 )/18 (/21 e.Pattern0/19 )/22 (/25 e.ContextAllAssignsOrConds/23 )/26 (/29 e.Scanned0/27 )/30 (/33 e.Tail0/31 )/34 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix$a0 as range 11
  // closed e.ContextVars as range 15
  // closed e.Pattern0 as range 19
  // closed e.ContextAllAssignsOrConds as range 23
  // closed e.Scanned0 as range 27
  // closed e.Tail0 as range 31
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix$a0: 11
  //DEBUG: e.ContextVars: 15
  //DEBUG: e.Pattern0: 19
  //DEBUG: e.ContextAllAssignsOrConds: 23
  //DEBUG: e.Scanned0: 27
  //DEBUG: e.Tail0: 31
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/25 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </18 HalfReuse: & DoMapAccum$1=1@0/21 } Tile{ HalfReuse: [*]/0 Reuse: & CheckBlocks\1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/11 AsIs: )/14 AsIs: (/17 } Tile{ AsIs: e.ContextVars/15 } Tile{ AsIs: e.Pattern0/19 } Tile{ AsIs: e.ContextAllAssignsOrConds/23 } Tile{ AsIs: )/22 } Tile{ HalfReuse: {*}/26 AsIs: (/29 AsIs: e.Scanned0/27 AsIs: )/30 AsIs: (/33 AsIs: e.Tail0/31 AsIs: )/34 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[18]);
  refalrts::reinit_name(context[21], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckBlocks_L1Z0]);
  refalrts::reinit_unwrapped_closure(context[26], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[18] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[17], context[22] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[26];
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[0], context[17] );
  res = refalrts::splice_evar( res, context[18], context[21] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  refalrts::wrap_closure( context[26] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z14("DoMapAccum$1=1@14", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z14);


static refalrts::FnResult func_gen_CheckSentences_A2Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & CheckSentences=2@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences=2@2/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 e.new7/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 2
  do {
    // </0 & CheckSentences=2@2/4 t.SrcPos0/5 (/9 e.FuncName0/27 )/10 (/13 e.Prefix0/29 )/14 (/17 e.Call/31 )/18 (/21 e.ContextVars0/33 )/22 (/25 e.Sentences0/35 )/26 e.NumberedSentencesPairs/37 >/1
    context[27] = context[7];
    context[28] = context[8];
    context[29] = context[11];
    context[30] = context[12];
    context[31] = context[15];
    context[32] = context[16];
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[23];
    context[36] = context[24];
    context[37] = context[2];
    context[38] = context[3];
    // closed e.FuncName0 as range 27
    // closed e.Prefix0 as range 29
    // closed e.Call as range 31
    // closed e.ContextVars0 as range 33
    // closed e.Sentences0 as range 35
    // closed e.NumberedSentencesPairs as range 37
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 27
    //DEBUG: e.Prefix0: 29
    //DEBUG: e.Call: 31
    //DEBUG: e.ContextVars0: 33
    //DEBUG: e.Sentences0: 35
    //DEBUG: e.NumberedSentencesPairs: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=3@2/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/27 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/29 AsIs: )/14 AsIs: (/17 AsIs: e.Call/31 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars0/33 AsIs: )/22 AsIs: (/25 AsIs: e.Sentences0/35 AsIs: )/26 } </39 & Map@4/40 Tile{ AsIs: e.NumberedSentencesPairs/37 } >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_gen_Map_Z4]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A3Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[39] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences=2@2/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix0/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars0/19 )/22 (/25 e.Sentences0/23 )/26 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix0 as range 11
  // closed e.Call as range 15
  // closed e.ContextVars0 as range 19
  // closed e.Sentences0 as range 23
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars0: 19
  //DEBUG: e.Sentences0: 23
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/14 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=2@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Prefix0/11 } Tile{ HalfReuse: ':'/17 AsIs: e.Call/15 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars0/19 AsIs: )/22 AsIs: (/25 AsIs: e.Sentences0/23 AsIs: )/26 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A2Z0]);
  refalrts::reinit_char(context[17], ':');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[13], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, context[13], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_A2Z2("CheckSentences=2@2", COOKIE1_, COOKIE2_, func_gen_CheckSentences_A2Z2);


static refalrts::FnResult func_gen_CheckSentences_A2Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & CheckSentences=2@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences=2@3/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 e.new7/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 2
  do {
    // </0 & CheckSentences=2@3/4 t.SrcPos0/5 (/9 e.FuncName0/27 )/10 (/13 e.Prefix0/29 )/14 (/17 e.Call/31 )/18 (/21 e.ContextVars0/33 )/22 (/25 e.Sentences0/35 )/26 e.NumberedSentencesPairs/37 >/1
    context[27] = context[7];
    context[28] = context[8];
    context[29] = context[11];
    context[30] = context[12];
    context[31] = context[15];
    context[32] = context[16];
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[23];
    context[36] = context[24];
    context[37] = context[2];
    context[38] = context[3];
    // closed e.FuncName0 as range 27
    // closed e.Prefix0 as range 29
    // closed e.Call as range 31
    // closed e.ContextVars0 as range 33
    // closed e.Sentences0 as range 35
    // closed e.NumberedSentencesPairs as range 37
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 27
    //DEBUG: e.Prefix0: 29
    //DEBUG: e.Call: 31
    //DEBUG: e.ContextVars0: 33
    //DEBUG: e.Sentences0: 35
    //DEBUG: e.NumberedSentencesPairs: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=3@3/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/27 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/29 AsIs: )/14 AsIs: (/17 AsIs: e.Call/31 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars0/33 AsIs: )/22 AsIs: (/25 AsIs: e.Sentences0/35 AsIs: )/26 } </39 & Map@4/40 Tile{ AsIs: e.NumberedSentencesPairs/37 } >/41 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[39]);
    refalrts::alloc_name(vm, context[40], functions[efunc_gen_Map_Z4]);
    refalrts::alloc_close_call(vm, context[41]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A3Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[41] );
    refalrts::push_stack( vm, context[39] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences=2@3/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix0/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars0/19 )/22 (/25 e.Sentences0/23 )/26 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix0 as range 11
  // closed e.Call as range 15
  // closed e.ContextVars0 as range 19
  // closed e.Sentences0 as range 23
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars0: 19
  //DEBUG: e.Sentences0: 23
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/14 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=2@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Prefix0/11 } Tile{ HalfReuse: '\\'/17 AsIs: e.Call/15 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars0/19 AsIs: )/22 AsIs: (/25 AsIs: e.Sentences0/23 AsIs: )/26 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A2Z0]);
  refalrts::reinit_char(context[17], '\\');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[13], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, context[13], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_A2Z3("CheckSentences=2@3", COOKIE1_, COOKIE2_, func_gen_CheckSentences_A2Z3);


static refalrts::FnResult func_gen_DoMapAccum_Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 64 elems
  refalrts::Iter context[64];
  refalrts::zeros( context, 64 );
  // </0 & DoMapAccum@16/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@16/4 (/7 e.new1/5 )/8 t.new2/9 (/13 e.new3/11 )/14 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new3 as range 11
  // closed e.new4 as range 2
  do {
    // </0 & DoMapAccum@16/4 (/7 e.new8/15 )/8 t.new5/9 (/13 e.new9/17 )/14 t.new6/21 e.new7/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.new8 as range 15
    // closed e.new9 as range 17
    context[22] = refalrts::tvar_left( context[21], context[19], context[20] );
    if( ! context[22] )
      continue;
    // closed e.new7 as range 19
    do {
      // </0 & DoMapAccum@16/4 (/7 e.new13/23 )/8 s.new10/9 (/13 e.new14/25 )/14 t.new11/21 e.new12/27 >/1
      context[23] = context[15];
      context[24] = context[16];
      context[25] = context[17];
      context[26] = context[18];
      context[27] = context[19];
      context[28] = context[20];
      if( ! refalrts::svar_term( context[9], context[9] ) )
        continue;
      // closed e.new13 as range 23
      // closed e.new14 as range 25
      // closed e.new12 as range 27
      do {
        // </0 & DoMapAccum@16/4 (/7 e.new19/29 )/8 s.new15/9 (/13 e.new20/31 )/14 (/21 s.new16/37 e.new17/35 )/22 e.new18/33 >/1
        context[29] = context[23];
        context[30] = context[24];
        context[31] = context[25];
        context[32] = context[26];
        context[33] = context[27];
        context[34] = context[28];
        context[35] = 0;
        context[36] = 0;
        if( ! refalrts::brackets_term( context[35], context[36], context[21] ) )
          continue;
        // closed e.new19 as range 29
        // closed e.new20 as range 31
        // closed e.new18 as range 33
        if( ! refalrts::svar_left( context[37], context[35], context[36] ) )
          continue;
        // closed e.new17 as range 35
        do {
          // </0 & DoMapAccum@16/4 (/7 e.Call/38 )/8 s.Count/9 (/13 e.Scanned/40 )/14 (/21 # Var/37 s.Type/46 e.1/42 )/22 e.Tail/44 >/1
          context[38] = context[29];
          context[39] = context[30];
          context[40] = context[31];
          context[41] = context[32];
          context[42] = context[35];
          context[43] = context[36];
          context[44] = context[33];
          context[45] = context[34];
          if( ! refalrts::ident_term( identifiers[ident_Var], context[37] ) )
            continue;
          // closed e.Call as range 38
          // closed e.Scanned as range 40
          // closed e.Tail as range 44
          if( ! refalrts::svar_left( context[46], context[42], context[43] ) )
            continue;
          // closed e.1 as range 42
          //DEBUG: s.Count: 9
          //DEBUG: e.Call: 38
          //DEBUG: e.Scanned: 40
          //DEBUG: e.Tail: 44
          //DEBUG: s.Type: 46
          //DEBUG: e.1: 42

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@16/4 AsIs: (/7 AsIs: e.Call/38 AsIs: )/8 } (/47 Tile{ AsIs: e.Scanned/40 } )/48 (/49 Tile{ AsIs: e.Tail/44 } )/50 </51 & Add/52 1/53 s.Count/9/54 Tile{ HalfReuse: >/14 AsIs: (/21 AsIs: # Var/37 AsIs: s.Type/46 AsIs: e.1/42 HalfReuse: 'p'/22 } e.Call/38/55 's'/57 </58 & Symb/59 Tile{ AsIs: s.Count/9 HalfReuse: >/13 } )/60 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_bracket(vm, context[47]);
          refalrts::alloc_close_bracket(vm, context[48]);
          refalrts::alloc_open_bracket(vm, context[49]);
          refalrts::alloc_close_bracket(vm, context[50]);
          refalrts::alloc_open_call(vm, context[51]);
          refalrts::alloc_name(vm, context[52], functions[efunc_Add]);
          refalrts::alloc_number(vm, context[53], 1UL);
          refalrts::copy_stvar(vm, context[54], context[9]);
          refalrts::copy_evar(vm, context[55], context[56], context[38], context[39]);
          refalrts::alloc_char(vm, context[57], 's');
          refalrts::alloc_open_call(vm, context[58]);
          refalrts::alloc_name(vm, context[59], functions[efunc_Symb]);
          refalrts::alloc_close_bracket(vm, context[60]);
          refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z16]);
          refalrts::reinit_close_call(context[14]);
          refalrts::reinit_char(context[22], 'p');
          refalrts::reinit_close_call(context[13]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[21], context[60] );
          refalrts::push_stack( vm, context[13] );
          refalrts::push_stack( vm, context[58] );
          refalrts::push_stack( vm, context[14] );
          refalrts::push_stack( vm, context[51] );
          refalrts::link_brackets( context[49], context[50] );
          refalrts::link_brackets( context[47], context[48] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[60] );
          res = refalrts::splice_evar( res, context[9], context[13] );
          res = refalrts::splice_evar( res, context[57], context[59] );
          res = refalrts::splice_evar( res, context[55], context[56] );
          res = refalrts::splice_evar( res, context[14], context[22] );
          res = refalrts::splice_evar( res, context[50], context[54] );
          res = refalrts::splice_evar( res, context[44], context[45] );
          res = refalrts::splice_evar( res, context[48], context[49] );
          res = refalrts::splice_evar( res, context[40], context[41] );
          res = refalrts::splice_elem( res, context[47] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@16/4 (/7 e.Call/38 )/8 s.Count/9 (/13 e.Scanned/40 )/14 (/21 # Brackets/37 e.0/42 )/22 e.Tail/44 >/1
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[35];
        context[43] = context[36];
        context[44] = context[33];
        context[45] = context[34];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[37] ) )
          continue;
        // closed e.Call as range 38
        // closed e.Scanned as range 40
        // closed e.0 as range 42
        // closed e.Tail as range 44
        //DEBUG: s.Count: 9
        //DEBUG: e.Call: 38
        //DEBUG: e.Scanned: 40
        //DEBUG: e.0: 42
        //DEBUG: e.Tail: 44

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@16/4 AsIs: (/7 AsIs: e.Call/38 AsIs: )/8 } Tile{ AsIs: (/13 AsIs: e.Scanned/40 AsIs: )/14 AsIs: (/21 } Tile{ AsIs: e.Tail/44 } )/46 </47 & Add/48 1/49 Tile{ AsIs: s.Count/9 } >/50 (/51 # Brackets/52 </53 & RenameVars@2/54 (/55 e.Call/38/56 'p'/58 </59 & Symb/60 s.Count/9/61 >/62 Tile{ HalfReuse: )/37 AsIs: e.0/42 HalfReuse: >/22 } )/63 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[46]);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[49], 1UL);
        refalrts::alloc_close_call(vm, context[50]);
        refalrts::alloc_open_bracket(vm, context[51]);
        refalrts::alloc_ident(vm, context[52], identifiers[ident_Brackets]);
        refalrts::alloc_open_call(vm, context[53]);
        refalrts::alloc_name(vm, context[54], functions[efunc_gen_RenameVars_Z2]);
        refalrts::alloc_open_bracket(vm, context[55]);
        refalrts::copy_evar(vm, context[56], context[57], context[38], context[39]);
        refalrts::alloc_char(vm, context[58], 'p');
        refalrts::alloc_open_call(vm, context[59]);
        refalrts::alloc_name(vm, context[60], functions[efunc_Symb]);
        refalrts::copy_stvar(vm, context[61], context[9]);
        refalrts::alloc_close_call(vm, context[62]);
        refalrts::alloc_close_bracket(vm, context[63]);
        refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z16]);
        refalrts::reinit_close_bracket(context[37]);
        refalrts::reinit_close_call(context[22]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[51], context[63] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[53] );
        refalrts::link_brackets( context[55], context[37] );
        refalrts::push_stack( vm, context[62] );
        refalrts::push_stack( vm, context[59] );
        refalrts::push_stack( vm, context[50] );
        refalrts::push_stack( vm, context[47] );
        refalrts::link_brackets( context[21], context[46] );
        refalrts::link_brackets( context[13], context[14] );
        refalrts::link_brackets( context[7], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[63] );
        res = refalrts::splice_evar( res, context[37], context[22] );
        res = refalrts::splice_evar( res, context[50], context[62] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[46], context[49] );
        res = refalrts::splice_evar( res, context[44], context[45] );
        res = refalrts::splice_evar( res, context[13], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@16/4 (/7 e.Call/29 )/8 s.Count/9 (/13 e.Scanned/31 )/14 t.Next/21 e.Tail/33 >/1
      context[29] = context[23];
      context[30] = context[24];
      context[31] = context[25];
      context[32] = context[26];
      context[33] = context[27];
      context[34] = context[28];
      // closed e.Call as range 29
      // closed e.Scanned as range 31
      // closed e.Tail as range 33
      //DEBUG: t.Next: 21
      //DEBUG: s.Count: 9
      //DEBUG: e.Call: 29
      //DEBUG: e.Scanned: 31
      //DEBUG: e.Tail: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@16/4 AsIs: (/7 AsIs: e.Call/29 AsIs: )/8 AsIs: s.Count/9 AsIs: (/13 } Tile{ AsIs: e.Scanned/31 } Tile{ AsIs: t.Next/21 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Tail/33 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@16/4 (/7 e.Call/23 )/8 t.Acc/9 (/13 e.Scanned/25 )/14 t.Next/21 e.Tail/27 >/1
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[17];
    context[26] = context[18];
    context[27] = context[19];
    context[28] = context[20];
    // closed e.Call as range 23
    // closed e.Scanned as range 25
    // closed e.Tail as range 27
    //DEBUG: t.Acc: 9
    //DEBUG: t.Next: 21
    //DEBUG: e.Call: 23
    //DEBUG: e.Scanned: 25
    //DEBUG: e.Tail: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@16/4 AsIs: (/7 AsIs: e.Call/23 AsIs: )/8 } Tile{ AsIs: (/13 AsIs: e.Scanned/25 AsIs: )/14 } (/29 Tile{ AsIs: e.Tail/27 } )/30 </31 & RenameVars\1*3/32 (/33 'p'/34 e.Call/23/35 )/37 Tile{ AsIs: t.Acc/9 } Tile{ AsIs: t.Next/21 } >/38 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_gen_RenameVars_L1D3]);
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::alloc_char(vm, context[34], 'p');
    refalrts::copy_evar(vm, context[35], context[36], context[23], context[24]);
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::alloc_close_call(vm, context[38]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[38] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[33], context[37] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[30], context[37] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@16/4 (/7 e.Call/15 )/8 t.Acc/9 (/13 e.Scanned/17 )/14 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[11];
    context[18] = context[12];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Call as range 15
    // closed e.Scanned as range 17
    //DEBUG: t.Acc: 9
    //DEBUG: e.Call: 15
    //DEBUG: e.Scanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@16/4 (/7 e.Call/15 )/8 {REMOVED TILE} (/13 {REMOVED TILE} )/14 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/9 } Tile{ AsIs: e.Scanned/17 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@16/4 (/7 e.Call/5 )/8 t.acc/9 (/13 e.scanned/11 )/14 e.items/2 >/1
  // closed e.Call as range 5
  // closed e.scanned as range 11
  // closed e.items as range 2
  //DEBUG: t.acc: 9
  //DEBUG: e.Call: 5
  //DEBUG: e.scanned: 11
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@0/4 HalfReuse: [*]/7 } & RenameVars\1@0/15 (/16 'p'/17 Tile{ AsIs: e.Call/5 } )/18 Tile{ HalfReuse: {*}/8 AsIs: t.acc/9 AsIs: (/13 AsIs: e.scanned/11 AsIs: )/14 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[15], functions[efunc_gen_RenameVars_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_char(vm, context[17], 'p');
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::reinit_closure_head(context[7]);
  refalrts::reinit_unwrapped_closure(context[8], context[7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[16], context[18] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[15], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z16("DoMapAccum@16", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z16);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & DoMapAccum$1=1@15/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@15/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 2
  do {
    // </0 & DoMapAccum$1=1@15/4 (/7 e.Prefix0/21 )/8 (/11 e.Call/23 )/12 (/15 e.Scanned0/25 )/16 (/19 e.Tail0/27 )/20 t.Acc$a/31 e.StepScanned/29 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.Prefix0 as range 21
    // closed e.Call as range 23
    // closed e.Scanned0 as range 25
    // closed e.Tail0 as range 27
    context[32] = refalrts::tvar_left( context[31], context[29], context[30] );
    if( ! context[32] )
      continue;
    // closed e.StepScanned as range 29
    //DEBUG: e.Prefix0: 21
    //DEBUG: e.Call: 23
    //DEBUG: e.Scanned0: 25
    //DEBUG: e.Tail0: 27
    //DEBUG: t.Acc$a: 31
    //DEBUG: e.StepScanned: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/15 {REMOVED TILE} )/16 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@15/4 AsIs: (/7 AsIs: e.Prefix0/21 AsIs: )/8 AsIs: (/11 AsIs: e.Call/23 AsIs: )/12 } Tile{ AsIs: t.Acc$a/31 } Tile{ AsIs: (/19 } Tile{ AsIs: e.Scanned0/25 } Tile{ AsIs: e.StepScanned/29 } Tile{ AsIs: )/20 } Tile{ AsIs: e.Tail0/27 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    refalrts::splice_to_freelist_open( vm, context[12], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@15/4 (/7 e.Prefix0/5 )/8 (/11 e.Call/9 )/12 (/15 e.Scanned0/13 )/16 (/19 e.Tail0/17 )/20 e.dyn/2 >/1
  // closed e.Prefix0 as range 5
  // closed e.Call as range 9
  // closed e.Scanned0 as range 13
  // closed e.Tail0 as range 17
  // closed e.dyn as range 2
  //DEBUG: e.Prefix0: 5
  //DEBUG: e.Call: 9
  //DEBUG: e.Scanned0: 13
  //DEBUG: e.Tail0: 17
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </11 } & DoMapAccum$1=1@0/21 Tile{ HalfReuse: [*]/0 Reuse: & RenameVars\1@0/4 AsIs: (/7 AsIs: e.Prefix0/5 HalfReuse: 'p'/8 } Tile{ AsIs: e.Call/9 } )/22 Tile{ HalfReuse: {*}/12 AsIs: (/15 AsIs: e.Scanned0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Tail0/17 AsIs: )/20 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[21], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::reinit_open_call(context[11]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_RenameVars_L1Z0]);
  refalrts::reinit_char(context[8], 'p');
  refalrts::reinit_unwrapped_closure(context[12], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[7], context[22] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_elem( res, context[22] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  refalrts::wrap_closure( context[12] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z15("DoMapAccum$1=1@15", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z15);


static refalrts::FnResult func_gen_CheckPatternPairs_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & CheckPatternPairs$1=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckPatternPairs$1=1@1/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 2
  do {
    // </0 & CheckPatternPairs$1=1@1/4 t.SrcPos0/5 (/9 e.Name/15 )/10 (/13 e.NumberedSentencesPairs$a/17 )/14 e.ContextVars$a/19 >/1
    context[15] = context[7];
    context[16] = context[8];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.Name as range 15
    // closed e.NumberedSentencesPairs$a as range 17
    // closed e.ContextVars$a as range 19
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.Name: 15
    //DEBUG: e.NumberedSentencesPairs$a: 17
    //DEBUG: e.ContextVars$a: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1=2@1/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.Name/15 AsIs: )/10 AsIs: (/13 AsIs: e.NumberedSentencesPairs$a/17 AsIs: )/14 } </21 & CreateContext/22 # NoMarkupContext/23 Tile{ AsIs: e.ContextVars$a/19 } >/24 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_CreateContext]);
    refalrts::alloc_ident(vm, context[23], identifiers[ident_NoMarkupContext]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1A2Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[21], context[23] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPatternPairs$1=1@1/4 t.SrcPos0/5 (/9 e.Name/7 )/10 (/13 e.NumberedSentencesPairs$a/11 )/14 e.dyn/2 >/1
  // closed e.Name as range 7
  // closed e.NumberedSentencesPairs$a as range 11
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.Name: 7
  //DEBUG: e.NumberedSentencesPairs$a: 11
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1=1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.Name/7 AsIs: )/10 AsIs: (/13 } )/15 (/16 Tile{ AsIs: e.NumberedSentencesPairs$a/11 } Tile{ AsIs: )/14 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[14] );
  refalrts::link_brackets( context[13], context[15] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[14];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckPatternPairs_S1A1Z1("CheckPatternPairs$1=1@1", COOKIE1_, COOKIE2_, func_gen_CheckPatternPairs_S1A1Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z17(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 61 elems
  refalrts::Iter context[61];
  refalrts::zeros( context, 61 );
  // </0 & DoMapAccum@17/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@17/4 t.new1/5 (/9 e.new2/7 )/10 t.new3/11 (/15 e.new4/13 )/16 e.new5/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new4 as range 13
  // closed e.new5 as range 2
  do {
    // </0 & DoMapAccum@17/4 t.new6/5 (/9 e.new10/17 )/10 t.new7/11 (/15 e.new11/19 )/16 t.new8/23 e.new9/21 >/1
    context[17] = context[7];
    context[18] = context[8];
    context[19] = context[13];
    context[20] = context[14];
    context[21] = context[2];
    context[22] = context[3];
    // closed e.new10 as range 17
    // closed e.new11 as range 19
    context[24] = refalrts::tvar_left( context[23], context[21], context[22] );
    if( ! context[24] )
      continue;
    // closed e.new9 as range 21
    do {
      // </0 & DoMapAccum@17/4 t.SrcPos0/5 (/9 e.Name/25 )/10 s.Num/11 (/15 e.Scanned/27 )/16 (/23 (/35 e.1/33 )/36 e.4/31 (/43 e.5/41 )/44 (/39 e.3/37 )/40 )/24 e.Tail/29 >/1
      context[25] = context[17];
      context[26] = context[18];
      context[27] = context[19];
      context[28] = context[20];
      context[29] = context[21];
      context[30] = context[22];
      context[31] = 0;
      context[32] = 0;
      if( ! refalrts::brackets_term( context[31], context[32], context[23] ) )
        continue;
      if( ! refalrts::svar_term( context[11], context[11] ) )
        continue;
      context[33] = 0;
      context[34] = 0;
      context[35] = refalrts::brackets_left( context[33], context[34], context[31], context[32] );
      if( ! context[35] )
        continue;
      refalrts::bracket_pointers(context[35], context[36]);
      context[37] = 0;
      context[38] = 0;
      context[39] = refalrts::brackets_right( context[37], context[38], context[31], context[32] );
      if( ! context[39] )
        continue;
      refalrts::bracket_pointers(context[39], context[40]);
      context[41] = 0;
      context[42] = 0;
      context[43] = refalrts::brackets_right( context[41], context[42], context[31], context[32] );
      if( ! context[43] )
        continue;
      refalrts::bracket_pointers(context[43], context[44]);
      // closed e.Name as range 25
      // closed e.Scanned as range 27
      // closed e.1 as range 33
      // closed e.4 as range 31
      // closed e.5 as range 41
      // closed e.3 as range 37
      // closed e.Tail as range 29
      //DEBUG: t.SrcPos0: 5
      //DEBUG: s.Num: 11
      //DEBUG: e.Name: 25
      //DEBUG: e.Scanned: 27
      //DEBUG: e.1: 33
      //DEBUG: e.4: 31
      //DEBUG: e.5: 41
      //DEBUG: e.3: 37
      //DEBUG: e.Tail: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@17/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.Name/25 AsIs: )/10 } Tile{ AsIs: (/15 AsIs: e.Scanned/27 AsIs: )/16 AsIs: (/23 } Tile{ AsIs: e.Tail/29 } )/45 </46 & CheckSentences\1=1@1/47 Tile{ AsIs: s.Num/11 } t.SrcPos0/5/48 (/50 e.Name/25/51 )/53 Tile{ AsIs: (/35 AsIs: e.1/33 AsIs: )/36 } (/54 Tile{ AsIs: e.4/31 } )/55 Tile{ AsIs: (/43 AsIs: e.5/41 AsIs: )/44 AsIs: (/39 AsIs: e.3/37 AsIs: )/40 HalfReuse: '$'/24 } </56 & Symb/57 s.Num/11/58 >/59 >/60 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[45]);
      refalrts::alloc_open_call(vm, context[46]);
      refalrts::alloc_name(vm, context[47], functions[efunc_gen_CheckSentences_L1A1Z1]);
      refalrts::copy_evar(vm, context[48], context[49], context[5], context[6]);
      refalrts::alloc_open_bracket(vm, context[50]);
      refalrts::copy_evar(vm, context[51], context[52], context[25], context[26]);
      refalrts::alloc_close_bracket(vm, context[53]);
      refalrts::alloc_open_bracket(vm, context[54]);
      refalrts::alloc_close_bracket(vm, context[55]);
      refalrts::alloc_open_call(vm, context[56]);
      refalrts::alloc_name(vm, context[57], functions[efunc_Symb]);
      refalrts::copy_stvar(vm, context[58], context[11]);
      refalrts::alloc_close_call(vm, context[59]);
      refalrts::alloc_close_call(vm, context[60]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z17]);
      refalrts::reinit_char(context[24], '$');
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[60] );
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[59] );
      refalrts::push_stack( vm, context[56] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[43], context[44] );
      refalrts::link_brackets( context[54], context[55] );
      refalrts::link_brackets( context[35], context[36] );
      refalrts::link_brackets( context[50], context[53] );
      refalrts::link_brackets( context[23], context[45] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[56], context[60] );
      res = refalrts::splice_evar( res, context[43], context[24] );
      res = refalrts::splice_elem( res, context[55] );
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_elem( res, context[54] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[48], context[53] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[45], context[47] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[15], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@17/4 t.SrcPos0/5 (/9 e.Name/25 )/10 t.Acc/11 (/15 e.Scanned/27 )/16 t.Next/23 e.Tail/29 >/1
    context[25] = context[17];
    context[26] = context[18];
    context[27] = context[19];
    context[28] = context[20];
    context[29] = context[21];
    context[30] = context[22];
    // closed e.Name as range 25
    // closed e.Scanned as range 27
    // closed e.Tail as range 29
    //DEBUG: t.SrcPos0: 5
    //DEBUG: t.Acc: 11
    //DEBUG: t.Next: 23
    //DEBUG: e.Name: 25
    //DEBUG: e.Scanned: 27
    //DEBUG: e.Tail: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@17/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.Name/25 AsIs: )/10 } Tile{ AsIs: (/15 AsIs: e.Scanned/27 AsIs: )/16 } (/31 Tile{ AsIs: e.Tail/29 } )/32 </33 & CheckSentences\1*1/34 t.SrcPos0/5/35 (/37 e.Name/25/38 )/40 (/41 )/42 (/43 )/44 Tile{ AsIs: t.Acc/11 } Tile{ AsIs: t.Next/23 } >/45 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[31]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_gen_CheckSentences_L1D1]);
    refalrts::copy_evar(vm, context[35], context[36], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::copy_evar(vm, context[38], context[39], context[25], context[26]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::alloc_close_bracket(vm, context[42]);
    refalrts::alloc_open_bracket(vm, context[43]);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[33] );
    refalrts::link_brackets( context[43], context[44] );
    refalrts::link_brackets( context[41], context[42] );
    refalrts::link_brackets( context[37], context[40] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[45] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[32], context[44] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[31] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@17/4 t.SrcPos0/5 (/9 e.Name/17 )/10 t.Acc/11 (/15 e.Scanned/19 )/16 >/1
    context[17] = context[7];
    context[18] = context[8];
    context[19] = context[13];
    context[20] = context[14];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Name as range 17
    // closed e.Scanned as range 19
    //DEBUG: t.SrcPos0: 5
    //DEBUG: t.Acc: 11
    //DEBUG: e.Name: 17
    //DEBUG: e.Scanned: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@17/4 t.SrcPos0/5 (/9 e.Name/17 )/10 {REMOVED TILE} (/15 {REMOVED TILE} )/16 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/11 } Tile{ AsIs: e.Scanned/19 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@17/4 t.SrcPos0/5 (/9 e.Name/7 )/10 t.acc/11 (/15 e.scanned/13 )/16 e.items/2 >/1
  // closed e.Name as range 7
  // closed e.scanned as range 13
  // closed e.items as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: t.acc: 11
  //DEBUG: e.Name: 7
  //DEBUG: e.scanned: 13
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </17 & DoMapAccum@0/18 Tile{ HalfReuse: [*]/0 Reuse: & CheckSentences\1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 } Tile{ AsIs: e.Name/7 } )/19 (/20 )/21 (/22 )/23 Tile{ HalfReuse: {*}/10 AsIs: t.acc/11 AsIs: (/15 AsIs: e.scanned/13 AsIs: )/16 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_L1Z0]);
  refalrts::reinit_unwrapped_closure(context[10], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[9], context[19] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[10];
  res = refalrts::splice_evar( res, context[19], context[23] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[0], context[9] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  refalrts::wrap_closure( context[10] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z17("DoMapAccum@17", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z17);


static refalrts::FnResult func_gen_CheckSentences_A2Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & CheckSentences=2@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences=2@4/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 e.new8/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  // closed e.new8 as range 2
  do {
    // </0 & CheckSentences=2@4/4 t.SrcPos0/5 (/9 e.FuncName0/31 )/10 (/13 e.Prefix$a/33 )/14 (/17 e.Call/35 )/18 (/21 e.ContextVars$a/37 )/22 (/25 e.ContextAllAssignsOrConds/39 )/26 (/29 e.1/41 )/30 e.NumberedSentencesPairs/43 >/1
    context[31] = context[7];
    context[32] = context[8];
    context[33] = context[11];
    context[34] = context[12];
    context[35] = context[15];
    context[36] = context[16];
    context[37] = context[19];
    context[38] = context[20];
    context[39] = context[23];
    context[40] = context[24];
    context[41] = context[27];
    context[42] = context[28];
    context[43] = context[2];
    context[44] = context[3];
    // closed e.FuncName0 as range 31
    // closed e.Prefix$a as range 33
    // closed e.Call as range 35
    // closed e.ContextVars$a as range 37
    // closed e.ContextAllAssignsOrConds as range 39
    // closed e.1 as range 41
    // closed e.NumberedSentencesPairs as range 43
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 31
    //DEBUG: e.Prefix$a: 33
    //DEBUG: e.Call: 35
    //DEBUG: e.ContextVars$a: 37
    //DEBUG: e.ContextAllAssignsOrConds: 39
    //DEBUG: e.1: 41
    //DEBUG: e.NumberedSentencesPairs: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=3@4/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/31 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/33 AsIs: )/14 AsIs: (/17 AsIs: e.Call/35 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars$a/37 AsIs: )/22 AsIs: (/25 AsIs: e.ContextAllAssignsOrConds/39 AsIs: )/26 AsIs: (/29 AsIs: e.1/41 AsIs: )/30 } </45 & Map@4/46 Tile{ AsIs: e.NumberedSentencesPairs/43 } >/47 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[45]);
    refalrts::alloc_name(vm, context[46], functions[efunc_gen_Map_Z4]);
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A3Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[45] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[47] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences=2@4/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix$a/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars$a/19 )/22 (/25 e.ContextAllAssignsOrConds/23 )/26 (/29 e.1/27 )/30 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix$a as range 11
  // closed e.Call as range 15
  // closed e.ContextVars$a as range 19
  // closed e.ContextAllAssignsOrConds as range 23
  // closed e.1 as range 27
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix$a: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars$a: 19
  //DEBUG: e.ContextAllAssignsOrConds: 23
  //DEBUG: e.1: 27
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} )/18 (/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=2@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/11 HalfReuse: '\\'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/22 AsIs: (/25 } Tile{ AsIs: e.ContextVars$a/19 } Tile{ AsIs: e.ContextAllAssignsOrConds/23 } Tile{ AsIs: )/26 AsIs: (/29 AsIs: e.1/27 AsIs: )/30 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A2Z0]);
  refalrts::reinit_char(context[14], '\\');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[13], context[22] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[26];
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[22], context[25] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_A2Z4("CheckSentences=2@4", COOKIE1_, COOKIE2_, func_gen_CheckSentences_A2Z4);


static refalrts::FnResult func_gen_CheckSentences_A2Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & CheckSentences=2@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences=2@5/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 e.new8/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  // closed e.new8 as range 2
  do {
    // </0 & CheckSentences=2@5/4 t.SrcPos0/5 (/9 e.FuncName0/31 )/10 (/13 e.Prefix$a/33 )/14 (/17 e.Call/35 )/18 (/21 e.ContextVars$a/37 )/22 (/25 e.ContextAllAssignsOrConds/39 )/26 (/29 e.0/41 )/30 e.NumberedSentencesPairs/43 >/1
    context[31] = context[7];
    context[32] = context[8];
    context[33] = context[11];
    context[34] = context[12];
    context[35] = context[15];
    context[36] = context[16];
    context[37] = context[19];
    context[38] = context[20];
    context[39] = context[23];
    context[40] = context[24];
    context[41] = context[27];
    context[42] = context[28];
    context[43] = context[2];
    context[44] = context[3];
    // closed e.FuncName0 as range 31
    // closed e.Prefix$a as range 33
    // closed e.Call as range 35
    // closed e.ContextVars$a as range 37
    // closed e.ContextAllAssignsOrConds as range 39
    // closed e.0 as range 41
    // closed e.NumberedSentencesPairs as range 43
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 31
    //DEBUG: e.Prefix$a: 33
    //DEBUG: e.Call: 35
    //DEBUG: e.ContextVars$a: 37
    //DEBUG: e.ContextAllAssignsOrConds: 39
    //DEBUG: e.0: 41
    //DEBUG: e.NumberedSentencesPairs: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=3@5/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/31 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/33 AsIs: )/14 AsIs: (/17 AsIs: e.Call/35 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars$a/37 AsIs: )/22 AsIs: (/25 AsIs: e.ContextAllAssignsOrConds/39 AsIs: )/26 AsIs: (/29 AsIs: e.0/41 AsIs: )/30 } </45 & Map@4/46 Tile{ AsIs: e.NumberedSentencesPairs/43 } >/47 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[45]);
    refalrts::alloc_name(vm, context[46], functions[efunc_gen_Map_Z4]);
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A3Z5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[45] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[47] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences=2@5/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix$a/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars$a/19 )/22 (/25 e.ContextAllAssignsOrConds/23 )/26 (/29 e.0/27 )/30 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix$a as range 11
  // closed e.Call as range 15
  // closed e.ContextVars$a as range 19
  // closed e.ContextAllAssignsOrConds as range 23
  // closed e.0 as range 27
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix$a: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars$a: 19
  //DEBUG: e.ContextAllAssignsOrConds: 23
  //DEBUG: e.0: 27
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} )/18 (/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=2@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/11 HalfReuse: ':'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/22 AsIs: (/25 } Tile{ AsIs: e.ContextVars$a/19 } Tile{ AsIs: e.ContextAllAssignsOrConds/23 } Tile{ AsIs: )/26 AsIs: (/29 AsIs: e.0/27 AsIs: )/30 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A2Z0]);
  refalrts::reinit_char(context[14], ':');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[13], context[22] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[26];
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[22], context[25] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_A2Z5("CheckSentences=2@5", COOKIE1_, COOKIE2_, func_gen_CheckSentences_A2Z5);


static refalrts::FnResult func_gen_CheckSentences_A1Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 54 elems
  refalrts::Iter context[54];
  refalrts::zeros( context, 54 );
  // </0 & CheckSentences=1@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences=1@6/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 (/33 e.new8/31 )/34 e.new9/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  // closed e.new8 as range 31
  // closed e.new9 as range 2
  do {
    // </0 & CheckSentences=1@6/4 t.SrcPos0/5 (/9 e.FuncName0/35 )/10 (/13 e.Prefix$a0/37 )/14 (/17 e.Call/39 )/18 (/21 e.ContextVars0/41 )/22 (/25 e.Pattern0/43 )/26 (/29 e.ContextAllAssignsOrConds/45 )/30 (/33 e.1/47 )/34 e.NumberedSentences/49 >/1
    context[35] = context[7];
    context[36] = context[8];
    context[37] = context[11];
    context[38] = context[12];
    context[39] = context[15];
    context[40] = context[16];
    context[41] = context[19];
    context[42] = context[20];
    context[43] = context[23];
    context[44] = context[24];
    context[45] = context[27];
    context[46] = context[28];
    context[47] = context[31];
    context[48] = context[32];
    context[49] = context[2];
    context[50] = context[3];
    // closed e.FuncName0 as range 35
    // closed e.Prefix$a0 as range 37
    // closed e.Call as range 39
    // closed e.ContextVars0 as range 41
    // closed e.Pattern0 as range 43
    // closed e.ContextAllAssignsOrConds as range 45
    // closed e.1 as range 47
    // closed e.NumberedSentences as range 49
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 35
    //DEBUG: e.Prefix$a0: 37
    //DEBUG: e.Call: 39
    //DEBUG: e.ContextVars0: 41
    //DEBUG: e.Pattern0: 43
    //DEBUG: e.ContextAllAssignsOrConds: 45
    //DEBUG: e.1: 47
    //DEBUG: e.NumberedSentences: 49

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=2@6/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/35 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/37 AsIs: )/14 AsIs: (/17 AsIs: e.Call/39 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars0/41 AsIs: )/22 AsIs: (/25 AsIs: e.Pattern0/43 AsIs: )/26 AsIs: (/29 AsIs: e.ContextAllAssignsOrConds/45 AsIs: )/30 AsIs: (/33 AsIs: e.1/47 AsIs: )/34 } </51 & MakePairs/52 Tile{ AsIs: e.NumberedSentences/49 } >/53 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[51]);
    refalrts::alloc_name(vm, context[52], functions[efunc_MakePairs]);
    refalrts::alloc_close_call(vm, context[53]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A2Z6]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[51] );
    refalrts::link_brackets( context[33], context[34] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[53] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences=1@6/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix$a0/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars0/19 )/22 (/25 e.Pattern0/23 )/26 (/29 e.ContextAllAssignsOrConds/27 )/30 (/33 e.1/31 )/34 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix$a0 as range 11
  // closed e.Call as range 15
  // closed e.ContextVars0 as range 19
  // closed e.Pattern0 as range 23
  // closed e.ContextAllAssignsOrConds as range 27
  // closed e.1 as range 31
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix$a0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars0: 19
  //DEBUG: e.Pattern0: 23
  //DEBUG: e.ContextAllAssignsOrConds: 27
  //DEBUG: e.1: 31
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} )/18 (/21 {REMOVED TILE} )/22 (/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/11 HalfReuse: '\\'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/26 AsIs: (/29 } Tile{ AsIs: e.ContextVars0/19 } Tile{ AsIs: e.Pattern0/23 } Tile{ AsIs: e.ContextAllAssignsOrConds/27 } Tile{ AsIs: )/30 AsIs: (/33 AsIs: e.1/31 AsIs: )/34 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A1Z0]);
  refalrts::reinit_char(context[14], '\\');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[13], context[26] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[30];
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[26], context[29] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_A1Z6("CheckSentences=1@6", COOKIE1_, COOKIE2_, func_gen_CheckSentences_A1Z6);


static refalrts::FnResult func_gen_CheckSentences_A1Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 54 elems
  refalrts::Iter context[54];
  refalrts::zeros( context, 54 );
  // </0 & CheckSentences=1@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences=1@7/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 (/33 e.new8/31 )/34 e.new9/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  // closed e.new8 as range 31
  // closed e.new9 as range 2
  do {
    // </0 & CheckSentences=1@7/4 t.SrcPos0/5 (/9 e.FuncName0/35 )/10 (/13 e.Prefix$a0/37 )/14 (/17 e.Call/39 )/18 (/21 e.ContextVars0/41 )/22 (/25 e.Pattern0/43 )/26 (/29 e.ContextAllAssignsOrConds/45 )/30 (/33 e.0/47 )/34 e.NumberedSentences/49 >/1
    context[35] = context[7];
    context[36] = context[8];
    context[37] = context[11];
    context[38] = context[12];
    context[39] = context[15];
    context[40] = context[16];
    context[41] = context[19];
    context[42] = context[20];
    context[43] = context[23];
    context[44] = context[24];
    context[45] = context[27];
    context[46] = context[28];
    context[47] = context[31];
    context[48] = context[32];
    context[49] = context[2];
    context[50] = context[3];
    // closed e.FuncName0 as range 35
    // closed e.Prefix$a0 as range 37
    // closed e.Call as range 39
    // closed e.ContextVars0 as range 41
    // closed e.Pattern0 as range 43
    // closed e.ContextAllAssignsOrConds as range 45
    // closed e.0 as range 47
    // closed e.NumberedSentences as range 49
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 35
    //DEBUG: e.Prefix$a0: 37
    //DEBUG: e.Call: 39
    //DEBUG: e.ContextVars0: 41
    //DEBUG: e.Pattern0: 43
    //DEBUG: e.ContextAllAssignsOrConds: 45
    //DEBUG: e.0: 47
    //DEBUG: e.NumberedSentences: 49

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=2@7/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/35 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/37 AsIs: )/14 AsIs: (/17 AsIs: e.Call/39 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars0/41 AsIs: )/22 AsIs: (/25 AsIs: e.Pattern0/43 AsIs: )/26 AsIs: (/29 AsIs: e.ContextAllAssignsOrConds/45 AsIs: )/30 AsIs: (/33 AsIs: e.0/47 AsIs: )/34 } </51 & MakePairs/52 Tile{ AsIs: e.NumberedSentences/49 } >/53 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[51]);
    refalrts::alloc_name(vm, context[52], functions[efunc_MakePairs]);
    refalrts::alloc_close_call(vm, context[53]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A2Z7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[51] );
    refalrts::link_brackets( context[33], context[34] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[53] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences=1@7/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix$a0/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars0/19 )/22 (/25 e.Pattern0/23 )/26 (/29 e.ContextAllAssignsOrConds/27 )/30 (/33 e.0/31 )/34 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix$a0 as range 11
  // closed e.Call as range 15
  // closed e.ContextVars0 as range 19
  // closed e.Pattern0 as range 23
  // closed e.ContextAllAssignsOrConds as range 27
  // closed e.0 as range 31
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix$a0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars0: 19
  //DEBUG: e.Pattern0: 23
  //DEBUG: e.ContextAllAssignsOrConds: 27
  //DEBUG: e.0: 31
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} )/18 (/21 {REMOVED TILE} )/22 (/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/11 HalfReuse: ':'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/26 AsIs: (/29 } Tile{ AsIs: e.ContextVars0/19 } Tile{ AsIs: e.Pattern0/23 } Tile{ AsIs: e.ContextAllAssignsOrConds/27 } Tile{ AsIs: )/30 AsIs: (/33 AsIs: e.0/31 AsIs: )/34 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A1Z0]);
  refalrts::reinit_char(context[14], ':');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[13], context[26] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[30];
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[26], context[29] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_A1Z7("CheckSentences=1@7", COOKIE1_, COOKIE2_, func_gen_CheckSentences_A1Z7);


static refalrts::FnResult func_gen_CheckSentences_A3Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 70 elems
  refalrts::Iter context[70];
  refalrts::zeros( context, 70 );
  // </0 & CheckSentences=3@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences=3@2/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 e.new7/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 2
  do {
    // </0 & CheckSentences=3@2/4 t.SrcPos0/5 (/9 e.FuncName0/27 )/10 (/13 e.Prefix0/29 )/14 (/17 e.Call/31 )/18 (/21 e.ContextVars0/33 )/22 (/25 e.Sentences0/35 )/26 e.NumberedSentencesPairs$a/37 >/1
    context[27] = context[7];
    context[28] = context[8];
    context[29] = context[11];
    context[30] = context[12];
    context[31] = context[15];
    context[32] = context[16];
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[23];
    context[36] = context[24];
    context[37] = context[2];
    context[38] = context[3];
    // closed e.FuncName0 as range 27
    // closed e.Prefix0 as range 29
    // closed e.Call as range 31
    // closed e.ContextVars0 as range 33
    // closed e.Sentences0 as range 35
    // closed e.NumberedSentencesPairs$a as range 37
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 27
    //DEBUG: e.Prefix0: 29
    //DEBUG: e.Call: 31
    //DEBUG: e.ContextVars0: 33
    //DEBUG: e.Sentences0: 35
    //DEBUG: e.NumberedSentencesPairs$a: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1=1@2/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/27 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/29 AsIs: )/14 AsIs: (/17 AsIs: e.Call/31 AsIs: )/18 AsIs: (/21 } Tile{ AsIs: e.NumberedSentencesPairs$a/37 } )/39 </40 & Unique/41 </42 & ExtractVariables-Expr/43 Tile{ AsIs: e.ContextVars0/33 } >/44 >/45 >/46 </47 & DelAccumulator/48 </49 & DoMapAccum@18/50 t.SrcPos0/5/51 (/53 e.FuncName0/27/54 Tile{ AsIs: )/22 AsIs: (/25 } e.ContextVars0/33/56 Tile{ AsIs: )/26 } (/58 e.Prefix0/29/59 )/61 (/62 e.Call/31/63 )/65 1/66 (/67 )/68 Tile{ AsIs: e.Sentences0/35 } >/69 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_Unique]);
    refalrts::alloc_open_call(vm, context[42]);
    refalrts::alloc_name(vm, context[43], functions[efunc_ExtractVariablesm_Expr]);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::alloc_close_call(vm, context[46]);
    refalrts::alloc_open_call(vm, context[47]);
    refalrts::alloc_name(vm, context[48], functions[efunc_DelAccumulator]);
    refalrts::alloc_open_call(vm, context[49]);
    refalrts::alloc_name(vm, context[50], functions[efunc_gen_DoMapAccum_Z18]);
    refalrts::copy_evar(vm, context[51], context[52], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[53]);
    refalrts::copy_evar(vm, context[54], context[55], context[27], context[28]);
    refalrts::copy_evar(vm, context[56], context[57], context[33], context[34]);
    refalrts::alloc_open_bracket(vm, context[58]);
    refalrts::copy_evar(vm, context[59], context[60], context[29], context[30]);
    refalrts::alloc_close_bracket(vm, context[61]);
    refalrts::alloc_open_bracket(vm, context[62]);
    refalrts::copy_evar(vm, context[63], context[64], context[31], context[32]);
    refalrts::alloc_close_bracket(vm, context[65]);
    refalrts::alloc_number(vm, context[66], 1UL);
    refalrts::alloc_open_bracket(vm, context[67]);
    refalrts::alloc_close_bracket(vm, context[68]);
    refalrts::alloc_close_call(vm, context[69]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1A1Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[69] );
    refalrts::push_stack( vm, context[49] );
    refalrts::link_brackets( context[67], context[68] );
    refalrts::link_brackets( context[62], context[65] );
    refalrts::link_brackets( context[58], context[61] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[53], context[22] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[42] );
    refalrts::link_brackets( context[21], context[39] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[69] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[58], context[68] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[56], context[57] );
    res = refalrts::splice_evar( res, context[22], context[25] );
    res = refalrts::splice_evar( res, context[54], context[55] );
    res = refalrts::splice_evar( res, context[44], context[53] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[39], context[43] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences=3@2/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix0/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars0/19 )/22 (/25 e.Sentences0/23 )/26 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix0 as range 11
  // closed e.Call as range 15
  // closed e.ContextVars0 as range 19
  // closed e.Sentences0 as range 23
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars0: 19
  //DEBUG: e.Sentences0: 23
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/14 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=3@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Prefix0/11 } Tile{ HalfReuse: ':'/17 AsIs: e.Call/15 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars0/19 AsIs: )/22 AsIs: (/25 AsIs: e.Sentences0/23 AsIs: )/26 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A3Z0]);
  refalrts::reinit_char(context[17], ':');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[13], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, context[13], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_A3Z2("CheckSentences=3@2", COOKIE1_, COOKIE2_, func_gen_CheckSentences_A3Z2);


static refalrts::FnResult func_gen_CheckSentences_A3Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 70 elems
  refalrts::Iter context[70];
  refalrts::zeros( context, 70 );
  // </0 & CheckSentences=3@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences=3@3/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 e.new7/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 2
  do {
    // </0 & CheckSentences=3@3/4 t.SrcPos0/5 (/9 e.FuncName0/27 )/10 (/13 e.Prefix0/29 )/14 (/17 e.Call/31 )/18 (/21 e.ContextVars0/33 )/22 (/25 e.Sentences0/35 )/26 e.NumberedSentencesPairs$a/37 >/1
    context[27] = context[7];
    context[28] = context[8];
    context[29] = context[11];
    context[30] = context[12];
    context[31] = context[15];
    context[32] = context[16];
    context[33] = context[19];
    context[34] = context[20];
    context[35] = context[23];
    context[36] = context[24];
    context[37] = context[2];
    context[38] = context[3];
    // closed e.FuncName0 as range 27
    // closed e.Prefix0 as range 29
    // closed e.Call as range 31
    // closed e.ContextVars0 as range 33
    // closed e.Sentences0 as range 35
    // closed e.NumberedSentencesPairs$a as range 37
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 27
    //DEBUG: e.Prefix0: 29
    //DEBUG: e.Call: 31
    //DEBUG: e.ContextVars0: 33
    //DEBUG: e.Sentences0: 35
    //DEBUG: e.NumberedSentencesPairs$a: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1=1@3/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/27 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/29 AsIs: )/14 AsIs: (/17 AsIs: e.Call/31 AsIs: )/18 AsIs: (/21 } Tile{ AsIs: e.NumberedSentencesPairs$a/37 } )/39 </40 & Unique/41 </42 & ExtractVariables-Expr/43 Tile{ AsIs: e.ContextVars0/33 } >/44 >/45 >/46 </47 & DelAccumulator/48 </49 & DoMapAccum@19/50 t.SrcPos0/5/51 (/53 e.FuncName0/27/54 Tile{ AsIs: )/22 AsIs: (/25 } e.ContextVars0/33/56 Tile{ AsIs: )/26 } (/58 e.Prefix0/29/59 )/61 (/62 e.Call/31/63 )/65 1/66 (/67 )/68 Tile{ AsIs: e.Sentences0/35 } >/69 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[39]);
    refalrts::alloc_open_call(vm, context[40]);
    refalrts::alloc_name(vm, context[41], functions[efunc_Unique]);
    refalrts::alloc_open_call(vm, context[42]);
    refalrts::alloc_name(vm, context[43], functions[efunc_ExtractVariablesm_Expr]);
    refalrts::alloc_close_call(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::alloc_close_call(vm, context[46]);
    refalrts::alloc_open_call(vm, context[47]);
    refalrts::alloc_name(vm, context[48], functions[efunc_DelAccumulator]);
    refalrts::alloc_open_call(vm, context[49]);
    refalrts::alloc_name(vm, context[50], functions[efunc_gen_DoMapAccum_Z19]);
    refalrts::copy_evar(vm, context[51], context[52], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[53]);
    refalrts::copy_evar(vm, context[54], context[55], context[27], context[28]);
    refalrts::copy_evar(vm, context[56], context[57], context[33], context[34]);
    refalrts::alloc_open_bracket(vm, context[58]);
    refalrts::copy_evar(vm, context[59], context[60], context[29], context[30]);
    refalrts::alloc_close_bracket(vm, context[61]);
    refalrts::alloc_open_bracket(vm, context[62]);
    refalrts::copy_evar(vm, context[63], context[64], context[31], context[32]);
    refalrts::alloc_close_bracket(vm, context[65]);
    refalrts::alloc_number(vm, context[66], 1UL);
    refalrts::alloc_open_bracket(vm, context[67]);
    refalrts::alloc_close_bracket(vm, context[68]);
    refalrts::alloc_close_call(vm, context[69]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1A1Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[69] );
    refalrts::push_stack( vm, context[49] );
    refalrts::link_brackets( context[67], context[68] );
    refalrts::link_brackets( context[62], context[65] );
    refalrts::link_brackets( context[58], context[61] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[53], context[22] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[40] );
    refalrts::push_stack( vm, context[44] );
    refalrts::push_stack( vm, context[42] );
    refalrts::link_brackets( context[21], context[39] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[69] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[58], context[68] );
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[56], context[57] );
    res = refalrts::splice_evar( res, context[22], context[25] );
    res = refalrts::splice_evar( res, context[54], context[55] );
    res = refalrts::splice_evar( res, context[44], context[53] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[39], context[43] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences=3@3/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix0/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars0/19 )/22 (/25 e.Sentences0/23 )/26 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix0 as range 11
  // closed e.Call as range 15
  // closed e.ContextVars0 as range 19
  // closed e.Sentences0 as range 23
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars0: 19
  //DEBUG: e.Sentences0: 23
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/14 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=3@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.Prefix0/11 } Tile{ HalfReuse: '\\'/17 AsIs: e.Call/15 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars0/19 AsIs: )/22 AsIs: (/25 AsIs: e.Sentences0/23 AsIs: )/26 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A3Z0]);
  refalrts::reinit_char(context[17], '\\');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[13], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[17];
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, context[13], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_A3Z3("CheckSentences=3@3", COOKIE1_, COOKIE2_, func_gen_CheckSentences_A3Z3);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DoMapAccum$1=1@16/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@16/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & DoMapAccum$1=1@16/4 (/7 e.Call/17 )/8 (/11 e.Scanned0/19 )/12 (/15 e.Tail0/21 )/16 t.Acc$a/25 e.StepScanned/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.Call as range 17
    // closed e.Scanned0 as range 19
    // closed e.Tail0 as range 21
    context[26] = refalrts::tvar_left( context[25], context[23], context[24] );
    if( ! context[26] )
      continue;
    // closed e.StepScanned as range 23
    //DEBUG: e.Call: 17
    //DEBUG: e.Scanned0: 19
    //DEBUG: e.Tail0: 21
    //DEBUG: t.Acc$a: 25
    //DEBUG: e.StepScanned: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/11 {REMOVED TILE} )/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@16/4 AsIs: (/7 AsIs: e.Call/17 AsIs: )/8 } Tile{ AsIs: t.Acc$a/25 } Tile{ AsIs: (/15 } Tile{ AsIs: e.Scanned0/19 } Tile{ AsIs: e.StepScanned/23 } Tile{ AsIs: )/16 } Tile{ AsIs: e.Tail0/21 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@16/4 (/7 e.Call/5 )/8 (/11 e.Scanned0/9 )/12 (/15 e.Tail0/13 )/16 e.dyn/2 >/1
  // closed e.Call as range 5
  // closed e.Scanned0 as range 9
  // closed e.Tail0 as range 13
  // closed e.dyn as range 2
  //DEBUG: e.Call: 5
  //DEBUG: e.Scanned0: 9
  //DEBUG: e.Tail0: 13
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@0/4 HalfReuse: [*]/7 } & RenameVars\1@0/17 (/18 'p'/19 Tile{ AsIs: e.Call/5 } )/20 Tile{ HalfReuse: {*}/8 AsIs: (/11 AsIs: e.Scanned0/9 AsIs: )/12 AsIs: (/15 AsIs: e.Tail0/13 AsIs: )/16 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_RenameVars_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_char(vm, context[19], 'p');
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::reinit_closure_head(context[7]);
  refalrts::reinit_unwrapped_closure(context[8], context[7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[18], context[20] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[17], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[8] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z16("DoMapAccum$1=1@16", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z16);


static refalrts::FnResult func_gen_CheckPatternPairs_S1A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & CheckPatternPairs$1=2@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckPatternPairs$1=2@1/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 2
  do {
    // </0 & CheckPatternPairs$1=2@1/4 t.SrcPos0/5 (/9 e.Name/15 )/10 (/13 e.NumberedSentencesPairs$a/17 )/14 e.ContextVars$b/19 >/1
    context[15] = context[7];
    context[16] = context[8];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.Name as range 15
    // closed e.NumberedSentencesPairs$a as range 17
    // closed e.ContextVars$b as range 19
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.Name: 15
    //DEBUG: e.NumberedSentencesPairs$a: 17
    //DEBUG: e.ContextVars$b: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@10/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.Name/15 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.ContextVars$b/19 } Tile{ AsIs: )/14 } Tile{ AsIs: e.NumberedSentencesPairs$a/17 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPatternPairs$1=2@1/4 t.SrcPos0/5 (/9 e.Name/7 )/10 (/13 e.NumberedSentencesPairs$a/11 )/14 e.dyn/2 >/1
  // closed e.Name as range 7
  // closed e.NumberedSentencesPairs$a as range 11
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.Name: 7
  //DEBUG: e.NumberedSentencesPairs$a: 11
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1=2@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.Name/7 AsIs: )/10 AsIs: (/13 } )/15 (/16 Tile{ AsIs: e.NumberedSentencesPairs$a/11 } Tile{ AsIs: )/14 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[15]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1A2Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[14] );
  refalrts::link_brackets( context[13], context[15] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[14];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckPatternPairs_S1A2Z1("CheckPatternPairs$1=2@1", COOKIE1_, COOKIE2_, func_gen_CheckPatternPairs_S1A2Z1);


static refalrts::FnResult func_gen_CheckSentences_L1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 51 elems
  refalrts::Iter context[51];
  refalrts::zeros( context, 51 );
  // </0 & CheckSentences\1=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences\1=1@1/4 s.new1/5 t.new2/6 (/10 e.new3/8 )/11 (/14 e.new4/12 )/15 (/18 e.new5/16 )/19 (/22 e.new6/20 )/23 (/26 e.new7/24 )/27 e.new8/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  // closed e.new3 as range 8
  // closed e.new4 as range 12
  // closed e.new5 as range 16
  // closed e.new6 as range 20
  // closed e.new7 as range 24
  // closed e.new8 as range 2
  do {
    // </0 & CheckSentences\1=1@1/4 s.Num0/5 t.SrcPos0/6 (/10 e.Name/28 )/11 (/14 e.1/30 )/15 (/18 e.4/32 )/19 (/22 e.5/34 )/23 (/26 e.3/36 )/27 e.Prefix$a/38 >/1
    context[28] = context[8];
    context[29] = context[9];
    context[30] = context[12];
    context[31] = context[13];
    context[32] = context[16];
    context[33] = context[17];
    context[34] = context[20];
    context[35] = context[21];
    context[36] = context[24];
    context[37] = context[25];
    context[38] = context[2];
    context[39] = context[3];
    // closed e.Name as range 28
    // closed e.1 as range 30
    // closed e.4 as range 32
    // closed e.5 as range 34
    // closed e.3 as range 36
    // closed e.Prefix$a as range 38
    //DEBUG: t.SrcPos0: 6
    //DEBUG: s.Num0: 5
    //DEBUG: e.Name: 28
    //DEBUG: e.1: 30
    //DEBUG: e.4: 32
    //DEBUG: e.5: 34
    //DEBUG: e.3: 36
    //DEBUG: e.Prefix$a: 38

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences\1=3/4 AsIs: s.Num0/5 AsIs: t.SrcPos0/6 AsIs: (/10 } Tile{ AsIs: e.Name/28 } )/40 (/41 Tile{ AsIs: e.Prefix$a/38 } )/42 (/43 e.1/30/44 Tile{ AsIs: )/11 AsIs: (/14 AsIs: e.1/30 AsIs: )/15 AsIs: (/18 AsIs: e.4/32 AsIs: )/19 AsIs: (/22 AsIs: e.5/34 AsIs: )/23 AsIs: (/26 AsIs: e.3/36 AsIs: )/27 } </46 & Map@3/47 e.4/32/48 >/50 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::alloc_close_bracket(vm, context[42]);
    refalrts::alloc_open_bracket(vm, context[43]);
    refalrts::copy_evar(vm, context[44], context[45], context[30], context[31]);
    refalrts::alloc_open_call(vm, context[46]);
    refalrts::alloc_name(vm, context[47], functions[efunc_gen_Map_Z3]);
    refalrts::copy_evar(vm, context[48], context[49], context[32], context[33]);
    refalrts::alloc_close_call(vm, context[50]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_L1A3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[50] );
    refalrts::push_stack( vm, context[46] );
    refalrts::link_brackets( context[26], context[27] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::link_brackets( context[43], context[11] );
    refalrts::link_brackets( context[41], context[42] );
    refalrts::link_brackets( context[10], context[40] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[46], context[50] );
    res = refalrts::splice_evar( res, context[11], context[27] );
    res = refalrts::splice_evar( res, context[44], context[45] );
    res = refalrts::splice_evar( res, context[42], context[43] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[40], context[41] );
    res = refalrts::splice_evar( res, context[28], context[29] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences\1=1@1/4 s.Num0/5 t.SrcPos0/6 (/10 e.Name/8 )/11 (/14 e.1/12 )/15 (/18 e.4/16 )/19 (/22 e.5/20 )/23 (/26 e.3/24 )/27 e.dyn/2 >/1
  // closed e.Name as range 8
  // closed e.1 as range 12
  // closed e.4 as range 16
  // closed e.5 as range 20
  // closed e.3 as range 24
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 6
  //DEBUG: s.Num0: 5
  //DEBUG: e.Name: 8
  //DEBUG: e.1: 12
  //DEBUG: e.4: 16
  //DEBUG: e.5: 20
  //DEBUG: e.3: 24
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences\1=1@0/4 AsIs: s.Num0/5 AsIs: t.SrcPos0/6 AsIs: (/10 AsIs: e.Name/8 AsIs: )/11 AsIs: (/14 AsIs: e.1/12 AsIs: )/15 AsIs: (/18 AsIs: e.4/16 AsIs: )/19 AsIs: (/22 AsIs: e.5/20 AsIs: )/23 AsIs: (/26 AsIs: e.3/24 AsIs: )/27 } (/28 )/29 Tile{ AsIs: e.dyn/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_L1A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_L1A1Z1("CheckSentences\\1=1@1", COOKIE1_, COOKIE2_, func_gen_CheckSentences_L1A1Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z17(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & DoMapAccum$1=1@17/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@17/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 e.new5/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 2
  do {
    // </0 & DoMapAccum$1=1@17/4 t.SrcPos0/5 (/9 e.Name/19 )/10 (/13 e.Scanned0/21 )/14 (/17 e.Tail0/23 )/18 t.Acc$a/27 e.StepScanned/25 >/1
    context[19] = context[7];
    context[20] = context[8];
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[2];
    context[26] = context[3];
    // closed e.Name as range 19
    // closed e.Scanned0 as range 21
    // closed e.Tail0 as range 23
    context[28] = refalrts::tvar_left( context[27], context[25], context[26] );
    if( ! context[28] )
      continue;
    // closed e.StepScanned as range 25
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.Name: 19
    //DEBUG: e.Scanned0: 21
    //DEBUG: e.Tail0: 23
    //DEBUG: t.Acc$a: 27
    //DEBUG: e.StepScanned: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/13 {REMOVED TILE} )/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@17/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.Name/19 AsIs: )/10 } Tile{ AsIs: t.Acc$a/27 } Tile{ AsIs: (/17 } Tile{ AsIs: e.Scanned0/21 } Tile{ AsIs: e.StepScanned/25 } Tile{ AsIs: )/18 } Tile{ AsIs: e.Tail0/23 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    refalrts::splice_to_freelist_open( vm, context[10], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@17/4 t.SrcPos0/5 (/9 e.Name/7 )/10 (/13 e.Scanned0/11 )/14 (/17 e.Tail0/15 )/18 e.dyn/2 >/1
  // closed e.Name as range 7
  // closed e.Scanned0 as range 11
  // closed e.Tail0 as range 15
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.Name: 7
  //DEBUG: e.Scanned0: 11
  //DEBUG: e.Tail0: 15
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </19 & DoMapAccum$1=1@0/20 Tile{ HalfReuse: [*]/0 Reuse: & CheckSentences\1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 } Tile{ AsIs: e.Name/7 } )/21 (/22 )/23 (/24 )/25 Tile{ HalfReuse: {*}/10 AsIs: (/13 AsIs: e.Scanned0/11 AsIs: )/14 AsIs: (/17 AsIs: e.Tail0/15 AsIs: )/18 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::alloc_name(vm, context[20], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_open_bracket(vm, context[22]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::alloc_open_bracket(vm, context[24]);
  refalrts::alloc_close_bracket(vm, context[25]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_L1Z0]);
  refalrts::reinit_unwrapped_closure(context[10], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[19] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[24], context[25] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[9], context[21] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[10];
  res = refalrts::splice_evar( res, context[21], context[25] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[0], context[9] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  refalrts::use( res );
  refalrts::wrap_closure( context[10] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z17("DoMapAccum$1=1@17", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z17);


static refalrts::FnResult func_gen_CheckSentences_A3Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 78 elems
  refalrts::Iter context[78];
  refalrts::zeros( context, 78 );
  // </0 & CheckSentences=3@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences=3@4/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 e.new8/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  // closed e.new8 as range 2
  do {
    // </0 & CheckSentences=3@4/4 t.SrcPos0/5 (/9 e.FuncName0/31 )/10 (/13 e.Prefix$a/33 )/14 (/17 e.Call/35 )/18 (/21 e.ContextVars$a/37 )/22 (/25 e.ContextAllAssignsOrConds/39 )/26 (/29 e.1/41 )/30 e.NumberedSentencesPairs$a/43 >/1
    context[31] = context[7];
    context[32] = context[8];
    context[33] = context[11];
    context[34] = context[12];
    context[35] = context[15];
    context[36] = context[16];
    context[37] = context[19];
    context[38] = context[20];
    context[39] = context[23];
    context[40] = context[24];
    context[41] = context[27];
    context[42] = context[28];
    context[43] = context[2];
    context[44] = context[3];
    // closed e.FuncName0 as range 31
    // closed e.Prefix$a as range 33
    // closed e.Call as range 35
    // closed e.ContextVars$a as range 37
    // closed e.ContextAllAssignsOrConds as range 39
    // closed e.1 as range 41
    // closed e.NumberedSentencesPairs$a as range 43
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 31
    //DEBUG: e.Prefix$a: 33
    //DEBUG: e.Call: 35
    //DEBUG: e.ContextVars$a: 37
    //DEBUG: e.ContextAllAssignsOrConds: 39
    //DEBUG: e.1: 41
    //DEBUG: e.NumberedSentencesPairs$a: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1=1@3/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/31 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/33 AsIs: )/14 AsIs: (/17 AsIs: e.Call/35 AsIs: )/18 AsIs: (/21 } Tile{ AsIs: e.NumberedSentencesPairs$a/43 } )/45 </46 & Unique/47 </48 & ExtractVariables-Expr/49 Tile{ AsIs: e.ContextVars$a/37 } e.ContextAllAssignsOrConds/39/50 >/52 >/53 >/54 </55 & DelAccumulator/56 </57 & DoMapAccum@20/58 t.SrcPos0/5/59 (/61 e.FuncName0/31/62 Tile{ AsIs: )/30 } (/64 e.ContextVars$a/37/65 Tile{ AsIs: )/22 AsIs: (/25 AsIs: e.ContextAllAssignsOrConds/39 AsIs: )/26 AsIs: (/29 } e.Prefix$a/33/67 )/69 (/70 e.Call/35/71 )/73 1/74 (/75 )/76 Tile{ AsIs: e.1/41 } >/77 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[45]);
    refalrts::alloc_open_call(vm, context[46]);
    refalrts::alloc_name(vm, context[47], functions[efunc_Unique]);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_name(vm, context[49], functions[efunc_ExtractVariablesm_Expr]);
    refalrts::copy_evar(vm, context[50], context[51], context[39], context[40]);
    refalrts::alloc_close_call(vm, context[52]);
    refalrts::alloc_close_call(vm, context[53]);
    refalrts::alloc_close_call(vm, context[54]);
    refalrts::alloc_open_call(vm, context[55]);
    refalrts::alloc_name(vm, context[56], functions[efunc_DelAccumulator]);
    refalrts::alloc_open_call(vm, context[57]);
    refalrts::alloc_name(vm, context[58], functions[efunc_gen_DoMapAccum_Z20]);
    refalrts::copy_evar(vm, context[59], context[60], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[61]);
    refalrts::copy_evar(vm, context[62], context[63], context[31], context[32]);
    refalrts::alloc_open_bracket(vm, context[64]);
    refalrts::copy_evar(vm, context[65], context[66], context[37], context[38]);
    refalrts::copy_evar(vm, context[67], context[68], context[33], context[34]);
    refalrts::alloc_close_bracket(vm, context[69]);
    refalrts::alloc_open_bracket(vm, context[70]);
    refalrts::copy_evar(vm, context[71], context[72], context[35], context[36]);
    refalrts::alloc_close_bracket(vm, context[73]);
    refalrts::alloc_number(vm, context[74], 1UL);
    refalrts::alloc_open_bracket(vm, context[75]);
    refalrts::alloc_close_bracket(vm, context[76]);
    refalrts::alloc_close_call(vm, context[77]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1A1Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[55] );
    refalrts::push_stack( vm, context[77] );
    refalrts::push_stack( vm, context[57] );
    refalrts::link_brackets( context[75], context[76] );
    refalrts::link_brackets( context[70], context[73] );
    refalrts::link_brackets( context[29], context[69] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[64], context[22] );
    refalrts::link_brackets( context[61], context[30] );
    refalrts::push_stack( vm, context[54] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[52] );
    refalrts::push_stack( vm, context[48] );
    refalrts::link_brackets( context[21], context[45] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[77] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[69], context[76] );
    res = refalrts::splice_evar( res, context[67], context[68] );
    res = refalrts::splice_evar( res, context[22], context[29] );
    res = refalrts::splice_evar( res, context[65], context[66] );
    res = refalrts::splice_elem( res, context[64] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[62], context[63] );
    res = refalrts::splice_evar( res, context[52], context[61] );
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[45], context[49] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences=3@4/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix$a/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars$a/19 )/22 (/25 e.ContextAllAssignsOrConds/23 )/26 (/29 e.1/27 )/30 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix$a as range 11
  // closed e.Call as range 15
  // closed e.ContextVars$a as range 19
  // closed e.ContextAllAssignsOrConds as range 23
  // closed e.1 as range 27
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix$a: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars$a: 19
  //DEBUG: e.ContextAllAssignsOrConds: 23
  //DEBUG: e.1: 27
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} )/18 (/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=3@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/11 HalfReuse: '\\'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/22 AsIs: (/25 } Tile{ AsIs: e.ContextVars$a/19 } Tile{ AsIs: e.ContextAllAssignsOrConds/23 } Tile{ AsIs: )/26 AsIs: (/29 AsIs: e.1/27 AsIs: )/30 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A3Z0]);
  refalrts::reinit_char(context[14], '\\');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[13], context[22] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[26];
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[22], context[25] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_A3Z4("CheckSentences=3@4", COOKIE1_, COOKIE2_, func_gen_CheckSentences_A3Z4);


static refalrts::FnResult func_gen_CheckSentences_A3Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 78 elems
  refalrts::Iter context[78];
  refalrts::zeros( context, 78 );
  // </0 & CheckSentences=3@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences=3@5/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 e.new8/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  // closed e.new8 as range 2
  do {
    // </0 & CheckSentences=3@5/4 t.SrcPos0/5 (/9 e.FuncName0/31 )/10 (/13 e.Prefix$a/33 )/14 (/17 e.Call/35 )/18 (/21 e.ContextVars$a/37 )/22 (/25 e.ContextAllAssignsOrConds/39 )/26 (/29 e.0/41 )/30 e.NumberedSentencesPairs$a/43 >/1
    context[31] = context[7];
    context[32] = context[8];
    context[33] = context[11];
    context[34] = context[12];
    context[35] = context[15];
    context[36] = context[16];
    context[37] = context[19];
    context[38] = context[20];
    context[39] = context[23];
    context[40] = context[24];
    context[41] = context[27];
    context[42] = context[28];
    context[43] = context[2];
    context[44] = context[3];
    // closed e.FuncName0 as range 31
    // closed e.Prefix$a as range 33
    // closed e.Call as range 35
    // closed e.ContextVars$a as range 37
    // closed e.ContextAllAssignsOrConds as range 39
    // closed e.0 as range 41
    // closed e.NumberedSentencesPairs$a as range 43
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 31
    //DEBUG: e.Prefix$a: 33
    //DEBUG: e.Call: 35
    //DEBUG: e.ContextVars$a: 37
    //DEBUG: e.ContextAllAssignsOrConds: 39
    //DEBUG: e.0: 41
    //DEBUG: e.NumberedSentencesPairs$a: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1=1@2/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/31 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/33 AsIs: )/14 AsIs: (/17 AsIs: e.Call/35 AsIs: )/18 AsIs: (/21 } Tile{ AsIs: e.NumberedSentencesPairs$a/43 } )/45 </46 & Unique/47 </48 & ExtractVariables-Expr/49 Tile{ AsIs: e.ContextVars$a/37 } e.ContextAllAssignsOrConds/39/50 >/52 >/53 >/54 </55 & DelAccumulator/56 </57 & DoMapAccum@21/58 t.SrcPos0/5/59 (/61 e.FuncName0/31/62 Tile{ AsIs: )/30 } (/64 e.ContextVars$a/37/65 Tile{ AsIs: )/22 AsIs: (/25 AsIs: e.ContextAllAssignsOrConds/39 AsIs: )/26 AsIs: (/29 } e.Prefix$a/33/67 )/69 (/70 e.Call/35/71 )/73 1/74 (/75 )/76 Tile{ AsIs: e.0/41 } >/77 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[45]);
    refalrts::alloc_open_call(vm, context[46]);
    refalrts::alloc_name(vm, context[47], functions[efunc_Unique]);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_name(vm, context[49], functions[efunc_ExtractVariablesm_Expr]);
    refalrts::copy_evar(vm, context[50], context[51], context[39], context[40]);
    refalrts::alloc_close_call(vm, context[52]);
    refalrts::alloc_close_call(vm, context[53]);
    refalrts::alloc_close_call(vm, context[54]);
    refalrts::alloc_open_call(vm, context[55]);
    refalrts::alloc_name(vm, context[56], functions[efunc_DelAccumulator]);
    refalrts::alloc_open_call(vm, context[57]);
    refalrts::alloc_name(vm, context[58], functions[efunc_gen_DoMapAccum_Z21]);
    refalrts::copy_evar(vm, context[59], context[60], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[61]);
    refalrts::copy_evar(vm, context[62], context[63], context[31], context[32]);
    refalrts::alloc_open_bracket(vm, context[64]);
    refalrts::copy_evar(vm, context[65], context[66], context[37], context[38]);
    refalrts::copy_evar(vm, context[67], context[68], context[33], context[34]);
    refalrts::alloc_close_bracket(vm, context[69]);
    refalrts::alloc_open_bracket(vm, context[70]);
    refalrts::copy_evar(vm, context[71], context[72], context[35], context[36]);
    refalrts::alloc_close_bracket(vm, context[73]);
    refalrts::alloc_number(vm, context[74], 1UL);
    refalrts::alloc_open_bracket(vm, context[75]);
    refalrts::alloc_close_bracket(vm, context[76]);
    refalrts::alloc_close_call(vm, context[77]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1A1Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[55] );
    refalrts::push_stack( vm, context[77] );
    refalrts::push_stack( vm, context[57] );
    refalrts::link_brackets( context[75], context[76] );
    refalrts::link_brackets( context[70], context[73] );
    refalrts::link_brackets( context[29], context[69] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[64], context[22] );
    refalrts::link_brackets( context[61], context[30] );
    refalrts::push_stack( vm, context[54] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[52] );
    refalrts::push_stack( vm, context[48] );
    refalrts::link_brackets( context[21], context[45] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[77] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[69], context[76] );
    res = refalrts::splice_evar( res, context[67], context[68] );
    res = refalrts::splice_evar( res, context[22], context[29] );
    res = refalrts::splice_evar( res, context[65], context[66] );
    res = refalrts::splice_elem( res, context[64] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[62], context[63] );
    res = refalrts::splice_evar( res, context[52], context[61] );
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[45], context[49] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences=3@5/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix$a/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars$a/19 )/22 (/25 e.ContextAllAssignsOrConds/23 )/26 (/29 e.0/27 )/30 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix$a as range 11
  // closed e.Call as range 15
  // closed e.ContextVars$a as range 19
  // closed e.ContextAllAssignsOrConds as range 23
  // closed e.0 as range 27
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix$a: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars$a: 19
  //DEBUG: e.ContextAllAssignsOrConds: 23
  //DEBUG: e.0: 27
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} )/18 (/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=3@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a/11 HalfReuse: ':'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/22 AsIs: (/25 } Tile{ AsIs: e.ContextVars$a/19 } Tile{ AsIs: e.ContextAllAssignsOrConds/23 } Tile{ AsIs: )/26 AsIs: (/29 AsIs: e.0/27 AsIs: )/30 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A3Z0]);
  refalrts::reinit_char(context[14], ':');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[13], context[22] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[26];
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[22], context[25] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_A3Z5("CheckSentences=3@5", COOKIE1_, COOKIE2_, func_gen_CheckSentences_A3Z5);


static refalrts::FnResult func_gen_CheckSentences_A2Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 54 elems
  refalrts::Iter context[54];
  refalrts::zeros( context, 54 );
  // </0 & CheckSentences=2@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences=2@6/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 (/33 e.new8/31 )/34 e.new9/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  // closed e.new8 as range 31
  // closed e.new9 as range 2
  do {
    // </0 & CheckSentences=2@6/4 t.SrcPos0/5 (/9 e.FuncName0/35 )/10 (/13 e.Prefix$a0/37 )/14 (/17 e.Call/39 )/18 (/21 e.ContextVars0/41 )/22 (/25 e.Pattern0/43 )/26 (/29 e.ContextAllAssignsOrConds/45 )/30 (/33 e.1/47 )/34 e.NumberedSentencesPairs/49 >/1
    context[35] = context[7];
    context[36] = context[8];
    context[37] = context[11];
    context[38] = context[12];
    context[39] = context[15];
    context[40] = context[16];
    context[41] = context[19];
    context[42] = context[20];
    context[43] = context[23];
    context[44] = context[24];
    context[45] = context[27];
    context[46] = context[28];
    context[47] = context[31];
    context[48] = context[32];
    context[49] = context[2];
    context[50] = context[3];
    // closed e.FuncName0 as range 35
    // closed e.Prefix$a0 as range 37
    // closed e.Call as range 39
    // closed e.ContextVars0 as range 41
    // closed e.Pattern0 as range 43
    // closed e.ContextAllAssignsOrConds as range 45
    // closed e.1 as range 47
    // closed e.NumberedSentencesPairs as range 49
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 35
    //DEBUG: e.Prefix$a0: 37
    //DEBUG: e.Call: 39
    //DEBUG: e.ContextVars0: 41
    //DEBUG: e.Pattern0: 43
    //DEBUG: e.ContextAllAssignsOrConds: 45
    //DEBUG: e.1: 47
    //DEBUG: e.NumberedSentencesPairs: 49

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=3@6/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/35 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/37 AsIs: )/14 AsIs: (/17 AsIs: e.Call/39 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars0/41 AsIs: )/22 AsIs: (/25 AsIs: e.Pattern0/43 AsIs: )/26 AsIs: (/29 AsIs: e.ContextAllAssignsOrConds/45 AsIs: )/30 AsIs: (/33 AsIs: e.1/47 AsIs: )/34 } </51 & Map@4/52 Tile{ AsIs: e.NumberedSentencesPairs/49 } >/53 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[51]);
    refalrts::alloc_name(vm, context[52], functions[efunc_gen_Map_Z4]);
    refalrts::alloc_close_call(vm, context[53]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A3Z6]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[51] );
    refalrts::link_brackets( context[33], context[34] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[53] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences=2@6/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix$a0/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars0/19 )/22 (/25 e.Pattern0/23 )/26 (/29 e.ContextAllAssignsOrConds/27 )/30 (/33 e.1/31 )/34 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix$a0 as range 11
  // closed e.Call as range 15
  // closed e.ContextVars0 as range 19
  // closed e.Pattern0 as range 23
  // closed e.ContextAllAssignsOrConds as range 27
  // closed e.1 as range 31
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix$a0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars0: 19
  //DEBUG: e.Pattern0: 23
  //DEBUG: e.ContextAllAssignsOrConds: 27
  //DEBUG: e.1: 31
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} )/18 (/21 {REMOVED TILE} )/22 (/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=2@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/11 HalfReuse: '\\'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/26 AsIs: (/29 } Tile{ AsIs: e.ContextVars0/19 } Tile{ AsIs: e.Pattern0/23 } Tile{ AsIs: e.ContextAllAssignsOrConds/27 } Tile{ AsIs: )/30 AsIs: (/33 AsIs: e.1/31 AsIs: )/34 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A2Z0]);
  refalrts::reinit_char(context[14], '\\');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[13], context[26] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[30];
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[26], context[29] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_A2Z6("CheckSentences=2@6", COOKIE1_, COOKIE2_, func_gen_CheckSentences_A2Z6);


static refalrts::FnResult func_gen_CheckSentences_A2Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 54 elems
  refalrts::Iter context[54];
  refalrts::zeros( context, 54 );
  // </0 & CheckSentences=2@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences=2@7/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 (/33 e.new8/31 )/34 e.new9/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  // closed e.new8 as range 31
  // closed e.new9 as range 2
  do {
    // </0 & CheckSentences=2@7/4 t.SrcPos0/5 (/9 e.FuncName0/35 )/10 (/13 e.Prefix$a0/37 )/14 (/17 e.Call/39 )/18 (/21 e.ContextVars0/41 )/22 (/25 e.Pattern0/43 )/26 (/29 e.ContextAllAssignsOrConds/45 )/30 (/33 e.0/47 )/34 e.NumberedSentencesPairs/49 >/1
    context[35] = context[7];
    context[36] = context[8];
    context[37] = context[11];
    context[38] = context[12];
    context[39] = context[15];
    context[40] = context[16];
    context[41] = context[19];
    context[42] = context[20];
    context[43] = context[23];
    context[44] = context[24];
    context[45] = context[27];
    context[46] = context[28];
    context[47] = context[31];
    context[48] = context[32];
    context[49] = context[2];
    context[50] = context[3];
    // closed e.FuncName0 as range 35
    // closed e.Prefix$a0 as range 37
    // closed e.Call as range 39
    // closed e.ContextVars0 as range 41
    // closed e.Pattern0 as range 43
    // closed e.ContextAllAssignsOrConds as range 45
    // closed e.0 as range 47
    // closed e.NumberedSentencesPairs as range 49
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 35
    //DEBUG: e.Prefix$a0: 37
    //DEBUG: e.Call: 39
    //DEBUG: e.ContextVars0: 41
    //DEBUG: e.Pattern0: 43
    //DEBUG: e.ContextAllAssignsOrConds: 45
    //DEBUG: e.0: 47
    //DEBUG: e.NumberedSentencesPairs: 49

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=3@7/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/35 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/37 AsIs: )/14 AsIs: (/17 AsIs: e.Call/39 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars0/41 AsIs: )/22 AsIs: (/25 AsIs: e.Pattern0/43 AsIs: )/26 AsIs: (/29 AsIs: e.ContextAllAssignsOrConds/45 AsIs: )/30 AsIs: (/33 AsIs: e.0/47 AsIs: )/34 } </51 & Map@4/52 Tile{ AsIs: e.NumberedSentencesPairs/49 } >/53 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[51]);
    refalrts::alloc_name(vm, context[52], functions[efunc_gen_Map_Z4]);
    refalrts::alloc_close_call(vm, context[53]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A3Z7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[53] );
    refalrts::push_stack( vm, context[51] );
    refalrts::link_brackets( context[33], context[34] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[53] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences=2@7/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix$a0/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars0/19 )/22 (/25 e.Pattern0/23 )/26 (/29 e.ContextAllAssignsOrConds/27 )/30 (/33 e.0/31 )/34 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix$a0 as range 11
  // closed e.Call as range 15
  // closed e.ContextVars0 as range 19
  // closed e.Pattern0 as range 23
  // closed e.ContextAllAssignsOrConds as range 27
  // closed e.0 as range 31
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix$a0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars0: 19
  //DEBUG: e.Pattern0: 23
  //DEBUG: e.ContextAllAssignsOrConds: 27
  //DEBUG: e.0: 31
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} )/18 (/21 {REMOVED TILE} )/22 (/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=2@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/11 HalfReuse: ':'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/26 AsIs: (/29 } Tile{ AsIs: e.ContextVars0/19 } Tile{ AsIs: e.Pattern0/23 } Tile{ AsIs: e.ContextAllAssignsOrConds/27 } Tile{ AsIs: )/30 AsIs: (/33 AsIs: e.0/31 AsIs: )/34 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A2Z0]);
  refalrts::reinit_char(context[14], ':');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[13], context[26] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[30];
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[26], context[29] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_A2Z7("CheckSentences=2@7", COOKIE1_, COOKIE2_, func_gen_CheckSentences_A2Z7);


static refalrts::FnResult func_gen_CheckPatternPairs_S1A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & CheckPatternPairs$1=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckPatternPairs$1=1@2/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 e.new6/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 2
  do {
    // </0 & CheckPatternPairs$1=1@2/4 t.SrcPos0/5 (/9 e.FuncName0/23 )/10 (/13 e.Prefix0/25 )/14 (/17 e.Call/27 )/18 (/21 e.NumberedSentencesPairs$a/29 )/22 e.ContextVars$a/31 >/1
    context[23] = context[7];
    context[24] = context[8];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.FuncName0 as range 23
    // closed e.Prefix0 as range 25
    // closed e.Call as range 27
    // closed e.NumberedSentencesPairs$a as range 29
    // closed e.ContextVars$a as range 31
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 23
    //DEBUG: e.Prefix0: 25
    //DEBUG: e.Call: 27
    //DEBUG: e.NumberedSentencesPairs$a: 29
    //DEBUG: e.ContextVars$a: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1=2@2/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/23 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/25 AsIs: )/14 AsIs: (/17 AsIs: e.Call/27 AsIs: )/18 AsIs: (/21 AsIs: e.NumberedSentencesPairs$a/29 AsIs: )/22 } </33 & CreateContext/34 # NoMarkupContext/35 Tile{ AsIs: e.ContextVars$a/31 } >/36 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_CreateContext]);
    refalrts::alloc_ident(vm, context[35], identifiers[ident_NoMarkupContext]);
    refalrts::alloc_close_call(vm, context[36]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1A2Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[33] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[33], context[35] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPatternPairs$1=1@2/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix0/11 )/14 (/17 e.Call/15 )/18 (/21 e.NumberedSentencesPairs$a/19 )/22 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix0 as range 11
  // closed e.Call as range 15
  // closed e.NumberedSentencesPairs$a as range 19
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.NumberedSentencesPairs$a: 19
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1=1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/11 HalfReuse: ':'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/18 AsIs: (/21 AsIs: e.NumberedSentencesPairs$a/19 AsIs: )/22 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1A1Z0]);
  refalrts::reinit_char(context[14], ':');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[13], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[18];
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckPatternPairs_S1A1Z2("CheckPatternPairs$1=1@2", COOKIE1_, COOKIE2_, func_gen_CheckPatternPairs_S1A1Z2);


static refalrts::FnResult func_gen_DoMapAccum_Z18(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 94 elems
  refalrts::Iter context[94];
  refalrts::zeros( context, 94 );
  // </0 & DoMapAccum@18/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@18/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 t.new6/23 (/27 e.new7/25 )/28 e.new8/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  context[24] = refalrts::tvar_left( context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new7 as range 25
  // closed e.new8 as range 2
  do {
    // </0 & DoMapAccum@18/4 t.new9/5 (/9 e.new13/29 )/10 (/13 e.new14/31 )/14 (/17 e.new15/33 )/18 (/21 e.new16/35 )/22 t.new10/23 (/27 e.new17/37 )/28 t.new11/41 e.new12/39 >/1
    context[29] = context[7];
    context[30] = context[8];
    context[31] = context[11];
    context[32] = context[12];
    context[33] = context[15];
    context[34] = context[16];
    context[35] = context[19];
    context[36] = context[20];
    context[37] = context[25];
    context[38] = context[26];
    context[39] = context[2];
    context[40] = context[3];
    // closed e.new13 as range 29
    // closed e.new14 as range 31
    // closed e.new15 as range 33
    // closed e.new16 as range 35
    // closed e.new17 as range 37
    context[42] = refalrts::tvar_left( context[41], context[39], context[40] );
    if( ! context[42] )
      continue;
    // closed e.new12 as range 39
    do {
      // </0 & DoMapAccum@18/4 t.SrcPos0/5 (/9 e.FuncName0/43 )/10 (/13 e.ContextVars0/45 )/14 (/17 e.Prefix0/47 )/18 (/21 e.Call/49 )/22 s.Num/23 (/27 e.Scanned/51 )/28 (/41 (/59 e.1/57 )/60 e.4/55 (/67 e.5/65 )/68 (/63 e.3/61 )/64 )/42 e.Tail/53 >/1
      context[43] = context[29];
      context[44] = context[30];
      context[45] = context[31];
      context[46] = context[32];
      context[47] = context[33];
      context[48] = context[34];
      context[49] = context[35];
      context[50] = context[36];
      context[51] = context[37];
      context[52] = context[38];
      context[53] = context[39];
      context[54] = context[40];
      context[55] = 0;
      context[56] = 0;
      if( ! refalrts::brackets_term( context[55], context[56], context[41] ) )
        continue;
      if( ! refalrts::svar_term( context[23], context[23] ) )
        continue;
      context[57] = 0;
      context[58] = 0;
      context[59] = refalrts::brackets_left( context[57], context[58], context[55], context[56] );
      if( ! context[59] )
        continue;
      refalrts::bracket_pointers(context[59], context[60]);
      context[61] = 0;
      context[62] = 0;
      context[63] = refalrts::brackets_right( context[61], context[62], context[55], context[56] );
      if( ! context[63] )
        continue;
      refalrts::bracket_pointers(context[63], context[64]);
      context[65] = 0;
      context[66] = 0;
      context[67] = refalrts::brackets_right( context[65], context[66], context[55], context[56] );
      if( ! context[67] )
        continue;
      refalrts::bracket_pointers(context[67], context[68]);
      // closed e.FuncName0 as range 43
      // closed e.ContextVars0 as range 45
      // closed e.Prefix0 as range 47
      // closed e.Call as range 49
      // closed e.Scanned as range 51
      // closed e.1 as range 57
      // closed e.4 as range 55
      // closed e.5 as range 65
      // closed e.3 as range 61
      // closed e.Tail as range 53
      //DEBUG: t.SrcPos0: 5
      //DEBUG: s.Num: 23
      //DEBUG: e.FuncName0: 43
      //DEBUG: e.ContextVars0: 45
      //DEBUG: e.Prefix0: 47
      //DEBUG: e.Call: 49
      //DEBUG: e.Scanned: 51
      //DEBUG: e.1: 57
      //DEBUG: e.4: 55
      //DEBUG: e.5: 65
      //DEBUG: e.3: 61
      //DEBUG: e.Tail: 53

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@18/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/43 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars0/45 AsIs: )/14 AsIs: (/17 AsIs: e.Prefix0/47 AsIs: )/18 AsIs: (/21 AsIs: e.Call/49 AsIs: )/22 } Tile{ AsIs: (/27 AsIs: e.Scanned/51 AsIs: )/28 AsIs: (/41 } Tile{ AsIs: e.Tail/53 } )/69 </70 & CheckSentences\1=1/71 Tile{ AsIs: s.Num/23 } t.SrcPos0/5/72 (/74 e.FuncName0/43/75 )/77 Tile{ AsIs: (/59 AsIs: e.1/57 AsIs: )/60 } (/78 Tile{ AsIs: e.4/55 } )/79 Tile{ AsIs: (/67 AsIs: e.5/65 AsIs: )/68 AsIs: (/63 AsIs: e.3/61 AsIs: )/64 HalfReuse: (/42 } e.ContextVars0/45/80 )/82 e.Prefix0/47/83 ':'/85 e.Call/49/86 '$'/88 </89 & Symb/90 s.Num/23/91 >/92 >/93 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[69]);
      refalrts::alloc_open_call(vm, context[70]);
      refalrts::alloc_name(vm, context[71], functions[efunc_gen_CheckSentences_L1A1]);
      refalrts::copy_evar(vm, context[72], context[73], context[5], context[6]);
      refalrts::alloc_open_bracket(vm, context[74]);
      refalrts::copy_evar(vm, context[75], context[76], context[43], context[44]);
      refalrts::alloc_close_bracket(vm, context[77]);
      refalrts::alloc_open_bracket(vm, context[78]);
      refalrts::alloc_close_bracket(vm, context[79]);
      refalrts::copy_evar(vm, context[80], context[81], context[45], context[46]);
      refalrts::alloc_close_bracket(vm, context[82]);
      refalrts::copy_evar(vm, context[83], context[84], context[47], context[48]);
      refalrts::alloc_char(vm, context[85], ':');
      refalrts::copy_evar(vm, context[86], context[87], context[49], context[50]);
      refalrts::alloc_char(vm, context[88], '$');
      refalrts::alloc_open_call(vm, context[89]);
      refalrts::alloc_name(vm, context[90], functions[efunc_Symb]);
      refalrts::copy_stvar(vm, context[91], context[23]);
      refalrts::alloc_close_call(vm, context[92]);
      refalrts::alloc_close_call(vm, context[93]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z18]);
      refalrts::reinit_open_bracket(context[42]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[93] );
      refalrts::push_stack( vm, context[70] );
      refalrts::push_stack( vm, context[92] );
      refalrts::push_stack( vm, context[89] );
      refalrts::link_brackets( context[42], context[82] );
      refalrts::link_brackets( context[63], context[64] );
      refalrts::link_brackets( context[67], context[68] );
      refalrts::link_brackets( context[78], context[79] );
      refalrts::link_brackets( context[59], context[60] );
      refalrts::link_brackets( context[74], context[77] );
      refalrts::link_brackets( context[41], context[69] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[82], context[93] );
      res = refalrts::splice_evar( res, context[80], context[81] );
      res = refalrts::splice_evar( res, context[67], context[42] );
      res = refalrts::splice_elem( res, context[79] );
      res = refalrts::splice_evar( res, context[55], context[56] );
      res = refalrts::splice_elem( res, context[78] );
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[72], context[77] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[69], context[71] );
      res = refalrts::splice_evar( res, context[53], context[54] );
      res = refalrts::splice_evar( res, context[27], context[41] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@18/4 t.SrcPos0/5 (/9 e.FuncName0/43 )/10 (/13 e.ContextVars0/45 )/14 (/17 e.Prefix0/47 )/18 (/21 e.Call/49 )/22 t.Acc/23 (/27 e.Scanned/51 )/28 t.Next/41 e.Tail/53 >/1
    context[43] = context[29];
    context[44] = context[30];
    context[45] = context[31];
    context[46] = context[32];
    context[47] = context[33];
    context[48] = context[34];
    context[49] = context[35];
    context[50] = context[36];
    context[51] = context[37];
    context[52] = context[38];
    context[53] = context[39];
    context[54] = context[40];
    // closed e.FuncName0 as range 43
    // closed e.ContextVars0 as range 45
    // closed e.Prefix0 as range 47
    // closed e.Call as range 49
    // closed e.Scanned as range 51
    // closed e.Tail as range 53
    //DEBUG: t.SrcPos0: 5
    //DEBUG: t.Acc: 23
    //DEBUG: t.Next: 41
    //DEBUG: e.FuncName0: 43
    //DEBUG: e.ContextVars0: 45
    //DEBUG: e.Prefix0: 47
    //DEBUG: e.Call: 49
    //DEBUG: e.Scanned: 51
    //DEBUG: e.Tail: 53

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@18/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/43 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars0/45 AsIs: )/14 AsIs: (/17 AsIs: e.Prefix0/47 AsIs: )/18 AsIs: (/21 AsIs: e.Call/49 AsIs: )/22 } Tile{ AsIs: (/27 AsIs: e.Scanned/51 AsIs: )/28 } (/55 Tile{ AsIs: e.Tail/53 } )/56 </57 & CheckSentences\1*1/58 t.SrcPos0/5/59 (/61 e.FuncName0/43/62 )/64 (/65 e.ContextVars0/45/66 )/68 (/69 e.Prefix0/47/70 ':'/72 e.Call/49/73 )/75 Tile{ AsIs: t.Acc/23 } Tile{ AsIs: t.Next/41 } >/76 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[55]);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_open_call(vm, context[57]);
    refalrts::alloc_name(vm, context[58], functions[efunc_gen_CheckSentences_L1D1]);
    refalrts::copy_evar(vm, context[59], context[60], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[61]);
    refalrts::copy_evar(vm, context[62], context[63], context[43], context[44]);
    refalrts::alloc_close_bracket(vm, context[64]);
    refalrts::alloc_open_bracket(vm, context[65]);
    refalrts::copy_evar(vm, context[66], context[67], context[45], context[46]);
    refalrts::alloc_close_bracket(vm, context[68]);
    refalrts::alloc_open_bracket(vm, context[69]);
    refalrts::copy_evar(vm, context[70], context[71], context[47], context[48]);
    refalrts::alloc_char(vm, context[72], ':');
    refalrts::copy_evar(vm, context[73], context[74], context[49], context[50]);
    refalrts::alloc_close_bracket(vm, context[75]);
    refalrts::alloc_close_call(vm, context[76]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z18]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[76] );
    refalrts::push_stack( vm, context[57] );
    refalrts::link_brackets( context[69], context[75] );
    refalrts::link_brackets( context[65], context[68] );
    refalrts::link_brackets( context[61], context[64] );
    refalrts::link_brackets( context[55], context[56] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[76] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[56], context[75] );
    res = refalrts::splice_evar( res, context[53], context[54] );
    res = refalrts::splice_elem( res, context[55] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@18/4 t.SrcPos0/5 (/9 e.FuncName0/29 )/10 (/13 e.ContextVars0/31 )/14 (/17 e.Prefix0/33 )/18 (/21 e.Call/35 )/22 t.Acc/23 (/27 e.Scanned/37 )/28 >/1
    context[29] = context[7];
    context[30] = context[8];
    context[31] = context[11];
    context[32] = context[12];
    context[33] = context[15];
    context[34] = context[16];
    context[35] = context[19];
    context[36] = context[20];
    context[37] = context[25];
    context[38] = context[26];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.FuncName0 as range 29
    // closed e.ContextVars0 as range 31
    // closed e.Prefix0 as range 33
    // closed e.Call as range 35
    // closed e.Scanned as range 37
    //DEBUG: t.SrcPos0: 5
    //DEBUG: t.Acc: 23
    //DEBUG: e.FuncName0: 29
    //DEBUG: e.ContextVars0: 31
    //DEBUG: e.Prefix0: 33
    //DEBUG: e.Call: 35
    //DEBUG: e.Scanned: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@18/4 t.SrcPos0/5 (/9 e.FuncName0/29 )/10 (/13 e.ContextVars0/31 )/14 (/17 e.Prefix0/33 )/18 (/21 e.Call/35 )/22 {REMOVED TILE} (/27 {REMOVED TILE} )/28 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/23 } Tile{ AsIs: e.Scanned/37 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@18/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.ContextVars0/11 )/14 (/17 e.Prefix0/15 )/18 (/21 e.Call/19 )/22 t.acc/23 (/27 e.scanned/25 )/28 e.items/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.ContextVars0 as range 11
  // closed e.Prefix0 as range 15
  // closed e.Call as range 19
  // closed e.scanned as range 25
  // closed e.items as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: t.acc: 23
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.ContextVars0: 11
  //DEBUG: e.Prefix0: 15
  //DEBUG: e.Call: 19
  //DEBUG: e.scanned: 25
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </21 } & DoMapAccum@0/29 Tile{ HalfReuse: [*]/0 Reuse: & CheckSentences\1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars0/11 AsIs: )/14 AsIs: (/17 AsIs: e.Prefix0/15 HalfReuse: ':'/18 } Tile{ AsIs: e.Call/19 } )/30 Tile{ HalfReuse: {*}/22 AsIs: t.acc/23 AsIs: (/27 AsIs: e.scanned/25 AsIs: )/28 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[29], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_close_bracket(vm, context[30]);
  refalrts::reinit_open_call(context[21]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_L1Z0]);
  refalrts::reinit_char(context[18], ':');
  refalrts::reinit_unwrapped_closure(context[22], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[17], context[30] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[22];
  res = refalrts::splice_elem( res, context[30] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[0], context[18] );
  res = refalrts::splice_elem( res, context[29] );
  res = refalrts::splice_elem( res, context[21] );
  refalrts::use( res );
  refalrts::wrap_closure( context[22] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z18("DoMapAccum@18", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z18);


static refalrts::FnResult func_gen_CheckPatternPairs_S1A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & CheckPatternPairs$1=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckPatternPairs$1=1@3/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 e.new6/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 2
  do {
    // </0 & CheckPatternPairs$1=1@3/4 t.SrcPos0/5 (/9 e.FuncName0/23 )/10 (/13 e.Prefix0/25 )/14 (/17 e.Call/27 )/18 (/21 e.NumberedSentencesPairs$a/29 )/22 e.ContextVars$a/31 >/1
    context[23] = context[7];
    context[24] = context[8];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.FuncName0 as range 23
    // closed e.Prefix0 as range 25
    // closed e.Call as range 27
    // closed e.NumberedSentencesPairs$a as range 29
    // closed e.ContextVars$a as range 31
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 23
    //DEBUG: e.Prefix0: 25
    //DEBUG: e.Call: 27
    //DEBUG: e.NumberedSentencesPairs$a: 29
    //DEBUG: e.ContextVars$a: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1=2@3/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/23 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/25 AsIs: )/14 AsIs: (/17 AsIs: e.Call/27 AsIs: )/18 AsIs: (/21 AsIs: e.NumberedSentencesPairs$a/29 AsIs: )/22 } </33 & CreateContext/34 # NoMarkupContext/35 Tile{ AsIs: e.ContextVars$a/31 } >/36 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_CreateContext]);
    refalrts::alloc_ident(vm, context[35], identifiers[ident_NoMarkupContext]);
    refalrts::alloc_close_call(vm, context[36]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1A2Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[33] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[33], context[35] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPatternPairs$1=1@3/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix0/11 )/14 (/17 e.Call/15 )/18 (/21 e.NumberedSentencesPairs$a/19 )/22 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix0 as range 11
  // closed e.Call as range 15
  // closed e.NumberedSentencesPairs$a as range 19
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.NumberedSentencesPairs$a: 19
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1=1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/11 HalfReuse: '\\'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/18 AsIs: (/21 AsIs: e.NumberedSentencesPairs$a/19 AsIs: )/22 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1A1Z0]);
  refalrts::reinit_char(context[14], '\\');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[13], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[18];
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckPatternPairs_S1A1Z3("CheckPatternPairs$1=1@3", COOKIE1_, COOKIE2_, func_gen_CheckPatternPairs_S1A1Z3);


static refalrts::FnResult func_gen_DoMapAccum_Z19(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 94 elems
  refalrts::Iter context[94];
  refalrts::zeros( context, 94 );
  // </0 & DoMapAccum@19/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@19/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 t.new6/23 (/27 e.new7/25 )/28 e.new8/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  context[24] = refalrts::tvar_left( context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new7 as range 25
  // closed e.new8 as range 2
  do {
    // </0 & DoMapAccum@19/4 t.new9/5 (/9 e.new13/29 )/10 (/13 e.new14/31 )/14 (/17 e.new15/33 )/18 (/21 e.new16/35 )/22 t.new10/23 (/27 e.new17/37 )/28 t.new11/41 e.new12/39 >/1
    context[29] = context[7];
    context[30] = context[8];
    context[31] = context[11];
    context[32] = context[12];
    context[33] = context[15];
    context[34] = context[16];
    context[35] = context[19];
    context[36] = context[20];
    context[37] = context[25];
    context[38] = context[26];
    context[39] = context[2];
    context[40] = context[3];
    // closed e.new13 as range 29
    // closed e.new14 as range 31
    // closed e.new15 as range 33
    // closed e.new16 as range 35
    // closed e.new17 as range 37
    context[42] = refalrts::tvar_left( context[41], context[39], context[40] );
    if( ! context[42] )
      continue;
    // closed e.new12 as range 39
    do {
      // </0 & DoMapAccum@19/4 t.SrcPos0/5 (/9 e.FuncName0/43 )/10 (/13 e.ContextVars0/45 )/14 (/17 e.Prefix0/47 )/18 (/21 e.Call/49 )/22 s.Num/23 (/27 e.Scanned/51 )/28 (/41 (/59 e.1/57 )/60 e.4/55 (/67 e.5/65 )/68 (/63 e.3/61 )/64 )/42 e.Tail/53 >/1
      context[43] = context[29];
      context[44] = context[30];
      context[45] = context[31];
      context[46] = context[32];
      context[47] = context[33];
      context[48] = context[34];
      context[49] = context[35];
      context[50] = context[36];
      context[51] = context[37];
      context[52] = context[38];
      context[53] = context[39];
      context[54] = context[40];
      context[55] = 0;
      context[56] = 0;
      if( ! refalrts::brackets_term( context[55], context[56], context[41] ) )
        continue;
      if( ! refalrts::svar_term( context[23], context[23] ) )
        continue;
      context[57] = 0;
      context[58] = 0;
      context[59] = refalrts::brackets_left( context[57], context[58], context[55], context[56] );
      if( ! context[59] )
        continue;
      refalrts::bracket_pointers(context[59], context[60]);
      context[61] = 0;
      context[62] = 0;
      context[63] = refalrts::brackets_right( context[61], context[62], context[55], context[56] );
      if( ! context[63] )
        continue;
      refalrts::bracket_pointers(context[63], context[64]);
      context[65] = 0;
      context[66] = 0;
      context[67] = refalrts::brackets_right( context[65], context[66], context[55], context[56] );
      if( ! context[67] )
        continue;
      refalrts::bracket_pointers(context[67], context[68]);
      // closed e.FuncName0 as range 43
      // closed e.ContextVars0 as range 45
      // closed e.Prefix0 as range 47
      // closed e.Call as range 49
      // closed e.Scanned as range 51
      // closed e.1 as range 57
      // closed e.4 as range 55
      // closed e.5 as range 65
      // closed e.3 as range 61
      // closed e.Tail as range 53
      //DEBUG: t.SrcPos0: 5
      //DEBUG: s.Num: 23
      //DEBUG: e.FuncName0: 43
      //DEBUG: e.ContextVars0: 45
      //DEBUG: e.Prefix0: 47
      //DEBUG: e.Call: 49
      //DEBUG: e.Scanned: 51
      //DEBUG: e.1: 57
      //DEBUG: e.4: 55
      //DEBUG: e.5: 65
      //DEBUG: e.3: 61
      //DEBUG: e.Tail: 53

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@19/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/43 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars0/45 AsIs: )/14 AsIs: (/17 AsIs: e.Prefix0/47 AsIs: )/18 AsIs: (/21 AsIs: e.Call/49 AsIs: )/22 } Tile{ AsIs: (/27 AsIs: e.Scanned/51 AsIs: )/28 AsIs: (/41 } Tile{ AsIs: e.Tail/53 } )/69 </70 & CheckSentences\1=1/71 Tile{ AsIs: s.Num/23 } t.SrcPos0/5/72 (/74 e.FuncName0/43/75 )/77 Tile{ AsIs: (/59 AsIs: e.1/57 AsIs: )/60 } (/78 Tile{ AsIs: e.4/55 } )/79 Tile{ AsIs: (/67 AsIs: e.5/65 AsIs: )/68 AsIs: (/63 AsIs: e.3/61 AsIs: )/64 HalfReuse: (/42 } e.ContextVars0/45/80 )/82 e.Prefix0/47/83 '\\'/85 e.Call/49/86 '$'/88 </89 & Symb/90 s.Num/23/91 >/92 >/93 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[69]);
      refalrts::alloc_open_call(vm, context[70]);
      refalrts::alloc_name(vm, context[71], functions[efunc_gen_CheckSentences_L1A1]);
      refalrts::copy_evar(vm, context[72], context[73], context[5], context[6]);
      refalrts::alloc_open_bracket(vm, context[74]);
      refalrts::copy_evar(vm, context[75], context[76], context[43], context[44]);
      refalrts::alloc_close_bracket(vm, context[77]);
      refalrts::alloc_open_bracket(vm, context[78]);
      refalrts::alloc_close_bracket(vm, context[79]);
      refalrts::copy_evar(vm, context[80], context[81], context[45], context[46]);
      refalrts::alloc_close_bracket(vm, context[82]);
      refalrts::copy_evar(vm, context[83], context[84], context[47], context[48]);
      refalrts::alloc_char(vm, context[85], '\\');
      refalrts::copy_evar(vm, context[86], context[87], context[49], context[50]);
      refalrts::alloc_char(vm, context[88], '$');
      refalrts::alloc_open_call(vm, context[89]);
      refalrts::alloc_name(vm, context[90], functions[efunc_Symb]);
      refalrts::copy_stvar(vm, context[91], context[23]);
      refalrts::alloc_close_call(vm, context[92]);
      refalrts::alloc_close_call(vm, context[93]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z19]);
      refalrts::reinit_open_bracket(context[42]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[93] );
      refalrts::push_stack( vm, context[70] );
      refalrts::push_stack( vm, context[92] );
      refalrts::push_stack( vm, context[89] );
      refalrts::link_brackets( context[42], context[82] );
      refalrts::link_brackets( context[63], context[64] );
      refalrts::link_brackets( context[67], context[68] );
      refalrts::link_brackets( context[78], context[79] );
      refalrts::link_brackets( context[59], context[60] );
      refalrts::link_brackets( context[74], context[77] );
      refalrts::link_brackets( context[41], context[69] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[82], context[93] );
      res = refalrts::splice_evar( res, context[80], context[81] );
      res = refalrts::splice_evar( res, context[67], context[42] );
      res = refalrts::splice_elem( res, context[79] );
      res = refalrts::splice_evar( res, context[55], context[56] );
      res = refalrts::splice_elem( res, context[78] );
      res = refalrts::splice_evar( res, context[59], context[60] );
      res = refalrts::splice_evar( res, context[72], context[77] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[69], context[71] );
      res = refalrts::splice_evar( res, context[53], context[54] );
      res = refalrts::splice_evar( res, context[27], context[41] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@19/4 t.SrcPos0/5 (/9 e.FuncName0/43 )/10 (/13 e.ContextVars0/45 )/14 (/17 e.Prefix0/47 )/18 (/21 e.Call/49 )/22 t.Acc/23 (/27 e.Scanned/51 )/28 t.Next/41 e.Tail/53 >/1
    context[43] = context[29];
    context[44] = context[30];
    context[45] = context[31];
    context[46] = context[32];
    context[47] = context[33];
    context[48] = context[34];
    context[49] = context[35];
    context[50] = context[36];
    context[51] = context[37];
    context[52] = context[38];
    context[53] = context[39];
    context[54] = context[40];
    // closed e.FuncName0 as range 43
    // closed e.ContextVars0 as range 45
    // closed e.Prefix0 as range 47
    // closed e.Call as range 49
    // closed e.Scanned as range 51
    // closed e.Tail as range 53
    //DEBUG: t.SrcPos0: 5
    //DEBUG: t.Acc: 23
    //DEBUG: t.Next: 41
    //DEBUG: e.FuncName0: 43
    //DEBUG: e.ContextVars0: 45
    //DEBUG: e.Prefix0: 47
    //DEBUG: e.Call: 49
    //DEBUG: e.Scanned: 51
    //DEBUG: e.Tail: 53

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@19/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/43 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars0/45 AsIs: )/14 AsIs: (/17 AsIs: e.Prefix0/47 AsIs: )/18 AsIs: (/21 AsIs: e.Call/49 AsIs: )/22 } Tile{ AsIs: (/27 AsIs: e.Scanned/51 AsIs: )/28 } (/55 Tile{ AsIs: e.Tail/53 } )/56 </57 & CheckSentences\1*1/58 t.SrcPos0/5/59 (/61 e.FuncName0/43/62 )/64 (/65 e.ContextVars0/45/66 )/68 (/69 e.Prefix0/47/70 '\\'/72 e.Call/49/73 )/75 Tile{ AsIs: t.Acc/23 } Tile{ AsIs: t.Next/41 } >/76 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[55]);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_open_call(vm, context[57]);
    refalrts::alloc_name(vm, context[58], functions[efunc_gen_CheckSentences_L1D1]);
    refalrts::copy_evar(vm, context[59], context[60], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[61]);
    refalrts::copy_evar(vm, context[62], context[63], context[43], context[44]);
    refalrts::alloc_close_bracket(vm, context[64]);
    refalrts::alloc_open_bracket(vm, context[65]);
    refalrts::copy_evar(vm, context[66], context[67], context[45], context[46]);
    refalrts::alloc_close_bracket(vm, context[68]);
    refalrts::alloc_open_bracket(vm, context[69]);
    refalrts::copy_evar(vm, context[70], context[71], context[47], context[48]);
    refalrts::alloc_char(vm, context[72], '\\');
    refalrts::copy_evar(vm, context[73], context[74], context[49], context[50]);
    refalrts::alloc_close_bracket(vm, context[75]);
    refalrts::alloc_close_call(vm, context[76]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z19]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[76] );
    refalrts::push_stack( vm, context[57] );
    refalrts::link_brackets( context[69], context[75] );
    refalrts::link_brackets( context[65], context[68] );
    refalrts::link_brackets( context[61], context[64] );
    refalrts::link_brackets( context[55], context[56] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[76] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[56], context[75] );
    res = refalrts::splice_evar( res, context[53], context[54] );
    res = refalrts::splice_elem( res, context[55] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@19/4 t.SrcPos0/5 (/9 e.FuncName0/29 )/10 (/13 e.ContextVars0/31 )/14 (/17 e.Prefix0/33 )/18 (/21 e.Call/35 )/22 t.Acc/23 (/27 e.Scanned/37 )/28 >/1
    context[29] = context[7];
    context[30] = context[8];
    context[31] = context[11];
    context[32] = context[12];
    context[33] = context[15];
    context[34] = context[16];
    context[35] = context[19];
    context[36] = context[20];
    context[37] = context[25];
    context[38] = context[26];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.FuncName0 as range 29
    // closed e.ContextVars0 as range 31
    // closed e.Prefix0 as range 33
    // closed e.Call as range 35
    // closed e.Scanned as range 37
    //DEBUG: t.SrcPos0: 5
    //DEBUG: t.Acc: 23
    //DEBUG: e.FuncName0: 29
    //DEBUG: e.ContextVars0: 31
    //DEBUG: e.Prefix0: 33
    //DEBUG: e.Call: 35
    //DEBUG: e.Scanned: 37

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@19/4 t.SrcPos0/5 (/9 e.FuncName0/29 )/10 (/13 e.ContextVars0/31 )/14 (/17 e.Prefix0/33 )/18 (/21 e.Call/35 )/22 {REMOVED TILE} (/27 {REMOVED TILE} )/28 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/23 } Tile{ AsIs: e.Scanned/37 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@19/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.ContextVars0/11 )/14 (/17 e.Prefix0/15 )/18 (/21 e.Call/19 )/22 t.acc/23 (/27 e.scanned/25 )/28 e.items/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.ContextVars0 as range 11
  // closed e.Prefix0 as range 15
  // closed e.Call as range 19
  // closed e.scanned as range 25
  // closed e.items as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: t.acc: 23
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.ContextVars0: 11
  //DEBUG: e.Prefix0: 15
  //DEBUG: e.Call: 19
  //DEBUG: e.scanned: 25
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </21 } & DoMapAccum@0/29 Tile{ HalfReuse: [*]/0 Reuse: & CheckSentences\1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars0/11 AsIs: )/14 AsIs: (/17 AsIs: e.Prefix0/15 HalfReuse: '\\'/18 } Tile{ AsIs: e.Call/19 } )/30 Tile{ HalfReuse: {*}/22 AsIs: t.acc/23 AsIs: (/27 AsIs: e.scanned/25 AsIs: )/28 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[29], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_close_bracket(vm, context[30]);
  refalrts::reinit_open_call(context[21]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_L1Z0]);
  refalrts::reinit_char(context[18], '\\');
  refalrts::reinit_unwrapped_closure(context[22], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[17], context[30] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[22];
  res = refalrts::splice_elem( res, context[30] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[0], context[18] );
  res = refalrts::splice_elem( res, context[29] );
  res = refalrts::splice_elem( res, context[21] );
  refalrts::use( res );
  refalrts::wrap_closure( context[22] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z19("DoMapAccum@19", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z19);


static refalrts::FnResult func_gen_Map_Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 87 elems
  refalrts::Iter context[87];
  refalrts::zeros( context, 87 );
  // </0 & Map@10/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@10/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 2
  do {
    // </0 & Map@10/4 t.new5/5 (/9 e.new8/15 )/10 (/13 e.new9/17 )/14 t.new6/21 e.new7/19 >/1
    context[15] = context[7];
    context[16] = context[8];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.new8 as range 15
    // closed e.new9 as range 17
    context[22] = refalrts::tvar_left( context[21], context[19], context[20] );
    if( ! context[22] )
      continue;
    // closed e.new7 as range 19
    do {
      // </0 & Map@10/4 t.SrcPos0/5 (/9 e.Name/23 )/10 (/13 e.ContextVars$b/25 )/14 (/21 (/33 (/37 (/41 e.01/39 )/42 e.04/35 (/61 e.05/59 )/62 (/57 e.03/55 )/58 )/38 s.Num-L/71 )/34 (/45 (/49 (/53 e.07/51 )/54 e.10/47 (/69 e.11/67 )/70 (/65 e.09/63 )/66 )/50 s.Num-R/72 )/46 )/22 e.Tail/27 >/1
      context[23] = context[15];
      context[24] = context[16];
      context[25] = context[17];
      context[26] = context[18];
      context[27] = context[19];
      context[28] = context[20];
      context[29] = 0;
      context[30] = 0;
      if( ! refalrts::brackets_term( context[29], context[30], context[21] ) )
        continue;
      context[31] = 0;
      context[32] = 0;
      context[33] = refalrts::brackets_left( context[31], context[32], context[29], context[30] );
      if( ! context[33] )
        continue;
      refalrts::bracket_pointers(context[33], context[34]);
      context[35] = 0;
      context[36] = 0;
      context[37] = refalrts::brackets_left( context[35], context[36], context[31], context[32] );
      if( ! context[37] )
        continue;
      refalrts::bracket_pointers(context[37], context[38]);
      context[39] = 0;
      context[40] = 0;
      context[41] = refalrts::brackets_left( context[39], context[40], context[35], context[36] );
      if( ! context[41] )
        continue;
      refalrts::bracket_pointers(context[41], context[42]);
      context[43] = 0;
      context[44] = 0;
      context[45] = refalrts::brackets_left( context[43], context[44], context[29], context[30] );
      if( ! context[45] )
        continue;
      refalrts::bracket_pointers(context[45], context[46]);
      context[47] = 0;
      context[48] = 0;
      context[49] = refalrts::brackets_left( context[47], context[48], context[43], context[44] );
      if( ! context[49] )
        continue;
      refalrts::bracket_pointers(context[49], context[50]);
      context[51] = 0;
      context[52] = 0;
      context[53] = refalrts::brackets_left( context[51], context[52], context[47], context[48] );
      if( ! context[53] )
        continue;
      refalrts::bracket_pointers(context[53], context[54]);
      context[55] = 0;
      context[56] = 0;
      context[57] = refalrts::brackets_right( context[55], context[56], context[35], context[36] );
      if( ! context[57] )
        continue;
      refalrts::bracket_pointers(context[57], context[58]);
      context[59] = 0;
      context[60] = 0;
      context[61] = refalrts::brackets_right( context[59], context[60], context[35], context[36] );
      if( ! context[61] )
        continue;
      refalrts::bracket_pointers(context[61], context[62]);
      context[63] = 0;
      context[64] = 0;
      context[65] = refalrts::brackets_right( context[63], context[64], context[47], context[48] );
      if( ! context[65] )
        continue;
      refalrts::bracket_pointers(context[65], context[66]);
      context[67] = 0;
      context[68] = 0;
      context[69] = refalrts::brackets_right( context[67], context[68], context[47], context[48] );
      if( ! context[69] )
        continue;
      refalrts::bracket_pointers(context[69], context[70]);
      if( ! refalrts::empty_seq( context[29], context[30] ) )
        continue;
      // closed e.Name as range 23
      // closed e.ContextVars$b as range 25
      // closed e.01 as range 39
      // closed e.04 as range 35
      // closed e.05 as range 59
      // closed e.03 as range 55
      // closed e.07 as range 51
      // closed e.10 as range 47
      // closed e.11 as range 67
      // closed e.09 as range 63
      // closed e.Tail as range 27
      if( ! refalrts::svar_left( context[71], context[31], context[32] ) )
        continue;
      if( ! refalrts::empty_seq( context[31], context[32] ) )
        continue;
      if( ! refalrts::svar_left( context[72], context[43], context[44] ) )
        continue;
      if( ! refalrts::empty_seq( context[43], context[44] ) )
        continue;
      //DEBUG: t.SrcPos0: 5
      //DEBUG: e.Name: 23
      //DEBUG: e.ContextVars$b: 25
      //DEBUG: e.01: 39
      //DEBUG: e.04: 35
      //DEBUG: e.05: 59
      //DEBUG: e.03: 55
      //DEBUG: e.07: 51
      //DEBUG: e.10: 47
      //DEBUG: e.11: 67
      //DEBUG: e.09: 63
      //DEBUG: e.Tail: 27
      //DEBUG: s.Num-L: 71
      //DEBUG: s.Num-R: 72

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} (/21 {REMOVED TILE} e.04/35 (/61 e.05/59 )/62 {REMOVED TILE} e.03/55 {REMOVED TILE} s.Num-L/71 {REMOVED TILE} {REMOVED TILE} e.10/47 {REMOVED TILE} e.11/67 {REMOVED TILE} e.09/63 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </33 HalfReuse: & CheckPatternPairs$1\1:1@1/37 AsIs: (/41 AsIs: e.01/39 AsIs: )/42 } Tile{ AsIs: (/53 AsIs: e.07/51 AsIs: )/54 } t.SrcPos0/5/73 Tile{ AsIs: (/69 } e.Name/23/75 Tile{ AsIs: )/50 AsIs: s.Num-R/72 HalfReuse: s.Num-L71 /46 HalfReuse: (/22 } e.ContextVars$b/25/77 Tile{ AsIs: )/66 } Tile{ HalfReuse: </34 HalfReuse: & GenericMatch/45 AsIs: (/49 } e.ContextVars$b/25/79 e.01/39/81 Tile{ AsIs: )/70 AsIs: (/65 } e.ContextVars$b/25/83 e.07/51/85 Tile{ AsIs: )/58 HalfReuse: >/38 } Tile{ HalfReuse: >/57 } Tile{ AsIs: </0 AsIs: & Map@10/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.Name/23 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars$b/25 AsIs: )/14 } Tile{ AsIs: e.Tail/27 } Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[73], context[74], context[5], context[6]);
      refalrts::copy_evar(vm, context[75], context[76], context[23], context[24]);
      refalrts::copy_evar(vm, context[77], context[78], context[25], context[26]);
      refalrts::copy_evar(vm, context[79], context[80], context[25], context[26]);
      refalrts::copy_evar(vm, context[81], context[82], context[39], context[40]);
      refalrts::copy_evar(vm, context[83], context[84], context[25], context[26]);
      refalrts::copy_evar(vm, context[85], context[86], context[51], context[52]);
      refalrts::reinit_open_call(context[33]);
      refalrts::reinit_name(context[37], functions[efunc_gen_CheckPatternPairs_S1L1B1Z1]);
      refalrts::reinit_svar( context[46], context[71] );
      refalrts::reinit_open_bracket(context[22]);
      refalrts::reinit_open_call(context[34]);
      refalrts::reinit_name(context[45], functions[efunc_GenericMatch]);
      refalrts::reinit_close_call(context[38]);
      refalrts::reinit_close_call(context[57]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[57] );
      refalrts::push_stack( vm, context[33] );
      refalrts::push_stack( vm, context[38] );
      refalrts::push_stack( vm, context[34] );
      refalrts::link_brackets( context[65], context[58] );
      refalrts::link_brackets( context[49], context[70] );
      refalrts::link_brackets( context[22], context[66] );
      refalrts::link_brackets( context[69], context[50] );
      refalrts::link_brackets( context[53], context[54] );
      refalrts::link_brackets( context[41], context[42] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[0], context[14] );
      res = refalrts::splice_elem( res, context[57] );
      res = refalrts::splice_evar( res, context[58], context[38] );
      res = refalrts::splice_evar( res, context[85], context[86] );
      res = refalrts::splice_evar( res, context[83], context[84] );
      res = refalrts::splice_evar( res, context[70], context[65] );
      res = refalrts::splice_evar( res, context[81], context[82] );
      res = refalrts::splice_evar( res, context[79], context[80] );
      res = refalrts::splice_evar( res, context[34], context[49] );
      res = refalrts::splice_elem( res, context[66] );
      res = refalrts::splice_evar( res, context[77], context[78] );
      res = refalrts::splice_evar( res, context[50], context[22] );
      res = refalrts::splice_evar( res, context[75], context[76] );
      res = refalrts::splice_elem( res, context[69] );
      res = refalrts::splice_evar( res, context[73], context[74] );
      res = refalrts::splice_evar( res, context[53], context[54] );
      res = refalrts::splice_evar( res, context[33], context[42] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@10/4 t.SrcPos0/5 (/9 e.Name/23 )/10 (/13 e.ContextVars$b/25 )/14 t.Next/21 e.Tail/27 >/1
    context[23] = context[15];
    context[24] = context[16];
    context[25] = context[17];
    context[26] = context[18];
    context[27] = context[19];
    context[28] = context[20];
    // closed e.Name as range 23
    // closed e.ContextVars$b as range 25
    // closed e.Tail as range 27
    //DEBUG: t.SrcPos0: 5
    //DEBUG: t.Next: 21
    //DEBUG: e.Name: 23
    //DEBUG: e.ContextVars$b: 25
    //DEBUG: e.Tail: 27

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </29 & CheckPatternPairs$1\1*1/30 t.SrcPos0/5/31 (/33 e.Name/23/34 )/36 (/37 )/38 (/39 e.ContextVars$b/25/40 )/42 Tile{ AsIs: t.Next/21 } >/43 Tile{ AsIs: </0 AsIs: & Map@10/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.Name/23 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars$b/25 AsIs: )/14 } Tile{ AsIs: e.Tail/27 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[29]);
    refalrts::alloc_name(vm, context[30], functions[efunc_gen_CheckPatternPairs_S1L1D1]);
    refalrts::copy_evar(vm, context[31], context[32], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::copy_evar(vm, context[34], context[35], context[23], context[24]);
    refalrts::alloc_close_bracket(vm, context[36]);
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::copy_evar(vm, context[40], context[41], context[25], context[26]);
    refalrts::alloc_close_bracket(vm, context[42]);
    refalrts::alloc_close_call(vm, context[43]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::push_stack( vm, context[43] );
    refalrts::push_stack( vm, context[29] );
    refalrts::link_brackets( context[39], context[42] );
    refalrts::link_brackets( context[37], context[38] );
    refalrts::link_brackets( context[33], context[36] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[0], context[14] );
    res = refalrts::splice_elem( res, context[43] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[29], context[42] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@10/4 t.SrcPos0/5 (/9 e.Name/15 )/10 (/13 e.ContextVars$b/17 )/14 >/1
    context[15] = context[7];
    context[16] = context[8];
    context[17] = context[11];
    context[18] = context[12];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Name as range 15
    // closed e.ContextVars$b as range 17
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.Name: 15
    //DEBUG: e.ContextVars$b: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@10/4 t.SrcPos0/5 (/9 e.Name/15 )/10 (/13 e.ContextVars$b/17 )/14 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@10/4 t.SrcPos0/5 (/9 e.Name/7 )/10 (/13 e.ContextVars$b/11 )/14 e.items/2 >/1
  // closed e.Name as range 7
  // closed e.ContextVars$b as range 11
  // closed e.items as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.Name: 7
  //DEBUG: e.ContextVars$b: 11
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </15 & Map@0/16 Tile{ HalfReuse: [*]/0 Reuse: & CheckPatternPairs$1\1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.Name/7 AsIs: )/10 AsIs: (/13 } )/17 (/18 Tile{ AsIs: e.ContextVars$b/11 } )/19 Tile{ HalfReuse: {*}/14 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1L1Z0]);
  refalrts::reinit_unwrapped_closure(context[14], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[13], context[17] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[14];
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[0], context[13] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  refalrts::wrap_closure( context[14] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z10("Map@10", COOKIE1_, COOKIE2_, func_gen_Map_Z10);


static refalrts::FnResult func_gen_DoMapAccum_Z20(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 106 elems
  refalrts::Iter context[106];
  refalrts::zeros( context, 106 );
  // </0 & DoMapAccum@20/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@20/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 t.new7/27 (/31 e.new8/29 )/32 e.new9/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  context[28] = refalrts::tvar_left( context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.new8 as range 29
  // closed e.new9 as range 2
  do {
    // </0 & DoMapAccum@20/4 t.new10/5 (/9 e.new14/33 )/10 (/13 e.new15/35 )/14 (/17 e.new16/37 )/18 (/21 e.new17/39 )/22 (/25 e.new18/41 )/26 t.new11/27 (/31 e.new19/43 )/32 t.new12/47 e.new13/45 >/1
    context[33] = context[7];
    context[34] = context[8];
    context[35] = context[11];
    context[36] = context[12];
    context[37] = context[15];
    context[38] = context[16];
    context[39] = context[19];
    context[40] = context[20];
    context[41] = context[23];
    context[42] = context[24];
    context[43] = context[29];
    context[44] = context[30];
    context[45] = context[2];
    context[46] = context[3];
    // closed e.new14 as range 33
    // closed e.new15 as range 35
    // closed e.new16 as range 37
    // closed e.new17 as range 39
    // closed e.new18 as range 41
    // closed e.new19 as range 43
    context[48] = refalrts::tvar_left( context[47], context[45], context[46] );
    if( ! context[48] )
      continue;
    // closed e.new13 as range 45
    do {
      // </0 & DoMapAccum@20/4 t.SrcPos0/5 (/9 e.FuncName0/49 )/10 (/13 e.ContextVars$a/51 )/14 (/17 e.ContextAllAssignsOrConds/53 )/18 (/21 e.Prefix$a/55 )/22 (/25 e.Call/57 )/26 s.Num/27 (/31 e.Scanned/59 )/32 (/47 (/67 e.1/65 )/68 e.4/63 (/75 e.5/73 )/76 (/71 e.3/69 )/72 )/48 e.Tail/61 >/1
      context[49] = context[33];
      context[50] = context[34];
      context[51] = context[35];
      context[52] = context[36];
      context[53] = context[37];
      context[54] = context[38];
      context[55] = context[39];
      context[56] = context[40];
      context[57] = context[41];
      context[58] = context[42];
      context[59] = context[43];
      context[60] = context[44];
      context[61] = context[45];
      context[62] = context[46];
      context[63] = 0;
      context[64] = 0;
      if( ! refalrts::brackets_term( context[63], context[64], context[47] ) )
        continue;
      if( ! refalrts::svar_term( context[27], context[27] ) )
        continue;
      context[65] = 0;
      context[66] = 0;
      context[67] = refalrts::brackets_left( context[65], context[66], context[63], context[64] );
      if( ! context[67] )
        continue;
      refalrts::bracket_pointers(context[67], context[68]);
      context[69] = 0;
      context[70] = 0;
      context[71] = refalrts::brackets_right( context[69], context[70], context[63], context[64] );
      if( ! context[71] )
        continue;
      refalrts::bracket_pointers(context[71], context[72]);
      context[73] = 0;
      context[74] = 0;
      context[75] = refalrts::brackets_right( context[73], context[74], context[63], context[64] );
      if( ! context[75] )
        continue;
      refalrts::bracket_pointers(context[75], context[76]);
      // closed e.FuncName0 as range 49
      // closed e.ContextVars$a as range 51
      // closed e.ContextAllAssignsOrConds as range 53
      // closed e.Prefix$a as range 55
      // closed e.Call as range 57
      // closed e.Scanned as range 59
      // closed e.1 as range 65
      // closed e.4 as range 63
      // closed e.5 as range 73
      // closed e.3 as range 69
      // closed e.Tail as range 61
      //DEBUG: t.SrcPos0: 5
      //DEBUG: s.Num: 27
      //DEBUG: e.FuncName0: 49
      //DEBUG: e.ContextVars$a: 51
      //DEBUG: e.ContextAllAssignsOrConds: 53
      //DEBUG: e.Prefix$a: 55
      //DEBUG: e.Call: 57
      //DEBUG: e.Scanned: 59
      //DEBUG: e.1: 65
      //DEBUG: e.4: 63
      //DEBUG: e.5: 73
      //DEBUG: e.3: 69
      //DEBUG: e.Tail: 61

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@20/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/49 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars$a/51 AsIs: )/14 AsIs: (/17 AsIs: e.ContextAllAssignsOrConds/53 AsIs: )/18 AsIs: (/21 AsIs: e.Prefix$a/55 AsIs: )/22 AsIs: (/25 AsIs: e.Call/57 AsIs: )/26 } Tile{ AsIs: (/31 AsIs: e.Scanned/59 AsIs: )/32 AsIs: (/47 } Tile{ AsIs: e.Tail/61 } )/77 </78 & CheckSentences\1=1@2/79 Tile{ AsIs: s.Num/27 } t.SrcPos0/5/80 (/82 e.FuncName0/49/83 )/85 Tile{ AsIs: (/67 AsIs: e.1/65 AsIs: )/68 } (/86 Tile{ AsIs: e.4/63 } )/87 Tile{ AsIs: (/75 AsIs: e.5/73 AsIs: )/76 AsIs: (/71 AsIs: e.3/69 AsIs: )/72 HalfReuse: (/48 } e.ContextVars$a/51/88 )/90 (/91 e.ContextAllAssignsOrConds/53/92 )/94 e.Prefix$a/55/95 '\\'/97 e.Call/57/98 '$'/100 </101 & Symb/102 s.Num/27/103 >/104 >/105 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[77]);
      refalrts::alloc_open_call(vm, context[78]);
      refalrts::alloc_name(vm, context[79], functions[efunc_gen_CheckSentences_L1A1Z2]);
      refalrts::copy_evar(vm, context[80], context[81], context[5], context[6]);
      refalrts::alloc_open_bracket(vm, context[82]);
      refalrts::copy_evar(vm, context[83], context[84], context[49], context[50]);
      refalrts::alloc_close_bracket(vm, context[85]);
      refalrts::alloc_open_bracket(vm, context[86]);
      refalrts::alloc_close_bracket(vm, context[87]);
      refalrts::copy_evar(vm, context[88], context[89], context[51], context[52]);
      refalrts::alloc_close_bracket(vm, context[90]);
      refalrts::alloc_open_bracket(vm, context[91]);
      refalrts::copy_evar(vm, context[92], context[93], context[53], context[54]);
      refalrts::alloc_close_bracket(vm, context[94]);
      refalrts::copy_evar(vm, context[95], context[96], context[55], context[56]);
      refalrts::alloc_char(vm, context[97], '\\');
      refalrts::copy_evar(vm, context[98], context[99], context[57], context[58]);
      refalrts::alloc_char(vm, context[100], '$');
      refalrts::alloc_open_call(vm, context[101]);
      refalrts::alloc_name(vm, context[102], functions[efunc_Symb]);
      refalrts::copy_stvar(vm, context[103], context[27]);
      refalrts::alloc_close_call(vm, context[104]);
      refalrts::alloc_close_call(vm, context[105]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z20]);
      refalrts::reinit_open_bracket(context[48]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[105] );
      refalrts::push_stack( vm, context[78] );
      refalrts::push_stack( vm, context[104] );
      refalrts::push_stack( vm, context[101] );
      refalrts::link_brackets( context[91], context[94] );
      refalrts::link_brackets( context[48], context[90] );
      refalrts::link_brackets( context[71], context[72] );
      refalrts::link_brackets( context[75], context[76] );
      refalrts::link_brackets( context[86], context[87] );
      refalrts::link_brackets( context[67], context[68] );
      refalrts::link_brackets( context[82], context[85] );
      refalrts::link_brackets( context[47], context[77] );
      refalrts::link_brackets( context[31], context[32] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[90], context[105] );
      res = refalrts::splice_evar( res, context[88], context[89] );
      res = refalrts::splice_evar( res, context[75], context[48] );
      res = refalrts::splice_elem( res, context[87] );
      res = refalrts::splice_evar( res, context[63], context[64] );
      res = refalrts::splice_elem( res, context[86] );
      res = refalrts::splice_evar( res, context[67], context[68] );
      res = refalrts::splice_evar( res, context[80], context[85] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[77], context[79] );
      res = refalrts::splice_evar( res, context[61], context[62] );
      res = refalrts::splice_evar( res, context[31], context[47] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@20/4 t.SrcPos0/5 (/9 e.FuncName0/49 )/10 (/13 e.ContextVars$a/51 )/14 (/17 e.ContextAllAssignsOrConds/53 )/18 (/21 e.Prefix$a/55 )/22 (/25 e.Call/57 )/26 t.Acc/27 (/31 e.Scanned/59 )/32 t.Next/47 e.Tail/61 >/1
    context[49] = context[33];
    context[50] = context[34];
    context[51] = context[35];
    context[52] = context[36];
    context[53] = context[37];
    context[54] = context[38];
    context[55] = context[39];
    context[56] = context[40];
    context[57] = context[41];
    context[58] = context[42];
    context[59] = context[43];
    context[60] = context[44];
    context[61] = context[45];
    context[62] = context[46];
    // closed e.FuncName0 as range 49
    // closed e.ContextVars$a as range 51
    // closed e.ContextAllAssignsOrConds as range 53
    // closed e.Prefix$a as range 55
    // closed e.Call as range 57
    // closed e.Scanned as range 59
    // closed e.Tail as range 61
    //DEBUG: t.SrcPos0: 5
    //DEBUG: t.Acc: 27
    //DEBUG: t.Next: 47
    //DEBUG: e.FuncName0: 49
    //DEBUG: e.ContextVars$a: 51
    //DEBUG: e.ContextAllAssignsOrConds: 53
    //DEBUG: e.Prefix$a: 55
    //DEBUG: e.Call: 57
    //DEBUG: e.Scanned: 59
    //DEBUG: e.Tail: 61

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@20/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/49 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars$a/51 AsIs: )/14 AsIs: (/17 AsIs: e.ContextAllAssignsOrConds/53 AsIs: )/18 AsIs: (/21 AsIs: e.Prefix$a/55 AsIs: )/22 AsIs: (/25 AsIs: e.Call/57 AsIs: )/26 } Tile{ AsIs: (/31 AsIs: e.Scanned/59 AsIs: )/32 } (/63 Tile{ AsIs: e.Tail/61 } )/64 </65 & CheckSentences\1*1/66 t.SrcPos0/5/67 (/69 e.FuncName0/49/70 )/72 (/73 e.ContextVars$a/51/74 e.ContextAllAssignsOrConds/53/76 )/78 (/79 e.Prefix$a/55/80 '\\'/82 e.Call/57/83 )/85 Tile{ AsIs: t.Acc/27 } Tile{ AsIs: t.Next/47 } >/86 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[63]);
    refalrts::alloc_close_bracket(vm, context[64]);
    refalrts::alloc_open_call(vm, context[65]);
    refalrts::alloc_name(vm, context[66], functions[efunc_gen_CheckSentences_L1D1]);
    refalrts::copy_evar(vm, context[67], context[68], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[69]);
    refalrts::copy_evar(vm, context[70], context[71], context[49], context[50]);
    refalrts::alloc_close_bracket(vm, context[72]);
    refalrts::alloc_open_bracket(vm, context[73]);
    refalrts::copy_evar(vm, context[74], context[75], context[51], context[52]);
    refalrts::copy_evar(vm, context[76], context[77], context[53], context[54]);
    refalrts::alloc_close_bracket(vm, context[78]);
    refalrts::alloc_open_bracket(vm, context[79]);
    refalrts::copy_evar(vm, context[80], context[81], context[55], context[56]);
    refalrts::alloc_char(vm, context[82], '\\');
    refalrts::copy_evar(vm, context[83], context[84], context[57], context[58]);
    refalrts::alloc_close_bracket(vm, context[85]);
    refalrts::alloc_close_call(vm, context[86]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z20]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[86] );
    refalrts::push_stack( vm, context[65] );
    refalrts::link_brackets( context[79], context[85] );
    refalrts::link_brackets( context[73], context[78] );
    refalrts::link_brackets( context[69], context[72] );
    refalrts::link_brackets( context[63], context[64] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[86] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[64], context[85] );
    res = refalrts::splice_evar( res, context[61], context[62] );
    res = refalrts::splice_elem( res, context[63] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@20/4 t.SrcPos0/5 (/9 e.FuncName0/33 )/10 (/13 e.ContextVars$a/35 )/14 (/17 e.ContextAllAssignsOrConds/37 )/18 (/21 e.Prefix$a/39 )/22 (/25 e.Call/41 )/26 t.Acc/27 (/31 e.Scanned/43 )/32 >/1
    context[33] = context[7];
    context[34] = context[8];
    context[35] = context[11];
    context[36] = context[12];
    context[37] = context[15];
    context[38] = context[16];
    context[39] = context[19];
    context[40] = context[20];
    context[41] = context[23];
    context[42] = context[24];
    context[43] = context[29];
    context[44] = context[30];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.FuncName0 as range 33
    // closed e.ContextVars$a as range 35
    // closed e.ContextAllAssignsOrConds as range 37
    // closed e.Prefix$a as range 39
    // closed e.Call as range 41
    // closed e.Scanned as range 43
    //DEBUG: t.SrcPos0: 5
    //DEBUG: t.Acc: 27
    //DEBUG: e.FuncName0: 33
    //DEBUG: e.ContextVars$a: 35
    //DEBUG: e.ContextAllAssignsOrConds: 37
    //DEBUG: e.Prefix$a: 39
    //DEBUG: e.Call: 41
    //DEBUG: e.Scanned: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@20/4 t.SrcPos0/5 (/9 e.FuncName0/33 )/10 (/13 e.ContextVars$a/35 )/14 (/17 e.ContextAllAssignsOrConds/37 )/18 (/21 e.Prefix$a/39 )/22 (/25 e.Call/41 )/26 {REMOVED TILE} (/31 {REMOVED TILE} )/32 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/27 } Tile{ AsIs: e.Scanned/43 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@20/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.ContextVars$a/11 )/14 (/17 e.ContextAllAssignsOrConds/15 )/18 (/21 e.Prefix$a/19 )/22 (/25 e.Call/23 )/26 t.acc/27 (/31 e.scanned/29 )/32 e.items/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.ContextVars$a as range 11
  // closed e.ContextAllAssignsOrConds as range 15
  // closed e.Prefix$a as range 19
  // closed e.Call as range 23
  // closed e.scanned as range 29
  // closed e.items as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: t.acc: 27
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.ContextVars$a: 11
  //DEBUG: e.ContextAllAssignsOrConds: 15
  //DEBUG: e.Prefix$a: 19
  //DEBUG: e.Call: 23
  //DEBUG: e.scanned: 29
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </17 } Tile{ HalfReuse: & DoMapAccum@0/25 } Tile{ HalfReuse: [*]/0 Reuse: & CheckSentences\1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.ContextVars$a/11 } Tile{ AsIs: e.ContextAllAssignsOrConds/15 } Tile{ AsIs: )/18 AsIs: (/21 AsIs: e.Prefix$a/19 HalfReuse: '\\'/22 } Tile{ AsIs: e.Call/23 } Tile{ AsIs: )/14 } Tile{ HalfReuse: {*}/26 AsIs: t.acc/27 AsIs: (/31 AsIs: e.scanned/29 AsIs: )/32 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[17]);
  refalrts::reinit_name(context[25], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_L1Z0]);
  refalrts::reinit_char(context[22], '\\');
  refalrts::reinit_unwrapped_closure(context[26], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[21], context[14] );
  refalrts::link_brackets( context[13], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[26];
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[18], context[22] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[0], context[13] );
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_elem( res, context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[26] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z20("DoMapAccum@20", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z20);


static refalrts::FnResult func_gen_DoMapAccum_Z21(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 106 elems
  refalrts::Iter context[106];
  refalrts::zeros( context, 106 );
  // </0 & DoMapAccum@21/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@21/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 t.new7/27 (/31 e.new8/29 )/32 e.new9/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  context[28] = refalrts::tvar_left( context[27], context[2], context[3] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.new8 as range 29
  // closed e.new9 as range 2
  do {
    // </0 & DoMapAccum@21/4 t.new10/5 (/9 e.new14/33 )/10 (/13 e.new15/35 )/14 (/17 e.new16/37 )/18 (/21 e.new17/39 )/22 (/25 e.new18/41 )/26 t.new11/27 (/31 e.new19/43 )/32 t.new12/47 e.new13/45 >/1
    context[33] = context[7];
    context[34] = context[8];
    context[35] = context[11];
    context[36] = context[12];
    context[37] = context[15];
    context[38] = context[16];
    context[39] = context[19];
    context[40] = context[20];
    context[41] = context[23];
    context[42] = context[24];
    context[43] = context[29];
    context[44] = context[30];
    context[45] = context[2];
    context[46] = context[3];
    // closed e.new14 as range 33
    // closed e.new15 as range 35
    // closed e.new16 as range 37
    // closed e.new17 as range 39
    // closed e.new18 as range 41
    // closed e.new19 as range 43
    context[48] = refalrts::tvar_left( context[47], context[45], context[46] );
    if( ! context[48] )
      continue;
    // closed e.new13 as range 45
    do {
      // </0 & DoMapAccum@21/4 t.SrcPos0/5 (/9 e.FuncName0/49 )/10 (/13 e.ContextVars$a/51 )/14 (/17 e.ContextAllAssignsOrConds/53 )/18 (/21 e.Prefix$a/55 )/22 (/25 e.Call/57 )/26 s.Num/27 (/31 e.Scanned/59 )/32 (/47 (/67 e.1/65 )/68 e.4/63 (/75 e.5/73 )/76 (/71 e.3/69 )/72 )/48 e.Tail/61 >/1
      context[49] = context[33];
      context[50] = context[34];
      context[51] = context[35];
      context[52] = context[36];
      context[53] = context[37];
      context[54] = context[38];
      context[55] = context[39];
      context[56] = context[40];
      context[57] = context[41];
      context[58] = context[42];
      context[59] = context[43];
      context[60] = context[44];
      context[61] = context[45];
      context[62] = context[46];
      context[63] = 0;
      context[64] = 0;
      if( ! refalrts::brackets_term( context[63], context[64], context[47] ) )
        continue;
      if( ! refalrts::svar_term( context[27], context[27] ) )
        continue;
      context[65] = 0;
      context[66] = 0;
      context[67] = refalrts::brackets_left( context[65], context[66], context[63], context[64] );
      if( ! context[67] )
        continue;
      refalrts::bracket_pointers(context[67], context[68]);
      context[69] = 0;
      context[70] = 0;
      context[71] = refalrts::brackets_right( context[69], context[70], context[63], context[64] );
      if( ! context[71] )
        continue;
      refalrts::bracket_pointers(context[71], context[72]);
      context[73] = 0;
      context[74] = 0;
      context[75] = refalrts::brackets_right( context[73], context[74], context[63], context[64] );
      if( ! context[75] )
        continue;
      refalrts::bracket_pointers(context[75], context[76]);
      // closed e.FuncName0 as range 49
      // closed e.ContextVars$a as range 51
      // closed e.ContextAllAssignsOrConds as range 53
      // closed e.Prefix$a as range 55
      // closed e.Call as range 57
      // closed e.Scanned as range 59
      // closed e.1 as range 65
      // closed e.4 as range 63
      // closed e.5 as range 73
      // closed e.3 as range 69
      // closed e.Tail as range 61
      //DEBUG: t.SrcPos0: 5
      //DEBUG: s.Num: 27
      //DEBUG: e.FuncName0: 49
      //DEBUG: e.ContextVars$a: 51
      //DEBUG: e.ContextAllAssignsOrConds: 53
      //DEBUG: e.Prefix$a: 55
      //DEBUG: e.Call: 57
      //DEBUG: e.Scanned: 59
      //DEBUG: e.1: 65
      //DEBUG: e.4: 63
      //DEBUG: e.5: 73
      //DEBUG: e.3: 69
      //DEBUG: e.Tail: 61

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@21/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/49 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars$a/51 AsIs: )/14 AsIs: (/17 AsIs: e.ContextAllAssignsOrConds/53 AsIs: )/18 AsIs: (/21 AsIs: e.Prefix$a/55 AsIs: )/22 AsIs: (/25 AsIs: e.Call/57 AsIs: )/26 } Tile{ AsIs: (/31 AsIs: e.Scanned/59 AsIs: )/32 AsIs: (/47 } Tile{ AsIs: e.Tail/61 } )/77 </78 & CheckSentences\1=1@2/79 Tile{ AsIs: s.Num/27 } t.SrcPos0/5/80 (/82 e.FuncName0/49/83 )/85 Tile{ AsIs: (/67 AsIs: e.1/65 AsIs: )/68 } (/86 Tile{ AsIs: e.4/63 } )/87 Tile{ AsIs: (/75 AsIs: e.5/73 AsIs: )/76 AsIs: (/71 AsIs: e.3/69 AsIs: )/72 HalfReuse: (/48 } e.ContextVars$a/51/88 )/90 (/91 e.ContextAllAssignsOrConds/53/92 )/94 e.Prefix$a/55/95 ':'/97 e.Call/57/98 '$'/100 </101 & Symb/102 s.Num/27/103 >/104 >/105 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[77]);
      refalrts::alloc_open_call(vm, context[78]);
      refalrts::alloc_name(vm, context[79], functions[efunc_gen_CheckSentences_L1A1Z2]);
      refalrts::copy_evar(vm, context[80], context[81], context[5], context[6]);
      refalrts::alloc_open_bracket(vm, context[82]);
      refalrts::copy_evar(vm, context[83], context[84], context[49], context[50]);
      refalrts::alloc_close_bracket(vm, context[85]);
      refalrts::alloc_open_bracket(vm, context[86]);
      refalrts::alloc_close_bracket(vm, context[87]);
      refalrts::copy_evar(vm, context[88], context[89], context[51], context[52]);
      refalrts::alloc_close_bracket(vm, context[90]);
      refalrts::alloc_open_bracket(vm, context[91]);
      refalrts::copy_evar(vm, context[92], context[93], context[53], context[54]);
      refalrts::alloc_close_bracket(vm, context[94]);
      refalrts::copy_evar(vm, context[95], context[96], context[55], context[56]);
      refalrts::alloc_char(vm, context[97], ':');
      refalrts::copy_evar(vm, context[98], context[99], context[57], context[58]);
      refalrts::alloc_char(vm, context[100], '$');
      refalrts::alloc_open_call(vm, context[101]);
      refalrts::alloc_name(vm, context[102], functions[efunc_Symb]);
      refalrts::copy_stvar(vm, context[103], context[27]);
      refalrts::alloc_close_call(vm, context[104]);
      refalrts::alloc_close_call(vm, context[105]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z21]);
      refalrts::reinit_open_bracket(context[48]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[105] );
      refalrts::push_stack( vm, context[78] );
      refalrts::push_stack( vm, context[104] );
      refalrts::push_stack( vm, context[101] );
      refalrts::link_brackets( context[91], context[94] );
      refalrts::link_brackets( context[48], context[90] );
      refalrts::link_brackets( context[71], context[72] );
      refalrts::link_brackets( context[75], context[76] );
      refalrts::link_brackets( context[86], context[87] );
      refalrts::link_brackets( context[67], context[68] );
      refalrts::link_brackets( context[82], context[85] );
      refalrts::link_brackets( context[47], context[77] );
      refalrts::link_brackets( context[31], context[32] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[90], context[105] );
      res = refalrts::splice_evar( res, context[88], context[89] );
      res = refalrts::splice_evar( res, context[75], context[48] );
      res = refalrts::splice_elem( res, context[87] );
      res = refalrts::splice_evar( res, context[63], context[64] );
      res = refalrts::splice_elem( res, context[86] );
      res = refalrts::splice_evar( res, context[67], context[68] );
      res = refalrts::splice_evar( res, context[80], context[85] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_evar( res, context[77], context[79] );
      res = refalrts::splice_evar( res, context[61], context[62] );
      res = refalrts::splice_evar( res, context[31], context[47] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@21/4 t.SrcPos0/5 (/9 e.FuncName0/49 )/10 (/13 e.ContextVars$a/51 )/14 (/17 e.ContextAllAssignsOrConds/53 )/18 (/21 e.Prefix$a/55 )/22 (/25 e.Call/57 )/26 t.Acc/27 (/31 e.Scanned/59 )/32 t.Next/47 e.Tail/61 >/1
    context[49] = context[33];
    context[50] = context[34];
    context[51] = context[35];
    context[52] = context[36];
    context[53] = context[37];
    context[54] = context[38];
    context[55] = context[39];
    context[56] = context[40];
    context[57] = context[41];
    context[58] = context[42];
    context[59] = context[43];
    context[60] = context[44];
    context[61] = context[45];
    context[62] = context[46];
    // closed e.FuncName0 as range 49
    // closed e.ContextVars$a as range 51
    // closed e.ContextAllAssignsOrConds as range 53
    // closed e.Prefix$a as range 55
    // closed e.Call as range 57
    // closed e.Scanned as range 59
    // closed e.Tail as range 61
    //DEBUG: t.SrcPos0: 5
    //DEBUG: t.Acc: 27
    //DEBUG: t.Next: 47
    //DEBUG: e.FuncName0: 49
    //DEBUG: e.ContextVars$a: 51
    //DEBUG: e.ContextAllAssignsOrConds: 53
    //DEBUG: e.Prefix$a: 55
    //DEBUG: e.Call: 57
    //DEBUG: e.Scanned: 59
    //DEBUG: e.Tail: 61

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@21/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/49 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars$a/51 AsIs: )/14 AsIs: (/17 AsIs: e.ContextAllAssignsOrConds/53 AsIs: )/18 AsIs: (/21 AsIs: e.Prefix$a/55 AsIs: )/22 AsIs: (/25 AsIs: e.Call/57 AsIs: )/26 } Tile{ AsIs: (/31 AsIs: e.Scanned/59 AsIs: )/32 } (/63 Tile{ AsIs: e.Tail/61 } )/64 </65 & CheckSentences\1*1/66 t.SrcPos0/5/67 (/69 e.FuncName0/49/70 )/72 (/73 e.ContextVars$a/51/74 e.ContextAllAssignsOrConds/53/76 )/78 (/79 e.Prefix$a/55/80 ':'/82 e.Call/57/83 )/85 Tile{ AsIs: t.Acc/27 } Tile{ AsIs: t.Next/47 } >/86 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[63]);
    refalrts::alloc_close_bracket(vm, context[64]);
    refalrts::alloc_open_call(vm, context[65]);
    refalrts::alloc_name(vm, context[66], functions[efunc_gen_CheckSentences_L1D1]);
    refalrts::copy_evar(vm, context[67], context[68], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[69]);
    refalrts::copy_evar(vm, context[70], context[71], context[49], context[50]);
    refalrts::alloc_close_bracket(vm, context[72]);
    refalrts::alloc_open_bracket(vm, context[73]);
    refalrts::copy_evar(vm, context[74], context[75], context[51], context[52]);
    refalrts::copy_evar(vm, context[76], context[77], context[53], context[54]);
    refalrts::alloc_close_bracket(vm, context[78]);
    refalrts::alloc_open_bracket(vm, context[79]);
    refalrts::copy_evar(vm, context[80], context[81], context[55], context[56]);
    refalrts::alloc_char(vm, context[82], ':');
    refalrts::copy_evar(vm, context[83], context[84], context[57], context[58]);
    refalrts::alloc_close_bracket(vm, context[85]);
    refalrts::alloc_close_call(vm, context[86]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z21]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[86] );
    refalrts::push_stack( vm, context[65] );
    refalrts::link_brackets( context[79], context[85] );
    refalrts::link_brackets( context[73], context[78] );
    refalrts::link_brackets( context[69], context[72] );
    refalrts::link_brackets( context[63], context[64] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[86] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[64], context[85] );
    res = refalrts::splice_evar( res, context[61], context[62] );
    res = refalrts::splice_elem( res, context[63] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@21/4 t.SrcPos0/5 (/9 e.FuncName0/33 )/10 (/13 e.ContextVars$a/35 )/14 (/17 e.ContextAllAssignsOrConds/37 )/18 (/21 e.Prefix$a/39 )/22 (/25 e.Call/41 )/26 t.Acc/27 (/31 e.Scanned/43 )/32 >/1
    context[33] = context[7];
    context[34] = context[8];
    context[35] = context[11];
    context[36] = context[12];
    context[37] = context[15];
    context[38] = context[16];
    context[39] = context[19];
    context[40] = context[20];
    context[41] = context[23];
    context[42] = context[24];
    context[43] = context[29];
    context[44] = context[30];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.FuncName0 as range 33
    // closed e.ContextVars$a as range 35
    // closed e.ContextAllAssignsOrConds as range 37
    // closed e.Prefix$a as range 39
    // closed e.Call as range 41
    // closed e.Scanned as range 43
    //DEBUG: t.SrcPos0: 5
    //DEBUG: t.Acc: 27
    //DEBUG: e.FuncName0: 33
    //DEBUG: e.ContextVars$a: 35
    //DEBUG: e.ContextAllAssignsOrConds: 37
    //DEBUG: e.Prefix$a: 39
    //DEBUG: e.Call: 41
    //DEBUG: e.Scanned: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@21/4 t.SrcPos0/5 (/9 e.FuncName0/33 )/10 (/13 e.ContextVars$a/35 )/14 (/17 e.ContextAllAssignsOrConds/37 )/18 (/21 e.Prefix$a/39 )/22 (/25 e.Call/41 )/26 {REMOVED TILE} (/31 {REMOVED TILE} )/32 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/27 } Tile{ AsIs: e.Scanned/43 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@21/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.ContextVars$a/11 )/14 (/17 e.ContextAllAssignsOrConds/15 )/18 (/21 e.Prefix$a/19 )/22 (/25 e.Call/23 )/26 t.acc/27 (/31 e.scanned/29 )/32 e.items/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.ContextVars$a as range 11
  // closed e.ContextAllAssignsOrConds as range 15
  // closed e.Prefix$a as range 19
  // closed e.Call as range 23
  // closed e.scanned as range 29
  // closed e.items as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: t.acc: 27
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.ContextVars$a: 11
  //DEBUG: e.ContextAllAssignsOrConds: 15
  //DEBUG: e.Prefix$a: 19
  //DEBUG: e.Call: 23
  //DEBUG: e.scanned: 29
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </17 } Tile{ HalfReuse: & DoMapAccum@0/25 } Tile{ HalfReuse: [*]/0 Reuse: & CheckSentences\1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.ContextVars$a/11 } Tile{ AsIs: e.ContextAllAssignsOrConds/15 } Tile{ AsIs: )/18 AsIs: (/21 AsIs: e.Prefix$a/19 HalfReuse: ':'/22 } Tile{ AsIs: e.Call/23 } Tile{ AsIs: )/14 } Tile{ HalfReuse: {*}/26 AsIs: t.acc/27 AsIs: (/31 AsIs: e.scanned/29 AsIs: )/32 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[17]);
  refalrts::reinit_name(context[25], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_L1Z0]);
  refalrts::reinit_char(context[22], ':');
  refalrts::reinit_unwrapped_closure(context[26], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[21], context[14] );
  refalrts::link_brackets( context[13], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[26];
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[18], context[22] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[0], context[13] );
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_elem( res, context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[26] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z21("DoMapAccum@21", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z21);


static refalrts::FnResult func_gen_CheckSentences_A3Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 86 elems
  refalrts::Iter context[86];
  refalrts::zeros( context, 86 );
  // </0 & CheckSentences=3@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences=3@6/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 (/33 e.new8/31 )/34 e.new9/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  // closed e.new8 as range 31
  // closed e.new9 as range 2
  do {
    // </0 & CheckSentences=3@6/4 t.SrcPos0/5 (/9 e.FuncName0/35 )/10 (/13 e.Prefix$a0/37 )/14 (/17 e.Call/39 )/18 (/21 e.ContextVars0/41 )/22 (/25 e.Pattern0/43 )/26 (/29 e.ContextAllAssignsOrConds/45 )/30 (/33 e.1/47 )/34 e.NumberedSentencesPairs$a/49 >/1
    context[35] = context[7];
    context[36] = context[8];
    context[37] = context[11];
    context[38] = context[12];
    context[39] = context[15];
    context[40] = context[16];
    context[41] = context[19];
    context[42] = context[20];
    context[43] = context[23];
    context[44] = context[24];
    context[45] = context[27];
    context[46] = context[28];
    context[47] = context[31];
    context[48] = context[32];
    context[49] = context[2];
    context[50] = context[3];
    // closed e.FuncName0 as range 35
    // closed e.Prefix$a0 as range 37
    // closed e.Call as range 39
    // closed e.ContextVars0 as range 41
    // closed e.Pattern0 as range 43
    // closed e.ContextAllAssignsOrConds as range 45
    // closed e.1 as range 47
    // closed e.NumberedSentencesPairs$a as range 49
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 35
    //DEBUG: e.Prefix$a0: 37
    //DEBUG: e.Call: 39
    //DEBUG: e.ContextVars0: 41
    //DEBUG: e.Pattern0: 43
    //DEBUG: e.ContextAllAssignsOrConds: 45
    //DEBUG: e.1: 47
    //DEBUG: e.NumberedSentencesPairs$a: 49

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1=1@3/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/35 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/37 AsIs: )/14 AsIs: (/17 AsIs: e.Call/39 AsIs: )/18 AsIs: (/21 } Tile{ AsIs: e.NumberedSentencesPairs$a/49 } )/51 </52 & Unique/53 </54 & ExtractVariables-Expr/55 Tile{ AsIs: e.ContextVars0/41 } e.Pattern0/43/56 e.ContextAllAssignsOrConds/45/58 >/60 >/61 >/62 </63 & DelAccumulator/64 </65 & DoMapAccum@22/66 t.SrcPos0/5/67 (/69 e.FuncName0/35/70 Tile{ AsIs: )/34 } (/72 e.ContextVars0/41/73 Tile{ AsIs: )/22 AsIs: (/25 AsIs: e.Pattern0/43 AsIs: )/26 AsIs: (/29 AsIs: e.ContextAllAssignsOrConds/45 AsIs: )/30 AsIs: (/33 } e.Prefix$a0/37/75 )/77 (/78 e.Call/39/79 )/81 1/82 (/83 )/84 Tile{ AsIs: e.1/47 } >/85 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[51]);
    refalrts::alloc_open_call(vm, context[52]);
    refalrts::alloc_name(vm, context[53], functions[efunc_Unique]);
    refalrts::alloc_open_call(vm, context[54]);
    refalrts::alloc_name(vm, context[55], functions[efunc_ExtractVariablesm_Expr]);
    refalrts::copy_evar(vm, context[56], context[57], context[43], context[44]);
    refalrts::copy_evar(vm, context[58], context[59], context[45], context[46]);
    refalrts::alloc_close_call(vm, context[60]);
    refalrts::alloc_close_call(vm, context[61]);
    refalrts::alloc_close_call(vm, context[62]);
    refalrts::alloc_open_call(vm, context[63]);
    refalrts::alloc_name(vm, context[64], functions[efunc_DelAccumulator]);
    refalrts::alloc_open_call(vm, context[65]);
    refalrts::alloc_name(vm, context[66], functions[efunc_gen_DoMapAccum_Z22]);
    refalrts::copy_evar(vm, context[67], context[68], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[69]);
    refalrts::copy_evar(vm, context[70], context[71], context[35], context[36]);
    refalrts::alloc_open_bracket(vm, context[72]);
    refalrts::copy_evar(vm, context[73], context[74], context[41], context[42]);
    refalrts::copy_evar(vm, context[75], context[76], context[37], context[38]);
    refalrts::alloc_close_bracket(vm, context[77]);
    refalrts::alloc_open_bracket(vm, context[78]);
    refalrts::copy_evar(vm, context[79], context[80], context[39], context[40]);
    refalrts::alloc_close_bracket(vm, context[81]);
    refalrts::alloc_number(vm, context[82], 1UL);
    refalrts::alloc_open_bracket(vm, context[83]);
    refalrts::alloc_close_bracket(vm, context[84]);
    refalrts::alloc_close_call(vm, context[85]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1A1Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[63] );
    refalrts::push_stack( vm, context[85] );
    refalrts::push_stack( vm, context[65] );
    refalrts::link_brackets( context[83], context[84] );
    refalrts::link_brackets( context[78], context[81] );
    refalrts::link_brackets( context[33], context[77] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[72], context[22] );
    refalrts::link_brackets( context[69], context[34] );
    refalrts::push_stack( vm, context[62] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[61] );
    refalrts::push_stack( vm, context[52] );
    refalrts::push_stack( vm, context[60] );
    refalrts::push_stack( vm, context[54] );
    refalrts::link_brackets( context[21], context[51] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[85] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_evar( res, context[77], context[84] );
    res = refalrts::splice_evar( res, context[75], context[76] );
    res = refalrts::splice_evar( res, context[22], context[33] );
    res = refalrts::splice_evar( res, context[73], context[74] );
    res = refalrts::splice_elem( res, context[72] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_evar( res, context[70], context[71] );
    res = refalrts::splice_evar( res, context[60], context[69] );
    res = refalrts::splice_evar( res, context[58], context[59] );
    res = refalrts::splice_evar( res, context[56], context[57] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[51], context[55] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences=3@6/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix$a0/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars0/19 )/22 (/25 e.Pattern0/23 )/26 (/29 e.ContextAllAssignsOrConds/27 )/30 (/33 e.1/31 )/34 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix$a0 as range 11
  // closed e.Call as range 15
  // closed e.ContextVars0 as range 19
  // closed e.Pattern0 as range 23
  // closed e.ContextAllAssignsOrConds as range 27
  // closed e.1 as range 31
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix$a0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars0: 19
  //DEBUG: e.Pattern0: 23
  //DEBUG: e.ContextAllAssignsOrConds: 27
  //DEBUG: e.1: 31
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} )/18 (/21 {REMOVED TILE} )/22 (/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=3@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/11 HalfReuse: '\\'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/26 AsIs: (/29 } Tile{ AsIs: e.ContextVars0/19 } Tile{ AsIs: e.Pattern0/23 } Tile{ AsIs: e.ContextAllAssignsOrConds/27 } Tile{ AsIs: )/30 AsIs: (/33 AsIs: e.1/31 AsIs: )/34 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A3Z0]);
  refalrts::reinit_char(context[14], '\\');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[13], context[26] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[30];
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[26], context[29] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_A3Z6("CheckSentences=3@6", COOKIE1_, COOKIE2_, func_gen_CheckSentences_A3Z6);


static refalrts::FnResult func_gen_CheckSentences_A3Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 86 elems
  refalrts::Iter context[86];
  refalrts::zeros( context, 86 );
  // </0 & CheckSentences=3@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences=3@7/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 (/33 e.new8/31 )/34 e.new9/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  // closed e.new8 as range 31
  // closed e.new9 as range 2
  do {
    // </0 & CheckSentences=3@7/4 t.SrcPos0/5 (/9 e.FuncName0/35 )/10 (/13 e.Prefix$a0/37 )/14 (/17 e.Call/39 )/18 (/21 e.ContextVars0/41 )/22 (/25 e.Pattern0/43 )/26 (/29 e.ContextAllAssignsOrConds/45 )/30 (/33 e.0/47 )/34 e.NumberedSentencesPairs$a/49 >/1
    context[35] = context[7];
    context[36] = context[8];
    context[37] = context[11];
    context[38] = context[12];
    context[39] = context[15];
    context[40] = context[16];
    context[41] = context[19];
    context[42] = context[20];
    context[43] = context[23];
    context[44] = context[24];
    context[45] = context[27];
    context[46] = context[28];
    context[47] = context[31];
    context[48] = context[32];
    context[49] = context[2];
    context[50] = context[3];
    // closed e.FuncName0 as range 35
    // closed e.Prefix$a0 as range 37
    // closed e.Call as range 39
    // closed e.ContextVars0 as range 41
    // closed e.Pattern0 as range 43
    // closed e.ContextAllAssignsOrConds as range 45
    // closed e.0 as range 47
    // closed e.NumberedSentencesPairs$a as range 49
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 35
    //DEBUG: e.Prefix$a0: 37
    //DEBUG: e.Call: 39
    //DEBUG: e.ContextVars0: 41
    //DEBUG: e.Pattern0: 43
    //DEBUG: e.ContextAllAssignsOrConds: 45
    //DEBUG: e.0: 47
    //DEBUG: e.NumberedSentencesPairs$a: 49

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1=1@2/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/35 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/37 AsIs: )/14 AsIs: (/17 AsIs: e.Call/39 AsIs: )/18 AsIs: (/21 } Tile{ AsIs: e.NumberedSentencesPairs$a/49 } )/51 </52 & Unique/53 </54 & ExtractVariables-Expr/55 Tile{ AsIs: e.ContextVars0/41 } e.Pattern0/43/56 e.ContextAllAssignsOrConds/45/58 >/60 >/61 >/62 </63 & DelAccumulator/64 </65 & DoMapAccum@23/66 t.SrcPos0/5/67 (/69 e.FuncName0/35/70 Tile{ AsIs: )/34 } (/72 e.ContextVars0/41/73 Tile{ AsIs: )/22 AsIs: (/25 AsIs: e.Pattern0/43 AsIs: )/26 AsIs: (/29 AsIs: e.ContextAllAssignsOrConds/45 AsIs: )/30 AsIs: (/33 } e.Prefix$a0/37/75 )/77 (/78 e.Call/39/79 )/81 1/82 (/83 )/84 Tile{ AsIs: e.0/47 } >/85 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[51]);
    refalrts::alloc_open_call(vm, context[52]);
    refalrts::alloc_name(vm, context[53], functions[efunc_Unique]);
    refalrts::alloc_open_call(vm, context[54]);
    refalrts::alloc_name(vm, context[55], functions[efunc_ExtractVariablesm_Expr]);
    refalrts::copy_evar(vm, context[56], context[57], context[43], context[44]);
    refalrts::copy_evar(vm, context[58], context[59], context[45], context[46]);
    refalrts::alloc_close_call(vm, context[60]);
    refalrts::alloc_close_call(vm, context[61]);
    refalrts::alloc_close_call(vm, context[62]);
    refalrts::alloc_open_call(vm, context[63]);
    refalrts::alloc_name(vm, context[64], functions[efunc_DelAccumulator]);
    refalrts::alloc_open_call(vm, context[65]);
    refalrts::alloc_name(vm, context[66], functions[efunc_gen_DoMapAccum_Z23]);
    refalrts::copy_evar(vm, context[67], context[68], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[69]);
    refalrts::copy_evar(vm, context[70], context[71], context[35], context[36]);
    refalrts::alloc_open_bracket(vm, context[72]);
    refalrts::copy_evar(vm, context[73], context[74], context[41], context[42]);
    refalrts::copy_evar(vm, context[75], context[76], context[37], context[38]);
    refalrts::alloc_close_bracket(vm, context[77]);
    refalrts::alloc_open_bracket(vm, context[78]);
    refalrts::copy_evar(vm, context[79], context[80], context[39], context[40]);
    refalrts::alloc_close_bracket(vm, context[81]);
    refalrts::alloc_number(vm, context[82], 1UL);
    refalrts::alloc_open_bracket(vm, context[83]);
    refalrts::alloc_close_bracket(vm, context[84]);
    refalrts::alloc_close_call(vm, context[85]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1A1Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[63] );
    refalrts::push_stack( vm, context[85] );
    refalrts::push_stack( vm, context[65] );
    refalrts::link_brackets( context[83], context[84] );
    refalrts::link_brackets( context[78], context[81] );
    refalrts::link_brackets( context[33], context[77] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[72], context[22] );
    refalrts::link_brackets( context[69], context[34] );
    refalrts::push_stack( vm, context[62] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[61] );
    refalrts::push_stack( vm, context[52] );
    refalrts::push_stack( vm, context[60] );
    refalrts::push_stack( vm, context[54] );
    refalrts::link_brackets( context[21], context[51] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[85] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_evar( res, context[77], context[84] );
    res = refalrts::splice_evar( res, context[75], context[76] );
    res = refalrts::splice_evar( res, context[22], context[33] );
    res = refalrts::splice_evar( res, context[73], context[74] );
    res = refalrts::splice_elem( res, context[72] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_evar( res, context[70], context[71] );
    res = refalrts::splice_evar( res, context[60], context[69] );
    res = refalrts::splice_evar( res, context[58], context[59] );
    res = refalrts::splice_evar( res, context[56], context[57] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[51], context[55] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences=3@7/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix$a0/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars0/19 )/22 (/25 e.Pattern0/23 )/26 (/29 e.ContextAllAssignsOrConds/27 )/30 (/33 e.0/31 )/34 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix$a0 as range 11
  // closed e.Call as range 15
  // closed e.ContextVars0 as range 19
  // closed e.Pattern0 as range 23
  // closed e.ContextAllAssignsOrConds as range 27
  // closed e.0 as range 31
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix$a0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars0: 19
  //DEBUG: e.Pattern0: 23
  //DEBUG: e.ContextAllAssignsOrConds: 27
  //DEBUG: e.0: 31
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} )/18 (/21 {REMOVED TILE} )/22 (/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences=3@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix$a0/11 HalfReuse: ':'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/26 AsIs: (/29 } Tile{ AsIs: e.ContextVars0/19 } Tile{ AsIs: e.Pattern0/23 } Tile{ AsIs: e.ContextAllAssignsOrConds/27 } Tile{ AsIs: )/30 AsIs: (/33 AsIs: e.0/31 AsIs: )/34 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_A3Z0]);
  refalrts::reinit_char(context[14], ':');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[13], context[26] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[30];
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[26], context[29] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_A3Z7("CheckSentences=3@7", COOKIE1_, COOKIE2_, func_gen_CheckSentences_A3Z7);


static refalrts::FnResult func_gen_CheckPatternPairs_S1A2Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & CheckPatternPairs$1=2@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckPatternPairs$1=2@2/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 e.new6/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 2
  do {
    // </0 & CheckPatternPairs$1=2@2/4 t.SrcPos0/5 (/9 e.FuncName0/23 )/10 (/13 e.Prefix0/25 )/14 (/17 e.Call/27 )/18 (/21 e.NumberedSentencesPairs$a/29 )/22 e.ContextVars$b/31 >/1
    context[23] = context[7];
    context[24] = context[8];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.FuncName0 as range 23
    // closed e.Prefix0 as range 25
    // closed e.Call as range 27
    // closed e.NumberedSentencesPairs$a as range 29
    // closed e.ContextVars$b as range 31
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 23
    //DEBUG: e.Prefix0: 25
    //DEBUG: e.Call: 27
    //DEBUG: e.NumberedSentencesPairs$a: 29
    //DEBUG: e.ContextVars$b: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@11/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/23 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/25 AsIs: )/14 AsIs: (/17 AsIs: e.Call/27 AsIs: )/18 AsIs: (/21 } Tile{ AsIs: e.ContextVars$b/31 } Tile{ AsIs: )/22 } Tile{ AsIs: e.NumberedSentencesPairs$a/29 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPatternPairs$1=2@2/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix0/11 )/14 (/17 e.Call/15 )/18 (/21 e.NumberedSentencesPairs$a/19 )/22 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix0 as range 11
  // closed e.Call as range 15
  // closed e.NumberedSentencesPairs$a as range 19
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.NumberedSentencesPairs$a: 19
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1=2@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/11 HalfReuse: ':'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/18 AsIs: (/21 AsIs: e.NumberedSentencesPairs$a/19 AsIs: )/22 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1A2Z0]);
  refalrts::reinit_char(context[14], ':');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[13], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[18];
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckPatternPairs_S1A2Z2("CheckPatternPairs$1=2@2", COOKIE1_, COOKIE2_, func_gen_CheckPatternPairs_S1A2Z2);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z18(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  // </0 & DoMapAccum$1=1@18/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@18/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 e.new8/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  // closed e.new8 as range 2
  do {
    // </0 & DoMapAccum$1=1@18/4 t.SrcPos0/5 (/9 e.FuncName0/31 )/10 (/13 e.ContextVars0/33 )/14 (/17 e.Prefix0/35 )/18 (/21 e.Call/37 )/22 (/25 e.Scanned0/39 )/26 (/29 e.Tail0/41 )/30 t.Acc$a/45 e.StepScanned/43 >/1
    context[31] = context[7];
    context[32] = context[8];
    context[33] = context[11];
    context[34] = context[12];
    context[35] = context[15];
    context[36] = context[16];
    context[37] = context[19];
    context[38] = context[20];
    context[39] = context[23];
    context[40] = context[24];
    context[41] = context[27];
    context[42] = context[28];
    context[43] = context[2];
    context[44] = context[3];
    // closed e.FuncName0 as range 31
    // closed e.ContextVars0 as range 33
    // closed e.Prefix0 as range 35
    // closed e.Call as range 37
    // closed e.Scanned0 as range 39
    // closed e.Tail0 as range 41
    context[46] = refalrts::tvar_left( context[45], context[43], context[44] );
    if( ! context[46] )
      continue;
    // closed e.StepScanned as range 43
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 31
    //DEBUG: e.ContextVars0: 33
    //DEBUG: e.Prefix0: 35
    //DEBUG: e.Call: 37
    //DEBUG: e.Scanned0: 39
    //DEBUG: e.Tail0: 41
    //DEBUG: t.Acc$a: 45
    //DEBUG: e.StepScanned: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/25 {REMOVED TILE} )/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@18/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/31 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars0/33 AsIs: )/14 AsIs: (/17 AsIs: e.Prefix0/35 AsIs: )/18 AsIs: (/21 AsIs: e.Call/37 AsIs: )/22 } Tile{ AsIs: t.Acc$a/45 } Tile{ AsIs: (/29 } Tile{ AsIs: e.Scanned0/39 } Tile{ AsIs: e.StepScanned/43 } Tile{ AsIs: )/30 } Tile{ AsIs: e.Tail0/41 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z18]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    refalrts::splice_to_freelist_open( vm, context[22], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@18/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.ContextVars0/11 )/14 (/17 e.Prefix0/15 )/18 (/21 e.Call/19 )/22 (/25 e.Scanned0/23 )/26 (/29 e.Tail0/27 )/30 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.ContextVars0 as range 11
  // closed e.Prefix0 as range 15
  // closed e.Call as range 19
  // closed e.Scanned0 as range 23
  // closed e.Tail0 as range 27
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.ContextVars0: 11
  //DEBUG: e.Prefix0: 15
  //DEBUG: e.Call: 19
  //DEBUG: e.Scanned0: 23
  //DEBUG: e.Tail0: 27
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </21 } & DoMapAccum$1=1@0/31 Tile{ HalfReuse: [*]/0 Reuse: & CheckSentences\1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars0/11 AsIs: )/14 AsIs: (/17 AsIs: e.Prefix0/15 HalfReuse: ':'/18 } Tile{ AsIs: e.Call/19 } )/32 Tile{ HalfReuse: {*}/22 AsIs: (/25 AsIs: e.Scanned0/23 AsIs: )/26 AsIs: (/29 AsIs: e.Tail0/27 AsIs: )/30 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[31], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::reinit_open_call(context[21]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_L1Z0]);
  refalrts::reinit_char(context[18], ':');
  refalrts::reinit_unwrapped_closure(context[22], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[17], context[32] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[22];
  res = refalrts::splice_elem( res, context[32] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[0], context[18] );
  res = refalrts::splice_elem( res, context[31] );
  res = refalrts::splice_elem( res, context[21] );
  refalrts::use( res );
  refalrts::wrap_closure( context[22] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z18("DoMapAccum$1=1@18", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z18);


static refalrts::FnResult func_gen_CheckPatternPairs_S1A2Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & CheckPatternPairs$1=2@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckPatternPairs$1=2@3/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 e.new6/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 2
  do {
    // </0 & CheckPatternPairs$1=2@3/4 t.SrcPos0/5 (/9 e.FuncName0/23 )/10 (/13 e.Prefix0/25 )/14 (/17 e.Call/27 )/18 (/21 e.NumberedSentencesPairs$a/29 )/22 e.ContextVars$b/31 >/1
    context[23] = context[7];
    context[24] = context[8];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.FuncName0 as range 23
    // closed e.Prefix0 as range 25
    // closed e.Call as range 27
    // closed e.NumberedSentencesPairs$a as range 29
    // closed e.ContextVars$b as range 31
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 23
    //DEBUG: e.Prefix0: 25
    //DEBUG: e.Call: 27
    //DEBUG: e.NumberedSentencesPairs$a: 29
    //DEBUG: e.ContextVars$b: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@12/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/23 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/25 AsIs: )/14 AsIs: (/17 AsIs: e.Call/27 AsIs: )/18 AsIs: (/21 } Tile{ AsIs: e.ContextVars$b/31 } Tile{ AsIs: )/22 } Tile{ AsIs: e.NumberedSentencesPairs$a/29 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[29], context[30] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPatternPairs$1=2@3/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix0/11 )/14 (/17 e.Call/15 )/18 (/21 e.NumberedSentencesPairs$a/19 )/22 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix0 as range 11
  // closed e.Call as range 15
  // closed e.NumberedSentencesPairs$a as range 19
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.NumberedSentencesPairs$a: 19
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1=2@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/11 HalfReuse: '\\'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/18 AsIs: (/21 AsIs: e.NumberedSentencesPairs$a/19 AsIs: )/22 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1A2Z0]);
  refalrts::reinit_char(context[14], '\\');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[13], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[18];
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckPatternPairs_S1A2Z3("CheckPatternPairs$1=2@3", COOKIE1_, COOKIE2_, func_gen_CheckPatternPairs_S1A2Z3);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z19(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  // </0 & DoMapAccum$1=1@19/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@19/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 e.new8/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  // closed e.new8 as range 2
  do {
    // </0 & DoMapAccum$1=1@19/4 t.SrcPos0/5 (/9 e.FuncName0/31 )/10 (/13 e.ContextVars0/33 )/14 (/17 e.Prefix0/35 )/18 (/21 e.Call/37 )/22 (/25 e.Scanned0/39 )/26 (/29 e.Tail0/41 )/30 t.Acc$a/45 e.StepScanned/43 >/1
    context[31] = context[7];
    context[32] = context[8];
    context[33] = context[11];
    context[34] = context[12];
    context[35] = context[15];
    context[36] = context[16];
    context[37] = context[19];
    context[38] = context[20];
    context[39] = context[23];
    context[40] = context[24];
    context[41] = context[27];
    context[42] = context[28];
    context[43] = context[2];
    context[44] = context[3];
    // closed e.FuncName0 as range 31
    // closed e.ContextVars0 as range 33
    // closed e.Prefix0 as range 35
    // closed e.Call as range 37
    // closed e.Scanned0 as range 39
    // closed e.Tail0 as range 41
    context[46] = refalrts::tvar_left( context[45], context[43], context[44] );
    if( ! context[46] )
      continue;
    // closed e.StepScanned as range 43
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 31
    //DEBUG: e.ContextVars0: 33
    //DEBUG: e.Prefix0: 35
    //DEBUG: e.Call: 37
    //DEBUG: e.Scanned0: 39
    //DEBUG: e.Tail0: 41
    //DEBUG: t.Acc$a: 45
    //DEBUG: e.StepScanned: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/25 {REMOVED TILE} )/26 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@19/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/31 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars0/33 AsIs: )/14 AsIs: (/17 AsIs: e.Prefix0/35 AsIs: )/18 AsIs: (/21 AsIs: e.Call/37 AsIs: )/22 } Tile{ AsIs: t.Acc$a/45 } Tile{ AsIs: (/29 } Tile{ AsIs: e.Scanned0/39 } Tile{ AsIs: e.StepScanned/43 } Tile{ AsIs: )/30 } Tile{ AsIs: e.Tail0/41 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z19]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    refalrts::splice_to_freelist_open( vm, context[22], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@19/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.ContextVars0/11 )/14 (/17 e.Prefix0/15 )/18 (/21 e.Call/19 )/22 (/25 e.Scanned0/23 )/26 (/29 e.Tail0/27 )/30 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.ContextVars0 as range 11
  // closed e.Prefix0 as range 15
  // closed e.Call as range 19
  // closed e.Scanned0 as range 23
  // closed e.Tail0 as range 27
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.ContextVars0: 11
  //DEBUG: e.Prefix0: 15
  //DEBUG: e.Call: 19
  //DEBUG: e.Scanned0: 23
  //DEBUG: e.Tail0: 27
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </21 } & DoMapAccum$1=1@0/31 Tile{ HalfReuse: [*]/0 Reuse: & CheckSentences\1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars0/11 AsIs: )/14 AsIs: (/17 AsIs: e.Prefix0/15 HalfReuse: '\\'/18 } Tile{ AsIs: e.Call/19 } )/32 Tile{ HalfReuse: {*}/22 AsIs: (/25 AsIs: e.Scanned0/23 AsIs: )/26 AsIs: (/29 AsIs: e.Tail0/27 AsIs: )/30 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[31], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::reinit_open_call(context[21]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_L1Z0]);
  refalrts::reinit_char(context[18], '\\');
  refalrts::reinit_unwrapped_closure(context[22], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[17], context[32] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[22];
  res = refalrts::splice_elem( res, context[32] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[0], context[18] );
  res = refalrts::splice_elem( res, context[31] );
  res = refalrts::splice_elem( res, context[21] );
  refalrts::use( res );
  refalrts::wrap_closure( context[22] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z19("DoMapAccum$1=1@19", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z19);


static refalrts::FnResult func_gen_CheckPatternPairs_S1L1B1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & CheckPatternPairs$1\1:1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckPatternPairs$1\1:1@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 t.new3/13 (/17 e.new4/15 )/18 s.new5/19 s.new6/20 (/23 e.new7/21 )/24 e.new8/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new4 as range 15
  if( ! refalrts::svar_left( context[19], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[20], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new7 as range 21
  // closed e.new8 as range 2
  do {
    // </0 & CheckPatternPairs$1\1:1@1/4 (/7 e.01/25 )/8 (/11 e.07/27 )/12 t.SrcPos0/13 (/17 e.Name/29 )/18 s.Num-R0/19 s.Num-L0/20 (/23 e.ContextVars$b0/31 )/24 e._5/33 >/1
    context[25] = context[5];
    context[26] = context[6];
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[15];
    context[30] = context[16];
    context[31] = context[21];
    context[32] = context[22];
    context[33] = context[2];
    context[34] = context[3];
    // closed e.01 as range 25
    // closed e.07 as range 27
    // closed e.Name as range 29
    // closed e.ContextVars$b0 as range 31
    // closed e._5 as range 33
    //DEBUG: t.SrcPos0: 13
    //DEBUG: s.Num-R0: 19
    //DEBUG: s.Num-L0: 20
    //DEBUG: e.01: 25
    //DEBUG: e.07: 27
    //DEBUG: e.Name: 29
    //DEBUG: e.ContextVars$b0: 31
    //DEBUG: e._5: 33
    //13: t.SrcPos0
    //19: s.Num-R0
    //20: s.Num-L0
    //25: e.01
    //27: e.07
    //29: e.Name
    //31: e.ContextVars$b0
    //33: e._5
    //39: e.01
    //43: e.07

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[35]);
    refalrts::alloc_name(vm, context[37], functions[efunc_gen_CheckPatternPairs_S1L1B1Z1S1C1]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::copy_evar(vm, context[39], context[40], context[25], context[26]);
    refalrts::alloc_close_bracket(vm, context[41]);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::copy_evar(vm, context[43], context[44], context[27], context[28]);
    refalrts::alloc_close_bracket(vm, context[45]);
    refalrts::alloc_close_call(vm, context[36]);
    refalrts::push_stack( vm, context[36] );
    refalrts::push_stack( vm, context[35] );
    res = refalrts::splice_elem( res, context[36] );
    refalrts::link_brackets( context[42], context[45] );
    res = refalrts::splice_elem( res, context[45] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_elem( res, context[42] );
    refalrts::link_brackets( context[38], context[41] );
    res = refalrts::splice_elem( res, context[41] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_elem( res, context[35] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </35 & CheckPatternPairs$1\1:1@1$1?1/39 (/42 )/43 (/46 )/47 >/36
      context[37] = 0;
      context[38] = 0;
      context[39] = refalrts::call_left( context[37], context[38], context[35], context[36] );
      context[40] = 0;
      context[41] = 0;
      context[42] = refalrts::brackets_left( context[40], context[41], context[37], context[38] );
      if( ! context[42] )
        continue;
      refalrts::bracket_pointers(context[42], context[43]);
      context[44] = 0;
      context[45] = 0;
      context[46] = refalrts::brackets_left( context[44], context[45], context[37], context[38] );
      if( ! context[46] )
        continue;
      refalrts::bracket_pointers(context[46], context[47]);
      if( ! refalrts::empty_seq( context[40], context[41] ) )
        continue;
      if( ! refalrts::empty_seq( context[44], context[45] ) )
        continue;
      if( ! refalrts::empty_seq( context[37], context[38] ) )
        continue;
      //DEBUG: t.SrcPos0: 13
      //DEBUG: s.Num-R0: 19
      //DEBUG: s.Num-L0: 20
      //DEBUG: e.01: 25
      //DEBUG: e.07: 27
      //DEBUG: e.Name: 29
      //DEBUG: e.ContextVars$b0: 31
      //DEBUG: e._5: 33

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & CheckPatternPairs$1\1:1@1/4 (/7 e.01/25 {REMOVED TILE} e.07/27 {REMOVED TILE} s.Num-R0/19 s.Num-L0/20 {REMOVED TILE} e.ContextVars$b0/31 )/24 e._5/33 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CreateScreeningWarning@2/12 AsIs: t.SrcPos0/13 AsIs: (/17 AsIs: e.Name/29 AsIs: )/18 } Tile{ AsIs: (/23 } Tile{ HalfReuse: </8 HalfReuse: & Symb/11 } Tile{ HalfReuse: s.Num-R019 /35 HalfReuse: >/39 HalfReuse: )/42 HalfReuse: </43 HalfReuse: & Symb/46 HalfReuse: s.Num-L020 /47 AsIs: >/36 AsIs: >/1 ]] }
      refalrts::reinit_name(context[12], functions[efunc_gen_CreateScreeningWarning_Z2]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[11], functions[efunc_Symb]);
      refalrts::reinit_svar( context[35], context[19] );
      refalrts::reinit_close_call(context[39]);
      refalrts::reinit_close_bracket(context[42]);
      refalrts::reinit_open_call(context[43]);
      refalrts::reinit_name(context[46], functions[efunc_Symb]);
      refalrts::reinit_svar( context[47], context[20] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[43] );
      refalrts::link_brackets( context[23], context[42] );
      refalrts::push_stack( vm, context[39] );
      refalrts::push_stack( vm, context[8] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[35];
      res = refalrts::splice_evar( res, context[8], context[11] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[12], context[18] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[35], context[36]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckPatternPairs$1\1:1@1/4 (/7 e.01/25 )/8 (/11 e.07/27 )/12 t.SrcPos0/13 (/17 e.Name/29 )/18 s.Num-R0/19 s.Num-L0/20 (/23 e.ContextVars$b0/31 )/24 # Clear/35 e._5/33 >/1
    context[25] = context[5];
    context[26] = context[6];
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[15];
    context[30] = context[16];
    context[31] = context[21];
    context[32] = context[22];
    context[33] = context[2];
    context[34] = context[3];
    context[35] = refalrts::ident_left( identifiers[ident_Clear], context[33], context[34] );
    if( ! context[35] )
      continue;
    // closed e.01 as range 25
    // closed e.07 as range 27
    // closed e.Name as range 29
    // closed e.ContextVars$b0 as range 31
    // closed e._5 as range 33
    //DEBUG: t.SrcPos0: 13
    //DEBUG: s.Num-R0: 19
    //DEBUG: s.Num-L0: 20
    //DEBUG: e.01: 25
    //DEBUG: e.07: 27
    //DEBUG: e.Name: 29
    //DEBUG: e.ContextVars$b0: 31
    //DEBUG: e._5: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.01/25 {REMOVED TILE} {REMOVED TILE} e.07/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.ContextVars$b0/31 {REMOVED TILE} e._5/33 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CreateScreeningWarning@2/12 AsIs: t.SrcPos0/13 AsIs: (/17 AsIs: e.Name/29 AsIs: )/18 } Tile{ AsIs: (/11 } Tile{ HalfReuse: </4 HalfReuse: & Symb/7 } Tile{ AsIs: s.Num-R0/19 } Tile{ HalfReuse: >/8 } Tile{ AsIs: )/24 HalfReuse: </35 } & Symb/36 Tile{ AsIs: s.Num-L0/20 HalfReuse: >/23 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[36], functions[efunc_Symb]);
    refalrts::reinit_name(context[12], functions[efunc_gen_CreateScreeningWarning_Z2]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_Symb]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_open_call(context[35]);
    refalrts::reinit_close_call(context[23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[35] );
    refalrts::link_brackets( context[11], context[24] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_elem( res, context[36] );
    res = refalrts::splice_evar( res, context[24], context[35] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[12], context[18] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckPatternPairs$1\1:1@1/4 (/7 e.01/25 )/8 (/11 e.07/27 )/12 t.SrcPos0/13 (/17 e.Name/29 )/18 s.Num-R0/19 s.Num-L0/20 (/23 e.ContextVars$b0/31 )/24 e._5/33 >/1
    context[25] = context[5];
    context[26] = context[6];
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[15];
    context[30] = context[16];
    context[31] = context[21];
    context[32] = context[22];
    context[33] = context[2];
    context[34] = context[3];
    // closed e.01 as range 25
    // closed e.07 as range 27
    // closed e.Name as range 29
    // closed e.ContextVars$b0 as range 31
    // closed e._5 as range 33
    //DEBUG: t.SrcPos0: 13
    //DEBUG: s.Num-R0: 19
    //DEBUG: s.Num-L0: 20
    //DEBUG: e.01: 25
    //DEBUG: e.07: 27
    //DEBUG: e.Name: 29
    //DEBUG: e.ContextVars$b0: 31
    //DEBUG: e._5: 33

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e._5/33 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CheckPatternPairs$1\1:1$3:1@1/12 AsIs: t.SrcPos0/13 AsIs: (/17 AsIs: e.Name/29 AsIs: )/18 AsIs: s.Num-R0/19 AsIs: s.Num-L0/20 HalfReuse: </23 } Tile{ HalfReuse: & PatternLanguagesCheck@1/24 } Tile{ AsIs: (/11 } Tile{ AsIs: e.ContextVars$b0/31 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.01/25 AsIs: )/8 } Tile{ AsIs: e.07/27 } >/35 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::reinit_name(context[12], functions[efunc_gen_CheckPatternPairs_S1L1B1S3B1Z1]);
    refalrts::reinit_open_call(context[23]);
    refalrts::reinit_name(context[24], functions[efunc_gen_PatternLanguagesCheck_Z1]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[11], context[4] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[4], context[8] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[12], context[23] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPatternPairs$1\1:1@1/4 (/7 e.01/5 )/8 (/11 e.07/9 )/12 t.SrcPos0/13 (/17 e.Name/15 )/18 s.Num-R0/19 s.Num-L0/20 (/23 e.ContextVars$b0/21 )/24 e.dyn/2 >/1
  // closed e.01 as range 5
  // closed e.07 as range 9
  // closed e.Name as range 15
  // closed e.ContextVars$b0 as range 21
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 13
  //DEBUG: s.Num-R0: 19
  //DEBUG: s.Num-L0: 20
  //DEBUG: e.01: 5
  //DEBUG: e.07: 9
  //DEBUG: e.Name: 15
  //DEBUG: e.ContextVars$b0: 21
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1\1:1@0/4 AsIs: (/7 AsIs: e.01/5 AsIs: )/8 AsIs: (/11 AsIs: e.07/9 AsIs: )/12 AsIs: t.SrcPos0/13 AsIs: (/17 AsIs: e.Name/15 AsIs: )/18 } (/25 )/26 Tile{ AsIs: s.Num-R0/19 AsIs: s.Num-L0/20 AsIs: (/23 AsIs: e.ContextVars$b0/21 AsIs: )/24 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[25]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1L1B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[25], context[26] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[19];
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckPatternPairs_S1L1B1Z1("CheckPatternPairs$1\\1:1@1", COOKIE1_, COOKIE2_, func_gen_CheckPatternPairs_S1L1B1Z1);


static refalrts::FnResult func_gen_CheckSentences_L1A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 59 elems
  refalrts::Iter context[59];
  refalrts::zeros( context, 59 );
  // </0 & CheckSentences\1=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckSentences\1=1@2/4 s.new1/5 t.new2/6 (/10 e.new3/8 )/11 (/14 e.new4/12 )/15 (/18 e.new5/16 )/19 (/22 e.new6/20 )/23 (/26 e.new7/24 )/27 (/30 e.new8/28 )/31 (/34 e.new9/32 )/35 e.new10/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = refalrts::tvar_left( context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  context[8] = 0;
  context[9] = 0;
  context[10] = refalrts::brackets_left( context[8], context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[10], context[11]);
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  context[28] = 0;
  context[29] = 0;
  context[30] = refalrts::brackets_left( context[28], context[29], context[2], context[3] );
  if( ! context[30] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[30], context[31]);
  context[32] = 0;
  context[33] = 0;
  context[34] = refalrts::brackets_left( context[32], context[33], context[2], context[3] );
  if( ! context[34] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[34], context[35]);
  // closed e.new3 as range 8
  // closed e.new4 as range 12
  // closed e.new5 as range 16
  // closed e.new6 as range 20
  // closed e.new7 as range 24
  // closed e.new8 as range 28
  // closed e.new9 as range 32
  // closed e.new10 as range 2
  do {
    // </0 & CheckSentences\1=1@2/4 s.Num0/5 t.SrcPos0/6 (/10 e.FuncName0/36 )/11 (/14 e.1/38 )/15 (/18 e.4/40 )/19 (/22 e.5/42 )/23 (/26 e.3/44 )/27 (/30 e.ContextVars$a/46 )/31 (/34 e.ContextAllAssignsOrConds/48 )/35 e.Prefix$a/50 >/1
    context[36] = context[8];
    context[37] = context[9];
    context[38] = context[12];
    context[39] = context[13];
    context[40] = context[16];
    context[41] = context[17];
    context[42] = context[20];
    context[43] = context[21];
    context[44] = context[24];
    context[45] = context[25];
    context[46] = context[28];
    context[47] = context[29];
    context[48] = context[32];
    context[49] = context[33];
    context[50] = context[2];
    context[51] = context[3];
    // closed e.FuncName0 as range 36
    // closed e.1 as range 38
    // closed e.4 as range 40
    // closed e.5 as range 42
    // closed e.3 as range 44
    // closed e.ContextVars$a as range 46
    // closed e.ContextAllAssignsOrConds as range 48
    // closed e.Prefix$a as range 50
    //DEBUG: t.SrcPos0: 6
    //DEBUG: s.Num0: 5
    //DEBUG: e.FuncName0: 36
    //DEBUG: e.1: 38
    //DEBUG: e.4: 40
    //DEBUG: e.5: 42
    //DEBUG: e.3: 44
    //DEBUG: e.ContextVars$a: 46
    //DEBUG: e.ContextAllAssignsOrConds: 48
    //DEBUG: e.Prefix$a: 50

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences\1=3/4 AsIs: s.Num0/5 AsIs: t.SrcPos0/6 AsIs: (/10 } Tile{ AsIs: e.FuncName0/36 } Tile{ AsIs: )/31 AsIs: (/34 } Tile{ AsIs: e.Prefix$a/50 } Tile{ AsIs: )/35 } (/52 Tile{ AsIs: e.ContextVars$a/46 } Tile{ AsIs: e.ContextAllAssignsOrConds/48 } e.1/38/53 Tile{ AsIs: )/11 AsIs: (/14 AsIs: e.1/38 AsIs: )/15 AsIs: (/18 AsIs: e.4/40 AsIs: )/19 AsIs: (/22 AsIs: e.5/42 AsIs: )/23 AsIs: (/26 AsIs: e.3/44 AsIs: )/27 HalfReuse: </30 } & Map@3/55 e.4/40/56 >/58 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[52]);
    refalrts::copy_evar(vm, context[53], context[54], context[38], context[39]);
    refalrts::alloc_name(vm, context[55], functions[efunc_gen_Map_Z3]);
    refalrts::copy_evar(vm, context[56], context[57], context[40], context[41]);
    refalrts::alloc_close_call(vm, context[58]);
    refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_L1A3]);
    refalrts::reinit_open_call(context[30]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[58] );
    refalrts::push_stack( vm, context[30] );
    refalrts::link_brackets( context[26], context[27] );
    refalrts::link_brackets( context[22], context[23] );
    refalrts::link_brackets( context[18], context[19] );
    refalrts::link_brackets( context[14], context[15] );
    refalrts::link_brackets( context[52], context[11] );
    refalrts::link_brackets( context[34], context[35] );
    refalrts::link_brackets( context[10], context[31] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[55], context[58] );
    res = refalrts::splice_evar( res, context[11], context[30] );
    res = refalrts::splice_evar( res, context[53], context[54] );
    res = refalrts::splice_evar( res, context[48], context[49] );
    res = refalrts::splice_evar( res, context[46], context[47] );
    res = refalrts::splice_elem( res, context[52] );
    res = refalrts::splice_elem( res, context[35] );
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_evar( res, context[31], context[34] );
    res = refalrts::splice_evar( res, context[36], context[37] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckSentences\1=1@2/4 s.Num0/5 t.SrcPos0/6 (/10 e.FuncName0/8 )/11 (/14 e.1/12 )/15 (/18 e.4/16 )/19 (/22 e.5/20 )/23 (/26 e.3/24 )/27 (/30 e.ContextVars$a/28 )/31 (/34 e.ContextAllAssignsOrConds/32 )/35 e.dyn/2 >/1
  // closed e.FuncName0 as range 8
  // closed e.1 as range 12
  // closed e.4 as range 16
  // closed e.5 as range 20
  // closed e.3 as range 24
  // closed e.ContextVars$a as range 28
  // closed e.ContextAllAssignsOrConds as range 32
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 6
  //DEBUG: s.Num0: 5
  //DEBUG: e.FuncName0: 8
  //DEBUG: e.1: 12
  //DEBUG: e.4: 16
  //DEBUG: e.5: 20
  //DEBUG: e.3: 24
  //DEBUG: e.ContextVars$a: 28
  //DEBUG: e.ContextAllAssignsOrConds: 32
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/31 (/34 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckSentences\1=1@0/4 AsIs: s.Num0/5 AsIs: t.SrcPos0/6 AsIs: (/10 AsIs: e.FuncName0/8 AsIs: )/11 AsIs: (/14 AsIs: e.1/12 AsIs: )/15 AsIs: (/18 AsIs: e.4/16 AsIs: )/19 AsIs: (/22 AsIs: e.5/20 AsIs: )/23 AsIs: (/26 AsIs: e.3/24 AsIs: )/27 AsIs: (/30 } Tile{ AsIs: e.ContextVars$a/28 } Tile{ AsIs: e.ContextAllAssignsOrConds/32 } Tile{ AsIs: )/35 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_L1A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[30], context[35] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[14], context[15] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[35];
  res = refalrts::splice_evar( res, context[32], context[33] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  refalrts::splice_to_freelist_open( vm, context[30], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckSentences_L1A1Z2("CheckSentences\\1=1@2", COOKIE1_, COOKIE2_, func_gen_CheckSentences_L1A1Z2);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z20(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  // </0 & DoMapAccum$1=1@20/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@20/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 (/33 e.new8/31 )/34 e.new9/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  // closed e.new8 as range 31
  // closed e.new9 as range 2
  do {
    // </0 & DoMapAccum$1=1@20/4 t.SrcPos0/5 (/9 e.FuncName0/35 )/10 (/13 e.ContextVars$a/37 )/14 (/17 e.ContextAllAssignsOrConds/39 )/18 (/21 e.Prefix$a/41 )/22 (/25 e.Call/43 )/26 (/29 e.Scanned0/45 )/30 (/33 e.Tail0/47 )/34 t.Acc$a/51 e.StepScanned/49 >/1
    context[35] = context[7];
    context[36] = context[8];
    context[37] = context[11];
    context[38] = context[12];
    context[39] = context[15];
    context[40] = context[16];
    context[41] = context[19];
    context[42] = context[20];
    context[43] = context[23];
    context[44] = context[24];
    context[45] = context[27];
    context[46] = context[28];
    context[47] = context[31];
    context[48] = context[32];
    context[49] = context[2];
    context[50] = context[3];
    // closed e.FuncName0 as range 35
    // closed e.ContextVars$a as range 37
    // closed e.ContextAllAssignsOrConds as range 39
    // closed e.Prefix$a as range 41
    // closed e.Call as range 43
    // closed e.Scanned0 as range 45
    // closed e.Tail0 as range 47
    context[52] = refalrts::tvar_left( context[51], context[49], context[50] );
    if( ! context[52] )
      continue;
    // closed e.StepScanned as range 49
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 35
    //DEBUG: e.ContextVars$a: 37
    //DEBUG: e.ContextAllAssignsOrConds: 39
    //DEBUG: e.Prefix$a: 41
    //DEBUG: e.Call: 43
    //DEBUG: e.Scanned0: 45
    //DEBUG: e.Tail0: 47
    //DEBUG: t.Acc$a: 51
    //DEBUG: e.StepScanned: 49

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/29 {REMOVED TILE} )/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@20/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/35 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars$a/37 AsIs: )/14 AsIs: (/17 AsIs: e.ContextAllAssignsOrConds/39 AsIs: )/18 AsIs: (/21 AsIs: e.Prefix$a/41 AsIs: )/22 AsIs: (/25 AsIs: e.Call/43 AsIs: )/26 } Tile{ AsIs: t.Acc$a/51 } Tile{ AsIs: (/33 } Tile{ AsIs: e.Scanned0/45 } Tile{ AsIs: e.StepScanned/49 } Tile{ AsIs: )/34 } Tile{ AsIs: e.Tail0/47 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z20]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[33], context[34] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    refalrts::splice_to_freelist_open( vm, context[26], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@20/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.ContextVars$a/11 )/14 (/17 e.ContextAllAssignsOrConds/15 )/18 (/21 e.Prefix$a/19 )/22 (/25 e.Call/23 )/26 (/29 e.Scanned0/27 )/30 (/33 e.Tail0/31 )/34 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.ContextVars$a as range 11
  // closed e.ContextAllAssignsOrConds as range 15
  // closed e.Prefix$a as range 19
  // closed e.Call as range 23
  // closed e.Scanned0 as range 27
  // closed e.Tail0 as range 31
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.ContextVars$a: 11
  //DEBUG: e.ContextAllAssignsOrConds: 15
  //DEBUG: e.Prefix$a: 19
  //DEBUG: e.Call: 23
  //DEBUG: e.Scanned0: 27
  //DEBUG: e.Tail0: 31
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </17 } Tile{ HalfReuse: & DoMapAccum$1=1@0/25 } Tile{ HalfReuse: [*]/0 Reuse: & CheckSentences\1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.ContextVars$a/11 } Tile{ AsIs: e.ContextAllAssignsOrConds/15 } Tile{ AsIs: )/18 AsIs: (/21 AsIs: e.Prefix$a/19 HalfReuse: '\\'/22 } Tile{ AsIs: e.Call/23 } Tile{ AsIs: )/14 } Tile{ HalfReuse: {*}/26 AsIs: (/29 AsIs: e.Scanned0/27 AsIs: )/30 AsIs: (/33 AsIs: e.Tail0/31 AsIs: )/34 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[17]);
  refalrts::reinit_name(context[25], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_L1Z0]);
  refalrts::reinit_char(context[22], '\\');
  refalrts::reinit_unwrapped_closure(context[26], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[21], context[14] );
  refalrts::link_brackets( context[13], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[26];
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[18], context[22] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[0], context[13] );
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_elem( res, context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[26] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z20("DoMapAccum$1=1@20", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z20);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z21(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  // </0 & DoMapAccum$1=1@21/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@21/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 (/33 e.new8/31 )/34 e.new9/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  // closed e.new8 as range 31
  // closed e.new9 as range 2
  do {
    // </0 & DoMapAccum$1=1@21/4 t.SrcPos0/5 (/9 e.FuncName0/35 )/10 (/13 e.ContextVars$a/37 )/14 (/17 e.ContextAllAssignsOrConds/39 )/18 (/21 e.Prefix$a/41 )/22 (/25 e.Call/43 )/26 (/29 e.Scanned0/45 )/30 (/33 e.Tail0/47 )/34 t.Acc$a/51 e.StepScanned/49 >/1
    context[35] = context[7];
    context[36] = context[8];
    context[37] = context[11];
    context[38] = context[12];
    context[39] = context[15];
    context[40] = context[16];
    context[41] = context[19];
    context[42] = context[20];
    context[43] = context[23];
    context[44] = context[24];
    context[45] = context[27];
    context[46] = context[28];
    context[47] = context[31];
    context[48] = context[32];
    context[49] = context[2];
    context[50] = context[3];
    // closed e.FuncName0 as range 35
    // closed e.ContextVars$a as range 37
    // closed e.ContextAllAssignsOrConds as range 39
    // closed e.Prefix$a as range 41
    // closed e.Call as range 43
    // closed e.Scanned0 as range 45
    // closed e.Tail0 as range 47
    context[52] = refalrts::tvar_left( context[51], context[49], context[50] );
    if( ! context[52] )
      continue;
    // closed e.StepScanned as range 49
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 35
    //DEBUG: e.ContextVars$a: 37
    //DEBUG: e.ContextAllAssignsOrConds: 39
    //DEBUG: e.Prefix$a: 41
    //DEBUG: e.Call: 43
    //DEBUG: e.Scanned0: 45
    //DEBUG: e.Tail0: 47
    //DEBUG: t.Acc$a: 51
    //DEBUG: e.StepScanned: 49

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/29 {REMOVED TILE} )/30 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@21/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/35 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars$a/37 AsIs: )/14 AsIs: (/17 AsIs: e.ContextAllAssignsOrConds/39 AsIs: )/18 AsIs: (/21 AsIs: e.Prefix$a/41 AsIs: )/22 AsIs: (/25 AsIs: e.Call/43 AsIs: )/26 } Tile{ AsIs: t.Acc$a/51 } Tile{ AsIs: (/33 } Tile{ AsIs: e.Scanned0/45 } Tile{ AsIs: e.StepScanned/49 } Tile{ AsIs: )/34 } Tile{ AsIs: e.Tail0/47 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z21]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[33], context[34] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    refalrts::splice_to_freelist_open( vm, context[26], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@21/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.ContextVars$a/11 )/14 (/17 e.ContextAllAssignsOrConds/15 )/18 (/21 e.Prefix$a/19 )/22 (/25 e.Call/23 )/26 (/29 e.Scanned0/27 )/30 (/33 e.Tail0/31 )/34 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.ContextVars$a as range 11
  // closed e.ContextAllAssignsOrConds as range 15
  // closed e.Prefix$a as range 19
  // closed e.Call as range 23
  // closed e.Scanned0 as range 27
  // closed e.Tail0 as range 31
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.ContextVars$a: 11
  //DEBUG: e.ContextAllAssignsOrConds: 15
  //DEBUG: e.Prefix$a: 19
  //DEBUG: e.Call: 23
  //DEBUG: e.Scanned0: 27
  //DEBUG: e.Tail0: 31
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </17 } Tile{ HalfReuse: & DoMapAccum$1=1@0/25 } Tile{ HalfReuse: [*]/0 Reuse: & CheckSentences\1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.ContextVars$a/11 } Tile{ AsIs: e.ContextAllAssignsOrConds/15 } Tile{ AsIs: )/18 AsIs: (/21 AsIs: e.Prefix$a/19 HalfReuse: ':'/22 } Tile{ AsIs: e.Call/23 } Tile{ AsIs: )/14 } Tile{ HalfReuse: {*}/26 AsIs: (/29 AsIs: e.Scanned0/27 AsIs: )/30 AsIs: (/33 AsIs: e.Tail0/31 AsIs: )/34 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[17]);
  refalrts::reinit_name(context[25], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_L1Z0]);
  refalrts::reinit_char(context[22], ':');
  refalrts::reinit_unwrapped_closure(context[26], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[29], context[30] );
  refalrts::link_brackets( context[21], context[14] );
  refalrts::link_brackets( context[13], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[26];
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[18], context[22] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[0], context[13] );
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_elem( res, context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[26] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z21("DoMapAccum$1=1@21", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z21);


static refalrts::FnResult func_gen_DoMapAccum_Z22(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 114 elems
  refalrts::Iter context[114];
  refalrts::zeros( context, 114 );
  // </0 & DoMapAccum@22/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@22/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 t.new8/31 (/35 e.new9/33 )/36 e.new10/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  context[32] = refalrts::tvar_left( context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  context[33] = 0;
  context[34] = 0;
  context[35] = refalrts::brackets_left( context[33], context[34], context[2], context[3] );
  if( ! context[35] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[35], context[36]);
  // closed e.new9 as range 33
  // closed e.new10 as range 2
  do {
    // </0 & DoMapAccum@22/4 t.new11/5 (/9 e.new15/37 )/10 (/13 e.new16/39 )/14 (/17 e.new17/41 )/18 (/21 e.new18/43 )/22 (/25 e.new19/45 )/26 (/29 e.new20/47 )/30 t.new12/31 (/35 e.new21/49 )/36 t.new13/53 e.new14/51 >/1
    context[37] = context[7];
    context[38] = context[8];
    context[39] = context[11];
    context[40] = context[12];
    context[41] = context[15];
    context[42] = context[16];
    context[43] = context[19];
    context[44] = context[20];
    context[45] = context[23];
    context[46] = context[24];
    context[47] = context[27];
    context[48] = context[28];
    context[49] = context[33];
    context[50] = context[34];
    context[51] = context[2];
    context[52] = context[3];
    // closed e.new15 as range 37
    // closed e.new16 as range 39
    // closed e.new17 as range 41
    // closed e.new18 as range 43
    // closed e.new19 as range 45
    // closed e.new20 as range 47
    // closed e.new21 as range 49
    context[54] = refalrts::tvar_left( context[53], context[51], context[52] );
    if( ! context[54] )
      continue;
    // closed e.new14 as range 51
    do {
      // </0 & DoMapAccum@22/4 t.SrcPos0/5 (/9 e.FuncName0/55 )/10 (/13 e.ContextVars0/57 )/14 (/17 e.Pattern0/59 )/18 (/21 e.ContextAllAssignsOrConds/61 )/22 (/25 e.Prefix$a0/63 )/26 (/29 e.Call/65 )/30 s.Num/31 (/35 e.Scanned/67 )/36 (/53 (/75 e.1/73 )/76 e.4/71 (/83 e.5/81 )/84 (/79 e.3/77 )/80 )/54 e.Tail/69 >/1
      context[55] = context[37];
      context[56] = context[38];
      context[57] = context[39];
      context[58] = context[40];
      context[59] = context[41];
      context[60] = context[42];
      context[61] = context[43];
      context[62] = context[44];
      context[63] = context[45];
      context[64] = context[46];
      context[65] = context[47];
      context[66] = context[48];
      context[67] = context[49];
      context[68] = context[50];
      context[69] = context[51];
      context[70] = context[52];
      context[71] = 0;
      context[72] = 0;
      if( ! refalrts::brackets_term( context[71], context[72], context[53] ) )
        continue;
      if( ! refalrts::svar_term( context[31], context[31] ) )
        continue;
      context[73] = 0;
      context[74] = 0;
      context[75] = refalrts::brackets_left( context[73], context[74], context[71], context[72] );
      if( ! context[75] )
        continue;
      refalrts::bracket_pointers(context[75], context[76]);
      context[77] = 0;
      context[78] = 0;
      context[79] = refalrts::brackets_right( context[77], context[78], context[71], context[72] );
      if( ! context[79] )
        continue;
      refalrts::bracket_pointers(context[79], context[80]);
      context[81] = 0;
      context[82] = 0;
      context[83] = refalrts::brackets_right( context[81], context[82], context[71], context[72] );
      if( ! context[83] )
        continue;
      refalrts::bracket_pointers(context[83], context[84]);
      // closed e.FuncName0 as range 55
      // closed e.ContextVars0 as range 57
      // closed e.Pattern0 as range 59
      // closed e.ContextAllAssignsOrConds as range 61
      // closed e.Prefix$a0 as range 63
      // closed e.Call as range 65
      // closed e.Scanned as range 67
      // closed e.1 as range 73
      // closed e.4 as range 71
      // closed e.5 as range 81
      // closed e.3 as range 77
      // closed e.Tail as range 69
      //DEBUG: t.SrcPos0: 5
      //DEBUG: s.Num: 31
      //DEBUG: e.FuncName0: 55
      //DEBUG: e.ContextVars0: 57
      //DEBUG: e.Pattern0: 59
      //DEBUG: e.ContextAllAssignsOrConds: 61
      //DEBUG: e.Prefix$a0: 63
      //DEBUG: e.Call: 65
      //DEBUG: e.Scanned: 67
      //DEBUG: e.1: 73
      //DEBUG: e.4: 71
      //DEBUG: e.5: 81
      //DEBUG: e.3: 77
      //DEBUG: e.Tail: 69

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@22/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/55 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars0/57 AsIs: )/14 AsIs: (/17 AsIs: e.Pattern0/59 AsIs: )/18 AsIs: (/21 AsIs: e.ContextAllAssignsOrConds/61 AsIs: )/22 AsIs: (/25 AsIs: e.Prefix$a0/63 AsIs: )/26 AsIs: (/29 AsIs: e.Call/65 AsIs: )/30 } Tile{ AsIs: (/35 AsIs: e.Scanned/67 AsIs: )/36 AsIs: (/53 } Tile{ AsIs: e.Tail/69 } )/85 </86 & CheckSentences\1=1/87 Tile{ AsIs: s.Num/31 } t.SrcPos0/5/88 (/90 e.FuncName0/55/91 )/93 Tile{ AsIs: (/75 AsIs: e.1/73 AsIs: )/76 } (/94 Tile{ AsIs: e.4/71 } )/95 Tile{ AsIs: (/83 AsIs: e.5/81 AsIs: )/84 AsIs: (/79 AsIs: e.3/77 AsIs: )/80 HalfReuse: (/54 } e.ContextVars0/57/96 e.Pattern0/59/98 e.ContextAllAssignsOrConds/61/100 )/102 e.Prefix$a0/63/103 '\\'/105 e.Call/65/106 '$'/108 </109 & Symb/110 s.Num/31/111 >/112 >/113 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[85]);
      refalrts::alloc_open_call(vm, context[86]);
      refalrts::alloc_name(vm, context[87], functions[efunc_gen_CheckSentences_L1A1]);
      refalrts::copy_evar(vm, context[88], context[89], context[5], context[6]);
      refalrts::alloc_open_bracket(vm, context[90]);
      refalrts::copy_evar(vm, context[91], context[92], context[55], context[56]);
      refalrts::alloc_close_bracket(vm, context[93]);
      refalrts::alloc_open_bracket(vm, context[94]);
      refalrts::alloc_close_bracket(vm, context[95]);
      refalrts::copy_evar(vm, context[96], context[97], context[57], context[58]);
      refalrts::copy_evar(vm, context[98], context[99], context[59], context[60]);
      refalrts::copy_evar(vm, context[100], context[101], context[61], context[62]);
      refalrts::alloc_close_bracket(vm, context[102]);
      refalrts::copy_evar(vm, context[103], context[104], context[63], context[64]);
      refalrts::alloc_char(vm, context[105], '\\');
      refalrts::copy_evar(vm, context[106], context[107], context[65], context[66]);
      refalrts::alloc_char(vm, context[108], '$');
      refalrts::alloc_open_call(vm, context[109]);
      refalrts::alloc_name(vm, context[110], functions[efunc_Symb]);
      refalrts::copy_stvar(vm, context[111], context[31]);
      refalrts::alloc_close_call(vm, context[112]);
      refalrts::alloc_close_call(vm, context[113]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z22]);
      refalrts::reinit_open_bracket(context[54]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[113] );
      refalrts::push_stack( vm, context[86] );
      refalrts::push_stack( vm, context[112] );
      refalrts::push_stack( vm, context[109] );
      refalrts::link_brackets( context[54], context[102] );
      refalrts::link_brackets( context[79], context[80] );
      refalrts::link_brackets( context[83], context[84] );
      refalrts::link_brackets( context[94], context[95] );
      refalrts::link_brackets( context[75], context[76] );
      refalrts::link_brackets( context[90], context[93] );
      refalrts::link_brackets( context[53], context[85] );
      refalrts::link_brackets( context[35], context[36] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[102], context[113] );
      res = refalrts::splice_evar( res, context[100], context[101] );
      res = refalrts::splice_evar( res, context[98], context[99] );
      res = refalrts::splice_evar( res, context[96], context[97] );
      res = refalrts::splice_evar( res, context[83], context[54] );
      res = refalrts::splice_elem( res, context[95] );
      res = refalrts::splice_evar( res, context[71], context[72] );
      res = refalrts::splice_elem( res, context[94] );
      res = refalrts::splice_evar( res, context[75], context[76] );
      res = refalrts::splice_evar( res, context[88], context[93] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[85], context[87] );
      res = refalrts::splice_evar( res, context[69], context[70] );
      res = refalrts::splice_evar( res, context[35], context[53] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@22/4 t.SrcPos0/5 (/9 e.FuncName0/55 )/10 (/13 e.ContextVars0/57 )/14 (/17 e.Pattern0/59 )/18 (/21 e.ContextAllAssignsOrConds/61 )/22 (/25 e.Prefix$a0/63 )/26 (/29 e.Call/65 )/30 t.Acc/31 (/35 e.Scanned/67 )/36 t.Next/53 e.Tail/69 >/1
    context[55] = context[37];
    context[56] = context[38];
    context[57] = context[39];
    context[58] = context[40];
    context[59] = context[41];
    context[60] = context[42];
    context[61] = context[43];
    context[62] = context[44];
    context[63] = context[45];
    context[64] = context[46];
    context[65] = context[47];
    context[66] = context[48];
    context[67] = context[49];
    context[68] = context[50];
    context[69] = context[51];
    context[70] = context[52];
    // closed e.FuncName0 as range 55
    // closed e.ContextVars0 as range 57
    // closed e.Pattern0 as range 59
    // closed e.ContextAllAssignsOrConds as range 61
    // closed e.Prefix$a0 as range 63
    // closed e.Call as range 65
    // closed e.Scanned as range 67
    // closed e.Tail as range 69
    //DEBUG: t.SrcPos0: 5
    //DEBUG: t.Acc: 31
    //DEBUG: t.Next: 53
    //DEBUG: e.FuncName0: 55
    //DEBUG: e.ContextVars0: 57
    //DEBUG: e.Pattern0: 59
    //DEBUG: e.ContextAllAssignsOrConds: 61
    //DEBUG: e.Prefix$a0: 63
    //DEBUG: e.Call: 65
    //DEBUG: e.Scanned: 67
    //DEBUG: e.Tail: 69

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@22/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/55 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars0/57 AsIs: )/14 AsIs: (/17 AsIs: e.Pattern0/59 AsIs: )/18 AsIs: (/21 AsIs: e.ContextAllAssignsOrConds/61 AsIs: )/22 AsIs: (/25 AsIs: e.Prefix$a0/63 AsIs: )/26 AsIs: (/29 AsIs: e.Call/65 AsIs: )/30 } Tile{ AsIs: (/35 AsIs: e.Scanned/67 AsIs: )/36 } (/71 Tile{ AsIs: e.Tail/69 } )/72 </73 & CheckSentences\1*1/74 t.SrcPos0/5/75 (/77 e.FuncName0/55/78 )/80 (/81 e.ContextVars0/57/82 e.Pattern0/59/84 e.ContextAllAssignsOrConds/61/86 )/88 (/89 e.Prefix$a0/63/90 '\\'/92 e.Call/65/93 )/95 Tile{ AsIs: t.Acc/31 } Tile{ AsIs: t.Next/53 } >/96 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[71]);
    refalrts::alloc_close_bracket(vm, context[72]);
    refalrts::alloc_open_call(vm, context[73]);
    refalrts::alloc_name(vm, context[74], functions[efunc_gen_CheckSentences_L1D1]);
    refalrts::copy_evar(vm, context[75], context[76], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[77]);
    refalrts::copy_evar(vm, context[78], context[79], context[55], context[56]);
    refalrts::alloc_close_bracket(vm, context[80]);
    refalrts::alloc_open_bracket(vm, context[81]);
    refalrts::copy_evar(vm, context[82], context[83], context[57], context[58]);
    refalrts::copy_evar(vm, context[84], context[85], context[59], context[60]);
    refalrts::copy_evar(vm, context[86], context[87], context[61], context[62]);
    refalrts::alloc_close_bracket(vm, context[88]);
    refalrts::alloc_open_bracket(vm, context[89]);
    refalrts::copy_evar(vm, context[90], context[91], context[63], context[64]);
    refalrts::alloc_char(vm, context[92], '\\');
    refalrts::copy_evar(vm, context[93], context[94], context[65], context[66]);
    refalrts::alloc_close_bracket(vm, context[95]);
    refalrts::alloc_close_call(vm, context[96]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z22]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[96] );
    refalrts::push_stack( vm, context[73] );
    refalrts::link_brackets( context[89], context[95] );
    refalrts::link_brackets( context[81], context[88] );
    refalrts::link_brackets( context[77], context[80] );
    refalrts::link_brackets( context[71], context[72] );
    refalrts::link_brackets( context[35], context[36] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[96] );
    res = refalrts::splice_evar( res, context[53], context[54] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[72], context[95] );
    res = refalrts::splice_evar( res, context[69], context[70] );
    res = refalrts::splice_elem( res, context[71] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@22/4 t.SrcPos0/5 (/9 e.FuncName0/37 )/10 (/13 e.ContextVars0/39 )/14 (/17 e.Pattern0/41 )/18 (/21 e.ContextAllAssignsOrConds/43 )/22 (/25 e.Prefix$a0/45 )/26 (/29 e.Call/47 )/30 t.Acc/31 (/35 e.Scanned/49 )/36 >/1
    context[37] = context[7];
    context[38] = context[8];
    context[39] = context[11];
    context[40] = context[12];
    context[41] = context[15];
    context[42] = context[16];
    context[43] = context[19];
    context[44] = context[20];
    context[45] = context[23];
    context[46] = context[24];
    context[47] = context[27];
    context[48] = context[28];
    context[49] = context[33];
    context[50] = context[34];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.FuncName0 as range 37
    // closed e.ContextVars0 as range 39
    // closed e.Pattern0 as range 41
    // closed e.ContextAllAssignsOrConds as range 43
    // closed e.Prefix$a0 as range 45
    // closed e.Call as range 47
    // closed e.Scanned as range 49
    //DEBUG: t.SrcPos0: 5
    //DEBUG: t.Acc: 31
    //DEBUG: e.FuncName0: 37
    //DEBUG: e.ContextVars0: 39
    //DEBUG: e.Pattern0: 41
    //DEBUG: e.ContextAllAssignsOrConds: 43
    //DEBUG: e.Prefix$a0: 45
    //DEBUG: e.Call: 47
    //DEBUG: e.Scanned: 49

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@22/4 t.SrcPos0/5 (/9 e.FuncName0/37 )/10 (/13 e.ContextVars0/39 )/14 (/17 e.Pattern0/41 )/18 (/21 e.ContextAllAssignsOrConds/43 )/22 (/25 e.Prefix$a0/45 )/26 (/29 e.Call/47 )/30 {REMOVED TILE} (/35 {REMOVED TILE} )/36 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/31 } Tile{ AsIs: e.Scanned/49 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@22/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.ContextVars0/11 )/14 (/17 e.Pattern0/15 )/18 (/21 e.ContextAllAssignsOrConds/19 )/22 (/25 e.Prefix$a0/23 )/26 (/29 e.Call/27 )/30 t.acc/31 (/35 e.scanned/33 )/36 e.items/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.ContextVars0 as range 11
  // closed e.Pattern0 as range 15
  // closed e.ContextAllAssignsOrConds as range 19
  // closed e.Prefix$a0 as range 23
  // closed e.Call as range 27
  // closed e.scanned as range 33
  // closed e.items as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: t.acc: 31
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.ContextVars0: 11
  //DEBUG: e.Pattern0: 15
  //DEBUG: e.ContextAllAssignsOrConds: 19
  //DEBUG: e.Prefix$a0: 23
  //DEBUG: e.Call: 27
  //DEBUG: e.scanned: 33
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/21 {REMOVED TILE} {REMOVED TILE} (/29 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </14 HalfReuse: & DoMapAccum@0/17 } Tile{ HalfReuse: [*]/0 Reuse: & CheckSentences\1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.ContextVars0/11 } Tile{ AsIs: e.Pattern0/15 } Tile{ AsIs: e.ContextAllAssignsOrConds/19 } Tile{ AsIs: )/22 AsIs: (/25 AsIs: e.Prefix$a0/23 HalfReuse: '\\'/26 } Tile{ AsIs: e.Call/27 } Tile{ AsIs: )/18 } Tile{ HalfReuse: {*}/30 AsIs: t.acc/31 AsIs: (/35 AsIs: e.scanned/33 AsIs: )/36 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[14]);
  refalrts::reinit_name(context[17], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_L1Z0]);
  refalrts::reinit_char(context[26], '\\');
  refalrts::reinit_unwrapped_closure(context[30], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[14] );
  refalrts::link_brackets( context[35], context[36] );
  refalrts::link_brackets( context[25], context[18] );
  refalrts::link_brackets( context[13], context[22] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[30];
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[22], context[26] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[0], context[13] );
  res = refalrts::splice_evar( res, context[14], context[17] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  refalrts::wrap_closure( context[30] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z22("DoMapAccum@22", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z22);


static refalrts::FnResult func_gen_DoMapAccum_Z23(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 114 elems
  refalrts::Iter context[114];
  refalrts::zeros( context, 114 );
  // </0 & DoMapAccum@23/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@23/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 t.new8/31 (/35 e.new9/33 )/36 e.new10/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  context[32] = refalrts::tvar_left( context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  context[33] = 0;
  context[34] = 0;
  context[35] = refalrts::brackets_left( context[33], context[34], context[2], context[3] );
  if( ! context[35] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[35], context[36]);
  // closed e.new9 as range 33
  // closed e.new10 as range 2
  do {
    // </0 & DoMapAccum@23/4 t.new11/5 (/9 e.new15/37 )/10 (/13 e.new16/39 )/14 (/17 e.new17/41 )/18 (/21 e.new18/43 )/22 (/25 e.new19/45 )/26 (/29 e.new20/47 )/30 t.new12/31 (/35 e.new21/49 )/36 t.new13/53 e.new14/51 >/1
    context[37] = context[7];
    context[38] = context[8];
    context[39] = context[11];
    context[40] = context[12];
    context[41] = context[15];
    context[42] = context[16];
    context[43] = context[19];
    context[44] = context[20];
    context[45] = context[23];
    context[46] = context[24];
    context[47] = context[27];
    context[48] = context[28];
    context[49] = context[33];
    context[50] = context[34];
    context[51] = context[2];
    context[52] = context[3];
    // closed e.new15 as range 37
    // closed e.new16 as range 39
    // closed e.new17 as range 41
    // closed e.new18 as range 43
    // closed e.new19 as range 45
    // closed e.new20 as range 47
    // closed e.new21 as range 49
    context[54] = refalrts::tvar_left( context[53], context[51], context[52] );
    if( ! context[54] )
      continue;
    // closed e.new14 as range 51
    do {
      // </0 & DoMapAccum@23/4 t.SrcPos0/5 (/9 e.FuncName0/55 )/10 (/13 e.ContextVars0/57 )/14 (/17 e.Pattern0/59 )/18 (/21 e.ContextAllAssignsOrConds/61 )/22 (/25 e.Prefix$a0/63 )/26 (/29 e.Call/65 )/30 s.Num/31 (/35 e.Scanned/67 )/36 (/53 (/75 e.1/73 )/76 e.4/71 (/83 e.5/81 )/84 (/79 e.3/77 )/80 )/54 e.Tail/69 >/1
      context[55] = context[37];
      context[56] = context[38];
      context[57] = context[39];
      context[58] = context[40];
      context[59] = context[41];
      context[60] = context[42];
      context[61] = context[43];
      context[62] = context[44];
      context[63] = context[45];
      context[64] = context[46];
      context[65] = context[47];
      context[66] = context[48];
      context[67] = context[49];
      context[68] = context[50];
      context[69] = context[51];
      context[70] = context[52];
      context[71] = 0;
      context[72] = 0;
      if( ! refalrts::brackets_term( context[71], context[72], context[53] ) )
        continue;
      if( ! refalrts::svar_term( context[31], context[31] ) )
        continue;
      context[73] = 0;
      context[74] = 0;
      context[75] = refalrts::brackets_left( context[73], context[74], context[71], context[72] );
      if( ! context[75] )
        continue;
      refalrts::bracket_pointers(context[75], context[76]);
      context[77] = 0;
      context[78] = 0;
      context[79] = refalrts::brackets_right( context[77], context[78], context[71], context[72] );
      if( ! context[79] )
        continue;
      refalrts::bracket_pointers(context[79], context[80]);
      context[81] = 0;
      context[82] = 0;
      context[83] = refalrts::brackets_right( context[81], context[82], context[71], context[72] );
      if( ! context[83] )
        continue;
      refalrts::bracket_pointers(context[83], context[84]);
      // closed e.FuncName0 as range 55
      // closed e.ContextVars0 as range 57
      // closed e.Pattern0 as range 59
      // closed e.ContextAllAssignsOrConds as range 61
      // closed e.Prefix$a0 as range 63
      // closed e.Call as range 65
      // closed e.Scanned as range 67
      // closed e.1 as range 73
      // closed e.4 as range 71
      // closed e.5 as range 81
      // closed e.3 as range 77
      // closed e.Tail as range 69
      //DEBUG: t.SrcPos0: 5
      //DEBUG: s.Num: 31
      //DEBUG: e.FuncName0: 55
      //DEBUG: e.ContextVars0: 57
      //DEBUG: e.Pattern0: 59
      //DEBUG: e.ContextAllAssignsOrConds: 61
      //DEBUG: e.Prefix$a0: 63
      //DEBUG: e.Call: 65
      //DEBUG: e.Scanned: 67
      //DEBUG: e.1: 73
      //DEBUG: e.4: 71
      //DEBUG: e.5: 81
      //DEBUG: e.3: 77
      //DEBUG: e.Tail: 69

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@23/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/55 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars0/57 AsIs: )/14 AsIs: (/17 AsIs: e.Pattern0/59 AsIs: )/18 AsIs: (/21 AsIs: e.ContextAllAssignsOrConds/61 AsIs: )/22 AsIs: (/25 AsIs: e.Prefix$a0/63 AsIs: )/26 AsIs: (/29 AsIs: e.Call/65 AsIs: )/30 } Tile{ AsIs: (/35 AsIs: e.Scanned/67 AsIs: )/36 AsIs: (/53 } Tile{ AsIs: e.Tail/69 } )/85 </86 & CheckSentences\1=1/87 Tile{ AsIs: s.Num/31 } t.SrcPos0/5/88 (/90 e.FuncName0/55/91 )/93 Tile{ AsIs: (/75 AsIs: e.1/73 AsIs: )/76 } (/94 Tile{ AsIs: e.4/71 } )/95 Tile{ AsIs: (/83 AsIs: e.5/81 AsIs: )/84 AsIs: (/79 AsIs: e.3/77 AsIs: )/80 HalfReuse: (/54 } e.ContextVars0/57/96 e.Pattern0/59/98 e.ContextAllAssignsOrConds/61/100 )/102 e.Prefix$a0/63/103 ':'/105 e.Call/65/106 '$'/108 </109 & Symb/110 s.Num/31/111 >/112 >/113 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[85]);
      refalrts::alloc_open_call(vm, context[86]);
      refalrts::alloc_name(vm, context[87], functions[efunc_gen_CheckSentences_L1A1]);
      refalrts::copy_evar(vm, context[88], context[89], context[5], context[6]);
      refalrts::alloc_open_bracket(vm, context[90]);
      refalrts::copy_evar(vm, context[91], context[92], context[55], context[56]);
      refalrts::alloc_close_bracket(vm, context[93]);
      refalrts::alloc_open_bracket(vm, context[94]);
      refalrts::alloc_close_bracket(vm, context[95]);
      refalrts::copy_evar(vm, context[96], context[97], context[57], context[58]);
      refalrts::copy_evar(vm, context[98], context[99], context[59], context[60]);
      refalrts::copy_evar(vm, context[100], context[101], context[61], context[62]);
      refalrts::alloc_close_bracket(vm, context[102]);
      refalrts::copy_evar(vm, context[103], context[104], context[63], context[64]);
      refalrts::alloc_char(vm, context[105], ':');
      refalrts::copy_evar(vm, context[106], context[107], context[65], context[66]);
      refalrts::alloc_char(vm, context[108], '$');
      refalrts::alloc_open_call(vm, context[109]);
      refalrts::alloc_name(vm, context[110], functions[efunc_Symb]);
      refalrts::copy_stvar(vm, context[111], context[31]);
      refalrts::alloc_close_call(vm, context[112]);
      refalrts::alloc_close_call(vm, context[113]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z23]);
      refalrts::reinit_open_bracket(context[54]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[113] );
      refalrts::push_stack( vm, context[86] );
      refalrts::push_stack( vm, context[112] );
      refalrts::push_stack( vm, context[109] );
      refalrts::link_brackets( context[54], context[102] );
      refalrts::link_brackets( context[79], context[80] );
      refalrts::link_brackets( context[83], context[84] );
      refalrts::link_brackets( context[94], context[95] );
      refalrts::link_brackets( context[75], context[76] );
      refalrts::link_brackets( context[90], context[93] );
      refalrts::link_brackets( context[53], context[85] );
      refalrts::link_brackets( context[35], context[36] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[102], context[113] );
      res = refalrts::splice_evar( res, context[100], context[101] );
      res = refalrts::splice_evar( res, context[98], context[99] );
      res = refalrts::splice_evar( res, context[96], context[97] );
      res = refalrts::splice_evar( res, context[83], context[54] );
      res = refalrts::splice_elem( res, context[95] );
      res = refalrts::splice_evar( res, context[71], context[72] );
      res = refalrts::splice_elem( res, context[94] );
      res = refalrts::splice_evar( res, context[75], context[76] );
      res = refalrts::splice_evar( res, context[88], context[93] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[85], context[87] );
      res = refalrts::splice_evar( res, context[69], context[70] );
      res = refalrts::splice_evar( res, context[35], context[53] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@23/4 t.SrcPos0/5 (/9 e.FuncName0/55 )/10 (/13 e.ContextVars0/57 )/14 (/17 e.Pattern0/59 )/18 (/21 e.ContextAllAssignsOrConds/61 )/22 (/25 e.Prefix$a0/63 )/26 (/29 e.Call/65 )/30 t.Acc/31 (/35 e.Scanned/67 )/36 t.Next/53 e.Tail/69 >/1
    context[55] = context[37];
    context[56] = context[38];
    context[57] = context[39];
    context[58] = context[40];
    context[59] = context[41];
    context[60] = context[42];
    context[61] = context[43];
    context[62] = context[44];
    context[63] = context[45];
    context[64] = context[46];
    context[65] = context[47];
    context[66] = context[48];
    context[67] = context[49];
    context[68] = context[50];
    context[69] = context[51];
    context[70] = context[52];
    // closed e.FuncName0 as range 55
    // closed e.ContextVars0 as range 57
    // closed e.Pattern0 as range 59
    // closed e.ContextAllAssignsOrConds as range 61
    // closed e.Prefix$a0 as range 63
    // closed e.Call as range 65
    // closed e.Scanned as range 67
    // closed e.Tail as range 69
    //DEBUG: t.SrcPos0: 5
    //DEBUG: t.Acc: 31
    //DEBUG: t.Next: 53
    //DEBUG: e.FuncName0: 55
    //DEBUG: e.ContextVars0: 57
    //DEBUG: e.Pattern0: 59
    //DEBUG: e.ContextAllAssignsOrConds: 61
    //DEBUG: e.Prefix$a0: 63
    //DEBUG: e.Call: 65
    //DEBUG: e.Scanned: 67
    //DEBUG: e.Tail: 69

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@23/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/55 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars0/57 AsIs: )/14 AsIs: (/17 AsIs: e.Pattern0/59 AsIs: )/18 AsIs: (/21 AsIs: e.ContextAllAssignsOrConds/61 AsIs: )/22 AsIs: (/25 AsIs: e.Prefix$a0/63 AsIs: )/26 AsIs: (/29 AsIs: e.Call/65 AsIs: )/30 } Tile{ AsIs: (/35 AsIs: e.Scanned/67 AsIs: )/36 } (/71 Tile{ AsIs: e.Tail/69 } )/72 </73 & CheckSentences\1*1/74 t.SrcPos0/5/75 (/77 e.FuncName0/55/78 )/80 (/81 e.ContextVars0/57/82 e.Pattern0/59/84 e.ContextAllAssignsOrConds/61/86 )/88 (/89 e.Prefix$a0/63/90 ':'/92 e.Call/65/93 )/95 Tile{ AsIs: t.Acc/31 } Tile{ AsIs: t.Next/53 } >/96 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[71]);
    refalrts::alloc_close_bracket(vm, context[72]);
    refalrts::alloc_open_call(vm, context[73]);
    refalrts::alloc_name(vm, context[74], functions[efunc_gen_CheckSentences_L1D1]);
    refalrts::copy_evar(vm, context[75], context[76], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[77]);
    refalrts::copy_evar(vm, context[78], context[79], context[55], context[56]);
    refalrts::alloc_close_bracket(vm, context[80]);
    refalrts::alloc_open_bracket(vm, context[81]);
    refalrts::copy_evar(vm, context[82], context[83], context[57], context[58]);
    refalrts::copy_evar(vm, context[84], context[85], context[59], context[60]);
    refalrts::copy_evar(vm, context[86], context[87], context[61], context[62]);
    refalrts::alloc_close_bracket(vm, context[88]);
    refalrts::alloc_open_bracket(vm, context[89]);
    refalrts::copy_evar(vm, context[90], context[91], context[63], context[64]);
    refalrts::alloc_char(vm, context[92], ':');
    refalrts::copy_evar(vm, context[93], context[94], context[65], context[66]);
    refalrts::alloc_close_bracket(vm, context[95]);
    refalrts::alloc_close_call(vm, context[96]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[96] );
    refalrts::push_stack( vm, context[73] );
    refalrts::link_brackets( context[89], context[95] );
    refalrts::link_brackets( context[81], context[88] );
    refalrts::link_brackets( context[77], context[80] );
    refalrts::link_brackets( context[71], context[72] );
    refalrts::link_brackets( context[35], context[36] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[96] );
    res = refalrts::splice_evar( res, context[53], context[54] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[72], context[95] );
    res = refalrts::splice_evar( res, context[69], context[70] );
    res = refalrts::splice_elem( res, context[71] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@23/4 t.SrcPos0/5 (/9 e.FuncName0/37 )/10 (/13 e.ContextVars0/39 )/14 (/17 e.Pattern0/41 )/18 (/21 e.ContextAllAssignsOrConds/43 )/22 (/25 e.Prefix$a0/45 )/26 (/29 e.Call/47 )/30 t.Acc/31 (/35 e.Scanned/49 )/36 >/1
    context[37] = context[7];
    context[38] = context[8];
    context[39] = context[11];
    context[40] = context[12];
    context[41] = context[15];
    context[42] = context[16];
    context[43] = context[19];
    context[44] = context[20];
    context[45] = context[23];
    context[46] = context[24];
    context[47] = context[27];
    context[48] = context[28];
    context[49] = context[33];
    context[50] = context[34];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.FuncName0 as range 37
    // closed e.ContextVars0 as range 39
    // closed e.Pattern0 as range 41
    // closed e.ContextAllAssignsOrConds as range 43
    // closed e.Prefix$a0 as range 45
    // closed e.Call as range 47
    // closed e.Scanned as range 49
    //DEBUG: t.SrcPos0: 5
    //DEBUG: t.Acc: 31
    //DEBUG: e.FuncName0: 37
    //DEBUG: e.ContextVars0: 39
    //DEBUG: e.Pattern0: 41
    //DEBUG: e.ContextAllAssignsOrConds: 43
    //DEBUG: e.Prefix$a0: 45
    //DEBUG: e.Call: 47
    //DEBUG: e.Scanned: 49

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@23/4 t.SrcPos0/5 (/9 e.FuncName0/37 )/10 (/13 e.ContextVars0/39 )/14 (/17 e.Pattern0/41 )/18 (/21 e.ContextAllAssignsOrConds/43 )/22 (/25 e.Prefix$a0/45 )/26 (/29 e.Call/47 )/30 {REMOVED TILE} (/35 {REMOVED TILE} )/36 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/31 } Tile{ AsIs: e.Scanned/49 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@23/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.ContextVars0/11 )/14 (/17 e.Pattern0/15 )/18 (/21 e.ContextAllAssignsOrConds/19 )/22 (/25 e.Prefix$a0/23 )/26 (/29 e.Call/27 )/30 t.acc/31 (/35 e.scanned/33 )/36 e.items/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.ContextVars0 as range 11
  // closed e.Pattern0 as range 15
  // closed e.ContextAllAssignsOrConds as range 19
  // closed e.Prefix$a0 as range 23
  // closed e.Call as range 27
  // closed e.scanned as range 33
  // closed e.items as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: t.acc: 31
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.ContextVars0: 11
  //DEBUG: e.Pattern0: 15
  //DEBUG: e.ContextAllAssignsOrConds: 19
  //DEBUG: e.Prefix$a0: 23
  //DEBUG: e.Call: 27
  //DEBUG: e.scanned: 33
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/21 {REMOVED TILE} {REMOVED TILE} (/29 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </14 HalfReuse: & DoMapAccum@0/17 } Tile{ HalfReuse: [*]/0 Reuse: & CheckSentences\1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.ContextVars0/11 } Tile{ AsIs: e.Pattern0/15 } Tile{ AsIs: e.ContextAllAssignsOrConds/19 } Tile{ AsIs: )/22 AsIs: (/25 AsIs: e.Prefix$a0/23 HalfReuse: ':'/26 } Tile{ AsIs: e.Call/27 } Tile{ AsIs: )/18 } Tile{ HalfReuse: {*}/30 AsIs: t.acc/31 AsIs: (/35 AsIs: e.scanned/33 AsIs: )/36 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[14]);
  refalrts::reinit_name(context[17], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_L1Z0]);
  refalrts::reinit_char(context[26], ':');
  refalrts::reinit_unwrapped_closure(context[30], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[14] );
  refalrts::link_brackets( context[35], context[36] );
  refalrts::link_brackets( context[25], context[18] );
  refalrts::link_brackets( context[13], context[22] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[30];
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[22], context[26] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[0], context[13] );
  res = refalrts::splice_evar( res, context[14], context[17] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  refalrts::wrap_closure( context[30] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z23("DoMapAccum@23", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z23);


static refalrts::FnResult func_gen_Map_Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 108 elems
  refalrts::Iter context[108];
  refalrts::zeros( context, 108 );
  // </0 & Map@11/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@11/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 e.new6/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 2
  do {
    // </0 & Map@11/4 t.new7/5 (/9 e.new10/23 )/10 (/13 e.new11/25 )/14 (/17 e.new12/27 )/18 (/21 e.new13/29 )/22 t.new8/33 e.new9/31 >/1
    context[23] = context[7];
    context[24] = context[8];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.new10 as range 23
    // closed e.new11 as range 25
    // closed e.new12 as range 27
    // closed e.new13 as range 29
    context[34] = refalrts::tvar_left( context[33], context[31], context[32] );
    if( ! context[34] )
      continue;
    // closed e.new9 as range 31
    do {
      // </0 & Map@11/4 t.SrcPos0/5 (/9 e.FuncName0/35 )/10 (/13 e.Prefix0/37 )/14 (/17 e.Call/39 )/18 (/21 e.ContextVars$b/41 )/22 (/33 (/49 (/53 (/57 e.01/55 )/58 e.04/51 (/77 e.05/75 )/78 (/73 e.03/71 )/74 )/54 s.Num-L/87 )/50 (/61 (/65 (/69 e.07/67 )/70 e.10/63 (/85 e.11/83 )/86 (/81 e.09/79 )/82 )/66 s.Num-R/88 )/62 )/34 e.Tail/43 >/1
      context[35] = context[23];
      context[36] = context[24];
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[29];
      context[42] = context[30];
      context[43] = context[31];
      context[44] = context[32];
      context[45] = 0;
      context[46] = 0;
      if( ! refalrts::brackets_term( context[45], context[46], context[33] ) )
        continue;
      context[47] = 0;
      context[48] = 0;
      context[49] = refalrts::brackets_left( context[47], context[48], context[45], context[46] );
      if( ! context[49] )
        continue;
      refalrts::bracket_pointers(context[49], context[50]);
      context[51] = 0;
      context[52] = 0;
      context[53] = refalrts::brackets_left( context[51], context[52], context[47], context[48] );
      if( ! context[53] )
        continue;
      refalrts::bracket_pointers(context[53], context[54]);
      context[55] = 0;
      context[56] = 0;
      context[57] = refalrts::brackets_left( context[55], context[56], context[51], context[52] );
      if( ! context[57] )
        continue;
      refalrts::bracket_pointers(context[57], context[58]);
      context[59] = 0;
      context[60] = 0;
      context[61] = refalrts::brackets_left( context[59], context[60], context[45], context[46] );
      if( ! context[61] )
        continue;
      refalrts::bracket_pointers(context[61], context[62]);
      context[63] = 0;
      context[64] = 0;
      context[65] = refalrts::brackets_left( context[63], context[64], context[59], context[60] );
      if( ! context[65] )
        continue;
      refalrts::bracket_pointers(context[65], context[66]);
      context[67] = 0;
      context[68] = 0;
      context[69] = refalrts::brackets_left( context[67], context[68], context[63], context[64] );
      if( ! context[69] )
        continue;
      refalrts::bracket_pointers(context[69], context[70]);
      context[71] = 0;
      context[72] = 0;
      context[73] = refalrts::brackets_right( context[71], context[72], context[51], context[52] );
      if( ! context[73] )
        continue;
      refalrts::bracket_pointers(context[73], context[74]);
      context[75] = 0;
      context[76] = 0;
      context[77] = refalrts::brackets_right( context[75], context[76], context[51], context[52] );
      if( ! context[77] )
        continue;
      refalrts::bracket_pointers(context[77], context[78]);
      context[79] = 0;
      context[80] = 0;
      context[81] = refalrts::brackets_right( context[79], context[80], context[63], context[64] );
      if( ! context[81] )
        continue;
      refalrts::bracket_pointers(context[81], context[82]);
      context[83] = 0;
      context[84] = 0;
      context[85] = refalrts::brackets_right( context[83], context[84], context[63], context[64] );
      if( ! context[85] )
        continue;
      refalrts::bracket_pointers(context[85], context[86]);
      if( ! refalrts::empty_seq( context[45], context[46] ) )
        continue;
      // closed e.FuncName0 as range 35
      // closed e.Prefix0 as range 37
      // closed e.Call as range 39
      // closed e.ContextVars$b as range 41
      // closed e.01 as range 55
      // closed e.04 as range 51
      // closed e.05 as range 75
      // closed e.03 as range 71
      // closed e.07 as range 67
      // closed e.10 as range 63
      // closed e.11 as range 83
      // closed e.09 as range 79
      // closed e.Tail as range 43
      if( ! refalrts::svar_left( context[87], context[47], context[48] ) )
        continue;
      if( ! refalrts::empty_seq( context[47], context[48] ) )
        continue;
      if( ! refalrts::svar_left( context[88], context[59], context[60] ) )
        continue;
      if( ! refalrts::empty_seq( context[59], context[60] ) )
        continue;
      //DEBUG: t.SrcPos0: 5
      //DEBUG: e.FuncName0: 35
      //DEBUG: e.Prefix0: 37
      //DEBUG: e.Call: 39
      //DEBUG: e.ContextVars$b: 41
      //DEBUG: e.01: 55
      //DEBUG: e.04: 51
      //DEBUG: e.05: 75
      //DEBUG: e.03: 71
      //DEBUG: e.07: 67
      //DEBUG: e.10: 63
      //DEBUG: e.11: 83
      //DEBUG: e.09: 79
      //DEBUG: e.Tail: 43
      //DEBUG: s.Num-L: 87
      //DEBUG: s.Num-R: 88

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.04/51 {REMOVED TILE} e.05/75 {REMOVED TILE} e.03/71 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.10/63 {REMOVED TILE} e.11/83 {REMOVED TILE} e.09/79 {REMOVED TILE} s.Num-R/88 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </49 HalfReuse: & CheckPatternPairs$1\1:1@2/53 AsIs: (/57 AsIs: e.01/55 AsIs: )/58 } Tile{ AsIs: (/69 AsIs: e.07/67 AsIs: )/70 } t.SrcPos0/5/89 Tile{ AsIs: (/77 } e.FuncName0/35/91 Tile{ AsIs: )/86 AsIs: (/81 } e.Prefix0/37/93 Tile{ AsIs: )/78 AsIs: (/73 } e.Call/39/95 Tile{ AsIs: )/74 HalfReuse: s.Num-R88 /54 AsIs: s.Num-L/87 HalfReuse: (/50 } e.ContextVars$b/41/97 Tile{ AsIs: )/82 HalfReuse: </66 } Tile{ HalfReuse: & GenericMatch/61 AsIs: (/65 } e.ContextVars$b/41/99 e.01/55/101 Tile{ AsIs: )/62 HalfReuse: (/34 } e.ContextVars$b/41/103 e.07/67/105 Tile{ HalfReuse: )/33 } >/107 Tile{ HalfReuse: >/85 } Tile{ AsIs: </0 AsIs: & Map@11/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/35 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/37 AsIs: )/14 AsIs: (/17 AsIs: e.Call/39 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars$b/41 AsIs: )/22 } Tile{ AsIs: e.Tail/43 } Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[89], context[90], context[5], context[6]);
      refalrts::copy_evar(vm, context[91], context[92], context[35], context[36]);
      refalrts::copy_evar(vm, context[93], context[94], context[37], context[38]);
      refalrts::copy_evar(vm, context[95], context[96], context[39], context[40]);
      refalrts::copy_evar(vm, context[97], context[98], context[41], context[42]);
      refalrts::copy_evar(vm, context[99], context[100], context[41], context[42]);
      refalrts::copy_evar(vm, context[101], context[102], context[55], context[56]);
      refalrts::copy_evar(vm, context[103], context[104], context[41], context[42]);
      refalrts::copy_evar(vm, context[105], context[106], context[67], context[68]);
      refalrts::alloc_close_call(vm, context[107]);
      refalrts::reinit_open_call(context[49]);
      refalrts::reinit_name(context[53], functions[efunc_gen_CheckPatternPairs_S1L1B1Z2]);
      refalrts::reinit_svar( context[54], context[88] );
      refalrts::reinit_open_bracket(context[50]);
      refalrts::reinit_open_call(context[66]);
      refalrts::reinit_name(context[61], functions[efunc_GenericMatch]);
      refalrts::reinit_open_bracket(context[34]);
      refalrts::reinit_close_bracket(context[33]);
      refalrts::reinit_close_call(context[85]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[85] );
      refalrts::push_stack( vm, context[49] );
      refalrts::push_stack( vm, context[107] );
      refalrts::push_stack( vm, context[66] );
      refalrts::link_brackets( context[34], context[33] );
      refalrts::link_brackets( context[65], context[62] );
      refalrts::link_brackets( context[50], context[82] );
      refalrts::link_brackets( context[73], context[74] );
      refalrts::link_brackets( context[81], context[78] );
      refalrts::link_brackets( context[77], context[86] );
      refalrts::link_brackets( context[69], context[70] );
      refalrts::link_brackets( context[57], context[58] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[0], context[22] );
      res = refalrts::splice_elem( res, context[85] );
      res = refalrts::splice_elem( res, context[107] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[105], context[106] );
      res = refalrts::splice_evar( res, context[103], context[104] );
      res = refalrts::splice_evar( res, context[62], context[34] );
      res = refalrts::splice_evar( res, context[101], context[102] );
      res = refalrts::splice_evar( res, context[99], context[100] );
      res = refalrts::splice_evar( res, context[61], context[65] );
      res = refalrts::splice_evar( res, context[82], context[66] );
      res = refalrts::splice_evar( res, context[97], context[98] );
      res = refalrts::splice_evar( res, context[74], context[50] );
      res = refalrts::splice_evar( res, context[95], context[96] );
      res = refalrts::splice_evar( res, context[78], context[73] );
      res = refalrts::splice_evar( res, context[93], context[94] );
      res = refalrts::splice_evar( res, context[86], context[81] );
      res = refalrts::splice_evar( res, context[91], context[92] );
      res = refalrts::splice_elem( res, context[77] );
      res = refalrts::splice_evar( res, context[89], context[90] );
      res = refalrts::splice_evar( res, context[69], context[70] );
      res = refalrts::splice_evar( res, context[49], context[58] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@11/4 t.SrcPos0/5 (/9 e.FuncName0/35 )/10 (/13 e.Prefix0/37 )/14 (/17 e.Call/39 )/18 (/21 e.ContextVars$b/41 )/22 t.Next/33 e.Tail/43 >/1
    context[35] = context[23];
    context[36] = context[24];
    context[37] = context[25];
    context[38] = context[26];
    context[39] = context[27];
    context[40] = context[28];
    context[41] = context[29];
    context[42] = context[30];
    context[43] = context[31];
    context[44] = context[32];
    // closed e.FuncName0 as range 35
    // closed e.Prefix0 as range 37
    // closed e.Call as range 39
    // closed e.ContextVars$b as range 41
    // closed e.Tail as range 43
    //DEBUG: t.SrcPos0: 5
    //DEBUG: t.Next: 33
    //DEBUG: e.FuncName0: 35
    //DEBUG: e.Prefix0: 37
    //DEBUG: e.Call: 39
    //DEBUG: e.ContextVars$b: 41
    //DEBUG: e.Tail: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </45 & CheckPatternPairs$1\1*1/46 t.SrcPos0/5/47 (/49 e.FuncName0/35/50 )/52 (/53 e.Prefix0/37/54 ':'/56 e.Call/39/57 )/59 (/60 e.ContextVars$b/41/61 )/63 Tile{ AsIs: t.Next/33 } >/64 Tile{ AsIs: </0 AsIs: & Map@11/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/35 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/37 AsIs: )/14 AsIs: (/17 AsIs: e.Call/39 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars$b/41 AsIs: )/22 } Tile{ AsIs: e.Tail/43 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[45]);
    refalrts::alloc_name(vm, context[46], functions[efunc_gen_CheckPatternPairs_S1L1D1]);
    refalrts::copy_evar(vm, context[47], context[48], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[49]);
    refalrts::copy_evar(vm, context[50], context[51], context[35], context[36]);
    refalrts::alloc_close_bracket(vm, context[52]);
    refalrts::alloc_open_bracket(vm, context[53]);
    refalrts::copy_evar(vm, context[54], context[55], context[37], context[38]);
    refalrts::alloc_char(vm, context[56], ':');
    refalrts::copy_evar(vm, context[57], context[58], context[39], context[40]);
    refalrts::alloc_close_bracket(vm, context[59]);
    refalrts::alloc_open_bracket(vm, context[60]);
    refalrts::copy_evar(vm, context[61], context[62], context[41], context[42]);
    refalrts::alloc_close_bracket(vm, context[63]);
    refalrts::alloc_close_call(vm, context[64]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::push_stack( vm, context[64] );
    refalrts::push_stack( vm, context[45] );
    refalrts::link_brackets( context[60], context[63] );
    refalrts::link_brackets( context[53], context[59] );
    refalrts::link_brackets( context[49], context[52] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[0], context[22] );
    res = refalrts::splice_elem( res, context[64] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[45], context[63] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@11/4 t.SrcPos0/5 (/9 e.FuncName0/23 )/10 (/13 e.Prefix0/25 )/14 (/17 e.Call/27 )/18 (/21 e.ContextVars$b/29 )/22 >/1
    context[23] = context[7];
    context[24] = context[8];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.FuncName0 as range 23
    // closed e.Prefix0 as range 25
    // closed e.Call as range 27
    // closed e.ContextVars$b as range 29
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 23
    //DEBUG: e.Prefix0: 25
    //DEBUG: e.Call: 27
    //DEBUG: e.ContextVars$b: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@11/4 t.SrcPos0/5 (/9 e.FuncName0/23 )/10 (/13 e.Prefix0/25 )/14 (/17 e.Call/27 )/18 (/21 e.ContextVars$b/29 )/22 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@11/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix0/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars$b/19 )/22 e.items/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix0 as range 11
  // closed e.Call as range 15
  // closed e.ContextVars$b as range 19
  // closed e.items as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars$b: 19
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </23 Tile{ HalfReuse: & Map@0/17 } Tile{ HalfReuse: [*]/0 Reuse: & CheckPatternPairs$1\1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/11 HalfReuse: ':'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars$b/19 AsIs: )/22 } {*}/24 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_unwrapped_closure(vm, context[24], context[0]);
  refalrts::reinit_name(context[17], functions[efunc_gen_Map_Z0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1L1Z0]);
  refalrts::reinit_char(context[14], ':');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[13], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_evar( res, context[18], context[22] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[0], context[14] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_elem( res, context[23] );
  refalrts::use( res );
  refalrts::wrap_closure( context[24] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z11("Map@11", COOKIE1_, COOKIE2_, func_gen_Map_Z11);


static refalrts::FnResult func_gen_Map_Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 108 elems
  refalrts::Iter context[108];
  refalrts::zeros( context, 108 );
  // </0 & Map@12/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@12/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 e.new6/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 2
  do {
    // </0 & Map@12/4 t.new7/5 (/9 e.new10/23 )/10 (/13 e.new11/25 )/14 (/17 e.new12/27 )/18 (/21 e.new13/29 )/22 t.new8/33 e.new9/31 >/1
    context[23] = context[7];
    context[24] = context[8];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.new10 as range 23
    // closed e.new11 as range 25
    // closed e.new12 as range 27
    // closed e.new13 as range 29
    context[34] = refalrts::tvar_left( context[33], context[31], context[32] );
    if( ! context[34] )
      continue;
    // closed e.new9 as range 31
    do {
      // </0 & Map@12/4 t.SrcPos0/5 (/9 e.FuncName0/35 )/10 (/13 e.Prefix0/37 )/14 (/17 e.Call/39 )/18 (/21 e.ContextVars$b/41 )/22 (/33 (/49 (/53 (/57 e.01/55 )/58 e.04/51 (/77 e.05/75 )/78 (/73 e.03/71 )/74 )/54 s.Num-L/87 )/50 (/61 (/65 (/69 e.07/67 )/70 e.10/63 (/85 e.11/83 )/86 (/81 e.09/79 )/82 )/66 s.Num-R/88 )/62 )/34 e.Tail/43 >/1
      context[35] = context[23];
      context[36] = context[24];
      context[37] = context[25];
      context[38] = context[26];
      context[39] = context[27];
      context[40] = context[28];
      context[41] = context[29];
      context[42] = context[30];
      context[43] = context[31];
      context[44] = context[32];
      context[45] = 0;
      context[46] = 0;
      if( ! refalrts::brackets_term( context[45], context[46], context[33] ) )
        continue;
      context[47] = 0;
      context[48] = 0;
      context[49] = refalrts::brackets_left( context[47], context[48], context[45], context[46] );
      if( ! context[49] )
        continue;
      refalrts::bracket_pointers(context[49], context[50]);
      context[51] = 0;
      context[52] = 0;
      context[53] = refalrts::brackets_left( context[51], context[52], context[47], context[48] );
      if( ! context[53] )
        continue;
      refalrts::bracket_pointers(context[53], context[54]);
      context[55] = 0;
      context[56] = 0;
      context[57] = refalrts::brackets_left( context[55], context[56], context[51], context[52] );
      if( ! context[57] )
        continue;
      refalrts::bracket_pointers(context[57], context[58]);
      context[59] = 0;
      context[60] = 0;
      context[61] = refalrts::brackets_left( context[59], context[60], context[45], context[46] );
      if( ! context[61] )
        continue;
      refalrts::bracket_pointers(context[61], context[62]);
      context[63] = 0;
      context[64] = 0;
      context[65] = refalrts::brackets_left( context[63], context[64], context[59], context[60] );
      if( ! context[65] )
        continue;
      refalrts::bracket_pointers(context[65], context[66]);
      context[67] = 0;
      context[68] = 0;
      context[69] = refalrts::brackets_left( context[67], context[68], context[63], context[64] );
      if( ! context[69] )
        continue;
      refalrts::bracket_pointers(context[69], context[70]);
      context[71] = 0;
      context[72] = 0;
      context[73] = refalrts::brackets_right( context[71], context[72], context[51], context[52] );
      if( ! context[73] )
        continue;
      refalrts::bracket_pointers(context[73], context[74]);
      context[75] = 0;
      context[76] = 0;
      context[77] = refalrts::brackets_right( context[75], context[76], context[51], context[52] );
      if( ! context[77] )
        continue;
      refalrts::bracket_pointers(context[77], context[78]);
      context[79] = 0;
      context[80] = 0;
      context[81] = refalrts::brackets_right( context[79], context[80], context[63], context[64] );
      if( ! context[81] )
        continue;
      refalrts::bracket_pointers(context[81], context[82]);
      context[83] = 0;
      context[84] = 0;
      context[85] = refalrts::brackets_right( context[83], context[84], context[63], context[64] );
      if( ! context[85] )
        continue;
      refalrts::bracket_pointers(context[85], context[86]);
      if( ! refalrts::empty_seq( context[45], context[46] ) )
        continue;
      // closed e.FuncName0 as range 35
      // closed e.Prefix0 as range 37
      // closed e.Call as range 39
      // closed e.ContextVars$b as range 41
      // closed e.01 as range 55
      // closed e.04 as range 51
      // closed e.05 as range 75
      // closed e.03 as range 71
      // closed e.07 as range 67
      // closed e.10 as range 63
      // closed e.11 as range 83
      // closed e.09 as range 79
      // closed e.Tail as range 43
      if( ! refalrts::svar_left( context[87], context[47], context[48] ) )
        continue;
      if( ! refalrts::empty_seq( context[47], context[48] ) )
        continue;
      if( ! refalrts::svar_left( context[88], context[59], context[60] ) )
        continue;
      if( ! refalrts::empty_seq( context[59], context[60] ) )
        continue;
      //DEBUG: t.SrcPos0: 5
      //DEBUG: e.FuncName0: 35
      //DEBUG: e.Prefix0: 37
      //DEBUG: e.Call: 39
      //DEBUG: e.ContextVars$b: 41
      //DEBUG: e.01: 55
      //DEBUG: e.04: 51
      //DEBUG: e.05: 75
      //DEBUG: e.03: 71
      //DEBUG: e.07: 67
      //DEBUG: e.10: 63
      //DEBUG: e.11: 83
      //DEBUG: e.09: 79
      //DEBUG: e.Tail: 43
      //DEBUG: s.Num-L: 87
      //DEBUG: s.Num-R: 88

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.04/51 {REMOVED TILE} e.05/75 {REMOVED TILE} e.03/71 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.10/63 {REMOVED TILE} e.11/83 {REMOVED TILE} e.09/79 {REMOVED TILE} s.Num-R/88 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </49 HalfReuse: & CheckPatternPairs$1\1:1@3/53 AsIs: (/57 AsIs: e.01/55 AsIs: )/58 } Tile{ AsIs: (/69 AsIs: e.07/67 AsIs: )/70 } t.SrcPos0/5/89 Tile{ AsIs: (/77 } e.FuncName0/35/91 Tile{ AsIs: )/86 AsIs: (/81 } e.Prefix0/37/93 Tile{ AsIs: )/78 AsIs: (/73 } e.Call/39/95 Tile{ AsIs: )/74 HalfReuse: s.Num-R88 /54 AsIs: s.Num-L/87 HalfReuse: (/50 } e.ContextVars$b/41/97 Tile{ AsIs: )/82 HalfReuse: </66 } Tile{ HalfReuse: & GenericMatch/61 AsIs: (/65 } e.ContextVars$b/41/99 e.01/55/101 Tile{ AsIs: )/62 HalfReuse: (/34 } e.ContextVars$b/41/103 e.07/67/105 Tile{ HalfReuse: )/33 } >/107 Tile{ HalfReuse: >/85 } Tile{ AsIs: </0 AsIs: & Map@12/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/35 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/37 AsIs: )/14 AsIs: (/17 AsIs: e.Call/39 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars$b/41 AsIs: )/22 } Tile{ AsIs: e.Tail/43 } Tile{ AsIs: >/1 ]] }
      refalrts::copy_evar(vm, context[89], context[90], context[5], context[6]);
      refalrts::copy_evar(vm, context[91], context[92], context[35], context[36]);
      refalrts::copy_evar(vm, context[93], context[94], context[37], context[38]);
      refalrts::copy_evar(vm, context[95], context[96], context[39], context[40]);
      refalrts::copy_evar(vm, context[97], context[98], context[41], context[42]);
      refalrts::copy_evar(vm, context[99], context[100], context[41], context[42]);
      refalrts::copy_evar(vm, context[101], context[102], context[55], context[56]);
      refalrts::copy_evar(vm, context[103], context[104], context[41], context[42]);
      refalrts::copy_evar(vm, context[105], context[106], context[67], context[68]);
      refalrts::alloc_close_call(vm, context[107]);
      refalrts::reinit_open_call(context[49]);
      refalrts::reinit_name(context[53], functions[efunc_gen_CheckPatternPairs_S1L1B1Z3]);
      refalrts::reinit_svar( context[54], context[88] );
      refalrts::reinit_open_bracket(context[50]);
      refalrts::reinit_open_call(context[66]);
      refalrts::reinit_name(context[61], functions[efunc_GenericMatch]);
      refalrts::reinit_open_bracket(context[34]);
      refalrts::reinit_close_bracket(context[33]);
      refalrts::reinit_close_call(context[85]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::push_stack( vm, context[85] );
      refalrts::push_stack( vm, context[49] );
      refalrts::push_stack( vm, context[107] );
      refalrts::push_stack( vm, context[66] );
      refalrts::link_brackets( context[34], context[33] );
      refalrts::link_brackets( context[65], context[62] );
      refalrts::link_brackets( context[50], context[82] );
      refalrts::link_brackets( context[73], context[74] );
      refalrts::link_brackets( context[81], context[78] );
      refalrts::link_brackets( context[77], context[86] );
      refalrts::link_brackets( context[69], context[70] );
      refalrts::link_brackets( context[57], context[58] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[43], context[44] );
      res = refalrts::splice_evar( res, context[0], context[22] );
      res = refalrts::splice_elem( res, context[85] );
      res = refalrts::splice_elem( res, context[107] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[105], context[106] );
      res = refalrts::splice_evar( res, context[103], context[104] );
      res = refalrts::splice_evar( res, context[62], context[34] );
      res = refalrts::splice_evar( res, context[101], context[102] );
      res = refalrts::splice_evar( res, context[99], context[100] );
      res = refalrts::splice_evar( res, context[61], context[65] );
      res = refalrts::splice_evar( res, context[82], context[66] );
      res = refalrts::splice_evar( res, context[97], context[98] );
      res = refalrts::splice_evar( res, context[74], context[50] );
      res = refalrts::splice_evar( res, context[95], context[96] );
      res = refalrts::splice_evar( res, context[78], context[73] );
      res = refalrts::splice_evar( res, context[93], context[94] );
      res = refalrts::splice_evar( res, context[86], context[81] );
      res = refalrts::splice_evar( res, context[91], context[92] );
      res = refalrts::splice_elem( res, context[77] );
      res = refalrts::splice_evar( res, context[89], context[90] );
      res = refalrts::splice_evar( res, context[69], context[70] );
      res = refalrts::splice_evar( res, context[49], context[58] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@12/4 t.SrcPos0/5 (/9 e.FuncName0/35 )/10 (/13 e.Prefix0/37 )/14 (/17 e.Call/39 )/18 (/21 e.ContextVars$b/41 )/22 t.Next/33 e.Tail/43 >/1
    context[35] = context[23];
    context[36] = context[24];
    context[37] = context[25];
    context[38] = context[26];
    context[39] = context[27];
    context[40] = context[28];
    context[41] = context[29];
    context[42] = context[30];
    context[43] = context[31];
    context[44] = context[32];
    // closed e.FuncName0 as range 35
    // closed e.Prefix0 as range 37
    // closed e.Call as range 39
    // closed e.ContextVars$b as range 41
    // closed e.Tail as range 43
    //DEBUG: t.SrcPos0: 5
    //DEBUG: t.Next: 33
    //DEBUG: e.FuncName0: 35
    //DEBUG: e.Prefix0: 37
    //DEBUG: e.Call: 39
    //DEBUG: e.ContextVars$b: 41
    //DEBUG: e.Tail: 43

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </45 & CheckPatternPairs$1\1*1/46 t.SrcPos0/5/47 (/49 e.FuncName0/35/50 )/52 (/53 e.Prefix0/37/54 '\\'/56 e.Call/39/57 )/59 (/60 e.ContextVars$b/41/61 )/63 Tile{ AsIs: t.Next/33 } >/64 Tile{ AsIs: </0 AsIs: & Map@12/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/35 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/37 AsIs: )/14 AsIs: (/17 AsIs: e.Call/39 AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars$b/41 AsIs: )/22 } Tile{ AsIs: e.Tail/43 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[45]);
    refalrts::alloc_name(vm, context[46], functions[efunc_gen_CheckPatternPairs_S1L1D1]);
    refalrts::copy_evar(vm, context[47], context[48], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[49]);
    refalrts::copy_evar(vm, context[50], context[51], context[35], context[36]);
    refalrts::alloc_close_bracket(vm, context[52]);
    refalrts::alloc_open_bracket(vm, context[53]);
    refalrts::copy_evar(vm, context[54], context[55], context[37], context[38]);
    refalrts::alloc_char(vm, context[56], '\\');
    refalrts::copy_evar(vm, context[57], context[58], context[39], context[40]);
    refalrts::alloc_close_bracket(vm, context[59]);
    refalrts::alloc_open_bracket(vm, context[60]);
    refalrts::copy_evar(vm, context[61], context[62], context[41], context[42]);
    refalrts::alloc_close_bracket(vm, context[63]);
    refalrts::alloc_close_call(vm, context[64]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::push_stack( vm, context[64] );
    refalrts::push_stack( vm, context[45] );
    refalrts::link_brackets( context[60], context[63] );
    refalrts::link_brackets( context[53], context[59] );
    refalrts::link_brackets( context[49], context[52] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[0], context[22] );
    res = refalrts::splice_elem( res, context[64] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[45], context[63] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@12/4 t.SrcPos0/5 (/9 e.FuncName0/23 )/10 (/13 e.Prefix0/25 )/14 (/17 e.Call/27 )/18 (/21 e.ContextVars$b/29 )/22 >/1
    context[23] = context[7];
    context[24] = context[8];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.FuncName0 as range 23
    // closed e.Prefix0 as range 25
    // closed e.Call as range 27
    // closed e.ContextVars$b as range 29
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 23
    //DEBUG: e.Prefix0: 25
    //DEBUG: e.Call: 27
    //DEBUG: e.ContextVars$b: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@12/4 t.SrcPos0/5 (/9 e.FuncName0/23 )/10 (/13 e.Prefix0/25 )/14 (/17 e.Call/27 )/18 (/21 e.ContextVars$b/29 )/22 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@12/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix0/11 )/14 (/17 e.Call/15 )/18 (/21 e.ContextVars$b/19 )/22 e.items/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix0 as range 11
  // closed e.Call as range 15
  // closed e.ContextVars$b as range 19
  // closed e.items as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.ContextVars$b: 19
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </23 Tile{ HalfReuse: & Map@0/17 } Tile{ HalfReuse: [*]/0 Reuse: & CheckPatternPairs$1\1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/11 HalfReuse: '\\'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/18 AsIs: (/21 AsIs: e.ContextVars$b/19 AsIs: )/22 } {*}/24 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[23]);
  refalrts::alloc_unwrapped_closure(vm, context[24], context[0]);
  refalrts::reinit_name(context[17], functions[efunc_gen_Map_Z0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1L1Z0]);
  refalrts::reinit_char(context[14], '\\');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[13], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[24] );
  res = refalrts::splice_evar( res, context[18], context[22] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[0], context[14] );
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_elem( res, context[23] );
  refalrts::use( res );
  refalrts::wrap_closure( context[24] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z12("Map@12", COOKIE1_, COOKIE2_, func_gen_Map_Z12);


static refalrts::FnResult func_gen_CreateScreeningWarning_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & CreateScreeningWarning@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CreateScreeningWarning@2/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 2
  do {
    // </0 & CreateScreeningWarning@2/4 t.SrcPos0/5 (/9 e.Name/15 )/10 (/13 e.Call/17 )/14 e.Call0/19 >/1
    context[15] = context[7];
    context[16] = context[8];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.Name as range 15
    // closed e.Call as range 17
    // closed e.Call0 as range 19
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.Name: 15
    //DEBUG: e.Call: 17
    //DEBUG: e.Call0: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Warning/4 } # screening/21 Tile{ AsIs: t.SrcPos0/5 } # Screening/22 Tile{ AsIs: (/9 AsIs: e.Name/15 AsIs: )/10 AsIs: (/13 } '$'/23 Tile{ AsIs: e.Call/17 } )/24 (/25 Tile{ HalfReuse: '$'/14 AsIs: e.Call0/19 HalfReuse: )/1 } )/26 Tile{ ]] }
    refalrts::alloc_ident(vm, context[21], identifiers[ident_screening]);
    refalrts::alloc_ident(vm, context[22], identifiers[ident_Screening]);
    refalrts::alloc_char(vm, context[23], '$');
    refalrts::alloc_close_bracket(vm, context[24]);
    refalrts::alloc_open_bracket(vm, context[25]);
    refalrts::alloc_close_bracket(vm, context[26]);
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Warning]);
    refalrts::reinit_char(context[14], '$');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[26] );
    refalrts::link_brackets( context[25], context[1] );
    refalrts::link_brackets( context[13], context[24] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[26] );
    res = refalrts::splice_evar( res, context[14], context[1] );
    res = refalrts::splice_evar( res, context[24], context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[9], context[13] );
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_elem( res, context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CreateScreeningWarning@2/4 t.SrcPos0/5 (/9 e.Name/7 )/10 (/13 e.Call/11 )/14 e.Call0/2 >/1
  // closed e.Name as range 7
  // closed e.Call as range 11
  // closed e.Call0 as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.Name: 7
  //DEBUG: e.Call: 11
  //DEBUG: e.Call0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CreateScreeningWarning@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.Name/7 AsIs: )/10 AsIs: (/13 } '$'/15 Tile{ AsIs: e.Call/11 } Tile{ AsIs: )/14 } (/16 '$'/17 Tile{ AsIs: e.Call0/2 } )/18 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_char(vm, context[15], '$');
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_char(vm, context[17], '$');
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::update_name(context[4], functions[efunc_gen_CreateScreeningWarning_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[16], context[18] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[16], context[17] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_elem( res, context[15] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CreateScreeningWarning_Z2("CreateScreeningWarning@2", COOKIE1_, COOKIE2_, func_gen_CreateScreeningWarning_Z2);


static refalrts::FnResult func_gen_CheckPatternPairs_S1L1B1S3B1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & CheckPatternPairs$1\1:1$3:1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckPatternPairs$1\1:1$3:1@1/4 t.new1/5 (/9 e.new2/7 )/10 s.new3/11 s.new4/12 e.new5/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 2
  do {
    // </0 & CheckPatternPairs$1\1:1$3:1@1/4 t.new6/5 (/9 e.new11/13 )/10 s.new7/11 s.new8/12 s.new9/17 e.new10/15 >/1
    context[13] = context[7];
    context[14] = context[8];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.new11 as range 13
    if( ! refalrts::svar_left( context[17], context[15], context[16] ) )
      continue;
    // closed e.new10 as range 15
    do {
      // </0 & CheckPatternPairs$1\1:1$3:1@1/4 t.SrcPos0/5 (/9 e.Name/18 )/10 s.Num-R0/11 s.Num-L0/12 # True/17 e.Other/20 >/1
      context[18] = context[13];
      context[19] = context[14];
      context[20] = context[15];
      context[21] = context[16];
      if( ! refalrts::ident_term( identifiers[ident_True], context[17] ) )
        continue;
      // closed e.Name as range 18
      // closed e.Other as range 20
      //DEBUG: t.SrcPos0: 5
      //DEBUG: s.Num-R0: 11
      //DEBUG: s.Num-L0: 12
      //DEBUG: e.Name: 18
      //DEBUG: e.Other: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Other/20 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CreateScreeningWarning@2/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.Name/18 AsIs: )/10 } (/22 </23 & Symb/24 Tile{ AsIs: s.Num-R0/11 } >/25 )/26 </27 & Symb/28 Tile{ AsIs: s.Num-L0/12 HalfReuse: >/17 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[22]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::alloc_open_call(vm, context[27]);
      refalrts::alloc_name(vm, context[28], functions[efunc_Symb]);
      refalrts::update_name(context[4], functions[efunc_gen_CreateScreeningWarning_Z2]);
      refalrts::reinit_close_call(context[17]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[27] );
      refalrts::link_brackets( context[22], context[26] );
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[12], context[17] );
      res = refalrts::splice_evar( res, context[25], context[28] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[22], context[24] );
      refalrts::splice_to_freelist_open( vm, context[10], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckPatternPairs$1\1:1$3:1@1/4 t.SrcPos0/5 (/9 e.Name/18 )/10 s.Num-R0/11 s.Num-L0/12 # False/17 >/1
    context[18] = context[13];
    context[19] = context[14];
    if( ! refalrts::ident_term( identifiers[ident_False], context[17] ) )
      continue;
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    // closed e.Name as range 18
    //DEBUG: t.SrcPos0: 5
    //DEBUG: s.Num-R0: 11
    //DEBUG: s.Num-L0: 12
    //DEBUG: e.Name: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckPatternPairs$1\1:1$3:1@1/4 t.SrcPos0/5 (/9 e.Name/18 )/10 s.Num-R0/11 s.Num-L0/12 # False/17 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPatternPairs$1\1:1$3:1@1/4 t.SrcPos0/5 (/9 e.Name/7 )/10 s.Num-R0/11 s.Num-L0/12 e.dyn/2 >/1
  // closed e.Name as range 7
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: s.Num-R0: 11
  //DEBUG: s.Num-L0: 12
  //DEBUG: e.Name: 7
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1\1:1$3:1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.Name/7 AsIs: )/10 } (/13 )/14 Tile{ AsIs: s.Num-R0/11 AsIs: s.Num-L0/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1L1B1S3B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[11];
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckPatternPairs_S1L1B1S3B1Z1("CheckPatternPairs$1\\1:1$3:1@1", COOKIE1_, COOKIE2_, func_gen_CheckPatternPairs_S1L1B1S3B1Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z22(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 59 elems
  refalrts::Iter context[59];
  refalrts::zeros( context, 59 );
  // </0 & DoMapAccum$1=1@22/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@22/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 (/33 e.new8/31 )/34 (/37 e.new9/35 )/38 e.new10/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  context[35] = 0;
  context[36] = 0;
  context[37] = refalrts::brackets_left( context[35], context[36], context[2], context[3] );
  if( ! context[37] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[37], context[38]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  // closed e.new8 as range 31
  // closed e.new9 as range 35
  // closed e.new10 as range 2
  do {
    // </0 & DoMapAccum$1=1@22/4 t.SrcPos0/5 (/9 e.FuncName0/39 )/10 (/13 e.ContextVars0/41 )/14 (/17 e.Pattern0/43 )/18 (/21 e.ContextAllAssignsOrConds/45 )/22 (/25 e.Prefix$a0/47 )/26 (/29 e.Call/49 )/30 (/33 e.Scanned0/51 )/34 (/37 e.Tail0/53 )/38 t.Acc$a/57 e.StepScanned/55 >/1
    context[39] = context[7];
    context[40] = context[8];
    context[41] = context[11];
    context[42] = context[12];
    context[43] = context[15];
    context[44] = context[16];
    context[45] = context[19];
    context[46] = context[20];
    context[47] = context[23];
    context[48] = context[24];
    context[49] = context[27];
    context[50] = context[28];
    context[51] = context[31];
    context[52] = context[32];
    context[53] = context[35];
    context[54] = context[36];
    context[55] = context[2];
    context[56] = context[3];
    // closed e.FuncName0 as range 39
    // closed e.ContextVars0 as range 41
    // closed e.Pattern0 as range 43
    // closed e.ContextAllAssignsOrConds as range 45
    // closed e.Prefix$a0 as range 47
    // closed e.Call as range 49
    // closed e.Scanned0 as range 51
    // closed e.Tail0 as range 53
    context[58] = refalrts::tvar_left( context[57], context[55], context[56] );
    if( ! context[58] )
      continue;
    // closed e.StepScanned as range 55
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 39
    //DEBUG: e.ContextVars0: 41
    //DEBUG: e.Pattern0: 43
    //DEBUG: e.ContextAllAssignsOrConds: 45
    //DEBUG: e.Prefix$a0: 47
    //DEBUG: e.Call: 49
    //DEBUG: e.Scanned0: 51
    //DEBUG: e.Tail0: 53
    //DEBUG: t.Acc$a: 57
    //DEBUG: e.StepScanned: 55

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/33 {REMOVED TILE} )/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@22/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/39 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars0/41 AsIs: )/14 AsIs: (/17 AsIs: e.Pattern0/43 AsIs: )/18 AsIs: (/21 AsIs: e.ContextAllAssignsOrConds/45 AsIs: )/22 AsIs: (/25 AsIs: e.Prefix$a0/47 AsIs: )/26 AsIs: (/29 AsIs: e.Call/49 AsIs: )/30 } Tile{ AsIs: t.Acc$a/57 } Tile{ AsIs: (/37 } Tile{ AsIs: e.Scanned0/51 } Tile{ AsIs: e.StepScanned/55 } Tile{ AsIs: )/38 } Tile{ AsIs: e.Tail0/53 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z22]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[37], context[38] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[53], context[54] );
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[55], context[56] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[57], context[58] );
    refalrts::splice_to_freelist_open( vm, context[30], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@22/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.ContextVars0/11 )/14 (/17 e.Pattern0/15 )/18 (/21 e.ContextAllAssignsOrConds/19 )/22 (/25 e.Prefix$a0/23 )/26 (/29 e.Call/27 )/30 (/33 e.Scanned0/31 )/34 (/37 e.Tail0/35 )/38 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.ContextVars0 as range 11
  // closed e.Pattern0 as range 15
  // closed e.ContextAllAssignsOrConds as range 19
  // closed e.Prefix$a0 as range 23
  // closed e.Call as range 27
  // closed e.Scanned0 as range 31
  // closed e.Tail0 as range 35
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.ContextVars0: 11
  //DEBUG: e.Pattern0: 15
  //DEBUG: e.ContextAllAssignsOrConds: 19
  //DEBUG: e.Prefix$a0: 23
  //DEBUG: e.Call: 27
  //DEBUG: e.Scanned0: 31
  //DEBUG: e.Tail0: 35
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/21 {REMOVED TILE} {REMOVED TILE} (/29 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </14 HalfReuse: & DoMapAccum$1=1@0/17 } Tile{ HalfReuse: [*]/0 Reuse: & CheckSentences\1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.ContextVars0/11 } Tile{ AsIs: e.Pattern0/15 } Tile{ AsIs: e.ContextAllAssignsOrConds/19 } Tile{ AsIs: )/22 AsIs: (/25 AsIs: e.Prefix$a0/23 HalfReuse: '\\'/26 } Tile{ AsIs: e.Call/27 } Tile{ AsIs: )/18 } Tile{ HalfReuse: {*}/30 AsIs: (/33 AsIs: e.Scanned0/31 AsIs: )/34 AsIs: (/37 AsIs: e.Tail0/35 AsIs: )/38 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[14]);
  refalrts::reinit_name(context[17], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_L1Z0]);
  refalrts::reinit_char(context[26], '\\');
  refalrts::reinit_unwrapped_closure(context[30], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[14] );
  refalrts::link_brackets( context[37], context[38] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[25], context[18] );
  refalrts::link_brackets( context[13], context[22] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[30];
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[22], context[26] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[0], context[13] );
  res = refalrts::splice_evar( res, context[14], context[17] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  refalrts::wrap_closure( context[30] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z22("DoMapAccum$1=1@22", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z22);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z23(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 59 elems
  refalrts::Iter context[59];
  refalrts::zeros( context, 59 );
  // </0 & DoMapAccum$1=1@23/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@23/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 (/29 e.new7/27 )/30 (/33 e.new8/31 )/34 (/37 e.new9/35 )/38 e.new10/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  context[27] = 0;
  context[28] = 0;
  context[29] = refalrts::brackets_left( context[27], context[28], context[2], context[3] );
  if( ! context[29] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[29], context[30]);
  context[31] = 0;
  context[32] = 0;
  context[33] = refalrts::brackets_left( context[31], context[32], context[2], context[3] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[33], context[34]);
  context[35] = 0;
  context[36] = 0;
  context[37] = refalrts::brackets_left( context[35], context[36], context[2], context[3] );
  if( ! context[37] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[37], context[38]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  // closed e.new7 as range 27
  // closed e.new8 as range 31
  // closed e.new9 as range 35
  // closed e.new10 as range 2
  do {
    // </0 & DoMapAccum$1=1@23/4 t.SrcPos0/5 (/9 e.FuncName0/39 )/10 (/13 e.ContextVars0/41 )/14 (/17 e.Pattern0/43 )/18 (/21 e.ContextAllAssignsOrConds/45 )/22 (/25 e.Prefix$a0/47 )/26 (/29 e.Call/49 )/30 (/33 e.Scanned0/51 )/34 (/37 e.Tail0/53 )/38 t.Acc$a/57 e.StepScanned/55 >/1
    context[39] = context[7];
    context[40] = context[8];
    context[41] = context[11];
    context[42] = context[12];
    context[43] = context[15];
    context[44] = context[16];
    context[45] = context[19];
    context[46] = context[20];
    context[47] = context[23];
    context[48] = context[24];
    context[49] = context[27];
    context[50] = context[28];
    context[51] = context[31];
    context[52] = context[32];
    context[53] = context[35];
    context[54] = context[36];
    context[55] = context[2];
    context[56] = context[3];
    // closed e.FuncName0 as range 39
    // closed e.ContextVars0 as range 41
    // closed e.Pattern0 as range 43
    // closed e.ContextAllAssignsOrConds as range 45
    // closed e.Prefix$a0 as range 47
    // closed e.Call as range 49
    // closed e.Scanned0 as range 51
    // closed e.Tail0 as range 53
    context[58] = refalrts::tvar_left( context[57], context[55], context[56] );
    if( ! context[58] )
      continue;
    // closed e.StepScanned as range 55
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 39
    //DEBUG: e.ContextVars0: 41
    //DEBUG: e.Pattern0: 43
    //DEBUG: e.ContextAllAssignsOrConds: 45
    //DEBUG: e.Prefix$a0: 47
    //DEBUG: e.Call: 49
    //DEBUG: e.Scanned0: 51
    //DEBUG: e.Tail0: 53
    //DEBUG: t.Acc$a: 57
    //DEBUG: e.StepScanned: 55

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/33 {REMOVED TILE} )/34 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@23/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/39 AsIs: )/10 AsIs: (/13 AsIs: e.ContextVars0/41 AsIs: )/14 AsIs: (/17 AsIs: e.Pattern0/43 AsIs: )/18 AsIs: (/21 AsIs: e.ContextAllAssignsOrConds/45 AsIs: )/22 AsIs: (/25 AsIs: e.Prefix$a0/47 AsIs: )/26 AsIs: (/29 AsIs: e.Call/49 AsIs: )/30 } Tile{ AsIs: t.Acc$a/57 } Tile{ AsIs: (/37 } Tile{ AsIs: e.Scanned0/51 } Tile{ AsIs: e.StepScanned/55 } Tile{ AsIs: )/38 } Tile{ AsIs: e.Tail0/53 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[37], context[38] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[53], context[54] );
    res = refalrts::splice_elem( res, context[38] );
    res = refalrts::splice_evar( res, context[55], context[56] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[57], context[58] );
    refalrts::splice_to_freelist_open( vm, context[30], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@23/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.ContextVars0/11 )/14 (/17 e.Pattern0/15 )/18 (/21 e.ContextAllAssignsOrConds/19 )/22 (/25 e.Prefix$a0/23 )/26 (/29 e.Call/27 )/30 (/33 e.Scanned0/31 )/34 (/37 e.Tail0/35 )/38 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.ContextVars0 as range 11
  // closed e.Pattern0 as range 15
  // closed e.ContextAllAssignsOrConds as range 19
  // closed e.Prefix$a0 as range 23
  // closed e.Call as range 27
  // closed e.Scanned0 as range 31
  // closed e.Tail0 as range 35
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.ContextVars0: 11
  //DEBUG: e.Pattern0: 15
  //DEBUG: e.ContextAllAssignsOrConds: 19
  //DEBUG: e.Prefix$a0: 23
  //DEBUG: e.Call: 27
  //DEBUG: e.Scanned0: 31
  //DEBUG: e.Tail0: 35
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/21 {REMOVED TILE} {REMOVED TILE} (/29 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </14 HalfReuse: & DoMapAccum$1=1@0/17 } Tile{ HalfReuse: [*]/0 Reuse: & CheckSentences\1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 } Tile{ AsIs: e.ContextVars0/11 } Tile{ AsIs: e.Pattern0/15 } Tile{ AsIs: e.ContextAllAssignsOrConds/19 } Tile{ AsIs: )/22 AsIs: (/25 AsIs: e.Prefix$a0/23 HalfReuse: ':'/26 } Tile{ AsIs: e.Call/27 } Tile{ AsIs: )/18 } Tile{ HalfReuse: {*}/30 AsIs: (/33 AsIs: e.Scanned0/31 AsIs: )/34 AsIs: (/37 AsIs: e.Tail0/35 AsIs: )/38 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[14]);
  refalrts::reinit_name(context[17], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_CheckSentences_L1Z0]);
  refalrts::reinit_char(context[26], ':');
  refalrts::reinit_unwrapped_closure(context[30], context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[14] );
  refalrts::link_brackets( context[37], context[38] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[25], context[18] );
  refalrts::link_brackets( context[13], context[22] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[30];
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[22], context[26] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[0], context[13] );
  res = refalrts::splice_evar( res, context[14], context[17] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  refalrts::wrap_closure( context[30] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z23("DoMapAccum$1=1@23", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z23);


static refalrts::FnResult func_gen_CheckPatternPairs_S1L1B1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 60 elems
  refalrts::Iter context[60];
  refalrts::zeros( context, 60 );
  // </0 & CheckPatternPairs$1\1:1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckPatternPairs$1\1:1@2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 t.new3/13 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 s.new7/27 s.new8/28 (/31 e.new9/29 )/32 e.new10/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  if( ! refalrts::svar_left( context[27], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[28], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.new9 as range 29
  // closed e.new10 as range 2
  do {
    // </0 & CheckPatternPairs$1\1:1@2/4 (/7 e.01/33 )/8 (/11 e.07/35 )/12 t.SrcPos0/13 (/17 e.FuncName0/37 )/18 (/21 e.Prefix0/39 )/22 (/25 e.Call/41 )/26 s.Num-R0/27 s.Num-L0/28 (/31 e.ContextVars$b0/43 )/32 e._5/45 >/1
    context[33] = context[5];
    context[34] = context[6];
    context[35] = context[9];
    context[36] = context[10];
    context[37] = context[15];
    context[38] = context[16];
    context[39] = context[19];
    context[40] = context[20];
    context[41] = context[23];
    context[42] = context[24];
    context[43] = context[29];
    context[44] = context[30];
    context[45] = context[2];
    context[46] = context[3];
    // closed e.01 as range 33
    // closed e.07 as range 35
    // closed e.FuncName0 as range 37
    // closed e.Prefix0 as range 39
    // closed e.Call as range 41
    // closed e.ContextVars$b0 as range 43
    // closed e._5 as range 45
    //DEBUG: t.SrcPos0: 13
    //DEBUG: s.Num-R0: 27
    //DEBUG: s.Num-L0: 28
    //DEBUG: e.01: 33
    //DEBUG: e.07: 35
    //DEBUG: e.FuncName0: 37
    //DEBUG: e.Prefix0: 39
    //DEBUG: e.Call: 41
    //DEBUG: e.ContextVars$b0: 43
    //DEBUG: e._5: 45
    //13: t.SrcPos0
    //27: s.Num-R0
    //28: s.Num-L0
    //33: e.01
    //35: e.07
    //37: e.FuncName0
    //39: e.Prefix0
    //41: e.Call
    //43: e.ContextVars$b0
    //45: e._5
    //51: e.01
    //55: e.07

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[47]);
    refalrts::alloc_name(vm, context[49], functions[efunc_gen_CheckPatternPairs_S1L1B1Z2S1C1]);
    refalrts::alloc_open_bracket(vm, context[50]);
    refalrts::copy_evar(vm, context[51], context[52], context[33], context[34]);
    refalrts::alloc_close_bracket(vm, context[53]);
    refalrts::alloc_open_bracket(vm, context[54]);
    refalrts::copy_evar(vm, context[55], context[56], context[35], context[36]);
    refalrts::alloc_close_bracket(vm, context[57]);
    refalrts::alloc_close_call(vm, context[48]);
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[47] );
    res = refalrts::splice_elem( res, context[48] );
    refalrts::link_brackets( context[54], context[57] );
    res = refalrts::splice_elem( res, context[57] );
    res = refalrts::splice_evar( res, context[55], context[56] );
    res = refalrts::splice_elem( res, context[54] );
    refalrts::link_brackets( context[50], context[53] );
    res = refalrts::splice_elem( res, context[53] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_elem( res, context[50] );
    res = refalrts::splice_elem( res, context[49] );
    res = refalrts::splice_elem( res, context[47] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </47 & CheckPatternPairs$1\1:1@2$1?1/51 (/54 )/55 (/58 )/59 >/48
      context[49] = 0;
      context[50] = 0;
      context[51] = refalrts::call_left( context[49], context[50], context[47], context[48] );
      context[52] = 0;
      context[53] = 0;
      context[54] = refalrts::brackets_left( context[52], context[53], context[49], context[50] );
      if( ! context[54] )
        continue;
      refalrts::bracket_pointers(context[54], context[55]);
      context[56] = 0;
      context[57] = 0;
      context[58] = refalrts::brackets_left( context[56], context[57], context[49], context[50] );
      if( ! context[58] )
        continue;
      refalrts::bracket_pointers(context[58], context[59]);
      if( ! refalrts::empty_seq( context[52], context[53] ) )
        continue;
      if( ! refalrts::empty_seq( context[56], context[57] ) )
        continue;
      if( ! refalrts::empty_seq( context[49], context[50] ) )
        continue;
      //DEBUG: t.SrcPos0: 13
      //DEBUG: s.Num-R0: 27
      //DEBUG: s.Num-L0: 28
      //DEBUG: e.01: 33
      //DEBUG: e.07: 35
      //DEBUG: e.FuncName0: 37
      //DEBUG: e.Prefix0: 39
      //DEBUG: e.Call: 41
      //DEBUG: e.ContextVars$b0: 43
      //DEBUG: e._5: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & CheckPatternPairs$1\1:1@2/4 (/7 e.01/33 {REMOVED TILE} e.07/35 {REMOVED TILE} s.Num-R0/27 s.Num-L0/28 {REMOVED TILE} e.ContextVars$b0/43 )/32 e._5/45 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CreateScreeningWarning@3/12 AsIs: t.SrcPos0/13 AsIs: (/17 AsIs: e.FuncName0/37 AsIs: )/18 AsIs: (/21 AsIs: e.Prefix0/39 AsIs: )/22 AsIs: (/25 AsIs: e.Call/41 AsIs: )/26 } Tile{ AsIs: (/31 } Tile{ HalfReuse: </8 HalfReuse: & Symb/11 } Tile{ HalfReuse: s.Num-R027 /47 HalfReuse: >/51 HalfReuse: )/54 HalfReuse: </55 HalfReuse: & Symb/58 HalfReuse: s.Num-L028 /59 AsIs: >/48 AsIs: >/1 ]] }
      refalrts::reinit_name(context[12], functions[efunc_gen_CreateScreeningWarning_Z3]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[11], functions[efunc_Symb]);
      refalrts::reinit_svar( context[47], context[27] );
      refalrts::reinit_close_call(context[51]);
      refalrts::reinit_close_bracket(context[54]);
      refalrts::reinit_open_call(context[55]);
      refalrts::reinit_name(context[58], functions[efunc_Symb]);
      refalrts::reinit_svar( context[59], context[28] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[55] );
      refalrts::link_brackets( context[31], context[54] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[8] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[47];
      res = refalrts::splice_evar( res, context[8], context[11] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[12], context[26] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[47], context[48]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckPatternPairs$1\1:1@2/4 (/7 e.01/33 )/8 (/11 e.07/35 )/12 t.SrcPos0/13 (/17 e.FuncName0/37 )/18 (/21 e.Prefix0/39 )/22 (/25 e.Call/41 )/26 s.Num-R0/27 s.Num-L0/28 (/31 e.ContextVars$b0/43 )/32 # Clear/47 e._5/45 >/1
    context[33] = context[5];
    context[34] = context[6];
    context[35] = context[9];
    context[36] = context[10];
    context[37] = context[15];
    context[38] = context[16];
    context[39] = context[19];
    context[40] = context[20];
    context[41] = context[23];
    context[42] = context[24];
    context[43] = context[29];
    context[44] = context[30];
    context[45] = context[2];
    context[46] = context[3];
    context[47] = refalrts::ident_left( identifiers[ident_Clear], context[45], context[46] );
    if( ! context[47] )
      continue;
    // closed e.01 as range 33
    // closed e.07 as range 35
    // closed e.FuncName0 as range 37
    // closed e.Prefix0 as range 39
    // closed e.Call as range 41
    // closed e.ContextVars$b0 as range 43
    // closed e._5 as range 45
    //DEBUG: t.SrcPos0: 13
    //DEBUG: s.Num-R0: 27
    //DEBUG: s.Num-L0: 28
    //DEBUG: e.01: 33
    //DEBUG: e.07: 35
    //DEBUG: e.FuncName0: 37
    //DEBUG: e.Prefix0: 39
    //DEBUG: e.Call: 41
    //DEBUG: e.ContextVars$b0: 43
    //DEBUG: e._5: 45

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.01/33 {REMOVED TILE} {REMOVED TILE} e.07/35 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.ContextVars$b0/43 {REMOVED TILE} e._5/45 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CreateScreeningWarning@3/12 AsIs: t.SrcPos0/13 AsIs: (/17 AsIs: e.FuncName0/37 AsIs: )/18 AsIs: (/21 AsIs: e.Prefix0/39 AsIs: )/22 AsIs: (/25 AsIs: e.Call/41 AsIs: )/26 } Tile{ AsIs: (/11 } Tile{ HalfReuse: </4 HalfReuse: & Symb/7 } Tile{ AsIs: s.Num-R0/27 } Tile{ HalfReuse: >/8 } Tile{ AsIs: )/32 HalfReuse: </47 } & Symb/48 Tile{ AsIs: s.Num-L0/28 HalfReuse: >/31 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[48], functions[efunc_Symb]);
    refalrts::reinit_name(context[12], functions[efunc_gen_CreateScreeningWarning_Z3]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_Symb]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_open_call(context[47]);
    refalrts::reinit_close_call(context[31]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[47] );
    refalrts::link_brackets( context[11], context[32] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[31] );
    res = refalrts::splice_elem( res, context[48] );
    res = refalrts::splice_evar( res, context[32], context[47] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[12], context[26] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckPatternPairs$1\1:1@2/4 (/7 e.01/33 )/8 (/11 e.07/35 )/12 t.SrcPos0/13 (/17 e.FuncName0/37 )/18 (/21 e.Prefix0/39 )/22 (/25 e.Call/41 )/26 s.Num-R0/27 s.Num-L0/28 (/31 e.ContextVars$b0/43 )/32 e._5/45 >/1
    context[33] = context[5];
    context[34] = context[6];
    context[35] = context[9];
    context[36] = context[10];
    context[37] = context[15];
    context[38] = context[16];
    context[39] = context[19];
    context[40] = context[20];
    context[41] = context[23];
    context[42] = context[24];
    context[43] = context[29];
    context[44] = context[30];
    context[45] = context[2];
    context[46] = context[3];
    // closed e.01 as range 33
    // closed e.07 as range 35
    // closed e.FuncName0 as range 37
    // closed e.Prefix0 as range 39
    // closed e.Call as range 41
    // closed e.ContextVars$b0 as range 43
    // closed e._5 as range 45
    //DEBUG: t.SrcPos0: 13
    //DEBUG: s.Num-R0: 27
    //DEBUG: s.Num-L0: 28
    //DEBUG: e.01: 33
    //DEBUG: e.07: 35
    //DEBUG: e.FuncName0: 37
    //DEBUG: e.Prefix0: 39
    //DEBUG: e.Call: 41
    //DEBUG: e.ContextVars$b0: 43
    //DEBUG: e._5: 45

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e._5/45 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CheckPatternPairs$1\1:1$3:1@2/12 AsIs: t.SrcPos0/13 AsIs: (/17 AsIs: e.FuncName0/37 AsIs: )/18 AsIs: (/21 AsIs: e.Prefix0/39 AsIs: )/22 AsIs: (/25 AsIs: e.Call/41 AsIs: )/26 AsIs: s.Num-R0/27 AsIs: s.Num-L0/28 HalfReuse: </31 } Tile{ HalfReuse: & PatternLanguagesCheck@1/32 } Tile{ AsIs: (/11 } Tile{ AsIs: e.ContextVars$b0/43 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.01/33 AsIs: )/8 } Tile{ AsIs: e.07/35 } >/47 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::reinit_name(context[12], functions[efunc_gen_CheckPatternPairs_S1L1B1S3B1Z2]);
    refalrts::reinit_open_call(context[31]);
    refalrts::reinit_name(context[32], functions[efunc_gen_PatternLanguagesCheck_Z1]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[11], context[4] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[47] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[4], context[8] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[32] );
    res = refalrts::splice_evar( res, context[12], context[31] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPatternPairs$1\1:1@2/4 (/7 e.01/5 )/8 (/11 e.07/9 )/12 t.SrcPos0/13 (/17 e.FuncName0/15 )/18 (/21 e.Prefix0/19 )/22 (/25 e.Call/23 )/26 s.Num-R0/27 s.Num-L0/28 (/31 e.ContextVars$b0/29 )/32 e.dyn/2 >/1
  // closed e.01 as range 5
  // closed e.07 as range 9
  // closed e.FuncName0 as range 15
  // closed e.Prefix0 as range 19
  // closed e.Call as range 23
  // closed e.ContextVars$b0 as range 29
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 13
  //DEBUG: s.Num-R0: 27
  //DEBUG: s.Num-L0: 28
  //DEBUG: e.01: 5
  //DEBUG: e.07: 9
  //DEBUG: e.FuncName0: 15
  //DEBUG: e.Prefix0: 19
  //DEBUG: e.Call: 23
  //DEBUG: e.ContextVars$b0: 29
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/25 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1\1:1@0/4 AsIs: (/7 AsIs: e.01/5 AsIs: )/8 AsIs: (/11 AsIs: e.07/9 AsIs: )/12 AsIs: t.SrcPos0/13 AsIs: (/17 AsIs: e.FuncName0/15 AsIs: )/18 AsIs: (/21 AsIs: e.Prefix0/19 HalfReuse: ':'/22 } Tile{ AsIs: e.Call/23 } Tile{ AsIs: )/26 AsIs: s.Num-R0/27 AsIs: s.Num-L0/28 AsIs: (/31 AsIs: e.ContextVars$b0/29 AsIs: )/32 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1L1B1Z0]);
  refalrts::reinit_char(context[22], ':');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[21], context[26] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[26];
  res = refalrts::splice_evar( res, context[23], context[24] );
  refalrts::splice_to_freelist_open( vm, context[22], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckPatternPairs_S1L1B1Z2("CheckPatternPairs$1\\1:1@2", COOKIE1_, COOKIE2_, func_gen_CheckPatternPairs_S1L1B1Z2);


static refalrts::FnResult func_gen_CheckPatternPairs_S1L1B1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 60 elems
  refalrts::Iter context[60];
  refalrts::zeros( context, 60 );
  // </0 & CheckPatternPairs$1\1:1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckPatternPairs$1\1:1@3/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 t.new3/13 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 (/25 e.new6/23 )/26 s.new7/27 s.new8/28 (/31 e.new9/29 )/32 e.new10/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 23
  if( ! refalrts::svar_left( context[27], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[28], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.new9 as range 29
  // closed e.new10 as range 2
  do {
    // </0 & CheckPatternPairs$1\1:1@3/4 (/7 e.01/33 )/8 (/11 e.07/35 )/12 t.SrcPos0/13 (/17 e.FuncName0/37 )/18 (/21 e.Prefix0/39 )/22 (/25 e.Call/41 )/26 s.Num-R0/27 s.Num-L0/28 (/31 e.ContextVars$b0/43 )/32 e._5/45 >/1
    context[33] = context[5];
    context[34] = context[6];
    context[35] = context[9];
    context[36] = context[10];
    context[37] = context[15];
    context[38] = context[16];
    context[39] = context[19];
    context[40] = context[20];
    context[41] = context[23];
    context[42] = context[24];
    context[43] = context[29];
    context[44] = context[30];
    context[45] = context[2];
    context[46] = context[3];
    // closed e.01 as range 33
    // closed e.07 as range 35
    // closed e.FuncName0 as range 37
    // closed e.Prefix0 as range 39
    // closed e.Call as range 41
    // closed e.ContextVars$b0 as range 43
    // closed e._5 as range 45
    //DEBUG: t.SrcPos0: 13
    //DEBUG: s.Num-R0: 27
    //DEBUG: s.Num-L0: 28
    //DEBUG: e.01: 33
    //DEBUG: e.07: 35
    //DEBUG: e.FuncName0: 37
    //DEBUG: e.Prefix0: 39
    //DEBUG: e.Call: 41
    //DEBUG: e.ContextVars$b0: 43
    //DEBUG: e._5: 45
    //13: t.SrcPos0
    //27: s.Num-R0
    //28: s.Num-L0
    //33: e.01
    //35: e.07
    //37: e.FuncName0
    //39: e.Prefix0
    //41: e.Call
    //43: e.ContextVars$b0
    //45: e._5
    //51: e.01
    //55: e.07

    refalrts::reset_allocator(vm);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::alloc_open_call(vm, context[47]);
    refalrts::alloc_name(vm, context[49], functions[efunc_gen_CheckPatternPairs_S1L1B1Z3S1C1]);
    refalrts::alloc_open_bracket(vm, context[50]);
    refalrts::copy_evar(vm, context[51], context[52], context[33], context[34]);
    refalrts::alloc_close_bracket(vm, context[53]);
    refalrts::alloc_open_bracket(vm, context[54]);
    refalrts::copy_evar(vm, context[55], context[56], context[35], context[36]);
    refalrts::alloc_close_bracket(vm, context[57]);
    refalrts::alloc_close_call(vm, context[48]);
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[47] );
    res = refalrts::splice_elem( res, context[48] );
    refalrts::link_brackets( context[54], context[57] );
    res = refalrts::splice_elem( res, context[57] );
    res = refalrts::splice_evar( res, context[55], context[56] );
    res = refalrts::splice_elem( res, context[54] );
    refalrts::link_brackets( context[50], context[53] );
    res = refalrts::splice_elem( res, context[53] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_elem( res, context[50] );
    res = refalrts::splice_elem( res, context[49] );
    res = refalrts::splice_elem( res, context[47] );
    refalrts::use( res );
    refalrts::FnResult rec_res = refalrts::recursive_call_main_loop(vm);
    if (rec_res != refalrts::cSuccess)
      return rec_res;
    refalrts::this_is_generated_function(vm);
    do {
      // </47 & CheckPatternPairs$1\1:1@3$1?1/51 (/54 )/55 (/58 )/59 >/48
      context[49] = 0;
      context[50] = 0;
      context[51] = refalrts::call_left( context[49], context[50], context[47], context[48] );
      context[52] = 0;
      context[53] = 0;
      context[54] = refalrts::brackets_left( context[52], context[53], context[49], context[50] );
      if( ! context[54] )
        continue;
      refalrts::bracket_pointers(context[54], context[55]);
      context[56] = 0;
      context[57] = 0;
      context[58] = refalrts::brackets_left( context[56], context[57], context[49], context[50] );
      if( ! context[58] )
        continue;
      refalrts::bracket_pointers(context[58], context[59]);
      if( ! refalrts::empty_seq( context[52], context[53] ) )
        continue;
      if( ! refalrts::empty_seq( context[56], context[57] ) )
        continue;
      if( ! refalrts::empty_seq( context[49], context[50] ) )
        continue;
      //DEBUG: t.SrcPos0: 13
      //DEBUG: s.Num-R0: 27
      //DEBUG: s.Num-L0: 28
      //DEBUG: e.01: 33
      //DEBUG: e.07: 35
      //DEBUG: e.FuncName0: 37
      //DEBUG: e.Prefix0: 39
      //DEBUG: e.Call: 41
      //DEBUG: e.ContextVars$b0: 43
      //DEBUG: e._5: 45

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & CheckPatternPairs$1\1:1@3/4 (/7 e.01/33 {REMOVED TILE} e.07/35 {REMOVED TILE} s.Num-R0/27 s.Num-L0/28 {REMOVED TILE} e.ContextVars$b0/43 )/32 e._5/45 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CreateScreeningWarning@4/12 AsIs: t.SrcPos0/13 AsIs: (/17 AsIs: e.FuncName0/37 AsIs: )/18 AsIs: (/21 AsIs: e.Prefix0/39 AsIs: )/22 AsIs: (/25 AsIs: e.Call/41 AsIs: )/26 } Tile{ AsIs: (/31 } Tile{ HalfReuse: </8 HalfReuse: & Symb/11 } Tile{ HalfReuse: s.Num-R027 /47 HalfReuse: >/51 HalfReuse: )/54 HalfReuse: </55 HalfReuse: & Symb/58 HalfReuse: s.Num-L028 /59 AsIs: >/48 AsIs: >/1 ]] }
      refalrts::reinit_name(context[12], functions[efunc_gen_CreateScreeningWarning_Z4]);
      refalrts::reinit_open_call(context[8]);
      refalrts::reinit_name(context[11], functions[efunc_Symb]);
      refalrts::reinit_svar( context[47], context[27] );
      refalrts::reinit_close_call(context[51]);
      refalrts::reinit_close_bracket(context[54]);
      refalrts::reinit_open_call(context[55]);
      refalrts::reinit_name(context[58], functions[efunc_Symb]);
      refalrts::reinit_svar( context[59], context[28] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[48] );
      refalrts::push_stack( vm, context[55] );
      refalrts::link_brackets( context[31], context[54] );
      refalrts::push_stack( vm, context[51] );
      refalrts::push_stack( vm, context[8] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[47];
      res = refalrts::splice_evar( res, context[8], context[11] );
      res = refalrts::splice_elem( res, context[31] );
      res = refalrts::splice_evar( res, context[12], context[26] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    refalrts::splice_to_freelist(vm, context[47], context[48]);
    continue;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckPatternPairs$1\1:1@3/4 (/7 e.01/33 )/8 (/11 e.07/35 )/12 t.SrcPos0/13 (/17 e.FuncName0/37 )/18 (/21 e.Prefix0/39 )/22 (/25 e.Call/41 )/26 s.Num-R0/27 s.Num-L0/28 (/31 e.ContextVars$b0/43 )/32 # Clear/47 e._5/45 >/1
    context[33] = context[5];
    context[34] = context[6];
    context[35] = context[9];
    context[36] = context[10];
    context[37] = context[15];
    context[38] = context[16];
    context[39] = context[19];
    context[40] = context[20];
    context[41] = context[23];
    context[42] = context[24];
    context[43] = context[29];
    context[44] = context[30];
    context[45] = context[2];
    context[46] = context[3];
    context[47] = refalrts::ident_left( identifiers[ident_Clear], context[45], context[46] );
    if( ! context[47] )
      continue;
    // closed e.01 as range 33
    // closed e.07 as range 35
    // closed e.FuncName0 as range 37
    // closed e.Prefix0 as range 39
    // closed e.Call as range 41
    // closed e.ContextVars$b0 as range 43
    // closed e._5 as range 45
    //DEBUG: t.SrcPos0: 13
    //DEBUG: s.Num-R0: 27
    //DEBUG: s.Num-L0: 28
    //DEBUG: e.01: 33
    //DEBUG: e.07: 35
    //DEBUG: e.FuncName0: 37
    //DEBUG: e.Prefix0: 39
    //DEBUG: e.Call: 41
    //DEBUG: e.ContextVars$b0: 43
    //DEBUG: e._5: 45

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} e.01/33 {REMOVED TILE} {REMOVED TILE} e.07/35 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.ContextVars$b0/43 {REMOVED TILE} e._5/45 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CreateScreeningWarning@4/12 AsIs: t.SrcPos0/13 AsIs: (/17 AsIs: e.FuncName0/37 AsIs: )/18 AsIs: (/21 AsIs: e.Prefix0/39 AsIs: )/22 AsIs: (/25 AsIs: e.Call/41 AsIs: )/26 } Tile{ AsIs: (/11 } Tile{ HalfReuse: </4 HalfReuse: & Symb/7 } Tile{ AsIs: s.Num-R0/27 } Tile{ HalfReuse: >/8 } Tile{ AsIs: )/32 HalfReuse: </47 } & Symb/48 Tile{ AsIs: s.Num-L0/28 HalfReuse: >/31 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[48], functions[efunc_Symb]);
    refalrts::reinit_name(context[12], functions[efunc_gen_CreateScreeningWarning_Z4]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_Symb]);
    refalrts::reinit_close_call(context[8]);
    refalrts::reinit_open_call(context[47]);
    refalrts::reinit_close_call(context[31]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[31] );
    refalrts::push_stack( vm, context[47] );
    refalrts::link_brackets( context[11], context[32] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[4] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[28], context[31] );
    res = refalrts::splice_elem( res, context[48] );
    res = refalrts::splice_evar( res, context[32], context[47] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[12], context[26] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CheckPatternPairs$1\1:1@3/4 (/7 e.01/33 )/8 (/11 e.07/35 )/12 t.SrcPos0/13 (/17 e.FuncName0/37 )/18 (/21 e.Prefix0/39 )/22 (/25 e.Call/41 )/26 s.Num-R0/27 s.Num-L0/28 (/31 e.ContextVars$b0/43 )/32 e._5/45 >/1
    context[33] = context[5];
    context[34] = context[6];
    context[35] = context[9];
    context[36] = context[10];
    context[37] = context[15];
    context[38] = context[16];
    context[39] = context[19];
    context[40] = context[20];
    context[41] = context[23];
    context[42] = context[24];
    context[43] = context[29];
    context[44] = context[30];
    context[45] = context[2];
    context[46] = context[3];
    // closed e.01 as range 33
    // closed e.07 as range 35
    // closed e.FuncName0 as range 37
    // closed e.Prefix0 as range 39
    // closed e.Call as range 41
    // closed e.ContextVars$b0 as range 43
    // closed e._5 as range 45
    //DEBUG: t.SrcPos0: 13
    //DEBUG: s.Num-R0: 27
    //DEBUG: s.Num-L0: 28
    //DEBUG: e.01: 33
    //DEBUG: e.07: 35
    //DEBUG: e.FuncName0: 37
    //DEBUG: e.Prefix0: 39
    //DEBUG: e.Call: 41
    //DEBUG: e.ContextVars$b0: 43
    //DEBUG: e._5: 45

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e._5/45 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & CheckPatternPairs$1\1:1$3:1@3/12 AsIs: t.SrcPos0/13 AsIs: (/17 AsIs: e.FuncName0/37 AsIs: )/18 AsIs: (/21 AsIs: e.Prefix0/39 AsIs: )/22 AsIs: (/25 AsIs: e.Call/41 AsIs: )/26 AsIs: s.Num-R0/27 AsIs: s.Num-L0/28 HalfReuse: </31 } Tile{ HalfReuse: & PatternLanguagesCheck@1/32 } Tile{ AsIs: (/11 } Tile{ AsIs: e.ContextVars$b0/43 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.01/33 AsIs: )/8 } Tile{ AsIs: e.07/35 } >/47 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::reinit_name(context[12], functions[efunc_gen_CheckPatternPairs_S1L1B1S3B1Z3]);
    refalrts::reinit_open_call(context[31]);
    refalrts::reinit_name(context[32], functions[efunc_gen_PatternLanguagesCheck_Z1]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[11], context[4] );
    refalrts::link_brackets( context[25], context[26] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[47] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[4], context[8] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_elem( res, context[32] );
    res = refalrts::splice_evar( res, context[12], context[31] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPatternPairs$1\1:1@3/4 (/7 e.01/5 )/8 (/11 e.07/9 )/12 t.SrcPos0/13 (/17 e.FuncName0/15 )/18 (/21 e.Prefix0/19 )/22 (/25 e.Call/23 )/26 s.Num-R0/27 s.Num-L0/28 (/31 e.ContextVars$b0/29 )/32 e.dyn/2 >/1
  // closed e.01 as range 5
  // closed e.07 as range 9
  // closed e.FuncName0 as range 15
  // closed e.Prefix0 as range 19
  // closed e.Call as range 23
  // closed e.ContextVars$b0 as range 29
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 13
  //DEBUG: s.Num-R0: 27
  //DEBUG: s.Num-L0: 28
  //DEBUG: e.01: 5
  //DEBUG: e.07: 9
  //DEBUG: e.FuncName0: 15
  //DEBUG: e.Prefix0: 19
  //DEBUG: e.Call: 23
  //DEBUG: e.ContextVars$b0: 29
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/25 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1\1:1@0/4 AsIs: (/7 AsIs: e.01/5 AsIs: )/8 AsIs: (/11 AsIs: e.07/9 AsIs: )/12 AsIs: t.SrcPos0/13 AsIs: (/17 AsIs: e.FuncName0/15 AsIs: )/18 AsIs: (/21 AsIs: e.Prefix0/19 HalfReuse: '\\'/22 } Tile{ AsIs: e.Call/23 } Tile{ AsIs: )/26 AsIs: s.Num-R0/27 AsIs: s.Num-L0/28 AsIs: (/31 AsIs: e.ContextVars$b0/29 AsIs: )/32 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1L1B1Z0]);
  refalrts::reinit_char(context[22], '\\');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[21], context[26] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[26];
  res = refalrts::splice_evar( res, context[23], context[24] );
  refalrts::splice_to_freelist_open( vm, context[22], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckPatternPairs_S1L1B1Z3("CheckPatternPairs$1\\1:1@3", COOKIE1_, COOKIE2_, func_gen_CheckPatternPairs_S1L1B1Z3);


static refalrts::FnResult func_gen_CreateScreeningWarning_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & CreateScreeningWarning@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CreateScreeningWarning@3/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 e.new6/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 2
  do {
    // </0 & CreateScreeningWarning@3/4 t.SrcPos0/5 (/9 e.FuncName0/23 )/10 (/13 e.Prefix0/25 )/14 (/17 e.Call/27 )/18 (/21 e.Call0/29 )/22 e.Call1/31 >/1
    context[23] = context[7];
    context[24] = context[8];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.FuncName0 as range 23
    // closed e.Prefix0 as range 25
    // closed e.Call as range 27
    // closed e.Call0 as range 29
    // closed e.Call1 as range 31
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 23
    //DEBUG: e.Prefix0: 25
    //DEBUG: e.Call: 27
    //DEBUG: e.Call0: 29
    //DEBUG: e.Call1: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/33 Tile{ HalfReuse: # Warning/0 HalfReuse: # screening/4 AsIs: t.SrcPos0/5 } # Screening/34 Tile{ AsIs: (/9 AsIs: e.FuncName0/23 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/25 HalfReuse: ':'/14 } e.Call/27/35 Tile{ HalfReuse: '$'/21 AsIs: e.Call0/29 AsIs: )/22 } (/37 e.Prefix0/25/38 Tile{ HalfReuse: ':'/17 AsIs: e.Call/27 HalfReuse: '$'/18 } Tile{ AsIs: e.Call1/31 } )/40 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::alloc_ident(vm, context[34], identifiers[ident_Screening]);
    refalrts::copy_evar(vm, context[35], context[36], context[27], context[28]);
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::copy_evar(vm, context[38], context[39], context[25], context[26]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::reinit_ident(context[0], identifiers[ident_Warning]);
    refalrts::reinit_ident(context[4], identifiers[ident_screening]);
    refalrts::reinit_char(context[14], ':');
    refalrts::reinit_char(context[21], '$');
    refalrts::reinit_char(context[17], ':');
    refalrts::reinit_char(context[18], '$');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[33], context[1] );
    refalrts::link_brackets( context[37], context[40] );
    refalrts::link_brackets( context[13], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[9], context[14] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_evar( res, context[0], context[6] );
    res = refalrts::splice_elem( res, context[33] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CreateScreeningWarning@3/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix0/11 )/14 (/17 e.Call/15 )/18 (/21 e.Call0/19 )/22 e.Call1/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix0 as range 11
  // closed e.Call as range 15
  // closed e.Call0 as range 19
  // closed e.Call1 as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.Call0: 19
  //DEBUG: e.Call1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CreateScreeningWarning@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/11 HalfReuse: ':'/14 } e.Call/15/23 Tile{ HalfReuse: '$'/21 AsIs: e.Call0/19 AsIs: )/22 } (/25 e.Prefix0/11/26 Tile{ HalfReuse: ':'/17 AsIs: e.Call/15 HalfReuse: '$'/18 } Tile{ AsIs: e.Call1/2 } )/28 Tile{ AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[23], context[24], context[15], context[16]);
  refalrts::alloc_open_bracket(vm, context[25]);
  refalrts::copy_evar(vm, context[26], context[27], context[11], context[12]);
  refalrts::alloc_close_bracket(vm, context[28]);
  refalrts::update_name(context[4], functions[efunc_gen_CreateScreeningWarning_Z0]);
  refalrts::reinit_char(context[14], ':');
  refalrts::reinit_char(context[21], '$');
  refalrts::reinit_char(context[17], ':');
  refalrts::reinit_char(context[18], '$');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[25], context[28] );
  refalrts::link_brackets( context[13], context[22] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CreateScreeningWarning_Z3("CreateScreeningWarning@3", COOKIE1_, COOKIE2_, func_gen_CreateScreeningWarning_Z3);


static refalrts::FnResult func_gen_CheckPatternPairs_S1L1B1S3B1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 45 elems
  refalrts::Iter context[45];
  refalrts::zeros( context, 45 );
  // </0 & CheckPatternPairs$1\1:1$3:1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckPatternPairs$1\1:1$3:1@2/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 s.new5/19 s.new6/20 e.new7/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  if( ! refalrts::svar_left( context[19], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[20], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new7 as range 2
  do {
    // </0 & CheckPatternPairs$1\1:1$3:1@2/4 t.new8/5 (/9 e.new13/21 )/10 (/13 e.new14/23 )/14 (/17 e.new15/25 )/18 s.new9/19 s.new10/20 s.new11/29 e.new12/27 >/1
    context[21] = context[7];
    context[22] = context[8];
    context[23] = context[11];
    context[24] = context[12];
    context[25] = context[15];
    context[26] = context[16];
    context[27] = context[2];
    context[28] = context[3];
    // closed e.new13 as range 21
    // closed e.new14 as range 23
    // closed e.new15 as range 25
    if( ! refalrts::svar_left( context[29], context[27], context[28] ) )
      continue;
    // closed e.new12 as range 27
    do {
      // </0 & CheckPatternPairs$1\1:1$3:1@2/4 t.SrcPos0/5 (/9 e.FuncName0/30 )/10 (/13 e.Prefix0/32 )/14 (/17 e.Call/34 )/18 s.Num-R0/19 s.Num-L0/20 # True/29 e.Other/36 >/1
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[23];
      context[33] = context[24];
      context[34] = context[25];
      context[35] = context[26];
      context[36] = context[27];
      context[37] = context[28];
      if( ! refalrts::ident_term( identifiers[ident_True], context[29] ) )
        continue;
      // closed e.FuncName0 as range 30
      // closed e.Prefix0 as range 32
      // closed e.Call as range 34
      // closed e.Other as range 36
      //DEBUG: t.SrcPos0: 5
      //DEBUG: s.Num-R0: 19
      //DEBUG: s.Num-L0: 20
      //DEBUG: e.FuncName0: 30
      //DEBUG: e.Prefix0: 32
      //DEBUG: e.Call: 34
      //DEBUG: e.Other: 36

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Other/36 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CreateScreeningWarning@3/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/30 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/32 AsIs: )/14 AsIs: (/17 AsIs: e.Call/34 AsIs: )/18 } (/38 </39 & Symb/40 Tile{ AsIs: s.Num-R0/19 } >/41 )/42 </43 & Symb/44 Tile{ AsIs: s.Num-L0/20 HalfReuse: >/29 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[38]);
      refalrts::alloc_open_call(vm, context[39]);
      refalrts::alloc_name(vm, context[40], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[41]);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::alloc_open_call(vm, context[43]);
      refalrts::alloc_name(vm, context[44], functions[efunc_Symb]);
      refalrts::update_name(context[4], functions[efunc_gen_CreateScreeningWarning_Z3]);
      refalrts::reinit_close_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[43] );
      refalrts::link_brackets( context[38], context[42] );
      refalrts::push_stack( vm, context[41] );
      refalrts::push_stack( vm, context[39] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[29] );
      res = refalrts::splice_evar( res, context[41], context[44] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[38], context[40] );
      refalrts::splice_to_freelist_open( vm, context[18], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckPatternPairs$1\1:1$3:1@2/4 t.SrcPos0/5 (/9 e.FuncName0/30 )/10 (/13 e.Prefix0/32 )/14 (/17 e.Call/34 )/18 s.Num-R0/19 s.Num-L0/20 # False/29 >/1
    context[30] = context[21];
    context[31] = context[22];
    context[32] = context[23];
    context[33] = context[24];
    context[34] = context[25];
    context[35] = context[26];
    if( ! refalrts::ident_term( identifiers[ident_False], context[29] ) )
      continue;
    if( ! refalrts::empty_seq( context[27], context[28] ) )
      continue;
    // closed e.FuncName0 as range 30
    // closed e.Prefix0 as range 32
    // closed e.Call as range 34
    //DEBUG: t.SrcPos0: 5
    //DEBUG: s.Num-R0: 19
    //DEBUG: s.Num-L0: 20
    //DEBUG: e.FuncName0: 30
    //DEBUG: e.Prefix0: 32
    //DEBUG: e.Call: 34

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckPatternPairs$1\1:1$3:1@2/4 t.SrcPos0/5 (/9 e.FuncName0/30 )/10 (/13 e.Prefix0/32 )/14 (/17 e.Call/34 )/18 s.Num-R0/19 s.Num-L0/20 # False/29 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPatternPairs$1\1:1$3:1@2/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix0/11 )/14 (/17 e.Call/15 )/18 s.Num-R0/19 s.Num-L0/20 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix0 as range 11
  // closed e.Call as range 15
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: s.Num-R0: 19
  //DEBUG: s.Num-L0: 20
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1\1:1$3:1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/11 HalfReuse: ':'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/18 AsIs: s.Num-R0/19 AsIs: s.Num-L0/20 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1L1B1S3B1Z0]);
  refalrts::reinit_char(context[14], ':');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[18];
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckPatternPairs_S1L1B1S3B1Z2("CheckPatternPairs$1\\1:1$3:1@2", COOKIE1_, COOKIE2_, func_gen_CheckPatternPairs_S1L1B1S3B1Z2);


static refalrts::FnResult func_gen_CreateScreeningWarning_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & CreateScreeningWarning@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CreateScreeningWarning@4/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 (/21 e.new5/19 )/22 e.new6/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  // closed e.new5 as range 19
  // closed e.new6 as range 2
  do {
    // </0 & CreateScreeningWarning@4/4 t.SrcPos0/5 (/9 e.FuncName0/23 )/10 (/13 e.Prefix0/25 )/14 (/17 e.Call/27 )/18 (/21 e.Call0/29 )/22 e.Call1/31 >/1
    context[23] = context[7];
    context[24] = context[8];
    context[25] = context[11];
    context[26] = context[12];
    context[27] = context[15];
    context[28] = context[16];
    context[29] = context[19];
    context[30] = context[20];
    context[31] = context[2];
    context[32] = context[3];
    // closed e.FuncName0 as range 23
    // closed e.Prefix0 as range 25
    // closed e.Call as range 27
    // closed e.Call0 as range 29
    // closed e.Call1 as range 31
    //DEBUG: t.SrcPos0: 5
    //DEBUG: e.FuncName0: 23
    //DEBUG: e.Prefix0: 25
    //DEBUG: e.Call: 27
    //DEBUG: e.Call0: 29
    //DEBUG: e.Call1: 31

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/33 Tile{ HalfReuse: # Warning/0 HalfReuse: # screening/4 AsIs: t.SrcPos0/5 } # Screening/34 Tile{ AsIs: (/9 AsIs: e.FuncName0/23 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/25 HalfReuse: '\\'/14 } e.Call/27/35 Tile{ HalfReuse: '$'/21 AsIs: e.Call0/29 AsIs: )/22 } (/37 e.Prefix0/25/38 Tile{ HalfReuse: '\\'/17 AsIs: e.Call/27 HalfReuse: '$'/18 } Tile{ AsIs: e.Call1/31 } )/40 Tile{ HalfReuse: )/1 ]] }
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::alloc_ident(vm, context[34], identifiers[ident_Screening]);
    refalrts::copy_evar(vm, context[35], context[36], context[27], context[28]);
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::copy_evar(vm, context[38], context[39], context[25], context[26]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::reinit_ident(context[0], identifiers[ident_Warning]);
    refalrts::reinit_ident(context[4], identifiers[ident_screening]);
    refalrts::reinit_char(context[14], '\\');
    refalrts::reinit_char(context[21], '$');
    refalrts::reinit_char(context[17], '\\');
    refalrts::reinit_char(context[18], '$');
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[33], context[1] );
    refalrts::link_brackets( context[37], context[40] );
    refalrts::link_brackets( context[13], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[40] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[9], context[14] );
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_evar( res, context[0], context[6] );
    res = refalrts::splice_elem( res, context[33] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CreateScreeningWarning@4/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix0/11 )/14 (/17 e.Call/15 )/18 (/21 e.Call0/19 )/22 e.Call1/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix0 as range 11
  // closed e.Call as range 15
  // closed e.Call0 as range 19
  // closed e.Call1 as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.Call0: 19
  //DEBUG: e.Call1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CreateScreeningWarning@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/11 HalfReuse: '\\'/14 } e.Call/15/23 Tile{ HalfReuse: '$'/21 AsIs: e.Call0/19 AsIs: )/22 } (/25 e.Prefix0/11/26 Tile{ HalfReuse: '\\'/17 AsIs: e.Call/15 HalfReuse: '$'/18 } Tile{ AsIs: e.Call1/2 } )/28 Tile{ AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[23], context[24], context[15], context[16]);
  refalrts::alloc_open_bracket(vm, context[25]);
  refalrts::copy_evar(vm, context[26], context[27], context[11], context[12]);
  refalrts::alloc_close_bracket(vm, context[28]);
  refalrts::update_name(context[4], functions[efunc_gen_CreateScreeningWarning_Z0]);
  refalrts::reinit_char(context[14], '\\');
  refalrts::reinit_char(context[21], '$');
  refalrts::reinit_char(context[17], '\\');
  refalrts::reinit_char(context[18], '$');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[25], context[28] );
  refalrts::link_brackets( context[13], context[22] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CreateScreeningWarning_Z4("CreateScreeningWarning@4", COOKIE1_, COOKIE2_, func_gen_CreateScreeningWarning_Z4);


static refalrts::FnResult func_gen_CheckPatternPairs_S1L1B1S3B1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 45 elems
  refalrts::Iter context[45];
  refalrts::zeros( context, 45 );
  // </0 & CheckPatternPairs$1\1:1$3:1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CheckPatternPairs$1\1:1$3:1@3/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 (/17 e.new4/15 )/18 s.new5/19 s.new6/20 e.new7/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 15
  if( ! refalrts::svar_left( context[19], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[20], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new7 as range 2
  do {
    // </0 & CheckPatternPairs$1\1:1$3:1@3/4 t.new8/5 (/9 e.new13/21 )/10 (/13 e.new14/23 )/14 (/17 e.new15/25 )/18 s.new9/19 s.new10/20 s.new11/29 e.new12/27 >/1
    context[21] = context[7];
    context[22] = context[8];
    context[23] = context[11];
    context[24] = context[12];
    context[25] = context[15];
    context[26] = context[16];
    context[27] = context[2];
    context[28] = context[3];
    // closed e.new13 as range 21
    // closed e.new14 as range 23
    // closed e.new15 as range 25
    if( ! refalrts::svar_left( context[29], context[27], context[28] ) )
      continue;
    // closed e.new12 as range 27
    do {
      // </0 & CheckPatternPairs$1\1:1$3:1@3/4 t.SrcPos0/5 (/9 e.FuncName0/30 )/10 (/13 e.Prefix0/32 )/14 (/17 e.Call/34 )/18 s.Num-R0/19 s.Num-L0/20 # True/29 e.Other/36 >/1
      context[30] = context[21];
      context[31] = context[22];
      context[32] = context[23];
      context[33] = context[24];
      context[34] = context[25];
      context[35] = context[26];
      context[36] = context[27];
      context[37] = context[28];
      if( ! refalrts::ident_term( identifiers[ident_True], context[29] ) )
        continue;
      // closed e.FuncName0 as range 30
      // closed e.Prefix0 as range 32
      // closed e.Call as range 34
      // closed e.Other as range 36
      //DEBUG: t.SrcPos0: 5
      //DEBUG: s.Num-R0: 19
      //DEBUG: s.Num-L0: 20
      //DEBUG: e.FuncName0: 30
      //DEBUG: e.Prefix0: 32
      //DEBUG: e.Call: 34
      //DEBUG: e.Other: 36

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Other/36 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & CreateScreeningWarning@4/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/30 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/32 AsIs: )/14 AsIs: (/17 AsIs: e.Call/34 AsIs: )/18 } (/38 </39 & Symb/40 Tile{ AsIs: s.Num-R0/19 } >/41 )/42 </43 & Symb/44 Tile{ AsIs: s.Num-L0/20 HalfReuse: >/29 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[38]);
      refalrts::alloc_open_call(vm, context[39]);
      refalrts::alloc_name(vm, context[40], functions[efunc_Symb]);
      refalrts::alloc_close_call(vm, context[41]);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::alloc_open_call(vm, context[43]);
      refalrts::alloc_name(vm, context[44], functions[efunc_Symb]);
      refalrts::update_name(context[4], functions[efunc_gen_CreateScreeningWarning_Z4]);
      refalrts::reinit_close_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[43] );
      refalrts::link_brackets( context[38], context[42] );
      refalrts::push_stack( vm, context[41] );
      refalrts::push_stack( vm, context[39] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[20], context[29] );
      res = refalrts::splice_evar( res, context[41], context[44] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[38], context[40] );
      refalrts::splice_to_freelist_open( vm, context[18], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CheckPatternPairs$1\1:1$3:1@3/4 t.SrcPos0/5 (/9 e.FuncName0/30 )/10 (/13 e.Prefix0/32 )/14 (/17 e.Call/34 )/18 s.Num-R0/19 s.Num-L0/20 # False/29 >/1
    context[30] = context[21];
    context[31] = context[22];
    context[32] = context[23];
    context[33] = context[24];
    context[34] = context[25];
    context[35] = context[26];
    if( ! refalrts::ident_term( identifiers[ident_False], context[29] ) )
      continue;
    if( ! refalrts::empty_seq( context[27], context[28] ) )
      continue;
    // closed e.FuncName0 as range 30
    // closed e.Prefix0 as range 32
    // closed e.Call as range 34
    //DEBUG: t.SrcPos0: 5
    //DEBUG: s.Num-R0: 19
    //DEBUG: s.Num-L0: 20
    //DEBUG: e.FuncName0: 30
    //DEBUG: e.Prefix0: 32
    //DEBUG: e.Call: 34

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CheckPatternPairs$1\1:1$3:1@3/4 t.SrcPos0/5 (/9 e.FuncName0/30 )/10 (/13 e.Prefix0/32 )/14 (/17 e.Call/34 )/18 s.Num-R0/19 s.Num-L0/20 # False/29 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CheckPatternPairs$1\1:1$3:1@3/4 t.SrcPos0/5 (/9 e.FuncName0/7 )/10 (/13 e.Prefix0/11 )/14 (/17 e.Call/15 )/18 s.Num-R0/19 s.Num-L0/20 e.dyn/2 >/1
  // closed e.FuncName0 as range 7
  // closed e.Prefix0 as range 11
  // closed e.Call as range 15
  // closed e.dyn as range 2
  //DEBUG: t.SrcPos0: 5
  //DEBUG: s.Num-R0: 19
  //DEBUG: s.Num-L0: 20
  //DEBUG: e.FuncName0: 7
  //DEBUG: e.Prefix0: 11
  //DEBUG: e.Call: 15
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/17 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & CheckPatternPairs$1\1:1$3:1@0/4 AsIs: t.SrcPos0/5 AsIs: (/9 AsIs: e.FuncName0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Prefix0/11 HalfReuse: '\\'/14 } Tile{ AsIs: e.Call/15 } Tile{ AsIs: )/18 AsIs: s.Num-R0/19 AsIs: s.Num-L0/20 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_CheckPatternPairs_S1L1B1S3B1Z0]);
  refalrts::reinit_char(context[14], '\\');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[18] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[18];
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_CheckPatternPairs_S1L1B1S3B1Z3("CheckPatternPairs$1\\1:1$3:1@3", COOKIE1_, COOKIE2_, func_gen_CheckPatternPairs_S1L1B1S3B1Z3);


//End of file
