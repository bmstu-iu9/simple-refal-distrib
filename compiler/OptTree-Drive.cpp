// This file automatically generated from 'OptTree-Drive.ref'
// Don't edit! Edit 'OptTree-Drive.ref' and recompile it

#include "refalrts.h"

#define cookie_ns cookie_ns_4093110042_1627153843
#define COOKIE1_ 4093110042U
#define COOKIE2_ 1627153843U

enum efunc {
  efunc_u_u_Stepm_Drop = 0,
  efunc_u_u_Metau_Mu = 1,
  efunc_d_table = 2,
  efunc_Map = 3,
  efunc_gen_Apply_Z3 = 4,
  efunc_gen_Apply_Z0 = 5,
  efunc_Reduce = 6,
  efunc_gen_Reduce_S1A1 = 7,
  efunc_gen_Apply_Z2 = 8,
  efunc_Apply = 9,
  efunc_DoMapAccum = 10,
  efunc_gen_DoMapAccum_S1A1 = 11,
  efunc_Add = 12,
  efunc_Sub = 13,
  efunc_Fetch = 14,
  efunc_Pipe = 15,
  efunc_gen_Pipe_S2L1 = 16,
  efunc_gen_Pipe_S3L1 = 17,
  efunc_UpdateDriveInfo = 18,
  efunc_gen_UpdateDriveInfo_A1Z1 = 19,
  efunc_gen_DoExtractLabels_Z3 = 20,
  efunc_gen_AddStarSuffix_D1 = 21,
  efunc_gen_FormatOptFunctions_A1 = 22,
  efunc_gen_ExtractBaseNames_A1 = 23,
  efunc_gen_Map_Z2 = 24,
  efunc_gen_UpdateDriveInfo_A20Z1 = 25,
  efunc_gen_MapAccum_Z1 = 26,
  efunc_gen_UpdateDriveInfo_A18 = 27,
  efunc_SetNamesm_Reject = 28,
  efunc_gen_MultiplyRemainderNames_A1 = 29,
  efunc_gen_DoMapAccum_Z1 = 30,
  efunc_gen_UpdateDriveInfo_A17 = 31,
  efunc_gen_UpdateDriveInfo_A16 = 32,
  efunc_gen_DoMapAccum_Z2 = 33,
  efunc_gen_UpdateDriveInfo_A15 = 34,
  efunc_gen_ExtractExtractableFunctions_A1 = 35,
  efunc_gen_DoMapAccum_Z3 = 36,
  efunc_gen_UpdateDriveInfo_A14 = 37,
  efunc_gen_UpdateDriveInfo_A13 = 38,
  efunc_DisplayName = 39,
  efunc_Logm_PutLine = 40,
  efunc_gen_Map_Z3 = 41,
  efunc_gen_UpdateDriveInfo_A12 = 42,
  efunc_gen_UpdateDriveInfo_A11 = 43,
  efunc_gen_UpdateDriveInfo_A10 = 44,
  efunc_gen_UpdateDriveInfo_A9 = 45,
  efunc_gen_UpdateDriveInfo_A8 = 46,
  efunc_gen_Map_Z4 = 47,
  efunc_gen_UpdateDriveInfo_A7 = 48,
  efunc_gen_HashSetm_AsChain_D1 = 49,
  efunc_gen_UpdateDriveInfo_A6 = 50,
  efunc_gen_UpdateDriveInfo_A5 = 51,
  efunc_gen_DoMapAccum_Z4 = 52,
  efunc_gen_UpdateDriveInfo_A4 = 53,
  efunc_gen_UpdateDriveInfo_A3 = 54,
  efunc_gen_DoExtractLabels_Z1 = 55,
  efunc_gen_DoExtractLabels_Z2 = 56,
  efunc_gen_UpdateDriveInfo_A2 = 57,
  efunc_gen_UpdateDriveInfo_A1 = 58,
  efunc_gen_DoExtractLabels_Z4 = 59,
  efunc_Unique = 60,
  efunc_GenRemainderFuncNames = 61,
  efunc_DoHashSet = 62,
  efunc_gen_Map_Z5 = 63,
  efunc_gen_DoHashSetm_DoFillBucket_Z1 = 64,
  efunc_gen_DoHashSet_S1A1 = 65,
  efunc_DoHashSetm_DoFillBucket = 66,
  efunc_DriveInlineOptimizerTick = 67,
  efunc_gen_DoMapAccum_Z5 = 68,
  efunc_gen_DriveInlineOptimizerTick_A5 = 69,
  efunc_gen_DoMapAccum_Z6 = 70,
  efunc_gen_DriveInlineOptimizerTick_A4 = 71,
  efunc_gen_DoMapAccum_Z7 = 72,
  efunc_gen_DriveInlineOptimizerTick_A3 = 73,
  efunc_gen_DoMapAccum_Z8 = 74,
  efunc_gen_DriveInlineOptimizerTick_A2 = 75,
  efunc_gen_DriveInlineOptimizerTick_A2Z1 = 76,
  efunc_gen_DriveInlineOptimizerTick_A2Z2 = 77,
  efunc_gen_DriveInlineOptimizerTick_A2Z3 = 78,
  efunc_gen_DriveInlineOptimizerTick_A2Z4 = 79,
  efunc_gen_DriveInlineOptimizerTick_A1 = 80,
  efunc_gen_OptSwitch_D4 = 81,
  efunc_gen_DriveInlineOptimizerTick_A2Z5 = 82,
  efunc_gen_DriveInlineOptimizerTick_A2Z6 = 83,
  efunc_gen_DriveInlineOptimizerTick_A2Z7 = 84,
  efunc_gen_DriveInlineOptimizerTick_A2Z8 = 85,
  efunc_gen_DriveInlineOptimizerTick_A2Z9 = 86,
  efunc_gen_DriveInlineOptimizerTick_A2Z10 = 87,
  efunc_gen_DriveInlineOptimizerTick_A2Z11 = 88,
  efunc_gen_DriveInlineOptimizerTick_A2Z12 = 89,
  efunc_gen_DriveInlineOptimizerTick_A2Z13 = 90,
  efunc_gen_DriveInlineOptimizerTick_A2Z14 = 91,
  efunc_gen_DriveInlineOptimizerTick_A2Z15 = 92,
  efunc_gen_DriveInlineOptimizerTick_A2Z16 = 93,
  efunc_gen_IsLexpr_B1 = 94,
  efunc_IsLexprm_Aux = 95,
  efunc_gen_Map_Z6 = 96,
  efunc_gen_Map_Z7 = 97,
  efunc_gen_Reduce_Z1 = 98,
  efunc_gen_OptFunction_B1 = 99,
  efunc_gen_Map_Z8 = 100,
  efunc_OptTreem_Drivem_Expr = 101,
  efunc_gen_OptSentence_S1A4 = 102,
  efunc_ExtractVariables = 103,
  efunc_gen_OptSentence_S1A3 = 104,
  efunc_gen_OptSentence_S1A2 = 105,
  efunc_gen_OptSentence_S1A2B1Z1 = 106,
  efunc_gen_OptSentence_S1A1D1 = 107,
  efunc_gen_Map_Z9 = 108,
  efunc_gen_Map_Z11 = 109,
  efunc_gen_Map_Z10 = 110,
  efunc_Mu = 111,
  efunc_Up = 112,
  efunc_Evm_met = 113,
  efunc_Residue = 114,
  efunc_u_u_Metau_Residue = 115,
  efunc_MapAccum = 116,
  efunc_UnBracket = 117,
  efunc_DelAccumulator = 118,
  efunc_Inc = 119,
  efunc_Dec = 120,
  efunc_OptTreem_Drivem_Prepare = 121,
  efunc_AddStarSuffix = 122,
  efunc_BaseName = 123,
  efunc_ExtractLabels = 124,
  efunc_DoExtractLabels = 125,
  efunc_ExtractMetatableNames = 126,
  efunc_ExtractBaseNames = 127,
  efunc_ExtractExtractableFunctions = 128,
  efunc_ExtractFuncLengths = 129,
  efunc_MultiplyRemainderNames = 130,
  efunc_FormatOptFunctions = 131,
  efunc_HashSet = 132,
  efunc_BUCKETm_SIZE = 133,
  efunc_HashSetm_AsChain = 134,
  efunc_OptTreem_Drive = 135,
  efunc_OptSwitch = 136,
  efunc_IsLexpr = 137,
  efunc_OptFunction = 138,
  efunc_OptSentence = 139,
  efunc_WithMetatables = 140,
  efunc_OptTreem_Drivem_CleanupColdCalls = 141,
  efunc_CleanupColdm_Body = 142,
  efunc_CleanupColdm_Sentence = 143,
  efunc_CleanupColdm_Result = 144,
  efunc_CleanupColdm_Term = 145,
  efunc_gen_Apply_Z4 = 146,
  efunc_gen_Map_Z1 = 147,
  efunc_gen_UpdateDriveInfo_A21L1D1 = 148,
  efunc_gen_Map_Z0 = 149,
  efunc_gen_UpdateDriveInfo_A21L1Z0 = 150,
  efunc_gen_ExtractBaseNames_A1L1D1 = 151,
  efunc_gen_ExtractBaseNames_A1L1Z0 = 152,
  efunc_gen_DoMapAccum_Z9 = 153,
  efunc_gen_MapAccum_Z0 = 154,
  efunc_gen_FormatOptFunctions_A1L1Z0 = 155,
  efunc_gen_UpdateDriveInfo_A21Z1 = 156,
  efunc_gen_UpdateDriveInfo_A20Z0 = 157,
  efunc_gen_DoMapAccum_S1A1Z1 = 158,
  efunc_gen_MultiplyRemainderNames_A1L1A2 = 159,
  efunc_gen_MultiplyRemainderNames_A1L1A2Z1 = 160,
  efunc_gen_MultiplyRemainderNames_A1L1D1 = 161,
  efunc_gen_DoMapAccum_Z0 = 162,
  efunc_gen_MultiplyRemainderNames_A1L1Z0 = 163,
  efunc_gen_DoMapAccum_S1A1Z2 = 164,
  efunc_gen_ExtractFuncLengths_L1S1A1 = 165,
  efunc_Lenw = 166,
  efunc_gen_ExtractFuncLengths_L1D2 = 167,
  efunc_gen_ExtractFuncLengths_L1Z0 = 168,
  efunc_gen_ExtractExtractableFunctions_A1L1 = 169,
  efunc_gen_DoMapAccum_S1A1Z3 = 170,
  efunc_gen_ExtractExtractableFunctions_A1L1Z0 = 171,
  efunc_Upper = 172,
  efunc_Explode = 173,
  efunc_gen_UpdateDriveInfo_A12L1A1 = 174,
  efunc_gen_UpdateDriveInfo_A12L1D1 = 175,
  efunc_gen_UpdateDriveInfo_A12L1Z0 = 176,
  efunc_gen_HashSetm_AsChain_L1D1 = 177,
  efunc_gen_HashSetm_AsChain_L1Z0 = 178,
  efunc_gen_ExtractMetatableNames_L1D2 = 179,
  efunc_gen_DoMapAccum_S1A1Z4 = 180,
  efunc_gen_ExtractMetatableNames_L1Z0 = 181,
  efunc_gen_DoExtractLabels_Z5 = 182,
  efunc_gen_DoExtractLabels_Z0 = 183,
  efunc_gen_DoExtractLabels_Z6 = 184,
  efunc_gen_DoExtractLabels_Z7 = 185,
  efunc_gen_GenRemainderFuncNames_Z2 = 186,
  efunc_gen_MultiplyRemainderNames_A1L1A2Z0 = 187,
  efunc_HashName = 188,
  efunc_gen_HashSet_L1D1 = 189,
  efunc_gen_HashSet_L1Z0 = 190,
  efunc_gen_DoHashSetm_DoFillBucket_Z2 = 191,
  efunc_gen_DoHashSetm_DoFillBucket_Z0 = 192,
  efunc_gen_DriveInlineOptimizerTick_A5L1 = 193,
  efunc_gen_DoMapAccum_S1A1Z5 = 194,
  efunc_gen_DriveInlineOptimizerTick_A5L1Z0 = 195,
  efunc_gen_DriveInlineOptimizerTick_A4L1 = 196,
  efunc_gen_DoMapAccum_S1A1Z6 = 197,
  efunc_gen_DriveInlineOptimizerTick_A4L1Z0 = 198,
  efunc_gen_Reduce_S1A1Z1 = 199,
  efunc_gen_OptFunction_L1A1 = 200,
  efunc_gen_Reduce_S1A1Z2 = 201,
  efunc_gen_OptFunction_L1D1 = 202,
  efunc_gen_OptFunction_L1Z0 = 203,
  efunc_gen_Reduce_Z0 = 204,
  efunc_gen_DoMapAccum_S1A1Z7 = 205,
  efunc_gen_DriveInlineOptimizerTick_A3L1Z0 = 206,
  efunc_gen_WithMetatables_L1D2 = 207,
  efunc_gen_DoMapAccum_S1A1Z8 = 208,
  efunc_gen_WithMetatables_L1Z0 = 209,
  efunc_gen_DoMapAccum_Z10 = 210,
  efunc_gen_DriveInlineOptimizerTick_A2Z0 = 211,
  efunc_gen_DoMapAccum_Z11 = 212,
  efunc_gen_DoMapAccum_Z12 = 213,
  efunc_gen_DoMapAccum_Z13 = 214,
  efunc_gen_DoMapAccum_Z14 = 215,
  efunc_gen_DoMapAccum_Z15 = 216,
  efunc_gen_DoMapAccum_Z16 = 217,
  efunc_gen_DoMapAccum_Z17 = 218,
  efunc_gen_DoMapAccum_Z18 = 219,
  efunc_gen_DoMapAccum_Z19 = 220,
  efunc_gen_DoMapAccum_Z20 = 221,
  efunc_gen_DoMapAccum_Z21 = 222,
  efunc_gen_DoMapAccum_Z22 = 223,
  efunc_gen_DoMapAccum_Z23 = 224,
  efunc_gen_DoMapAccum_Z24 = 225,
  efunc_gen_DoMapAccum_Z25 = 226,
  efunc_gen_IsLexprm_Aux_S2L1Z0 = 227,
  efunc_gen_CleanupColdm_Sentence_D1 = 228,
  efunc_gen_CleanupColdm_Sentence_Z0 = 229,
  efunc_gen_OptSentence_S1A2B1Z0 = 230,
  efunc_ApplyContractions = 231,
  efunc_gen_OptSentence_S1L1D1 = 232,
  efunc_gen_OptSentence_S1L1Z0 = 233,
  efunc_gen_OptTreem_Drivem_CleanupColdCalls_L1Z0 = 234,
  efunc_gen_CleanupColdm_Term_Z0 = 235,
  efunc_gen_CleanupColdm_Sentence_L1D1 = 236,
  efunc_gen_CleanupColdm_Sentence_L1Z0 = 237,
  efunc_gen_UpdateDriveInfo_A2Z1 = 238,
  efunc_gen_UpdateDriveInfo_A1Z0 = 239,
  efunc_gen_FormatOptFunctions_A1L1 = 240,
  efunc_gen_DoMapAccum_S1A1Z9 = 241,
  efunc_gen_UpdateDriveInfo_A22 = 242,
  efunc_gen_UpdateDriveInfo_A21Z0 = 243,
  efunc_gen_DoMapAccum_S1A1Z0 = 244,
  efunc_gen_GenRemainderFuncNames_Z0 = 245,
  efunc_gen_Reduce_Z2 = 246,
  efunc_gen_Reduce_S1A1Z0 = 247,
  efunc_gen_Reduce_Z3 = 248,
  efunc_gen_DoMapAccum_S1A1Z10 = 249,
  efunc_gen_Reduce_Z4 = 250,
  efunc_gen_DoMapAccum_S1A1Z11 = 251,
  efunc_gen_Reduce_Z5 = 252,
  efunc_gen_DoMapAccum_S1A1Z12 = 253,
  efunc_gen_Reduce_Z6 = 254,
  efunc_gen_DoMapAccum_S1A1Z13 = 255,
  efunc_gen_Reduce_Z7 = 256,
  efunc_gen_DoMapAccum_S1A1Z14 = 257,
  efunc_gen_Reduce_Z8 = 258,
  efunc_gen_DoMapAccum_S1A1Z15 = 259,
  efunc_gen_Reduce_Z9 = 260,
  efunc_gen_DoMapAccum_S1A1Z16 = 261,
  efunc_gen_Reduce_Z10 = 262,
  efunc_gen_DoMapAccum_S1A1Z17 = 263,
  efunc_gen_Reduce_Z11 = 264,
  efunc_gen_DoMapAccum_S1A1Z18 = 265,
  efunc_gen_Reduce_Z12 = 266,
  efunc_gen_DoMapAccum_S1A1Z19 = 267,
  efunc_gen_Reduce_Z13 = 268,
  efunc_gen_DoMapAccum_S1A1Z20 = 269,
  efunc_gen_Reduce_Z14 = 270,
  efunc_gen_DoMapAccum_S1A1Z21 = 271,
  efunc_gen_Reduce_Z15 = 272,
  efunc_gen_DoMapAccum_S1A1Z22 = 273,
  efunc_gen_Reduce_Z16 = 274,
  efunc_gen_DoMapAccum_S1A1Z23 = 275,
  efunc_gen_Reduce_Z17 = 276,
  efunc_gen_DoMapAccum_S1A1Z24 = 277,
  efunc_gen_Reduce_Z18 = 278,
  efunc_gen_DoMapAccum_S1A1Z25 = 279,
  efunc_gen_UpdateDriveInfo_A3Z1 = 280,
  efunc_gen_UpdateDriveInfo_A2Z0 = 281,
  efunc_gen_OptSentence_S1A2B1Z2 = 282,
  efunc_gen_Reduce_S1A1Z3 = 283,
  efunc_gen_OptSentence_S1A2B1Z3 = 284,
  efunc_gen_Reduce_S1A1Z4 = 285,
  efunc_gen_OptSentence_S1A2B1Z4 = 286,
  efunc_gen_Reduce_S1A1Z5 = 287,
  efunc_gen_OptSentence_S1A2B1Z5 = 288,
  efunc_gen_Reduce_S1A1Z6 = 289,
  efunc_gen_OptSentence_S1A2B1Z6 = 290,
  efunc_gen_Reduce_S1A1Z7 = 291,
  efunc_gen_OptSentence_S1A2B1Z7 = 292,
  efunc_gen_Reduce_S1A1Z8 = 293,
  efunc_gen_OptSentence_S1A2B1Z8 = 294,
  efunc_gen_Reduce_S1A1Z9 = 295,
  efunc_gen_OptSentence_S1A2B1Z9 = 296,
  efunc_gen_Reduce_S1A1Z10 = 297,
  efunc_gen_OptSentence_S1A2B1Z10 = 298,
  efunc_gen_Reduce_S1A1Z11 = 299,
  efunc_gen_OptSentence_S1A2B1Z11 = 300,
  efunc_gen_Reduce_S1A1Z12 = 301,
  efunc_gen_OptSentence_S1A2B1Z12 = 302,
  efunc_gen_Reduce_S1A1Z13 = 303,
  efunc_gen_OptSentence_S1A2B1Z13 = 304,
  efunc_gen_Reduce_S1A1Z14 = 305,
  efunc_gen_OptSentence_S1A2B1Z14 = 306,
  efunc_gen_Reduce_S1A1Z15 = 307,
  efunc_gen_OptSentence_S1A2B1Z15 = 308,
  efunc_gen_Reduce_S1A1Z16 = 309,
  efunc_gen_OptSentence_S1A2B1Z16 = 310,
  efunc_gen_Reduce_S1A1Z17 = 311,
  efunc_gen_OptSentence_S1A2B1Z17 = 312,
  efunc_gen_Reduce_S1A1Z18 = 313,
  efunc_gen_UpdateDriveInfo_A4Z1 = 314,
  efunc_gen_UpdateDriveInfo_A3Z0 = 315,
  efunc_gen_UpdateDriveInfo_A5Z1 = 316,
  efunc_gen_UpdateDriveInfo_A4Z0 = 317,
  efunc_gen_UpdateDriveInfo_A6Z1 = 318,
  efunc_gen_UpdateDriveInfo_A5Z0 = 319,
  efunc_gen_UpdateDriveInfo_A7Z1 = 320,
  efunc_gen_UpdateDriveInfo_A6Z0 = 321,
  efunc_gen_UpdateDriveInfo_A8Z1 = 322,
  efunc_gen_UpdateDriveInfo_A7Z0 = 323,
  efunc_gen_UpdateDriveInfo_A9Z1 = 324,
  efunc_gen_UpdateDriveInfo_A8Z0 = 325,
  efunc_gen_UpdateDriveInfo_A10Z1 = 326,
  efunc_gen_UpdateDriveInfo_A9Z0 = 327,
  efunc_gen_UpdateDriveInfo_A11Z1 = 328,
  efunc_gen_UpdateDriveInfo_A10Z0 = 329,
  efunc_gen_UpdateDriveInfo_A12Z1 = 330,
  efunc_gen_UpdateDriveInfo_A11Z0 = 331,
  efunc_gen_UpdateDriveInfo_A13Z1 = 332,
  efunc_gen_UpdateDriveInfo_A12Z0 = 333,
  efunc_gen_UpdateDriveInfo_A14Z1 = 334,
  efunc_gen_UpdateDriveInfo_A13Z0 = 335,
  efunc_gen_UpdateDriveInfo_A15Z1 = 336,
  efunc_gen_UpdateDriveInfo_A14Z0 = 337,
  efunc_gen_UpdateDriveInfo_A16Z1 = 338,
  efunc_gen_UpdateDriveInfo_A15Z0 = 339,
  efunc_gen_UpdateDriveInfo_A17Z1 = 340,
  efunc_gen_UpdateDriveInfo_A16Z0 = 341,
  efunc_gen_UpdateDriveInfo_A18Z1 = 342,
  efunc_gen_UpdateDriveInfo_A17Z0 = 343,
  efunc_gen_UpdateDriveInfo_A20Z2 = 344,
  efunc_gen_UpdateDriveInfo_A18Z0 = 345,
  efunc_gen_UpdateDriveInfo_A21Z2 = 346,
  efunc_gen_UpdateDriveInfo_A22Z1 = 347,
  efunc_gen_UpdateDriveInfo_A22Z0 = 348,
};


enum ident {
  ident_NoOpt = 0,
  ident_DriveInfo = 1,
  ident_SUF = 2,
  ident_Function = 3,
  ident_Sentences = 4,
  ident_Metatable = 5,
  ident_OptDrive = 6,
  ident_Drive = 7,
  ident_OptInline = 8,
  ident_Inline = 9,
  ident_OptIntrinsic = 10,
  ident_Intrinsic = 11,
  ident_None = 12,
  ident_ColdFunction = 13,
  ident_NewFunction = 14,
  ident_Metatables = 15,
  ident_OpenE = 16,
  ident_False = 17,
  ident_True = 18,
  ident_Var = 19,
  ident_DRIVE = 20,
  ident_Brackets = 21,
  ident_ADTm_Brackets = 22,
  ident_CallBrackets = 23,
  ident_ColdCallBrackets = 24,
  ident_Mu = 25,
  ident_Up = 26,
  ident_Evm_met = 27,
  ident_Residue = 28,
  ident_u_u_Metau_Residue = 29,
  ident_Apply = 30,
  ident_Map = 31,
  ident_Reduce = 32,
  ident_Fetch = 33,
  ident_MapAccum = 34,
  ident_DoMapAccum = 35,
  ident_UnBracket = 36,
  ident_DelAccumulator = 37,
  ident_Inc = 38,
  ident_Dec = 39,
  ident_Pipe = 40,
  ident_OptTreem_Drivem_Prepare = 41,
  ident_GenRemainderFuncNames = 42,
  ident_AddStarSuffix = 43,
  ident_BaseName = 44,
  ident_UpdateDriveInfo = 45,
  ident_ExtractLabels = 46,
  ident_DoExtractLabels = 47,
  ident_ExtractMetatableNames = 48,
  ident_SetNamesm_Reject = 49,
  ident_ExtractBaseNames = 50,
  ident_ExtractExtractableFunctions = 51,
  ident_ExtractFuncLengths = 52,
  ident_MultiplyRemainderNames = 53,
  ident_FormatOptFunctions = 54,
  ident_HashSet = 55,
  ident_BUCKETm_SIZE = 56,
  ident_DoHashSet = 57,
  ident_DoHashSetm_DoFillBucket = 58,
  ident_HashSetm_AsChain = 59,
  ident_OptTreem_Drive = 60,
  ident_OptSwitch = 61,
  ident_DriveInlineOptimizerTick = 62,
  ident_IsLexpr = 63,
  ident_IsLexprm_Aux = 64,
  ident_OptFunction = 65,
  ident_OptSentence = 66,
  ident_WithMetatables = 67,
  ident_OptTreem_Drivem_CleanupColdCalls = 68,
  ident_CleanupColdm_Body = 69,
  ident_CleanupColdm_Sentence = 70,
  ident_CleanupColdm_Result = 71,
  ident_CleanupColdm_Term = 72,
  ident_Condition = 73,
};


static refalrts::FnResult func_Mu(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Mu/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Mu("Mu", COOKIE1_, COOKIE2_, func_Mu);


static refalrts::FnResult func_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Residue("Residue", COOKIE1_, COOKIE2_, func_Residue);


static refalrts::FnResult func_u_u_Metau_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & __Meta_Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_Metau_Residue("__Meta_Residue", COOKIE1_, COOKIE2_, func_u_u_Metau_Residue);


static refalrts::FnResult func_Apply(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Apply/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply/4 s.Fn/5 e.Argument/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.Argument as range 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.Argument: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.Argument/7 HalfReuse: & $table/1 } >/9 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply/4 (/5 t.Closure/9 e.Bounded/7 )/6 e.Argument/2 >/1
  context[7] = 0;
  context[8] = 0;
  if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument as range 2
  context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.Bounded as range 7
  //DEBUG: e.Argument: 2
  //DEBUG: t.Closure: 9
  //DEBUG: e.Bounded: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply/4 } Tile{ AsIs: t.Closure/9 } Tile{ AsIs: e.Bounded/7 } Tile{ AsIs: e.Argument/2 } Tile{ AsIs: >/1 ]] }
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Apply("Apply", COOKIE1_, COOKIE2_, func_Apply);


static refalrts::FnResult func_Map(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Map/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Map/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Map/4 s.Fn/5 t.Next/9 e.Tail/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      if( ! refalrts::svar_term( context[5], context[5] ) )
        continue;
      // closed e.Tail as range 11
      //DEBUG: t.Next: 9
      //DEBUG: s.Fn: 5
      //DEBUG: e.Tail: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: t.Next/9 } & $table/13 >/14 </15 & Map/16 s.Fn/5/17 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[13], functions[efunc_d_table]);
      refalrts::alloc_close_call(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_Map]);
      refalrts::copy_stvar(vm, context[17], context[5]);
      refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[13], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Map/4 (/5 t./15 e.0/13 )/6 t.Next/9 e.Tail/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      // closed e.Tail as range 11
      context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
      if( ! context[16] )
        continue;
      // closed e.0 as range 13
      //DEBUG: t.Next: 9
      //DEBUG: e.Tail: 11
      //DEBUG: t.: 15
      //DEBUG: e.0: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </17 & Apply@3/18 t./15/19 e.0/13/21 Tile{ AsIs: t.Next/9 } >/23 Tile{ AsIs: </0 AsIs: & Map/4 AsIs: (/5 AsIs: t./15 AsIs: e.0/13 AsIs: )/6 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_gen_Apply_Z3]);
      refalrts::copy_evar(vm, context[19], context[20], context[15], context[16]);
      refalrts::copy_evar(vm, context[21], context[22], context[13], context[14]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[17], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map/4 t.Fn/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Fn: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.Fn/5 AsIs: t.Next/9 } >/13 </14 & Map/15 t.Fn/5/16 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_Map]);
    refalrts::copy_evar(vm, context[16], context[17], context[5], context[6]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map/4 t.Fn/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Map/4 t.Fn/5 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Map("Map", COOKIE1_, COOKIE2_, func_Map);


static refalrts::FnResult func_gen_Reduce_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Reduce$1=1/4 t.Fn/5 (/9 e.Tail/7 )/10 t.Acc$a/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Tail as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5
  //DEBUG: e.Tail: 7
  //DEBUG: t.Acc$a: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce/4 AsIs: t.Fn/5 } Tile{ AsIs: t.Acc$a/11 } Tile{ AsIs: e.Tail/7 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Reduce]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1("Reduce$1=1", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1);


static refalrts::FnResult func_Reduce(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Reduce/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce/4 t.new1/5 t.new2/7 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Reduce/4 t.Fn/5 t.Acc/7 t.Next/11 e.Tail/9 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[12] = refalrts::tvar_left( context[11], context[9], context[10] );
    if( ! context[12] )
      continue;
    // closed e.Tail as range 9
    //DEBUG: t.Fn: 5
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 11
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & Reduce$1=1/14 t.Fn/5/15 (/17 Tile{ AsIs: e.Tail/9 } )/18 Tile{ AsIs: </0 Reuse: & Apply@2/4 AsIs: t.Fn/5 AsIs: t.Acc/7 AsIs: t.Next/11 } >/19 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Reduce_S1A1]);
    refalrts::copy_evar(vm, context[15], context[16], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce/4 t.Fn/5 t.Acc/7 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Reduce/4 t.Fn/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Reduce("Reduce", COOKIE1_, COOKIE2_, func_Reduce);


static refalrts::FnResult func_Fetch(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & Fetch/4 e.Argument/2 t.Function/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_right( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument as range 2
  //DEBUG: t.Function: 5
  //DEBUG: e.Argument: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply/4 } Tile{ AsIs: t.Function/5 } Tile{ AsIs: e.Argument/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Apply]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Fetch("Fetch", COOKIE1_, COOKIE2_, func_Fetch);


static refalrts::FnResult func_MapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & MapAccum/4 t.Fn/5 t.Acc/7 e.Tail/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail as range 2
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn/5 AsIs: t.Acc/7 } (/9 )/10 Tile{ AsIs: e.Tail/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MapAccum("MapAccum", COOKIE1_, COOKIE2_, func_MapAccum);


static refalrts::FnResult func_gen_DoMapAccum_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DoMapAccum$1=1/4 t.Fn/5 (/9 e.Scanned/7 )/10 (/13 e.Tail/11 )/14 t.Acc$a/15 e.StepScanned/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Scanned as range 7
  // closed e.Tail as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  // closed e.StepScanned as range 2
  //DEBUG: t.Fn: 5
  //DEBUG: e.Scanned: 7
  //DEBUG: e.Tail: 11
  //DEBUG: t.Acc$a: 15
  //DEBUG: e.StepScanned: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn/5 } Tile{ AsIs: t.Acc$a/15 } Tile{ AsIs: (/13 } Tile{ AsIs: e.Scanned/7 } Tile{ AsIs: e.StepScanned/2 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1("DoMapAccum$1=1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1);


static refalrts::FnResult func_DoMapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & DoMapAccum/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum/4 t.new1/5 t.new2/7 (/11 e.new3/9 )/12 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new3 as range 9
  // closed e.new4 as range 2
  do {
    // </0 & DoMapAccum/4 t.Fn/5 t.Acc/7 (/11 e.Scanned/13 )/12 t.Next/17 e.Tail/15 >/1
    context[13] = context[9];
    context[14] = context[10];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.Scanned as range 13
    context[18] = refalrts::tvar_left( context[17], context[15], context[16] );
    if( ! context[18] )
      continue;
    // closed e.Tail as range 15
    //DEBUG: t.Fn: 5
    //DEBUG: t.Acc: 7
    //DEBUG: e.Scanned: 13
    //DEBUG: t.Next: 17
    //DEBUG: e.Tail: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1/4 AsIs: t.Fn/5 } Tile{ AsIs: (/11 AsIs: e.Scanned/13 AsIs: )/12 } (/19 Tile{ AsIs: e.Tail/15 } )/20 </21 & Apply@2/22 t.Fn/5/23 Tile{ AsIs: t.Acc/7 } Tile{ AsIs: t.Next/17 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_Apply_Z2]);
    refalrts::copy_evar(vm, context[23], context[24], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[20], context[24] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum/4 t.Fn/5 t.Acc/7 (/11 e.Scanned/9 )/12 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Scanned as range 9
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7
  //DEBUG: e.Scanned: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoMapAccum/4 t.Fn/5 {REMOVED TILE} (/11 {REMOVED TILE} )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ AsIs: e.Scanned/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoMapAccum("DoMapAccum", COOKIE1_, COOKIE2_, func_DoMapAccum);


static refalrts::FnResult func_UnBracket(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & UnBracket/4 (/7 e.Expr/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr as range 5
  //DEBUG: e.Expr: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & UnBracket/4 (/7 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Expr/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnBracket("UnBracket", COOKIE1_, COOKIE2_, func_UnBracket);


static refalrts::FnResult func_DelAccumulator(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & DelAccumulator/4 t.Acc/5 e.Tail/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail as range 2
  //DEBUG: t.Acc: 5
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DelAccumulator/4 t.Acc/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Tail/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DelAccumulator("DelAccumulator", COOKIE1_, COOKIE2_, func_DelAccumulator);


static refalrts::FnResult func_Inc(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Inc/4 e.Num/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Num as range 2
  //DEBUG: e.Num: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: e.Num/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_Add]);
  refalrts::reinit_number(context[4], 1UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Inc("Inc", COOKIE1_, COOKIE2_, func_Inc);


static refalrts::FnResult func_Dec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Dec/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Dec/4 s.Num/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.Num: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 AsIs: s.Num/7 HalfReuse: 1/1 } >/8 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::update_name(context[4], functions[efunc_Sub]);
    refalrts::reinit_number(context[1], 1UL);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Dec/4 e.Num/2 >/1
  // closed e.Num as range 2
  //DEBUG: e.Num: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 } (/5 Tile{ AsIs: e.Num/2 } )/6 1/7 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_number(vm, context[7], 1UL);
  refalrts::update_name(context[4], functions[efunc_Sub]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Dec("Dec", COOKIE1_, COOKIE2_, func_Dec);


static refalrts::FnResult func_gen_Pipe_S2L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Pipe$2\1/4 t.Func/5 (/9 e.Funcs/7 )/10 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Funcs as range 7
  // closed e.Arg as range 2
  //DEBUG: t.Func: 5
  //DEBUG: e.Funcs: 7
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch/4 } </11 & Apply/12 Tile{ AsIs: t.Func/5 } Tile{ AsIs: e.Arg/2 } >/13 </14 Tile{ HalfReuse: & Pipe/9 AsIs: e.Funcs/7 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_Apply]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_Fetch]);
  refalrts::reinit_name(context[9], functions[efunc_Pipe]);
  refalrts::reinit_close_call(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S2L1("Pipe$2\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S2L1);


static refalrts::FnResult func_gen_Pipe_S3L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Pipe$3\1/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe$3\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Arg/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S3L1("Pipe$3\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S3L1);


static refalrts::FnResult func_Pipe(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Pipe/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Pipe/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Pipe/4 t.Func/7 >/1
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;
      //DEBUG: t.Func: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.Func/7 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Pipe/4 t.Func/7 e.Funcs/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Funcs as range 9
    //DEBUG: t.Func: 7
    //DEBUG: e.Funcs: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: [*]/0 Reuse: & Pipe$2\1/4 AsIs: t.Func/7 } (/11 Tile{ AsIs: e.Funcs/9 } )/12 Tile{ HalfReuse: {*}/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::reinit_closure_head(context[0]);
    refalrts::update_name(context[4], functions[efunc_gen_Pipe_S2L1]);
    refalrts::reinit_unwrapped_closure(context[1], context[0]);
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    refalrts::wrap_closure( context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Pipe/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: & Pipe$3\1/1 ]] }
  refalrts::reinit_name(context[1], functions[efunc_gen_Pipe_S3L1]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Pipe("Pipe", COOKIE1_, COOKIE2_, func_Pipe);


static refalrts::FnResult func_OptTreem_Drivem_Prepare(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & OptTree-Drive-Prepare/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & OptTree-Drive-Prepare/4 (/7 s.new1/9 s.new2/10 )/8 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new3 as range 2
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & OptTree-Drive-Prepare/4 (/7 # NoOpt/9 # NoOpt/10 )/8 e.AST/11 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[9] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[10] ) )
      continue;
    // closed e.AST as range 11
    //DEBUG: e.AST: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & OptTree-Drive-Prepare/4 (/7 # NoOpt/9 # NoOpt/10 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.AST/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & OptTree-Drive-Prepare/4 (/7 s.OptDrive/9 s.OptIntrinsic/10 )/8 e.AST-B/13 (/19 # DriveInfo/21 e.DriveInfo/17 )/20 e.AST-E/15 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left( identifiers[ident_DriveInfo], context[17], context[18] );
      if( ! context[21] )
        continue;
      // closed e.DriveInfo as range 17
      // closed e.AST-E as range 15
      //DEBUG: s.OptDrive: 9
      //DEBUG: s.OptIntrinsic: 10
      //DEBUG: e.AST-B: 13
      //DEBUG: e.DriveInfo: 17
      //DEBUG: e.AST-E: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} (/19 # DriveInfo/21 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & UpdateDriveInfo/7 AsIs: s.OptDrive/9 AsIs: s.OptIntrinsic/10 HalfReuse: (/8 } Tile{ AsIs: e.DriveInfo/17 } Tile{ AsIs: )/20 } Tile{ AsIs: e.AST-B/13 } Tile{ AsIs: e.AST-E/15 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[7], functions[efunc_UpdateDriveInfo]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::link_brackets( context[8], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[4], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptTree-Drive-Prepare/4 (/7 s.OptDrive/9 s.OptIntrinsic/10 )/8 e.AST/2 >/1
  // closed e.AST as range 2
  //DEBUG: s.OptDrive: 9
  //DEBUG: s.OptIntrinsic: 10
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.OptDrive/9 s.OptIntrinsic/10 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=1@1/4 HalfReuse: </7 } Tile{ HalfReuse: & DoExtractLabels@3/8 AsIs: e.AST/2 AsIs: >/1 } >/11 Tile{ ]] }
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A1Z1]);
  refalrts::reinit_open_call(context[7]);
  refalrts::reinit_name(context[8], functions[efunc_gen_DoExtractLabels_Z3]);
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[8], context[1] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_OptTreem_Drivem_Prepare("OptTree-Drive-Prepare", 0U, 0U, func_OptTreem_Drivem_Prepare);


static refalrts::FnResult func_GenRemainderFuncNames(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & GenRemainderFuncNames/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & GenRemainderFuncNames/4 s.new1/5 e.new2/2 s.new3/7 s.new4/6 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_right( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_right( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & GenRemainderFuncNames/4 s.Label/5 e.Name/8 s.End/7 s.End/6 >/1
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::repeated_stvar_term( vm, context[6], context[7] ) )
      continue;
    // closed e.Name as range 8
    //DEBUG: s.Label: 5
    //DEBUG: s.End: 7
    //DEBUG: e.Name: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & GenRemainderFuncNames/4 s.Label/5 e.Name/8 s.End/7 s.End/6 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenRemainderFuncNames/4 s.new5/5 e.new7/8 0/7 s.new6/6 >/1
    context[8] = context[2];
    context[9] = context[3];
    if( ! refalrts::number_term( 0UL, context[7] ) )
      continue;
    // closed e.new7 as range 8
    do {
      // </0 & GenRemainderFuncNames/4 s.Label/5 e.Name/10 0/7 1/6 >/1
      context[10] = context[8];
      context[11] = context[9];
      if( ! refalrts::number_term( 1UL, context[6] ) )
        continue;
      // closed e.Name as range 10
      //DEBUG: s.Label: 5
      //DEBUG: e.Name: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE} 1/6 >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: s.Label/5 AsIs: e.Name/10 HalfReuse: )/7 } Tile{ ]] }
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::link_brackets( context[4], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[4], context[7] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenRemainderFuncNames/4 s.Label/5 e.Name/10 0/7 s.End/6 >/1
    context[10] = context[8];
    context[11] = context[9];
    // closed e.Name as range 10
    //DEBUG: s.Label: 5
    //DEBUG: s.End: 6
    //DEBUG: e.Name: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/12 s.Label/5/13 e.Name/10/14 )/16 (/17 s.Label/5/18 </19 & AddStarSuffix*1/20 e.Name/10/21 1/23 >/24 )/25 Tile{ AsIs: </0 AsIs: & GenRemainderFuncNames/4 AsIs: s.Label/5 AsIs: e.Name/10 Reuse: 2/7 AsIs: s.End/6 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[12]);
    refalrts::copy_stvar(vm, context[13], context[5]);
    refalrts::copy_evar(vm, context[14], context[15], context[10], context[11]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::copy_stvar(vm, context[18], context[5]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_AddStarSuffix_D1]);
    refalrts::copy_evar(vm, context[21], context[22], context[10], context[11]);
    refalrts::alloc_number(vm, context[23], 1UL);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::update_number(context[7], 2UL);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[25] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[12], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[0];
    res = refalrts::splice_evar( res, context[12], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenRemainderFuncNames/4 s.Label/5 e.Name/2 s.Cur/7 s.End/6 >/1
  // closed e.Name as range 2
  //DEBUG: s.Label: 5
  //DEBUG: s.Cur: 7
  //DEBUG: s.End: 6
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/8 s.Label/5/9 </10 & AddStarSuffix*1/11 Tile{ AsIs: e.Name/2 } Tile{ AsIs: s.Cur/7 } >/12 )/13 Tile{ AsIs: </0 AsIs: & GenRemainderFuncNames/4 AsIs: s.Label/5 } e.Name/2/14 </16 & Add/17 1/18 s.Cur/7/19 >/20 Tile{ AsIs: s.End/6 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::copy_stvar(vm, context[9], context[5]);
  refalrts::alloc_open_call(vm, context[10]);
  refalrts::alloc_name(vm, context[11], functions[efunc_gen_AddStarSuffix_D1]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::copy_evar(vm, context[14], context[15], context[2], context[3]);
  refalrts::alloc_open_call(vm, context[16]);
  refalrts::alloc_name(vm, context[17], functions[efunc_Add]);
  refalrts::alloc_number(vm, context[18], 1UL);
  refalrts::copy_stvar(vm, context[19], context[7]);
  refalrts::alloc_close_call(vm, context[20]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[8], context[13] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[6];
  res = refalrts::splice_evar( res, context[16], context[20] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[0], context[5] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_GenRemainderFuncNames("GenRemainderFuncNames", COOKIE1_, COOKIE2_, func_GenRemainderFuncNames);


static refalrts::FnResult func_AddStarSuffix(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & AddStarSuffix/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & AddStarSuffix/4 e.new1/2 s.new2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 2
  do {
    // </0 & AddStarSuffix/4 e.Name/6 0/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::number_term( 0UL, context[5] ) )
      continue;
    // closed e.Name as range 6
    //DEBUG: e.Name: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & AddStarSuffix/4 {REMOVED TILE} 0/5 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Name/6 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & AddStarSuffix/4 e.Name/8 # SUF/12 e.Suffix/10 s.Count/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[8] = 0;
    context[9] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[10] = context[6];
      context[11] = context[7];
      context[12] = refalrts::ident_left( identifiers[ident_SUF], context[10], context[11] );
      if( ! context[12] )
        continue;
      // closed e.Suffix as range 10
      //DEBUG: s.Count: 5
      //DEBUG: e.Name: 8
      //DEBUG: e.Suffix: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Count/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Name/8 } Tile{ AsIs: # SUF/12 } Tile{ AsIs: e.Suffix/10 } Tile{ HalfReuse: '*'/4 } Tile{ HalfReuse: s.Count5 /1 ]] }
      refalrts::reinit_char(context[4], '*');
      refalrts::reinit_svar( context[1], context[5] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[8], context[9], context[6], context[7] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AddStarSuffix/4 e.Name/2 s.Count/5 >/1
  // closed e.Name as range 2
  //DEBUG: s.Count: 5
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Count/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Name/2 } Tile{ HalfReuse: # SUF/0 HalfReuse: '*'/4 } Tile{ HalfReuse: s.Count5 /1 ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_SUF]);
  refalrts::reinit_char(context[4], '*');
  refalrts::reinit_svar( context[1], context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_AddStarSuffix("AddStarSuffix", COOKIE1_, COOKIE2_, func_AddStarSuffix);


static refalrts::FnResult func_BaseName(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & BaseName/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & BaseName/4 e.new1/5 '*'/8 s.new2/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_right( context[7], context[5], context[6] ) )
      continue;
    context[8] = refalrts::char_right( '*', context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new1 as range 5
    do {
      // </0 & BaseName/4 e.Name/9 # SUF/11 '*'/8 s.Count/7 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = refalrts::ident_right( identifiers[ident_SUF], context[9], context[10] );
      if( ! context[11] )
        continue;
      // closed e.Name as range 9
      //DEBUG: s.Count: 7
      //DEBUG: e.Name: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & BaseName/4 {REMOVED TILE} # SUF/11 '*'/8 s.Count/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Name/9 } Tile{ HalfReuse: s.Count7 /1 ]] }
      refalrts::reinit_svar( context[1], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & BaseName/4 e.Name/9 '*'/8 s.Count/7 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Name as range 9
    //DEBUG: s.Count: 7
    //DEBUG: e.Name: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & BaseName/4 {REMOVED TILE} '*'/8 s.Count/7 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Name/9 } Tile{ HalfReuse: s.Count7 /1 ]] }
    refalrts::reinit_svar( context[1], context[7] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & BaseName/4 e.Name/2 >/1
  // closed e.Name as range 2
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & BaseName/4 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Name/2 } Tile{ HalfReuse: 0/1 ]] }
  refalrts::reinit_number(context[1], 0UL);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_BaseName("BaseName", COOKIE1_, COOKIE2_, func_BaseName);


static refalrts::FnResult func_gen_UpdateDriveInfo_A22(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & UpdateDriveInfo=22/4 (/7 e.KnownFunctions/5 )/8 (/11 e.OptFunctions/9 )/12 (/15 e.OptIntrinsicFuncs/13 )/16 (/19 e.AST$f/17 )/20 e.HashSetNames/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.KnownFunctions as range 5
  // closed e.OptFunctions as range 9
  // closed e.OptIntrinsicFuncs as range 13
  // closed e.AST$f as range 17
  // closed e.HashSetNames as range 2
  //DEBUG: e.KnownFunctions: 5
  //DEBUG: e.OptFunctions: 9
  //DEBUG: e.OptIntrinsicFuncs: 13
  //DEBUG: e.AST$f: 17
  //DEBUG: e.HashSetNames: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 (/11 {REMOVED TILE} )/12 (/15 {REMOVED TILE} {REMOVED TILE} (/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # DriveInfo/4 AsIs: (/7 } Tile{ AsIs: e.HashSetNames/2 } Tile{ AsIs: )/20 } Tile{ AsIs: e.KnownFunctions/5 } Tile{ AsIs: e.OptFunctions/9 } Tile{ AsIs: e.OptIntrinsicFuncs/13 } Tile{ AsIs: )/16 } Tile{ AsIs: e.AST$f/17 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_DriveInfo]);
  refalrts::link_brackets( context[0], context[16] );
  refalrts::link_brackets( context[7], context[20] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A22("UpdateDriveInfo=22", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A22);


static refalrts::FnResult func_gen_UpdateDriveInfo_A18(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  // </0 & UpdateDriveInfo=18/4 (/7 e.KnownFunctions/5 )/8 (/11 e.AST$f/9 )/12 (/15 e.KnownNames$a/13 )/16 (/19 e.Intrinsics$a/17 )/20 (/23 e.Extracted/21 )/24 (/27 e.Inlines$c/25 )/28 (/31 e.Metatables$a/29 )/32 e.Drives$d/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.KnownFunctions as range 5
  // closed e.AST$f as range 9
  // closed e.KnownNames$a as range 13
  // closed e.Intrinsics$a as range 17
  // closed e.Extracted as range 21
  // closed e.Inlines$c as range 25
  // closed e.Metatables$a as range 29
  // closed e.Drives$d as range 2
  //DEBUG: e.KnownFunctions: 5
  //DEBUG: e.AST$f: 9
  //DEBUG: e.KnownNames$a: 13
  //DEBUG: e.Intrinsics$a: 17
  //DEBUG: e.Extracted: 21
  //DEBUG: e.Inlines$c: 25
  //DEBUG: e.Metatables$a: 29
  //DEBUG: e.Drives$d: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=20@1/4 AsIs: (/7 AsIs: e.KnownFunctions/5 AsIs: )/8 AsIs: (/11 AsIs: e.AST$f/9 AsIs: )/12 AsIs: (/15 AsIs: e.KnownNames$a/13 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.Drives$d/2 } Tile{ AsIs: )/24 AsIs: (/27 AsIs: e.Inlines$c/25 AsIs: )/28 AsIs: (/31 AsIs: e.Metatables$a/29 AsIs: )/32 } (/33 Tile{ AsIs: e.Intrinsics$a/17 } )/34 </35 & FormatOptFunctions=1/36 </37 Tile{ HalfReuse: & MapAccum@1/20 AsIs: (/23 } </38 & ExtractBaseNames=1/39 </40 & Map@2/41 e.Drives$d/2/42 e.Inlines$c/25/44 e.Metatables$a/29/46 >/48 >/49 )/50 Tile{ AsIs: e.Extracted/21 } >/51 >/52 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::alloc_close_bracket(vm, context[34]);
  refalrts::alloc_open_call(vm, context[35]);
  refalrts::alloc_name(vm, context[36], functions[efunc_gen_FormatOptFunctions_A1]);
  refalrts::alloc_open_call(vm, context[37]);
  refalrts::alloc_open_call(vm, context[38]);
  refalrts::alloc_name(vm, context[39], functions[efunc_gen_ExtractBaseNames_A1]);
  refalrts::alloc_open_call(vm, context[40]);
  refalrts::alloc_name(vm, context[41], functions[efunc_gen_Map_Z2]);
  refalrts::copy_evar(vm, context[42], context[43], context[2], context[3]);
  refalrts::copy_evar(vm, context[44], context[45], context[25], context[26]);
  refalrts::copy_evar(vm, context[46], context[47], context[29], context[30]);
  refalrts::alloc_close_call(vm, context[48]);
  refalrts::alloc_close_call(vm, context[49]);
  refalrts::alloc_close_bracket(vm, context[50]);
  refalrts::alloc_close_call(vm, context[51]);
  refalrts::alloc_close_call(vm, context[52]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A20Z1]);
  refalrts::reinit_name(context[20], functions[efunc_gen_MapAccum_Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[52] );
  refalrts::push_stack( vm, context[35] );
  refalrts::push_stack( vm, context[51] );
  refalrts::push_stack( vm, context[37] );
  refalrts::link_brackets( context[23], context[50] );
  refalrts::push_stack( vm, context[49] );
  refalrts::push_stack( vm, context[38] );
  refalrts::push_stack( vm, context[48] );
  refalrts::push_stack( vm, context[40] );
  refalrts::link_brackets( context[33], context[34] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[19], context[24] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[51], context[52] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[38], context[50] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  res = refalrts::splice_evar( res, context[34], context[37] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_elem( res, context[33] );
  res = refalrts::splice_evar( res, context[24], context[32] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A18("UpdateDriveInfo=18", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A18);


static refalrts::FnResult func_gen_UpdateDriveInfo_A17(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & UpdateDriveInfo=17/4 (/7 e.KnownFunctions/5 )/8 (/11 e.AST$f/9 )/12 (/15 e.KnownNames$a/13 )/16 (/19 e.Intrinsics$a/17 )/20 (/23 e.Extracted/21 )/24 (/27 e.Metatables$a/25 )/28 (/31 e.Drives$c/29 )/32 e.Inlines$c/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.KnownFunctions as range 5
  // closed e.AST$f as range 9
  // closed e.KnownNames$a as range 13
  // closed e.Intrinsics$a as range 17
  // closed e.Extracted as range 21
  // closed e.Metatables$a as range 25
  // closed e.Drives$c as range 29
  // closed e.Inlines$c as range 2
  //DEBUG: e.KnownFunctions: 5
  //DEBUG: e.AST$f: 9
  //DEBUG: e.KnownNames$a: 13
  //DEBUG: e.Intrinsics$a: 17
  //DEBUG: e.Extracted: 21
  //DEBUG: e.Metatables$a: 25
  //DEBUG: e.Drives$c: 29
  //DEBUG: e.Inlines$c: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=18/4 AsIs: (/7 AsIs: e.KnownFunctions/5 AsIs: )/8 AsIs: (/11 AsIs: e.AST$f/9 AsIs: )/12 AsIs: (/15 AsIs: e.KnownNames$a/13 AsIs: )/16 AsIs: (/19 AsIs: e.Intrinsics$a/17 AsIs: )/20 AsIs: (/23 AsIs: e.Extracted/21 AsIs: )/24 AsIs: (/27 } e.Inlines$c/2/33 )/35 (/36 Tile{ AsIs: e.Metatables$a/25 } )/37 </38 Tile{ HalfReuse: & SetNames-Reject/28 AsIs: (/31 AsIs: e.Drives$c/29 AsIs: )/32 } (/39 Tile{ AsIs: e.Inlines$c/2 } )/40 >/41 Tile{ AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[33], context[34], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[35]);
  refalrts::alloc_open_bracket(vm, context[36]);
  refalrts::alloc_close_bracket(vm, context[37]);
  refalrts::alloc_open_call(vm, context[38]);
  refalrts::alloc_open_bracket(vm, context[39]);
  refalrts::alloc_close_bracket(vm, context[40]);
  refalrts::alloc_close_call(vm, context[41]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A18]);
  refalrts::reinit_name(context[28], functions[efunc_SetNamesm_Reject]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[41] );
  refalrts::push_stack( vm, context[38] );
  refalrts::link_brackets( context[39], context[40] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[36], context[37] );
  refalrts::link_brackets( context[27], context[35] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[40], context[41] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[39] );
  res = refalrts::splice_evar( res, context[28], context[32] );
  res = refalrts::splice_evar( res, context[37], context[38] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[35], context[36] );
  res = refalrts::splice_evar( res, context[33], context[34] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A17("UpdateDriveInfo=17", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A17);


static refalrts::FnResult func_gen_UpdateDriveInfo_A16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 45 elems
  refalrts::Iter context[45];
  refalrts::zeros( context, 45 );
  // </0 & UpdateDriveInfo=16/4 (/7 e.KnownFunctions/5 )/8 (/11 e.AST$f/9 )/12 (/15 e.KnownNames$a/13 )/16 (/19 e.Intrinsics$a/17 )/20 (/23 e.Extracted/21 )/24 (/27 e.Metatables$a/25 )/28 (/31 e.Lengths/29 )/32 (/35 e.Inlines$b/33 )/36 e.Drives$c/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  context[33] = 0;
  context[34] = 0;
  context[35] = refalrts::brackets_left( context[33], context[34], context[2], context[3] );
  if( ! context[35] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[35], context[36]);
  // closed e.KnownFunctions as range 5
  // closed e.AST$f as range 9
  // closed e.KnownNames$a as range 13
  // closed e.Intrinsics$a as range 17
  // closed e.Extracted as range 21
  // closed e.Metatables$a as range 25
  // closed e.Lengths as range 29
  // closed e.Inlines$b as range 33
  // closed e.Drives$c as range 2
  //DEBUG: e.KnownFunctions: 5
  //DEBUG: e.AST$f: 9
  //DEBUG: e.KnownNames$a: 13
  //DEBUG: e.Intrinsics$a: 17
  //DEBUG: e.Extracted: 21
  //DEBUG: e.Metatables$a: 25
  //DEBUG: e.Lengths: 29
  //DEBUG: e.Inlines$b: 33
  //DEBUG: e.Drives$c: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=17/4 AsIs: (/7 AsIs: e.KnownFunctions/5 AsIs: )/8 AsIs: (/11 AsIs: e.AST$f/9 AsIs: )/12 AsIs: (/15 AsIs: e.KnownNames$a/13 AsIs: )/16 AsIs: (/19 AsIs: e.Intrinsics$a/17 AsIs: )/20 AsIs: (/23 AsIs: e.Extracted/21 AsIs: )/24 AsIs: (/27 AsIs: e.Metatables$a/25 AsIs: )/28 AsIs: (/31 } Tile{ AsIs: e.Drives$c/2 } )/37 </38 & MultiplyRemainderNames=1/39 </40 & DoMapAccum@1/41 (/42 Tile{ AsIs: e.Lengths/29 } Tile{ AsIs: )/32 AsIs: (/35 } Tile{ AsIs: )/36 } Tile{ AsIs: e.Inlines$b/33 } >/43 >/44 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[37]);
  refalrts::alloc_open_call(vm, context[38]);
  refalrts::alloc_name(vm, context[39], functions[efunc_gen_MultiplyRemainderNames_A1]);
  refalrts::alloc_open_call(vm, context[40]);
  refalrts::alloc_name(vm, context[41], functions[efunc_gen_DoMapAccum_Z1]);
  refalrts::alloc_open_bracket(vm, context[42]);
  refalrts::alloc_close_call(vm, context[43]);
  refalrts::alloc_close_call(vm, context[44]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A17]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[44] );
  refalrts::push_stack( vm, context[38] );
  refalrts::push_stack( vm, context[43] );
  refalrts::push_stack( vm, context[40] );
  refalrts::link_brackets( context[35], context[36] );
  refalrts::link_brackets( context[42], context[32] );
  refalrts::link_brackets( context[31], context[37] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[43], context[44] );
  res = refalrts::splice_evar( res, context[33], context[34] );
  res = refalrts::splice_elem( res, context[36] );
  res = refalrts::splice_evar( res, context[32], context[35] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[37], context[42] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A16("UpdateDriveInfo=16", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A16);


static refalrts::FnResult func_gen_UpdateDriveInfo_A15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 49 elems
  refalrts::Iter context[49];
  refalrts::zeros( context, 49 );
  // </0 & UpdateDriveInfo=15/4 (/7 e.KnownFunctions/5 )/8 (/11 e.KnownNames$a/9 )/12 (/15 e.Intrinsics$a/13 )/16 (/19 e.Extracted/17 )/20 (/23 e.Metatables$a/21 )/24 (/27 e.Inlines$b/25 )/28 (/31 e.Drives$b/29 )/32 (/35 e.Lengths/33 )/36 e.AST$f/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  context[33] = 0;
  context[34] = 0;
  context[35] = refalrts::brackets_left( context[33], context[34], context[2], context[3] );
  if( ! context[35] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[35], context[36]);
  // closed e.KnownFunctions as range 5
  // closed e.KnownNames$a as range 9
  // closed e.Intrinsics$a as range 13
  // closed e.Extracted as range 17
  // closed e.Metatables$a as range 21
  // closed e.Inlines$b as range 25
  // closed e.Drives$b as range 29
  // closed e.Lengths as range 33
  // closed e.AST$f as range 2
  //DEBUG: e.KnownFunctions: 5
  //DEBUG: e.KnownNames$a: 9
  //DEBUG: e.Intrinsics$a: 13
  //DEBUG: e.Extracted: 17
  //DEBUG: e.Metatables$a: 21
  //DEBUG: e.Inlines$b: 25
  //DEBUG: e.Drives$b: 29
  //DEBUG: e.Lengths: 33
  //DEBUG: e.AST$f: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=16/4 AsIs: (/7 } Tile{ AsIs: e.KnownFunctions/5 } Tile{ AsIs: )/28 AsIs: (/31 } Tile{ AsIs: e.AST$f/2 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames$a/9 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics$a/13 AsIs: )/16 AsIs: (/19 AsIs: e.Extracted/17 AsIs: )/20 AsIs: (/23 AsIs: e.Metatables$a/21 AsIs: )/24 AsIs: (/27 } e.Lengths/33/37 )/39 (/40 Tile{ AsIs: e.Inlines$b/25 } )/41 </42 & MultiplyRemainderNames=1/43 </44 Tile{ HalfReuse: & DoMapAccum@1/32 AsIs: (/35 AsIs: e.Lengths/33 AsIs: )/36 } (/45 )/46 Tile{ AsIs: e.Drives$b/29 } >/47 >/48 Tile{ AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[37], context[38], context[33], context[34]);
  refalrts::alloc_close_bracket(vm, context[39]);
  refalrts::alloc_open_bracket(vm, context[40]);
  refalrts::alloc_close_bracket(vm, context[41]);
  refalrts::alloc_open_call(vm, context[42]);
  refalrts::alloc_name(vm, context[43], functions[efunc_gen_MultiplyRemainderNames_A1]);
  refalrts::alloc_open_call(vm, context[44]);
  refalrts::alloc_open_bracket(vm, context[45]);
  refalrts::alloc_close_bracket(vm, context[46]);
  refalrts::alloc_close_call(vm, context[47]);
  refalrts::alloc_close_call(vm, context[48]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A16]);
  refalrts::reinit_name(context[32], functions[efunc_gen_DoMapAccum_Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[48] );
  refalrts::push_stack( vm, context[42] );
  refalrts::push_stack( vm, context[47] );
  refalrts::push_stack( vm, context[44] );
  refalrts::link_brackets( context[45], context[46] );
  refalrts::link_brackets( context[35], context[36] );
  refalrts::link_brackets( context[40], context[41] );
  refalrts::link_brackets( context[27], context[39] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[31], context[8] );
  refalrts::link_brackets( context[7], context[28] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[47], context[48] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[45], context[46] );
  res = refalrts::splice_evar( res, context[32], context[36] );
  res = refalrts::splice_evar( res, context[41], context[44] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[39], context[40] );
  res = refalrts::splice_evar( res, context[37], context[38] );
  res = refalrts::splice_evar( res, context[8], context[27] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[28], context[31] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A15("UpdateDriveInfo=15", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A15);


static refalrts::FnResult func_gen_UpdateDriveInfo_A14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & UpdateDriveInfo=14/4 (/7 e.KnownFunctions/5 )/8 (/11 e.KnownNames$a/9 )/12 (/15 e.Intrinsics$a/13 )/16 (/19 e.Metatables$a/17 )/20 (/23 e.Inlines$b/21 )/24 (/27 e.Drives$b/25 )/28 (/31 e.Extracted/29 )/32 e.AST$e/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.KnownFunctions as range 5
  // closed e.KnownNames$a as range 9
  // closed e.Intrinsics$a as range 13
  // closed e.Metatables$a as range 17
  // closed e.Inlines$b as range 21
  // closed e.Drives$b as range 25
  // closed e.Extracted as range 29
  // closed e.AST$e as range 2
  //DEBUG: e.KnownFunctions: 5
  //DEBUG: e.KnownNames$a: 9
  //DEBUG: e.Intrinsics$a: 13
  //DEBUG: e.Metatables$a: 17
  //DEBUG: e.Inlines$b: 21
  //DEBUG: e.Drives$b: 25
  //DEBUG: e.Extracted: 29
  //DEBUG: e.AST$e: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=15/4 AsIs: (/7 AsIs: e.KnownFunctions/5 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames$a/9 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics$a/13 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.Extracted/29 } )/33 (/34 Tile{ AsIs: e.Metatables$a/17 } Tile{ AsIs: )/20 AsIs: (/23 AsIs: e.Inlines$b/21 AsIs: )/24 AsIs: (/27 AsIs: e.Drives$b/25 AsIs: )/28 HalfReuse: </31 } & DoMapAccum@2/35 (/36 )/37 (/38 Tile{ AsIs: )/32 AsIs: e.AST$e/2 AsIs: >/1 } >/39 Tile{ ]] }
  refalrts::alloc_close_bracket(vm, context[33]);
  refalrts::alloc_open_bracket(vm, context[34]);
  refalrts::alloc_name(vm, context[35], functions[efunc_gen_DoMapAccum_Z2]);
  refalrts::alloc_open_bracket(vm, context[36]);
  refalrts::alloc_close_bracket(vm, context[37]);
  refalrts::alloc_open_bracket(vm, context[38]);
  refalrts::alloc_close_call(vm, context[39]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A15]);
  refalrts::reinit_open_call(context[31]);
  refalrts::push_stack( vm, context[39] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[31] );
  refalrts::link_brackets( context[38], context[32] );
  refalrts::link_brackets( context[36], context[37] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[34], context[20] );
  refalrts::link_brackets( context[19], context[33] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[39] );
  res = refalrts::splice_evar( res, context[32], context[1] );
  res = refalrts::splice_evar( res, context[35], context[38] );
  res = refalrts::splice_evar( res, context[20], context[31] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[33], context[34] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A14("UpdateDriveInfo=14", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A14);


static refalrts::FnResult func_gen_UpdateDriveInfo_A13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & UpdateDriveInfo=13/4 (/7 e.KnownFunctions/5 )/8 (/11 e.KnownNames$a/9 )/12 (/15 e.Intrinsics$a/13 )/16 (/19 e.Metatables$a/17 )/20 (/23 e.Inlines$b/21 )/24 (/27 e.Drives$b/25 )/28 (/31 e.AST$d/29 )/32 e.ExtractedNames/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.KnownFunctions as range 5
  // closed e.KnownNames$a as range 9
  // closed e.Intrinsics$a as range 13
  // closed e.Metatables$a as range 17
  // closed e.Inlines$b as range 21
  // closed e.Drives$b as range 25
  // closed e.AST$d as range 29
  // closed e.ExtractedNames as range 2
  //DEBUG: e.KnownFunctions: 5
  //DEBUG: e.KnownNames$a: 9
  //DEBUG: e.Intrinsics$a: 13
  //DEBUG: e.Metatables$a: 17
  //DEBUG: e.Inlines$b: 21
  //DEBUG: e.Drives$b: 25
  //DEBUG: e.AST$d: 29
  //DEBUG: e.ExtractedNames: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=14/4 AsIs: (/7 AsIs: e.KnownFunctions/5 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames$a/9 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics$a/13 AsIs: )/16 AsIs: (/19 AsIs: e.Metatables$a/17 AsIs: )/20 AsIs: (/23 AsIs: e.Inlines$b/21 AsIs: )/24 AsIs: (/27 AsIs: e.Drives$b/25 AsIs: )/28 HalfReuse: </31 } & ExtractExtractableFunctions=1/33 </34 & DoMapAccum@3/35 (/36 (/37 Tile{ AsIs: e.ExtractedNames/2 } Tile{ AsIs: )/32 } )/38 (/39 )/40 Tile{ AsIs: e.AST$d/29 } >/41 >/42 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[33], functions[efunc_gen_ExtractExtractableFunctions_A1]);
  refalrts::alloc_open_call(vm, context[34]);
  refalrts::alloc_name(vm, context[35], functions[efunc_gen_DoMapAccum_Z3]);
  refalrts::alloc_open_bracket(vm, context[36]);
  refalrts::alloc_open_bracket(vm, context[37]);
  refalrts::alloc_close_bracket(vm, context[38]);
  refalrts::alloc_open_bracket(vm, context[39]);
  refalrts::alloc_close_bracket(vm, context[40]);
  refalrts::alloc_close_call(vm, context[41]);
  refalrts::alloc_close_call(vm, context[42]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A14]);
  refalrts::reinit_open_call(context[31]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[42] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[41] );
  refalrts::push_stack( vm, context[34] );
  refalrts::link_brackets( context[39], context[40] );
  refalrts::link_brackets( context[36], context[38] );
  refalrts::link_brackets( context[37], context[32] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[41], context[42] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[38], context[40] );
  res = refalrts::splice_elem( res, context[32] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[33], context[37] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A13("UpdateDriveInfo=13", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A13);


static refalrts::FnResult func_gen_UpdateDriveInfo_A12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 45 elems
  refalrts::Iter context[45];
  refalrts::zeros( context, 45 );
  // </0 & UpdateDriveInfo=12/4 (/7 e.KnownFunctions/5 )/8 (/11 e.KnownNames$a/9 )/12 (/15 e.Intrinsics$a/13 )/16 (/19 e.Metatables$a/17 )/20 (/23 e.Inlines$b/21 )/24 (/27 e.Drives$b/25 )/28 (/31 e.AST$d/29 )/32 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.KnownFunctions as range 5
  // closed e.KnownNames$a as range 9
  // closed e.Intrinsics$a as range 13
  // closed e.Metatables$a as range 17
  // closed e.Inlines$b as range 21
  // closed e.Drives$b as range 25
  // closed e.AST$d as range 29
  //DEBUG: e.KnownFunctions: 5
  //DEBUG: e.KnownNames$a: 9
  //DEBUG: e.Intrinsics$a: 13
  //DEBUG: e.Metatables$a: 17
  //DEBUG: e.Inlines$b: 21
  //DEBUG: e.Drives$b: 25
  //DEBUG: e.AST$d: 29

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=13/4 AsIs: (/7 AsIs: e.KnownFunctions/5 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames$a/9 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics$a/13 AsIs: )/16 AsIs: (/19 AsIs: e.Metatables$a/17 AsIs: )/20 AsIs: (/23 AsIs: e.Inlines$b/21 AsIs: )/24 AsIs: (/27 AsIs: e.Drives$b/25 AsIs: )/28 AsIs: (/31 AsIs: e.AST$d/29 AsIs: )/32 HalfReuse: </1 } & ExtractBaseNames=1/33 </34 & Map@2/35 e.Drives$b/25/36 e.Inlines$b/21/38 e.Metatables$a/17/40 >/42 >/43 >/44 Tile{ ]] }
  refalrts::alloc_name(vm, context[33], functions[efunc_gen_ExtractBaseNames_A1]);
  refalrts::alloc_open_call(vm, context[34]);
  refalrts::alloc_name(vm, context[35], functions[efunc_gen_Map_Z2]);
  refalrts::copy_evar(vm, context[36], context[37], context[25], context[26]);
  refalrts::copy_evar(vm, context[38], context[39], context[21], context[22]);
  refalrts::copy_evar(vm, context[40], context[41], context[17], context[18]);
  refalrts::alloc_close_call(vm, context[42]);
  refalrts::alloc_close_call(vm, context[43]);
  refalrts::alloc_close_call(vm, context[44]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A13]);
  refalrts::reinit_open_call(context[1]);
  refalrts::push_stack( vm, context[44] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[43] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[42] );
  refalrts::push_stack( vm, context[34] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[33], context[44] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A12("UpdateDriveInfo=12", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A12);


static refalrts::FnResult func_gen_UpdateDriveInfo_A12L1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & UpdateDriveInfo=12\1=1/4 (/7 e.Name/5 )/8 e.Label/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Name as range 5
  // closed e.Label as range 2
  //DEBUG: e.Name: 5
  //DEBUG: e.Label: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Log-PutLine/4 HalfReuse: 'N'/7 }"ew "/9 Tile{ AsIs: e.Label/2 } Tile{ HalfReuse: ' '/8 }"function: "/11 </13 & DisplayName/14 Tile{ AsIs: e.Name/5 } >/15 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_chars(vm, context[9], context[10], "ew ", 3);
  refalrts::alloc_chars(vm, context[11], context[12], "function: ", 10);
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_DisplayName]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_Logm_PutLine]);
  refalrts::reinit_char(context[7], 'N');
  refalrts::reinit_char(context[8], ' ');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[14] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A12L1A1("UpdateDriveInfo=12\\1=1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A12L1A1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & UpdateDriveInfo=11/4 (/7 e.KnownFunctions/5 )/8 (/11 e.KnownNames$a/9 )/12 (/15 e.Intrinsics$a/13 )/16 (/19 e.Inlines$b/17 )/20 (/23 e.Drives$b/21 )/24 (/27 e.AST$d/25 )/28 e.Metatables$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.KnownFunctions as range 5
  // closed e.KnownNames$a as range 9
  // closed e.Intrinsics$a as range 13
  // closed e.Inlines$b as range 17
  // closed e.Drives$b as range 21
  // closed e.AST$d as range 25
  // closed e.Metatables$a as range 2
  //DEBUG: e.KnownFunctions: 5
  //DEBUG: e.KnownNames$a: 9
  //DEBUG: e.Intrinsics$a: 13
  //DEBUG: e.Inlines$b: 17
  //DEBUG: e.Drives$b: 21
  //DEBUG: e.AST$d: 25
  //DEBUG: e.Metatables$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=12/4 AsIs: (/7 AsIs: e.KnownFunctions/5 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames$a/9 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics$a/13 AsIs: )/16 AsIs: (/19 } e.Metatables$a/2/29 )/31 (/32 Tile{ AsIs: e.Inlines$b/17 } Tile{ AsIs: )/20 AsIs: (/23 AsIs: e.Drives$b/21 AsIs: )/24 AsIs: (/27 AsIs: e.AST$d/25 AsIs: )/28 } </33 & Map@3/34 e.Drives$b/21/35 e.Inlines$b/17/37 e.Intrinsics$a/13/39 Tile{ AsIs: e.Metatables$a/2 } >/41 Tile{ AsIs: >/1 ]] }
  refalrts::copy_evar(vm, context[29], context[30], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[31]);
  refalrts::alloc_open_bracket(vm, context[32]);
  refalrts::alloc_open_call(vm, context[33]);
  refalrts::alloc_name(vm, context[34], functions[efunc_gen_Map_Z3]);
  refalrts::copy_evar(vm, context[35], context[36], context[21], context[22]);
  refalrts::copy_evar(vm, context[37], context[38], context[17], context[18]);
  refalrts::copy_evar(vm, context[39], context[40], context[13], context[14]);
  refalrts::alloc_close_call(vm, context[41]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[41] );
  refalrts::push_stack( vm, context[33] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[32], context[20] );
  refalrts::link_brackets( context[19], context[31] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[41] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[39], context[40] );
  res = refalrts::splice_evar( res, context[37], context[38] );
  res = refalrts::splice_evar( res, context[35], context[36] );
  res = refalrts::splice_evar( res, context[33], context[34] );
  res = refalrts::splice_evar( res, context[20], context[28] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A11("UpdateDriveInfo=11", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A11);


static refalrts::FnResult func_gen_UpdateDriveInfo_A10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & UpdateDriveInfo=10/4 (/7 e.KnownFunctions/5 )/8 (/11 e.KnownNames$a/9 )/12 (/15 e.Inlines$b/13 )/16 (/19 e.Drives$b/17 )/20 (/23 e.AST$d/21 )/24 (/27 e.Metatables/25 )/28 e.Intrinsics$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.KnownFunctions as range 5
  // closed e.KnownNames$a as range 9
  // closed e.Inlines$b as range 13
  // closed e.Drives$b as range 17
  // closed e.AST$d as range 21
  // closed e.Metatables as range 25
  // closed e.Intrinsics$a as range 2
  //DEBUG: e.KnownFunctions: 5
  //DEBUG: e.KnownNames$a: 9
  //DEBUG: e.Inlines$b: 13
  //DEBUG: e.Drives$b: 17
  //DEBUG: e.AST$d: 21
  //DEBUG: e.Metatables: 25
  //DEBUG: e.Intrinsics$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=11/4 AsIs: (/7 AsIs: e.KnownFunctions/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.KnownNames$a/9 } )/29 (/30 Tile{ AsIs: e.Intrinsics$a/2 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Inlines$b/13 AsIs: )/16 AsIs: (/19 AsIs: e.Drives$b/17 AsIs: )/20 AsIs: (/23 AsIs: e.AST$d/21 AsIs: )/24 HalfReuse: </27 } & SetNames-Reject/31 (/32 Tile{ AsIs: e.Metatables/25 } Tile{ AsIs: )/28 } (/33 e.KnownNames$a/9/34 )/36 >/37 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::alloc_open_bracket(vm, context[30]);
  refalrts::alloc_name(vm, context[31], functions[efunc_SetNamesm_Reject]);
  refalrts::alloc_open_bracket(vm, context[32]);
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::copy_evar(vm, context[34], context[35], context[9], context[10]);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_close_call(vm, context[37]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A11]);
  refalrts::reinit_open_call(context[27]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[37] );
  refalrts::push_stack( vm, context[27] );
  refalrts::link_brackets( context[33], context[36] );
  refalrts::link_brackets( context[32], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[30], context[12] );
  refalrts::link_brackets( context[11], context[29] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[33], context[37] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[12], context[27] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A10("UpdateDriveInfo=10", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A10);


static refalrts::FnResult func_gen_UpdateDriveInfo_A9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & UpdateDriveInfo=9/4 (/7 e.KnownFunctions/5 )/8 (/11 e.KnownNames$a/9 )/12 (/15 e.Drives$b/13 )/16 (/19 e.AST$d/17 )/20 (/23 e.Metatables/21 )/24 (/27 e.Intrinsics/25 )/28 e.Inlines$b/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.KnownFunctions as range 5
  // closed e.KnownNames$a as range 9
  // closed e.Drives$b as range 13
  // closed e.AST$d as range 17
  // closed e.Metatables as range 21
  // closed e.Intrinsics as range 25
  // closed e.Inlines$b as range 2
  //DEBUG: e.KnownFunctions: 5
  //DEBUG: e.KnownNames$a: 9
  //DEBUG: e.Drives$b: 13
  //DEBUG: e.AST$d: 17
  //DEBUG: e.Metatables: 21
  //DEBUG: e.Intrinsics: 25
  //DEBUG: e.Inlines$b: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=10/4 AsIs: (/7 AsIs: e.KnownFunctions/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.KnownNames$a/9 } )/29 (/30 Tile{ AsIs: e.Inlines$b/2 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Drives$b/13 AsIs: )/16 AsIs: (/19 AsIs: e.AST$d/17 AsIs: )/20 AsIs: (/23 AsIs: e.Metatables/21 AsIs: )/24 HalfReuse: </27 } & SetNames-Reject/31 (/32 Tile{ AsIs: e.Intrinsics/25 } Tile{ AsIs: )/28 } (/33 e.KnownNames$a/9/34 )/36 >/37 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::alloc_open_bracket(vm, context[30]);
  refalrts::alloc_name(vm, context[31], functions[efunc_SetNamesm_Reject]);
  refalrts::alloc_open_bracket(vm, context[32]);
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::copy_evar(vm, context[34], context[35], context[9], context[10]);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_close_call(vm, context[37]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A10]);
  refalrts::reinit_open_call(context[27]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[37] );
  refalrts::push_stack( vm, context[27] );
  refalrts::link_brackets( context[33], context[36] );
  refalrts::link_brackets( context[32], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[30], context[12] );
  refalrts::link_brackets( context[11], context[29] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[33], context[37] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[12], context[27] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A9("UpdateDriveInfo=9", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A9);


static refalrts::FnResult func_gen_UpdateDriveInfo_A8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & UpdateDriveInfo=8/4 (/7 e.KnownFunctions/5 )/8 (/11 e.KnownNames$a/9 )/12 (/15 e.AST$d/13 )/16 (/19 e.Metatables/17 )/20 (/23 e.Intrinsics/21 )/24 (/27 e.Inlines$a/25 )/28 e.Drives$b/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.KnownFunctions as range 5
  // closed e.KnownNames$a as range 9
  // closed e.AST$d as range 13
  // closed e.Metatables as range 17
  // closed e.Intrinsics as range 21
  // closed e.Inlines$a as range 25
  // closed e.Drives$b as range 2
  //DEBUG: e.KnownFunctions: 5
  //DEBUG: e.KnownNames$a: 9
  //DEBUG: e.AST$d: 13
  //DEBUG: e.Metatables: 17
  //DEBUG: e.Intrinsics: 21
  //DEBUG: e.Inlines$a: 25
  //DEBUG: e.Drives$b: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=9/4 AsIs: (/7 AsIs: e.KnownFunctions/5 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.KnownNames$a/9 } )/29 (/30 Tile{ AsIs: e.Drives$b/2 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.AST$d/13 AsIs: )/16 AsIs: (/19 AsIs: e.Metatables/17 AsIs: )/20 AsIs: (/23 AsIs: e.Intrinsics/21 AsIs: )/24 HalfReuse: </27 } & SetNames-Reject/31 (/32 Tile{ AsIs: e.Inlines$a/25 } Tile{ AsIs: )/28 } (/33 e.KnownNames$a/9/34 )/36 >/37 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::alloc_open_bracket(vm, context[30]);
  refalrts::alloc_name(vm, context[31], functions[efunc_SetNamesm_Reject]);
  refalrts::alloc_open_bracket(vm, context[32]);
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::copy_evar(vm, context[34], context[35], context[9], context[10]);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_close_call(vm, context[37]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A9]);
  refalrts::reinit_open_call(context[27]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[37] );
  refalrts::push_stack( vm, context[27] );
  refalrts::link_brackets( context[33], context[36] );
  refalrts::link_brackets( context[32], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[30], context[12] );
  refalrts::link_brackets( context[11], context[29] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[33], context[37] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[12], context[27] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A8("UpdateDriveInfo=8", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A8);


static refalrts::FnResult func_gen_UpdateDriveInfo_A7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & UpdateDriveInfo=7/4 (/7 e.KnownFunctions/5 )/8 (/11 e.AST$d/9 )/12 (/15 e.Metatables/13 )/16 (/19 e.Intrinsics/17 )/20 (/23 e.Inlines$a/21 )/24 (/27 e.Drives$a/25 )/28 e.KnownNames$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.KnownFunctions as range 5
  // closed e.AST$d as range 9
  // closed e.Metatables as range 13
  // closed e.Intrinsics as range 17
  // closed e.Inlines$a as range 21
  // closed e.Drives$a as range 25
  // closed e.KnownNames$a as range 2
  //DEBUG: e.KnownFunctions: 5
  //DEBUG: e.AST$d: 9
  //DEBUG: e.Metatables: 13
  //DEBUG: e.Intrinsics: 17
  //DEBUG: e.Inlines$a: 21
  //DEBUG: e.Drives$a: 25
  //DEBUG: e.KnownNames$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=8/4 AsIs: (/7 } Tile{ AsIs: e.KnownFunctions/5 } Tile{ AsIs: )/28 } (/29 Tile{ AsIs: e.KnownNames$a/2 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.AST$d/9 AsIs: )/12 AsIs: (/15 AsIs: e.Metatables/13 AsIs: )/16 AsIs: (/19 AsIs: e.Intrinsics/17 AsIs: )/20 AsIs: (/23 AsIs: e.Inlines$a/21 AsIs: )/24 HalfReuse: </27 } & SetNames-Reject/30 (/31 Tile{ AsIs: e.Drives$a/25 } )/32 (/33 e.KnownNames$a/2/34 )/36 >/37 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_SetNamesm_Reject]);
  refalrts::alloc_open_bracket(vm, context[31]);
  refalrts::alloc_close_bracket(vm, context[32]);
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::copy_evar(vm, context[34], context[35], context[2], context[3]);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_close_call(vm, context[37]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A8]);
  refalrts::reinit_open_call(context[27]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[37] );
  refalrts::push_stack( vm, context[27] );
  refalrts::link_brackets( context[33], context[36] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[29], context[8] );
  refalrts::link_brackets( context[7], context[28] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[32], context[37] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[30], context[31] );
  res = refalrts::splice_evar( res, context[8], context[27] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[29] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A7("UpdateDriveInfo=7", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A7);


static refalrts::FnResult func_gen_UpdateDriveInfo_A6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  // </0 & UpdateDriveInfo=6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UpdateDriveInfo=6/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 (/27 e.new6/25 )/28 e.new7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 25
  // closed e.new7 as range 2
  do {
    // </0 & UpdateDriveInfo=6/4 (/7 e.KnownFunctions/29 )/8 (/11 e.AST$d/31 )/12 (/15 e.Metatables/33 )/16 (/19 e.Intrinsics/35 )/20 (/23 e.Drives$a/37 )/24 (/27 s.BucketSize/43 e./39 )/28 e.Inlines$a/41 >/1
    context[29] = context[5];
    context[30] = context[6];
    context[31] = context[9];
    context[32] = context[10];
    context[33] = context[13];
    context[34] = context[14];
    context[35] = context[17];
    context[36] = context[18];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[25];
    context[40] = context[26];
    context[41] = context[2];
    context[42] = context[3];
    // closed e.KnownFunctions as range 29
    // closed e.AST$d as range 31
    // closed e.Metatables as range 33
    // closed e.Intrinsics as range 35
    // closed e.Drives$a as range 37
    // closed e.Inlines$a as range 41
    if( ! refalrts::svar_left( context[43], context[39], context[40] ) )
      continue;
    // closed e. as range 39
    //DEBUG: e.KnownFunctions: 29
    //DEBUG: e.AST$d: 31
    //DEBUG: e.Metatables: 33
    //DEBUG: e.Intrinsics: 35
    //DEBUG: e.Drives$a: 37
    //DEBUG: e.Inlines$a: 41
    //DEBUG: s.BucketSize: 43
    //DEBUG: e.: 39

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.BucketSize/43 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=7/4 AsIs: (/7 AsIs: e.KnownFunctions/29 AsIs: )/8 AsIs: (/11 AsIs: e.AST$d/31 AsIs: )/12 AsIs: (/15 AsIs: e.Metatables/33 AsIs: )/16 AsIs: (/19 AsIs: e.Intrinsics/35 AsIs: )/20 AsIs: (/23 } Tile{ AsIs: e.Inlines$a/41 } Tile{ AsIs: )/24 AsIs: (/27 } Tile{ AsIs: e.Drives$a/37 } Tile{ AsIs: )/28 } </44 & Map@4/45 Tile{ AsIs: e./39 } >/46 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[44]);
    refalrts::alloc_name(vm, context[45], functions[efunc_gen_Map_Z4]);
    refalrts::alloc_close_call(vm, context[46]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[46] );
    refalrts::push_stack( vm, context[44] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[46] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[44], context[45] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    refalrts::splice_to_freelist_open( vm, context[23], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=6/4 (/7 e.KnownFunctions/5 )/8 (/11 e.AST$d/9 )/12 (/15 e.Metatables/13 )/16 (/19 e.Intrinsics/17 )/20 (/23 e.Drives$a/21 )/24 (/27 e.KnownNames/25 )/28 e.Inlines$a/2 >/1
  // closed e.KnownFunctions as range 5
  // closed e.AST$d as range 9
  // closed e.Metatables as range 13
  // closed e.Intrinsics as range 17
  // closed e.Drives$a as range 21
  // closed e.KnownNames as range 25
  // closed e.Inlines$a as range 2
  //DEBUG: e.KnownFunctions: 5
  //DEBUG: e.AST$d: 9
  //DEBUG: e.Metatables: 13
  //DEBUG: e.Intrinsics: 17
  //DEBUG: e.Drives$a: 21
  //DEBUG: e.KnownNames: 25
  //DEBUG: e.Inlines$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=7/4 AsIs: (/7 AsIs: e.KnownFunctions/5 AsIs: )/8 AsIs: (/11 AsIs: e.AST$d/9 AsIs: )/12 AsIs: (/15 AsIs: e.Metatables/13 AsIs: )/16 AsIs: (/19 AsIs: e.Intrinsics/17 AsIs: )/20 AsIs: (/23 } Tile{ AsIs: e.Inlines$a/2 } Tile{ AsIs: )/24 AsIs: (/27 } Tile{ AsIs: e.Drives$a/21 } Tile{ AsIs: )/28 } </29 & HashSet-AsChain*1/30 Tile{ AsIs: e.KnownNames/25 } >/31 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_gen_HashSetm_AsChain_D1]);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[29] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[31] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[24], context[27] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A6("UpdateDriveInfo=6", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A6);


static refalrts::FnResult func_gen_UpdateDriveInfo_A5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & UpdateDriveInfo=5/4 (/7 e.KnownFunctions/5 )/8 (/11 e.AST$d/9 )/12 (/15 e.Metatables/13 )/16 (/19 e.Intrinsics/17 )/20 (/23 e.KnownNames/21 )/24 (/27 e.Inlines/25 )/28 e.Drives$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.KnownFunctions as range 5
  // closed e.AST$d as range 9
  // closed e.Metatables as range 13
  // closed e.Intrinsics as range 17
  // closed e.KnownNames as range 21
  // closed e.Inlines as range 25
  // closed e.Drives$a as range 2
  //DEBUG: e.KnownFunctions: 5
  //DEBUG: e.AST$d: 9
  //DEBUG: e.Metatables: 13
  //DEBUG: e.Intrinsics: 17
  //DEBUG: e.KnownNames: 21
  //DEBUG: e.Inlines: 25
  //DEBUG: e.Drives$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=6/4 AsIs: (/7 AsIs: e.KnownFunctions/5 AsIs: )/8 AsIs: (/11 AsIs: e.AST$d/9 AsIs: )/12 AsIs: (/15 AsIs: e.Metatables/13 AsIs: )/16 AsIs: (/19 AsIs: e.Intrinsics/17 AsIs: )/20 AsIs: (/23 } Tile{ AsIs: e.Drives$a/2 } )/29 (/30 Tile{ AsIs: e.KnownNames/21 } )/31 </32 Tile{ HalfReuse: & SetNames-Reject/24 AsIs: (/27 AsIs: e.Inlines/25 AsIs: )/28 } (/33 e.Intrinsics/17/34 )/36 >/37 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::alloc_open_bracket(vm, context[30]);
  refalrts::alloc_close_bracket(vm, context[31]);
  refalrts::alloc_open_call(vm, context[32]);
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::copy_evar(vm, context[34], context[35], context[17], context[18]);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_close_call(vm, context[37]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A6]);
  refalrts::reinit_name(context[24], functions[efunc_SetNamesm_Reject]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[37] );
  refalrts::push_stack( vm, context[32] );
  refalrts::link_brackets( context[33], context[36] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[30], context[31] );
  refalrts::link_brackets( context[23], context[29] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[33], context[37] );
  res = refalrts::splice_evar( res, context[24], context[28] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A5("UpdateDriveInfo=5", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A5);


static refalrts::FnResult func_gen_UpdateDriveInfo_A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & UpdateDriveInfo=4/4 (/7 e.KnownFunctions/5 )/8 (/11 e.Intrinsics/9 )/12 (/15 e.KnownNames/13 )/16 (/19 e.Inlines/17 )/20 (/23 e.Drives/21 )/24 (/27 e.Metatables/25 )/28 e.AST$d/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.KnownFunctions as range 5
  // closed e.Intrinsics as range 9
  // closed e.KnownNames as range 13
  // closed e.Inlines as range 17
  // closed e.Drives as range 21
  // closed e.Metatables as range 25
  // closed e.AST$d as range 2
  //DEBUG: e.KnownFunctions: 5
  //DEBUG: e.Intrinsics: 9
  //DEBUG: e.KnownNames: 13
  //DEBUG: e.Inlines: 17
  //DEBUG: e.Drives: 21
  //DEBUG: e.Metatables: 25
  //DEBUG: e.AST$d: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=5/4 AsIs: (/7 } Tile{ AsIs: e.KnownFunctions/5 } )/29 (/30 Tile{ AsIs: e.AST$d/2 } Tile{ AsIs: )/24 AsIs: (/27 } Tile{ AsIs: e.Metatables/25 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Intrinsics/9 AsIs: )/12 AsIs: (/15 AsIs: e.KnownNames/13 AsIs: )/16 AsIs: (/19 AsIs: e.Inlines/17 AsIs: )/20 HalfReuse: </23 } & SetNames-Reject/31 (/32 Tile{ AsIs: e.Drives/21 } Tile{ AsIs: )/28 } (/33 e.Intrinsics/9/34 )/36 >/37 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::alloc_open_bracket(vm, context[30]);
  refalrts::alloc_name(vm, context[31], functions[efunc_SetNamesm_Reject]);
  refalrts::alloc_open_bracket(vm, context[32]);
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::copy_evar(vm, context[34], context[35], context[9], context[10]);
  refalrts::alloc_close_bracket(vm, context[36]);
  refalrts::alloc_close_call(vm, context[37]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A5]);
  refalrts::reinit_open_call(context[23]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[37] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[33], context[36] );
  refalrts::link_brackets( context[32], context[28] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[27], context[8] );
  refalrts::link_brackets( context[30], context[24] );
  refalrts::link_brackets( context[7], context[29] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[33], context[37] );
  res = refalrts::splice_elem( res, context[28] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[8], context[23] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[24], context[27] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A4("UpdateDriveInfo=4", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A4);


static refalrts::FnResult func_gen_UpdateDriveInfo_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 32 elems
  refalrts::Iter context[32];
  refalrts::zeros( context, 32 );
  // </0 & UpdateDriveInfo=3/4 (/7 e.KnownFunctions/5 )/8 (/11 e.KnownNames/9 )/12 (/15 e.Inlines/13 )/16 (/19 e.Drives/17 )/20 (/23 e.Intrinsics/21 )/24 e.AST$c/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.KnownFunctions as range 5
  // closed e.KnownNames as range 9
  // closed e.Inlines as range 13
  // closed e.Drives as range 17
  // closed e.Intrinsics as range 21
  // closed e.AST$c as range 2
  //DEBUG: e.KnownFunctions: 5
  //DEBUG: e.KnownNames: 9
  //DEBUG: e.Inlines: 13
  //DEBUG: e.Drives: 17
  //DEBUG: e.Intrinsics: 21
  //DEBUG: e.AST$c: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=4/4 AsIs: (/7 } Tile{ AsIs: e.KnownFunctions/5 } )/25 (/26 Tile{ AsIs: e.Intrinsics/21 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames/9 AsIs: )/12 AsIs: (/15 AsIs: e.Inlines/13 AsIs: )/16 AsIs: (/19 AsIs: e.Drives/17 AsIs: )/20 HalfReuse: </23 } & DoMapAccum@4/27 (/28 )/29 (/30 Tile{ AsIs: )/24 AsIs: e.AST$c/2 AsIs: >/1 } >/31 Tile{ ]] }
  refalrts::alloc_close_bracket(vm, context[25]);
  refalrts::alloc_open_bracket(vm, context[26]);
  refalrts::alloc_name(vm, context[27], functions[efunc_gen_DoMapAccum_Z4]);
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::alloc_close_bracket(vm, context[29]);
  refalrts::alloc_open_bracket(vm, context[30]);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A4]);
  refalrts::reinit_open_call(context[23]);
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[23] );
  refalrts::link_brackets( context[30], context[24] );
  refalrts::link_brackets( context[28], context[29] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[26], context[8] );
  refalrts::link_brackets( context[7], context[25] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[31] );
  res = refalrts::splice_evar( res, context[24], context[1] );
  res = refalrts::splice_evar( res, context[27], context[30] );
  res = refalrts::splice_evar( res, context[8], context[23] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A3("UpdateDriveInfo=3", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A3);


static refalrts::FnResult func_gen_UpdateDriveInfo_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & UpdateDriveInfo=2/4 (/7 e.KnownFunctions/5 )/8 (/11 e.KnownNames/9 )/12 (/15 e.Drives/13 )/16 (/19 e.Inlines/17 )/20 e.AST$b/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.KnownFunctions as range 5
  // closed e.KnownNames as range 9
  // closed e.Drives as range 13
  // closed e.Inlines as range 17
  // closed e.AST$b as range 2
  //DEBUG: e.KnownFunctions: 5
  //DEBUG: e.KnownNames: 9
  //DEBUG: e.Drives: 13
  //DEBUG: e.Inlines: 17
  //DEBUG: e.AST$b: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=3/4 AsIs: (/7 AsIs: e.KnownFunctions/5 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames/9 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Inlines/17 } Tile{ AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.Drives/13 } )/21 </22 Tile{ HalfReuse: & DoExtractLabels@1/20 AsIs: e.AST$b/2 AsIs: >/1 } >/23 Tile{ ]] }
  refalrts::alloc_close_bracket(vm, context[21]);
  refalrts::alloc_open_call(vm, context[22]);
  refalrts::alloc_close_call(vm, context[23]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A3]);
  refalrts::reinit_name(context[20], functions[efunc_gen_DoExtractLabels_Z1]);
  refalrts::push_stack( vm, context[23] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[22] );
  refalrts::link_brackets( context[19], context[21] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[23] );
  res = refalrts::splice_evar( res, context[20], context[1] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[16], context[19] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A2("UpdateDriveInfo=2", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A2);


static refalrts::FnResult func_gen_UpdateDriveInfo_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & UpdateDriveInfo=1/4 (/7 e.KnownFunctions/5 )/8 (/11 e.KnownNames/9 )/12 (/15 e.Drives/13 )/16 e.AST$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.KnownFunctions as range 5
  // closed e.KnownNames as range 9
  // closed e.Drives as range 13
  // closed e.AST$a as range 2
  //DEBUG: e.KnownFunctions: 5
  //DEBUG: e.KnownNames: 9
  //DEBUG: e.Drives: 13
  //DEBUG: e.AST$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=2/4 AsIs: (/7 AsIs: e.KnownFunctions/5 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames/9 AsIs: )/12 AsIs: (/15 AsIs: e.Drives/13 AsIs: )/16 } </17 & DoExtractLabels@2/18 Tile{ AsIs: e.AST$a/2 } >/19 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_DoExtractLabels_Z2]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A1("UpdateDriveInfo=1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A1);


static refalrts::FnResult func_UpdateDriveInfo(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & UpdateDriveInfo/4 s.OptDrive/5 s.OptIntrinsic/6 (/9 (/13 e.KnownNames/11 )/14 e.KnownFunctions/7 )/10 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[7], context[8] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.KnownNames as range 11
  // closed e.KnownFunctions as range 7
  // closed e.AST as range 2
  //DEBUG: s.OptDrive: 5
  //DEBUG: s.OptIntrinsic: 6
  //DEBUG: e.KnownNames: 11
  //DEBUG: e.KnownFunctions: 7
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.OptDrive/5 s.OptIntrinsic/6 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=1/4 } (/15 Tile{ AsIs: e.KnownFunctions/7 } Tile{ HalfReuse: )/9 AsIs: (/13 AsIs: e.KnownNames/11 AsIs: )/14 } </16 Tile{ HalfReuse: & DoExtractLabels@3/10 AsIs: e.AST/2 AsIs: >/1 } >/17 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_open_call(vm, context[16]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A1]);
  refalrts::reinit_close_bracket(context[9]);
  refalrts::reinit_name(context[10], functions[efunc_gen_DoExtractLabels_Z3]);
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[15], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[10], context[1] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[9], context[14] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[15] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UpdateDriveInfo("UpdateDriveInfo", COOKIE1_, COOKIE2_, func_UpdateDriveInfo);


static refalrts::FnResult func_ExtractLabels(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & ExtractLabels/4 s.Label/5 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.AST as range 2
  //DEBUG: s.Label: 5
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoExtractLabels@4/4 AsIs: s.Label/5 AsIs: e.AST/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_DoExtractLabels_Z4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractLabels("ExtractLabels", COOKIE1_, COOKIE2_, func_ExtractLabels);


static refalrts::FnResult func_DoExtractLabels(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & DoExtractLabels/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoExtractLabels/4 s.new1/5 (/8 e.new2/6 )/9 (/12 e.new3/10 )/13 e.new4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new2 as range 6
  // closed e.new3 as range 10
  // closed e.new4 as range 2
  do {
    // </0 & DoExtractLabels/4 s.Label/5 (/8 e.FoundLabels/14 )/9 (/12 e.Scanned/16 )/13 e.AST-B/20 (/26 s.Label/28 e.Name/24 )/27 e.AST-E/22 >/1
    context[14] = context[6];
    context[15] = context[7];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    // closed e.FoundLabels as range 14
    // closed e.Scanned as range 16
    context[20] = 0;
    context[21] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[22] = context[18];
      context[23] = context[19];
      context[24] = 0;
      context[25] = 0;
      context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
      if( ! context[26] )
        continue;
      refalrts::bracket_pointers(context[26], context[27]);
      if( ! refalrts::repeated_stvar_left( vm, context[28], context[5], context[24], context[25] ) )
        continue;
      // closed e.Name as range 24
      // closed e.AST-E as range 22
      //DEBUG: s.Label: 5
      //DEBUG: e.FoundLabels: 14
      //DEBUG: e.Scanned: 16
      //DEBUG: e.AST-B: 20
      //DEBUG: e.Name: 24
      //DEBUG: e.AST-E: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Label/28 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoExtractLabels/4 AsIs: s.Label/5 AsIs: (/8 AsIs: e.FoundLabels/14 HalfReuse: (/9 HalfReuse: s.Label28 /12 } Tile{ AsIs: e.Name/24 } Tile{ AsIs: )/13 } )/29 Tile{ AsIs: (/26 } Tile{ AsIs: e.Scanned/16 } Tile{ AsIs: e.AST-B/20 } Tile{ AsIs: )/27 AsIs: e.AST-E/22 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[29]);
      refalrts::reinit_open_bracket(context[9]);
      refalrts::reinit_svar( context[12], context[28] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[26], context[27] );
      refalrts::link_brackets( context[8], context[29] );
      refalrts::link_brackets( context[9], context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[27];
      res = refalrts::splice_evar( res, context[20], context[21] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_elem( res, context[29] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      refalrts::splice_to_freelist_open( vm, context[12], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[20], context[21], context[18], context[19] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoExtractLabels/4 s.Label/5 (/8 e.FoundLabels/6 )/9 (/12 e.Scanned/10 )/13 e.AST/2 >/1
  // closed e.FoundLabels as range 6
  // closed e.Scanned as range 10
  // closed e.AST as range 2
  //DEBUG: s.Label: 5
  //DEBUG: e.FoundLabels: 6
  //DEBUG: e.Scanned: 10
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoExtractLabels/4 s.Label/5 {REMOVED TILE} (/12 {REMOVED TILE} )/13 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/8 AsIs: e.FoundLabels/6 AsIs: )/9 } Tile{ AsIs: e.Scanned/10 } Tile{ AsIs: e.AST/2 } Tile{ ]] }
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoExtractLabels("DoExtractLabels", COOKIE1_, COOKIE2_, func_DoExtractLabels);


static refalrts::FnResult func_ExtractMetatableNames(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & ExtractMetatableNames/4 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST as range 2
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DoMapAccum@4/6 (/7 )/8 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.AST/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoMapAccum_Z4]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractMetatableNames("ExtractMetatableNames", COOKIE1_, COOKIE2_, func_ExtractMetatableNames);


static refalrts::FnResult func_SetNamesm_Reject(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 39 elems
  refalrts::Iter context[39];
  refalrts::zeros( context, 39 );
  // </0 & SetNames-Reject/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & SetNames-Reject/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  do {
    // </0 & SetNames-Reject/4 (/7 e.Minuent-B/17 (/25 s._M/27 e.Name/23 )/26 e.Minuent-E/19 )/8 (/11 e.Subtr-B/28 (/34 s.Label/38 e.Name/36 )/35 e.Subtr-E/30 )/12 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = 0;
    context[18] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[19] = context[13];
      context[20] = context[14];
      context[21] = context[15];
      context[22] = context[16];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[19], context[20] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      // closed e.Minuent-E as range 19
      if( ! refalrts::svar_left( context[27], context[23], context[24] ) )
        continue;
      // closed e.Name as range 23
      context[28] = 0;
      context[29] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[30] = context[21];
        context[31] = context[22];
        context[32] = 0;
        context[33] = 0;
        context[34] = refalrts::brackets_left( context[32], context[33], context[30], context[31] );
        if( ! context[34] )
          continue;
        refalrts::bracket_pointers(context[34], context[35]);
        if( ! refalrts::repeated_evar_right( vm, context[36], context[37], context[23], context[24], context[32], context[33] ) )
          continue;
        // closed e.Subtr-E as range 30
        if( ! refalrts::svar_left( context[38], context[32], context[33] ) )
          continue;
        if( ! refalrts::empty_seq( context[32], context[33] ) )
          continue;
        //DEBUG: e.Minuent-B: 17
        //DEBUG: e.Minuent-E: 19
        //DEBUG: s._M: 27
        //DEBUG: e.Name: 23
        //DEBUG: e.Subtr-B: 28
        //DEBUG: e.Subtr-E: 30
        //DEBUG: s.Label: 38

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/7 {REMOVED TILE} (/25 s._M/27 e.Name/23 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: e.Minuent-B/17 } Tile{ AsIs: </0 AsIs: & SetNames-Reject/4 } Tile{ HalfReuse: (/26 AsIs: e.Minuent-E/19 AsIs: )/8 AsIs: (/11 AsIs: e.Subtr-B/28 AsIs: (/34 AsIs: s.Label/38 AsIs: e.Name/36 AsIs: )/35 AsIs: e.Subtr-E/30 AsIs: )/12 AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[26]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[11], context[12] );
        refalrts::link_brackets( context[34], context[35] );
        refalrts::link_brackets( context[26], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[26];
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[17], context[18] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[28], context[29], context[21], context[22] ) );
    } while ( refalrts::open_evar_advance( context[17], context[18], context[13], context[14] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & SetNames-Reject/4 (/7 e.Minuent/5 )/8 (/11 e.Subtrahend/9 )/12 >/1
  // closed e.Minuent as range 5
  // closed e.Subtrahend as range 9
  //DEBUG: e.Minuent: 5
  //DEBUG: e.Subtrahend: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & SetNames-Reject/4 (/7 {REMOVED TILE} )/8 (/11 e.Subtrahend/9 )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Minuent/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_SetNamesm_Reject("SetNames-Reject", COOKIE1_, COOKIE2_, func_SetNamesm_Reject);


static refalrts::FnResult func_gen_ExtractBaseNames_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & ExtractBaseNames=1/4 e.BaseOptNames/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.BaseOptNames as range 2
  //DEBUG: e.BaseOptNames: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Unique/4 AsIs: e.BaseOptNames/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Unique]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractBaseNames_A1("ExtractBaseNames=1", COOKIE1_, COOKIE2_, func_gen_ExtractBaseNames_A1);


static refalrts::FnResult func_ExtractBaseNames(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & ExtractBaseNames/4 e.OptNames/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.OptNames as range 2
  //DEBUG: e.OptNames: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & ExtractBaseNames=1/6 Tile{ AsIs: </0 Reuse: & Map@2/4 AsIs: e.OptNames/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_ExtractBaseNames_A1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z2]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractBaseNames("ExtractBaseNames", COOKIE1_, COOKIE2_, func_ExtractBaseNames);


static refalrts::FnResult func_gen_ExtractExtractableFunctions_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & ExtractExtractableFunctions=1/4 (/7 (/11 )/12 e.Extracted/5 )/8 e.AST$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Extracted as range 5
  // closed e.AST$a as range 2
  //DEBUG: e.Extracted: 5
  //DEBUG: e.AST$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ExtractExtractableFunctions=1/4 (/7 (/11 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/12 AsIs: e.Extracted/5 AsIs: )/8 } Tile{ AsIs: e.AST$a/2 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[12]);
  refalrts::link_brackets( context[12], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[12], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractExtractableFunctions_A1("ExtractExtractableFunctions=1", COOKIE1_, COOKIE2_, func_gen_ExtractExtractableFunctions_A1);


static refalrts::FnResult func_gen_ExtractExtractableFunctions_A1L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 41 elems
  refalrts::Iter context[41];
  refalrts::zeros( context, 41 );
  // </0 & ExtractExtractableFunctions=1\1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ExtractExtractableFunctions=1\1/4 (/7 (/11 e.new1/9 )/12 e.new2/5 )/8 t.new3/13 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 9
  // closed e.new2 as range 5
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ExtractExtractableFunctions=1\1/4 (/7 (/11 e.Names-B/27 (/33 s._/37 e.Name/35 )/34 e.Names-E/29 )/12 e.Extracted/17 )/8 (/13 # Function/21 s.ScopeClass/22 (/25 e.Name/23 )/26 e.Body/19 )/14 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[5];
    context[18] = context[6];
    context[19] = 0;
    context[20] = 0;
    if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
      continue;
    context[21] = refalrts::ident_left( identifiers[ident_Function], context[19], context[20] );
    if( ! context[21] )
      continue;
    // closed e.Extracted as range 17
    if( ! refalrts::svar_left( context[22], context[19], context[20] ) )
      continue;
    context[23] = 0;
    context[24] = 0;
    context[25] = refalrts::brackets_left( context[23], context[24], context[19], context[20] );
    if( ! context[25] )
      continue;
    refalrts::bracket_pointers(context[25], context[26]);
    // closed e.Name as range 23
    // closed e.Body as range 19
    context[27] = 0;
    context[28] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[29] = context[15];
      context[30] = context[16];
      context[31] = 0;
      context[32] = 0;
      context[33] = refalrts::brackets_left( context[31], context[32], context[29], context[30] );
      if( ! context[33] )
        continue;
      refalrts::bracket_pointers(context[33], context[34]);
      if( ! refalrts::repeated_evar_right( vm, context[35], context[36], context[23], context[24], context[31], context[32] ) )
        continue;
      // closed e.Names-E as range 29
      if( ! refalrts::svar_left( context[37], context[31], context[32] ) )
        continue;
      if( ! refalrts::empty_seq( context[31], context[32] ) )
        continue;
      //DEBUG: e.Extracted: 17
      //DEBUG: s.ScopeClass: 22
      //DEBUG: e.Name: 23
      //DEBUG: e.Body: 19
      //DEBUG: e.Names-B: 27
      //DEBUG: e.Names-E: 29
      //DEBUG: s._: 37

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s._/37 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/11 } Tile{ AsIs: e.Names-B/27 } Tile{ AsIs: e.Names-E/29 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Extracted/17 } Tile{ AsIs: (/33 } Tile{ HalfReuse: # Function/0 HalfReuse: s.ScopeClass22 /4 } (/38 Tile{ AsIs: e.Name/35 } Tile{ AsIs: )/34 } e.Body/19/39 Tile{ HalfReuse: )/1 } Tile{ AsIs: )/8 AsIs: (/13 AsIs: # Function/21 AsIs: s.ScopeClass/22 AsIs: (/25 AsIs: e.Name/23 AsIs: )/26 AsIs: e.Body/19 AsIs: )/14 } Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[38]);
      refalrts::copy_evar(vm, context[39], context[40], context[19], context[20]);
      refalrts::reinit_ident(context[0], identifiers[ident_Function]);
      refalrts::reinit_svar( context[4], context[22] );
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[13], context[14] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[33], context[1] );
      refalrts::link_brackets( context[38], context[34] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[8], context[14] );
      res = refalrts::splice_elem( res, context[1] );
      res = refalrts::splice_evar( res, context[39], context[40] );
      res = refalrts::splice_elem( res, context[34] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_elem( res, context[38] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[33] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[7], context[11] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[27], context[28], context[15], context[16] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ExtractExtractableFunctions=1\1/4 (/7 (/11 e.Names$a/9 )/12 e.Extracted/5 )/8 t.Other/13 >/1
  // closed e.Names$a as range 9
  // closed e.Extracted as range 5
  //DEBUG: t.Other: 13
  //DEBUG: e.Names$a: 9
  //DEBUG: e.Extracted: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ExtractExtractableFunctions=1\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/11 AsIs: e.Names$a/9 AsIs: )/12 AsIs: e.Extracted/5 AsIs: )/8 AsIs: t.Other/13 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[14] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractExtractableFunctions_A1L1("ExtractExtractableFunctions=1\\1", COOKIE1_, COOKIE2_, func_gen_ExtractExtractableFunctions_A1L1);


static refalrts::FnResult func_ExtractExtractableFunctions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & ExtractExtractableFunctions/4 (/7 e.Names/5 )/8 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Names as range 5
  // closed e.AST as range 2
  //DEBUG: e.Names: 5
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & ExtractExtractableFunctions=1/10 </11 Tile{ HalfReuse: & DoMapAccum@3/0 HalfReuse: (/4 AsIs: (/7 AsIs: e.Names/5 AsIs: )/8 } )/12 (/13 )/14 Tile{ AsIs: e.AST/2 } >/15 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_ExtractExtractableFunctions_A1]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z3]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[4], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[12], context[14] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractExtractableFunctions("ExtractExtractableFunctions", COOKIE1_, COOKIE2_, func_ExtractExtractableFunctions);


static refalrts::FnResult func_gen_ExtractFuncLengths_L1S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & ExtractFuncLengths\1$1=1/4 (/7 e.Lengths/5 )/8 (/11 e.Name/9 )/12 s.ScopeClass/13 s.SentencesCount/14 e.Sentences$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Lengths as range 5
  // closed e.Name as range 9
  if( ! refalrts::svar_left( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Sentences$a as range 2
  //DEBUG: e.Lengths: 5
  //DEBUG: e.Name: 9
  //DEBUG: s.ScopeClass: 13
  //DEBUG: s.SentencesCount: 14
  //DEBUG: e.Sentences$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.ScopeClass/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } (/15 Tile{ AsIs: e.Lengths/5 } (/16 e.Name/9/17 Tile{ AsIs: s.SentencesCount/14 } Tile{ HalfReuse: )/0 HalfReuse: )/4 AsIs: (/7 } # Function/19 Tile{ HalfReuse: s.ScopeClass13 /8 AsIs: (/11 AsIs: e.Name/9 AsIs: )/12 } # Sentences/20 Tile{ AsIs: e.Sentences$a/2 } Tile{ HalfReuse: )/1 ]] }
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::copy_evar(vm, context[17], context[18], context[9], context[10]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Function]);
  refalrts::alloc_ident(vm, context[20], identifiers[ident_Sentences]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::reinit_svar( context[8], context[13] );
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[7], context[1] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[15], context[4] );
  refalrts::link_brackets( context[16], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[8], context[12] );
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[15] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ExtractFuncLengths_L1S1A1("ExtractFuncLengths\\1$1=1", COOKIE1_, COOKIE2_, func_gen_ExtractFuncLengths_L1S1A1);


static refalrts::FnResult func_ExtractFuncLengths(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & ExtractFuncLengths/4 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST as range 2
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DoMapAccum@2/6 (/7 )/8 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.AST/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoMapAccum_Z2]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ExtractFuncLengths("ExtractFuncLengths", COOKIE1_, COOKIE2_, func_ExtractFuncLengths);


static refalrts::FnResult func_gen_MultiplyRemainderNames_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & MultiplyRemainderNames=1/4 (/7 e._/5 )/8 e.RemainderNames/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e._ as range 5
  // closed e.RemainderNames as range 2
  //DEBUG: e._: 5
  //DEBUG: e.RemainderNames: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & MultiplyRemainderNames=1/4 (/7 e._/5 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.RemainderNames/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MultiplyRemainderNames_A1("MultiplyRemainderNames=1", COOKIE1_, COOKIE2_, func_gen_MultiplyRemainderNames_A1);


static refalrts::FnResult func_gen_MultiplyRemainderNames_A1L1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & MultiplyRemainderNames=1\1=2/4 (/7 e.BaseName/5 )/8 s.Label/9 s.StartNum/10 e.Lengths-B/11 (/17 e.BaseName/19 s.SentencesCount/21 )/18 e.Lengths-E/13 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.BaseName as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[13] = context[2];
    context[14] = context[3];
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_left( context[15], context[16], context[13], context[14] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    if( ! refalrts::repeated_evar_left( vm, context[19], context[20], context[5], context[6], context[15], context[16] ) )
      continue;
    // closed e.Lengths-E as range 13
    if( ! refalrts::svar_left( context[21], context[15], context[16] ) )
      continue;
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    //DEBUG: e.BaseName: 5
    //DEBUG: s.Label: 9
    //DEBUG: s.StartNum: 10
    //DEBUG: e.Lengths-B: 11
    //DEBUG: e.Lengths-E: 13
    //DEBUG: s.SentencesCount: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} s.Label/9 s.StartNum/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/22 Tile{ AsIs: e.Lengths-B/11 } Tile{ AsIs: (/17 AsIs: e.BaseName/19 AsIs: s.SentencesCount/21 AsIs: )/18 AsIs: e.Lengths-E/13 HalfReuse: )/1 } Tile{ AsIs: </0 Reuse: & GenRemainderFuncNames/4 HalfReuse: s.Label9 /7 AsIs: e.BaseName/5 HalfReuse: s.StartNum10 /8 } s.SentencesCount/21/23 >/24 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::copy_stvar(vm, context[23], context[21]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::update_name(context[4], functions[efunc_GenRemainderFuncNames]);
    refalrts::reinit_svar( context[7], context[9] );
    refalrts::reinit_svar( context[8], context[10] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[22], context[1] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[0], context[8] );
    res = refalrts::splice_evar( res, context[17], context[1] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[22] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[11], context[12], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_gen_MultiplyRemainderNames_A1L1A2("MultiplyRemainderNames=1\\1=2", COOKIE1_, COOKIE2_, func_gen_MultiplyRemainderNames_A1L1A2);


static refalrts::FnResult func_MultiplyRemainderNames(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & MultiplyRemainderNames/4 (/7 e.Lengths/5 )/8 e.FuncNames/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Lengths as range 5
  // closed e.FuncNames as range 2
  //DEBUG: e.Lengths: 5
  //DEBUG: e.FuncNames: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & MultiplyRemainderNames=1/10 Tile{ AsIs: </0 Reuse: & DoMapAccum@1/4 AsIs: (/7 AsIs: e.Lengths/5 AsIs: )/8 } (/11 )/12 Tile{ AsIs: e.FuncNames/2 } >/13 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_MultiplyRemainderNames_A1]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MultiplyRemainderNames("MultiplyRemainderNames", COOKIE1_, COOKIE2_, func_MultiplyRemainderNames);


static refalrts::FnResult func_gen_FormatOptFunctions_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & FormatOptFunctions=1/4 (/7 e._/5 )/8 e.OptFunctions/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e._ as range 5
  // closed e.OptFunctions as range 2
  //DEBUG: e._: 5
  //DEBUG: e.OptFunctions: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & FormatOptFunctions=1/4 (/7 e._/5 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.OptFunctions/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_FormatOptFunctions_A1("FormatOptFunctions=1", COOKIE1_, COOKIE2_, func_gen_FormatOptFunctions_A1);


static refalrts::FnResult func_gen_FormatOptFunctions_A1L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & FormatOptFunctions=1\1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & FormatOptFunctions=1\1/4 (/7 e.new1/5 )/8 (/11 # Function/13 s.new2/14 (/17 e.new3/15 )/18 s.new4/19 e.new5/9 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = refalrts::ident_left( identifiers[ident_Function], context[9], context[10] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[14], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[9], context[10] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.new3 as range 15
  if( ! refalrts::svar_left( context[19], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 9
  do {
    // </0 & FormatOptFunctions=1\1/4 (/7 e.Names-B/26 (/32 # Metatable/34 e.Name/35 )/33 e.Names-E/28 )/8 (/11 # Function/13 s.ScopeClass/14 (/17 e.Name/22 )/18 # Metatable/19 e.Body/24 )/12 >/1
    context[20] = context[5];
    context[21] = context[6];
    context[22] = context[15];
    context[23] = context[16];
    context[24] = context[9];
    context[25] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_Metatable], context[19] ) )
      continue;
    // closed e.Name as range 22
    // closed e.Body as range 24
    context[26] = 0;
    context[27] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[28] = context[20];
      context[29] = context[21];
      context[30] = 0;
      context[31] = 0;
      context[32] = refalrts::brackets_left( context[30], context[31], context[28], context[29] );
      if( ! context[32] )
        continue;
      refalrts::bracket_pointers(context[32], context[33]);
      context[34] = refalrts::ident_left( identifiers[ident_Metatable], context[30], context[31] );
      if( ! context[34] )
        continue;
      if( ! refalrts::repeated_evar_left( vm, context[35], context[36], context[22], context[23], context[30], context[31] ) )
        continue;
      if( ! refalrts::empty_seq( context[30], context[31] ) )
        continue;
      // closed e.Names-E as range 28
      //DEBUG: s.ScopeClass: 14
      //DEBUG: e.Name: 22
      //DEBUG: e.Body: 24
      //DEBUG: e.Names-B: 26
      //DEBUG: e.Names-E: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & FormatOptFunctions=1\1/4 (/7 {REMOVED TILE} (/32 # Metatable/34 e.Name/35 )/33 {REMOVED TILE} {REMOVED TILE} s.ScopeClass/14 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Names-B/26 } Tile{ AsIs: e.Names-E/28 } Tile{ AsIs: )/8 AsIs: (/11 Reuse: # Metatable/13 } Tile{ AsIs: (/17 AsIs: e.Name/22 AsIs: )/18 AsIs: # Metatable/19 AsIs: e.Body/24 AsIs: )/12 } Tile{ ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::update_ident(context[13], identifiers[ident_Metatable]);
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[0], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[17], context[12] );
      res = refalrts::splice_evar( res, context[8], context[13] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[26], context[27], context[20], context[21] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & FormatOptFunctions=1\1/4 (/7 e.Names-B/20 (/26 s.Label/30 e.Name/28 )/27 e.Names-E/22 )/8 (/11 # Function/13 s.ScopeClass/14 (/17 e.Name/15 )/18 # Sentences/19 e.Sentences/9 )/12 >/1
  if( ! refalrts::ident_term( identifiers[ident_Sentences], context[19] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 15
  // closed e.Sentences as range 9
  context[20] = 0;
  context[21] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[22] = context[5];
    context[23] = context[6];
    context[24] = 0;
    context[25] = 0;
    context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
    if( ! context[26] )
      continue;
    refalrts::bracket_pointers(context[26], context[27]);
    if( ! refalrts::repeated_evar_right( vm, context[28], context[29], context[15], context[16], context[24], context[25] ) )
      continue;
    // closed e.Names-E as range 22
    if( ! refalrts::svar_left( context[30], context[24], context[25] ) )
      continue;
    if( ! refalrts::empty_seq( context[24], context[25] ) )
      continue;
    //DEBUG: s.ScopeClass: 14
    //DEBUG: e.Name: 15
    //DEBUG: e.Sentences: 9
    //DEBUG: e.Names-B: 20
    //DEBUG: e.Names-E: 22
    //DEBUG: s.Label: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & FormatOptFunctions=1\1/4 (/7 {REMOVED TILE} (/26 s.Label/30 e.Name/28 )/27 {REMOVED TILE} {REMOVED TILE} s.ScopeClass/14 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Names-B/20 } Tile{ AsIs: e.Names-E/22 } Tile{ AsIs: )/8 AsIs: (/11 HalfReuse: s.Label30 /13 } Tile{ AsIs: (/17 AsIs: e.Name/15 AsIs: )/18 AsIs: # Sentences/19 AsIs: e.Sentences/9 AsIs: )/12 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_svar( context[13], context[30] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[0], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[12] );
    res = refalrts::splice_evar( res, context[8], context[13] );
    res = refalrts::splice_evar( res, context[22], context[23] );
    res = refalrts::splice_evar( res, context[20], context[21] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[20], context[21], context[5], context[6] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_gen_FormatOptFunctions_A1L1("FormatOptFunctions=1\\1", COOKIE1_, COOKIE2_, func_gen_FormatOptFunctions_A1L1);


static refalrts::FnResult func_FormatOptFunctions(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & FormatOptFunctions/4 (/7 e.OptNames/5 )/8 e.Functions/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.OptNames as range 5
  // closed e.Functions as range 2
  //DEBUG: e.OptNames: 5
  //DEBUG: e.Functions: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & FormatOptFunctions=1/4 HalfReuse: </7 } & MapAccum@1/9 (/10 </11 & ExtractBaseNames=1/12 </13 & Map@2/14 Tile{ AsIs: e.OptNames/5 } >/15 >/16 Tile{ AsIs: )/8 AsIs: e.Functions/2 AsIs: >/1 } >/17 Tile{ ]] }
  refalrts::alloc_name(vm, context[9], functions[efunc_gen_MapAccum_Z1]);
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_ExtractBaseNames_A1]);
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_Map_Z2]);
  refalrts::alloc_close_call(vm, context[15]);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_gen_FormatOptFunctions_A1]);
  refalrts::reinit_open_call(context[7]);
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[10], context[8] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[15] );
  refalrts::push_stack( vm, context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[8], context[1] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_FormatOptFunctions("FormatOptFunctions", COOKIE1_, COOKIE2_, func_FormatOptFunctions);


static refalrts::FnResult func_HashSet(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & HashSet/4 e.Names/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Names as range 2
  //DEBUG: e.Names: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } 101/5 </6 & DoHashSet/7 Tile{ AsIs: </0 Reuse: & Map@5/4 AsIs: e.Names/2 AsIs: >/1 } >/8 Tile{ ]] }
  refalrts::alloc_number(vm, context[5], 101UL);
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_DoHashSet]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z5]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_HashSet("HashSet", COOKIE1_, COOKIE2_, func_HashSet);


static refalrts::FnResult func_BUCKETm_SIZE(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & BUCKET-SIZE/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & BUCKET-SIZE/4 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: 101/1 ]] }
  refalrts::reinit_number(context[1], 101UL);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_BUCKETm_SIZE("BUCKET-SIZE", COOKIE1_, COOKIE2_, func_BUCKETm_SIZE);


static refalrts::FnResult func_gen_DoHashSet_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & DoHashSet$1=1/4 e.Names$a/2 (/7 e.Bucket/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Names$a as range 2
  // closed e.Bucket as range 5
  //DEBUG: e.Names$a: 2
  //DEBUG: e.Bucket: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Bucket/5 AsIs: )/8 HalfReuse: </1 } Tile{ Reuse: & DoHashSet/4 } Tile{ AsIs: e.Names$a/2 } Tile{ HalfReuse: >/0 } Tile{ ]] }
  refalrts::reinit_open_call(context[1]);
  refalrts::update_name(context[4], functions[efunc_DoHashSet]);
  refalrts::reinit_close_call(context[0]);
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[0] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[4] );
  res = refalrts::splice_evar( res, context[7], context[1] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoHashSet_S1A1("DoHashSet$1=1", COOKIE1_, COOKIE2_, func_gen_DoHashSet_S1A1);


static refalrts::FnResult func_DoHashSet(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & DoHashSet/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & DoHashSet/4 (/9 s.Hash/11 e.Name/7 )/10 e.Names/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.Names as range 5
    if( ! refalrts::svar_left( context[11], context[7], context[8] ) )
      continue;
    // closed e.Name as range 7
    //DEBUG: e.Names: 5
    //DEBUG: s.Hash: 11
    //DEBUG: e.Name: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoHashSet$1=1/4 HalfReuse: </9 } & DoHashSet-DoFillBucket@1/12 (/13 Tile{ AsIs: e.Names/5 } )/14 Tile{ AsIs: s.Hash/11 AsIs: e.Name/7 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoHashSetm_DoFillBucket_Z1]);
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::update_name(context[4], functions[efunc_gen_DoHashSet_S1A1]);
    refalrts::reinit_open_call(context[9]);
    refalrts::reinit_close_call(context[10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[10] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoHashSet/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoHashSet/4 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoHashSet("DoHashSet", COOKIE1_, COOKIE2_, func_DoHashSet);


static refalrts::FnResult func_DoHashSetm_DoFillBucket(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & DoHashSet-DoFillBucket/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoHashSet-DoFillBucket/4 e.new1/2 (/7 s.new2/9 e.new3/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_right( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 2
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 5
  do {
    // </0 & DoHashSet-DoFillBucket/4 e.Names-OtherHash/14 (/20 s.Hash/22 e.Name/18 )/21 e.UnscannedNames/16 (/7 s.Hash/9 e.Bucket/12 )/8 >/1
    context[10] = context[2];
    context[11] = context[3];
    context[12] = context[5];
    context[13] = context[6];
    // closed e.Bucket as range 12
    context[14] = 0;
    context[15] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[16] = context[10];
      context[17] = context[11];
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[16], context[17] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      if( ! refalrts::repeated_stvar_left( vm, context[22], context[9], context[18], context[19] ) )
        continue;
      // closed e.Name as range 18
      // closed e.UnscannedNames as range 16
      //DEBUG: s.Hash: 9
      //DEBUG: e.Bucket: 12
      //DEBUG: e.Names-OtherHash: 14
      //DEBUG: e.Name: 18
      //DEBUG: e.UnscannedNames: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Hash/22 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Names-OtherHash/14 } Tile{ AsIs: </0 } Tile{ HalfReuse: & DoHashSet-DoFillBucket/21 AsIs: e.UnscannedNames/16 AsIs: (/7 AsIs: s.Hash/9 AsIs: e.Bucket/12 HalfReuse: (/8 } Tile{ AsIs: e.Name/18 } Tile{ HalfReuse: )/20 } Tile{ HalfReuse: )/4 } Tile{ AsIs: >/1 ]] }
      refalrts::reinit_name(context[21], functions[efunc_DoHashSetm_DoFillBucket]);
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[20]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[4] );
      refalrts::link_brackets( context[8], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[21], context[8] );
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[14], context[15], context[10], context[11] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoHashSet-DoFillBucket/4 e.Names-OtherHash/2 (/7 s.Hash/9 e.Bucket/5 )/8 >/1
  // closed e.Names-OtherHash as range 2
  // closed e.Bucket as range 5
  //DEBUG: s.Hash: 9
  //DEBUG: e.Names-OtherHash: 2
  //DEBUG: e.Bucket: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoHashSet-DoFillBucket/4 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Names-OtherHash/2 } Tile{ AsIs: (/7 AsIs: s.Hash/9 AsIs: e.Bucket/5 AsIs: )/8 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoHashSetm_DoFillBucket("DoHashSet-DoFillBucket", COOKIE1_, COOKIE2_, func_DoHashSetm_DoFillBucket);


static refalrts::FnResult func_HashSetm_AsChain(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & HashSet-AsChain/4 s.BucketSize/5 e.HashSet/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.HashSet as range 2
  //DEBUG: s.BucketSize: 5
  //DEBUG: e.HashSet: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.BucketSize/5 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@4/4 } Tile{ AsIs: e.HashSet/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_HashSetm_AsChain("HashSet-AsChain", COOKIE1_, COOKIE2_, func_HashSetm_AsChain);


static refalrts::FnResult func_OptTreem_Drive(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & OptTree-Drive/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & OptTree-Drive/4 (/7 s.new1/9 s.new2/10 )/8 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new3 as range 2
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & OptTree-Drive/4 (/7 # NoOpt/9 # NoOpt/10 )/8 e.AST/11 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[9] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[10] ) )
      continue;
    // closed e.AST as range 11
    //DEBUG: e.AST: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & OptTree-Drive/4 (/7 # NoOpt/9 # NoOpt/10 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.AST/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptTree-Drive/4 (/7 s.OptDrive/9 s.OptIntrinsic/10 )/8 e.AST-B/11 (/17 # DriveInfo/19 e.DriveInfo/15 )/18 e.AST-E/13 >/1
  context[11] = 0;
  context[12] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[13] = context[2];
    context[14] = context[3];
    context[15] = 0;
    context[16] = 0;
    context[17] = refalrts::brackets_left( context[15], context[16], context[13], context[14] );
    if( ! context[17] )
      continue;
    refalrts::bracket_pointers(context[17], context[18]);
    context[19] = refalrts::ident_left( identifiers[ident_DriveInfo], context[15], context[16] );
    if( ! context[19] )
      continue;
    // closed e.DriveInfo as range 15
    // closed e.AST-E as range 13
    //DEBUG: s.OptDrive: 9
    //DEBUG: s.OptIntrinsic: 10
    //DEBUG: e.AST-B: 11
    //DEBUG: e.DriveInfo: 15
    //DEBUG: e.AST-E: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} (/17 # DriveInfo/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick/4 AsIs: (/7 } Tile{ AsIs: e.DriveInfo/15 } Tile{ AsIs: )/18 } Tile{ AsIs: e.AST-B/11 } Tile{ AsIs: e.AST-E/13 } Tile{ AsIs: s.OptDrive/9 AsIs: s.OptIntrinsic/10 HalfReuse: >/8 } Tile{ ]] }
    refalrts::update_name(context[4], functions[efunc_DriveInlineOptimizerTick]);
    refalrts::reinit_close_call(context[8]);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[9], context[8] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[11], context[12], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_OptTreem_Drive("OptTree-Drive", 0U, 0U, func_OptTreem_Drive);


static refalrts::FnResult func_OptSwitch(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & OptSwitch/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & OptSwitch/4 s.new1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & OptSwitch/4 # OptDrive/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_OptDrive], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & OptSwitch/4 # OptDrive/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # Drive/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_Drive]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & OptSwitch/4 # OptInline/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_OptInline], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & OptSwitch/4 # OptInline/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # Inline/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_Inline]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & OptSwitch/4 # OptIntrinsic/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_OptIntrinsic], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & OptSwitch/4 # OptIntrinsic/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # Intrinsic/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_Intrinsic]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSwitch/4 # NoOpt/5 >/1
  if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & OptSwitch/4 # NoOpt/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # None/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_None]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_OptSwitch("OptSwitch", COOKIE1_, COOKIE2_, func_OptSwitch);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DriveInlineOptimizerTick=5/4 (/7 e.OptNames$a/5 )/8 (/11 e.OptInfo$a/9 )/12 (/15 e.NewFunctions$a/13 )/16 e.AST$c/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.OptNames$a as range 5
  // closed e.OptInfo$a as range 9
  // closed e.NewFunctions$a as range 13
  // closed e.AST$c as range 2
  //DEBUG: e.OptNames$a: 5
  //DEBUG: e.OptInfo$a: 9
  //DEBUG: e.NewFunctions$a: 13
  //DEBUG: e.AST$c: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/11 {REMOVED TILE} )/12 (/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # DriveInfo/4 AsIs: (/7 AsIs: e.OptNames$a/5 AsIs: )/8 } Tile{ AsIs: e.OptInfo$a/9 } Tile{ AsIs: )/16 } Tile{ AsIs: e.AST$c/2 } Tile{ AsIs: e.NewFunctions$a/13 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_DriveInfo]);
  refalrts::link_brackets( context[0], context[16] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[8], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A5("DriveInlineOptimizerTick=5", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A5);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A5L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & DriveInlineOptimizerTick=5\1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DriveInlineOptimizerTick=5\1/4 (/7 e.new1/5 )/8 t.new2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & DriveInlineOptimizerTick=5\1/4 (/7 e.new7/11 )/8 (/9 s.new3/15 s.new4/16 t.new5/17 e.new6/13 )/10 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
      continue;
    // closed e.new7 as range 11
    if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
      continue;
    if( ! refalrts::svar_left( context[16], context[13], context[14] ) )
      continue;
    context[18] = refalrts::tvar_left( context[17], context[13], context[14] );
    if( ! context[18] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DriveInlineOptimizerTick=5\1/4 (/7 e.News-B/25 (/31 # Function/33 s.ScopeClass/34 (/37 e.Name/39 )/38 e._/29 )/32 e.News-E/27 )/8 (/9 # Function/15 s.ScopeClass/16 (/17 e.Name/23 )/18 e.Body/21 )/10 >/1
      context[19] = context[11];
      context[20] = context[12];
      context[21] = context[13];
      context[22] = context[14];
      context[23] = 0;
      context[24] = 0;
      if( ! refalrts::brackets_term( context[23], context[24], context[17] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_Function], context[15] ) )
        continue;
      // closed e.Name as range 23
      // closed e.Body as range 21
      context[25] = 0;
      context[26] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[27] = context[19];
        context[28] = context[20];
        context[29] = 0;
        context[30] = 0;
        context[31] = refalrts::brackets_left( context[29], context[30], context[27], context[28] );
        if( ! context[31] )
          continue;
        refalrts::bracket_pointers(context[31], context[32]);
        context[33] = refalrts::ident_left( identifiers[ident_Function], context[29], context[30] );
        if( ! context[33] )
          continue;
        if( ! refalrts::repeated_stvar_left( vm, context[34], context[16], context[29], context[30] ) )
          continue;
        context[35] = 0;
        context[36] = 0;
        context[37] = refalrts::brackets_left( context[35], context[36], context[29], context[30] );
        if( ! context[37] )
          continue;
        refalrts::bracket_pointers(context[37], context[38]);
        if( ! refalrts::repeated_evar_left( vm, context[39], context[40], context[23], context[24], context[35], context[36] ) )
          continue;
        if( ! refalrts::empty_seq( context[35], context[36] ) )
          continue;
        // closed e._ as range 29
        // closed e.News-E as range 27
        //DEBUG: s.ScopeClass: 16
        //DEBUG: e.Name: 23
        //DEBUG: e.Body: 21
        //DEBUG: e.News-B: 25
        //DEBUG: e._: 29
        //DEBUG: e.News-E: 27

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} & DriveInlineOptimizerTick=5\1/4 (/7 {REMOVED TILE} (/31 # Function/33 s.ScopeClass/34 (/37 e.Name/39 )/38 e._/29 )/32 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.News-B/25 } Tile{ AsIs: e.News-E/27 } Tile{ AsIs: )/8 AsIs: (/9 AsIs: # Function/15 AsIs: s.ScopeClass/16 AsIs: (/17 AsIs: e.Name/23 AsIs: )/18 AsIs: e.Body/21 AsIs: )/10 } Tile{ ]] }
        refalrts::reinit_open_bracket(context[0]);
        refalrts::link_brackets( context[9], context[10] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[0], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[10] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        refalrts::splice_to_freelist_open( vm, context[0], res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[25], context[26], context[19], context[20] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DriveInlineOptimizerTick=5\1/4 (/7 e.News-B/27 (/33 # Function/35 s.ScopeClass/36 (/39 e.Name/41 )/40 e._/31 )/34 e.News-E/29 )/8 (/9 # ColdFunction/15 s.ColdBy/16 s.ScopeClass/17 (/25 e.Name/23 )/26 e.Body/21 )/10 >/1
    context[19] = context[11];
    context[20] = context[12];
    context[21] = context[13];
    context[22] = context[14];
    if( ! refalrts::svar_term( context[17], context[17] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_ColdFunction], context[15] ) )
      continue;
    context[23] = 0;
    context[24] = 0;
    context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
    if( ! context[25] )
      continue;
    refalrts::bracket_pointers(context[25], context[26]);
    // closed e.Name as range 23
    // closed e.Body as range 21
    context[27] = 0;
    context[28] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[29] = context[19];
      context[30] = context[20];
      context[31] = 0;
      context[32] = 0;
      context[33] = refalrts::brackets_left( context[31], context[32], context[29], context[30] );
      if( ! context[33] )
        continue;
      refalrts::bracket_pointers(context[33], context[34]);
      context[35] = refalrts::ident_left( identifiers[ident_Function], context[31], context[32] );
      if( ! context[35] )
        continue;
      if( ! refalrts::repeated_stvar_left( vm, context[36], context[17], context[31], context[32] ) )
        continue;
      context[37] = 0;
      context[38] = 0;
      context[39] = refalrts::brackets_left( context[37], context[38], context[31], context[32] );
      if( ! context[39] )
        continue;
      refalrts::bracket_pointers(context[39], context[40]);
      if( ! refalrts::repeated_evar_left( vm, context[41], context[42], context[23], context[24], context[37], context[38] ) )
        continue;
      if( ! refalrts::empty_seq( context[37], context[38] ) )
        continue;
      // closed e._ as range 31
      // closed e.News-E as range 29
      //DEBUG: s.ScopeClass: 17
      //DEBUG: s.ColdBy: 16
      //DEBUG: e.Name: 23
      //DEBUG: e.Body: 21
      //DEBUG: e.News-B: 27
      //DEBUG: e._: 31
      //DEBUG: e.News-E: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} & DriveInlineOptimizerTick=5\1/4 (/7 {REMOVED TILE} (/33 # Function/35 s.ScopeClass/36 (/39 e.Name/41 )/40 e._/31 )/34 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.News-B/27 } Tile{ AsIs: e.News-E/29 } Tile{ AsIs: )/8 AsIs: (/9 AsIs: # ColdFunction/15 AsIs: s.ColdBy/16 AsIs: s.ScopeClass/17 AsIs: (/25 AsIs: e.Name/23 AsIs: )/26 AsIs: e.Body/21 AsIs: )/10 } Tile{ ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[0], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[8], context[10] );
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::splice_to_freelist_open( vm, context[0], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[27], context[28], context[19], context[20] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=5\1/4 (/7 e.NewFunctions$a/5 )/8 t.Other/9 >/1
  // closed e.NewFunctions$a as range 5
  //DEBUG: t.Other: 9
  //DEBUG: e.NewFunctions$a: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DriveInlineOptimizerTick=5\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.NewFunctions$a/5 AsIs: )/8 AsIs: t.Other/9 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A5L1("DriveInlineOptimizerTick=5\\1", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A5L1);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DriveInlineOptimizerTick=4/4 (/7 e.OptNames$a/5 )/8 (/11 e.OptInfo$a/9 )/12 (/15 e.NewFunctions/13 )/16 e.AST$b/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.OptNames$a as range 5
  // closed e.OptInfo$a as range 9
  // closed e.NewFunctions as range 13
  // closed e.AST$b as range 2
  //DEBUG: e.OptNames$a: 5
  //DEBUG: e.OptInfo$a: 9
  //DEBUG: e.NewFunctions: 13
  //DEBUG: e.AST$b: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=5/4 AsIs: (/7 AsIs: e.OptNames$a/5 AsIs: )/8 AsIs: (/11 AsIs: e.OptInfo$a/9 AsIs: )/12 HalfReuse: </15 } & DoMapAccum@5/17 (/18 Tile{ AsIs: e.NewFunctions/13 } )/19 (/20 Tile{ AsIs: )/16 AsIs: e.AST$b/2 AsIs: >/1 } >/21 Tile{ ]] }
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_DoMapAccum_Z5]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A5]);
  refalrts::reinit_open_call(context[15]);
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[20], context[16] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[16], context[1] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A4("DriveInlineOptimizerTick=4", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A4);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A4L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & DriveInlineOptimizerTick=4\1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DriveInlineOptimizerTick=4\1/4 (/7 e.new1/5 )/8 t.new2/9 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & DriveInlineOptimizerTick=4\1/4 (/7 e.new6/11 )/8 (/9 # NewFunction/15 s.new3/16 (/19 e.new4/17 )/20 e.new5/13 )/10 >/1
    context[11] = context[5];
    context[12] = context[6];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[9] ) )
      continue;
    context[15] = refalrts::ident_left( identifiers[ident_NewFunction], context[13], context[14] );
    if( ! context[15] )
      continue;
    // closed e.new6 as range 11
    if( ! refalrts::svar_left( context[16], context[13], context[14] ) )
      continue;
    context[17] = 0;
    context[18] = 0;
    context[19] = refalrts::brackets_left( context[17], context[18], context[13], context[14] );
    if( ! context[19] )
      continue;
    refalrts::bracket_pointers(context[19], context[20]);
    // closed e.new4 as range 17
    // closed e.new5 as range 13
    do {
      // </0 & DriveInlineOptimizerTick=4\1/4 (/7 e.News-B/27 (/33 # Function/35 s.ScopeClass/36 (/39 e.Name/41 )/40 e.Body/31 )/34 e.News-E/29 )/8 (/9 # NewFunction/15 s.ScopeClass/16 (/19 e.Name/23 )/20 e._/25 )/10 >/1
      context[21] = context[11];
      context[22] = context[12];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[13];
      context[26] = context[14];
      // closed e.Name as range 23
      // closed e._ as range 25
      context[27] = 0;
      context[28] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[29] = context[21];
        context[30] = context[22];
        context[31] = 0;
        context[32] = 0;
        context[33] = refalrts::brackets_left( context[31], context[32], context[29], context[30] );
        if( ! context[33] )
          continue;
        refalrts::bracket_pointers(context[33], context[34]);
        context[35] = refalrts::ident_left( identifiers[ident_Function], context[31], context[32] );
        if( ! context[35] )
          continue;
        if( ! refalrts::repeated_stvar_left( vm, context[36], context[16], context[31], context[32] ) )
          continue;
        context[37] = 0;
        context[38] = 0;
        context[39] = refalrts::brackets_left( context[37], context[38], context[31], context[32] );
        if( ! context[39] )
          continue;
        refalrts::bracket_pointers(context[39], context[40]);
        if( ! refalrts::repeated_evar_left( vm, context[41], context[42], context[23], context[24], context[37], context[38] ) )
          continue;
        if( ! refalrts::empty_seq( context[37], context[38] ) )
          continue;
        // closed e.Body as range 31
        // closed e.News-E as range 29
        //DEBUG: s.ScopeClass: 16
        //DEBUG: e.Name: 23
        //DEBUG: e._: 25
        //DEBUG: e.News-B: 27
        //DEBUG: e.Body: 31
        //DEBUG: e.News-E: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & DriveInlineOptimizerTick=4\1/4 {REMOVED TILE} (/9 # NewFunction/15 s.ScopeClass/16 (/19 e.Name/23 )/20 e._/25 )/10 >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.News-B/27 AsIs: (/33 AsIs: # Function/35 AsIs: s.ScopeClass/36 AsIs: (/39 AsIs: e.Name/41 AsIs: )/40 AsIs: e.Body/31 AsIs: )/34 AsIs: e.News-E/29 AsIs: )/8 } Tile{ ]] }
        refalrts::link_brackets( context[7], context[8] );
        refalrts::link_brackets( context[33], context[34] );
        refalrts::link_brackets( context[39], context[40] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[7], context[8] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[27], context[28], context[21], context[22] ) );
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DriveInlineOptimizerTick=4\1/4 (/7 e.NewFunctions/21 )/8 (/9 # NewFunction/15 s.ScopeClass/16 (/19 e.Name/23 )/20 e.Body/25 )/10 >/1
    context[21] = context[11];
    context[22] = context[12];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[13];
    context[26] = context[14];
    // closed e.NewFunctions as range 21
    // closed e.Name as range 23
    // closed e.Body as range 25
    //DEBUG: s.ScopeClass: 16
    //DEBUG: e.NewFunctions: 21
    //DEBUG: e.Name: 23
    //DEBUG: e.Body: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & DriveInlineOptimizerTick=4\1/4 (/7 {REMOVED TILE} )/8 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.NewFunctions/21 } Tile{ AsIs: (/9 Reuse: # Function/15 AsIs: s.ScopeClass/16 AsIs: (/19 AsIs: e.Name/23 AsIs: )/20 AsIs: e.Body/25 AsIs: )/10 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::update_ident(context[15], identifiers[ident_Function]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_evar( res, context[21], context[22] );
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=4\1/4 (/7 e.NewFunctions/5 )/8 t.Other/9 >/1
  // closed e.NewFunctions as range 5
  //DEBUG: t.Other: 9
  //DEBUG: e.NewFunctions: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DriveInlineOptimizerTick=4\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.NewFunctions/5 AsIs: )/8 AsIs: t.Other/9 } Tile{ ]] }
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[10] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A4L1("DriveInlineOptimizerTick=4\\1", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A4L1);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DriveInlineOptimizerTick=3/4 (/7 (/11 e.OptNames$a/9 )/12 t.Metatables/13 e.OptInfo$a/5 )/8 e.AST$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.OptNames$a as range 9
  // closed e.AST$a as range 2
  context[14] = refalrts::tvar_left( context[13], context[5], context[6] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.OptInfo$a as range 5
  //DEBUG: e.OptNames$a: 9
  //DEBUG: e.AST$a: 2
  //DEBUG: t.Metatables: 13
  //DEBUG: e.OptInfo$a: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Metatables/13 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DriveInlineOptimizerTick=4/7 AsIs: (/11 AsIs: e.OptNames$a/9 AsIs: )/12 } (/15 Tile{ AsIs: e.OptInfo$a/5 } )/16 Tile{ AsIs: </0 } & DoMapAccum@6/17 (/18 )/19 (/20 Tile{ AsIs: )/8 AsIs: e.AST$a/2 AsIs: >/1 } >/21 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_DoMapAccum_Z6]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::alloc_close_call(vm, context[21]);
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_gen_DriveInlineOptimizerTick_A4]);
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[4] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[20], context[8] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[8], context[1] );
  res = refalrts::splice_evar( res, context[17], context[20] );
  res = refalrts::splice_elem( res, context[0] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[4], context[12] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A3("DriveInlineOptimizerTick=3", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A3);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & DriveInlineOptimizerTick=2/4 t.Mode/5 (/9 e.AST/7 )/10 t.OptInfo/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.AST as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Mode: 5
  //DEBUG: e.AST: 7
  //DEBUG: t.OptInfo: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 } </13 & DoMapAccum@7/14 Tile{ AsIs: t.Mode/5 } Tile{ AsIs: t.OptInfo/11 } (/15 Tile{ HalfReuse: )/9 AsIs: e.AST/7 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_Z7]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
  refalrts::reinit_close_bracket(context[9]);
  refalrts::reinit_close_call(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[15], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2("DriveInlineOptimizerTick=2", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & DriveInlineOptimizerTick=1/4 (/7 e.AST/5 )/8 (/11 e.OptNames/9 )/12 (/15 e.OptInfo/13 )/16 t.Mode/17 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.AST as range 5
  // closed e.OptNames as range 9
  // closed e.OptInfo as range 13
  context[18] = refalrts::tvar_left( context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.AST: 5
  //DEBUG: e.OptNames: 9
  //DEBUG: e.OptInfo: 13
  //DEBUG: t.Mode: 17

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=2/4 } Tile{ AsIs: t.Mode/17 } Tile{ AsIs: (/7 AsIs: e.AST/5 AsIs: )/8 AsIs: (/11 } (/19 Tile{ AsIs: e.OptNames/9 } )/20 </21 & DoMapAccum@8/22 (/23 # Metatables/24 Tile{ AsIs: )/12 AsIs: (/15 } Tile{ AsIs: )/16 } Tile{ AsIs: e.OptInfo/13 } >/25 )/26 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_close_bracket(vm, context[20]);
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_gen_DoMapAccum_Z8]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_ident(vm, context[24], identifiers[ident_Metatables]);
  refalrts::alloc_close_call(vm, context[25]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[26] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[23], context[12] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_elem( res, context[16] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  res = refalrts::splice_evar( res, context[20], context[24] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[7], context[11] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A1("DriveInlineOptimizerTick=1", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A1);


static refalrts::FnResult func_DriveInlineOptimizerTick(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & DriveInlineOptimizerTick/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.new1/9 )/12 e.new2/5 )/8 e.new3/2 s.new4/14 s.new5/13 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 9
  // closed e.new2 as range 5
  if( ! refalrts::svar_right( context[13], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_right( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.new9/15 )/12 e.new8/17 )/8 e.new7/19 # OptDrive/14 s.new6/13 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_OptDrive], context[14] ) )
      continue;
    // closed e.new9 as range 15
    // closed e.new8 as range 17
    // closed e.new7 as range 19
    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/21 )/12 e.OptInfo/23 )/8 e.AST/25 # OptDrive/14 # OptDrive/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_OptDrive], context[13] ) )
        continue;
      // closed e.OptNames as range 21
      // closed e.OptInfo as range 23
      // closed e.AST as range 25
      //DEBUG: e.OptNames: 21
      //DEBUG: e.OptInfo: 23
      //DEBUG: e.AST: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@1/27 (/28 Tile{ AsIs: e.AST/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z1]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/21 )/12 e.OptInfo/23 )/8 e.AST/25 # OptDrive/14 # OptInline/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_OptInline], context[13] ) )
        continue;
      // closed e.OptNames as range 21
      // closed e.OptInfo as range 23
      // closed e.AST as range 25
      //DEBUG: e.OptNames: 21
      //DEBUG: e.OptInfo: 23
      //DEBUG: e.AST: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@2/27 (/28 Tile{ AsIs: e.AST/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z2]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/21 )/12 e.OptInfo/23 )/8 e.AST/25 # OptDrive/14 # OptIntrinsic/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_OptIntrinsic], context[13] ) )
        continue;
      // closed e.OptNames as range 21
      // closed e.OptInfo as range 23
      // closed e.AST as range 25
      //DEBUG: e.OptNames: 21
      //DEBUG: e.OptInfo: 23
      //DEBUG: e.AST: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@3/27 (/28 Tile{ AsIs: e.AST/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z3]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/21 )/12 e.OptInfo/23 )/8 e.AST/25 # OptDrive/14 # NoOpt/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[13] ) )
        continue;
      // closed e.OptNames as range 21
      // closed e.OptInfo as range 23
      // closed e.AST as range 25
      //DEBUG: e.OptNames: 21
      //DEBUG: e.OptInfo: 23
      //DEBUG: e.AST: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@4/27 (/28 Tile{ AsIs: e.AST/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z4]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/21 )/12 e.OptInfo/23 )/8 e.AST/25 # OptDrive/14 s.OptIntrinsic/13 >/1
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    // closed e.OptNames as range 21
    // closed e.OptInfo as range 23
    // closed e.AST as range 25
    //DEBUG: s.OptIntrinsic: 13
    //DEBUG: e.OptNames: 21
    //DEBUG: e.OptInfo: 23
    //DEBUG: e.AST: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=1/4 AsIs: (/7 } Tile{ AsIs: e.AST/25 } Tile{ AsIs: )/8 } Tile{ AsIs: (/11 AsIs: e.OptNames/21 AsIs: )/12 } (/27 Tile{ AsIs: e.OptInfo/23 } )/28 (/29 # Drive/30 </31 Tile{ HalfReuse: & OptSwitch*4/14 AsIs: s.OptIntrinsic/13 AsIs: >/1 } )/32 >/33 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::alloc_close_bracket(vm, context[28]);
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_ident(vm, context[30], identifiers[ident_Drive]);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A1]);
    refalrts::reinit_name(context[14], functions[efunc_gen_OptSwitch_D4]);
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[29], context[32] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[14], context[1] );
    res = refalrts::splice_evar( res, context[28], context[31] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.new9/15 )/12 e.new8/17 )/8 e.new7/19 # OptInline/14 s.new6/13 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_OptInline], context[14] ) )
      continue;
    // closed e.new9 as range 15
    // closed e.new8 as range 17
    // closed e.new7 as range 19
    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/21 )/12 e.OptInfo/23 )/8 e.AST/25 # OptInline/14 # OptDrive/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_OptDrive], context[13] ) )
        continue;
      // closed e.OptNames as range 21
      // closed e.OptInfo as range 23
      // closed e.AST as range 25
      //DEBUG: e.OptNames: 21
      //DEBUG: e.OptInfo: 23
      //DEBUG: e.AST: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@5/27 (/28 Tile{ AsIs: e.AST/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z5]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/21 )/12 e.OptInfo/23 )/8 e.AST/25 # OptInline/14 # OptInline/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_OptInline], context[13] ) )
        continue;
      // closed e.OptNames as range 21
      // closed e.OptInfo as range 23
      // closed e.AST as range 25
      //DEBUG: e.OptNames: 21
      //DEBUG: e.OptInfo: 23
      //DEBUG: e.AST: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@6/27 (/28 Tile{ AsIs: e.AST/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z6]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/21 )/12 e.OptInfo/23 )/8 e.AST/25 # OptInline/14 # OptIntrinsic/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_OptIntrinsic], context[13] ) )
        continue;
      // closed e.OptNames as range 21
      // closed e.OptInfo as range 23
      // closed e.AST as range 25
      //DEBUG: e.OptNames: 21
      //DEBUG: e.OptInfo: 23
      //DEBUG: e.AST: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@7/27 (/28 Tile{ AsIs: e.AST/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z7]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/21 )/12 e.OptInfo/23 )/8 e.AST/25 # OptInline/14 # NoOpt/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[13] ) )
        continue;
      // closed e.OptNames as range 21
      // closed e.OptInfo as range 23
      // closed e.AST as range 25
      //DEBUG: e.OptNames: 21
      //DEBUG: e.OptInfo: 23
      //DEBUG: e.AST: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@8/27 (/28 Tile{ AsIs: e.AST/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z8]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/21 )/12 e.OptInfo/23 )/8 e.AST/25 # OptInline/14 s.OptIntrinsic/13 >/1
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    // closed e.OptNames as range 21
    // closed e.OptInfo as range 23
    // closed e.AST as range 25
    //DEBUG: s.OptIntrinsic: 13
    //DEBUG: e.OptNames: 21
    //DEBUG: e.OptInfo: 23
    //DEBUG: e.AST: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=1/4 AsIs: (/7 } Tile{ AsIs: e.AST/25 } Tile{ AsIs: )/8 } Tile{ AsIs: (/11 AsIs: e.OptNames/21 AsIs: )/12 } (/27 Tile{ AsIs: e.OptInfo/23 } )/28 (/29 # Inline/30 </31 Tile{ HalfReuse: & OptSwitch*4/14 AsIs: s.OptIntrinsic/13 AsIs: >/1 } )/32 >/33 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::alloc_close_bracket(vm, context[28]);
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_ident(vm, context[30], identifiers[ident_Inline]);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A1]);
    refalrts::reinit_name(context[14], functions[efunc_gen_OptSwitch_D4]);
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[29], context[32] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[14], context[1] );
    res = refalrts::splice_evar( res, context[28], context[31] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.new9/15 )/12 e.new8/17 )/8 e.new7/19 # OptIntrinsic/14 s.new6/13 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_OptIntrinsic], context[14] ) )
      continue;
    // closed e.new9 as range 15
    // closed e.new8 as range 17
    // closed e.new7 as range 19
    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/21 )/12 e.OptInfo/23 )/8 e.AST/25 # OptIntrinsic/14 # OptDrive/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_OptDrive], context[13] ) )
        continue;
      // closed e.OptNames as range 21
      // closed e.OptInfo as range 23
      // closed e.AST as range 25
      //DEBUG: e.OptNames: 21
      //DEBUG: e.OptInfo: 23
      //DEBUG: e.AST: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@9/27 (/28 Tile{ AsIs: e.AST/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z9]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/21 )/12 e.OptInfo/23 )/8 e.AST/25 # OptIntrinsic/14 # OptInline/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_OptInline], context[13] ) )
        continue;
      // closed e.OptNames as range 21
      // closed e.OptInfo as range 23
      // closed e.AST as range 25
      //DEBUG: e.OptNames: 21
      //DEBUG: e.OptInfo: 23
      //DEBUG: e.AST: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@10/27 (/28 Tile{ AsIs: e.AST/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z10]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/21 )/12 e.OptInfo/23 )/8 e.AST/25 # OptIntrinsic/14 # OptIntrinsic/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_OptIntrinsic], context[13] ) )
        continue;
      // closed e.OptNames as range 21
      // closed e.OptInfo as range 23
      // closed e.AST as range 25
      //DEBUG: e.OptNames: 21
      //DEBUG: e.OptInfo: 23
      //DEBUG: e.AST: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@11/27 (/28 Tile{ AsIs: e.AST/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z11]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/21 )/12 e.OptInfo/23 )/8 e.AST/25 # OptIntrinsic/14 # NoOpt/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[13] ) )
        continue;
      // closed e.OptNames as range 21
      // closed e.OptInfo as range 23
      // closed e.AST as range 25
      //DEBUG: e.OptNames: 21
      //DEBUG: e.OptInfo: 23
      //DEBUG: e.AST: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@12/27 (/28 Tile{ AsIs: e.AST/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z12]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/21 )/12 e.OptInfo/23 )/8 e.AST/25 # OptIntrinsic/14 s.OptIntrinsic/13 >/1
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    // closed e.OptNames as range 21
    // closed e.OptInfo as range 23
    // closed e.AST as range 25
    //DEBUG: s.OptIntrinsic: 13
    //DEBUG: e.OptNames: 21
    //DEBUG: e.OptInfo: 23
    //DEBUG: e.AST: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=1/4 AsIs: (/7 } Tile{ AsIs: e.AST/25 } Tile{ AsIs: )/8 } Tile{ AsIs: (/11 AsIs: e.OptNames/21 AsIs: )/12 } (/27 Tile{ AsIs: e.OptInfo/23 } )/28 (/29 # Intrinsic/30 </31 Tile{ HalfReuse: & OptSwitch*4/14 AsIs: s.OptIntrinsic/13 AsIs: >/1 } )/32 >/33 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::alloc_close_bracket(vm, context[28]);
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_ident(vm, context[30], identifiers[ident_Intrinsic]);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A1]);
    refalrts::reinit_name(context[14], functions[efunc_gen_OptSwitch_D4]);
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[29], context[32] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[14], context[1] );
    res = refalrts::splice_evar( res, context[28], context[31] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.new9/15 )/12 e.new8/17 )/8 e.new7/19 # NoOpt/14 s.new6/13 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[14] ) )
      continue;
    // closed e.new9 as range 15
    // closed e.new8 as range 17
    // closed e.new7 as range 19
    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/21 )/12 e.OptInfo/23 )/8 e.AST/25 # NoOpt/14 # OptDrive/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_OptDrive], context[13] ) )
        continue;
      // closed e.OptNames as range 21
      // closed e.OptInfo as range 23
      // closed e.AST as range 25
      //DEBUG: e.OptNames: 21
      //DEBUG: e.OptInfo: 23
      //DEBUG: e.AST: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@13/27 (/28 Tile{ AsIs: e.AST/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z13]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/21 )/12 e.OptInfo/23 )/8 e.AST/25 # NoOpt/14 # OptInline/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_OptInline], context[13] ) )
        continue;
      // closed e.OptNames as range 21
      // closed e.OptInfo as range 23
      // closed e.AST as range 25
      //DEBUG: e.OptNames: 21
      //DEBUG: e.OptInfo: 23
      //DEBUG: e.AST: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@14/27 (/28 Tile{ AsIs: e.AST/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z14]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/21 )/12 e.OptInfo/23 )/8 e.AST/25 # NoOpt/14 # OptIntrinsic/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_OptIntrinsic], context[13] ) )
        continue;
      // closed e.OptNames as range 21
      // closed e.OptInfo as range 23
      // closed e.AST as range 25
      //DEBUG: e.OptNames: 21
      //DEBUG: e.OptInfo: 23
      //DEBUG: e.AST: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@15/27 (/28 Tile{ AsIs: e.AST/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z15]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/21 )/12 e.OptInfo/23 )/8 e.AST/25 # NoOpt/14 # NoOpt/13 >/1
      context[21] = context[15];
      context[22] = context[16];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = context[19];
      context[26] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[13] ) )
        continue;
      // closed e.OptNames as range 21
      // closed e.OptInfo as range 23
      // closed e.AST as range 25
      //DEBUG: e.OptNames: 21
      //DEBUG: e.OptInfo: 23
      //DEBUG: e.AST: 25

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } & DriveInlineOptimizerTick=2@16/27 (/28 Tile{ AsIs: e.AST/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: (/11 AsIs: e.OptNames/21 AsIs: )/12 } </29 & DoMapAccum@8/30 (/31 # Metatables/32 Tile{ AsIs: )/8 } (/33 )/34 Tile{ AsIs: e.OptInfo/23 } Tile{ HalfReuse: >/14 HalfReuse: )/13 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_DriveInlineOptimizerTick_A2Z16]);
      refalrts::alloc_open_bracket(vm, context[28]);
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_DoMapAccum_Z8]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_ident(vm, context[32], identifiers[ident_Metatables]);
      refalrts::alloc_open_bracket(vm, context[33]);
      refalrts::alloc_close_bracket(vm, context[34]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_close_call(context[14]);
      refalrts::reinit_close_bracket(context[13]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[13] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[33], context[34] );
      refalrts::link_brackets( context[31], context[8] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::link_brackets( context[28], context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[14];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_elem( res, context[8] );
      res = refalrts::splice_evar( res, context[29], context[32] );
      res = refalrts::splice_evar( res, context[4], context[12] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/21 )/12 e.OptInfo/23 )/8 e.AST/25 # NoOpt/14 s.OptIntrinsic/13 >/1
    context[21] = context[15];
    context[22] = context[16];
    context[23] = context[17];
    context[24] = context[18];
    context[25] = context[19];
    context[26] = context[20];
    // closed e.OptNames as range 21
    // closed e.OptInfo as range 23
    // closed e.AST as range 25
    //DEBUG: s.OptIntrinsic: 13
    //DEBUG: e.OptNames: 21
    //DEBUG: e.OptInfo: 23
    //DEBUG: e.AST: 25

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=1/4 AsIs: (/7 } Tile{ AsIs: e.AST/25 } Tile{ AsIs: )/8 } Tile{ AsIs: (/11 AsIs: e.OptNames/21 AsIs: )/12 } (/27 Tile{ AsIs: e.OptInfo/23 } )/28 (/29 # None/30 </31 Tile{ HalfReuse: & OptSwitch*4/14 AsIs: s.OptIntrinsic/13 AsIs: >/1 } )/32 >/33 Tile{ ]] }
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::alloc_close_bracket(vm, context[28]);
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_ident(vm, context[30], identifiers[ident_None]);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A1]);
    refalrts::reinit_name(context[14], functions[efunc_gen_OptSwitch_D4]);
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[29], context[32] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[14], context[1] );
    res = refalrts::splice_evar( res, context[28], context[31] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[27] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/15 )/12 e.OptInfo/17 )/8 e.AST/19 s.OptDrive/14 # OptDrive/13 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_OptDrive], context[13] ) )
      continue;
    // closed e.OptNames as range 15
    // closed e.OptInfo as range 17
    // closed e.AST as range 19
    //DEBUG: s.OptDrive: 14
    //DEBUG: e.OptNames: 15
    //DEBUG: e.OptInfo: 17
    //DEBUG: e.AST: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=1/4 AsIs: (/7 } Tile{ AsIs: e.AST/19 } Tile{ AsIs: )/8 } Tile{ AsIs: (/11 AsIs: e.OptNames/15 AsIs: )/12 } (/21 Tile{ AsIs: e.OptInfo/17 } )/22 (/23 </24 & OptSwitch*4/25 Tile{ AsIs: s.OptDrive/14 } >/26 # Drive/27 Tile{ HalfReuse: )/13 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_open_call(vm, context[24]);
    refalrts::alloc_name(vm, context[25], functions[efunc_gen_OptSwitch_D4]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::alloc_ident(vm, context[27], identifiers[ident_Drive]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A1]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[23], context[13] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[24] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[22], context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/15 )/12 e.OptInfo/17 )/8 e.AST/19 s.OptDrive/14 # OptInline/13 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_OptInline], context[13] ) )
      continue;
    // closed e.OptNames as range 15
    // closed e.OptInfo as range 17
    // closed e.AST as range 19
    //DEBUG: s.OptDrive: 14
    //DEBUG: e.OptNames: 15
    //DEBUG: e.OptInfo: 17
    //DEBUG: e.AST: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=1/4 AsIs: (/7 } Tile{ AsIs: e.AST/19 } Tile{ AsIs: )/8 } Tile{ AsIs: (/11 AsIs: e.OptNames/15 AsIs: )/12 } (/21 Tile{ AsIs: e.OptInfo/17 } )/22 (/23 </24 & OptSwitch*4/25 Tile{ AsIs: s.OptDrive/14 } >/26 # Inline/27 Tile{ HalfReuse: )/13 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_open_call(vm, context[24]);
    refalrts::alloc_name(vm, context[25], functions[efunc_gen_OptSwitch_D4]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::alloc_ident(vm, context[27], identifiers[ident_Inline]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A1]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[23], context[13] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[24] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[22], context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/15 )/12 e.OptInfo/17 )/8 e.AST/19 s.OptDrive/14 # OptIntrinsic/13 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_OptIntrinsic], context[13] ) )
      continue;
    // closed e.OptNames as range 15
    // closed e.OptInfo as range 17
    // closed e.AST as range 19
    //DEBUG: s.OptDrive: 14
    //DEBUG: e.OptNames: 15
    //DEBUG: e.OptInfo: 17
    //DEBUG: e.AST: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=1/4 AsIs: (/7 } Tile{ AsIs: e.AST/19 } Tile{ AsIs: )/8 } Tile{ AsIs: (/11 AsIs: e.OptNames/15 AsIs: )/12 } (/21 Tile{ AsIs: e.OptInfo/17 } )/22 (/23 </24 & OptSwitch*4/25 Tile{ AsIs: s.OptDrive/14 } >/26 # Intrinsic/27 Tile{ HalfReuse: )/13 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_open_call(vm, context[24]);
    refalrts::alloc_name(vm, context[25], functions[efunc_gen_OptSwitch_D4]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::alloc_ident(vm, context[27], identifiers[ident_Intrinsic]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A1]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[23], context[13] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[24] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[22], context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/15 )/12 e.OptInfo/17 )/8 e.AST/19 s.OptDrive/14 # NoOpt/13 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_NoOpt], context[13] ) )
      continue;
    // closed e.OptNames as range 15
    // closed e.OptInfo as range 17
    // closed e.AST as range 19
    //DEBUG: s.OptDrive: 14
    //DEBUG: e.OptNames: 15
    //DEBUG: e.OptInfo: 17
    //DEBUG: e.AST: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=1/4 AsIs: (/7 } Tile{ AsIs: e.AST/19 } Tile{ AsIs: )/8 } Tile{ AsIs: (/11 AsIs: e.OptNames/15 AsIs: )/12 } (/21 Tile{ AsIs: e.OptInfo/17 } )/22 (/23 </24 & OptSwitch*4/25 Tile{ AsIs: s.OptDrive/14 } >/26 # None/27 Tile{ HalfReuse: )/13 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_bracket(vm, context[23]);
    refalrts::alloc_open_call(vm, context[24]);
    refalrts::alloc_name(vm, context[25], functions[efunc_gen_OptSwitch_D4]);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::alloc_ident(vm, context[27], identifiers[ident_None]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A1]);
    refalrts::reinit_close_bracket(context[13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[23], context[13] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[24] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[13];
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[22], context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick/4 (/7 (/11 e.OptNames/9 )/12 e.OptInfo/5 )/8 e.AST/2 s.OptDrive/14 s.OptIntrinsic/13 >/1
  // closed e.OptNames as range 9
  // closed e.OptInfo as range 5
  // closed e.AST as range 2
  //DEBUG: s.OptDrive: 14
  //DEBUG: s.OptIntrinsic: 13
  //DEBUG: e.OptNames: 9
  //DEBUG: e.OptInfo: 5
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=1/4 AsIs: (/7 } Tile{ AsIs: e.AST/2 } Tile{ AsIs: )/8 } Tile{ AsIs: (/11 AsIs: e.OptNames/9 AsIs: )/12 } (/15 Tile{ AsIs: e.OptInfo/5 } )/16 (/17 </18 & OptSwitch*4/19 Tile{ AsIs: s.OptDrive/14 } >/20 </21 & OptSwitch*4/22 Tile{ AsIs: s.OptIntrinsic/13 AsIs: >/1 } )/23 >/24 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_open_call(vm, context[18]);
  refalrts::alloc_name(vm, context[19], functions[efunc_gen_OptSwitch_D4]);
  refalrts::alloc_close_call(vm, context[20]);
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_gen_OptSwitch_D4]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::alloc_close_call(vm, context[24]);
  refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A1]);
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[17], context[23] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[18] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[13], context[1] );
  res = refalrts::splice_evar( res, context[20], context[22] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[16], context[19] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DriveInlineOptimizerTick("DriveInlineOptimizerTick", COOKIE1_, COOKIE2_, func_DriveInlineOptimizerTick);


static refalrts::FnResult func_gen_IsLexpr_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & IsLexpr:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & IsLexpr:1/4 e.Res-B/7 # OpenE/11 e.Res-E/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = refalrts::ident_left( identifiers[ident_OpenE], context[9], context[10] );
      if( ! context[11] )
        continue;
      // closed e.Res-E as range 9
      //DEBUG: e.Res-B: 7
      //DEBUG: e.Res-E: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & IsLexpr:1/4 e.Res-B/7 # OpenE/11 e.Res-E/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
      refalrts::reinit_ident(context[1], identifiers[ident_False]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & IsLexpr:1/4 e.Res-B/7 (/13 s.Mode/15 e.Index/11 )/14 e.Res-M/16 (/22 s.Mode/24 e.Index/25 )/23 e.Res-E/18 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      if( ! refalrts::svar_left( context[15], context[11], context[12] ) )
        continue;
      // closed e.Index as range 11
      context[16] = 0;
      context[17] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[18] = context[9];
        context[19] = context[10];
        context[20] = 0;
        context[21] = 0;
        context[22] = refalrts::brackets_left( context[20], context[21], context[18], context[19] );
        if( ! context[22] )
          continue;
        refalrts::bracket_pointers(context[22], context[23]);
        if( ! refalrts::repeated_stvar_left( vm, context[24], context[15], context[20], context[21] ) )
          continue;
        if( ! refalrts::repeated_evar_left( vm, context[25], context[26], context[11], context[12], context[20], context[21] ) )
          continue;
        if( ! refalrts::empty_seq( context[20], context[21] ) )
          continue;
        // closed e.Res-E as range 18
        //DEBUG: e.Res-B: 7
        //DEBUG: s.Mode: 15
        //DEBUG: e.Index: 11
        //DEBUG: e.Res-M: 16
        //DEBUG: e.Res-E: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & IsLexpr:1/4 e.Res-B/7 (/13 s.Mode/15 e.Index/11 )/14 e.Res-M/16 (/22 s.Mode/24 e.Index/25 )/23 e.Res-E/18 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # False/1 ]] }
        refalrts::reinit_ident(context[1], identifiers[ident_False]);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[16], context[17], context[9], context[10] ) );
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IsLexpr:1/4 e.Other/2 >/1
  // closed e.Other as range 2
  //DEBUG: e.Other: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & IsLexpr:1/4 e.Other/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # True/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_True]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_IsLexpr_B1("IsLexpr:1", COOKIE1_, COOKIE2_, func_gen_IsLexpr_B1);


static refalrts::FnResult func_IsLexpr(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & IsLexpr/4 e.Expr/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Expr as range 2
  //DEBUG: e.Expr: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & IsLexpr:1/6 Tile{ AsIs: </0 Reuse: & IsLexpr-Aux/4 AsIs: e.Expr/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_IsLexpr_B1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_IsLexprm_Aux]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IsLexpr("IsLexpr", COOKIE1_, COOKIE2_, func_IsLexpr);


static refalrts::FnResult func_IsLexprm_Aux(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & IsLexpr-Aux/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & IsLexpr-Aux/4 e.Expr-B/7 (/13 # Var/15 'e'/16 e.Index1/11 )/14 e.Expr-M/17 (/23 # Var/25 'e'/26 e.Index2/21 )/24 e.Expr-E/19 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Var], context[11], context[12] );
      if( ! context[15] )
        continue;
      context[16] = refalrts::char_left( 'e', context[11], context[12] );
      if( ! context[16] )
        continue;
      // closed e.Index1 as range 11
      context[17] = 0;
      context[18] = 0;
      refalrts::start_e_loop(vm);
      do {
        context[19] = context[9];
        context[20] = context[10];
        context[21] = 0;
        context[22] = 0;
        context[23] = refalrts::brackets_left( context[21], context[22], context[19], context[20] );
        if( ! context[23] )
          continue;
        refalrts::bracket_pointers(context[23], context[24]);
        context[25] = refalrts::ident_left( identifiers[ident_Var], context[21], context[22] );
        if( ! context[25] )
          continue;
        context[26] = refalrts::char_left( 'e', context[21], context[22] );
        if( ! context[26] )
          continue;
        // closed e.Index2 as range 21
        // closed e.Expr-E as range 19
        //DEBUG: e.Expr-B: 7
        //DEBUG: e.Index1: 11
        //DEBUG: e.Expr-M: 17
        //DEBUG: e.Index2: 21
        //DEBUG: e.Expr-E: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & IsLexpr-Aux/4 e.Expr-B/7 (/13 # Var/15 'e'/16 e.Index1/11 )/14 e.Expr-M/17 (/23 # Var/25 'e'/26 e.Index2/21 )/24 e.Expr-E/19 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: # OpenE/1 ]] }
        refalrts::reinit_ident(context[1], identifiers[ident_OpenE]);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( refalrts::open_evar_advance( context[17], context[18], context[9], context[10] ) );
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & IsLexpr-Aux/4 e.Expr/2 >/1
  // closed e.Expr as range 2
  //DEBUG: e.Expr: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@6/4 AsIs: e.Expr/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z6]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_IsLexprm_Aux("IsLexpr-Aux", COOKIE1_, COOKIE2_, func_IsLexprm_Aux);


static refalrts::FnResult func_gen_OptFunction_B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & OptFunction:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & OptFunction:1/4 (/7 e.new1/5 )/8 s.new2/25 (/15 e.new3/13 )/16 (/11 t.new4/26 (/23 e.new5/21 )/24 (/19 e.new6/17 )/20 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_right( context[17], context[18], context[9], context[10] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_right( context[21], context[22], context[9], context[10] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new1 as range 5
  // closed e.new3 as range 13
  // closed e.new5 as range 21
  // closed e.new6 as range 17
  if( ! refalrts::svar_left( context[25], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[27] = refalrts::tvar_left( context[26], context[9], context[10] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & OptFunction:1/4 (/7 e.Sentences/28 )/8 s.ScopeClass/25 (/15 e.Name/30 )/16 (/11 t.OptInfo$a/26 (/23 e.Sentences/34 )/24 (/19 )/20 )/12 >/1
    context[28] = context[5];
    context[29] = context[6];
    context[30] = context[13];
    context[31] = context[14];
    context[32] = context[21];
    context[33] = context[22];
    if( ! refalrts::empty_seq( context[17], context[18] ) )
      continue;
    // closed e.Sentences as range 28
    if( ! refalrts::repeated_evar_left( vm, context[34], context[35], context[28], context[29], context[32], context[33] ) )
      continue;
    if( ! refalrts::empty_seq( context[32], context[33] ) )
      continue;
    // closed e.Name as range 30
    //DEBUG: t.OptInfo$a: 26
    //DEBUG: s.ScopeClass: 25
    //DEBUG: e.Sentences: 28
    //DEBUG: e.Name: 30

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Sentences/34 )/24 (/19 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.OptInfo$a/26 AsIs: (/23 } Tile{ HalfReuse: # ColdFunction/20 } Tile{ HalfReuse: # DRIVE/8 AsIs: s.ScopeClass/25 AsIs: (/15 AsIs: e.Name/30 AsIs: )/16 HalfReuse: # Sentences/11 } Tile{ AsIs: </0 Reuse: & Map@7/4 } Tile{ AsIs: e.Sentences/28 } Tile{ HalfReuse: >/12 HalfReuse: )/1 ]] }
    refalrts::reinit_ident(context[20], identifiers[ident_ColdFunction]);
    refalrts::reinit_ident(context[8], identifiers[ident_DRIVE]);
    refalrts::reinit_ident(context[11], identifiers[ident_Sentences]);
    refalrts::update_name(context[4], functions[efunc_gen_Map_Z7]);
    refalrts::reinit_close_call(context[12]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[23], context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_evar( res, context[28], context[29] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[8], context[11] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[26], context[23] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptFunction:1/4 (/7 e.Sentences/5 )/8 s.ScopeClass/25 (/15 e.Name/13 )/16 (/11 t.OptInfo$a/26 (/23 e.Sentences$a/21 )/24 (/19 e.NewFunctions/17 )/20 )/12 >/1
  // closed e.Sentences as range 5
  // closed e.Name as range 13
  // closed e.Sentences$a as range 21
  // closed e.NewFunctions as range 17
  //DEBUG: t.OptInfo$a: 26
  //DEBUG: s.ScopeClass: 25
  //DEBUG: e.Sentences: 5
  //DEBUG: e.Name: 13
  //DEBUG: e.Sentences$a: 21
  //DEBUG: e.NewFunctions: 17

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & OptFunction:1/4 (/7 e.Sentences/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/24 (/19 {REMOVED TILE} )/20 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.OptInfo$a/26 AsIs: (/23 } Tile{ HalfReuse: # Function/8 AsIs: s.ScopeClass/25 AsIs: (/15 AsIs: e.Name/13 AsIs: )/16 HalfReuse: # Sentences/11 } Tile{ AsIs: e.Sentences$a/21 } Tile{ AsIs: )/12 } Tile{ AsIs: e.NewFunctions/17 } Tile{ ]] }
  refalrts::reinit_ident(context[8], identifiers[ident_Function]);
  refalrts::reinit_ident(context[11], identifiers[ident_Sentences]);
  refalrts::link_brackets( context[23], context[12] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  res = refalrts::splice_evar( res, context[26], context[23] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptFunction_B1("OptFunction:1", COOKIE1_, COOKIE2_, func_gen_OptFunction_B1);


static refalrts::FnResult func_gen_OptFunction_L1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & OptFunction\1=1/4 (/7 e.SntAcc/5 )/8 (/11 e.FunAcc/9 )/12 t.OptInfo$b/13 (/17 e.NewFunctions/15 )/18 e.NewSentences/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.SntAcc as range 5
  // closed e.FunAcc as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  // closed e.NewFunctions as range 15
  // closed e.NewSentences as range 2
  //DEBUG: e.SntAcc: 5
  //DEBUG: e.FunAcc: 9
  //DEBUG: t.OptInfo$b: 13
  //DEBUG: e.NewFunctions: 15
  //DEBUG: e.NewSentences: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & OptFunction\1=1/4 (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: (/12 AsIs: t.OptInfo$b/13 AsIs: (/17 } Tile{ AsIs: e.SntAcc/5 } Tile{ AsIs: e.NewSentences/2 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.FunAcc/9 } Tile{ AsIs: e.NewFunctions/15 } Tile{ AsIs: )/18 } Tile{ HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[12]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[12], context[1] );
  refalrts::link_brackets( context[11], context[18] );
  refalrts::link_brackets( context[17], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[18] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[12], context[17] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptFunction_L1A1("OptFunction\\1=1", COOKIE1_, COOKIE2_, func_gen_OptFunction_L1A1);


static refalrts::FnResult func_OptFunction(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & OptFunction/4 (/7 # Function/9 s.ScopeClass/10 (/13 e.Name/11 )/14 # Sentences/15 e.Sentences/5 )/8 t.OptInfo/16 t.Mode/18 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = refalrts::ident_left( identifiers[ident_Function], context[5], context[6] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[5], context[6] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = refalrts::ident_left( identifiers[ident_Sentences], context[5], context[6] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 11
  // closed e.Sentences as range 5
  context[17] = refalrts::tvar_left( context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  context[19] = refalrts::tvar_left( context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.ScopeClass: 10
  //DEBUG: e.Name: 11
  //DEBUG: e.Sentences: 5
  //DEBUG: t.OptInfo: 16
  //DEBUG: t.Mode: 18

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptFunction:1/4 AsIs: (/7 } Tile{ AsIs: e.Sentences/5 } Tile{ HalfReuse: )/9 AsIs: s.ScopeClass/10 AsIs: (/13 AsIs: e.Name/11 AsIs: )/14 HalfReuse: </15 } & Reduce@1/20 Tile{ AsIs: t.Mode/18 } Tile{ HalfReuse: (/8 AsIs: t.OptInfo/16 } (/21 )/22 (/23 )/24 )/25 e.Sentences/5/26 >/28 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[20], functions[efunc_gen_Reduce_Z1]);
  refalrts::alloc_open_bracket(vm, context[21]);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::alloc_close_bracket(vm, context[25]);
  refalrts::copy_evar(vm, context[26], context[27], context[5], context[6]);
  refalrts::alloc_close_call(vm, context[28]);
  refalrts::update_name(context[4], functions[efunc_gen_OptFunction_B1]);
  refalrts::reinit_close_bracket(context[9]);
  refalrts::reinit_open_call(context[15]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[28] );
  refalrts::push_stack( vm, context[15] );
  refalrts::link_brackets( context[8], context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[7], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[21], context[28] );
  res = refalrts::splice_evar( res, context[8], context[17] );
  res = refalrts::splice_evar( res, context[18], context[19] );
  res = refalrts::splice_elem( res, context[20] );
  res = refalrts::splice_evar( res, context[9], context[15] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_OptFunction("OptFunction", COOKIE1_, COOKIE2_, func_OptFunction);


static refalrts::FnResult func_gen_OptSentence_S1A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & OptSentence$1=4/4 (/7 e.Left/5 )/8 t.OptInfo$a/13 e.Branches/2 (/11 e.NewFunctions/9 )/12 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_right( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Left as range 5
  // closed e.NewFunctions as range 9
  context[14] = refalrts::tvar_left( context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  // closed e.Branches as range 2
  //DEBUG: e.Left: 5
  //DEBUG: e.NewFunctions: 9
  //DEBUG: t.OptInfo$a: 13
  //DEBUG: e.Branches: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.OptInfo$a/13 } Tile{ AsIs: (/11 AsIs: e.NewFunctions/9 AsIs: )/12 } Tile{ AsIs: </0 Reuse: & Map@8/4 AsIs: (/7 AsIs: e.Left/5 AsIs: )/8 } Tile{ AsIs: e.Branches/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1A4("OptSentence$1=4", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1A4);


static refalrts::FnResult func_gen_OptSentence_S1A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & OptSentence$1=3/4 (/7 e.Left/5 )/8 t.OptInfo/9 (/13 e.Right/11 )/14 t.Mode$a/15 e.SentenceVars/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Left as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Right as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  // closed e.SentenceVars as range 2
  //DEBUG: e.Left: 5
  //DEBUG: t.OptInfo: 9
  //DEBUG: e.Right: 11
  //DEBUG: t.Mode$a: 15
  //DEBUG: e.SentenceVars: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1=4/4 AsIs: (/7 AsIs: e.Left/5 AsIs: )/8 } </17 & OptTree-Drive-Expr/18 Tile{ AsIs: (/13 } Tile{ AsIs: e.SentenceVars/2 } Tile{ AsIs: )/14 } Tile{ AsIs: t.OptInfo/9 } Tile{ AsIs: e.Right/11 } Tile{ AsIs: t.Mode$a/15 } >/19 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_OptTreem_Drivem_Expr]);
  refalrts::alloc_close_call(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1A4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1A3("OptSentence$1=3", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1A3);


static refalrts::FnResult func_gen_OptSentence_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & OptSentence$1=2/4 (/7 e.Left/5 )/8 t.OptInfo/9 (/13 e.Right/11 )/14 t.Mode$a/15 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.Left as range 5
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Right as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Left: 5
  //DEBUG: t.OptInfo: 9
  //DEBUG: e.Right: 11
  //DEBUG: t.Mode$a: 15

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1=3/4 AsIs: (/7 AsIs: e.Left/5 AsIs: )/8 AsIs: t.OptInfo/9 AsIs: (/13 AsIs: e.Right/11 AsIs: )/14 AsIs: t.Mode$a/15 HalfReuse: </1 } & ExtractVariables/17 (/18 (/19 e.Left/5/20 )/22 (/23 e.Right/11/24 )/26 )/27 >/28 >/29 Tile{ ]] }
  refalrts::alloc_name(vm, context[17], functions[efunc_ExtractVariables]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::copy_evar(vm, context[20], context[21], context[5], context[6]);
  refalrts::alloc_close_bracket(vm, context[22]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::copy_evar(vm, context[24], context[25], context[11], context[12]);
  refalrts::alloc_close_bracket(vm, context[26]);
  refalrts::alloc_close_bracket(vm, context[27]);
  refalrts::alloc_close_call(vm, context[28]);
  refalrts::alloc_close_call(vm, context[29]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1A3]);
  refalrts::reinit_open_call(context[1]);
  refalrts::push_stack( vm, context[29] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[28] );
  refalrts::push_stack( vm, context[1] );
  refalrts::link_brackets( context[18], context[27] );
  refalrts::link_brackets( context[23], context[26] );
  refalrts::link_brackets( context[19], context[22] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[17], context[29] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1A2("OptSentence$1=2", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1A2);


static refalrts::FnResult func_OptSentence(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & OptSentence/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & OptSentence/4 t.new1/5 t.new2/7 t.new3/9 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & OptSentence/4 (/5 (/15 e.new4/13 )/16 (/19 e.new5/17 )/20 )/6 t.new6/7 t.new7/9 >/1
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    context[17] = 0;
    context[18] = 0;
    context[19] = refalrts::brackets_left( context[17], context[18], context[11], context[12] );
    if( ! context[19] )
      continue;
    refalrts::bracket_pointers(context[19], context[20]);
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    // closed e.new4 as range 13
    // closed e.new5 as range 17
    do {
      // </0 & OptSentence/4 (/5 (/15 e.Left/21 )/16 (/19 e.Right/23 )/20 )/6 t.OptInfo/7 (/9 s.DriveMode/27 s.IntrinsicMode/28 )/10 >/1
      context[21] = context[13];
      context[22] = context[14];
      context[23] = context[17];
      context[24] = context[18];
      context[25] = 0;
      context[26] = 0;
      if( ! refalrts::brackets_term( context[25], context[26], context[9] ) )
        continue;
      // closed e.Left as range 21
      // closed e.Right as range 23
      if( ! refalrts::svar_left( context[27], context[25], context[26] ) )
        continue;
      if( ! refalrts::svar_left( context[28], context[25], context[26] ) )
        continue;
      if( ! refalrts::empty_seq( context[25], context[26] ) )
        continue;
      //DEBUG: t.OptInfo: 7
      //DEBUG: e.Left: 21
      //DEBUG: e.Right: 23
      //DEBUG: s.DriveMode: 27
      //DEBUG: s.IntrinsicMode: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </29 & OptSentence$1=2/30 (/31 e.Left/21/32 Tile{ AsIs: )/6 AsIs: t.OptInfo/7 AsIs: (/9 } Tile{ AsIs: e.Right/23 } Tile{ AsIs: )/20 } </34 & OptSentence$1=2:1@1/35 Tile{ AsIs: s.DriveMode/27 AsIs: s.IntrinsicMode/28 } Tile{ AsIs: </0 Reuse: & IsLexpr:1/4 HalfReuse: </5 HalfReuse: & IsLexpr-Aux/15 AsIs: e.Left/21 HalfReuse: >/16 HalfReuse: >/19 } Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[29]);
      refalrts::alloc_name(vm, context[30], functions[efunc_gen_OptSentence_S1A2]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::copy_evar(vm, context[32], context[33], context[21], context[22]);
      refalrts::alloc_open_call(vm, context[34]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_OptSentence_S1A2B1Z1]);
      refalrts::update_name(context[4], functions[efunc_gen_IsLexpr_B1]);
      refalrts::reinit_open_call(context[5]);
      refalrts::reinit_name(context[15], functions[efunc_IsLexprm_Aux]);
      refalrts::reinit_close_call(context[16]);
      refalrts::reinit_close_call(context[19]);
      refalrts::reinit_close_call(context[10]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[29] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[5] );
      refalrts::link_brackets( context[9], context[20] );
      refalrts::link_brackets( context[31], context[6] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_evar( res, context[0], context[19] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_evar( res, context[34], context[35] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[6], context[9] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[29], context[31] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence/4 (/5 (/15 e.Left/21 )/16 (/19 e.Right/23 )/20 )/6 t.OptInfo/7 t.Mode/9 >/1
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[17];
    context[24] = context[18];
    // closed e.Left as range 21
    // closed e.Right as range 23
    //DEBUG: t.OptInfo: 7
    //DEBUG: t.Mode: 9
    //DEBUG: e.Left: 21
    //DEBUG: e.Right: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & OptSentence$1=1*1/5 AsIs: (/15 AsIs: e.Left/21 AsIs: )/16 } Tile{ AsIs: t.OptInfo/7 } Tile{ AsIs: (/19 AsIs: e.Right/23 AsIs: )/20 } t.Mode/9/25 Tile{ AsIs: t.Mode/9 AsIs: >/1 ]] }
    refalrts::copy_evar(vm, context[25], context[26], context[9], context[10]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_gen_OptSentence_S1A1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[4], context[16] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence/4 t.Sentence/5 t.OptInfo/7 t.Mode/9 >/1
  //DEBUG: t.Sentence: 5
  //DEBUG: t.OptInfo: 7
  //DEBUG: t.Mode: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} t.Mode/9 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.OptInfo/7 } Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: t.Sentence/5 } Tile{ ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[0], context[6] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_OptSentence("OptSentence", COOKIE1_, COOKIE2_, func_OptSentence);


static refalrts::FnResult func_WithMetatables(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & WithMetatables/4 e.OptFuncs/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.OptFuncs as range 2
  //DEBUG: e.OptFuncs: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DoMapAccum@8/6 (/7 # Metatables/8 )/9 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.OptFuncs/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoMapAccum_Z8]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_ident(vm, context[8], identifiers[ident_Metatables]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[7], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_WithMetatables("WithMetatables", COOKIE1_, COOKIE2_, func_WithMetatables);


static refalrts::FnResult func_OptTreem_Drivem_CleanupColdCalls(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & OptTree-Drive-CleanupColdCalls/4 e.AST/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.AST as range 2
  //DEBUG: e.AST: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@9/4 AsIs: e.AST/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_OptTreem_Drivem_CleanupColdCalls("OptTree-Drive-CleanupColdCalls", 0U, 0U, func_OptTreem_Drivem_CleanupColdCalls);


static refalrts::FnResult func_CleanupColdm_Body(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & CleanupCold-Body/4 e.Sentences/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Sentences as range 2
  //DEBUG: e.Sentences: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@7/4 AsIs: e.Sentences/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z7]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CleanupColdm_Body("CleanupCold-Body", COOKIE1_, COOKIE2_, func_CleanupColdm_Body);


static refalrts::FnResult func_CleanupColdm_Sentence(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & CleanupCold-Sentence/4 (/7 (/11 e.Pattern/9 )/12 e.Conditions/5 (/15 e.Result/13 )/16 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_right( context[13], context[14], context[5], context[6] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Pattern as range 9
  // closed e.Conditions as range 5
  // closed e.Result as range 13
  //DEBUG: e.Pattern: 9
  //DEBUG: e.Conditions: 5
  //DEBUG: e.Result: 13

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/11 AsIs: e.Pattern/9 AsIs: )/12 } Tile{ AsIs: </0 Reuse: & Map@11/4 } Tile{ AsIs: e.Conditions/5 } >/17 (/18 </19 Tile{ HalfReuse: & Map@10/15 AsIs: e.Result/13 HalfReuse: >/16 AsIs: )/8 HalfReuse: )/1 ]] }
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_open_call(vm, context[19]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z11]);
  refalrts::reinit_name(context[15], functions[efunc_gen_Map_Z10]);
  refalrts::reinit_close_call(context[16]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[7], context[1] );
  refalrts::link_brackets( context[18], context[8] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[19] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[15];
  res = refalrts::splice_evar( res, context[17], context[19] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[7], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CleanupColdm_Sentence("CleanupCold-Sentence", COOKIE1_, COOKIE2_, func_CleanupColdm_Sentence);


static refalrts::FnResult func_CleanupColdm_Result(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & CleanupCold-Result/4 e.Result/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Result as range 2
  //DEBUG: e.Result: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@10/4 AsIs: e.Result/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CleanupColdm_Result("CleanupCold-Result", COOKIE1_, COOKIE2_, func_CleanupColdm_Result);


static refalrts::FnResult func_CleanupColdm_Term(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & CleanupCold-Term/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CleanupCold-Term/4 t.new1/5 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & CleanupCold-Term/4 (/5 s.new2/9 e.new3/7 )/6 >/1
    context[7] = 0;
    context[8] = 0;
    if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
      continue;
    if( ! refalrts::svar_left( context[9], context[7], context[8] ) )
      continue;
    // closed e.new3 as range 7
    do {
      // </0 & CleanupCold-Term/4 (/5 # Brackets/9 e.Expr/10 )/6 >/1
      context[10] = context[7];
      context[11] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_Brackets], context[9] ) )
        continue;
      // closed e.Expr as range 10
      //DEBUG: e.Expr: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Brackets/4 HalfReuse: </5 HalfReuse: & Map@10/9 AsIs: e.Expr/10 HalfReuse: >/6 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Brackets]);
      refalrts::reinit_open_call(context[5]);
      refalrts::reinit_name(context[9], functions[efunc_gen_Map_Z10]);
      refalrts::reinit_close_call(context[6]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      refalrts::push_stack( vm, context[6] );
      refalrts::push_stack( vm, context[5] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CleanupCold-Term/4 (/5 # ADT-Brackets/9 (/14 e.Name/12 )/15 e.Expr/10 )/6 >/1
      context[10] = context[7];
      context[11] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[9] ) )
        continue;
      context[12] = 0;
      context[13] = 0;
      context[14] = refalrts::brackets_left( context[12], context[13], context[10], context[11] );
      if( ! context[14] )
        continue;
      refalrts::bracket_pointers(context[14], context[15]);
      // closed e.Name as range 12
      // closed e.Expr as range 10
      //DEBUG: e.Name: 12
      //DEBUG: e.Expr: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/5 AsIs: # ADT-Brackets/9 AsIs: (/14 AsIs: e.Name/12 AsIs: )/15 } Tile{ AsIs: </0 Reuse: & Map@10/4 } Tile{ AsIs: e.Expr/10 } Tile{ HalfReuse: >/6 HalfReuse: )/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_Map_Z10]);
      refalrts::reinit_close_call(context[6]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[5], context[1] );
      refalrts::push_stack( vm, context[6] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[6];
      res = refalrts::splice_evar( res, context[10], context[11] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[5], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CleanupCold-Term/4 (/5 # CallBrackets/9 e.Expr/10 )/6 >/1
      context[10] = context[7];
      context[11] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[9] ) )
        continue;
      // closed e.Expr as range 10
      //DEBUG: e.Expr: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # CallBrackets/4 HalfReuse: </5 HalfReuse: & Map@10/9 AsIs: e.Expr/10 HalfReuse: >/6 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_CallBrackets]);
      refalrts::reinit_open_call(context[5]);
      refalrts::reinit_name(context[9], functions[efunc_gen_Map_Z10]);
      refalrts::reinit_close_call(context[6]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      refalrts::push_stack( vm, context[6] );
      refalrts::push_stack( vm, context[5] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CleanupCold-Term/4 (/5 # ColdCallBrackets/9 e.Expr/10 )/6 >/1
    context[10] = context[7];
    context[11] = context[8];
    if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[9] ) )
      continue;
    // closed e.Expr as range 10
    //DEBUG: e.Expr: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # CallBrackets/4 HalfReuse: </5 HalfReuse: & Map@10/9 AsIs: e.Expr/10 HalfReuse: >/6 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_CallBrackets]);
    refalrts::reinit_open_call(context[5]);
    refalrts::reinit_name(context[9], functions[efunc_gen_Map_Z10]);
    refalrts::reinit_close_call(context[6]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::push_stack( vm, context[6] );
    refalrts::push_stack( vm, context[5] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CleanupCold-Term/4 t.OtherTerm/5 >/1
  //DEBUG: t.OtherTerm: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CleanupCold-Term/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.OtherTerm/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CleanupColdm_Term("CleanupCold-Term", COOKIE1_, COOKIE2_, func_CleanupColdm_Term);


static refalrts::FnResult func_gen_AddStarSuffix_D1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & AddStarSuffix*1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & AddStarSuffix*1/4 e.new1/2 s.new2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 2
  do {
    // </0 & AddStarSuffix*1/4 e.Name/8 # SUF/12 e.Suffix/10 s.Count/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[8] = 0;
    context[9] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[10] = context[6];
      context[11] = context[7];
      context[12] = refalrts::ident_left( identifiers[ident_SUF], context[10], context[11] );
      if( ! context[12] )
        continue;
      // closed e.Suffix as range 10
      //DEBUG: s.Count: 5
      //DEBUG: e.Name: 8
      //DEBUG: e.Suffix: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Count/5 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Name/8 } Tile{ AsIs: # SUF/12 } Tile{ AsIs: e.Suffix/10 } Tile{ HalfReuse: '*'/4 } Tile{ HalfReuse: s.Count5 /1 ]] }
      refalrts::reinit_char(context[4], '*');
      refalrts::reinit_svar( context[1], context[5] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[4] );
      res = refalrts::splice_evar( res, context[10], context[11] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[8], context[9], context[6], context[7] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & AddStarSuffix*1/4 e.Name/2 s.Count/5 >/1
  // closed e.Name as range 2
  //DEBUG: s.Count: 5
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Count/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Name/2 } Tile{ HalfReuse: # SUF/0 HalfReuse: '*'/4 } Tile{ HalfReuse: s.Count5 /1 ]] }
  refalrts::reinit_ident(context[0], identifiers[ident_SUF]);
  refalrts::reinit_char(context[4], '*');
  refalrts::reinit_svar( context[1], context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_AddStarSuffix_D1("AddStarSuffix*1", COOKIE1_, COOKIE2_, func_gen_AddStarSuffix_D1);


static refalrts::FnResult func_gen_Apply_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@2/4 t.new1/5 t.new2/7 t.new3/9 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Apply@2/4 s.Fn/5 t.Acc/7 t.Next/9 >/1
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 9
    //DEBUG: s.Fn: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: t.Acc/7 AsIs: t.Next/9 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@2/4 (/5 t.Closure/13 e.Bounded/11 )/6 t.Acc/7 t.Next/9 >/1
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded as range 11
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 9
    //DEBUG: t.Closure: 13
    //DEBUG: e.Bounded: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@4/4 } Tile{ AsIs: t.Closure/13 } Tile{ AsIs: e.Bounded/11 } Tile{ AsIs: t.Acc/7 AsIs: t.Next/9 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@2/4 t.dyn0/5 t.Acc/7 t.Next/9 >/1
  //DEBUG: t.dyn0: 5
  //DEBUG: t.Acc: 7
  //DEBUG: t.Next: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: t.Acc/7 AsIs: t.Next/9 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z2("Apply@2", COOKIE1_, COOKIE2_, func_gen_Apply_Z2);


static refalrts::FnResult func_gen_Map_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & Map@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@1/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@1/4 (/7 # Intrinsic/13 e.0/11 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = refalrts::ident_left( identifiers[ident_Intrinsic], context[11], context[12] );
      if( ! context[13] )
        continue;
      // closed e.0 as range 11
      // closed e.Tail as range 9
      //DEBUG: e.0: 11
      //DEBUG: e.Tail: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/14 # Intrinsic/15 (/16 e.0/11/17 Tile{ HalfReuse: )/7 AsIs: # Intrinsic/13 AsIs: e.0/11 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@1/4 } Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[14]);
      refalrts::alloc_ident(vm, context[15], identifiers[ident_Intrinsic]);
      refalrts::alloc_open_bracket(vm, context[16]);
      refalrts::copy_evar(vm, context[17], context[18], context[11], context[12]);
      refalrts::reinit_close_bracket(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[14], context[8] );
      refalrts::link_brackets( context[16], context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[14], context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@1/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=21\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@1/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z1]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A21L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@1/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@1/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@1/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & UpdateDriveInfo=21\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A21L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z1("Map@1", COOKIE1_, COOKIE2_, func_gen_Map_Z1);


static refalrts::FnResult func_gen_Map_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & Map@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@2/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@2/4 (/7 s.new3/13 e.new4/11 )/8 e.new5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new4 as range 11
      do {
        // </0 & Map@2/4 (/7 s.new6/13 e.new7/14 '*'/19 s.new8/18 )/8 e.new9/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        // closed e.new9 as range 16
        if( ! refalrts::svar_right( context[18], context[14], context[15] ) )
          continue;
        context[19] = refalrts::char_right( '*', context[14], context[15] );
        if( ! context[19] )
          continue;
        // closed e.new7 as range 14
        do {
          // </0 & Map@2/4 (/7 s.Label/13 e.2/20 # SUF/24 '*'/19 s.Count/18 )/8 e.Tail/22 >/1
          context[20] = context[14];
          context[21] = context[15];
          context[22] = context[16];
          context[23] = context[17];
          context[24] = refalrts::ident_right( identifiers[ident_SUF], context[20], context[21] );
          if( ! context[24] )
            continue;
          // closed e.2 as range 20
          // closed e.Tail as range 22
          //DEBUG: s.Label: 13
          //DEBUG: s.Count: 18
          //DEBUG: e.2: 20
          //DEBUG: e.Tail: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & Map@2/4 {REMOVED TILE} s.Count/18 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: s.Label/13 AsIs: e.2/20 HalfReuse: )/24 HalfReuse: </19 } Tile{ HalfReuse: & Map@2/8 AsIs: e.Tail/22 AsIs: >/1 ]] }
          refalrts::reinit_close_bracket(context[24]);
          refalrts::reinit_open_call(context[19]);
          refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z2]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[19] );
          refalrts::link_brackets( context[7], context[24] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_evar( res, context[7], context[19] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@2/4 (/7 s.Label/13 e.1/20 '*'/19 s.Count/18 )/8 e.Tail/22 >/1
        context[20] = context[14];
        context[21] = context[15];
        context[22] = context[16];
        context[23] = context[17];
        // closed e.1 as range 20
        // closed e.Tail as range 22
        //DEBUG: s.Label: 13
        //DEBUG: s.Count: 18
        //DEBUG: e.1: 20
        //DEBUG: e.Tail: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} & Map@2/4 {REMOVED TILE} s.Count/18 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: s.Label/13 AsIs: e.1/20 HalfReuse: )/19 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@2/8 AsIs: e.Tail/22 AsIs: >/1 ]] }
        refalrts::reinit_close_bracket(context[19]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z2]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[7], context[19] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_elem( res, context[0] );
        res = refalrts::splice_evar( res, context[7], context[19] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@2/4 (/7 s.Label/13 e.0/14 )/8 e.Tail/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      // closed e.0 as range 14
      // closed e.Tail as range 16
      //DEBUG: s.Label: 13
      //DEBUG: e.0: 14
      //DEBUG: e.Tail: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: s.Label/13 AsIs: e.0/14 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@2/4 } Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@2/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ExtractBaseNames=1\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@2/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z2]);
    refalrts::update_name(context[4], functions[efunc_gen_ExtractBaseNames_A1L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@2/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@2/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@2/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & ExtractBaseNames=1\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractBaseNames_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z2("Map@2", COOKIE1_, COOKIE2_, func_gen_Map_Z2);


static refalrts::FnResult func_gen_MapAccum_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & MapAccum@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & MapAccum@1/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & MapAccum@1/4 t.Acc/5 e.Tail/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    // closed e.Tail as range 7
    //DEBUG: t.Acc: 5
    //DEBUG: e.Tail: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@9/4 AsIs: t.Acc/5 } (/9 )/10 Tile{ AsIs: e.Tail/7 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[9]);
    refalrts::alloc_close_bracket(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MapAccum@1/4 t.accum/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.accum: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 Tile{ HalfReuse: & MapAccum@0/0 Reuse: & FormatOptFunctions=1\1@0/4 AsIs: t.accum/5 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::reinit_name(context[0], functions[efunc_gen_MapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FormatOptFunctions_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MapAccum_Z1("MapAccum@1", COOKIE1_, COOKIE2_, func_gen_MapAccum_Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A20Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & UpdateDriveInfo=20@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UpdateDriveInfo=20@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 (/27 e.new6/25 )/28 (/31 e.new7/29 )/32 e.new8/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 25
  // closed e.new7 as range 29
  // closed e.new8 as range 2
  do {
    // </0 & UpdateDriveInfo=20@1/4 (/7 e.KnownFunctions0/33 )/8 (/11 e.AST$f0/35 )/12 (/15 e.KnownNames$a0/37 )/16 (/19 e.Drives$d/39 )/20 (/23 e.Inlines$c/41 )/24 (/27 e.Metatables$a/43 )/28 (/31 e.Intrinsics$a0/45 )/32 e.OptFunctions/47 >/1
    context[33] = context[5];
    context[34] = context[6];
    context[35] = context[9];
    context[36] = context[10];
    context[37] = context[13];
    context[38] = context[14];
    context[39] = context[17];
    context[40] = context[18];
    context[41] = context[21];
    context[42] = context[22];
    context[43] = context[25];
    context[44] = context[26];
    context[45] = context[29];
    context[46] = context[30];
    context[47] = context[2];
    context[48] = context[3];
    // closed e.KnownFunctions0 as range 33
    // closed e.AST$f0 as range 35
    // closed e.KnownNames$a0 as range 37
    // closed e.Drives$d as range 39
    // closed e.Inlines$c as range 41
    // closed e.Metatables$a as range 43
    // closed e.Intrinsics$a0 as range 45
    // closed e.OptFunctions as range 47
    //DEBUG: e.KnownFunctions0: 33
    //DEBUG: e.AST$f0: 35
    //DEBUG: e.KnownNames$a0: 37
    //DEBUG: e.Drives$d: 39
    //DEBUG: e.Inlines$c: 41
    //DEBUG: e.Metatables$a: 43
    //DEBUG: e.Intrinsics$a0: 45
    //DEBUG: e.OptFunctions: 47

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=21@1/4 AsIs: (/7 } Tile{ AsIs: e.KnownFunctions0/33 } )/49 (/50 Tile{ AsIs: e.OptFunctions/47 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.AST$f0/35 AsIs: )/12 AsIs: (/15 AsIs: e.KnownNames$a0/37 AsIs: )/16 AsIs: (/19 AsIs: e.Drives$d/39 AsIs: )/20 AsIs: (/23 AsIs: e.Inlines$c/41 AsIs: )/24 AsIs: (/27 AsIs: e.Metatables$a/43 AsIs: )/28 AsIs: (/31 AsIs: e.Intrinsics$a0/45 AsIs: )/32 } </51 & Map@1/52 e.Intrinsics$a0/45/53 >/55 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[49]);
    refalrts::alloc_open_bracket(vm, context[50]);
    refalrts::alloc_open_call(vm, context[51]);
    refalrts::alloc_name(vm, context[52], functions[efunc_gen_Map_Z1]);
    refalrts::copy_evar(vm, context[53], context[54], context[45], context[46]);
    refalrts::alloc_close_call(vm, context[55]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A21Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[55] );
    refalrts::push_stack( vm, context[51] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[50], context[8] );
    refalrts::link_brackets( context[7], context[49] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[51], context[55] );
    res = refalrts::splice_evar( res, context[8], context[32] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=20@1/4 (/7 e.KnownFunctions0/5 )/8 (/11 e.AST$f0/9 )/12 (/15 e.KnownNames$a0/13 )/16 (/19 e.Drives$d/17 )/20 (/23 e.Inlines$c/21 )/24 (/27 e.Metatables$a/25 )/28 (/31 e.Intrinsics$a0/29 )/32 e.dyn/2 >/1
  // closed e.KnownFunctions0 as range 5
  // closed e.AST$f0 as range 9
  // closed e.KnownNames$a0 as range 13
  // closed e.Drives$d as range 17
  // closed e.Inlines$c as range 21
  // closed e.Metatables$a as range 25
  // closed e.Intrinsics$a0 as range 29
  // closed e.dyn as range 2
  //DEBUG: e.KnownFunctions0: 5
  //DEBUG: e.AST$f0: 9
  //DEBUG: e.KnownNames$a0: 13
  //DEBUG: e.Drives$d: 17
  //DEBUG: e.Inlines$c: 21
  //DEBUG: e.Metatables$a: 25
  //DEBUG: e.Intrinsics$a0: 29
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/20 (/23 {REMOVED TILE} )/24 (/27 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=20@0/4 AsIs: (/7 AsIs: e.KnownFunctions0/5 AsIs: )/8 AsIs: (/11 AsIs: e.AST$f0/9 AsIs: )/12 AsIs: (/15 AsIs: e.KnownNames$a0/13 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.Drives$d/17 } Tile{ AsIs: e.Inlines$c/21 } Tile{ AsIs: e.Metatables$a/25 } Tile{ AsIs: )/28 AsIs: (/31 AsIs: e.Intrinsics$a0/29 AsIs: )/32 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A20Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[19], context[28] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[28];
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::splice_to_freelist_open( vm, context[19], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A20Z1("UpdateDriveInfo=20@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A20Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 47 elems
  refalrts::Iter context[47];
  refalrts::zeros( context, 47 );
  // </0 & DoMapAccum@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@1/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@1/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@1/4 (/5 e.new8/21 )/6 (/9 e.new12/17 )/10 (/15 s.new9/25 e.new10/23 )/16 e.new11/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      if( ! refalrts::brackets_term( context[23], context[24], context[15] ) )
        continue;
      // closed e.new8 as range 21
      // closed e.new12 as range 17
      // closed e.new11 as range 19
      if( ! refalrts::svar_left( context[25], context[23], context[24] ) )
        continue;
      // closed e.new10 as range 23
      do {
        // </0 & DoMapAccum@1/4 (/5 e.new13/26 )/6 (/9 e.new18/28 )/10 (/15 s.new14/25 e.new15/30 '*'/35 s.new16/34 )/16 e.new17/32 >/1
        context[26] = context[21];
        context[27] = context[22];
        context[28] = context[17];
        context[29] = context[18];
        context[30] = context[23];
        context[31] = context[24];
        context[32] = context[19];
        context[33] = context[20];
        // closed e.new13 as range 26
        // closed e.new18 as range 28
        // closed e.new17 as range 32
        if( ! refalrts::svar_right( context[34], context[30], context[31] ) )
          continue;
        context[35] = refalrts::char_right( '*', context[30], context[31] );
        if( ! context[35] )
          continue;
        // closed e.new15 as range 30
        do {
          // </0 & DoMapAccum@1/4 (/5 e./36 )/6 (/9 e.Scanned/38 )/10 (/15 s.Label/25 e.3/40 # SUF/44 '*'/35 s.Count/34 )/16 e.Tail/42 >/1
          context[36] = context[26];
          context[37] = context[27];
          context[38] = context[28];
          context[39] = context[29];
          context[40] = context[30];
          context[41] = context[31];
          context[42] = context[32];
          context[43] = context[33];
          context[44] = refalrts::ident_right( identifiers[ident_SUF], context[40], context[41] );
          if( ! context[44] )
            continue;
          // closed e. as range 36
          // closed e.Scanned as range 38
          // closed e.3 as range 40
          // closed e.Tail as range 42
          //DEBUG: s.Label: 25
          //DEBUG: s.Count: 34
          //DEBUG: e.: 36
          //DEBUG: e.Scanned: 38
          //DEBUG: e.3: 40
          //DEBUG: e.Tail: 42

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Label/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </45 Tile{ HalfReuse: & DoMapAccum$1=1@1/6 AsIs: (/9 AsIs: e.Scanned/38 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/42 } Tile{ AsIs: )/16 } Tile{ AsIs: </0 Reuse: & MultiplyRemainderNames=1\1=2/4 AsIs: (/5 } Tile{ AsIs: e.3/40 } Tile{ HalfReuse: )/44 HalfReuse: s.Label25 /35 AsIs: s.Count/34 } Tile{ AsIs: e./36 } >/46 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[45]);
          refalrts::alloc_close_call(vm, context[46]);
          refalrts::reinit_name(context[6], functions[efunc_gen_DoMapAccum_S1A1Z1]);
          refalrts::update_name(context[4], functions[efunc_gen_MultiplyRemainderNames_A1L1A2]);
          refalrts::reinit_close_bracket(context[44]);
          refalrts::reinit_svar( context[35], context[25] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[45] );
          refalrts::push_stack( vm, context[46] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[5], context[44] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[9], context[10] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[46] );
          res = refalrts::splice_evar( res, context[36], context[37] );
          res = refalrts::splice_evar( res, context[44], context[34] );
          res = refalrts::splice_evar( res, context[40], context[41] );
          res = refalrts::splice_evar( res, context[0], context[5] );
          res = refalrts::splice_elem( res, context[16] );
          res = refalrts::splice_evar( res, context[42], context[43] );
          res = refalrts::splice_evar( res, context[6], context[15] );
          res = refalrts::splice_elem( res, context[45] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@1/4 (/5 e./36 )/6 (/9 e.Scanned/38 )/10 (/15 s.Label/25 e.2/40 '*'/35 s.Count/34 )/16 e.Tail/42 >/1
        context[36] = context[26];
        context[37] = context[27];
        context[38] = context[28];
        context[39] = context[29];
        context[40] = context[30];
        context[41] = context[31];
        context[42] = context[32];
        context[43] = context[33];
        // closed e. as range 36
        // closed e.Scanned as range 38
        // closed e.2 as range 40
        // closed e.Tail as range 42
        //DEBUG: s.Label: 25
        //DEBUG: s.Count: 34
        //DEBUG: e.: 36
        //DEBUG: e.Scanned: 38
        //DEBUG: e.2: 40
        //DEBUG: e.Tail: 42

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Label/25 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </44 Tile{ HalfReuse: & DoMapAccum$1=1@1/6 AsIs: (/9 AsIs: e.Scanned/38 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/42 } Tile{ AsIs: )/16 } Tile{ AsIs: </0 Reuse: & MultiplyRemainderNames=1\1=2/4 AsIs: (/5 } Tile{ AsIs: e.2/40 } )/45 Tile{ HalfReuse: s.Label25 /35 AsIs: s.Count/34 } Tile{ AsIs: e./36 } >/46 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_close_bracket(vm, context[45]);
        refalrts::alloc_close_call(vm, context[46]);
        refalrts::reinit_name(context[6], functions[efunc_gen_DoMapAccum_S1A1Z1]);
        refalrts::update_name(context[4], functions[efunc_gen_MultiplyRemainderNames_A1L1A2]);
        refalrts::reinit_svar( context[35], context[25] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[5], context[45] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[46] );
        res = refalrts::splice_evar( res, context[36], context[37] );
        res = refalrts::splice_evar( res, context[35], context[34] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[0], context[5] );
        res = refalrts::splice_elem( res, context[16] );
        res = refalrts::splice_evar( res, context[42], context[43] );
        res = refalrts::splice_evar( res, context[6], context[15] );
        res = refalrts::splice_elem( res, context[44] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@1/4 (/5 e./26 )/6 (/9 e.Scanned/28 )/10 (/15 s.Label/25 e.1/30 )/16 e.Tail/32 >/1
      context[26] = context[21];
      context[27] = context[22];
      context[28] = context[17];
      context[29] = context[18];
      context[30] = context[23];
      context[31] = context[24];
      context[32] = context[19];
      context[33] = context[20];
      // closed e. as range 26
      // closed e.Scanned as range 28
      // closed e.1 as range 30
      // closed e.Tail as range 32
      //DEBUG: s.Label: 25
      //DEBUG: e.: 26
      //DEBUG: e.Scanned: 28
      //DEBUG: e.1: 30
      //DEBUG: e.Tail: 32

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </34 Tile{ HalfReuse: & DoMapAccum$1=1@1/6 AsIs: (/9 AsIs: e.Scanned/28 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/32 } Tile{ AsIs: )/16 } Tile{ AsIs: </0 Reuse: & MultiplyRemainderNames=1\1=2@1/4 AsIs: (/5 } Tile{ AsIs: e.1/30 } )/35 Tile{ AsIs: s.Label/25 } Tile{ AsIs: e./26 } >/36 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[34]);
      refalrts::alloc_close_bracket(vm, context[35]);
      refalrts::alloc_close_call(vm, context[36]);
      refalrts::reinit_name(context[6], functions[efunc_gen_DoMapAccum_S1A1Z1]);
      refalrts::update_name(context[4], functions[efunc_gen_MultiplyRemainderNames_A1L1A2Z1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[34] );
      refalrts::push_stack( vm, context[36] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[35] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[36] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_evar( res, context[30], context[31] );
      res = refalrts::splice_evar( res, context[0], context[5] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[32], context[33] );
      res = refalrts::splice_evar( res, context[6], context[15] );
      res = refalrts::splice_elem( res, context[34] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@1/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@1/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & MultiplyRemainderNames=1\1*1/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_MultiplyRemainderNames_A1L1D1]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@1/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@1/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@1/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & MultiplyRemainderNames=1\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_MultiplyRemainderNames_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z1("DoMapAccum@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 42 elems
  refalrts::Iter context[42];
  refalrts::zeros( context, 42 );
  // </0 & DoMapAccum@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@2/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@2/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@2/4 (/5 e.new8/21 )/6 (/9 e.new11/17 )/10 t.new9/15 e.new10/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      // closed e.new8 as range 21
      // closed e.new11 as range 17
      // closed e.new10 as range 19
      do {
        // </0 & DoMapAccum@2/4 (/5 e./23 )/6 (/9 e.Scanned/25 )/10 (/15 # Function/31 s.ScopeClass/32 (/35 e.4/33 )/36 # Sentences/37 e.5/29 )/16 e.Tail/27 >/1
        context[23] = context[21];
        context[24] = context[22];
        context[25] = context[17];
        context[26] = context[18];
        context[27] = context[19];
        context[28] = context[20];
        context[29] = 0;
        context[30] = 0;
        if( ! refalrts::brackets_term( context[29], context[30], context[15] ) )
          continue;
        context[31] = refalrts::ident_left( identifiers[ident_Function], context[29], context[30] );
        if( ! context[31] )
          continue;
        // closed e. as range 23
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        if( ! refalrts::svar_left( context[32], context[29], context[30] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        context[35] = refalrts::brackets_left( context[33], context[34], context[29], context[30] );
        if( ! context[35] )
          continue;
        refalrts::bracket_pointers(context[35], context[36]);
        context[37] = refalrts::ident_left( identifiers[ident_Sentences], context[29], context[30] );
        if( ! context[37] )
          continue;
        // closed e.4 as range 33
        // closed e.5 as range 29
        //DEBUG: e.: 23
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27
        //DEBUG: s.ScopeClass: 32
        //DEBUG: e.4: 33
        //DEBUG: e.5: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </38 & DoMapAccum$1=1@2/39 Tile{ AsIs: (/35 } Tile{ AsIs: e.Scanned/25 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/27 } )/40 Tile{ AsIs: </0 Reuse: & ExtractFuncLengths\1$1=1/4 AsIs: (/5 AsIs: e./23 AsIs: )/6 AsIs: (/9 } Tile{ AsIs: e.4/33 } Tile{ HalfReuse: )/31 AsIs: s.ScopeClass/32 } Tile{ HalfReuse: </36 HalfReuse: & Lenw/37 AsIs: e.5/29 HalfReuse: >/16 } >/41 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[38]);
        refalrts::alloc_name(vm, context[39], functions[efunc_gen_DoMapAccum_S1A1Z2]);
        refalrts::alloc_close_bracket(vm, context[40]);
        refalrts::alloc_close_call(vm, context[41]);
        refalrts::update_name(context[4], functions[efunc_gen_ExtractFuncLengths_L1S1A1]);
        refalrts::reinit_close_bracket(context[31]);
        refalrts::reinit_open_call(context[36]);
        refalrts::reinit_name(context[37], functions[efunc_Lenw]);
        refalrts::reinit_close_call(context[16]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[38] );
        refalrts::push_stack( vm, context[41] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[36] );
        refalrts::link_brackets( context[9], context[31] );
        refalrts::link_brackets( context[5], context[6] );
        refalrts::link_brackets( context[15], context[40] );
        refalrts::link_brackets( context[35], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[41] );
        res = refalrts::splice_evar( res, context[36], context[16] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        res = refalrts::splice_evar( res, context[0], context[9] );
        res = refalrts::splice_elem( res, context[40] );
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_evar( res, context[10], context[15] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[38], context[39] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@2/4 (/5 e./23 )/6 (/9 e.Scanned/25 )/10 t.Next/15 e.Tail/27 >/1
      context[23] = context[21];
      context[24] = context[22];
      context[25] = context[17];
      context[26] = context[18];
      context[27] = context[19];
      context[28] = context[20];
      // closed e. as range 23
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: t.Next: 15
      //DEBUG: e.: 23
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@2/4 AsIs: (/5 AsIs: e./23 AsIs: )/6 AsIs: (/9 } Tile{ AsIs: e.Scanned/25 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/27 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@2/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@2/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & ExtractFuncLengths\1*2/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_ExtractFuncLengths_L1D2]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@2/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@2/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@2/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & ExtractFuncLengths\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractFuncLengths_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z2("DoMapAccum@2", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z2);


static refalrts::FnResult func_gen_DoMapAccum_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@3/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@3/4 t.Acc/5 (/9 e.Scanned/11 )/10 t.Next/15 e.Tail/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Scanned as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail as range 13
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11
    //DEBUG: t.Next: 15
    //DEBUG: e.Tail: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@3/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/11 AsIs: )/10 } (/17 Tile{ AsIs: e.Tail/13 } )/18 </19 & ExtractExtractableFunctions=1\1/20 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_ExtractExtractableFunctions_A1L1]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@3/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@3/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@3/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & ExtractExtractableFunctions=1\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractExtractableFunctions_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z3("DoMapAccum@3", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z3);


static refalrts::FnResult func_gen_Map_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Map@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@3/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@3/4 (/7 s.Label/13 e.0/11 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.Tail as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.0 as range 11
      //DEBUG: e.Tail: 9
      //DEBUG: s.Label: 13
      //DEBUG: e.0: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=12\1=1/4 AsIs: (/7 } Tile{ AsIs: e.0/11 } )/14 '$'/15 </16 & Upper/17 </18 & Explode/19 Tile{ AsIs: s.Label/13 } >/20 >/21 >/22 </23 Tile{ HalfReuse: & Map@3/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[14]);
      refalrts::alloc_char(vm, context[15], '$');
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_Upper]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_Explode]);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A12L1A1]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[7], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[20], context[23] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[14], context[19] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@3/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=12\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@3/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z3]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A12L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@3/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@3/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@3/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & UpdateDriveInfo=12\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A12L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z3("Map@3", COOKIE1_, COOKIE2_, func_gen_Map_Z3);


static refalrts::FnResult func_gen_Map_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Map@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@4/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@4/4 (/7 s.Hash/13 e.0/11 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.Tail as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.0 as range 11
      //DEBUG: e.Tail: 9
      //DEBUG: s.Hash: 13
      //DEBUG: e.0: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} & Map@4/4 (/7 s.Hash/13 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.0/11 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@4/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@4/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & HashSet-AsChain\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@4/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z4]);
    refalrts::update_name(context[4], functions[efunc_gen_HashSetm_AsChain_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@4/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@4/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@4/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & HashSet-AsChain\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_HashSetm_AsChain_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z4("Map@4", COOKIE1_, COOKIE2_, func_gen_Map_Z4);


static refalrts::FnResult func_gen_DoMapAccum_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 43 elems
  refalrts::Iter context[43];
  refalrts::zeros( context, 43 );
  // </0 & DoMapAccum@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@4/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@4/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@4/4 (/5 e.new8/21 )/6 (/9 e.new11/17 )/10 t.new9/15 e.new10/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      // closed e.new8 as range 21
      // closed e.new11 as range 17
      // closed e.new10 as range 19
      do {
        // </0 & DoMapAccum@4/4 (/5 e./23 )/6 (/9 e.Scanned/25 )/10 (/15 # Function/31 s.ScopeClass/32 (/35 e.4/33 )/36 # Metatable/37 e.5/29 )/16 e.Tail/27 >/1
        context[23] = context[21];
        context[24] = context[22];
        context[25] = context[17];
        context[26] = context[18];
        context[27] = context[19];
        context[28] = context[20];
        context[29] = 0;
        context[30] = 0;
        if( ! refalrts::brackets_term( context[29], context[30], context[15] ) )
          continue;
        context[31] = refalrts::ident_left( identifiers[ident_Function], context[29], context[30] );
        if( ! context[31] )
          continue;
        // closed e. as range 23
        // closed e.Scanned as range 25
        // closed e.Tail as range 27
        if( ! refalrts::svar_left( context[32], context[29], context[30] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        context[35] = refalrts::brackets_left( context[33], context[34], context[29], context[30] );
        if( ! context[35] )
          continue;
        refalrts::bracket_pointers(context[35], context[36]);
        context[37] = refalrts::ident_left( identifiers[ident_Metatable], context[29], context[30] );
        if( ! context[37] )
          continue;
        // closed e.4 as range 33
        // closed e.5 as range 29
        //DEBUG: e.: 23
        //DEBUG: e.Scanned: 25
        //DEBUG: e.Tail: 27
        //DEBUG: s.ScopeClass: 32
        //DEBUG: e.4: 33
        //DEBUG: e.5: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@4/4 AsIs: (/5 AsIs: e./23 HalfReuse: (/6 HalfReuse: # Metatable/9 } e.4/33/38 )/40 Tile{ AsIs: )/10 } (/41 Tile{ AsIs: e.Scanned/25 } Tile{ AsIs: (/15 AsIs: # Function/31 AsIs: s.ScopeClass/32 AsIs: (/35 AsIs: e.4/33 AsIs: )/36 AsIs: # Metatable/37 AsIs: e.5/29 AsIs: )/16 } )/42 Tile{ AsIs: e.Tail/27 } Tile{ AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[38], context[39], context[33], context[34]);
        refalrts::alloc_close_bracket(vm, context[40]);
        refalrts::alloc_open_bracket(vm, context[41]);
        refalrts::alloc_close_bracket(vm, context[42]);
        refalrts::reinit_open_bracket(context[6]);
        refalrts::reinit_ident(context[9], identifiers[ident_Metatable]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[41], context[42] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[35], context[36] );
        refalrts::link_brackets( context[5], context[10] );
        refalrts::link_brackets( context[6], context[40] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[27], context[28] );
        res = refalrts::splice_elem( res, context[42] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_elem( res, context[41] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_elem( res, context[40] );
        res = refalrts::splice_evar( res, context[38], context[39] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@4/4 (/5 e./23 )/6 (/9 e.Scanned/25 )/10 t.Next/15 e.Tail/27 >/1
      context[23] = context[21];
      context[24] = context[22];
      context[25] = context[17];
      context[26] = context[18];
      context[27] = context[19];
      context[28] = context[20];
      // closed e. as range 23
      // closed e.Scanned as range 25
      // closed e.Tail as range 27
      //DEBUG: t.Next: 15
      //DEBUG: e.: 23
      //DEBUG: e.Scanned: 25
      //DEBUG: e.Tail: 27

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@4/4 AsIs: (/5 AsIs: e./23 AsIs: )/6 AsIs: (/9 } Tile{ AsIs: e.Scanned/25 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/27 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[27], context[28] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@4/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@4/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & ExtractMetatableNames\1*2/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_ExtractMetatableNames_L1D2]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@4/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@4/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@4/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & ExtractMetatableNames\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractMetatableNames_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z4("DoMapAccum@4", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z4);


static refalrts::FnResult func_gen_DoExtractLabels_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & DoExtractLabels@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & DoExtractLabels@1/4 e.AST-B/7 (/13 # Intrinsic/15 e.Name/11 )/14 e.AST-E/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Intrinsic], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e.Name as range 11
      // closed e.AST-E as range 9
      //DEBUG: e.AST-B: 7
      //DEBUG: e.Name: 11
      //DEBUG: e.AST-E: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoExtractLabels@5/4 } (/16 Tile{ AsIs: (/13 AsIs: # Intrinsic/15 AsIs: e.Name/11 AsIs: )/14 } )/17 (/18 Tile{ AsIs: e.AST-B/7 } )/19 Tile{ AsIs: e.AST-E/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[16]);
      refalrts::alloc_close_bracket(vm, context[17]);
      refalrts::alloc_open_bracket(vm, context[18]);
      refalrts::alloc_close_bracket(vm, context[19]);
      refalrts::update_name(context[4], functions[efunc_gen_DoExtractLabels_Z5]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_elem( res, context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoExtractLabels@1/4 e.AST/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.AST as range 5
    //DEBUG: e.AST: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: )/4 } Tile{ AsIs: e.AST/5 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoExtractLabels@1/4 e.dyn2/2 >/1
  // closed e.dyn2 as range 2
  //DEBUG: e.dyn2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DoExtractLabels@0/6 # Intrinsic/7 (/8 )/9 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.dyn2/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoExtractLabels_Z0]);
  refalrts::alloc_ident(vm, context[7], identifiers[ident_Intrinsic]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoExtractLabels_Z1("DoExtractLabels@1", COOKIE1_, COOKIE2_, func_gen_DoExtractLabels_Z1);


static refalrts::FnResult func_gen_DoExtractLabels_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & DoExtractLabels@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & DoExtractLabels@2/4 e.AST-B/7 (/13 # Inline/15 e.Name/11 )/14 e.AST-E/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Inline], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e.Name as range 11
      // closed e.AST-E as range 9
      //DEBUG: e.AST-B: 7
      //DEBUG: e.Name: 11
      //DEBUG: e.AST-E: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoExtractLabels@6/4 } (/16 Tile{ AsIs: (/13 AsIs: # Inline/15 AsIs: e.Name/11 AsIs: )/14 } )/17 (/18 Tile{ AsIs: e.AST-B/7 } )/19 Tile{ AsIs: e.AST-E/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[16]);
      refalrts::alloc_close_bracket(vm, context[17]);
      refalrts::alloc_open_bracket(vm, context[18]);
      refalrts::alloc_close_bracket(vm, context[19]);
      refalrts::update_name(context[4], functions[efunc_gen_DoExtractLabels_Z6]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_elem( res, context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoExtractLabels@2/4 e.AST/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.AST as range 5
    //DEBUG: e.AST: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: )/4 } Tile{ AsIs: e.AST/5 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoExtractLabels@2/4 e.dyn2/2 >/1
  // closed e.dyn2 as range 2
  //DEBUG: e.dyn2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DoExtractLabels@0/6 # Inline/7 (/8 )/9 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.dyn2/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoExtractLabels_Z0]);
  refalrts::alloc_ident(vm, context[7], identifiers[ident_Inline]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoExtractLabels_Z2("DoExtractLabels@2", COOKIE1_, COOKIE2_, func_gen_DoExtractLabels_Z2);


static refalrts::FnResult func_gen_DoExtractLabels_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & DoExtractLabels@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & DoExtractLabels@3/4 e.AST-B/7 (/13 # Drive/15 e.Name/11 )/14 e.AST-E/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      context[13] = refalrts::brackets_left( context[11], context[12], context[9], context[10] );
      if( ! context[13] )
        continue;
      refalrts::bracket_pointers(context[13], context[14]);
      context[15] = refalrts::ident_left( identifiers[ident_Drive], context[11], context[12] );
      if( ! context[15] )
        continue;
      // closed e.Name as range 11
      // closed e.AST-E as range 9
      //DEBUG: e.AST-B: 7
      //DEBUG: e.Name: 11
      //DEBUG: e.AST-E: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoExtractLabels@7/4 } (/16 Tile{ AsIs: (/13 AsIs: # Drive/15 AsIs: e.Name/11 AsIs: )/14 } )/17 (/18 Tile{ AsIs: e.AST-B/7 } )/19 Tile{ AsIs: e.AST-E/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[16]);
      refalrts::alloc_close_bracket(vm, context[17]);
      refalrts::alloc_open_bracket(vm, context[18]);
      refalrts::alloc_close_bracket(vm, context[19]);
      refalrts::update_name(context[4], functions[efunc_gen_DoExtractLabels_Z7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[18], context[19] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::link_brackets( context[13], context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_elem( res, context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[7], context[8], context[5], context[6] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoExtractLabels@3/4 e.AST/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.AST as range 5
    //DEBUG: e.AST: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: )/4 } Tile{ AsIs: e.AST/5 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoExtractLabels@3/4 e.dyn2/2 >/1
  // closed e.dyn2 as range 2
  //DEBUG: e.dyn2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DoExtractLabels@0/6 # Drive/7 (/8 )/9 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.dyn2/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoExtractLabels_Z0]);
  refalrts::alloc_ident(vm, context[7], identifiers[ident_Drive]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoExtractLabels_Z3("DoExtractLabels@3", COOKIE1_, COOKIE2_, func_gen_DoExtractLabels_Z3);


static refalrts::FnResult func_gen_DoExtractLabels_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoExtractLabels@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoExtractLabels@4/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & DoExtractLabels@4/4 s.Label0/5 e.AST-B/8 (/14 s.Label0/16 e.Name/12 )/15 e.AST-E/10 >/1
    context[6] = context[2];
    context[7] = context[3];
    context[8] = 0;
    context[9] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[10] = context[6];
      context[11] = context[7];
      context[12] = 0;
      context[13] = 0;
      context[14] = refalrts::brackets_left( context[12], context[13], context[10], context[11] );
      if( ! context[14] )
        continue;
      refalrts::bracket_pointers(context[14], context[15]);
      if( ! refalrts::repeated_stvar_left( vm, context[16], context[5], context[12], context[13] ) )
        continue;
      // closed e.Name as range 12
      // closed e.AST-E as range 10
      //DEBUG: s.Label0: 5
      //DEBUG: e.AST-B: 8
      //DEBUG: e.Name: 12
      //DEBUG: e.AST-E: 10

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoExtractLabels/4 AsIs: s.Label0/5 } (/17 Tile{ AsIs: (/14 AsIs: s.Label0/16 AsIs: e.Name/12 AsIs: )/15 } )/18 (/19 Tile{ AsIs: e.AST-B/8 } )/20 Tile{ AsIs: e.AST-E/10 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[17]);
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::alloc_open_bracket(vm, context[19]);
      refalrts::alloc_close_bracket(vm, context[20]);
      refalrts::update_name(context[4], functions[efunc_DoExtractLabels]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[14], context[15] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[10], context[11] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[8], context[9] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_elem( res, context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[8], context[9], context[6], context[7] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoExtractLabels@4/4 s.Label0/5 e.AST/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    // closed e.AST as range 6
    //DEBUG: s.Label0: 5
    //DEBUG: e.AST: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Label0/5 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: )/4 } Tile{ AsIs: e.AST/6 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[6], context[7] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoExtractLabels@4/4 s.Label0/5 e.dyn2/2 >/1
  // closed e.dyn2 as range 2
  //DEBUG: s.Label0: 5
  //DEBUG: e.dyn2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoExtractLabels@0/4 AsIs: s.Label0/5 } (/6 )/7 (/8 )/9 Tile{ AsIs: e.dyn2/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[6]);
  refalrts::alloc_close_bracket(vm, context[7]);
  refalrts::alloc_open_bracket(vm, context[8]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::update_name(context[4], functions[efunc_gen_DoExtractLabels_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[8], context[9] );
  refalrts::link_brackets( context[6], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[6], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoExtractLabels_Z4("DoExtractLabels@4", COOKIE1_, COOKIE2_, func_gen_DoExtractLabels_Z4);


static refalrts::FnResult func_gen_MultiplyRemainderNames_A1L1A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & MultiplyRemainderNames=1\1=2@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & MultiplyRemainderNames=1\1=2@1/4 (/7 e.new1/5 )/8 s.new2/9 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & MultiplyRemainderNames=1\1=2@1/4 (/7 e.OptName/10 )/8 s.Label0/9 e.Lengths-B/14 (/20 e.OptName/22 s.SentencesCount/24 )/21 e.Lengths-E/16 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.OptName as range 10
    context[14] = 0;
    context[15] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[16] = context[12];
      context[17] = context[13];
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[16], context[17] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      if( ! refalrts::repeated_evar_left( vm, context[22], context[23], context[10], context[11], context[18], context[19] ) )
        continue;
      // closed e.Lengths-E as range 16
      if( ! refalrts::svar_left( context[24], context[18], context[19] ) )
        continue;
      if( ! refalrts::empty_seq( context[18], context[19] ) )
        continue;
      //DEBUG: s.Label0: 9
      //DEBUG: e.OptName: 10
      //DEBUG: e.Lengths-B: 14
      //DEBUG: e.Lengths-E: 16
      //DEBUG: s.SentencesCount: 24

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.Label0/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/25 Tile{ AsIs: e.Lengths-B/14 } Tile{ AsIs: (/20 AsIs: e.OptName/22 AsIs: s.SentencesCount/24 AsIs: )/21 AsIs: e.Lengths-E/16 HalfReuse: )/1 } Tile{ AsIs: </0 Reuse: & GenRemainderFuncNames@2/4 HalfReuse: s.Label09 /7 AsIs: e.OptName/10 HalfReuse: s.SentencesCount24 /8 } >/26 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[25]);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::update_name(context[4], functions[efunc_gen_GenRemainderFuncNames_Z2]);
      refalrts::reinit_svar( context[7], context[9] );
      refalrts::reinit_svar( context[8], context[24] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[25], context[1] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[20], context[1] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      res = refalrts::splice_elem( res, context[25] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[14], context[15], context[12], context[13] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & MultiplyRemainderNames=1\1=2@1/4 (/7 e.OptName/5 )/8 s.Label0/9 e.dyn/2 >/1
  // closed e.OptName as range 5
  // closed e.dyn as range 2
  //DEBUG: s.Label0: 9
  //DEBUG: e.OptName: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & MultiplyRemainderNames=1\1=2@0/4 AsIs: (/7 AsIs: e.OptName/5 AsIs: )/8 AsIs: s.Label0/9 } 0/10 Tile{ AsIs: e.dyn/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_number(vm, context[10], 0UL);
  refalrts::update_name(context[4], functions[efunc_gen_MultiplyRemainderNames_A1L1A2Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_MultiplyRemainderNames_A1L1A2Z1("MultiplyRemainderNames=1\\1=2@1", COOKIE1_, COOKIE2_, func_gen_MultiplyRemainderNames_A1L1A2Z1);


static refalrts::FnResult func_gen_Map_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Map@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@5/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@5/4 (/7 s.Label/13 e.0/11 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.Tail as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.0 as range 11
      //DEBUG: e.Tail: 9
      //DEBUG: s.Label: 13
      //DEBUG: e.0: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 } </14 & HashName/15 e.0/11/16 Tile{ HalfReuse: 101/4 HalfReuse: >/7 AsIs: s.Label/13 AsIs: e.0/11 AsIs: )/8 } </18 & Map@5/19 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[14]);
      refalrts::alloc_name(vm, context[15], functions[efunc_HashName]);
      refalrts::copy_evar(vm, context[16], context[17], context[11], context[12]);
      refalrts::alloc_open_call(vm, context[18]);
      refalrts::alloc_name(vm, context[19], functions[efunc_gen_Map_Z5]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 101UL);
      refalrts::reinit_close_call(context[7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[18] );
      refalrts::link_brackets( context[0], context[8] );
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[4], context[8] );
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@5/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & HashSet\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@5/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z5]);
    refalrts::update_name(context[4], functions[efunc_gen_HashSet_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@5/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@5/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@5/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & HashSet\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_HashSet_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z5("Map@5", COOKIE1_, COOKIE2_, func_gen_Map_Z5);


static refalrts::FnResult func_gen_DoHashSetm_DoFillBucket_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & DoHashSet-DoFillBucket@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoHashSet-DoFillBucket@1/4 (/7 e.new1/5 )/8 s.new2/9 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & DoHashSet-DoFillBucket@1/4 (/7 e.Names-OtherHash/14 (/20 s.Hash0/22 e.Name/18 )/21 e.UnscannedNames/16 )/8 s.Hash0/9 e.Name0/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.Name0 as range 12
    context[14] = 0;
    context[15] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[16] = context[10];
      context[17] = context[11];
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[16], context[17] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      if( ! refalrts::repeated_stvar_left( vm, context[22], context[9], context[18], context[19] ) )
        continue;
      // closed e.Name as range 18
      // closed e.UnscannedNames as range 16
      //DEBUG: s.Hash0: 9
      //DEBUG: e.Name0: 12
      //DEBUG: e.Names-OtherHash: 14
      //DEBUG: e.Name: 18
      //DEBUG: e.UnscannedNames: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Hash0/22 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Names-OtherHash/14 } Tile{ AsIs: </0 Reuse: & DoHashSet-DoFillBucket@2/4 } Tile{ HalfReuse: (/21 AsIs: e.UnscannedNames/16 AsIs: )/8 AsIs: s.Hash0/9 } Tile{ AsIs: (/20 } Tile{ AsIs: (/7 } Tile{ AsIs: e.Name0/12 } )/23 )/24 Tile{ AsIs: e.Name/18 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[23]);
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_DoHashSetm_DoFillBucket_Z2]);
      refalrts::reinit_open_bracket(context[21]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[20], context[24] );
      refalrts::link_brackets( context[7], context[23] );
      refalrts::link_brackets( context[21], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[12], context[13] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[21], context[9] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[14], context[15], context[10], context[11] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoHashSet-DoFillBucket@1/4 (/7 e.Names-OtherHash/10 )/8 s.Hash0/9 e.Name0/12 >/1
    context[10] = context[5];
    context[11] = context[6];
    context[12] = context[2];
    context[13] = context[3];
    // closed e.Names-OtherHash as range 10
    // closed e.Name0 as range 12
    //DEBUG: s.Hash0: 9
    //DEBUG: e.Names-OtherHash: 10
    //DEBUG: e.Name0: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Hash0/9 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Names-OtherHash/10 } Tile{ HalfReuse: (/0 HalfReuse: s.Hash09 /4 AsIs: (/7 } Tile{ AsIs: e.Name0/12 } Tile{ AsIs: )/8 } Tile{ HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_svar( context[4], context[9] );
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[12], context[13] );
    res = refalrts::splice_evar( res, context[0], context[7] );
    res = refalrts::splice_evar( res, context[10], context[11] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoHashSet-DoFillBucket@1/4 (/7 e.dyn0/5 )/8 s.Hash0/9 e.Name0/2 >/1
  // closed e.dyn0 as range 5
  // closed e.Name0 as range 2
  //DEBUG: s.Hash0: 9
  //DEBUG: e.dyn0: 5
  //DEBUG: e.Name0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & DoHashSet-DoFillBucket@0/7 AsIs: e.dyn0/5 HalfReuse: (/8 AsIs: s.Hash0/9 } Tile{ HalfReuse: (/0 } Tile{ AsIs: e.Name0/2 } )/10 )/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_name(context[7], functions[efunc_gen_DoHashSetm_DoFillBucket_Z0]);
  refalrts::reinit_open_bracket(context[8]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[4] );
  refalrts::link_brackets( context[8], context[11] );
  refalrts::link_brackets( context[0], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[0] );
  res = refalrts::splice_evar( res, context[4], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoHashSetm_DoFillBucket_Z1("DoHashSet-DoFillBucket@1", COOKIE1_, COOKIE2_, func_gen_DoHashSetm_DoFillBucket_Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@5/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@5/4 t.Acc/5 (/9 e.Scanned/11 )/10 t.Next/15 e.Tail/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Scanned as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail as range 13
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11
    //DEBUG: t.Next: 15
    //DEBUG: e.Tail: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@5/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/11 AsIs: )/10 } (/17 Tile{ AsIs: e.Tail/13 } )/18 </19 & DriveInlineOptimizerTick=5\1/20 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_DriveInlineOptimizerTick_A5L1]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@5/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@5/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@5/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & DriveInlineOptimizerTick=5\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A5L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z5("DoMapAccum@5", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z5);


static refalrts::FnResult func_gen_DoMapAccum_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@6/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@6/4 t.Acc/5 (/9 e.Scanned/11 )/10 t.Next/15 e.Tail/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Scanned as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail as range 13
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11
    //DEBUG: t.Next: 15
    //DEBUG: e.Tail: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@6/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/11 AsIs: )/10 } (/17 Tile{ AsIs: e.Tail/13 } )/18 </19 & DriveInlineOptimizerTick=4\1/20 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_DriveInlineOptimizerTick_A4L1]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z6]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@6/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@6/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@6/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & DriveInlineOptimizerTick=4\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A4L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z6("DoMapAccum@6", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z6);


static refalrts::FnResult func_gen_Reduce_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 72 elems
  refalrts::Iter context[72];
  refalrts::zeros( context, 72 );
  // </0 & Reduce@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@1/4 t.new1/5 t.new2/7 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Reduce@1/4 t.new4/5 t.new5/7 t.new6/11 e.new7/9 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[12] = refalrts::tvar_left( context[11], context[9], context[10] );
    if( ! context[12] )
      continue;
    // closed e.new7 as range 9
    do {
      // </0 & Reduce@1/4 t.new8/5 (/7 t.new9/25 (/23 e.new10/21 )/24 (/19 e.new11/17 )/20 )/8 t.new12/11 e.new13/13 >/1
      context[13] = context[9];
      context[14] = context[10];
      context[15] = 0;
      context[16] = 0;
      if( ! refalrts::brackets_term( context[15], context[16], context[7] ) )
        continue;
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_right( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_right( context[21], context[22], context[15], context[16] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      // closed e.new10 as range 21
      // closed e.new11 as range 17
      // closed e.new13 as range 13
      context[26] = refalrts::tvar_left( context[25], context[15], context[16] );
      if( ! context[26] )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      do {
        // </0 & Reduce@1/4 t.new14/5 (/7 t.new15/25 (/23 e.new16/27 )/24 (/19 e.new17/29 )/20 )/8 (/11 (/37 e.new18/35 )/38 (/41 e.new19/39 )/42 )/12 e.new20/31 >/1
        context[27] = context[21];
        context[28] = context[22];
        context[29] = context[17];
        context[30] = context[18];
        context[31] = context[13];
        context[32] = context[14];
        context[33] = 0;
        context[34] = 0;
        if( ! refalrts::brackets_term( context[33], context[34], context[11] ) )
          continue;
        context[35] = 0;
        context[36] = 0;
        context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
        if( ! context[37] )
          continue;
        refalrts::bracket_pointers(context[37], context[38]);
        context[39] = 0;
        context[40] = 0;
        context[41] = refalrts::brackets_left( context[39], context[40], context[33], context[34] );
        if( ! context[41] )
          continue;
        refalrts::bracket_pointers(context[41], context[42]);
        if( ! refalrts::empty_seq( context[33], context[34] ) )
          continue;
        // closed e.new16 as range 27
        // closed e.new17 as range 29
        // closed e.new18 as range 35
        // closed e.new19 as range 39
        // closed e.new20 as range 31
        do {
          // </0 & Reduce@1/4 (/5 s.DriveMode/55 s.IntrinsicMode/56 )/6 (/7 t./25 (/23 e.2/43 )/24 (/19 e.4/45 )/20 )/8 (/11 (/37 e.1/47 )/38 (/41 e.5/49 )/42 )/12 e.Tail/51 >/1
          context[43] = context[27];
          context[44] = context[28];
          context[45] = context[29];
          context[46] = context[30];
          context[47] = context[35];
          context[48] = context[36];
          context[49] = context[39];
          context[50] = context[40];
          context[51] = context[31];
          context[52] = context[32];
          context[53] = 0;
          context[54] = 0;
          if( ! refalrts::brackets_term( context[53], context[54], context[5] ) )
            continue;
          // closed e.2 as range 43
          // closed e.4 as range 45
          // closed e.1 as range 47
          // closed e.5 as range 49
          // closed e.Tail as range 51
          if( ! refalrts::svar_left( context[55], context[53], context[54] ) )
            continue;
          if( ! refalrts::svar_left( context[56], context[53], context[54] ) )
            continue;
          if( ! refalrts::empty_seq( context[53], context[54] ) )
            continue;
          //DEBUG: t.: 25
          //DEBUG: e.2: 43
          //DEBUG: e.4: 45
          //DEBUG: e.1: 47
          //DEBUG: e.5: 49
          //DEBUG: e.Tail: 51
          //DEBUG: s.DriveMode: 55
          //DEBUG: s.IntrinsicMode: 56

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </57 & Reduce$1=1@1/58 s.DriveMode/55/59 Tile{ HalfReuse: s.IntrinsicMode56 /42 HalfReuse: (/12 AsIs: e.Tail/51 HalfReuse: )/1 } </60 & OptFunction\1=1/61 Tile{ AsIs: (/23 AsIs: e.2/43 AsIs: )/24 AsIs: (/19 AsIs: e.4/45 AsIs: )/20 HalfReuse: </8 HalfReuse: & OptSentence$1=2/11 AsIs: (/37 AsIs: e.1/47 AsIs: )/38 } Tile{ AsIs: t./25 } Tile{ AsIs: (/41 } Tile{ AsIs: e.5/49 } Tile{ HalfReuse: )/0 HalfReuse: </4 HalfReuse: & OptSentence$1=2:1@1/5 AsIs: s.DriveMode/55 AsIs: s.IntrinsicMode/56 HalfReuse: </6 HalfReuse: & IsLexpr:1/7 } </62 & IsLexpr-Aux/63 e.1/47/64 >/66 >/67 >/68 >/69 >/70 >/71 Tile{ ]] }
          refalrts::alloc_open_call(vm, context[57]);
          refalrts::alloc_name(vm, context[58], functions[efunc_gen_Reduce_S1A1Z1]);
          refalrts::copy_stvar(vm, context[59], context[55]);
          refalrts::alloc_open_call(vm, context[60]);
          refalrts::alloc_name(vm, context[61], functions[efunc_gen_OptFunction_L1A1]);
          refalrts::alloc_open_call(vm, context[62]);
          refalrts::alloc_name(vm, context[63], functions[efunc_IsLexprm_Aux]);
          refalrts::copy_evar(vm, context[64], context[65], context[47], context[48]);
          refalrts::alloc_close_call(vm, context[66]);
          refalrts::alloc_close_call(vm, context[67]);
          refalrts::alloc_close_call(vm, context[68]);
          refalrts::alloc_close_call(vm, context[69]);
          refalrts::alloc_close_call(vm, context[70]);
          refalrts::alloc_close_call(vm, context[71]);
          refalrts::reinit_svar( context[42], context[56] );
          refalrts::reinit_open_bracket(context[12]);
          refalrts::reinit_close_bracket(context[1]);
          refalrts::reinit_open_call(context[8]);
          refalrts::reinit_name(context[11], functions[efunc_gen_OptSentence_S1A2]);
          refalrts::reinit_close_bracket(context[0]);
          refalrts::reinit_open_call(context[4]);
          refalrts::reinit_name(context[5], functions[efunc_gen_OptSentence_S1A2B1Z1]);
          refalrts::reinit_open_call(context[6]);
          refalrts::reinit_name(context[7], functions[efunc_gen_IsLexpr_B1]);
          refalrts::push_stack( vm, context[71] );
          refalrts::push_stack( vm, context[57] );
          refalrts::push_stack( vm, context[70] );
          refalrts::push_stack( vm, context[60] );
          refalrts::push_stack( vm, context[69] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[68] );
          refalrts::push_stack( vm, context[4] );
          refalrts::push_stack( vm, context[67] );
          refalrts::push_stack( vm, context[6] );
          refalrts::push_stack( vm, context[66] );
          refalrts::push_stack( vm, context[62] );
          refalrts::link_brackets( context[41], context[0] );
          refalrts::link_brackets( context[37], context[38] );
          refalrts::link_brackets( context[19], context[20] );
          refalrts::link_brackets( context[23], context[24] );
          refalrts::link_brackets( context[12], context[1] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[62], context[71] );
          res = refalrts::splice_evar( res, context[0], context[7] );
          res = refalrts::splice_evar( res, context[49], context[50] );
          res = refalrts::splice_elem( res, context[41] );
          res = refalrts::splice_evar( res, context[25], context[26] );
          res = refalrts::splice_evar( res, context[23], context[38] );
          res = refalrts::splice_evar( res, context[60], context[61] );
          res = refalrts::splice_evar( res, context[42], context[1] );
          res = refalrts::splice_evar( res, context[57], context[59] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Reduce@1/4 t.Mode/5 (/7 t./25 (/23 e.2/43 )/24 (/19 e.4/45 )/20 )/8 (/11 (/37 e.1/47 )/38 (/41 e.5/49 )/42 )/12 e.Tail/51 >/1
        context[43] = context[27];
        context[44] = context[28];
        context[45] = context[29];
        context[46] = context[30];
        context[47] = context[35];
        context[48] = context[36];
        context[49] = context[39];
        context[50] = context[40];
        context[51] = context[31];
        context[52] = context[32];
        // closed e.2 as range 43
        // closed e.4 as range 45
        // closed e.1 as range 47
        // closed e.5 as range 49
        // closed e.Tail as range 51
        //DEBUG: t.Mode: 5
        //DEBUG: t.: 25
        //DEBUG: e.2: 43
        //DEBUG: e.4: 45
        //DEBUG: e.1: 47
        //DEBUG: e.5: 49
        //DEBUG: e.Tail: 51

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@2/4 AsIs: t.Mode/5 AsIs: (/7 } Tile{ AsIs: e.Tail/51 } Tile{ AsIs: )/12 } </53 & OptFunction\1=1/54 Tile{ AsIs: (/23 AsIs: e.2/43 AsIs: )/24 AsIs: (/19 AsIs: e.4/45 AsIs: )/20 HalfReuse: </8 HalfReuse: & OptSentence$1=1*1/11 AsIs: (/37 AsIs: e.1/47 AsIs: )/38 } Tile{ AsIs: t./25 } Tile{ AsIs: (/41 AsIs: e.5/49 AsIs: )/42 } t.Mode/5/55 t.Mode/5/57 >/59 >/60 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[53]);
        refalrts::alloc_name(vm, context[54], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::copy_evar(vm, context[55], context[56], context[5], context[6]);
        refalrts::copy_evar(vm, context[57], context[58], context[5], context[6]);
        refalrts::alloc_close_call(vm, context[59]);
        refalrts::alloc_close_call(vm, context[60]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z2]);
        refalrts::reinit_open_call(context[8]);
        refalrts::reinit_name(context[11], functions[efunc_gen_OptSentence_S1A1D1]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[60] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[59] );
        refalrts::push_stack( vm, context[8] );
        refalrts::link_brackets( context[41], context[42] );
        refalrts::link_brackets( context[37], context[38] );
        refalrts::link_brackets( context[19], context[20] );
        refalrts::link_brackets( context[23], context[24] );
        refalrts::link_brackets( context[7], context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[55], context[60] );
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[23], context[38] );
        res = refalrts::splice_evar( res, context[53], context[54] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[51], context[52] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@1/4 t.Mode/5 (/7 t./25 (/23 e.2/27 )/24 (/19 e.4/29 )/20 )/8 t.Next/11 e.Tail/31 >/1
      context[27] = context[21];
      context[28] = context[22];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[13];
      context[32] = context[14];
      // closed e.2 as range 27
      // closed e.4 as range 29
      // closed e.Tail as range 31
      //DEBUG: t.Mode: 5
      //DEBUG: t.: 25
      //DEBUG: t.Next: 11
      //DEBUG: e.2: 27
      //DEBUG: e.4: 29
      //DEBUG: e.Tail: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@1/4 AsIs: t.Mode/5 AsIs: (/7 AsIs: t./25 AsIs: (/23 } Tile{ AsIs: e.2/27 } Tile{ AsIs: t.Next/11 } Tile{ AsIs: )/24 AsIs: (/19 AsIs: e.4/29 AsIs: )/20 AsIs: )/8 } Tile{ AsIs: e.Tail/31 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[24], context[8] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@1/4 t.Mode/5 t.Acc/7 t.Next/11 e.Tail/13 >/1
    context[13] = context[9];
    context[14] = context[10];
    // closed e.Tail as range 13
    //DEBUG: t.Mode: 5
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 11
    //DEBUG: e.Tail: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </15 & Reduce$1=1@2/16 t.Mode/5/17 (/19 Tile{ AsIs: e.Tail/13 } )/20 Tile{ AsIs: </0 Reuse: & OptFunction\1*1/4 AsIs: t.Mode/5 AsIs: t.Acc/7 AsIs: t.Next/11 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_Reduce_S1A1Z2]);
    refalrts::copy_evar(vm, context[17], context[18], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[15] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[19] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@1/4 t.Mode/5 t.Acc/7 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Mode: 5
    //DEBUG: t.Acc: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@1/4 t.Mode/5 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@1/4 t.Mode/5 t.accum/7 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.Mode: 5
  //DEBUG: t.accum: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@0/4 } [*]/9 & OptFunction\1@0/10 Tile{ AsIs: t.Mode/5 } {*}/11 Tile{ AsIs: t.accum/7 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[9]);
  refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[7];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z1("Reduce@1", COOKIE1_, COOKIE2_, func_gen_Reduce_Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & DoMapAccum@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@7/4 t.new1/5 t.new2/7 (/11 e.new3/9 )/12 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new3 as range 9
  // closed e.new4 as range 2
  do {
    // </0 & DoMapAccum@7/4 t.new5/5 t.new6/7 (/11 e.new9/13 )/12 t.new7/17 e.new8/15 >/1
    context[13] = context[9];
    context[14] = context[10];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.new9 as range 13
    context[18] = refalrts::tvar_left( context[17], context[15], context[16] );
    if( ! context[18] )
      continue;
    // closed e.new8 as range 15
    do {
      // </0 & DoMapAccum@7/4 t.Mode/5 t.Acc/7 (/11 e.Scanned/19 )/12 (/17 # Function/25 s.ScopeClass/26 (/29 e.3/27 )/30 # Sentences/31 e.4/23 )/18 e.Tail/21 >/1
      context[19] = context[13];
      context[20] = context[14];
      context[21] = context[15];
      context[22] = context[16];
      context[23] = 0;
      context[24] = 0;
      if( ! refalrts::brackets_term( context[23], context[24], context[17] ) )
        continue;
      context[25] = refalrts::ident_left( identifiers[ident_Function], context[23], context[24] );
      if( ! context[25] )
        continue;
      // closed e.Scanned as range 19
      // closed e.Tail as range 21
      if( ! refalrts::svar_left( context[26], context[23], context[24] ) )
        continue;
      context[27] = 0;
      context[28] = 0;
      context[29] = refalrts::brackets_left( context[27], context[28], context[23], context[24] );
      if( ! context[29] )
        continue;
      refalrts::bracket_pointers(context[29], context[30]);
      context[31] = refalrts::ident_left( identifiers[ident_Sentences], context[23], context[24] );
      if( ! context[31] )
        continue;
      // closed e.3 as range 27
      // closed e.4 as range 23
      //DEBUG: t.Mode: 5
      //DEBUG: t.Acc: 7
      //DEBUG: e.Scanned: 19
      //DEBUG: e.Tail: 21
      //DEBUG: s.ScopeClass: 26
      //DEBUG: e.3: 27
      //DEBUG: e.4: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@7/4 AsIs: t.Mode/5 } Tile{ AsIs: (/11 AsIs: e.Scanned/19 AsIs: )/12 AsIs: (/17 } Tile{ AsIs: e.Tail/21 } Tile{ AsIs: )/18 } </32 & OptFunction:1/33 (/34 e.4/23/35 Tile{ HalfReuse: )/25 AsIs: s.ScopeClass/26 AsIs: (/29 AsIs: e.3/27 AsIs: )/30 HalfReuse: </31 } & Reduce@1/37 t.Mode/5/38 (/40 Tile{ AsIs: t.Acc/7 } (/41 )/42 (/43 )/44 )/45 Tile{ AsIs: e.4/23 } >/46 >/47 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[32]);
      refalrts::alloc_name(vm, context[33], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[34]);
      refalrts::copy_evar(vm, context[35], context[36], context[23], context[24]);
      refalrts::alloc_name(vm, context[37], functions[efunc_gen_Reduce_Z1]);
      refalrts::copy_evar(vm, context[38], context[39], context[5], context[6]);
      refalrts::alloc_open_bracket(vm, context[40]);
      refalrts::alloc_open_bracket(vm, context[41]);
      refalrts::alloc_close_bracket(vm, context[42]);
      refalrts::alloc_open_bracket(vm, context[43]);
      refalrts::alloc_close_bracket(vm, context[44]);
      refalrts::alloc_close_bracket(vm, context[45]);
      refalrts::alloc_close_call(vm, context[46]);
      refalrts::alloc_close_call(vm, context[47]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z7]);
      refalrts::reinit_close_bracket(context[25]);
      refalrts::reinit_open_call(context[31]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[46] );
      refalrts::push_stack( vm, context[31] );
      refalrts::link_brackets( context[40], context[45] );
      refalrts::link_brackets( context[43], context[44] );
      refalrts::link_brackets( context[41], context[42] );
      refalrts::link_brackets( context[29], context[30] );
      refalrts::link_brackets( context[34], context[25] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[11], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[46], context[47] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[41], context[45] );
      res = refalrts::splice_evar( res, context[7], context[8] );
      res = refalrts::splice_evar( res, context[37], context[40] );
      res = refalrts::splice_evar( res, context[25], context[31] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[32], context[34] );
      res = refalrts::splice_elem( res, context[18] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[11], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@7/4 t.Mode/5 t.Acc/7 (/11 e.Scanned/19 )/12 t.Next/17 e.Tail/21 >/1
    context[19] = context[13];
    context[20] = context[14];
    context[21] = context[15];
    context[22] = context[16];
    // closed e.Scanned as range 19
    // closed e.Tail as range 21
    //DEBUG: t.Mode: 5
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 17
    //DEBUG: e.Scanned: 19
    //DEBUG: e.Tail: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@7/4 AsIs: t.Mode/5 AsIs: t.Acc/7 AsIs: (/11 } Tile{ AsIs: e.Scanned/19 } Tile{ AsIs: t.Next/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail/21 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@7/4 t.Mode/5 t.Acc/7 (/11 e.Scanned/13 )/12 >/1
    context[13] = context[9];
    context[14] = context[10];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 13
    //DEBUG: t.Mode: 5
    //DEBUG: t.Acc: 7
    //DEBUG: e.Scanned: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@7/4 t.Mode/5 {REMOVED TILE} (/11 {REMOVED TILE} )/12 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ AsIs: e.Scanned/13 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@7/4 t.Mode/5 t.acc/7 (/11 e.scanned/9 )/12 e.items/2 >/1
  // closed e.scanned as range 9
  // closed e.items as range 2
  //DEBUG: t.Mode: 5
  //DEBUG: t.acc: 7
  //DEBUG: e.scanned: 9
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@0/4 } [*]/13 & DriveInlineOptimizerTick=3\1@0/14 Tile{ AsIs: t.Mode/5 } {*}/15 Tile{ AsIs: t.acc/7 AsIs: (/11 AsIs: e.scanned/9 AsIs: )/12 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[15], context[13]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[7];
  res = refalrts::splice_elem( res, context[15] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  refalrts::use( res );
  refalrts::wrap_closure( context[15] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z7("DoMapAccum@7", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z7);


static refalrts::FnResult func_gen_DoMapAccum_Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & DoMapAccum@8/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@8/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@8/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@8/4 (/5 # Metatables/23 e.new8/21 )/6 (/9 e.new11/17 )/10 t.new9/15 e.new10/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Metatables], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.new8 as range 21
      // closed e.new11 as range 17
      // closed e.new10 as range 19
      do {
        // </0 & DoMapAccum@8/4 (/5 # Metatables/23 e.1/24 )/6 (/9 e.Scanned/26 )/10 (/15 # Metatable/32 e.2/30 )/16 e.Tail/28 >/1
        context[24] = context[21];
        context[25] = context[22];
        context[26] = context[17];
        context[27] = context[18];
        context[28] = context[19];
        context[29] = context[20];
        context[30] = 0;
        context[31] = 0;
        if( ! refalrts::brackets_term( context[30], context[31], context[15] ) )
          continue;
        context[32] = refalrts::ident_left( identifiers[ident_Metatable], context[30], context[31] );
        if( ! context[32] )
          continue;
        // closed e.1 as range 24
        // closed e.Scanned as range 26
        // closed e.2 as range 30
        // closed e.Tail as range 28
        //DEBUG: e.1: 24
        //DEBUG: e.Scanned: 26
        //DEBUG: e.2: 30
        //DEBUG: e.Tail: 28

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@8/4 AsIs: (/5 AsIs: # Metatables/23 AsIs: e.1/24 HalfReuse: (/6 } e.2/30/33 )/35 Tile{ AsIs: )/10 } Tile{ AsIs: (/9 } Tile{ AsIs: e.Scanned/26 } Tile{ AsIs: (/15 AsIs: # Metatable/32 AsIs: e.2/30 AsIs: )/16 } )/36 Tile{ AsIs: e.Tail/28 } Tile{ AsIs: >/1 ]] }
        refalrts::copy_evar(vm, context[33], context[34], context[30], context[31]);
        refalrts::alloc_close_bracket(vm, context[35]);
        refalrts::alloc_close_bracket(vm, context[36]);
        refalrts::reinit_open_bracket(context[6]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[9], context[36] );
        refalrts::link_brackets( context[15], context[16] );
        refalrts::link_brackets( context[5], context[10] );
        refalrts::link_brackets( context[6], context[35] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[28], context[29] );
        res = refalrts::splice_elem( res, context[36] );
        res = refalrts::splice_evar( res, context[15], context[16] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_elem( res, context[35] );
        res = refalrts::splice_evar( res, context[33], context[34] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@8/4 (/5 # Metatables/23 e.0/24 )/6 (/9 e.Scanned/26 )/10 t.Next/15 e.Tail/28 >/1
      context[24] = context[21];
      context[25] = context[22];
      context[26] = context[17];
      context[27] = context[18];
      context[28] = context[19];
      context[29] = context[20];
      // closed e.0 as range 24
      // closed e.Scanned as range 26
      // closed e.Tail as range 28
      //DEBUG: t.Next: 15
      //DEBUG: e.0: 24
      //DEBUG: e.Scanned: 26
      //DEBUG: e.Tail: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@8/4 AsIs: (/5 AsIs: # Metatables/23 AsIs: e.0/24 AsIs: )/6 AsIs: (/9 } Tile{ AsIs: e.Scanned/26 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/28 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@8/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@8/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & WithMetatables\1*2/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_WithMetatables_L1D2]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@8/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@8/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@8/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & WithMetatables\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_WithMetatables_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z8("DoMapAccum@8", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z8);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DriveInlineOptimizerTick=2@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@1/4 (/7 e.AST0/9 )/8 t.OptInfo/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0: 9
    //DEBUG: t.OptInfo: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@10/8 AsIs: t.OptInfo/13 } (/15 )/16 Tile{ AsIs: e.AST0/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@1/4 (/7 e.AST0/5 )/8 e.dyn/2 >/1
  // closed e.AST0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.AST0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # Drive/12 Tile{ HalfReuse: # Drive/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Drive]);
  refalrts::reinit_ident(context[0], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z1("DriveInlineOptimizerTick=2@1", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z1);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DriveInlineOptimizerTick=2@2/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@2/4 (/7 e.AST0/9 )/8 t.OptInfo/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0: 9
    //DEBUG: t.OptInfo: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@11/8 AsIs: t.OptInfo/13 } (/15 )/16 Tile{ AsIs: e.AST0/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@2/4 (/7 e.AST0/5 )/8 e.dyn/2 >/1
  // closed e.AST0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.AST0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # Drive/12 Tile{ HalfReuse: # Inline/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Drive]);
  refalrts::reinit_ident(context[0], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z2("DriveInlineOptimizerTick=2@2", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z2);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DriveInlineOptimizerTick=2@3/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@3/4 (/7 e.AST0/9 )/8 t.OptInfo/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0: 9
    //DEBUG: t.OptInfo: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@12/8 AsIs: t.OptInfo/13 } (/15 )/16 Tile{ AsIs: e.AST0/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@3/4 (/7 e.AST0/5 )/8 e.dyn/2 >/1
  // closed e.AST0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.AST0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # Drive/12 Tile{ HalfReuse: # Intrinsic/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Drive]);
  refalrts::reinit_ident(context[0], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z3("DriveInlineOptimizerTick=2@3", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z3);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DriveInlineOptimizerTick=2@4/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@4/4 (/7 e.AST0/9 )/8 t.OptInfo/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0: 9
    //DEBUG: t.OptInfo: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@13/8 AsIs: t.OptInfo/13 } (/15 )/16 Tile{ AsIs: e.AST0/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@4/4 (/7 e.AST0/5 )/8 e.dyn/2 >/1
  // closed e.AST0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.AST0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # Drive/12 Tile{ HalfReuse: # None/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Drive]);
  refalrts::reinit_ident(context[0], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z4("DriveInlineOptimizerTick=2@4", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z4);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DriveInlineOptimizerTick=2@5/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@5/4 (/7 e.AST0/9 )/8 t.OptInfo/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0: 9
    //DEBUG: t.OptInfo: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@14/8 AsIs: t.OptInfo/13 } (/15 )/16 Tile{ AsIs: e.AST0/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z14]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@5/4 (/7 e.AST0/5 )/8 e.dyn/2 >/1
  // closed e.AST0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.AST0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # Inline/12 Tile{ HalfReuse: # Drive/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Inline]);
  refalrts::reinit_ident(context[0], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z5("DriveInlineOptimizerTick=2@5", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z5);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DriveInlineOptimizerTick=2@6/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@6/4 (/7 e.AST0/9 )/8 t.OptInfo/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0: 9
    //DEBUG: t.OptInfo: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@15/8 AsIs: t.OptInfo/13 } (/15 )/16 Tile{ AsIs: e.AST0/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@6/4 (/7 e.AST0/5 )/8 e.dyn/2 >/1
  // closed e.AST0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.AST0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # Inline/12 Tile{ HalfReuse: # Inline/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Inline]);
  refalrts::reinit_ident(context[0], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z6("DriveInlineOptimizerTick=2@6", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z6);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DriveInlineOptimizerTick=2@7/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@7/4 (/7 e.AST0/9 )/8 t.OptInfo/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0: 9
    //DEBUG: t.OptInfo: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@16/8 AsIs: t.OptInfo/13 } (/15 )/16 Tile{ AsIs: e.AST0/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@7/4 (/7 e.AST0/5 )/8 e.dyn/2 >/1
  // closed e.AST0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.AST0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # Inline/12 Tile{ HalfReuse: # Intrinsic/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Inline]);
  refalrts::reinit_ident(context[0], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z7("DriveInlineOptimizerTick=2@7", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z7);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@8/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DriveInlineOptimizerTick=2@8/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@8/4 (/7 e.AST0/9 )/8 t.OptInfo/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0: 9
    //DEBUG: t.OptInfo: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@17/8 AsIs: t.OptInfo/13 } (/15 )/16 Tile{ AsIs: e.AST0/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@8/4 (/7 e.AST0/5 )/8 e.dyn/2 >/1
  // closed e.AST0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.AST0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # Inline/12 Tile{ HalfReuse: # None/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Inline]);
  refalrts::reinit_ident(context[0], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z8("DriveInlineOptimizerTick=2@8", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z8);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@9/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DriveInlineOptimizerTick=2@9/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@9/4 (/7 e.AST0/9 )/8 t.OptInfo/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0: 9
    //DEBUG: t.OptInfo: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@18/8 AsIs: t.OptInfo/13 } (/15 )/16 Tile{ AsIs: e.AST0/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z18]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@9/4 (/7 e.AST0/5 )/8 e.dyn/2 >/1
  // closed e.AST0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.AST0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # Intrinsic/12 Tile{ HalfReuse: # Drive/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Intrinsic]);
  refalrts::reinit_ident(context[0], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z9("DriveInlineOptimizerTick=2@9", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z9);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@10/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DriveInlineOptimizerTick=2@10/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@10/4 (/7 e.AST0/9 )/8 t.OptInfo/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0: 9
    //DEBUG: t.OptInfo: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@19/8 AsIs: t.OptInfo/13 } (/15 )/16 Tile{ AsIs: e.AST0/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z19]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@10/4 (/7 e.AST0/5 )/8 e.dyn/2 >/1
  // closed e.AST0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.AST0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # Intrinsic/12 Tile{ HalfReuse: # Inline/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Intrinsic]);
  refalrts::reinit_ident(context[0], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z10("DriveInlineOptimizerTick=2@10", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z10);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@11/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DriveInlineOptimizerTick=2@11/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@11/4 (/7 e.AST0/9 )/8 t.OptInfo/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0: 9
    //DEBUG: t.OptInfo: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@20/8 AsIs: t.OptInfo/13 } (/15 )/16 Tile{ AsIs: e.AST0/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z20]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@11/4 (/7 e.AST0/5 )/8 e.dyn/2 >/1
  // closed e.AST0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.AST0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # Intrinsic/12 Tile{ HalfReuse: # Intrinsic/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Intrinsic]);
  refalrts::reinit_ident(context[0], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z11("DriveInlineOptimizerTick=2@11", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z11);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@12/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DriveInlineOptimizerTick=2@12/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@12/4 (/7 e.AST0/9 )/8 t.OptInfo/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0: 9
    //DEBUG: t.OptInfo: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@21/8 AsIs: t.OptInfo/13 } (/15 )/16 Tile{ AsIs: e.AST0/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z21]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@12/4 (/7 e.AST0/5 )/8 e.dyn/2 >/1
  // closed e.AST0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.AST0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # Intrinsic/12 Tile{ HalfReuse: # None/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Intrinsic]);
  refalrts::reinit_ident(context[0], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z12("DriveInlineOptimizerTick=2@12", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z12);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@13/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DriveInlineOptimizerTick=2@13/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@13/4 (/7 e.AST0/9 )/8 t.OptInfo/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0: 9
    //DEBUG: t.OptInfo: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@22/8 AsIs: t.OptInfo/13 } (/15 )/16 Tile{ AsIs: e.AST0/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z22]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@13/4 (/7 e.AST0/5 )/8 e.dyn/2 >/1
  // closed e.AST0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.AST0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # None/12 Tile{ HalfReuse: # Drive/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_None]);
  refalrts::reinit_ident(context[0], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z13("DriveInlineOptimizerTick=2@13", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z13);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@14/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DriveInlineOptimizerTick=2@14/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@14/4 (/7 e.AST0/9 )/8 t.OptInfo/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0: 9
    //DEBUG: t.OptInfo: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@23/8 AsIs: t.OptInfo/13 } (/15 )/16 Tile{ AsIs: e.AST0/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@14/4 (/7 e.AST0/5 )/8 e.dyn/2 >/1
  // closed e.AST0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.AST0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # None/12 Tile{ HalfReuse: # Inline/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_None]);
  refalrts::reinit_ident(context[0], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z14("DriveInlineOptimizerTick=2@14", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z14);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@15/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DriveInlineOptimizerTick=2@15/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@15/4 (/7 e.AST0/9 )/8 t.OptInfo/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0: 9
    //DEBUG: t.OptInfo: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@24/8 AsIs: t.OptInfo/13 } (/15 )/16 Tile{ AsIs: e.AST0/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z24]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@15/4 (/7 e.AST0/5 )/8 e.dyn/2 >/1
  // closed e.AST0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.AST0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # None/12 Tile{ HalfReuse: # Intrinsic/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_None]);
  refalrts::reinit_ident(context[0], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z15("DriveInlineOptimizerTick=2@15", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z15);


static refalrts::FnResult func_gen_DriveInlineOptimizerTick_A2Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & DriveInlineOptimizerTick=2@16/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DriveInlineOptimizerTick=2@16/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & DriveInlineOptimizerTick=2@16/4 (/7 e.AST0/9 )/8 t.OptInfo/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.AST0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.AST0: 9
    //DEBUG: t.OptInfo: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DriveInlineOptimizerTick=3/4 HalfReuse: </7 } Tile{ HalfReuse: & DoMapAccum@25/8 AsIs: t.OptInfo/13 } (/15 )/16 Tile{ AsIs: e.AST0/9 } >/17 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A3]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_DoMapAccum_Z25]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[8], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DriveInlineOptimizerTick=2@16/4 (/7 e.AST0/5 )/8 e.dyn/2 >/1
  // closed e.AST0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.AST0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & DriveInlineOptimizerTick=2@0/10 (/11 # None/12 Tile{ HalfReuse: # None/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_DriveInlineOptimizerTick_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_None]);
  refalrts::reinit_ident(context[0], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[11], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DriveInlineOptimizerTick_A2Z16("DriveInlineOptimizerTick=2@16", COOKIE1_, COOKIE2_, func_gen_DriveInlineOptimizerTick_A2Z16);


static refalrts::FnResult func_gen_Map_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & Map@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@6/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@6/4 (/7 s.new3/13 e.new4/11 )/8 e.new5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new4 as range 11
      do {
        // </0 & Map@6/4 (/7 # Var/13 s.new6/18 e.new7/14 )/8 e.new8/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Var], context[13] ) )
          continue;
        // closed e.new8 as range 16
        if( ! refalrts::svar_left( context[18], context[14], context[15] ) )
          continue;
        // closed e.new7 as range 14
        do {
          // </0 & Map@6/4 (/7 # Var/13 'e'/18 e.1/19 )/8 e.Tail/21 >/1
          context[19] = context[14];
          context[20] = context[15];
          context[21] = context[16];
          context[22] = context[17];
          if( ! refalrts::char_term( 'e', context[18] ) )
            continue;
          // closed e.1 as range 19
          // closed e.Tail as range 21
          //DEBUG: e.1: 19
          //DEBUG: e.Tail: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: (/13 AsIs: 'e'/18 AsIs: e.1/19 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@6/4 } Tile{ AsIs: e.Tail/21 } Tile{ AsIs: >/1 ]] }
          refalrts::reinit_open_bracket(context[13]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[13], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[21], context[22] );
          res = refalrts::splice_evar( res, context[0], context[4] );
          res = refalrts::splice_evar( res, context[13], context[8] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & Map@6/4 (/7 # Var/13 't'/18 e.1/19 )/8 e.Tail/21 >/1
        context[19] = context[14];
        context[20] = context[15];
        context[21] = context[16];
        context[22] = context[17];
        if( ! refalrts::char_term( 't', context[18] ) )
          continue;
        // closed e.1 as range 19
        // closed e.Tail as range 21
        //DEBUG: e.1: 19
        //DEBUG: e.Tail: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} (/7 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: (/13 AsIs: 't'/18 AsIs: e.1/19 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@6/4 } Tile{ AsIs: e.Tail/21 } Tile{ AsIs: >/1 ]] }
        refalrts::reinit_open_bracket(context[13]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[13], context[8] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[13], context[8] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@6/4 (/7 # Brackets/13 e.0/14 )/8 e.Tail/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[13] ) )
          continue;
        // closed e.0 as range 14
        // closed e.Tail as range 16
        //DEBUG: e.0: 14
        //DEBUG: e.Tail: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & IsLexpr-Aux/4 } Tile{ AsIs: e.0/14 } Tile{ HalfReuse: >/7 HalfReuse: </13 } Tile{ HalfReuse: & Map@6/8 AsIs: e.Tail/16 AsIs: >/1 ]] }
        refalrts::update_name(context[4], functions[efunc_IsLexprm_Aux]);
        refalrts::reinit_close_call(context[7]);
        refalrts::reinit_open_call(context[13]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z6]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[7] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[7], context[13] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@6/4 (/7 # ADT-Brackets/13 (/20 e.2/18 )/21 e.1/14 )/8 e.Tail/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[13] ) )
        continue;
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[14], context[15] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      // closed e.2 as range 18
      // closed e.1 as range 14
      // closed e.Tail as range 16
      //DEBUG: e.2: 18
      //DEBUG: e.1: 14
      //DEBUG: e.Tail: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} e.2/18 )/21 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & IsLexpr-Aux/4 } Tile{ AsIs: e.1/14 } Tile{ HalfReuse: >/13 HalfReuse: </20 } Tile{ HalfReuse: & Map@6/8 AsIs: e.Tail/16 AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_IsLexprm_Aux]);
      refalrts::reinit_close_call(context[13]);
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z6]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[13], context[20] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::splice_to_freelist_open( vm, context[4], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@6/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} t.Next/7 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Map@6/4 } Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@6/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@6/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@6/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & IsLexpr-Aux$2\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_IsLexprm_Aux_S2L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z6("Map@6", COOKIE1_, COOKIE2_, func_gen_Map_Z6);


static refalrts::FnResult func_gen_Map_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 27 elems
  refalrts::Iter context[27];
  refalrts::zeros( context, 27 );
  // </0 & Map@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@7/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@7/4 (/7 (/15 e.1/13 )/16 e.2/11 (/19 e.3/17 )/20 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = 0;
      context[14] = 0;
      context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
      if( ! context[15] )
        continue;
      refalrts::bracket_pointers(context[15], context[16]);
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_right( context[17], context[18], context[11], context[12] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      // closed e.1 as range 13
      // closed e.2 as range 11
      // closed e.3 as range 17
      // closed e.Tail as range 9
      //DEBUG: e.1: 13
      //DEBUG: e.2: 11
      //DEBUG: e.3: 17
      //DEBUG: e.Tail: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: (/15 AsIs: e.1/13 AsIs: )/16 } Tile{ AsIs: </0 Reuse: & Map@11/4 } Tile{ AsIs: e.2/11 } >/21 Tile{ AsIs: (/19 } </22 & Map@10/23 Tile{ AsIs: e.3/17 } >/24 )/25 )/26 Tile{ HalfReuse: </20 HalfReuse: & Map@7/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[21]);
      refalrts::alloc_open_call(vm, context[22]);
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_Map_Z10]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::alloc_close_bracket(vm, context[25]);
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::update_name(context[4], functions[efunc_gen_Map_Z11]);
      refalrts::reinit_open_call(context[20]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z7]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[20] );
      refalrts::link_brackets( context[7], context[26] );
      refalrts::link_brackets( context[19], context[25] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[20];
      res = refalrts::splice_evar( res, context[24], context[26] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[22], context[23] );
      res = refalrts::splice_elem( res, context[19] );
      res = refalrts::splice_elem( res, context[21] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[7], context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@7/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CleanupCold-Sentence*1/4 AsIs: t.Next/7 } >/11 </12 & Map@7/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z7]);
    refalrts::update_name(context[4], functions[efunc_gen_CleanupColdm_Sentence_D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@7/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@7/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@7/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & CleanupCold-Sentence@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CleanupColdm_Sentence_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z7("Map@7", COOKIE1_, COOKIE2_, func_gen_Map_Z7);


static refalrts::FnResult func_gen_OptSentence_S1A2B1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & OptSentence$1=2:1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & OptSentence$1=2:1@1/4 s.new1/5 s.new2/6 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & OptSentence$1=2:1@1/4 s.new4/5 s.new5/6 s.new6/9 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::svar_left( context[9], context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    do {
      // </0 & OptSentence$1=2:1@1/4 s.DriveMode/5 s.IntrinsicMode0/6 # True/9 >/1
      if( ! refalrts::ident_term( identifiers[ident_True], context[9] ) )
        continue;
      //DEBUG: s.DriveMode: 5
      //DEBUG: s.IntrinsicMode0: 6

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: s.DriveMode/5 AsIs: s.IntrinsicMode0/6 HalfReuse: )/9 } Tile{ ]] }
      refalrts::reinit_open_bracket(context[4]);
      refalrts::reinit_close_bracket(context[9]);
      refalrts::link_brackets( context[4], context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[4], context[9] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1=2:1@1/4 s.DriveMode/5 s.IntrinsicMode0/6 # False/9 >/1
    if( ! refalrts::ident_term( identifiers[ident_False], context[9] ) )
      continue;
    //DEBUG: s.DriveMode: 5
    //DEBUG: s.IntrinsicMode0: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.DriveMode/5 s.IntrinsicMode0/6 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Inline/4 } Tile{ HalfReuse: s.IntrinsicMode06 /9 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
    refalrts::reinit_svar( context[9], context[6] );
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1=2:1@1/4 s.DriveMode/5 s.IntrinsicMode0/6 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: s.DriveMode: 5
  //DEBUG: s.IntrinsicMode0: 6
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1=2:1@0/4 } (/7 Tile{ AsIs: s.DriveMode/5 } s.IntrinsicMode0/6/8 )/9 Tile{ AsIs: s.IntrinsicMode0/6 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::copy_stvar(vm, context[8], context[6]);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1A2B1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[6];
  res = refalrts::splice_evar( res, context[8], context[9] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1A2B1Z1("OptSentence$1=2:1@1", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1A2B1Z1);


static refalrts::FnResult func_gen_Map_Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & Map@8/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map@8/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Map@8/4 (/7 e.new5/9 )/8 t.new3/13 e.new4/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.new5 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.new4 as range 11
    do {
      // </0 & Map@8/4 (/7 e.Left/15 )/8 (/13 e.0/19 (/23 e.1/21 )/24 )/14 e.Tail/17 >/1
      context[15] = context[9];
      context[16] = context[10];
      context[17] = context[11];
      context[18] = context[12];
      context[19] = 0;
      context[20] = 0;
      if( ! refalrts::brackets_term( context[19], context[20], context[13] ) )
        continue;
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_right( context[21], context[22], context[19], context[20] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      // closed e.Left as range 15
      // closed e.0 as range 19
      // closed e.1 as range 21
      // closed e.Tail as range 17
      //DEBUG: e.Left: 15
      //DEBUG: e.0: 19
      //DEBUG: e.1: 21
      //DEBUG: e.Tail: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/25 Tile{ AsIs: (/13 } </26 & ApplyContractions/27 e.Left/15/28 (/30 Tile{ AsIs: e.0/19 } )/31 >/32 )/33 Tile{ AsIs: (/23 AsIs: e.1/21 AsIs: )/24 AsIs: )/14 } Tile{ AsIs: </0 AsIs: & Map@8/4 AsIs: (/7 AsIs: e.Left/15 AsIs: )/8 } Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[25]);
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_ApplyContractions]);
      refalrts::copy_evar(vm, context[28], context[29], context[15], context[16]);
      refalrts::alloc_open_bracket(vm, context[30]);
      refalrts::alloc_close_bracket(vm, context[31]);
      refalrts::alloc_close_call(vm, context[32]);
      refalrts::alloc_close_bracket(vm, context[33]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[25], context[14] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::link_brackets( context[13], context[33] );
      refalrts::push_stack( vm, context[32] );
      refalrts::push_stack( vm, context[26] );
      refalrts::link_brackets( context[30], context[31] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[0], context[8] );
      res = refalrts::splice_evar( res, context[23], context[14] );
      res = refalrts::splice_evar( res, context[31], context[33] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[26], context[30] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_elem( res, context[25] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@8/4 (/7 e.Left/15 )/8 t.Next/13 e.Tail/17 >/1
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[12];
    // closed e.Left as range 15
    // closed e.Tail as range 17
    //DEBUG: t.Next: 13
    //DEBUG: e.Left: 15
    //DEBUG: e.Tail: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & OptSentence$1\1*1/4 AsIs: (/7 AsIs: e.Left/15 AsIs: )/8 AsIs: t.Next/13 } >/19 </20 & Map@8/21 (/22 e.Left/15/23 )/25 Tile{ AsIs: e.Tail/17 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_gen_Map_Z8]);
    refalrts::alloc_open_bracket(vm, context[22]);
    refalrts::copy_evar(vm, context[23], context[24], context[15], context[16]);
    refalrts::alloc_close_bracket(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[20] );
    refalrts::link_brackets( context[22], context[25] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[19], context[25] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@8/4 (/7 e.Left/9 )/8 >/1
    context[9] = context[5];
    context[10] = context[6];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Left as range 9
    //DEBUG: e.Left: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@8/4 (/7 e.Left/9 )/8 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@8/4 (/7 e.Left/5 )/8 e.items/2 >/1
  // closed e.Left as range 5
  // closed e.items as range 2
  //DEBUG: e.Left: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Map@0/10 Tile{ HalfReuse: [*]/0 Reuse: & OptSentence$1\1@0/4 AsIs: (/7 AsIs: e.Left/5 AsIs: )/8 } {*}/11 Tile{ AsIs: e.items/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Map_Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[11], context[0]);
  refalrts::reinit_closure_head(context[0]);
  refalrts::update_name(context[4], functions[efunc_gen_OptSentence_S1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[0], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  refalrts::wrap_closure( context[11] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z8("Map@8", COOKIE1_, COOKIE2_, func_gen_Map_Z8);


static refalrts::FnResult func_gen_Map_Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & Map@9/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@9/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@9/4 (/7 # Function/13 s.ScopeClass/14 (/17 e.3/15 )/18 # Sentences/19 e.4/11 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = refalrts::ident_left( identifiers[ident_Function], context[11], context[12] );
      if( ! context[13] )
        continue;
      // closed e.Tail as range 9
      if( ! refalrts::svar_left( context[14], context[11], context[12] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_left( context[15], context[16], context[11], context[12] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = refalrts::ident_left( identifiers[ident_Sentences], context[11], context[12] );
      if( ! context[19] )
        continue;
      // closed e.3 as range 15
      // closed e.4 as range 11
      //DEBUG: e.Tail: 9
      //DEBUG: s.ScopeClass: 14
      //DEBUG: e.3: 15
      //DEBUG: e.4: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Function/13 AsIs: s.ScopeClass/14 AsIs: (/17 AsIs: e.3/15 AsIs: )/18 AsIs: # Sentences/19 } Tile{ AsIs: </0 Reuse: & Map@7/4 } Tile{ AsIs: e.4/11 } >/20 )/21 </22 Tile{ HalfReuse: & Map@9/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::alloc_open_call(vm, context[22]);
      refalrts::update_name(context[4], functions[efunc_gen_Map_Z7]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z9]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[22] );
      refalrts::link_brackets( context[7], context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[20], context[22] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[7], context[19] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@9/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next/7 } Tile{ AsIs: </0 AsIs: & Map@9/4 } Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@9/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@9/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@9/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & OptTree-Drive-CleanupColdCalls\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_OptTreem_Drivem_CleanupColdCalls_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z9("Map@9", COOKIE1_, COOKIE2_, func_gen_Map_Z9);


static refalrts::FnResult func_gen_Map_Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & Map@10/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@10/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@10/4 (/7 s.new3/13 e.new4/11 )/8 e.new5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new4 as range 11
      do {
        // </0 & Map@10/4 (/7 # Brackets/13 e.0/14 )/8 e.Tail/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_Brackets], context[13] ) )
          continue;
        // closed e.0 as range 14
        // closed e.Tail as range 16
        //DEBUG: e.0: 14
        //DEBUG: e.Tail: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Brackets/4 HalfReuse: </7 HalfReuse: & Map@10/13 AsIs: e.0/14 HalfReuse: >/8 } )/18 </19 & Map@10/20 Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[18]);
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_gen_Map_Z10]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_Brackets]);
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[13], functions[efunc_gen_Map_Z10]);
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[19] );
        refalrts::link_brackets( context[0], context[18] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[7] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[18], context[20] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@10/4 (/7 # ADT-Brackets/13 (/20 e.2/18 )/21 e.1/14 )/8 e.Tail/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_ADTm_Brackets], context[13] ) )
          continue;
        context[18] = 0;
        context[19] = 0;
        context[20] = refalrts::brackets_left( context[18], context[19], context[14], context[15] );
        if( ! context[20] )
          continue;
        refalrts::bracket_pointers(context[20], context[21]);
        // closed e.2 as range 18
        // closed e.1 as range 14
        // closed e.Tail as range 16
        //DEBUG: e.2: 18
        //DEBUG: e.1: 14
        //DEBUG: e.Tail: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # ADT-Brackets/13 AsIs: (/20 AsIs: e.2/18 AsIs: )/21 } Tile{ AsIs: </0 AsIs: & Map@10/4 } Tile{ AsIs: e.1/14 } >/22 )/23 </24 Tile{ HalfReuse: & Map@10/8 AsIs: e.Tail/16 AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_close_bracket(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[7], context[23] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[20], context[21] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[8];
        res = refalrts::splice_evar( res, context[22], context[24] );
        res = refalrts::splice_evar( res, context[14], context[15] );
        res = refalrts::splice_evar( res, context[0], context[4] );
        res = refalrts::splice_evar( res, context[7], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@10/4 (/7 # CallBrackets/13 e.0/14 )/8 e.Tail/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_CallBrackets], context[13] ) )
          continue;
        // closed e.0 as range 14
        // closed e.Tail as range 16
        //DEBUG: e.0: 14
        //DEBUG: e.Tail: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # CallBrackets/4 HalfReuse: </7 HalfReuse: & Map@10/13 AsIs: e.0/14 HalfReuse: >/8 } )/18 </19 & Map@10/20 Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[18]);
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_gen_Map_Z10]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_ident(context[4], identifiers[ident_CallBrackets]);
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[13], functions[efunc_gen_Map_Z10]);
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[19] );
        refalrts::link_brackets( context[0], context[18] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[7] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[18], context[20] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@10/4 (/7 # ColdCallBrackets/13 e.0/14 )/8 e.Tail/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      if( ! refalrts::ident_term( identifiers[ident_ColdCallBrackets], context[13] ) )
        continue;
      // closed e.0 as range 14
      // closed e.Tail as range 16
      //DEBUG: e.0: 14
      //DEBUG: e.Tail: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # CallBrackets/4 HalfReuse: </7 HalfReuse: & Map@10/13 AsIs: e.0/14 HalfReuse: >/8 } )/18 </19 & Map@10/20 Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_gen_Map_Z10]);
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_CallBrackets]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[13], functions[efunc_gen_Map_Z10]);
      refalrts::reinit_close_call(context[8]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::link_brackets( context[0], context[18] );
      refalrts::push_stack( vm, context[8] );
      refalrts::push_stack( vm, context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[16], context[17] );
      res = refalrts::splice_evar( res, context[18], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@10/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Next/7 } Tile{ AsIs: </0 AsIs: & Map@10/4 } Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@10/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@10/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@10/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & CleanupCold-Term@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CleanupColdm_Term_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z10("Map@10", COOKIE1_, COOKIE2_, func_gen_Map_Z10);


static refalrts::FnResult func_gen_Map_Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & Map@11/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@11/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@11/4 (/7 # Condition/13 (/16 e.2/14 )/17 (/20 e.4/18 )/21 (/24 e.6/22 )/25 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      context[13] = refalrts::ident_left( identifiers[ident_Condition], context[11], context[12] );
      if( ! context[13] )
        continue;
      context[14] = 0;
      context[15] = 0;
      context[16] = refalrts::brackets_left( context[14], context[15], context[11], context[12] );
      if( ! context[16] )
        continue;
      refalrts::bracket_pointers(context[16], context[17]);
      context[18] = 0;
      context[19] = 0;
      context[20] = refalrts::brackets_left( context[18], context[19], context[11], context[12] );
      if( ! context[20] )
        continue;
      refalrts::bracket_pointers(context[20], context[21]);
      context[22] = 0;
      context[23] = 0;
      context[24] = refalrts::brackets_left( context[22], context[23], context[11], context[12] );
      if( ! context[24] )
        continue;
      refalrts::bracket_pointers(context[24], context[25]);
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      // closed e.2 as range 14
      // closed e.4 as range 18
      // closed e.6 as range 22
      // closed e.Tail as range 9
      //DEBUG: e.2: 14
      //DEBUG: e.4: 18
      //DEBUG: e.6: 22
      //DEBUG: e.Tail: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: # Condition/13 AsIs: (/16 AsIs: e.2/14 AsIs: )/17 AsIs: (/20 } </26 & Map@10/27 Tile{ AsIs: e.4/18 } >/28 Tile{ AsIs: )/21 AsIs: (/24 AsIs: e.6/22 AsIs: )/25 AsIs: )/8 } Tile{ AsIs: </0 AsIs: & Map@11/4 } Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[26]);
      refalrts::alloc_name(vm, context[27], functions[efunc_gen_Map_Z10]);
      refalrts::alloc_close_call(vm, context[28]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[24], context[25] );
      refalrts::link_brackets( context[20], context[21] );
      refalrts::push_stack( vm, context[28] );
      refalrts::push_stack( vm, context[26] );
      refalrts::link_brackets( context[16], context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[21], context[8] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_evar( res, context[7], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@11/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & CleanupCold-Sentence\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@11/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z11]);
    refalrts::update_name(context[4], functions[efunc_gen_CleanupColdm_Sentence_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@11/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@11/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@11/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & CleanupCold-Sentence\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CleanupColdm_Sentence_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z11("Map@11", COOKIE1_, COOKIE2_, func_gen_Map_Z11);


static refalrts::FnResult func_gen_Apply_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@3/4 t.new1/5 e.new2/2 t.new3/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply@3/4 s.Fn/5 e.X/9 t.X/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X as range 9
    //DEBUG: t.X: 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.X: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.X/9 AsIs: t.X/7 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@3/4 (/5 t.Closure/13 e.Bounded/11 )/6 e.X/9 t.X/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    // closed e.X as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded as range 11
    //DEBUG: t.X: 7
    //DEBUG: e.X: 9
    //DEBUG: t.Closure: 13
    //DEBUG: e.Bounded: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@3/4 } Tile{ AsIs: t.Closure/13 } Tile{ AsIs: e.Bounded/11 } Tile{ AsIs: e.X/9 } Tile{ AsIs: t.X/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@3/4 t.dyn0/5 e.X/2 t.X/7 >/1
  // closed e.X as range 2
  //DEBUG: t.dyn0: 5
  //DEBUG: t.X: 7
  //DEBUG: e.X: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: e.X/2 AsIs: t.X/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z3("Apply@3", COOKIE1_, COOKIE2_, func_gen_Apply_Z3);


static refalrts::FnResult func_gen_Apply_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Apply@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@4/4 t.new1/5 e.new2/2 t.new3/9 t.new4/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_right( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply@4/4 s.Fn/5 e.X/11 t.X/9 t.X0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X as range 11
    //DEBUG: t.X: 9
    //DEBUG: t.X0: 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.X: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.X/11 AsIs: t.X/9 AsIs: t.X0/7 HalfReuse: & $table/1 } >/13 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@4/4 (/5 t.Closure/15 e.Bounded/13 )/6 e.X/11 t.X/9 t.X0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
      continue;
    // closed e.X as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Bounded as range 13
    //DEBUG: t.X: 9
    //DEBUG: t.X0: 7
    //DEBUG: e.X: 11
    //DEBUG: t.Closure: 15
    //DEBUG: e.Bounded: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@4/4 } Tile{ AsIs: t.Closure/15 } Tile{ AsIs: e.Bounded/13 } Tile{ AsIs: e.X/11 } Tile{ AsIs: t.X/9 AsIs: t.X0/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@4/4 t.dyn0/5 e.X/2 t.X/9 t.X0/7 >/1
  // closed e.X as range 2
  //DEBUG: t.dyn0: 5
  //DEBUG: t.X: 9
  //DEBUG: t.X0: 7
  //DEBUG: e.X: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: e.X/2 AsIs: t.X/9 AsIs: t.X0/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z4("Apply@4", COOKIE1_, COOKIE2_, func_gen_Apply_Z4);


static refalrts::FnResult func_gen_UpdateDriveInfo_A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & UpdateDriveInfo=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & UpdateDriveInfo=1@1/4 (/9 e.Drives/7 )/10 e.AST$a/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    // closed e.Drives as range 7
    // closed e.AST$a as range 5
    //DEBUG: e.Drives: 7
    //DEBUG: e.AST$a: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=2@1/4 AsIs: (/9 AsIs: e.Drives/7 AsIs: )/10 } </11 & DoExtractLabels@2/12 Tile{ AsIs: e.AST$a/5 } >/13 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[11]);
    refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoExtractLabels_Z2]);
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A2Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[11] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=1@1/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & UpdateDriveInfo=1@0/6 (/7 )/8 (/9 Tile{ HalfReuse: 101/0 HalfReuse: )/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_UpdateDriveInfo_A1Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_close_bracket(vm, context[8]);
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::reinit_number(context[0], 101UL);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[9], context[4] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A1Z1("UpdateDriveInfo=1@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A1Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & DoMapAccum@9/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@9/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@9/4 t.Acc/5 (/9 e.Scanned/11 )/10 t.Next/15 e.Tail/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Scanned as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Tail as range 13
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11
    //DEBUG: t.Next: 15
    //DEBUG: e.Tail: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@9/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/11 AsIs: )/10 } (/17 Tile{ AsIs: e.Tail/13 } )/18 </19 & FormatOptFunctions=1\1/20 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_gen_FormatOptFunctions_A1L1]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[19] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[18], context[20] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[17] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@9/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@9/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@9/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & FormatOptFunctions=1\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FormatOptFunctions_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z9("DoMapAccum@9", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z9);


static refalrts::FnResult func_gen_UpdateDriveInfo_A21Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 55 elems
  refalrts::Iter context[55];
  refalrts::zeros( context, 55 );
  // </0 & UpdateDriveInfo=21@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UpdateDriveInfo=21@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 (/27 e.new6/25 )/28 (/31 e.new7/29 )/32 (/35 e.new8/33 )/36 e.new9/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  context[33] = 0;
  context[34] = 0;
  context[35] = refalrts::brackets_left( context[33], context[34], context[2], context[3] );
  if( ! context[35] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[35], context[36]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 25
  // closed e.new7 as range 29
  // closed e.new8 as range 33
  // closed e.new9 as range 2
  do {
    // </0 & UpdateDriveInfo=21@1/4 (/7 e.KnownFunctions0/37 )/8 (/11 e.OptFunctions0/39 )/12 (/15 e.AST$f0/41 )/16 (/19 e.KnownNames$a0/43 )/20 (/23 e.Drives$d/45 )/24 (/27 e.Inlines$c/47 )/28 (/31 e.Metatables$a/49 )/32 (/35 e.Intrinsics$a0/51 )/36 e.OptIntrinsicFuncs/53 >/1
    context[37] = context[5];
    context[38] = context[6];
    context[39] = context[9];
    context[40] = context[10];
    context[41] = context[13];
    context[42] = context[14];
    context[43] = context[17];
    context[44] = context[18];
    context[45] = context[21];
    context[46] = context[22];
    context[47] = context[25];
    context[48] = context[26];
    context[49] = context[29];
    context[50] = context[30];
    context[51] = context[33];
    context[52] = context[34];
    context[53] = context[2];
    context[54] = context[3];
    // closed e.KnownFunctions0 as range 37
    // closed e.OptFunctions0 as range 39
    // closed e.AST$f0 as range 41
    // closed e.KnownNames$a0 as range 43
    // closed e.Drives$d as range 45
    // closed e.Inlines$c as range 47
    // closed e.Metatables$a as range 49
    // closed e.Intrinsics$a0 as range 51
    // closed e.OptIntrinsicFuncs as range 53
    //DEBUG: e.KnownFunctions0: 37
    //DEBUG: e.OptFunctions0: 39
    //DEBUG: e.AST$f0: 41
    //DEBUG: e.KnownNames$a0: 43
    //DEBUG: e.Drives$d: 45
    //DEBUG: e.Inlines$c: 47
    //DEBUG: e.Metatables$a: 49
    //DEBUG: e.Intrinsics$a0: 51
    //DEBUG: e.OptIntrinsicFuncs: 53

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/36 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=22/4 AsIs: (/7 AsIs: e.KnownFunctions0/37 AsIs: )/8 AsIs: (/11 AsIs: e.OptFunctions0/39 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.OptIntrinsicFuncs/53 } Tile{ AsIs: )/32 AsIs: (/35 } Tile{ AsIs: e.AST$f0/41 } Tile{ AsIs: )/24 HalfReuse: 101/27 } Tile{ HalfReuse: </16 HalfReuse: & DoHashSet/19 } Tile{ HalfReuse: </28 HalfReuse: & Map@5/31 } Tile{ AsIs: e.KnownNames$a0/43 } Tile{ AsIs: e.Drives$d/45 } Tile{ AsIs: e.Inlines$c/47 } Tile{ AsIs: e.Metatables$a/49 } Tile{ AsIs: e.Intrinsics$a0/51 } Tile{ HalfReuse: >/20 HalfReuse: >/23 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A22]);
    refalrts::reinit_number(context[27], 101UL);
    refalrts::reinit_open_call(context[16]);
    refalrts::reinit_name(context[19], functions[efunc_DoHashSet]);
    refalrts::reinit_open_call(context[28]);
    refalrts::reinit_name(context[31], functions[efunc_gen_Map_Z5]);
    refalrts::reinit_close_call(context[20]);
    refalrts::reinit_close_call(context[23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[28] );
    refalrts::link_brackets( context[35], context[24] );
    refalrts::link_brackets( context[15], context[32] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[28], context[31] );
    res = refalrts::splice_evar( res, context[16], context[19] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[32], context[35] );
    res = refalrts::splice_evar( res, context[53], context[54] );
    refalrts::splice_to_freelist_open( vm, context[15], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=21@1/4 (/7 e.KnownFunctions0/5 )/8 (/11 e.OptFunctions0/9 )/12 (/15 e.AST$f0/13 )/16 (/19 e.KnownNames$a0/17 )/20 (/23 e.Drives$d/21 )/24 (/27 e.Inlines$c/25 )/28 (/31 e.Metatables$a/29 )/32 (/35 e.Intrinsics$a0/33 )/36 e.dyn/2 >/1
  // closed e.KnownFunctions0 as range 5
  // closed e.OptFunctions0 as range 9
  // closed e.AST$f0 as range 13
  // closed e.KnownNames$a0 as range 17
  // closed e.Drives$d as range 21
  // closed e.Inlines$c as range 25
  // closed e.Metatables$a as range 29
  // closed e.Intrinsics$a0 as range 33
  // closed e.dyn as range 2
  //DEBUG: e.KnownFunctions0: 5
  //DEBUG: e.OptFunctions0: 9
  //DEBUG: e.AST$f0: 13
  //DEBUG: e.KnownNames$a0: 17
  //DEBUG: e.Drives$d: 21
  //DEBUG: e.Inlines$c: 25
  //DEBUG: e.Metatables$a: 29
  //DEBUG: e.Intrinsics$a0: 33
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/24 (/27 {REMOVED TILE} )/28 (/31 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=21@0/4 AsIs: (/7 AsIs: e.KnownFunctions0/5 AsIs: )/8 AsIs: (/11 AsIs: e.OptFunctions0/9 AsIs: )/12 AsIs: (/15 AsIs: e.AST$f0/13 AsIs: )/16 AsIs: (/19 AsIs: e.KnownNames$a0/17 AsIs: )/20 AsIs: (/23 } Tile{ AsIs: e.Drives$d/21 } Tile{ AsIs: e.Inlines$c/25 } Tile{ AsIs: e.Metatables$a/29 } Tile{ AsIs: )/32 AsIs: (/35 AsIs: e.Intrinsics$a0/33 AsIs: )/36 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A21Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[35], context[36] );
  refalrts::link_brackets( context[23], context[32] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[32];
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  refalrts::splice_to_freelist_open( vm, context[23], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A21Z1("UpdateDriveInfo=21@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A21Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@1/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@1/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@1/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & MultiplyRemainderNames=1\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_MultiplyRemainderNames_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z1("DoMapAccum$1=1@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@2/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@2/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@2/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & ExtractFuncLengths\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractFuncLengths_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z2("DoMapAccum$1=1@2", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z2);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@3/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@3/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@3/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@3/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & ExtractExtractableFunctions=1\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractExtractableFunctions_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z3("DoMapAccum$1=1@3", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z3);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@4/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@4/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@4/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@4/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & ExtractMetatableNames\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_ExtractMetatableNames_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z4("DoMapAccum$1=1@4", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z4);


static refalrts::FnResult func_gen_DoExtractLabels_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & DoExtractLabels@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoExtractLabels@5/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoExtractLabels@5/4 (/7 e.X/13 )/8 (/11 e.X0/15 )/12 e.AST-B/19 (/25 # Intrinsic/27 e.Name/23 )/26 e.AST-E/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.X as range 13
    // closed e.X0 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_Intrinsic], context[23], context[24] );
      if( ! context[27] )
        continue;
      // closed e.Name as range 23
      // closed e.AST-E as range 21
      //DEBUG: e.X: 13
      //DEBUG: e.X0: 15
      //DEBUG: e.AST-B: 19
      //DEBUG: e.Name: 23
      //DEBUG: e.AST-E: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoExtractLabels@5/4 AsIs: (/7 AsIs: e.X/13 HalfReuse: (/8 HalfReuse: # Intrinsic/11 } Tile{ AsIs: e.Name/23 } Tile{ AsIs: )/12 } Tile{ HalfReuse: )/27 } Tile{ AsIs: (/25 } Tile{ AsIs: e.X0/15 } Tile{ AsIs: e.AST-B/19 } Tile{ AsIs: )/26 AsIs: e.AST-E/21 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_ident(context[11], identifiers[ident_Intrinsic]);
      refalrts::reinit_close_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[7], context[27] );
      refalrts::link_brackets( context[8], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[26];
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoExtractLabels@5/4 (/7 e.X/13 )/8 (/11 e.X0/15 )/12 e.AST/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.X as range 13
    // closed e.X0 as range 15
    // closed e.AST as range 17
    //DEBUG: e.X: 13
    //DEBUG: e.X0: 15
    //DEBUG: e.AST: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoExtractLabels@5/4 {REMOVED TILE} (/11 {REMOVED TILE} )/12 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.X/13 AsIs: )/8 } Tile{ AsIs: e.X0/15 } Tile{ AsIs: e.AST/17 } Tile{ ]] }
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoExtractLabels@5/4 (/7 e.X/5 )/8 (/11 e.X0/9 )/12 e.dyn2/2 >/1
  // closed e.X as range 5
  // closed e.X0 as range 9
  // closed e.dyn2 as range 2
  //DEBUG: e.X: 5
  //DEBUG: e.X0: 9
  //DEBUG: e.dyn2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoExtractLabels@0/0 HalfReuse: # Intrinsic/4 AsIs: (/7 AsIs: e.X/5 AsIs: )/8 AsIs: (/11 AsIs: e.X0/9 AsIs: )/12 AsIs: e.dyn2/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoExtractLabels_Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Intrinsic]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoExtractLabels_Z5("DoExtractLabels@5", COOKIE1_, COOKIE2_, func_gen_DoExtractLabels_Z5);


static refalrts::FnResult func_gen_DoExtractLabels_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & DoExtractLabels@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoExtractLabels@6/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoExtractLabels@6/4 (/7 e.X/13 )/8 (/11 e.X0/15 )/12 e.AST-B/19 (/25 # Inline/27 e.Name/23 )/26 e.AST-E/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.X as range 13
    // closed e.X0 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_Inline], context[23], context[24] );
      if( ! context[27] )
        continue;
      // closed e.Name as range 23
      // closed e.AST-E as range 21
      //DEBUG: e.X: 13
      //DEBUG: e.X0: 15
      //DEBUG: e.AST-B: 19
      //DEBUG: e.Name: 23
      //DEBUG: e.AST-E: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoExtractLabels@6/4 AsIs: (/7 AsIs: e.X/13 HalfReuse: (/8 HalfReuse: # Inline/11 } Tile{ AsIs: e.Name/23 } Tile{ AsIs: )/12 } Tile{ HalfReuse: )/27 } Tile{ AsIs: (/25 } Tile{ AsIs: e.X0/15 } Tile{ AsIs: e.AST-B/19 } Tile{ AsIs: )/26 AsIs: e.AST-E/21 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_ident(context[11], identifiers[ident_Inline]);
      refalrts::reinit_close_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[7], context[27] );
      refalrts::link_brackets( context[8], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[26];
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoExtractLabels@6/4 (/7 e.X/13 )/8 (/11 e.X0/15 )/12 e.AST/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.X as range 13
    // closed e.X0 as range 15
    // closed e.AST as range 17
    //DEBUG: e.X: 13
    //DEBUG: e.X0: 15
    //DEBUG: e.AST: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoExtractLabels@6/4 {REMOVED TILE} (/11 {REMOVED TILE} )/12 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.X/13 AsIs: )/8 } Tile{ AsIs: e.X0/15 } Tile{ AsIs: e.AST/17 } Tile{ ]] }
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoExtractLabels@6/4 (/7 e.X/5 )/8 (/11 e.X0/9 )/12 e.dyn2/2 >/1
  // closed e.X as range 5
  // closed e.X0 as range 9
  // closed e.dyn2 as range 2
  //DEBUG: e.X: 5
  //DEBUG: e.X0: 9
  //DEBUG: e.dyn2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoExtractLabels@0/0 HalfReuse: # Inline/4 AsIs: (/7 AsIs: e.X/5 AsIs: )/8 AsIs: (/11 AsIs: e.X0/9 AsIs: )/12 AsIs: e.dyn2/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoExtractLabels_Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoExtractLabels_Z6("DoExtractLabels@6", COOKIE1_, COOKIE2_, func_gen_DoExtractLabels_Z6);


static refalrts::FnResult func_gen_DoExtractLabels_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & DoExtractLabels@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoExtractLabels@7/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoExtractLabels@7/4 (/7 e.X/13 )/8 (/11 e.X0/15 )/12 e.AST-B/19 (/25 # Drive/27 e.Name/23 )/26 e.AST-E/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.X as range 13
    // closed e.X0 as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_Drive], context[23], context[24] );
      if( ! context[27] )
        continue;
      // closed e.Name as range 23
      // closed e.AST-E as range 21
      //DEBUG: e.X: 13
      //DEBUG: e.X0: 15
      //DEBUG: e.AST-B: 19
      //DEBUG: e.Name: 23
      //DEBUG: e.AST-E: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoExtractLabels@7/4 AsIs: (/7 AsIs: e.X/13 HalfReuse: (/8 HalfReuse: # Drive/11 } Tile{ AsIs: e.Name/23 } Tile{ AsIs: )/12 } Tile{ HalfReuse: )/27 } Tile{ AsIs: (/25 } Tile{ AsIs: e.X0/15 } Tile{ AsIs: e.AST-B/19 } Tile{ AsIs: )/26 AsIs: e.AST-E/21 AsIs: >/1 ]] }
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_ident(context[11], identifiers[ident_Drive]);
      refalrts::reinit_close_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[25], context[26] );
      refalrts::link_brackets( context[7], context[27] );
      refalrts::link_brackets( context[8], context[12] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[26];
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_elem( res, context[27] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoExtractLabels@7/4 (/7 e.X/13 )/8 (/11 e.X0/15 )/12 e.AST/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.X as range 13
    // closed e.X0 as range 15
    // closed e.AST as range 17
    //DEBUG: e.X: 13
    //DEBUG: e.X0: 15
    //DEBUG: e.AST: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoExtractLabels@7/4 {REMOVED TILE} (/11 {REMOVED TILE} )/12 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.X/13 AsIs: )/8 } Tile{ AsIs: e.X0/15 } Tile{ AsIs: e.AST/17 } Tile{ ]] }
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoExtractLabels@7/4 (/7 e.X/5 )/8 (/11 e.X0/9 )/12 e.dyn2/2 >/1
  // closed e.X as range 5
  // closed e.X0 as range 9
  // closed e.dyn2 as range 2
  //DEBUG: e.X: 5
  //DEBUG: e.X0: 9
  //DEBUG: e.dyn2: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoExtractLabels@0/0 HalfReuse: # Drive/4 AsIs: (/7 AsIs: e.X/5 AsIs: )/8 AsIs: (/11 AsIs: e.X0/9 AsIs: )/12 AsIs: e.dyn2/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoExtractLabels_Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Drive]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoExtractLabels_Z7("DoExtractLabels@7", COOKIE1_, COOKIE2_, func_gen_DoExtractLabels_Z7);


static refalrts::FnResult func_gen_GenRemainderFuncNames_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & GenRemainderFuncNames@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & GenRemainderFuncNames@2/4 s.new1/5 e.new2/2 s.new3/6 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_right( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & GenRemainderFuncNames@2/4 s.Label0/5 e.OptName/7 0/6 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::number_term( 0UL, context[6] ) )
      continue;
    // closed e.OptName as range 7
    //DEBUG: s.Label0: 5
    //DEBUG: e.OptName: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & GenRemainderFuncNames@2/4 s.Label0/5 e.OptName/7 0/6 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenRemainderFuncNames@2/4 s.Label0/5 e.OptName/7 1/6 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::number_term( 1UL, context[6] ) )
      continue;
    // closed e.OptName as range 7
    //DEBUG: s.Label0: 5
    //DEBUG: e.OptName: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: (/4 AsIs: s.Label0/5 AsIs: e.OptName/7 HalfReuse: )/6 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[4]);
    refalrts::reinit_close_bracket(context[6]);
    refalrts::link_brackets( context[4], context[6] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[4], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenRemainderFuncNames@2/4 s.Label0/5 e.OptName/7 s.End/6 >/1
    context[7] = context[2];
    context[8] = context[3];
    // closed e.OptName as range 7
    //DEBUG: s.Label0: 5
    //DEBUG: s.End: 6
    //DEBUG: e.OptName: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } (/9 s.Label0/5/10 Tile{ AsIs: e.OptName/7 } )/11 (/12 s.Label0/5/13 </14 & AddStarSuffix*1/15 e.OptName/7/16 1/18 >/19 )/20 Tile{ AsIs: </0 Reuse: & GenRemainderFuncNames/4 AsIs: s.Label0/5 } e.OptName/7/21 2/23 Tile{ AsIs: s.End/6 AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[9]);
    refalrts::copy_stvar(vm, context[10], context[5]);
    refalrts::alloc_close_bracket(vm, context[11]);
    refalrts::alloc_open_bracket(vm, context[12]);
    refalrts::copy_stvar(vm, context[13], context[5]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_gen_AddStarSuffix_D1]);
    refalrts::copy_evar(vm, context[16], context[17], context[7], context[8]);
    refalrts::alloc_number(vm, context[18], 1UL);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::copy_evar(vm, context[21], context[22], context[7], context[8]);
    refalrts::alloc_number(vm, context[23], 2UL);
    refalrts::update_name(context[4], functions[efunc_GenRemainderFuncNames]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[12], context[20] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[14] );
    refalrts::link_brackets( context[9], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[6];
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[0], context[5] );
    res = refalrts::splice_evar( res, context[11], context[20] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenRemainderFuncNames@2/4 s.Label0/5 e.OptName/2 s.dyn2/6 >/1
  // closed e.OptName as range 2
  //DEBUG: s.Label0: 5
  //DEBUG: s.dyn2: 6
  //DEBUG: e.OptName: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & GenRemainderFuncNames@0/4 AsIs: s.Label0/5 } Tile{ AsIs: e.OptName/2 } 0/7 Tile{ AsIs: s.dyn2/6 AsIs: >/1 ]] }
  refalrts::alloc_number(vm, context[7], 0UL);
  refalrts::update_name(context[4], functions[efunc_gen_GenRemainderFuncNames_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[6];
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GenRemainderFuncNames_Z2("GenRemainderFuncNames@2", COOKIE1_, COOKIE2_, func_gen_GenRemainderFuncNames_Z2);


static refalrts::FnResult func_gen_DoHashSetm_DoFillBucket_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 29 elems
  refalrts::Iter context[29];
  refalrts::zeros( context, 29 );
  // </0 & DoHashSet-DoFillBucket@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoHashSet-DoFillBucket@2/4 (/7 e.new1/5 )/8 s.new2/9 (/12 e.new3/10 )/13 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new3 as range 10
  // closed e.new4 as range 2
  do {
    // </0 & DoHashSet-DoFillBucket@2/4 (/7 e.Names-OtherHash/20 (/26 s.X/28 e.Name/24 )/27 e.UnscannedNames/22 )/8 s.X/9 (/12 e.X/16 )/13 e.X0/18 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    // closed e.X as range 16
    // closed e.X0 as range 18
    context[20] = 0;
    context[21] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[22] = context[14];
      context[23] = context[15];
      context[24] = 0;
      context[25] = 0;
      context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
      if( ! context[26] )
        continue;
      refalrts::bracket_pointers(context[26], context[27]);
      if( ! refalrts::repeated_stvar_left( vm, context[28], context[9], context[24], context[25] ) )
        continue;
      // closed e.Name as range 24
      // closed e.UnscannedNames as range 22
      //DEBUG: s.X: 9
      //DEBUG: e.X: 16
      //DEBUG: e.X0: 18
      //DEBUG: e.Names-OtherHash: 20
      //DEBUG: e.Name: 24
      //DEBUG: e.UnscannedNames: 22

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.X/28 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e.Names-OtherHash/20 } Tile{ AsIs: </0 AsIs: & DoHashSet-DoFillBucket@2/4 } Tile{ HalfReuse: (/27 AsIs: e.UnscannedNames/22 AsIs: )/8 AsIs: s.X/9 AsIs: (/12 AsIs: e.X/16 HalfReuse: (/13 AsIs: e.X0/18 HalfReuse: )/1 } Tile{ HalfReuse: )/26 } Tile{ AsIs: e.Name/24 } Tile{ HalfReuse: >/7 } Tile{ ]] }
      refalrts::reinit_open_bracket(context[27]);
      refalrts::reinit_open_bracket(context[13]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::reinit_close_bracket(context[26]);
      refalrts::reinit_close_call(context[7]);
      refalrts::push_stack( vm, context[7] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[12], context[26] );
      refalrts::link_brackets( context[13], context[1] );
      refalrts::link_brackets( context[27], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[27], context[1] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_evar( res, context[20], context[21] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[20], context[21], context[14], context[15] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoHashSet-DoFillBucket@2/4 (/7 e.Names-OtherHash/14 )/8 s.X/9 (/12 e.X/16 )/13 e.X0/18 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[10];
    context[17] = context[11];
    context[18] = context[2];
    context[19] = context[3];
    // closed e.Names-OtherHash as range 14
    // closed e.X as range 16
    // closed e.X0 as range 18
    //DEBUG: s.X: 9
    //DEBUG: e.Names-OtherHash: 14
    //DEBUG: e.X: 16
    //DEBUG: e.X0: 18

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoHashSet-DoFillBucket@2/4 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.X/9 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.Names-OtherHash/14 } Tile{ AsIs: (/7 } Tile{ HalfReuse: s.X9 /12 AsIs: e.X/16 HalfReuse: (/13 AsIs: e.X0/18 HalfReuse: )/1 } Tile{ AsIs: )/8 } Tile{ ]] }
    refalrts::reinit_svar( context[12], context[9] );
    refalrts::reinit_open_bracket(context[13]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[13], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoHashSet-DoFillBucket@2/4 (/7 e.dyn0/5 )/8 s.X/9 (/12 e.X/10 )/13 e.X0/2 >/1
  // closed e.dyn0 as range 5
  // closed e.X as range 10
  // closed e.X0 as range 2
  //DEBUG: s.X: 9
  //DEBUG: e.dyn0: 5
  //DEBUG: e.X: 10
  //DEBUG: e.X0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.X/9 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoHashSet-DoFillBucket@0/4 } Tile{ AsIs: e.dyn0/5 } Tile{ AsIs: (/7 } Tile{ HalfReuse: s.X9 /12 AsIs: e.X/10 HalfReuse: (/13 AsIs: e.X0/2 HalfReuse: )/1 } Tile{ AsIs: )/8 } >/14 Tile{ ]] }
  refalrts::alloc_close_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_gen_DoHashSetm_DoFillBucket_Z0]);
  refalrts::reinit_svar( context[12], context[9] );
  refalrts::reinit_open_bracket(context[13]);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[12], context[1] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoHashSetm_DoFillBucket_Z2("DoHashSet-DoFillBucket@2", COOKIE1_, COOKIE2_, func_gen_DoHashSetm_DoFillBucket_Z2);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@5/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@5/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@5/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@5/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & DriveInlineOptimizerTick=5\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A5L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z5("DoMapAccum$1=1@5", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z5);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@6/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@6/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@6/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z6]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@6/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & DriveInlineOptimizerTick=4\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_DriveInlineOptimizerTick_A4L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z6("DoMapAccum$1=1@6", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z6);


static refalrts::FnResult func_gen_Reduce_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Reduce$1=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@1/4 s.new1/5 s.new2/6 (/9 e.new3/7 )/10 e.new4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new3 as range 7
  // closed e.new4 as range 2
  do {
    // </0 & Reduce$1=1@1/4 s.DriveMode/5 s.IntrinsicMode/6 (/9 e.Tail0/11 )/10 t.Acc$a/15 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Tail0 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    //DEBUG: s.DriveMode: 5
    //DEBUG: s.IntrinsicMode: 6
    //DEBUG: e.Tail0: 11
    //DEBUG: t.Acc$a: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@2/4 AsIs: s.DriveMode/5 AsIs: s.IntrinsicMode/6 } Tile{ AsIs: t.Acc$a/15 } Tile{ AsIs: e.Tail0/11 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, context[6], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@1/4 s.DriveMode/5 s.IntrinsicMode/6 (/9 e.Tail0/7 )/10 e.dyn/2 >/1
  // closed e.Tail0 as range 7
  // closed e.dyn as range 2
  //DEBUG: s.DriveMode: 5
  //DEBUG: s.IntrinsicMode: 6
  //DEBUG: e.Tail0: 7
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@0/4 } [*]/11 & OptFunction\1@0/12 (/13 Tile{ AsIs: s.DriveMode/5 AsIs: s.IntrinsicMode/6 } )/14 {*}/15 Tile{ AsIs: (/9 AsIs: e.Tail0/7 AsIs: )/10 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_close_bracket(vm, context[14]);
  refalrts::alloc_unwrapped_closure(vm, context[15], context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[15] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z1("Reduce$1=1@1", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z1);


static refalrts::FnResult func_gen_Reduce_S1A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Reduce$1=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@2/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & Reduce$1=1@2/4 t.Mode/5 (/9 e.Tail0/11 )/10 t.Acc$a/15 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.Tail0 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    //DEBUG: t.Mode: 5
    //DEBUG: e.Tail0: 11
    //DEBUG: t.Acc$a: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@1/4 AsIs: t.Mode/5 } Tile{ AsIs: t.Acc$a/15 } Tile{ AsIs: e.Tail0/11 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, context[6], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@2/4 t.Mode/5 (/9 e.Tail0/7 )/10 e.dyn/2 >/1
  // closed e.Tail0 as range 7
  // closed e.dyn as range 2
  //DEBUG: t.Mode: 5
  //DEBUG: e.Tail0: 7
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@0/4 } [*]/11 & OptFunction\1@0/12 Tile{ AsIs: t.Mode/5 } {*}/13 Tile{ AsIs: (/9 AsIs: e.Tail0/7 AsIs: )/10 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[13], context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  refalrts::wrap_closure( context[13] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z2("Reduce$1=1@2", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z2);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 23 elems
  refalrts::Iter context[23];
  refalrts::zeros( context, 23 );
  // </0 & DoMapAccum$1=1@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@7/4 t.new1/5 (/9 e.new2/7 )/10 (/13 e.new3/11 )/14 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.new2 as range 7
  // closed e.new3 as range 11
  // closed e.new4 as range 2
  do {
    // </0 & DoMapAccum$1=1@7/4 t.Mode/5 (/9 e.Scanned0/15 )/10 (/13 e.Tail0/17 )/14 t.Acc$a/21 e.StepScanned/19 >/1
    context[15] = context[7];
    context[16] = context[8];
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[2];
    context[20] = context[3];
    // closed e.Scanned0 as range 15
    // closed e.Tail0 as range 17
    context[22] = refalrts::tvar_left( context[21], context[19], context[20] );
    if( ! context[22] )
      continue;
    // closed e.StepScanned as range 19
    //DEBUG: t.Mode: 5
    //DEBUG: e.Scanned0: 15
    //DEBUG: e.Tail0: 17
    //DEBUG: t.Acc$a: 21
    //DEBUG: e.StepScanned: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@7/4 AsIs: t.Mode/5 } Tile{ AsIs: t.Acc$a/21 } Tile{ AsIs: (/13 } Tile{ AsIs: e.Scanned0/15 } Tile{ AsIs: e.StepScanned/19 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Tail0/17 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    refalrts::splice_to_freelist_open( vm, context[6], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@7/4 t.Mode/5 (/9 e.Scanned0/7 )/10 (/13 e.Tail0/11 )/14 e.dyn/2 >/1
  // closed e.Scanned0 as range 7
  // closed e.Tail0 as range 11
  // closed e.dyn as range 2
  //DEBUG: t.Mode: 5
  //DEBUG: e.Scanned0: 7
  //DEBUG: e.Tail0: 11
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@0/4 } [*]/15 & DriveInlineOptimizerTick=3\1@0/16 Tile{ AsIs: t.Mode/5 } {*}/17 Tile{ AsIs: (/9 AsIs: e.Scanned0/7 AsIs: )/10 AsIs: (/13 AsIs: e.Tail0/11 AsIs: )/14 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_unwrapped_closure(vm, context[17], context[15]);
  refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[9];
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::use( res );
  refalrts::wrap_closure( context[17] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z7("DoMapAccum$1=1@7", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z7);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@8/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@8/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@8/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@8/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@8/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & WithMetatables\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_WithMetatables_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z8("DoMapAccum$1=1@8", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z8);


static refalrts::FnResult func_gen_DoMapAccum_Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@10/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@10/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@10/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@10/4 t.Acc/5 (/9 e.Scanned/17 )/10 (/15 # Function/23 s.ScopeClass/24 (/27 e.3/25 )/28 # Sentences/29 e.4/21 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned as range 17
      // closed e.Tail as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3 as range 25
      // closed e.4 as range 21
      //DEBUG: t.Acc: 5
      //DEBUG: e.Scanned: 17
      //DEBUG: e.Tail: 19
      //DEBUG: s.ScopeClass: 24
      //DEBUG: e.3: 25
      //DEBUG: e.4: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@10/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass/24 AsIs: (/27 AsIs: e.3/25 AsIs: )/28 HalfReuse: </29 } & Reduce@3/35 (/36 Tile{ AsIs: t.Acc/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z3]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z10]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@10/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@10/4 AsIs: t.Acc/5 AsIs: (/9 } Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@10/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@10/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@10/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # Drive/16 # Drive/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z10("DoMapAccum@10", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z10);


static refalrts::FnResult func_gen_DoMapAccum_Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@11/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@11/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@11/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@11/4 t.Acc/5 (/9 e.Scanned/17 )/10 (/15 # Function/23 s.ScopeClass/24 (/27 e.3/25 )/28 # Sentences/29 e.4/21 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned as range 17
      // closed e.Tail as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3 as range 25
      // closed e.4 as range 21
      //DEBUG: t.Acc: 5
      //DEBUG: e.Scanned: 17
      //DEBUG: e.Tail: 19
      //DEBUG: s.ScopeClass: 24
      //DEBUG: e.3: 25
      //DEBUG: e.4: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@11/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass/24 AsIs: (/27 AsIs: e.3/25 AsIs: )/28 HalfReuse: </29 } & Reduce@4/35 (/36 Tile{ AsIs: t.Acc/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z4]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z11]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@11/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@11/4 AsIs: t.Acc/5 AsIs: (/9 } Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@11/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@11/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@11/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # Drive/16 # Inline/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z11("DoMapAccum@11", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z11);


static refalrts::FnResult func_gen_DoMapAccum_Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@12/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@12/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@12/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@12/4 t.Acc/5 (/9 e.Scanned/17 )/10 (/15 # Function/23 s.ScopeClass/24 (/27 e.3/25 )/28 # Sentences/29 e.4/21 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned as range 17
      // closed e.Tail as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3 as range 25
      // closed e.4 as range 21
      //DEBUG: t.Acc: 5
      //DEBUG: e.Scanned: 17
      //DEBUG: e.Tail: 19
      //DEBUG: s.ScopeClass: 24
      //DEBUG: e.3: 25
      //DEBUG: e.4: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@12/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass/24 AsIs: (/27 AsIs: e.3/25 AsIs: )/28 HalfReuse: </29 } & Reduce@5/35 (/36 Tile{ AsIs: t.Acc/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z5]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z12]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@12/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@12/4 AsIs: t.Acc/5 AsIs: (/9 } Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@12/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@12/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@12/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # Drive/16 # Intrinsic/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z12("DoMapAccum@12", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z12);


static refalrts::FnResult func_gen_DoMapAccum_Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@13/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@13/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@13/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@13/4 t.Acc/5 (/9 e.Scanned/17 )/10 (/15 # Function/23 s.ScopeClass/24 (/27 e.3/25 )/28 # Sentences/29 e.4/21 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned as range 17
      // closed e.Tail as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3 as range 25
      // closed e.4 as range 21
      //DEBUG: t.Acc: 5
      //DEBUG: e.Scanned: 17
      //DEBUG: e.Tail: 19
      //DEBUG: s.ScopeClass: 24
      //DEBUG: e.3: 25
      //DEBUG: e.4: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@13/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass/24 AsIs: (/27 AsIs: e.3/25 AsIs: )/28 HalfReuse: </29 } & Reduce@6/35 (/36 Tile{ AsIs: t.Acc/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z6]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z13]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@13/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@13/4 AsIs: t.Acc/5 AsIs: (/9 } Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@13/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@13/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@13/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # Drive/16 # None/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z13("DoMapAccum@13", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z13);


static refalrts::FnResult func_gen_DoMapAccum_Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@14/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@14/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@14/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@14/4 t.Acc/5 (/9 e.Scanned/17 )/10 (/15 # Function/23 s.ScopeClass/24 (/27 e.3/25 )/28 # Sentences/29 e.4/21 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned as range 17
      // closed e.Tail as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3 as range 25
      // closed e.4 as range 21
      //DEBUG: t.Acc: 5
      //DEBUG: e.Scanned: 17
      //DEBUG: e.Tail: 19
      //DEBUG: s.ScopeClass: 24
      //DEBUG: e.3: 25
      //DEBUG: e.4: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@14/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass/24 AsIs: (/27 AsIs: e.3/25 AsIs: )/28 HalfReuse: </29 } & Reduce@7/35 (/36 Tile{ AsIs: t.Acc/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z7]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z14]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@14/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@14/4 AsIs: t.Acc/5 AsIs: (/9 } Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@14/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@14/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@14/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # Inline/16 # Drive/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z14("DoMapAccum@14", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z14);


static refalrts::FnResult func_gen_DoMapAccum_Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@15/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@15/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@15/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@15/4 t.Acc/5 (/9 e.Scanned/17 )/10 (/15 # Function/23 s.ScopeClass/24 (/27 e.3/25 )/28 # Sentences/29 e.4/21 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned as range 17
      // closed e.Tail as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3 as range 25
      // closed e.4 as range 21
      //DEBUG: t.Acc: 5
      //DEBUG: e.Scanned: 17
      //DEBUG: e.Tail: 19
      //DEBUG: s.ScopeClass: 24
      //DEBUG: e.3: 25
      //DEBUG: e.4: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@15/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass/24 AsIs: (/27 AsIs: e.3/25 AsIs: )/28 HalfReuse: </29 } & Reduce@8/35 (/36 Tile{ AsIs: t.Acc/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z8]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z15]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@15/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@15/4 AsIs: t.Acc/5 AsIs: (/9 } Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@15/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@15/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@15/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # Inline/16 # Inline/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z15("DoMapAccum@15", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z15);


static refalrts::FnResult func_gen_DoMapAccum_Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@16/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@16/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@16/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@16/4 t.Acc/5 (/9 e.Scanned/17 )/10 (/15 # Function/23 s.ScopeClass/24 (/27 e.3/25 )/28 # Sentences/29 e.4/21 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned as range 17
      // closed e.Tail as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3 as range 25
      // closed e.4 as range 21
      //DEBUG: t.Acc: 5
      //DEBUG: e.Scanned: 17
      //DEBUG: e.Tail: 19
      //DEBUG: s.ScopeClass: 24
      //DEBUG: e.3: 25
      //DEBUG: e.4: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@16/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass/24 AsIs: (/27 AsIs: e.3/25 AsIs: )/28 HalfReuse: </29 } & Reduce@9/35 (/36 Tile{ AsIs: t.Acc/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z9]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z16]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@16/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@16/4 AsIs: t.Acc/5 AsIs: (/9 } Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@16/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@16/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@16/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # Inline/16 # Intrinsic/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z16("DoMapAccum@16", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z16);


static refalrts::FnResult func_gen_DoMapAccum_Z17(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@17/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@17/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@17/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@17/4 t.Acc/5 (/9 e.Scanned/17 )/10 (/15 # Function/23 s.ScopeClass/24 (/27 e.3/25 )/28 # Sentences/29 e.4/21 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned as range 17
      // closed e.Tail as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3 as range 25
      // closed e.4 as range 21
      //DEBUG: t.Acc: 5
      //DEBUG: e.Scanned: 17
      //DEBUG: e.Tail: 19
      //DEBUG: s.ScopeClass: 24
      //DEBUG: e.3: 25
      //DEBUG: e.4: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@17/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass/24 AsIs: (/27 AsIs: e.3/25 AsIs: )/28 HalfReuse: </29 } & Reduce@10/35 (/36 Tile{ AsIs: t.Acc/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z10]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z17]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@17/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@17/4 AsIs: t.Acc/5 AsIs: (/9 } Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@17/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@17/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@17/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # Inline/16 # None/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z17("DoMapAccum@17", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z17);


static refalrts::FnResult func_gen_DoMapAccum_Z18(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@18/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@18/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@18/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@18/4 t.Acc/5 (/9 e.Scanned/17 )/10 (/15 # Function/23 s.ScopeClass/24 (/27 e.3/25 )/28 # Sentences/29 e.4/21 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned as range 17
      // closed e.Tail as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3 as range 25
      // closed e.4 as range 21
      //DEBUG: t.Acc: 5
      //DEBUG: e.Scanned: 17
      //DEBUG: e.Tail: 19
      //DEBUG: s.ScopeClass: 24
      //DEBUG: e.3: 25
      //DEBUG: e.4: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@18/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass/24 AsIs: (/27 AsIs: e.3/25 AsIs: )/28 HalfReuse: </29 } & Reduce@11/35 (/36 Tile{ AsIs: t.Acc/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z11]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z18]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@18/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@18/4 AsIs: t.Acc/5 AsIs: (/9 } Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@18/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@18/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@18/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # Intrinsic/16 # Drive/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z18("DoMapAccum@18", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z18);


static refalrts::FnResult func_gen_DoMapAccum_Z19(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@19/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@19/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@19/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@19/4 t.Acc/5 (/9 e.Scanned/17 )/10 (/15 # Function/23 s.ScopeClass/24 (/27 e.3/25 )/28 # Sentences/29 e.4/21 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned as range 17
      // closed e.Tail as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3 as range 25
      // closed e.4 as range 21
      //DEBUG: t.Acc: 5
      //DEBUG: e.Scanned: 17
      //DEBUG: e.Tail: 19
      //DEBUG: s.ScopeClass: 24
      //DEBUG: e.3: 25
      //DEBUG: e.4: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@19/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass/24 AsIs: (/27 AsIs: e.3/25 AsIs: )/28 HalfReuse: </29 } & Reduce@12/35 (/36 Tile{ AsIs: t.Acc/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z12]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z19]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@19/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@19/4 AsIs: t.Acc/5 AsIs: (/9 } Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@19/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@19/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@19/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # Intrinsic/16 # Inline/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z19("DoMapAccum@19", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z19);


static refalrts::FnResult func_gen_DoMapAccum_Z20(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@20/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@20/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@20/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@20/4 t.Acc/5 (/9 e.Scanned/17 )/10 (/15 # Function/23 s.ScopeClass/24 (/27 e.3/25 )/28 # Sentences/29 e.4/21 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned as range 17
      // closed e.Tail as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3 as range 25
      // closed e.4 as range 21
      //DEBUG: t.Acc: 5
      //DEBUG: e.Scanned: 17
      //DEBUG: e.Tail: 19
      //DEBUG: s.ScopeClass: 24
      //DEBUG: e.3: 25
      //DEBUG: e.4: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@20/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass/24 AsIs: (/27 AsIs: e.3/25 AsIs: )/28 HalfReuse: </29 } & Reduce@13/35 (/36 Tile{ AsIs: t.Acc/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z13]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z20]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@20/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@20/4 AsIs: t.Acc/5 AsIs: (/9 } Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@20/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@20/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@20/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # Intrinsic/16 # Intrinsic/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z20("DoMapAccum@20", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z20);


static refalrts::FnResult func_gen_DoMapAccum_Z21(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@21/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@21/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@21/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@21/4 t.Acc/5 (/9 e.Scanned/17 )/10 (/15 # Function/23 s.ScopeClass/24 (/27 e.3/25 )/28 # Sentences/29 e.4/21 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned as range 17
      // closed e.Tail as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3 as range 25
      // closed e.4 as range 21
      //DEBUG: t.Acc: 5
      //DEBUG: e.Scanned: 17
      //DEBUG: e.Tail: 19
      //DEBUG: s.ScopeClass: 24
      //DEBUG: e.3: 25
      //DEBUG: e.4: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@21/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass/24 AsIs: (/27 AsIs: e.3/25 AsIs: )/28 HalfReuse: </29 } & Reduce@14/35 (/36 Tile{ AsIs: t.Acc/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z14]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z21]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@21/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@21/4 AsIs: t.Acc/5 AsIs: (/9 } Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@21/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@21/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@21/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # Intrinsic/16 # None/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z21("DoMapAccum@21", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z21);


static refalrts::FnResult func_gen_DoMapAccum_Z22(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@22/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@22/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@22/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@22/4 t.Acc/5 (/9 e.Scanned/17 )/10 (/15 # Function/23 s.ScopeClass/24 (/27 e.3/25 )/28 # Sentences/29 e.4/21 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned as range 17
      // closed e.Tail as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3 as range 25
      // closed e.4 as range 21
      //DEBUG: t.Acc: 5
      //DEBUG: e.Scanned: 17
      //DEBUG: e.Tail: 19
      //DEBUG: s.ScopeClass: 24
      //DEBUG: e.3: 25
      //DEBUG: e.4: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@22/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass/24 AsIs: (/27 AsIs: e.3/25 AsIs: )/28 HalfReuse: </29 } & Reduce@15/35 (/36 Tile{ AsIs: t.Acc/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z15]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z22]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@22/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@22/4 AsIs: t.Acc/5 AsIs: (/9 } Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@22/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@22/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@22/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # None/16 # Drive/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z22("DoMapAccum@22", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z22);


static refalrts::FnResult func_gen_DoMapAccum_Z23(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@23/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@23/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@23/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@23/4 t.Acc/5 (/9 e.Scanned/17 )/10 (/15 # Function/23 s.ScopeClass/24 (/27 e.3/25 )/28 # Sentences/29 e.4/21 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned as range 17
      // closed e.Tail as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3 as range 25
      // closed e.4 as range 21
      //DEBUG: t.Acc: 5
      //DEBUG: e.Scanned: 17
      //DEBUG: e.Tail: 19
      //DEBUG: s.ScopeClass: 24
      //DEBUG: e.3: 25
      //DEBUG: e.4: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@23/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass/24 AsIs: (/27 AsIs: e.3/25 AsIs: )/28 HalfReuse: </29 } & Reduce@16/35 (/36 Tile{ AsIs: t.Acc/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z16]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z23]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@23/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@23/4 AsIs: t.Acc/5 AsIs: (/9 } Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@23/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@23/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@23/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # None/16 # Inline/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z23("DoMapAccum@23", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z23);


static refalrts::FnResult func_gen_DoMapAccum_Z24(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@24/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@24/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@24/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@24/4 t.Acc/5 (/9 e.Scanned/17 )/10 (/15 # Function/23 s.ScopeClass/24 (/27 e.3/25 )/28 # Sentences/29 e.4/21 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned as range 17
      // closed e.Tail as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3 as range 25
      // closed e.4 as range 21
      //DEBUG: t.Acc: 5
      //DEBUG: e.Scanned: 17
      //DEBUG: e.Tail: 19
      //DEBUG: s.ScopeClass: 24
      //DEBUG: e.3: 25
      //DEBUG: e.4: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@24/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass/24 AsIs: (/27 AsIs: e.3/25 AsIs: )/28 HalfReuse: </29 } & Reduce@17/35 (/36 Tile{ AsIs: t.Acc/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z17]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z24]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@24/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@24/4 AsIs: t.Acc/5 AsIs: (/9 } Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@24/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@24/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@24/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # None/16 # Intrinsic/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z24("DoMapAccum@24", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z24);


static refalrts::FnResult func_gen_DoMapAccum_Z25(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & DoMapAccum@25/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@25/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@25/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@25/4 t.Acc/5 (/9 e.Scanned/17 )/10 (/15 # Function/23 s.ScopeClass/24 (/27 e.3/25 )/28 # Sentences/29 e.4/21 )/16 e.Tail/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[15] ) )
        continue;
      context[23] = refalrts::ident_left( identifiers[ident_Function], context[21], context[22] );
      if( ! context[23] )
        continue;
      // closed e.Scanned as range 17
      // closed e.Tail as range 19
      if( ! refalrts::svar_left( context[24], context[21], context[22] ) )
        continue;
      context[25] = 0;
      context[26] = 0;
      context[27] = refalrts::brackets_left( context[25], context[26], context[21], context[22] );
      if( ! context[27] )
        continue;
      refalrts::bracket_pointers(context[27], context[28]);
      context[29] = refalrts::ident_left( identifiers[ident_Sentences], context[21], context[22] );
      if( ! context[29] )
        continue;
      // closed e.3 as range 25
      // closed e.4 as range 21
      //DEBUG: t.Acc: 5
      //DEBUG: e.Scanned: 17
      //DEBUG: e.Tail: 19
      //DEBUG: s.ScopeClass: 24
      //DEBUG: e.3: 25
      //DEBUG: e.4: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@25/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: )/16 } </30 & OptFunction:1/31 (/32 e.4/21/33 Tile{ HalfReuse: )/23 AsIs: s.ScopeClass/24 AsIs: (/27 AsIs: e.3/25 AsIs: )/28 HalfReuse: </29 } & Reduce@18/35 (/36 Tile{ AsIs: t.Acc/5 } (/37 )/38 (/39 )/40 )/41 Tile{ AsIs: e.4/21 } >/42 >/43 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[30]);
      refalrts::alloc_name(vm, context[31], functions[efunc_gen_OptFunction_B1]);
      refalrts::alloc_open_bracket(vm, context[32]);
      refalrts::copy_evar(vm, context[33], context[34], context[21], context[22]);
      refalrts::alloc_name(vm, context[35], functions[efunc_gen_Reduce_Z18]);
      refalrts::alloc_open_bracket(vm, context[36]);
      refalrts::alloc_open_bracket(vm, context[37]);
      refalrts::alloc_close_bracket(vm, context[38]);
      refalrts::alloc_open_bracket(vm, context[39]);
      refalrts::alloc_close_bracket(vm, context[40]);
      refalrts::alloc_close_bracket(vm, context[41]);
      refalrts::alloc_close_call(vm, context[42]);
      refalrts::alloc_close_call(vm, context[43]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z25]);
      refalrts::reinit_close_bracket(context[23]);
      refalrts::reinit_open_call(context[29]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[43] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[42] );
      refalrts::push_stack( vm, context[29] );
      refalrts::link_brackets( context[36], context[41] );
      refalrts::link_brackets( context[39], context[40] );
      refalrts::link_brackets( context[37], context[38] );
      refalrts::link_brackets( context[27], context[28] );
      refalrts::link_brackets( context[32], context[23] );
      refalrts::link_brackets( context[15], context[16] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[42], context[43] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[37], context[41] );
      res = refalrts::splice_evar( res, context[5], context[6] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[23], context[29] );
      res = refalrts::splice_evar( res, context[33], context[34] );
      res = refalrts::splice_evar( res, context[30], context[32] );
      res = refalrts::splice_elem( res, context[16] );
      res = refalrts::splice_evar( res, context[19], context[20] );
      res = refalrts::splice_evar( res, context[9], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@25/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@25/4 AsIs: t.Acc/5 AsIs: (/9 } Tile{ AsIs: e.Scanned/17 } Tile{ AsIs: t.Next/15 } Tile{ AsIs: )/10 } Tile{ AsIs: e.Tail/19 } Tile{ AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@25/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@25/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@25/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 & DoMapAccum@0/12 [*]/13 & DriveInlineOptimizerTick=3\1@0/14 (/15 # None/16 # None/17 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::alloc_closure_head(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_ident(vm, context[16], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[17], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::link_brackets( context[15], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[11], context[17] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z25("DoMapAccum@25", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z25);


static refalrts::FnResult func_gen_UpdateDriveInfo_A2Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & UpdateDriveInfo=2@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UpdateDriveInfo=2@1/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & UpdateDriveInfo=2@1/4 (/7 e.Drives0/9 )/8 (/15 e.Inlines/13 )/16 e.AST$b/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    context[15] = refalrts::brackets_left( context[13], context[14], context[11], context[12] );
    if( ! context[15] )
      continue;
    refalrts::bracket_pointers(context[15], context[16]);
    // closed e.Drives0 as range 9
    // closed e.Inlines as range 13
    // closed e.AST$b as range 11
    //DEBUG: e.Drives0: 9
    //DEBUG: e.Inlines: 13
    //DEBUG: e.AST$b: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=3@1/4 AsIs: (/7 } Tile{ AsIs: e.Inlines/13 } Tile{ AsIs: )/8 AsIs: (/15 } Tile{ AsIs: e.Drives0/9 } )/17 </18 Tile{ HalfReuse: & DoExtractLabels@1/16 AsIs: e.AST$b/11 AsIs: >/1 } >/19 Tile{ ]] }
    refalrts::alloc_close_bracket(vm, context[17]);
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A3Z1]);
    refalrts::reinit_name(context[16], functions[efunc_gen_DoExtractLabels_Z1]);
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[18] );
    refalrts::link_brackets( context[15], context[17] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[16], context[1] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[8], context[15] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=2@1/4 (/7 e.Drives0/5 )/8 e.dyn/2 >/1
  // closed e.Drives0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Drives0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & UpdateDriveInfo=2@0/10 (/11 )/12 (/13 Tile{ HalfReuse: 101/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Drives0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_UpdateDriveInfo_A2Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::reinit_number(context[0], 101UL);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[4] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A2Z1("UpdateDriveInfo=2@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A2Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@9/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@9/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@9/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@9/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@9/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & FormatOptFunctions=1\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_FormatOptFunctions_A1L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z9("DoMapAccum$1=1@9", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z9);


static refalrts::FnResult func_gen_Reduce_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 60 elems
  refalrts::Iter context[60];
  refalrts::zeros( context, 60 );
  // </0 & Reduce@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@2/4 s.new1/5 s.new2/6 t.new3/7 e.new4/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 2
  do {
    // </0 & Reduce@2/4 s.new5/5 s.new6/6 t.new7/7 t.new8/11 e.new9/9 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[12] = refalrts::tvar_left( context[11], context[9], context[10] );
    if( ! context[12] )
      continue;
    // closed e.new9 as range 9
    do {
      // </0 & Reduce@2/4 s.new10/5 s.new11/6 (/7 t.new12/25 (/23 e.new13/21 )/24 (/19 e.new14/17 )/20 )/8 t.new15/11 e.new16/13 >/1
      context[13] = context[9];
      context[14] = context[10];
      context[15] = 0;
      context[16] = 0;
      if( ! refalrts::brackets_term( context[15], context[16], context[7] ) )
        continue;
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_right( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = 0;
      context[22] = 0;
      context[23] = refalrts::brackets_right( context[21], context[22], context[15], context[16] );
      if( ! context[23] )
        continue;
      refalrts::bracket_pointers(context[23], context[24]);
      // closed e.new13 as range 21
      // closed e.new14 as range 17
      // closed e.new16 as range 13
      context[26] = refalrts::tvar_left( context[25], context[15], context[16] );
      if( ! context[26] )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      do {
        // </0 & Reduce@2/4 s.DriveMode/5 s.IntrinsicMode/6 (/7 t./25 (/23 e.2/27 )/24 (/19 e.4/29 )/20 )/8 (/11 (/37 e.1/35 )/38 (/41 e.5/39 )/42 )/12 e.Tail/31 >/1
        context[27] = context[21];
        context[28] = context[22];
        context[29] = context[17];
        context[30] = context[18];
        context[31] = context[13];
        context[32] = context[14];
        context[33] = 0;
        context[34] = 0;
        if( ! refalrts::brackets_term( context[33], context[34], context[11] ) )
          continue;
        context[35] = 0;
        context[36] = 0;
        context[37] = refalrts::brackets_left( context[35], context[36], context[33], context[34] );
        if( ! context[37] )
          continue;
        refalrts::bracket_pointers(context[37], context[38]);
        context[39] = 0;
        context[40] = 0;
        context[41] = refalrts::brackets_left( context[39], context[40], context[33], context[34] );
        if( ! context[41] )
          continue;
        refalrts::bracket_pointers(context[41], context[42]);
        if( ! refalrts::empty_seq( context[33], context[34] ) )
          continue;
        // closed e.2 as range 27
        // closed e.4 as range 29
        // closed e.1 as range 35
        // closed e.5 as range 39
        // closed e.Tail as range 31
        //DEBUG: t.: 25
        //DEBUG: s.DriveMode: 5
        //DEBUG: s.IntrinsicMode: 6
        //DEBUG: e.2: 27
        //DEBUG: e.4: 29
        //DEBUG: e.1: 35
        //DEBUG: e.5: 39
        //DEBUG: e.Tail: 31

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@1/4 AsIs: s.DriveMode/5 AsIs: s.IntrinsicMode/6 AsIs: (/7 } Tile{ AsIs: e.Tail/31 } )/43 </44 & OptFunction\1=1/45 Tile{ AsIs: (/23 AsIs: e.2/27 AsIs: )/24 AsIs: (/19 AsIs: e.4/29 AsIs: )/20 HalfReuse: </8 HalfReuse: & OptSentence$1=2/11 AsIs: (/37 AsIs: e.1/35 AsIs: )/38 } Tile{ AsIs: t./25 } Tile{ AsIs: (/41 AsIs: e.5/39 AsIs: )/42 HalfReuse: </12 } & OptSentence$1=2:1@1/46 s.DriveMode/5/47 s.IntrinsicMode/6/48 </49 & IsLexpr:1/50 </51 & IsLexpr-Aux/52 e.1/35/53 >/55 >/56 >/57 >/58 >/59 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[43]);
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_OptSentence_S1A2B1Z1]);
        refalrts::copy_stvar(vm, context[47], context[5]);
        refalrts::copy_stvar(vm, context[48], context[6]);
        refalrts::alloc_open_call(vm, context[49]);
        refalrts::alloc_name(vm, context[50], functions[efunc_gen_IsLexpr_B1]);
        refalrts::alloc_open_call(vm, context[51]);
        refalrts::alloc_name(vm, context[52], functions[efunc_IsLexprm_Aux]);
        refalrts::copy_evar(vm, context[53], context[54], context[35], context[36]);
        refalrts::alloc_close_call(vm, context[55]);
        refalrts::alloc_close_call(vm, context[56]);
        refalrts::alloc_close_call(vm, context[57]);
        refalrts::alloc_close_call(vm, context[58]);
        refalrts::alloc_close_call(vm, context[59]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z1]);
        refalrts::reinit_open_call(context[8]);
        refalrts::reinit_name(context[11], functions[efunc_gen_OptSentence_S1A2]);
        refalrts::reinit_open_call(context[12]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[59] );
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[58] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[57] );
        refalrts::push_stack( vm, context[12] );
        refalrts::push_stack( vm, context[56] );
        refalrts::push_stack( vm, context[49] );
        refalrts::push_stack( vm, context[55] );
        refalrts::push_stack( vm, context[51] );
        refalrts::link_brackets( context[41], context[42] );
        refalrts::link_brackets( context[37], context[38] );
        refalrts::link_brackets( context[19], context[20] );
        refalrts::link_brackets( context[23], context[24] );
        refalrts::link_brackets( context[7], context[43] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[46], context[59] );
        res = refalrts::splice_evar( res, context[41], context[12] );
        res = refalrts::splice_evar( res, context[25], context[26] );
        res = refalrts::splice_evar( res, context[23], context[38] );
        res = refalrts::splice_evar( res, context[43], context[45] );
        res = refalrts::splice_evar( res, context[31], context[32] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@2/4 s.DriveMode/5 s.IntrinsicMode/6 (/7 t./25 (/23 e.2/27 )/24 (/19 e.4/29 )/20 )/8 t.Next/11 e.Tail/31 >/1
      context[27] = context[21];
      context[28] = context[22];
      context[29] = context[17];
      context[30] = context[18];
      context[31] = context[13];
      context[32] = context[14];
      // closed e.2 as range 27
      // closed e.4 as range 29
      // closed e.Tail as range 31
      //DEBUG: t.: 25
      //DEBUG: t.Next: 11
      //DEBUG: s.DriveMode: 5
      //DEBUG: s.IntrinsicMode: 6
      //DEBUG: e.2: 27
      //DEBUG: e.4: 29
      //DEBUG: e.Tail: 31

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@2/4 AsIs: s.DriveMode/5 AsIs: s.IntrinsicMode/6 AsIs: (/7 AsIs: t./25 AsIs: (/23 } Tile{ AsIs: e.2/27 } Tile{ AsIs: t.Next/11 } Tile{ AsIs: )/24 AsIs: (/19 AsIs: e.4/29 AsIs: )/20 AsIs: )/8 } Tile{ AsIs: e.Tail/31 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[19], context[20] );
      refalrts::link_brackets( context[23], context[24] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[31], context[32] );
      res = refalrts::splice_evar( res, context[24], context[8] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[27], context[28] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@2/4 s.DriveMode/5 s.IntrinsicMode/6 t.Acc/7 t.Next/11 e.Tail/13 >/1
    context[13] = context[9];
    context[14] = context[10];
    // closed e.Tail as range 13
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 11
    //DEBUG: s.DriveMode: 5
    //DEBUG: s.IntrinsicMode: 6
    //DEBUG: e.Tail: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@1/4 AsIs: s.DriveMode/5 AsIs: s.IntrinsicMode/6 } (/15 Tile{ AsIs: e.Tail/13 } )/16 </17 & OptFunction\1*1/18 (/19 s.DriveMode/5/20 s.IntrinsicMode/6/21 )/22 Tile{ AsIs: t.Acc/7 AsIs: t.Next/11 } >/23 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[15]);
    refalrts::alloc_close_bracket(vm, context[16]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::copy_stvar(vm, context[20], context[5]);
    refalrts::copy_stvar(vm, context[21], context[6]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[17] );
    refalrts::link_brackets( context[19], context[22] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_evar( res, context[7], context[12] );
    res = refalrts::splice_evar( res, context[16], context[22] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@2/4 s.DriveMode/5 s.IntrinsicMode/6 t.Acc/7 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc: 7
    //DEBUG: s.DriveMode: 5
    //DEBUG: s.IntrinsicMode: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@2/4 s.DriveMode/5 s.IntrinsicMode/6 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[7], context[8] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@2/4 s.DriveMode/5 s.IntrinsicMode/6 t.accum/7 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.accum: 7
  //DEBUG: s.DriveMode: 5
  //DEBUG: s.IntrinsicMode: 6
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce@0/10 [*]/11 Tile{ HalfReuse: & OptFunction\1@0/0 HalfReuse: (/4 AsIs: s.DriveMode/5 AsIs: s.IntrinsicMode/6 } )/12 {*}/13 Tile{ AsIs: t.accum/7 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_close_bracket(vm, context[12]);
  refalrts::alloc_unwrapped_closure(vm, context[13], context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::reinit_open_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[4], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[7];
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[0], context[6] );
  res = refalrts::splice_evar( res, context[9], context[11] );
  refalrts::use( res );
  refalrts::wrap_closure( context[13] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z2("Reduce@2", COOKIE1_, COOKIE2_, func_gen_Reduce_Z2);


static refalrts::FnResult func_gen_Reduce_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & Reduce@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@3/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Reduce@3/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Reduce@3/4 (/5 t.new6/23 (/21 e.new7/19 )/22 (/17 e.new8/15 )/18 )/6 t.new9/9 e.new10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new7 as range 19
      // closed e.new8 as range 15
      // closed e.new10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@3/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 (/9 (/35 e.1/33 )/36 (/39 e.5/37 )/40 )/10 e.Tail/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[9] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        context[35] = refalrts::brackets_left( context[33], context[34], context[31], context[32] );
        if( ! context[35] )
          continue;
        refalrts::bracket_pointers(context[35], context[36]);
        context[37] = 0;
        context[38] = 0;
        context[39] = refalrts::brackets_left( context[37], context[38], context[31], context[32] );
        if( ! context[39] )
          continue;
        refalrts::bracket_pointers(context[39], context[40]);
        if( ! refalrts::empty_seq( context[31], context[32] ) )
          continue;
        // closed e.2 as range 25
        // closed e.4 as range 27
        // closed e.1 as range 33
        // closed e.5 as range 37
        // closed e.Tail as range 29
        //DEBUG: t.: 23
        //DEBUG: e.2: 25
        //DEBUG: e.4: 27
        //DEBUG: e.1: 33
        //DEBUG: e.5: 37
        //DEBUG: e.Tail: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@3/4 AsIs: (/5 } Tile{ AsIs: e.Tail/29 } )/41 </42 & OptFunction\1=1/43 Tile{ AsIs: (/21 AsIs: e.2/25 AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1=2/9 AsIs: (/35 AsIs: e.1/33 AsIs: )/36 } Tile{ AsIs: t./23 } Tile{ AsIs: (/39 AsIs: e.5/37 AsIs: )/40 HalfReuse: </10 } & OptSentence$1=2:1@2/44 </45 & IsLexpr:1/46 </47 & IsLexpr-Aux/48 e.1/33/49 >/51 >/52 >/53 >/54 >/55 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[43], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_OptSentence_S1A2B1Z2]);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_IsLexpr_B1]);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_IsLexprm_Aux]);
        refalrts::copy_evar(vm, context[49], context[50], context[33], context[34]);
        refalrts::alloc_close_call(vm, context[51]);
        refalrts::alloc_close_call(vm, context[52]);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::alloc_close_call(vm, context[55]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z3]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1A2]);
        refalrts::reinit_open_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[55] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[51] );
        refalrts::push_stack( vm, context[47] );
        refalrts::link_brackets( context[39], context[40] );
        refalrts::link_brackets( context[35], context[36] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[41] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[44], context[55] );
        res = refalrts::splice_evar( res, context[39], context[10] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[21], context[36] );
        res = refalrts::splice_evar( res, context[41], context[43] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@3/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 t.Next/9 e.Tail/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2 as range 25
      // closed e.4 as range 27
      // closed e.Tail as range 29
      //DEBUG: t.: 23
      //DEBUG: t.Next: 9
      //DEBUG: e.2: 25
      //DEBUG: e.4: 27
      //DEBUG: e.Tail: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@3/4 AsIs: (/5 AsIs: t./23 AsIs: (/21 } Tile{ AsIs: e.2/25 } Tile{ AsIs: t.Next/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@3/4 t.Acc/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@3/4 } (/13 Tile{ AsIs: e.Tail/11 } )/14 </15 & OptFunction\1*1/16 (/17 # Drive/18 # Drive/19 )/20 Tile{ AsIs: t.Acc/5 AsIs: t.Next/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Drive]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Drive]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@3/4 t.Acc/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@3/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@3/4 t.accum/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.accum: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # Drive/12 # Drive/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum/5 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z3("Reduce@3", COOKIE1_, COOKIE2_, func_gen_Reduce_Z3);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@10/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@10/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@10/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@10/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@10/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # Drive/18 # Drive/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z10("DoMapAccum$1=1@10", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z10);


static refalrts::FnResult func_gen_Reduce_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & Reduce@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@4/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Reduce@4/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Reduce@4/4 (/5 t.new6/23 (/21 e.new7/19 )/22 (/17 e.new8/15 )/18 )/6 t.new9/9 e.new10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new7 as range 19
      // closed e.new8 as range 15
      // closed e.new10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@4/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 (/9 (/35 e.1/33 )/36 (/39 e.5/37 )/40 )/10 e.Tail/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[9] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        context[35] = refalrts::brackets_left( context[33], context[34], context[31], context[32] );
        if( ! context[35] )
          continue;
        refalrts::bracket_pointers(context[35], context[36]);
        context[37] = 0;
        context[38] = 0;
        context[39] = refalrts::brackets_left( context[37], context[38], context[31], context[32] );
        if( ! context[39] )
          continue;
        refalrts::bracket_pointers(context[39], context[40]);
        if( ! refalrts::empty_seq( context[31], context[32] ) )
          continue;
        // closed e.2 as range 25
        // closed e.4 as range 27
        // closed e.1 as range 33
        // closed e.5 as range 37
        // closed e.Tail as range 29
        //DEBUG: t.: 23
        //DEBUG: e.2: 25
        //DEBUG: e.4: 27
        //DEBUG: e.1: 33
        //DEBUG: e.5: 37
        //DEBUG: e.Tail: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@4/4 AsIs: (/5 } Tile{ AsIs: e.Tail/29 } )/41 </42 & OptFunction\1=1/43 Tile{ AsIs: (/21 AsIs: e.2/25 AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1=2/9 AsIs: (/35 AsIs: e.1/33 AsIs: )/36 } Tile{ AsIs: t./23 } Tile{ AsIs: (/39 AsIs: e.5/37 AsIs: )/40 HalfReuse: </10 } & OptSentence$1=2:1@3/44 </45 & IsLexpr:1/46 </47 & IsLexpr-Aux/48 e.1/33/49 >/51 >/52 >/53 >/54 >/55 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[43], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_OptSentence_S1A2B1Z3]);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_IsLexpr_B1]);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_IsLexprm_Aux]);
        refalrts::copy_evar(vm, context[49], context[50], context[33], context[34]);
        refalrts::alloc_close_call(vm, context[51]);
        refalrts::alloc_close_call(vm, context[52]);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::alloc_close_call(vm, context[55]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z4]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1A2]);
        refalrts::reinit_open_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[55] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[51] );
        refalrts::push_stack( vm, context[47] );
        refalrts::link_brackets( context[39], context[40] );
        refalrts::link_brackets( context[35], context[36] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[41] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[44], context[55] );
        res = refalrts::splice_evar( res, context[39], context[10] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[21], context[36] );
        res = refalrts::splice_evar( res, context[41], context[43] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@4/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 t.Next/9 e.Tail/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2 as range 25
      // closed e.4 as range 27
      // closed e.Tail as range 29
      //DEBUG: t.: 23
      //DEBUG: t.Next: 9
      //DEBUG: e.2: 25
      //DEBUG: e.4: 27
      //DEBUG: e.Tail: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@4/4 AsIs: (/5 AsIs: t./23 AsIs: (/21 } Tile{ AsIs: e.2/25 } Tile{ AsIs: t.Next/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@4/4 t.Acc/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@4/4 } (/13 Tile{ AsIs: e.Tail/11 } )/14 </15 & OptFunction\1*1/16 (/17 # Drive/18 # Inline/19 )/20 Tile{ AsIs: t.Acc/5 AsIs: t.Next/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Drive]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Inline]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@4/4 t.Acc/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@4/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@4/4 t.accum/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.accum: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # Drive/12 # Inline/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum/5 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z4("Reduce@4", COOKIE1_, COOKIE2_, func_gen_Reduce_Z4);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@11/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@11/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@11/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@11/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@11/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # Drive/18 # Inline/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z11("DoMapAccum$1=1@11", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z11);


static refalrts::FnResult func_gen_Reduce_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & Reduce@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@5/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Reduce@5/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Reduce@5/4 (/5 t.new6/23 (/21 e.new7/19 )/22 (/17 e.new8/15 )/18 )/6 t.new9/9 e.new10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new7 as range 19
      // closed e.new8 as range 15
      // closed e.new10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@5/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 (/9 (/35 e.1/33 )/36 (/39 e.5/37 )/40 )/10 e.Tail/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[9] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        context[35] = refalrts::brackets_left( context[33], context[34], context[31], context[32] );
        if( ! context[35] )
          continue;
        refalrts::bracket_pointers(context[35], context[36]);
        context[37] = 0;
        context[38] = 0;
        context[39] = refalrts::brackets_left( context[37], context[38], context[31], context[32] );
        if( ! context[39] )
          continue;
        refalrts::bracket_pointers(context[39], context[40]);
        if( ! refalrts::empty_seq( context[31], context[32] ) )
          continue;
        // closed e.2 as range 25
        // closed e.4 as range 27
        // closed e.1 as range 33
        // closed e.5 as range 37
        // closed e.Tail as range 29
        //DEBUG: t.: 23
        //DEBUG: e.2: 25
        //DEBUG: e.4: 27
        //DEBUG: e.1: 33
        //DEBUG: e.5: 37
        //DEBUG: e.Tail: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@5/4 AsIs: (/5 } Tile{ AsIs: e.Tail/29 } )/41 </42 & OptFunction\1=1/43 Tile{ AsIs: (/21 AsIs: e.2/25 AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1=2/9 AsIs: (/35 AsIs: e.1/33 AsIs: )/36 } Tile{ AsIs: t./23 } Tile{ AsIs: (/39 AsIs: e.5/37 AsIs: )/40 HalfReuse: </10 } & OptSentence$1=2:1@4/44 </45 & IsLexpr:1/46 </47 & IsLexpr-Aux/48 e.1/33/49 >/51 >/52 >/53 >/54 >/55 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[43], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_OptSentence_S1A2B1Z4]);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_IsLexpr_B1]);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_IsLexprm_Aux]);
        refalrts::copy_evar(vm, context[49], context[50], context[33], context[34]);
        refalrts::alloc_close_call(vm, context[51]);
        refalrts::alloc_close_call(vm, context[52]);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::alloc_close_call(vm, context[55]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z5]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1A2]);
        refalrts::reinit_open_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[55] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[51] );
        refalrts::push_stack( vm, context[47] );
        refalrts::link_brackets( context[39], context[40] );
        refalrts::link_brackets( context[35], context[36] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[41] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[44], context[55] );
        res = refalrts::splice_evar( res, context[39], context[10] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[21], context[36] );
        res = refalrts::splice_evar( res, context[41], context[43] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@5/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 t.Next/9 e.Tail/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2 as range 25
      // closed e.4 as range 27
      // closed e.Tail as range 29
      //DEBUG: t.: 23
      //DEBUG: t.Next: 9
      //DEBUG: e.2: 25
      //DEBUG: e.4: 27
      //DEBUG: e.Tail: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@5/4 AsIs: (/5 AsIs: t./23 AsIs: (/21 } Tile{ AsIs: e.2/25 } Tile{ AsIs: t.Next/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@5/4 t.Acc/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@5/4 } (/13 Tile{ AsIs: e.Tail/11 } )/14 </15 & OptFunction\1*1/16 (/17 # Drive/18 # Intrinsic/19 )/20 Tile{ AsIs: t.Acc/5 AsIs: t.Next/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Drive]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Intrinsic]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@5/4 t.Acc/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@5/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@5/4 t.accum/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.accum: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # Drive/12 # Intrinsic/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum/5 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z5("Reduce@5", COOKIE1_, COOKIE2_, func_gen_Reduce_Z5);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@12/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@12/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@12/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@12/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@12/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # Drive/18 # Intrinsic/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z12("DoMapAccum$1=1@12", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z12);


static refalrts::FnResult func_gen_Reduce_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & Reduce@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@6/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Reduce@6/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Reduce@6/4 (/5 t.new6/23 (/21 e.new7/19 )/22 (/17 e.new8/15 )/18 )/6 t.new9/9 e.new10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new7 as range 19
      // closed e.new8 as range 15
      // closed e.new10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@6/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 (/9 (/35 e.1/33 )/36 (/39 e.5/37 )/40 )/10 e.Tail/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[9] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        context[35] = refalrts::brackets_left( context[33], context[34], context[31], context[32] );
        if( ! context[35] )
          continue;
        refalrts::bracket_pointers(context[35], context[36]);
        context[37] = 0;
        context[38] = 0;
        context[39] = refalrts::brackets_left( context[37], context[38], context[31], context[32] );
        if( ! context[39] )
          continue;
        refalrts::bracket_pointers(context[39], context[40]);
        if( ! refalrts::empty_seq( context[31], context[32] ) )
          continue;
        // closed e.2 as range 25
        // closed e.4 as range 27
        // closed e.1 as range 33
        // closed e.5 as range 37
        // closed e.Tail as range 29
        //DEBUG: t.: 23
        //DEBUG: e.2: 25
        //DEBUG: e.4: 27
        //DEBUG: e.1: 33
        //DEBUG: e.5: 37
        //DEBUG: e.Tail: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@6/4 AsIs: (/5 } Tile{ AsIs: e.Tail/29 } )/41 </42 & OptFunction\1=1/43 Tile{ AsIs: (/21 AsIs: e.2/25 AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1=2/9 AsIs: (/35 AsIs: e.1/33 AsIs: )/36 } Tile{ AsIs: t./23 } Tile{ AsIs: (/39 AsIs: e.5/37 AsIs: )/40 HalfReuse: </10 } & OptSentence$1=2:1@5/44 </45 & IsLexpr:1/46 </47 & IsLexpr-Aux/48 e.1/33/49 >/51 >/52 >/53 >/54 >/55 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[43], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_OptSentence_S1A2B1Z5]);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_IsLexpr_B1]);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_IsLexprm_Aux]);
        refalrts::copy_evar(vm, context[49], context[50], context[33], context[34]);
        refalrts::alloc_close_call(vm, context[51]);
        refalrts::alloc_close_call(vm, context[52]);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::alloc_close_call(vm, context[55]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z6]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1A2]);
        refalrts::reinit_open_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[55] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[51] );
        refalrts::push_stack( vm, context[47] );
        refalrts::link_brackets( context[39], context[40] );
        refalrts::link_brackets( context[35], context[36] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[41] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[44], context[55] );
        res = refalrts::splice_evar( res, context[39], context[10] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[21], context[36] );
        res = refalrts::splice_evar( res, context[41], context[43] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@6/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 t.Next/9 e.Tail/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2 as range 25
      // closed e.4 as range 27
      // closed e.Tail as range 29
      //DEBUG: t.: 23
      //DEBUG: t.Next: 9
      //DEBUG: e.2: 25
      //DEBUG: e.4: 27
      //DEBUG: e.Tail: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@6/4 AsIs: (/5 AsIs: t./23 AsIs: (/21 } Tile{ AsIs: e.2/25 } Tile{ AsIs: t.Next/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@6/4 t.Acc/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@6/4 } (/13 Tile{ AsIs: e.Tail/11 } )/14 </15 & OptFunction\1*1/16 (/17 # Drive/18 # None/19 )/20 Tile{ AsIs: t.Acc/5 AsIs: t.Next/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Drive]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_None]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z6]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@6/4 t.Acc/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@6/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@6/4 t.accum/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.accum: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # Drive/12 # None/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum/5 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z6("Reduce@6", COOKIE1_, COOKIE2_, func_gen_Reduce_Z6);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@13/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@13/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@13/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@13/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@13/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # Drive/18 # None/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z13("DoMapAccum$1=1@13", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z13);


static refalrts::FnResult func_gen_Reduce_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & Reduce@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@7/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Reduce@7/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Reduce@7/4 (/5 t.new6/23 (/21 e.new7/19 )/22 (/17 e.new8/15 )/18 )/6 t.new9/9 e.new10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new7 as range 19
      // closed e.new8 as range 15
      // closed e.new10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@7/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 (/9 (/35 e.1/33 )/36 (/39 e.5/37 )/40 )/10 e.Tail/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[9] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        context[35] = refalrts::brackets_left( context[33], context[34], context[31], context[32] );
        if( ! context[35] )
          continue;
        refalrts::bracket_pointers(context[35], context[36]);
        context[37] = 0;
        context[38] = 0;
        context[39] = refalrts::brackets_left( context[37], context[38], context[31], context[32] );
        if( ! context[39] )
          continue;
        refalrts::bracket_pointers(context[39], context[40]);
        if( ! refalrts::empty_seq( context[31], context[32] ) )
          continue;
        // closed e.2 as range 25
        // closed e.4 as range 27
        // closed e.1 as range 33
        // closed e.5 as range 37
        // closed e.Tail as range 29
        //DEBUG: t.: 23
        //DEBUG: e.2: 25
        //DEBUG: e.4: 27
        //DEBUG: e.1: 33
        //DEBUG: e.5: 37
        //DEBUG: e.Tail: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@7/4 AsIs: (/5 } Tile{ AsIs: e.Tail/29 } )/41 </42 & OptFunction\1=1/43 Tile{ AsIs: (/21 AsIs: e.2/25 AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1=2/9 AsIs: (/35 AsIs: e.1/33 AsIs: )/36 } Tile{ AsIs: t./23 } Tile{ AsIs: (/39 AsIs: e.5/37 AsIs: )/40 HalfReuse: </10 } & OptSentence$1=2:1@6/44 </45 & IsLexpr:1/46 </47 & IsLexpr-Aux/48 e.1/33/49 >/51 >/52 >/53 >/54 >/55 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[43], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_OptSentence_S1A2B1Z6]);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_IsLexpr_B1]);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_IsLexprm_Aux]);
        refalrts::copy_evar(vm, context[49], context[50], context[33], context[34]);
        refalrts::alloc_close_call(vm, context[51]);
        refalrts::alloc_close_call(vm, context[52]);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::alloc_close_call(vm, context[55]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z7]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1A2]);
        refalrts::reinit_open_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[55] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[51] );
        refalrts::push_stack( vm, context[47] );
        refalrts::link_brackets( context[39], context[40] );
        refalrts::link_brackets( context[35], context[36] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[41] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[44], context[55] );
        res = refalrts::splice_evar( res, context[39], context[10] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[21], context[36] );
        res = refalrts::splice_evar( res, context[41], context[43] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@7/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 t.Next/9 e.Tail/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2 as range 25
      // closed e.4 as range 27
      // closed e.Tail as range 29
      //DEBUG: t.: 23
      //DEBUG: t.Next: 9
      //DEBUG: e.2: 25
      //DEBUG: e.4: 27
      //DEBUG: e.Tail: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@7/4 AsIs: (/5 AsIs: t./23 AsIs: (/21 } Tile{ AsIs: e.2/25 } Tile{ AsIs: t.Next/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@7/4 t.Acc/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@7/4 } (/13 Tile{ AsIs: e.Tail/11 } )/14 </15 & OptFunction\1*1/16 (/17 # Inline/18 # Drive/19 )/20 Tile{ AsIs: t.Acc/5 AsIs: t.Next/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Inline]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Drive]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@7/4 t.Acc/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@7/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@7/4 t.accum/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.accum: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # Inline/12 # Drive/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum/5 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z7("Reduce@7", COOKIE1_, COOKIE2_, func_gen_Reduce_Z7);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@14/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@14/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@14/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@14/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z14]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@14/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # Inline/18 # Drive/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z14("DoMapAccum$1=1@14", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z14);


static refalrts::FnResult func_gen_Reduce_Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & Reduce@8/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@8/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Reduce@8/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Reduce@8/4 (/5 t.new6/23 (/21 e.new7/19 )/22 (/17 e.new8/15 )/18 )/6 t.new9/9 e.new10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new7 as range 19
      // closed e.new8 as range 15
      // closed e.new10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@8/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 (/9 (/35 e.1/33 )/36 (/39 e.5/37 )/40 )/10 e.Tail/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[9] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        context[35] = refalrts::brackets_left( context[33], context[34], context[31], context[32] );
        if( ! context[35] )
          continue;
        refalrts::bracket_pointers(context[35], context[36]);
        context[37] = 0;
        context[38] = 0;
        context[39] = refalrts::brackets_left( context[37], context[38], context[31], context[32] );
        if( ! context[39] )
          continue;
        refalrts::bracket_pointers(context[39], context[40]);
        if( ! refalrts::empty_seq( context[31], context[32] ) )
          continue;
        // closed e.2 as range 25
        // closed e.4 as range 27
        // closed e.1 as range 33
        // closed e.5 as range 37
        // closed e.Tail as range 29
        //DEBUG: t.: 23
        //DEBUG: e.2: 25
        //DEBUG: e.4: 27
        //DEBUG: e.1: 33
        //DEBUG: e.5: 37
        //DEBUG: e.Tail: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@8/4 AsIs: (/5 } Tile{ AsIs: e.Tail/29 } )/41 </42 & OptFunction\1=1/43 Tile{ AsIs: (/21 AsIs: e.2/25 AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1=2/9 AsIs: (/35 AsIs: e.1/33 AsIs: )/36 } Tile{ AsIs: t./23 } Tile{ AsIs: (/39 AsIs: e.5/37 AsIs: )/40 HalfReuse: </10 } & OptSentence$1=2:1@7/44 </45 & IsLexpr:1/46 </47 & IsLexpr-Aux/48 e.1/33/49 >/51 >/52 >/53 >/54 >/55 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[43], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_OptSentence_S1A2B1Z7]);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_IsLexpr_B1]);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_IsLexprm_Aux]);
        refalrts::copy_evar(vm, context[49], context[50], context[33], context[34]);
        refalrts::alloc_close_call(vm, context[51]);
        refalrts::alloc_close_call(vm, context[52]);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::alloc_close_call(vm, context[55]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z8]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1A2]);
        refalrts::reinit_open_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[55] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[51] );
        refalrts::push_stack( vm, context[47] );
        refalrts::link_brackets( context[39], context[40] );
        refalrts::link_brackets( context[35], context[36] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[41] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[44], context[55] );
        res = refalrts::splice_evar( res, context[39], context[10] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[21], context[36] );
        res = refalrts::splice_evar( res, context[41], context[43] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@8/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 t.Next/9 e.Tail/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2 as range 25
      // closed e.4 as range 27
      // closed e.Tail as range 29
      //DEBUG: t.: 23
      //DEBUG: t.Next: 9
      //DEBUG: e.2: 25
      //DEBUG: e.4: 27
      //DEBUG: e.Tail: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@8/4 AsIs: (/5 AsIs: t./23 AsIs: (/21 } Tile{ AsIs: e.2/25 } Tile{ AsIs: t.Next/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@8/4 t.Acc/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@8/4 } (/13 Tile{ AsIs: e.Tail/11 } )/14 </15 & OptFunction\1*1/16 (/17 # Inline/18 # Inline/19 )/20 Tile{ AsIs: t.Acc/5 AsIs: t.Next/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Inline]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Inline]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@8/4 t.Acc/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@8/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@8/4 t.accum/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.accum: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # Inline/12 # Inline/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum/5 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z8("Reduce@8", COOKIE1_, COOKIE2_, func_gen_Reduce_Z8);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@15/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@15/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@15/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@15/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@15/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # Inline/18 # Inline/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z15("DoMapAccum$1=1@15", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z15);


static refalrts::FnResult func_gen_Reduce_Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & Reduce@9/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@9/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Reduce@9/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Reduce@9/4 (/5 t.new6/23 (/21 e.new7/19 )/22 (/17 e.new8/15 )/18 )/6 t.new9/9 e.new10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new7 as range 19
      // closed e.new8 as range 15
      // closed e.new10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@9/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 (/9 (/35 e.1/33 )/36 (/39 e.5/37 )/40 )/10 e.Tail/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[9] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        context[35] = refalrts::brackets_left( context[33], context[34], context[31], context[32] );
        if( ! context[35] )
          continue;
        refalrts::bracket_pointers(context[35], context[36]);
        context[37] = 0;
        context[38] = 0;
        context[39] = refalrts::brackets_left( context[37], context[38], context[31], context[32] );
        if( ! context[39] )
          continue;
        refalrts::bracket_pointers(context[39], context[40]);
        if( ! refalrts::empty_seq( context[31], context[32] ) )
          continue;
        // closed e.2 as range 25
        // closed e.4 as range 27
        // closed e.1 as range 33
        // closed e.5 as range 37
        // closed e.Tail as range 29
        //DEBUG: t.: 23
        //DEBUG: e.2: 25
        //DEBUG: e.4: 27
        //DEBUG: e.1: 33
        //DEBUG: e.5: 37
        //DEBUG: e.Tail: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@9/4 AsIs: (/5 } Tile{ AsIs: e.Tail/29 } )/41 </42 & OptFunction\1=1/43 Tile{ AsIs: (/21 AsIs: e.2/25 AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1=2/9 AsIs: (/35 AsIs: e.1/33 AsIs: )/36 } Tile{ AsIs: t./23 } Tile{ AsIs: (/39 AsIs: e.5/37 AsIs: )/40 HalfReuse: </10 } & OptSentence$1=2:1@8/44 </45 & IsLexpr:1/46 </47 & IsLexpr-Aux/48 e.1/33/49 >/51 >/52 >/53 >/54 >/55 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[43], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_OptSentence_S1A2B1Z8]);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_IsLexpr_B1]);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_IsLexprm_Aux]);
        refalrts::copy_evar(vm, context[49], context[50], context[33], context[34]);
        refalrts::alloc_close_call(vm, context[51]);
        refalrts::alloc_close_call(vm, context[52]);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::alloc_close_call(vm, context[55]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z9]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1A2]);
        refalrts::reinit_open_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[55] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[51] );
        refalrts::push_stack( vm, context[47] );
        refalrts::link_brackets( context[39], context[40] );
        refalrts::link_brackets( context[35], context[36] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[41] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[44], context[55] );
        res = refalrts::splice_evar( res, context[39], context[10] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[21], context[36] );
        res = refalrts::splice_evar( res, context[41], context[43] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@9/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 t.Next/9 e.Tail/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2 as range 25
      // closed e.4 as range 27
      // closed e.Tail as range 29
      //DEBUG: t.: 23
      //DEBUG: t.Next: 9
      //DEBUG: e.2: 25
      //DEBUG: e.4: 27
      //DEBUG: e.Tail: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@9/4 AsIs: (/5 AsIs: t./23 AsIs: (/21 } Tile{ AsIs: e.2/25 } Tile{ AsIs: t.Next/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@9/4 t.Acc/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@9/4 } (/13 Tile{ AsIs: e.Tail/11 } )/14 </15 & OptFunction\1*1/16 (/17 # Inline/18 # Intrinsic/19 )/20 Tile{ AsIs: t.Acc/5 AsIs: t.Next/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Inline]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Intrinsic]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@9/4 t.Acc/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@9/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@9/4 t.accum/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.accum: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # Inline/12 # Intrinsic/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum/5 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z9("Reduce@9", COOKIE1_, COOKIE2_, func_gen_Reduce_Z9);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@16/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@16/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@16/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@16/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@16/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # Inline/18 # Intrinsic/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z16("DoMapAccum$1=1@16", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z16);


static refalrts::FnResult func_gen_Reduce_Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & Reduce@10/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@10/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Reduce@10/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Reduce@10/4 (/5 t.new6/23 (/21 e.new7/19 )/22 (/17 e.new8/15 )/18 )/6 t.new9/9 e.new10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new7 as range 19
      // closed e.new8 as range 15
      // closed e.new10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@10/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 (/9 (/35 e.1/33 )/36 (/39 e.5/37 )/40 )/10 e.Tail/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[9] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        context[35] = refalrts::brackets_left( context[33], context[34], context[31], context[32] );
        if( ! context[35] )
          continue;
        refalrts::bracket_pointers(context[35], context[36]);
        context[37] = 0;
        context[38] = 0;
        context[39] = refalrts::brackets_left( context[37], context[38], context[31], context[32] );
        if( ! context[39] )
          continue;
        refalrts::bracket_pointers(context[39], context[40]);
        if( ! refalrts::empty_seq( context[31], context[32] ) )
          continue;
        // closed e.2 as range 25
        // closed e.4 as range 27
        // closed e.1 as range 33
        // closed e.5 as range 37
        // closed e.Tail as range 29
        //DEBUG: t.: 23
        //DEBUG: e.2: 25
        //DEBUG: e.4: 27
        //DEBUG: e.1: 33
        //DEBUG: e.5: 37
        //DEBUG: e.Tail: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@10/4 AsIs: (/5 } Tile{ AsIs: e.Tail/29 } )/41 </42 & OptFunction\1=1/43 Tile{ AsIs: (/21 AsIs: e.2/25 AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1=2/9 AsIs: (/35 AsIs: e.1/33 AsIs: )/36 } Tile{ AsIs: t./23 } Tile{ AsIs: (/39 AsIs: e.5/37 AsIs: )/40 HalfReuse: </10 } & OptSentence$1=2:1@9/44 </45 & IsLexpr:1/46 </47 & IsLexpr-Aux/48 e.1/33/49 >/51 >/52 >/53 >/54 >/55 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[43], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_OptSentence_S1A2B1Z9]);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_IsLexpr_B1]);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_IsLexprm_Aux]);
        refalrts::copy_evar(vm, context[49], context[50], context[33], context[34]);
        refalrts::alloc_close_call(vm, context[51]);
        refalrts::alloc_close_call(vm, context[52]);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::alloc_close_call(vm, context[55]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z10]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1A2]);
        refalrts::reinit_open_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[55] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[51] );
        refalrts::push_stack( vm, context[47] );
        refalrts::link_brackets( context[39], context[40] );
        refalrts::link_brackets( context[35], context[36] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[41] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[44], context[55] );
        res = refalrts::splice_evar( res, context[39], context[10] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[21], context[36] );
        res = refalrts::splice_evar( res, context[41], context[43] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@10/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 t.Next/9 e.Tail/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2 as range 25
      // closed e.4 as range 27
      // closed e.Tail as range 29
      //DEBUG: t.: 23
      //DEBUG: t.Next: 9
      //DEBUG: e.2: 25
      //DEBUG: e.4: 27
      //DEBUG: e.Tail: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@10/4 AsIs: (/5 AsIs: t./23 AsIs: (/21 } Tile{ AsIs: e.2/25 } Tile{ AsIs: t.Next/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@10/4 t.Acc/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@10/4 } (/13 Tile{ AsIs: e.Tail/11 } )/14 </15 & OptFunction\1*1/16 (/17 # Inline/18 # None/19 )/20 Tile{ AsIs: t.Acc/5 AsIs: t.Next/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Inline]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_None]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@10/4 t.Acc/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@10/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@10/4 t.accum/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.accum: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # Inline/12 # None/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum/5 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z10("Reduce@10", COOKIE1_, COOKIE2_, func_gen_Reduce_Z10);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z17(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@17/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@17/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@17/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@17/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@17/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # Inline/18 # None/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z17("DoMapAccum$1=1@17", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z17);


static refalrts::FnResult func_gen_Reduce_Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & Reduce@11/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@11/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Reduce@11/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Reduce@11/4 (/5 t.new6/23 (/21 e.new7/19 )/22 (/17 e.new8/15 )/18 )/6 t.new9/9 e.new10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new7 as range 19
      // closed e.new8 as range 15
      // closed e.new10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@11/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 (/9 (/35 e.1/33 )/36 (/39 e.5/37 )/40 )/10 e.Tail/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[9] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        context[35] = refalrts::brackets_left( context[33], context[34], context[31], context[32] );
        if( ! context[35] )
          continue;
        refalrts::bracket_pointers(context[35], context[36]);
        context[37] = 0;
        context[38] = 0;
        context[39] = refalrts::brackets_left( context[37], context[38], context[31], context[32] );
        if( ! context[39] )
          continue;
        refalrts::bracket_pointers(context[39], context[40]);
        if( ! refalrts::empty_seq( context[31], context[32] ) )
          continue;
        // closed e.2 as range 25
        // closed e.4 as range 27
        // closed e.1 as range 33
        // closed e.5 as range 37
        // closed e.Tail as range 29
        //DEBUG: t.: 23
        //DEBUG: e.2: 25
        //DEBUG: e.4: 27
        //DEBUG: e.1: 33
        //DEBUG: e.5: 37
        //DEBUG: e.Tail: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@11/4 AsIs: (/5 } Tile{ AsIs: e.Tail/29 } )/41 </42 & OptFunction\1=1/43 Tile{ AsIs: (/21 AsIs: e.2/25 AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1=2/9 AsIs: (/35 AsIs: e.1/33 AsIs: )/36 } Tile{ AsIs: t./23 } Tile{ AsIs: (/39 AsIs: e.5/37 AsIs: )/40 HalfReuse: </10 } & OptSentence$1=2:1@10/44 </45 & IsLexpr:1/46 </47 & IsLexpr-Aux/48 e.1/33/49 >/51 >/52 >/53 >/54 >/55 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[43], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_OptSentence_S1A2B1Z10]);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_IsLexpr_B1]);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_IsLexprm_Aux]);
        refalrts::copy_evar(vm, context[49], context[50], context[33], context[34]);
        refalrts::alloc_close_call(vm, context[51]);
        refalrts::alloc_close_call(vm, context[52]);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::alloc_close_call(vm, context[55]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z11]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1A2]);
        refalrts::reinit_open_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[55] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[51] );
        refalrts::push_stack( vm, context[47] );
        refalrts::link_brackets( context[39], context[40] );
        refalrts::link_brackets( context[35], context[36] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[41] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[44], context[55] );
        res = refalrts::splice_evar( res, context[39], context[10] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[21], context[36] );
        res = refalrts::splice_evar( res, context[41], context[43] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@11/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 t.Next/9 e.Tail/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2 as range 25
      // closed e.4 as range 27
      // closed e.Tail as range 29
      //DEBUG: t.: 23
      //DEBUG: t.Next: 9
      //DEBUG: e.2: 25
      //DEBUG: e.4: 27
      //DEBUG: e.Tail: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@11/4 AsIs: (/5 AsIs: t./23 AsIs: (/21 } Tile{ AsIs: e.2/25 } Tile{ AsIs: t.Next/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@11/4 t.Acc/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@11/4 } (/13 Tile{ AsIs: e.Tail/11 } )/14 </15 & OptFunction\1*1/16 (/17 # Intrinsic/18 # Drive/19 )/20 Tile{ AsIs: t.Acc/5 AsIs: t.Next/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Intrinsic]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Drive]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@11/4 t.Acc/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@11/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@11/4 t.accum/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.accum: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # Intrinsic/12 # Drive/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum/5 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z11("Reduce@11", COOKIE1_, COOKIE2_, func_gen_Reduce_Z11);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z18(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@18/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@18/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@18/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@18/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z18]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@18/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # Intrinsic/18 # Drive/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z18("DoMapAccum$1=1@18", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z18);


static refalrts::FnResult func_gen_Reduce_Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & Reduce@12/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@12/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Reduce@12/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Reduce@12/4 (/5 t.new6/23 (/21 e.new7/19 )/22 (/17 e.new8/15 )/18 )/6 t.new9/9 e.new10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new7 as range 19
      // closed e.new8 as range 15
      // closed e.new10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@12/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 (/9 (/35 e.1/33 )/36 (/39 e.5/37 )/40 )/10 e.Tail/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[9] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        context[35] = refalrts::brackets_left( context[33], context[34], context[31], context[32] );
        if( ! context[35] )
          continue;
        refalrts::bracket_pointers(context[35], context[36]);
        context[37] = 0;
        context[38] = 0;
        context[39] = refalrts::brackets_left( context[37], context[38], context[31], context[32] );
        if( ! context[39] )
          continue;
        refalrts::bracket_pointers(context[39], context[40]);
        if( ! refalrts::empty_seq( context[31], context[32] ) )
          continue;
        // closed e.2 as range 25
        // closed e.4 as range 27
        // closed e.1 as range 33
        // closed e.5 as range 37
        // closed e.Tail as range 29
        //DEBUG: t.: 23
        //DEBUG: e.2: 25
        //DEBUG: e.4: 27
        //DEBUG: e.1: 33
        //DEBUG: e.5: 37
        //DEBUG: e.Tail: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@12/4 AsIs: (/5 } Tile{ AsIs: e.Tail/29 } )/41 </42 & OptFunction\1=1/43 Tile{ AsIs: (/21 AsIs: e.2/25 AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1=2/9 AsIs: (/35 AsIs: e.1/33 AsIs: )/36 } Tile{ AsIs: t./23 } Tile{ AsIs: (/39 AsIs: e.5/37 AsIs: )/40 HalfReuse: </10 } & OptSentence$1=2:1@11/44 </45 & IsLexpr:1/46 </47 & IsLexpr-Aux/48 e.1/33/49 >/51 >/52 >/53 >/54 >/55 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[43], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_OptSentence_S1A2B1Z11]);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_IsLexpr_B1]);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_IsLexprm_Aux]);
        refalrts::copy_evar(vm, context[49], context[50], context[33], context[34]);
        refalrts::alloc_close_call(vm, context[51]);
        refalrts::alloc_close_call(vm, context[52]);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::alloc_close_call(vm, context[55]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z12]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1A2]);
        refalrts::reinit_open_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[55] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[51] );
        refalrts::push_stack( vm, context[47] );
        refalrts::link_brackets( context[39], context[40] );
        refalrts::link_brackets( context[35], context[36] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[41] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[44], context[55] );
        res = refalrts::splice_evar( res, context[39], context[10] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[21], context[36] );
        res = refalrts::splice_evar( res, context[41], context[43] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@12/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 t.Next/9 e.Tail/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2 as range 25
      // closed e.4 as range 27
      // closed e.Tail as range 29
      //DEBUG: t.: 23
      //DEBUG: t.Next: 9
      //DEBUG: e.2: 25
      //DEBUG: e.4: 27
      //DEBUG: e.Tail: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@12/4 AsIs: (/5 AsIs: t./23 AsIs: (/21 } Tile{ AsIs: e.2/25 } Tile{ AsIs: t.Next/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@12/4 t.Acc/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@12/4 } (/13 Tile{ AsIs: e.Tail/11 } )/14 </15 & OptFunction\1*1/16 (/17 # Intrinsic/18 # Inline/19 )/20 Tile{ AsIs: t.Acc/5 AsIs: t.Next/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Intrinsic]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Inline]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@12/4 t.Acc/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@12/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@12/4 t.accum/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.accum: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # Intrinsic/12 # Inline/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum/5 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z12("Reduce@12", COOKIE1_, COOKIE2_, func_gen_Reduce_Z12);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z19(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@19/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@19/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@19/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@19/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z19]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@19/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # Intrinsic/18 # Inline/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z19("DoMapAccum$1=1@19", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z19);


static refalrts::FnResult func_gen_Reduce_Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & Reduce@13/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@13/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Reduce@13/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Reduce@13/4 (/5 t.new6/23 (/21 e.new7/19 )/22 (/17 e.new8/15 )/18 )/6 t.new9/9 e.new10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new7 as range 19
      // closed e.new8 as range 15
      // closed e.new10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@13/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 (/9 (/35 e.1/33 )/36 (/39 e.5/37 )/40 )/10 e.Tail/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[9] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        context[35] = refalrts::brackets_left( context[33], context[34], context[31], context[32] );
        if( ! context[35] )
          continue;
        refalrts::bracket_pointers(context[35], context[36]);
        context[37] = 0;
        context[38] = 0;
        context[39] = refalrts::brackets_left( context[37], context[38], context[31], context[32] );
        if( ! context[39] )
          continue;
        refalrts::bracket_pointers(context[39], context[40]);
        if( ! refalrts::empty_seq( context[31], context[32] ) )
          continue;
        // closed e.2 as range 25
        // closed e.4 as range 27
        // closed e.1 as range 33
        // closed e.5 as range 37
        // closed e.Tail as range 29
        //DEBUG: t.: 23
        //DEBUG: e.2: 25
        //DEBUG: e.4: 27
        //DEBUG: e.1: 33
        //DEBUG: e.5: 37
        //DEBUG: e.Tail: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@13/4 AsIs: (/5 } Tile{ AsIs: e.Tail/29 } )/41 </42 & OptFunction\1=1/43 Tile{ AsIs: (/21 AsIs: e.2/25 AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1=2/9 AsIs: (/35 AsIs: e.1/33 AsIs: )/36 } Tile{ AsIs: t./23 } Tile{ AsIs: (/39 AsIs: e.5/37 AsIs: )/40 HalfReuse: </10 } & OptSentence$1=2:1@12/44 </45 & IsLexpr:1/46 </47 & IsLexpr-Aux/48 e.1/33/49 >/51 >/52 >/53 >/54 >/55 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[43], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_OptSentence_S1A2B1Z12]);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_IsLexpr_B1]);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_IsLexprm_Aux]);
        refalrts::copy_evar(vm, context[49], context[50], context[33], context[34]);
        refalrts::alloc_close_call(vm, context[51]);
        refalrts::alloc_close_call(vm, context[52]);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::alloc_close_call(vm, context[55]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z13]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1A2]);
        refalrts::reinit_open_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[55] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[51] );
        refalrts::push_stack( vm, context[47] );
        refalrts::link_brackets( context[39], context[40] );
        refalrts::link_brackets( context[35], context[36] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[41] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[44], context[55] );
        res = refalrts::splice_evar( res, context[39], context[10] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[21], context[36] );
        res = refalrts::splice_evar( res, context[41], context[43] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@13/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 t.Next/9 e.Tail/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2 as range 25
      // closed e.4 as range 27
      // closed e.Tail as range 29
      //DEBUG: t.: 23
      //DEBUG: t.Next: 9
      //DEBUG: e.2: 25
      //DEBUG: e.4: 27
      //DEBUG: e.Tail: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@13/4 AsIs: (/5 AsIs: t./23 AsIs: (/21 } Tile{ AsIs: e.2/25 } Tile{ AsIs: t.Next/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@13/4 t.Acc/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@13/4 } (/13 Tile{ AsIs: e.Tail/11 } )/14 </15 & OptFunction\1*1/16 (/17 # Intrinsic/18 # Intrinsic/19 )/20 Tile{ AsIs: t.Acc/5 AsIs: t.Next/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Intrinsic]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Intrinsic]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@13/4 t.Acc/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@13/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@13/4 t.accum/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.accum: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # Intrinsic/12 # Intrinsic/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum/5 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z13("Reduce@13", COOKIE1_, COOKIE2_, func_gen_Reduce_Z13);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z20(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@20/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@20/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@20/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@20/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z20]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@20/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # Intrinsic/18 # Intrinsic/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z20("DoMapAccum$1=1@20", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z20);


static refalrts::FnResult func_gen_Reduce_Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & Reduce@14/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@14/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Reduce@14/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Reduce@14/4 (/5 t.new6/23 (/21 e.new7/19 )/22 (/17 e.new8/15 )/18 )/6 t.new9/9 e.new10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new7 as range 19
      // closed e.new8 as range 15
      // closed e.new10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@14/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 (/9 (/35 e.1/33 )/36 (/39 e.5/37 )/40 )/10 e.Tail/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[9] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        context[35] = refalrts::brackets_left( context[33], context[34], context[31], context[32] );
        if( ! context[35] )
          continue;
        refalrts::bracket_pointers(context[35], context[36]);
        context[37] = 0;
        context[38] = 0;
        context[39] = refalrts::brackets_left( context[37], context[38], context[31], context[32] );
        if( ! context[39] )
          continue;
        refalrts::bracket_pointers(context[39], context[40]);
        if( ! refalrts::empty_seq( context[31], context[32] ) )
          continue;
        // closed e.2 as range 25
        // closed e.4 as range 27
        // closed e.1 as range 33
        // closed e.5 as range 37
        // closed e.Tail as range 29
        //DEBUG: t.: 23
        //DEBUG: e.2: 25
        //DEBUG: e.4: 27
        //DEBUG: e.1: 33
        //DEBUG: e.5: 37
        //DEBUG: e.Tail: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@14/4 AsIs: (/5 } Tile{ AsIs: e.Tail/29 } )/41 </42 & OptFunction\1=1/43 Tile{ AsIs: (/21 AsIs: e.2/25 AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1=2/9 AsIs: (/35 AsIs: e.1/33 AsIs: )/36 } Tile{ AsIs: t./23 } Tile{ AsIs: (/39 AsIs: e.5/37 AsIs: )/40 HalfReuse: </10 } & OptSentence$1=2:1@13/44 </45 & IsLexpr:1/46 </47 & IsLexpr-Aux/48 e.1/33/49 >/51 >/52 >/53 >/54 >/55 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[43], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_OptSentence_S1A2B1Z13]);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_IsLexpr_B1]);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_IsLexprm_Aux]);
        refalrts::copy_evar(vm, context[49], context[50], context[33], context[34]);
        refalrts::alloc_close_call(vm, context[51]);
        refalrts::alloc_close_call(vm, context[52]);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::alloc_close_call(vm, context[55]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z14]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1A2]);
        refalrts::reinit_open_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[55] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[51] );
        refalrts::push_stack( vm, context[47] );
        refalrts::link_brackets( context[39], context[40] );
        refalrts::link_brackets( context[35], context[36] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[41] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[44], context[55] );
        res = refalrts::splice_evar( res, context[39], context[10] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[21], context[36] );
        res = refalrts::splice_evar( res, context[41], context[43] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@14/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 t.Next/9 e.Tail/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2 as range 25
      // closed e.4 as range 27
      // closed e.Tail as range 29
      //DEBUG: t.: 23
      //DEBUG: t.Next: 9
      //DEBUG: e.2: 25
      //DEBUG: e.4: 27
      //DEBUG: e.Tail: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@14/4 AsIs: (/5 AsIs: t./23 AsIs: (/21 } Tile{ AsIs: e.2/25 } Tile{ AsIs: t.Next/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@14/4 t.Acc/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@14/4 } (/13 Tile{ AsIs: e.Tail/11 } )/14 </15 & OptFunction\1*1/16 (/17 # Intrinsic/18 # None/19 )/20 Tile{ AsIs: t.Acc/5 AsIs: t.Next/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_Intrinsic]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_None]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z14]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@14/4 t.Acc/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@14/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@14/4 t.accum/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.accum: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # Intrinsic/12 # None/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum/5 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z14("Reduce@14", COOKIE1_, COOKIE2_, func_gen_Reduce_Z14);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z21(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@21/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@21/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@21/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@21/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z21]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@21/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # Intrinsic/18 # None/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z21("DoMapAccum$1=1@21", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z21);


static refalrts::FnResult func_gen_Reduce_Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & Reduce@15/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@15/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Reduce@15/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Reduce@15/4 (/5 t.new6/23 (/21 e.new7/19 )/22 (/17 e.new8/15 )/18 )/6 t.new9/9 e.new10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new7 as range 19
      // closed e.new8 as range 15
      // closed e.new10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@15/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 (/9 (/35 e.1/33 )/36 (/39 e.5/37 )/40 )/10 e.Tail/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[9] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        context[35] = refalrts::brackets_left( context[33], context[34], context[31], context[32] );
        if( ! context[35] )
          continue;
        refalrts::bracket_pointers(context[35], context[36]);
        context[37] = 0;
        context[38] = 0;
        context[39] = refalrts::brackets_left( context[37], context[38], context[31], context[32] );
        if( ! context[39] )
          continue;
        refalrts::bracket_pointers(context[39], context[40]);
        if( ! refalrts::empty_seq( context[31], context[32] ) )
          continue;
        // closed e.2 as range 25
        // closed e.4 as range 27
        // closed e.1 as range 33
        // closed e.5 as range 37
        // closed e.Tail as range 29
        //DEBUG: t.: 23
        //DEBUG: e.2: 25
        //DEBUG: e.4: 27
        //DEBUG: e.1: 33
        //DEBUG: e.5: 37
        //DEBUG: e.Tail: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@15/4 AsIs: (/5 } Tile{ AsIs: e.Tail/29 } )/41 </42 & OptFunction\1=1/43 Tile{ AsIs: (/21 AsIs: e.2/25 AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1=2/9 AsIs: (/35 AsIs: e.1/33 AsIs: )/36 } Tile{ AsIs: t./23 } Tile{ AsIs: (/39 AsIs: e.5/37 AsIs: )/40 HalfReuse: </10 } & OptSentence$1=2:1@14/44 </45 & IsLexpr:1/46 </47 & IsLexpr-Aux/48 e.1/33/49 >/51 >/52 >/53 >/54 >/55 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[43], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_OptSentence_S1A2B1Z14]);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_IsLexpr_B1]);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_IsLexprm_Aux]);
        refalrts::copy_evar(vm, context[49], context[50], context[33], context[34]);
        refalrts::alloc_close_call(vm, context[51]);
        refalrts::alloc_close_call(vm, context[52]);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::alloc_close_call(vm, context[55]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z15]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1A2]);
        refalrts::reinit_open_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[55] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[51] );
        refalrts::push_stack( vm, context[47] );
        refalrts::link_brackets( context[39], context[40] );
        refalrts::link_brackets( context[35], context[36] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[41] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[44], context[55] );
        res = refalrts::splice_evar( res, context[39], context[10] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[21], context[36] );
        res = refalrts::splice_evar( res, context[41], context[43] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@15/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 t.Next/9 e.Tail/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2 as range 25
      // closed e.4 as range 27
      // closed e.Tail as range 29
      //DEBUG: t.: 23
      //DEBUG: t.Next: 9
      //DEBUG: e.2: 25
      //DEBUG: e.4: 27
      //DEBUG: e.Tail: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@15/4 AsIs: (/5 AsIs: t./23 AsIs: (/21 } Tile{ AsIs: e.2/25 } Tile{ AsIs: t.Next/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@15/4 t.Acc/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@15/4 } (/13 Tile{ AsIs: e.Tail/11 } )/14 </15 & OptFunction\1*1/16 (/17 # None/18 # Drive/19 )/20 Tile{ AsIs: t.Acc/5 AsIs: t.Next/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_None]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Drive]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@15/4 t.Acc/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@15/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@15/4 t.accum/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.accum: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # None/12 # Drive/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum/5 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z15("Reduce@15", COOKIE1_, COOKIE2_, func_gen_Reduce_Z15);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z22(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@22/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@22/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@22/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@22/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z22]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@22/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # None/18 # Drive/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z22("DoMapAccum$1=1@22", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z22);


static refalrts::FnResult func_gen_Reduce_Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & Reduce@16/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@16/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Reduce@16/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Reduce@16/4 (/5 t.new6/23 (/21 e.new7/19 )/22 (/17 e.new8/15 )/18 )/6 t.new9/9 e.new10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new7 as range 19
      // closed e.new8 as range 15
      // closed e.new10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@16/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 (/9 (/35 e.1/33 )/36 (/39 e.5/37 )/40 )/10 e.Tail/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[9] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        context[35] = refalrts::brackets_left( context[33], context[34], context[31], context[32] );
        if( ! context[35] )
          continue;
        refalrts::bracket_pointers(context[35], context[36]);
        context[37] = 0;
        context[38] = 0;
        context[39] = refalrts::brackets_left( context[37], context[38], context[31], context[32] );
        if( ! context[39] )
          continue;
        refalrts::bracket_pointers(context[39], context[40]);
        if( ! refalrts::empty_seq( context[31], context[32] ) )
          continue;
        // closed e.2 as range 25
        // closed e.4 as range 27
        // closed e.1 as range 33
        // closed e.5 as range 37
        // closed e.Tail as range 29
        //DEBUG: t.: 23
        //DEBUG: e.2: 25
        //DEBUG: e.4: 27
        //DEBUG: e.1: 33
        //DEBUG: e.5: 37
        //DEBUG: e.Tail: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@16/4 AsIs: (/5 } Tile{ AsIs: e.Tail/29 } )/41 </42 & OptFunction\1=1/43 Tile{ AsIs: (/21 AsIs: e.2/25 AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1=2/9 AsIs: (/35 AsIs: e.1/33 AsIs: )/36 } Tile{ AsIs: t./23 } Tile{ AsIs: (/39 AsIs: e.5/37 AsIs: )/40 HalfReuse: </10 } & OptSentence$1=2:1@15/44 </45 & IsLexpr:1/46 </47 & IsLexpr-Aux/48 e.1/33/49 >/51 >/52 >/53 >/54 >/55 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[43], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_OptSentence_S1A2B1Z15]);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_IsLexpr_B1]);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_IsLexprm_Aux]);
        refalrts::copy_evar(vm, context[49], context[50], context[33], context[34]);
        refalrts::alloc_close_call(vm, context[51]);
        refalrts::alloc_close_call(vm, context[52]);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::alloc_close_call(vm, context[55]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z16]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1A2]);
        refalrts::reinit_open_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[55] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[51] );
        refalrts::push_stack( vm, context[47] );
        refalrts::link_brackets( context[39], context[40] );
        refalrts::link_brackets( context[35], context[36] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[41] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[44], context[55] );
        res = refalrts::splice_evar( res, context[39], context[10] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[21], context[36] );
        res = refalrts::splice_evar( res, context[41], context[43] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@16/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 t.Next/9 e.Tail/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2 as range 25
      // closed e.4 as range 27
      // closed e.Tail as range 29
      //DEBUG: t.: 23
      //DEBUG: t.Next: 9
      //DEBUG: e.2: 25
      //DEBUG: e.4: 27
      //DEBUG: e.Tail: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@16/4 AsIs: (/5 AsIs: t./23 AsIs: (/21 } Tile{ AsIs: e.2/25 } Tile{ AsIs: t.Next/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@16/4 t.Acc/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@16/4 } (/13 Tile{ AsIs: e.Tail/11 } )/14 </15 & OptFunction\1*1/16 (/17 # None/18 # Inline/19 )/20 Tile{ AsIs: t.Acc/5 AsIs: t.Next/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_None]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Inline]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@16/4 t.Acc/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@16/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@16/4 t.accum/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.accum: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # None/12 # Inline/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum/5 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z16("Reduce@16", COOKIE1_, COOKIE2_, func_gen_Reduce_Z16);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z23(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@23/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@23/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@23/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@23/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@23/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # None/18 # Inline/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z23("DoMapAccum$1=1@23", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z23);


static refalrts::FnResult func_gen_Reduce_Z17(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & Reduce@17/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@17/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Reduce@17/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Reduce@17/4 (/5 t.new6/23 (/21 e.new7/19 )/22 (/17 e.new8/15 )/18 )/6 t.new9/9 e.new10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new7 as range 19
      // closed e.new8 as range 15
      // closed e.new10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@17/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 (/9 (/35 e.1/33 )/36 (/39 e.5/37 )/40 )/10 e.Tail/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[9] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        context[35] = refalrts::brackets_left( context[33], context[34], context[31], context[32] );
        if( ! context[35] )
          continue;
        refalrts::bracket_pointers(context[35], context[36]);
        context[37] = 0;
        context[38] = 0;
        context[39] = refalrts::brackets_left( context[37], context[38], context[31], context[32] );
        if( ! context[39] )
          continue;
        refalrts::bracket_pointers(context[39], context[40]);
        if( ! refalrts::empty_seq( context[31], context[32] ) )
          continue;
        // closed e.2 as range 25
        // closed e.4 as range 27
        // closed e.1 as range 33
        // closed e.5 as range 37
        // closed e.Tail as range 29
        //DEBUG: t.: 23
        //DEBUG: e.2: 25
        //DEBUG: e.4: 27
        //DEBUG: e.1: 33
        //DEBUG: e.5: 37
        //DEBUG: e.Tail: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@17/4 AsIs: (/5 } Tile{ AsIs: e.Tail/29 } )/41 </42 & OptFunction\1=1/43 Tile{ AsIs: (/21 AsIs: e.2/25 AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1=2/9 AsIs: (/35 AsIs: e.1/33 AsIs: )/36 } Tile{ AsIs: t./23 } Tile{ AsIs: (/39 AsIs: e.5/37 AsIs: )/40 HalfReuse: </10 } & OptSentence$1=2:1@16/44 </45 & IsLexpr:1/46 </47 & IsLexpr-Aux/48 e.1/33/49 >/51 >/52 >/53 >/54 >/55 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[43], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_OptSentence_S1A2B1Z16]);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_IsLexpr_B1]);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_IsLexprm_Aux]);
        refalrts::copy_evar(vm, context[49], context[50], context[33], context[34]);
        refalrts::alloc_close_call(vm, context[51]);
        refalrts::alloc_close_call(vm, context[52]);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::alloc_close_call(vm, context[55]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z17]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1A2]);
        refalrts::reinit_open_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[55] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[51] );
        refalrts::push_stack( vm, context[47] );
        refalrts::link_brackets( context[39], context[40] );
        refalrts::link_brackets( context[35], context[36] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[41] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[44], context[55] );
        res = refalrts::splice_evar( res, context[39], context[10] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[21], context[36] );
        res = refalrts::splice_evar( res, context[41], context[43] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@17/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 t.Next/9 e.Tail/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2 as range 25
      // closed e.4 as range 27
      // closed e.Tail as range 29
      //DEBUG: t.: 23
      //DEBUG: t.Next: 9
      //DEBUG: e.2: 25
      //DEBUG: e.4: 27
      //DEBUG: e.Tail: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@17/4 AsIs: (/5 AsIs: t./23 AsIs: (/21 } Tile{ AsIs: e.2/25 } Tile{ AsIs: t.Next/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@17/4 t.Acc/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@17/4 } (/13 Tile{ AsIs: e.Tail/11 } )/14 </15 & OptFunction\1*1/16 (/17 # None/18 # Intrinsic/19 )/20 Tile{ AsIs: t.Acc/5 AsIs: t.Next/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_None]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_Intrinsic]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@17/4 t.Acc/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@17/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@17/4 t.accum/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.accum: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # None/12 # Intrinsic/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum/5 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z17("Reduce@17", COOKIE1_, COOKIE2_, func_gen_Reduce_Z17);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z24(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@24/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@24/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@24/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@24/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z24]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@24/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # None/18 # Intrinsic/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z24("DoMapAccum$1=1@24", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z24);


static refalrts::FnResult func_gen_Reduce_Z18(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 56 elems
  refalrts::Iter context[56];
  refalrts::zeros( context, 56 );
  // </0 & Reduce@18/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce@18/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Reduce@18/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Reduce@18/4 (/5 t.new6/23 (/21 e.new7/19 )/22 (/17 e.new8/15 )/18 )/6 t.new9/9 e.new10/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      context[15] = 0;
      context[16] = 0;
      context[17] = refalrts::brackets_right( context[15], context[16], context[13], context[14] );
      if( ! context[17] )
        continue;
      refalrts::bracket_pointers(context[17], context[18]);
      context[19] = 0;
      context[20] = 0;
      context[21] = refalrts::brackets_right( context[19], context[20], context[13], context[14] );
      if( ! context[21] )
        continue;
      refalrts::bracket_pointers(context[21], context[22]);
      // closed e.new7 as range 19
      // closed e.new8 as range 15
      // closed e.new10 as range 11
      context[24] = refalrts::tvar_left( context[23], context[13], context[14] );
      if( ! context[24] )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & Reduce@18/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 (/9 (/35 e.1/33 )/36 (/39 e.5/37 )/40 )/10 e.Tail/29 >/1
        context[25] = context[19];
        context[26] = context[20];
        context[27] = context[15];
        context[28] = context[16];
        context[29] = context[11];
        context[30] = context[12];
        context[31] = 0;
        context[32] = 0;
        if( ! refalrts::brackets_term( context[31], context[32], context[9] ) )
          continue;
        context[33] = 0;
        context[34] = 0;
        context[35] = refalrts::brackets_left( context[33], context[34], context[31], context[32] );
        if( ! context[35] )
          continue;
        refalrts::bracket_pointers(context[35], context[36]);
        context[37] = 0;
        context[38] = 0;
        context[39] = refalrts::brackets_left( context[37], context[38], context[31], context[32] );
        if( ! context[39] )
          continue;
        refalrts::bracket_pointers(context[39], context[40]);
        if( ! refalrts::empty_seq( context[31], context[32] ) )
          continue;
        // closed e.2 as range 25
        // closed e.4 as range 27
        // closed e.1 as range 33
        // closed e.5 as range 37
        // closed e.Tail as range 29
        //DEBUG: t.: 23
        //DEBUG: e.2: 25
        //DEBUG: e.4: 27
        //DEBUG: e.1: 33
        //DEBUG: e.5: 37
        //DEBUG: e.Tail: 29

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@18/4 AsIs: (/5 } Tile{ AsIs: e.Tail/29 } )/41 </42 & OptFunction\1=1/43 Tile{ AsIs: (/21 AsIs: e.2/25 AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 HalfReuse: </6 HalfReuse: & OptSentence$1=2/9 AsIs: (/35 AsIs: e.1/33 AsIs: )/36 } Tile{ AsIs: t./23 } Tile{ AsIs: (/39 AsIs: e.5/37 AsIs: )/40 HalfReuse: </10 } & OptSentence$1=2:1@17/44 </45 & IsLexpr:1/46 </47 & IsLexpr-Aux/48 e.1/33/49 >/51 >/52 >/53 >/54 >/55 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[41]);
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_name(vm, context[43], functions[efunc_gen_OptFunction_L1A1]);
        refalrts::alloc_name(vm, context[44], functions[efunc_gen_OptSentence_S1A2B1Z17]);
        refalrts::alloc_open_call(vm, context[45]);
        refalrts::alloc_name(vm, context[46], functions[efunc_gen_IsLexpr_B1]);
        refalrts::alloc_open_call(vm, context[47]);
        refalrts::alloc_name(vm, context[48], functions[efunc_IsLexprm_Aux]);
        refalrts::copy_evar(vm, context[49], context[50], context[33], context[34]);
        refalrts::alloc_close_call(vm, context[51]);
        refalrts::alloc_close_call(vm, context[52]);
        refalrts::alloc_close_call(vm, context[53]);
        refalrts::alloc_close_call(vm, context[54]);
        refalrts::alloc_close_call(vm, context[55]);
        refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z18]);
        refalrts::reinit_open_call(context[6]);
        refalrts::reinit_name(context[9], functions[efunc_gen_OptSentence_S1A2]);
        refalrts::reinit_open_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[55] );
        refalrts::push_stack( vm, context[42] );
        refalrts::push_stack( vm, context[54] );
        refalrts::push_stack( vm, context[6] );
        refalrts::push_stack( vm, context[53] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[52] );
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[51] );
        refalrts::push_stack( vm, context[47] );
        refalrts::link_brackets( context[39], context[40] );
        refalrts::link_brackets( context[35], context[36] );
        refalrts::link_brackets( context[17], context[18] );
        refalrts::link_brackets( context[21], context[22] );
        refalrts::link_brackets( context[5], context[41] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[44], context[55] );
        res = refalrts::splice_evar( res, context[39], context[10] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[21], context[36] );
        res = refalrts::splice_evar( res, context[41], context[43] );
        res = refalrts::splice_evar( res, context[29], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Reduce@18/4 (/5 t./23 (/21 e.2/25 )/22 (/17 e.4/27 )/18 )/6 t.Next/9 e.Tail/29 >/1
      context[25] = context[19];
      context[26] = context[20];
      context[27] = context[15];
      context[28] = context[16];
      context[29] = context[11];
      context[30] = context[12];
      // closed e.2 as range 25
      // closed e.4 as range 27
      // closed e.Tail as range 29
      //DEBUG: t.: 23
      //DEBUG: t.Next: 9
      //DEBUG: e.2: 25
      //DEBUG: e.4: 27
      //DEBUG: e.Tail: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 AsIs: & Reduce@18/4 AsIs: (/5 AsIs: t./23 AsIs: (/21 } Tile{ AsIs: e.2/25 } Tile{ AsIs: t.Next/9 } Tile{ AsIs: )/22 AsIs: (/17 AsIs: e.4/27 AsIs: )/18 AsIs: )/6 } Tile{ AsIs: e.Tail/29 } Tile{ AsIs: >/1 ]] }
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::link_brackets( context[17], context[18] );
      refalrts::link_brackets( context[21], context[22] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[29], context[30] );
      res = refalrts::splice_evar( res, context[22], context[6] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[25], context[26] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Reduce@18/4 t.Acc/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce$1=1@18/4 } (/13 Tile{ AsIs: e.Tail/11 } )/14 </15 & OptFunction\1*1/16 (/17 # None/18 # None/19 )/20 Tile{ AsIs: t.Acc/5 AsIs: t.Next/9 } >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_close_bracket(vm, context[14]);
    refalrts::alloc_open_call(vm, context[15]);
    refalrts::alloc_name(vm, context[16], functions[efunc_gen_OptFunction_L1D1]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_ident(vm, context[18], identifiers[ident_None]);
    refalrts::alloc_ident(vm, context[19], identifiers[ident_None]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_S1A1Z18]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[17], context[20] );
    refalrts::link_brackets( context[13], context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[5], context[10] );
    res = refalrts::splice_evar( res, context[14], context[20] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Reduce@18/4 t.Acc/5 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    //DEBUG: t.Acc: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Reduce@18/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce@18/4 t.accum/5 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: t.accum: 5
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 & Reduce@0/8 [*]/9 & OptFunction\1@0/10 (/11 # None/12 # None/13 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: t.accum/5 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Reduce_Z0]);
  refalrts::alloc_closure_head(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[11]);
  refalrts::alloc_ident(vm, context[12], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[13], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[9]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[11], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[7], context[13] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_Z18("Reduce@18", COOKIE1_, COOKIE2_, func_gen_Reduce_Z18);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z25(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@25/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@25/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@25/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@25/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z25]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@25/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & DoMapAccum$1=1@0/14 [*]/15 & DriveInlineOptimizerTick=3\1@0/16 (/17 # None/18 # None/19 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[15]);
  refalrts::alloc_name(vm, context[16], functions[efunc_gen_DriveInlineOptimizerTick_A3L1Z0]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::alloc_ident(vm, context[18], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[19], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[15]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[19] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z25("DoMapAccum$1=1@25", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z25);


static refalrts::FnResult func_gen_UpdateDriveInfo_A3Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & UpdateDriveInfo=3@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UpdateDriveInfo=3@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & UpdateDriveInfo=3@1/4 (/7 e.Inlines0/13 )/8 (/11 e.Drives0/15 )/12 (/21 e.Intrinsics/19 )/22 e.AST$c/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.Inlines0 as range 13
    // closed e.Drives0 as range 15
    // closed e.Intrinsics as range 19
    // closed e.AST$c as range 17
    //DEBUG: e.Inlines0: 13
    //DEBUG: e.Drives0: 15
    //DEBUG: e.Intrinsics: 19
    //DEBUG: e.AST$c: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & UpdateDriveInfo=4@1/23 (/24 Tile{ AsIs: e.Intrinsics/19 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Inlines0/13 AsIs: )/8 AsIs: (/11 AsIs: e.Drives0/15 AsIs: )/12 HalfReuse: </21 } & DoMapAccum@4/25 (/26 )/27 (/28 Tile{ AsIs: )/22 AsIs: e.AST$c/17 AsIs: >/1 } >/29 Tile{ ]] }
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_UpdateDriveInfo_A4Z1]);
    refalrts::alloc_open_bracket(vm, context[24]);
    refalrts::alloc_name(vm, context[25], functions[efunc_gen_DoMapAccum_Z4]);
    refalrts::alloc_open_bracket(vm, context[26]);
    refalrts::alloc_close_bracket(vm, context[27]);
    refalrts::alloc_open_bracket(vm, context[28]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_call(context[21]);
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[28], context[22] );
    refalrts::link_brackets( context[26], context[27] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[24], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[29] );
    res = refalrts::splice_evar( res, context[22], context[1] );
    res = refalrts::splice_evar( res, context[25], context[28] );
    res = refalrts::splice_evar( res, context[4], context[21] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=3@1/4 (/7 e.Inlines0/5 )/8 (/11 e.Drives0/9 )/12 e.dyn/2 >/1
  // closed e.Inlines0 as range 5
  // closed e.Drives0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Inlines0: 5
  //DEBUG: e.Drives0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 & UpdateDriveInfo=3@0/14 (/15 )/16 (/17 Tile{ HalfReuse: 101/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.Inlines0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Drives0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_gen_UpdateDriveInfo_A3Z0]);
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_close_bracket(vm, context[16]);
  refalrts::alloc_open_bracket(vm, context[17]);
  refalrts::reinit_number(context[0], 101UL);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[17], context[4] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[13], context[17] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A3Z1("UpdateDriveInfo=3@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A3Z1);


static refalrts::FnResult func_gen_OptSentence_S1A2B1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & OptSentence$1=2:1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & OptSentence$1=2:1@2/4 s.new1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & OptSentence$1=2:1@2/4 # True/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_True], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Drive/4 Reuse: # Drive/7 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Drive]);
      refalrts::update_ident(context[7], identifiers[ident_Drive]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1=2:1@2/4 # False/7 >/1
    if( ! refalrts::ident_term( identifiers[ident_False], context[7] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Inline/4 Reuse: # Drive/7 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
    refalrts::update_ident(context[7], identifiers[ident_Drive]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1=2:1@2/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & OptSentence$1=2:1@0/6 (/7 # Drive/8 # Drive/9 Tile{ HalfReuse: )/0 HalfReuse: # Drive/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_OptSentence_S1A2B1Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_ident(vm, context[8], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Drive]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[7], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1A2B1Z2("OptSentence$1=2:1@2", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1A2B1Z2);


static refalrts::FnResult func_gen_Reduce_S1A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@3/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Reduce$1=1@3/4 (/7 e.Tail0/9 )/8 t.Acc$a/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0: 9
    //DEBUG: t.Acc$a: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@3/4 } Tile{ AsIs: t.Acc$a/13 } Tile{ AsIs: e.Tail0/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z3]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@3/4 (/7 e.Tail0/5 )/8 e.dyn/2 >/1
  // closed e.Tail0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Tail0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # Drive/14 # Drive/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z3("Reduce$1=1@3", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z3);


static refalrts::FnResult func_gen_OptSentence_S1A2B1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & OptSentence$1=2:1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & OptSentence$1=2:1@3/4 s.new1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & OptSentence$1=2:1@3/4 # True/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_True], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Drive/4 Reuse: # Inline/7 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Drive]);
      refalrts::update_ident(context[7], identifiers[ident_Inline]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1=2:1@3/4 # False/7 >/1
    if( ! refalrts::ident_term( identifiers[ident_False], context[7] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Inline/4 Reuse: # Inline/7 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
    refalrts::update_ident(context[7], identifiers[ident_Inline]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1=2:1@3/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & OptSentence$1=2:1@0/6 (/7 # Drive/8 # Inline/9 Tile{ HalfReuse: )/0 HalfReuse: # Inline/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_OptSentence_S1A2B1Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_ident(vm, context[8], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[7], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1A2B1Z3("OptSentence$1=2:1@3", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1A2B1Z3);


static refalrts::FnResult func_gen_Reduce_S1A1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@4/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Reduce$1=1@4/4 (/7 e.Tail0/9 )/8 t.Acc$a/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0: 9
    //DEBUG: t.Acc$a: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@4/4 } Tile{ AsIs: t.Acc$a/13 } Tile{ AsIs: e.Tail0/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@4/4 (/7 e.Tail0/5 )/8 e.dyn/2 >/1
  // closed e.Tail0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Tail0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # Drive/14 # Inline/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z4("Reduce$1=1@4", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z4);


static refalrts::FnResult func_gen_OptSentence_S1A2B1Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & OptSentence$1=2:1@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & OptSentence$1=2:1@4/4 s.new1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & OptSentence$1=2:1@4/4 # True/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_True], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Drive/4 Reuse: # Intrinsic/7 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Drive]);
      refalrts::update_ident(context[7], identifiers[ident_Intrinsic]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1=2:1@4/4 # False/7 >/1
    if( ! refalrts::ident_term( identifiers[ident_False], context[7] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Inline/4 Reuse: # Intrinsic/7 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
    refalrts::update_ident(context[7], identifiers[ident_Intrinsic]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1=2:1@4/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & OptSentence$1=2:1@0/6 (/7 # Drive/8 # Intrinsic/9 Tile{ HalfReuse: )/0 HalfReuse: # Intrinsic/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_OptSentence_S1A2B1Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_ident(vm, context[8], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Intrinsic]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[7], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1A2B1Z4("OptSentence$1=2:1@4", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1A2B1Z4);


static refalrts::FnResult func_gen_Reduce_S1A1Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@5/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Reduce$1=1@5/4 (/7 e.Tail0/9 )/8 t.Acc$a/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0: 9
    //DEBUG: t.Acc$a: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@5/4 } Tile{ AsIs: t.Acc$a/13 } Tile{ AsIs: e.Tail0/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@5/4 (/7 e.Tail0/5 )/8 e.dyn/2 >/1
  // closed e.Tail0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Tail0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # Drive/14 # Intrinsic/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z5("Reduce$1=1@5", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z5);


static refalrts::FnResult func_gen_OptSentence_S1A2B1Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & OptSentence$1=2:1@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & OptSentence$1=2:1@5/4 s.new1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & OptSentence$1=2:1@5/4 # True/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_True], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Drive/4 Reuse: # None/7 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Drive]);
      refalrts::update_ident(context[7], identifiers[ident_None]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1=2:1@5/4 # False/7 >/1
    if( ! refalrts::ident_term( identifiers[ident_False], context[7] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Inline/4 Reuse: # None/7 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
    refalrts::update_ident(context[7], identifiers[ident_None]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1=2:1@5/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & OptSentence$1=2:1@0/6 (/7 # Drive/8 # None/9 Tile{ HalfReuse: )/0 HalfReuse: # None/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_OptSentence_S1A2B1Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_ident(vm, context[8], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_None]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[7], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1A2B1Z5("OptSentence$1=2:1@5", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1A2B1Z5);


static refalrts::FnResult func_gen_Reduce_S1A1Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@6/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Reduce$1=1@6/4 (/7 e.Tail0/9 )/8 t.Acc$a/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0: 9
    //DEBUG: t.Acc$a: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@6/4 } Tile{ AsIs: t.Acc$a/13 } Tile{ AsIs: e.Tail0/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z6]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@6/4 (/7 e.Tail0/5 )/8 e.dyn/2 >/1
  // closed e.Tail0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Tail0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # Drive/14 # None/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Drive]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z6("Reduce$1=1@6", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z6);


static refalrts::FnResult func_gen_OptSentence_S1A2B1Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & OptSentence$1=2:1@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & OptSentence$1=2:1@6/4 s.new1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & OptSentence$1=2:1@6/4 # True/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_True], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Inline/4 Reuse: # Drive/7 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
      refalrts::update_ident(context[7], identifiers[ident_Drive]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1=2:1@6/4 # False/7 >/1
    if( ! refalrts::ident_term( identifiers[ident_False], context[7] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Inline/4 Reuse: # Drive/7 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
    refalrts::update_ident(context[7], identifiers[ident_Drive]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1=2:1@6/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & OptSentence$1=2:1@0/6 (/7 # Inline/8 # Drive/9 Tile{ HalfReuse: )/0 HalfReuse: # Drive/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_OptSentence_S1A2B1Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_ident(vm, context[8], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Drive]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[7], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1A2B1Z6("OptSentence$1=2:1@6", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1A2B1Z6);


static refalrts::FnResult func_gen_Reduce_S1A1Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@7/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Reduce$1=1@7/4 (/7 e.Tail0/9 )/8 t.Acc$a/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0: 9
    //DEBUG: t.Acc$a: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@7/4 } Tile{ AsIs: t.Acc$a/13 } Tile{ AsIs: e.Tail0/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z7]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@7/4 (/7 e.Tail0/5 )/8 e.dyn/2 >/1
  // closed e.Tail0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Tail0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # Inline/14 # Drive/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z7("Reduce$1=1@7", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z7);


static refalrts::FnResult func_gen_OptSentence_S1A2B1Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & OptSentence$1=2:1@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & OptSentence$1=2:1@7/4 s.new1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & OptSentence$1=2:1@7/4 # True/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_True], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Inline/4 Reuse: # Inline/7 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
      refalrts::update_ident(context[7], identifiers[ident_Inline]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1=2:1@7/4 # False/7 >/1
    if( ! refalrts::ident_term( identifiers[ident_False], context[7] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Inline/4 Reuse: # Inline/7 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
    refalrts::update_ident(context[7], identifiers[ident_Inline]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1=2:1@7/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & OptSentence$1=2:1@0/6 (/7 # Inline/8 # Inline/9 Tile{ HalfReuse: )/0 HalfReuse: # Inline/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_OptSentence_S1A2B1Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_ident(vm, context[8], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[7], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1A2B1Z7("OptSentence$1=2:1@7", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1A2B1Z7);


static refalrts::FnResult func_gen_Reduce_S1A1Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@8/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@8/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Reduce$1=1@8/4 (/7 e.Tail0/9 )/8 t.Acc$a/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0: 9
    //DEBUG: t.Acc$a: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@8/4 } Tile{ AsIs: t.Acc$a/13 } Tile{ AsIs: e.Tail0/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@8/4 (/7 e.Tail0/5 )/8 e.dyn/2 >/1
  // closed e.Tail0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Tail0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # Inline/14 # Inline/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z8("Reduce$1=1@8", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z8);


static refalrts::FnResult func_gen_OptSentence_S1A2B1Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & OptSentence$1=2:1@8/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & OptSentence$1=2:1@8/4 s.new1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & OptSentence$1=2:1@8/4 # True/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_True], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Inline/4 Reuse: # Intrinsic/7 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
      refalrts::update_ident(context[7], identifiers[ident_Intrinsic]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1=2:1@8/4 # False/7 >/1
    if( ! refalrts::ident_term( identifiers[ident_False], context[7] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Inline/4 Reuse: # Intrinsic/7 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
    refalrts::update_ident(context[7], identifiers[ident_Intrinsic]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1=2:1@8/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & OptSentence$1=2:1@0/6 (/7 # Inline/8 # Intrinsic/9 Tile{ HalfReuse: )/0 HalfReuse: # Intrinsic/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_OptSentence_S1A2B1Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_ident(vm, context[8], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Intrinsic]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[7], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1A2B1Z8("OptSentence$1=2:1@8", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1A2B1Z8);


static refalrts::FnResult func_gen_Reduce_S1A1Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@9/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@9/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Reduce$1=1@9/4 (/7 e.Tail0/9 )/8 t.Acc$a/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0: 9
    //DEBUG: t.Acc$a: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@9/4 } Tile{ AsIs: t.Acc$a/13 } Tile{ AsIs: e.Tail0/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z9]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@9/4 (/7 e.Tail0/5 )/8 e.dyn/2 >/1
  // closed e.Tail0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Tail0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # Inline/14 # Intrinsic/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z9("Reduce$1=1@9", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z9);


static refalrts::FnResult func_gen_OptSentence_S1A2B1Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & OptSentence$1=2:1@9/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & OptSentence$1=2:1@9/4 s.new1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & OptSentence$1=2:1@9/4 # True/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_True], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Inline/4 Reuse: # None/7 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
      refalrts::update_ident(context[7], identifiers[ident_None]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1=2:1@9/4 # False/7 >/1
    if( ! refalrts::ident_term( identifiers[ident_False], context[7] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Inline/4 Reuse: # None/7 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
    refalrts::update_ident(context[7], identifiers[ident_None]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1=2:1@9/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & OptSentence$1=2:1@0/6 (/7 # Inline/8 # None/9 Tile{ HalfReuse: )/0 HalfReuse: # None/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_OptSentence_S1A2B1Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_ident(vm, context[8], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_None]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[7], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1A2B1Z9("OptSentence$1=2:1@9", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1A2B1Z9);


static refalrts::FnResult func_gen_Reduce_S1A1Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@10/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@10/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Reduce$1=1@10/4 (/7 e.Tail0/9 )/8 t.Acc$a/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0: 9
    //DEBUG: t.Acc$a: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@10/4 } Tile{ AsIs: t.Acc$a/13 } Tile{ AsIs: e.Tail0/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z10]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@10/4 (/7 e.Tail0/5 )/8 e.dyn/2 >/1
  // closed e.Tail0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Tail0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # Inline/14 # None/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Inline]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z10("Reduce$1=1@10", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z10);


static refalrts::FnResult func_gen_OptSentence_S1A2B1Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & OptSentence$1=2:1@10/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & OptSentence$1=2:1@10/4 s.new1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & OptSentence$1=2:1@10/4 # True/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_True], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Intrinsic/4 Reuse: # Drive/7 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Intrinsic]);
      refalrts::update_ident(context[7], identifiers[ident_Drive]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1=2:1@10/4 # False/7 >/1
    if( ! refalrts::ident_term( identifiers[ident_False], context[7] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Inline/4 Reuse: # Drive/7 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
    refalrts::update_ident(context[7], identifiers[ident_Drive]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1=2:1@10/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & OptSentence$1=2:1@0/6 (/7 # Intrinsic/8 # Drive/9 Tile{ HalfReuse: )/0 HalfReuse: # Drive/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_OptSentence_S1A2B1Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_ident(vm, context[8], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Drive]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[7], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1A2B1Z10("OptSentence$1=2:1@10", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1A2B1Z10);


static refalrts::FnResult func_gen_Reduce_S1A1Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@11/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@11/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Reduce$1=1@11/4 (/7 e.Tail0/9 )/8 t.Acc$a/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0: 9
    //DEBUG: t.Acc$a: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@11/4 } Tile{ AsIs: t.Acc$a/13 } Tile{ AsIs: e.Tail0/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z11]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@11/4 (/7 e.Tail0/5 )/8 e.dyn/2 >/1
  // closed e.Tail0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Tail0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # Intrinsic/14 # Drive/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z11("Reduce$1=1@11", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z11);


static refalrts::FnResult func_gen_OptSentence_S1A2B1Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & OptSentence$1=2:1@11/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & OptSentence$1=2:1@11/4 s.new1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & OptSentence$1=2:1@11/4 # True/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_True], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Intrinsic/4 Reuse: # Inline/7 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Intrinsic]);
      refalrts::update_ident(context[7], identifiers[ident_Inline]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1=2:1@11/4 # False/7 >/1
    if( ! refalrts::ident_term( identifiers[ident_False], context[7] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Inline/4 Reuse: # Inline/7 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
    refalrts::update_ident(context[7], identifiers[ident_Inline]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1=2:1@11/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & OptSentence$1=2:1@0/6 (/7 # Intrinsic/8 # Inline/9 Tile{ HalfReuse: )/0 HalfReuse: # Inline/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_OptSentence_S1A2B1Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_ident(vm, context[8], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[7], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1A2B1Z11("OptSentence$1=2:1@11", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1A2B1Z11);


static refalrts::FnResult func_gen_Reduce_S1A1Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@12/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@12/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Reduce$1=1@12/4 (/7 e.Tail0/9 )/8 t.Acc$a/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0: 9
    //DEBUG: t.Acc$a: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@12/4 } Tile{ AsIs: t.Acc$a/13 } Tile{ AsIs: e.Tail0/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@12/4 (/7 e.Tail0/5 )/8 e.dyn/2 >/1
  // closed e.Tail0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Tail0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # Intrinsic/14 # Inline/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z12("Reduce$1=1@12", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z12);


static refalrts::FnResult func_gen_OptSentence_S1A2B1Z12(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & OptSentence$1=2:1@12/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & OptSentence$1=2:1@12/4 s.new1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & OptSentence$1=2:1@12/4 # True/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_True], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Intrinsic/4 Reuse: # Intrinsic/7 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Intrinsic]);
      refalrts::update_ident(context[7], identifiers[ident_Intrinsic]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1=2:1@12/4 # False/7 >/1
    if( ! refalrts::ident_term( identifiers[ident_False], context[7] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Inline/4 Reuse: # Intrinsic/7 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
    refalrts::update_ident(context[7], identifiers[ident_Intrinsic]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1=2:1@12/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & OptSentence$1=2:1@0/6 (/7 # Intrinsic/8 # Intrinsic/9 Tile{ HalfReuse: )/0 HalfReuse: # Intrinsic/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_OptSentence_S1A2B1Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_ident(vm, context[8], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Intrinsic]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[7], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1A2B1Z12("OptSentence$1=2:1@12", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1A2B1Z12);


static refalrts::FnResult func_gen_Reduce_S1A1Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@13/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@13/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Reduce$1=1@13/4 (/7 e.Tail0/9 )/8 t.Acc$a/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0: 9
    //DEBUG: t.Acc$a: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@13/4 } Tile{ AsIs: t.Acc$a/13 } Tile{ AsIs: e.Tail0/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z13]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@13/4 (/7 e.Tail0/5 )/8 e.dyn/2 >/1
  // closed e.Tail0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Tail0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # Intrinsic/14 # Intrinsic/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z13("Reduce$1=1@13", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z13);


static refalrts::FnResult func_gen_OptSentence_S1A2B1Z13(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & OptSentence$1=2:1@13/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & OptSentence$1=2:1@13/4 s.new1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & OptSentence$1=2:1@13/4 # True/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_True], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Intrinsic/4 Reuse: # None/7 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_Intrinsic]);
      refalrts::update_ident(context[7], identifiers[ident_None]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1=2:1@13/4 # False/7 >/1
    if( ! refalrts::ident_term( identifiers[ident_False], context[7] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Inline/4 Reuse: # None/7 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
    refalrts::update_ident(context[7], identifiers[ident_None]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1=2:1@13/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & OptSentence$1=2:1@0/6 (/7 # Intrinsic/8 # None/9 Tile{ HalfReuse: )/0 HalfReuse: # None/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_OptSentence_S1A2B1Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_ident(vm, context[8], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_None]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[7], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1A2B1Z13("OptSentence$1=2:1@13", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1A2B1Z13);


static refalrts::FnResult func_gen_Reduce_S1A1Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@14/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@14/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Reduce$1=1@14/4 (/7 e.Tail0/9 )/8 t.Acc$a/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0: 9
    //DEBUG: t.Acc$a: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@14/4 } Tile{ AsIs: t.Acc$a/13 } Tile{ AsIs: e.Tail0/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z14]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@14/4 (/7 e.Tail0/5 )/8 e.dyn/2 >/1
  // closed e.Tail0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Tail0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # Intrinsic/14 # None/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_Intrinsic]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z14("Reduce$1=1@14", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z14);


static refalrts::FnResult func_gen_OptSentence_S1A2B1Z14(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & OptSentence$1=2:1@14/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & OptSentence$1=2:1@14/4 s.new1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & OptSentence$1=2:1@14/4 # True/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_True], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # None/4 Reuse: # Drive/7 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_None]);
      refalrts::update_ident(context[7], identifiers[ident_Drive]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1=2:1@14/4 # False/7 >/1
    if( ! refalrts::ident_term( identifiers[ident_False], context[7] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Inline/4 Reuse: # Drive/7 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
    refalrts::update_ident(context[7], identifiers[ident_Drive]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1=2:1@14/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & OptSentence$1=2:1@0/6 (/7 # None/8 # Drive/9 Tile{ HalfReuse: )/0 HalfReuse: # Drive/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_OptSentence_S1A2B1Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_ident(vm, context[8], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Drive]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[7], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1A2B1Z14("OptSentence$1=2:1@14", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1A2B1Z14);


static refalrts::FnResult func_gen_Reduce_S1A1Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@15/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@15/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Reduce$1=1@15/4 (/7 e.Tail0/9 )/8 t.Acc$a/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0: 9
    //DEBUG: t.Acc$a: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@15/4 } Tile{ AsIs: t.Acc$a/13 } Tile{ AsIs: e.Tail0/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@15/4 (/7 e.Tail0/5 )/8 e.dyn/2 >/1
  // closed e.Tail0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Tail0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # None/14 # Drive/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Drive]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z15("Reduce$1=1@15", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z15);


static refalrts::FnResult func_gen_OptSentence_S1A2B1Z15(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & OptSentence$1=2:1@15/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & OptSentence$1=2:1@15/4 s.new1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & OptSentence$1=2:1@15/4 # True/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_True], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # None/4 Reuse: # Inline/7 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_None]);
      refalrts::update_ident(context[7], identifiers[ident_Inline]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1=2:1@15/4 # False/7 >/1
    if( ! refalrts::ident_term( identifiers[ident_False], context[7] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Inline/4 Reuse: # Inline/7 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
    refalrts::update_ident(context[7], identifiers[ident_Inline]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1=2:1@15/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & OptSentence$1=2:1@0/6 (/7 # None/8 # Inline/9 Tile{ HalfReuse: )/0 HalfReuse: # Inline/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_OptSentence_S1A2B1Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_ident(vm, context[8], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[7], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1A2B1Z15("OptSentence$1=2:1@15", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1A2B1Z15);


static refalrts::FnResult func_gen_Reduce_S1A1Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@16/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@16/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Reduce$1=1@16/4 (/7 e.Tail0/9 )/8 t.Acc$a/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0: 9
    //DEBUG: t.Acc$a: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@16/4 } Tile{ AsIs: t.Acc$a/13 } Tile{ AsIs: e.Tail0/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z16]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@16/4 (/7 e.Tail0/5 )/8 e.dyn/2 >/1
  // closed e.Tail0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Tail0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # None/14 # Inline/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Inline]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z16("Reduce$1=1@16", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z16);


static refalrts::FnResult func_gen_OptSentence_S1A2B1Z16(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & OptSentence$1=2:1@16/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & OptSentence$1=2:1@16/4 s.new1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & OptSentence$1=2:1@16/4 # True/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_True], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # None/4 Reuse: # Intrinsic/7 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_None]);
      refalrts::update_ident(context[7], identifiers[ident_Intrinsic]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1=2:1@16/4 # False/7 >/1
    if( ! refalrts::ident_term( identifiers[ident_False], context[7] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Inline/4 Reuse: # Intrinsic/7 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
    refalrts::update_ident(context[7], identifiers[ident_Intrinsic]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1=2:1@16/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & OptSentence$1=2:1@0/6 (/7 # None/8 # Intrinsic/9 Tile{ HalfReuse: )/0 HalfReuse: # Intrinsic/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_OptSentence_S1A2B1Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_ident(vm, context[8], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Intrinsic]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[7], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1A2B1Z16("OptSentence$1=2:1@16", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1A2B1Z16);


static refalrts::FnResult func_gen_Reduce_S1A1Z17(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@17/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@17/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Reduce$1=1@17/4 (/7 e.Tail0/9 )/8 t.Acc$a/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0: 9
    //DEBUG: t.Acc$a: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@17/4 } Tile{ AsIs: t.Acc$a/13 } Tile{ AsIs: e.Tail0/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z17]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@17/4 (/7 e.Tail0/5 )/8 e.dyn/2 >/1
  // closed e.Tail0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Tail0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # None/14 # Intrinsic/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_Intrinsic]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z17("Reduce$1=1@17", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z17);


static refalrts::FnResult func_gen_OptSentence_S1A2B1Z17(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & OptSentence$1=2:1@17/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & OptSentence$1=2:1@17/4 s.new1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & OptSentence$1=2:1@17/4 # True/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_True], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # None/4 Reuse: # None/7 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_ident(context[4], identifiers[ident_None]);
      refalrts::update_ident(context[7], identifiers[ident_None]);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & OptSentence$1=2:1@17/4 # False/7 >/1
    if( ! refalrts::ident_term( identifiers[ident_False], context[7] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # Inline/4 Reuse: # None/7 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_Inline]);
    refalrts::update_ident(context[7], identifiers[ident_None]);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & OptSentence$1=2:1@17/4 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & OptSentence$1=2:1@0/6 (/7 # None/8 # None/9 Tile{ HalfReuse: )/0 HalfReuse: # None/4 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_OptSentence_S1A2B1Z0]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_ident(vm, context[8], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[9], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_ident(context[4], identifiers[ident_None]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[7], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_OptSentence_S1A2B1Z17("OptSentence$1=2:1@17", COOKIE1_, COOKIE2_, func_gen_OptSentence_S1A2B1Z17);


static refalrts::FnResult func_gen_Reduce_S1A1Z18(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 16 elems
  refalrts::Iter context[16];
  refalrts::zeros( context, 16 );
  // </0 & Reduce$1=1@18/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce$1=1@18/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & Reduce$1=1@18/4 (/7 e.Tail0/9 )/8 t.Acc$a/13 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Tail0 as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    if( ! refalrts::empty_seq( context[11], context[12] ) )
      continue;
    //DEBUG: e.Tail0: 9
    //DEBUG: t.Acc$a: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce@18/4 } Tile{ AsIs: t.Acc$a/13 } Tile{ AsIs: e.Tail0/9 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Reduce_Z18]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce$1=1@18/4 (/7 e.Tail0/5 )/8 e.dyn/2 >/1
  // closed e.Tail0 as range 5
  // closed e.dyn as range 2
  //DEBUG: e.Tail0: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </9 & Reduce$1=1@0/10 [*]/11 & OptFunction\1@0/12 (/13 # None/14 # None/15 Tile{ HalfReuse: )/0 HalfReuse: {*}/4 AsIs: (/7 AsIs: e.Tail0/5 AsIs: )/8 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_gen_Reduce_S1A1Z0]);
  refalrts::alloc_closure_head(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_gen_OptFunction_L1Z0]);
  refalrts::alloc_open_bracket(vm, context[13]);
  refalrts::alloc_ident(vm, context[14], identifiers[ident_None]);
  refalrts::alloc_ident(vm, context[15], identifiers[ident_None]);
  refalrts::reinit_close_bracket(context[0]);
  refalrts::reinit_unwrapped_closure(context[4], context[11]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[9] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[13], context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[9], context[15] );
  refalrts::use( res );
  refalrts::wrap_closure( context[4] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1Z18("Reduce$1=1@18", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1Z18);


static refalrts::FnResult func_gen_UpdateDriveInfo_A4Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 38 elems
  refalrts::Iter context[38];
  refalrts::zeros( context, 38 );
  // </0 & UpdateDriveInfo=4@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UpdateDriveInfo=4@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & UpdateDriveInfo=4@1/4 (/7 e.Intrinsics0/17 )/8 (/11 e.Inlines0/19 )/12 (/15 e.Drives0/21 )/16 (/27 e.Metatables/25 )/28 e.AST$d/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    context[25] = 0;
    context[26] = 0;
    context[27] = refalrts::brackets_left( context[25], context[26], context[23], context[24] );
    if( ! context[27] )
      continue;
    refalrts::bracket_pointers(context[27], context[28]);
    // closed e.Intrinsics0 as range 17
    // closed e.Inlines0 as range 19
    // closed e.Drives0 as range 21
    // closed e.Metatables as range 25
    // closed e.AST$d as range 23
    //DEBUG: e.Intrinsics0: 17
    //DEBUG: e.Inlines0: 19
    //DEBUG: e.Drives0: 21
    //DEBUG: e.Metatables: 25
    //DEBUG: e.AST$d: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & UpdateDriveInfo=5@1/29 (/30 Tile{ AsIs: e.AST$d/23 } Tile{ AsIs: )/16 AsIs: (/27 } Tile{ AsIs: e.Metatables/25 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.Intrinsics0/17 AsIs: )/8 AsIs: (/11 AsIs: e.Inlines0/19 AsIs: )/12 HalfReuse: </15 } & SetNames-Reject/31 (/32 Tile{ AsIs: e.Drives0/21 } )/33 (/34 e.Intrinsics0/17/35 Tile{ AsIs: )/28 } >/37 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[29], functions[efunc_gen_UpdateDriveInfo_A5Z1]);
    refalrts::alloc_open_bracket(vm, context[30]);
    refalrts::alloc_name(vm, context[31], functions[efunc_SetNamesm_Reject]);
    refalrts::alloc_open_bracket(vm, context[32]);
    refalrts::alloc_close_bracket(vm, context[33]);
    refalrts::alloc_open_bracket(vm, context[34]);
    refalrts::copy_evar(vm, context[35], context[36], context[17], context[18]);
    refalrts::alloc_close_call(vm, context[37]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_call(context[15]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[37] );
    refalrts::push_stack( vm, context[15] );
    refalrts::link_brackets( context[34], context[28] );
    refalrts::link_brackets( context[32], context[33] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[27], context[4] );
    refalrts::link_brackets( context[30], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_evar( res, context[31], context[32] );
    res = refalrts::splice_evar( res, context[4], context[15] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    res = refalrts::splice_evar( res, context[16], context[27] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=4@1/4 (/7 e.Intrinsics0/5 )/8 (/11 e.Inlines0/9 )/12 (/15 e.Drives0/13 )/16 e.dyn/2 >/1
  // closed e.Intrinsics0 as range 5
  // closed e.Inlines0 as range 9
  // closed e.Drives0 as range 13
  // closed e.dyn as range 2
  //DEBUG: e.Intrinsics0: 5
  //DEBUG: e.Inlines0: 9
  //DEBUG: e.Drives0: 13
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=4@0/4 AsIs: (/7 } )/17 (/18 Tile{ AsIs: e.Intrinsics0/5 } )/19 (/20 101/21 Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Inlines0/9 AsIs: )/12 AsIs: (/15 AsIs: e.Drives0/13 AsIs: )/16 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_close_bracket(vm, context[17]);
  refalrts::alloc_open_bracket(vm, context[18]);
  refalrts::alloc_close_bracket(vm, context[19]);
  refalrts::alloc_open_bracket(vm, context[20]);
  refalrts::alloc_number(vm, context[21], 101UL);
  refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A4Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[20], context[8] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[7], context[17] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[19], context[21] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A4Z1("UpdateDriveInfo=4@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A4Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A5Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 40 elems
  refalrts::Iter context[40];
  refalrts::zeros( context, 40 );
  // </0 & UpdateDriveInfo=5@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UpdateDriveInfo=5@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 2
  do {
    // </0 & UpdateDriveInfo=5@1/4 (/7 e.AST$d0/21 )/8 (/11 e.Metatables0/23 )/12 (/15 e.Intrinsics0/25 )/16 (/19 e.Inlines0/27 )/20 e.Drives$a/29 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.AST$d0 as range 21
    // closed e.Metatables0 as range 23
    // closed e.Intrinsics0 as range 25
    // closed e.Inlines0 as range 27
    // closed e.Drives$a as range 29
    //DEBUG: e.AST$d0: 21
    //DEBUG: e.Metatables0: 23
    //DEBUG: e.Intrinsics0: 25
    //DEBUG: e.Inlines0: 27
    //DEBUG: e.Drives$a: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=6@1/4 AsIs: (/7 AsIs: e.AST$d0/21 AsIs: )/8 AsIs: (/11 AsIs: e.Metatables0/23 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics0/25 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.Drives$a/29 } Tile{ AsIs: )/20 } </31 & SetNames-Reject/32 (/33 Tile{ AsIs: e.Inlines0/27 } )/34 (/35 e.Intrinsics0/25/36 )/38 >/39 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_SetNamesm_Reject]);
    refalrts::alloc_open_bracket(vm, context[33]);
    refalrts::alloc_close_bracket(vm, context[34]);
    refalrts::alloc_open_bracket(vm, context[35]);
    refalrts::copy_evar(vm, context[36], context[37], context[25], context[26]);
    refalrts::alloc_close_bracket(vm, context[38]);
    refalrts::alloc_close_call(vm, context[39]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A6Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[39] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[35], context[38] );
    refalrts::link_brackets( context[33], context[34] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[34], context[39] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_evar( res, context[31], context[33] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=5@1/4 (/7 e.AST$d0/5 )/8 (/11 e.Metatables0/9 )/12 (/15 e.Intrinsics0/13 )/16 (/19 e.Inlines0/17 )/20 e.dyn/2 >/1
  // closed e.AST$d0 as range 5
  // closed e.Metatables0 as range 9
  // closed e.Intrinsics0 as range 13
  // closed e.Inlines0 as range 17
  // closed e.dyn as range 2
  //DEBUG: e.AST$d0: 5
  //DEBUG: e.Metatables0: 9
  //DEBUG: e.Intrinsics0: 13
  //DEBUG: e.Inlines0: 17
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </21 & UpdateDriveInfo=5@0/22 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST$d0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Metatables0/9 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics0/13 AsIs: )/16 AsIs: (/19 } 101/23 )/24 (/25 Tile{ AsIs: e.Inlines0/17 } Tile{ AsIs: )/20 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_gen_UpdateDriveInfo_A5Z0]);
  refalrts::alloc_number(vm, context[23], 101UL);
  refalrts::alloc_close_bracket(vm, context[24]);
  refalrts::alloc_open_bracket(vm, context[25]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[25], context[20] );
  refalrts::link_brackets( context[19], context[24] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[20];
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[23], context[25] );
  res = refalrts::splice_evar( res, context[0], context[19] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A5Z1("UpdateDriveInfo=5@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A5Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A6Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & UpdateDriveInfo=6@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UpdateDriveInfo=6@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 2
  do {
    // </0 & UpdateDriveInfo=6@1/4 (/7 e.AST$d0/21 )/8 (/11 e.Metatables0/23 )/12 (/15 e.Intrinsics0/25 )/16 (/19 e.Drives$a0/27 )/20 e.Inlines$a/29 >/1
    context[21] = context[5];
    context[22] = context[6];
    context[23] = context[9];
    context[24] = context[10];
    context[25] = context[13];
    context[26] = context[14];
    context[27] = context[17];
    context[28] = context[18];
    context[29] = context[2];
    context[30] = context[3];
    // closed e.AST$d0 as range 21
    // closed e.Metatables0 as range 23
    // closed e.Intrinsics0 as range 25
    // closed e.Drives$a0 as range 27
    // closed e.Inlines$a as range 29
    //DEBUG: e.AST$d0: 21
    //DEBUG: e.Metatables0: 23
    //DEBUG: e.Intrinsics0: 25
    //DEBUG: e.Drives$a0: 27
    //DEBUG: e.Inlines$a: 29

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=7@1/4 AsIs: (/7 AsIs: e.AST$d0/21 AsIs: )/8 AsIs: (/11 AsIs: e.Metatables0/23 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics0/25 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.Inlines$a/29 } Tile{ AsIs: )/20 } (/31 Tile{ AsIs: e.Drives$a0/27 } )/32 </33 & Map@4/34 >/35 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[31]);
    refalrts::alloc_close_bracket(vm, context[32]);
    refalrts::alloc_open_call(vm, context[33]);
    refalrts::alloc_name(vm, context[34], functions[efunc_gen_Map_Z4]);
    refalrts::alloc_close_call(vm, context[35]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A7Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[35] );
    refalrts::push_stack( vm, context[33] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[32], context[35] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    res = refalrts::splice_elem( res, context[31] );
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[29], context[30] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=6@1/4 (/7 e.AST$d0/5 )/8 (/11 e.Metatables0/9 )/12 (/15 e.Intrinsics0/13 )/16 (/19 e.Drives$a0/17 )/20 e.dyn/2 >/1
  // closed e.AST$d0 as range 5
  // closed e.Metatables0 as range 9
  // closed e.Intrinsics0 as range 13
  // closed e.Drives$a0 as range 17
  // closed e.dyn as range 2
  //DEBUG: e.AST$d0: 5
  //DEBUG: e.Metatables0: 9
  //DEBUG: e.Intrinsics0: 13
  //DEBUG: e.Drives$a0: 17
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </21 & UpdateDriveInfo=6@0/22 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST$d0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Metatables0/9 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Drives$a0/17 AsIs: )/20 } (/23 101/24 )/25 Tile{ AsIs: e.dyn/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[21]);
  refalrts::alloc_name(vm, context[22], functions[efunc_gen_UpdateDriveInfo_A6Z0]);
  refalrts::alloc_open_bracket(vm, context[23]);
  refalrts::alloc_number(vm, context[24], 101UL);
  refalrts::alloc_close_bracket(vm, context[25]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[21] );
  refalrts::link_brackets( context[23], context[25] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[23], context[25] );
  res = refalrts::splice_evar( res, context[0], context[20] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A6Z1("UpdateDriveInfo=6@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A6Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A7Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & UpdateDriveInfo=7@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UpdateDriveInfo=7@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 e.new6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 2
  do {
    // </0 & UpdateDriveInfo=7@1/4 (/7 e.AST$d0/25 )/8 (/11 e.Metatables0/27 )/12 (/15 e.Intrinsics0/29 )/16 (/19 e.Inlines$a0/31 )/20 (/23 e.Drives$a0/33 )/24 e.KnownNames$a/35 >/1
    context[25] = context[5];
    context[26] = context[6];
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[21];
    context[34] = context[22];
    context[35] = context[2];
    context[36] = context[3];
    // closed e.AST$d0 as range 25
    // closed e.Metatables0 as range 27
    // closed e.Intrinsics0 as range 29
    // closed e.Inlines$a0 as range 31
    // closed e.Drives$a0 as range 33
    // closed e.KnownNames$a as range 35
    //DEBUG: e.AST$d0: 25
    //DEBUG: e.Metatables0: 27
    //DEBUG: e.Intrinsics0: 29
    //DEBUG: e.Inlines$a0: 31
    //DEBUG: e.Drives$a0: 33
    //DEBUG: e.KnownNames$a: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & UpdateDriveInfo=8@1/37 (/38 Tile{ AsIs: e.KnownNames$a/35 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.AST$d0/25 AsIs: )/8 AsIs: (/11 AsIs: e.Metatables0/27 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics0/29 AsIs: )/16 AsIs: (/19 AsIs: e.Inlines$a0/31 AsIs: )/20 HalfReuse: </23 } & SetNames-Reject/39 (/40 Tile{ AsIs: e.Drives$a0/33 } Tile{ AsIs: )/24 } (/41 e.KnownNames$a/35/42 )/44 >/45 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[37], functions[efunc_gen_UpdateDriveInfo_A8Z1]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::alloc_name(vm, context[39], functions[efunc_SetNamesm_Reject]);
    refalrts::alloc_open_bracket(vm, context[40]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::copy_evar(vm, context[42], context[43], context[35], context[36]);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_call(context[23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[41], context[44] );
    refalrts::link_brackets( context[40], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[38], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[41], context[45] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[4], context[23] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=7@1/4 (/7 e.AST$d0/5 )/8 (/11 e.Metatables0/9 )/12 (/15 e.Intrinsics0/13 )/16 (/19 e.Inlines$a0/17 )/20 (/23 e.Drives$a0/21 )/24 e.dyn/2 >/1
  // closed e.AST$d0 as range 5
  // closed e.Metatables0 as range 9
  // closed e.Intrinsics0 as range 13
  // closed e.Inlines$a0 as range 17
  // closed e.Drives$a0 as range 21
  // closed e.dyn as range 2
  //DEBUG: e.AST$d0: 5
  //DEBUG: e.Metatables0: 9
  //DEBUG: e.Intrinsics0: 13
  //DEBUG: e.Inlines$a0: 17
  //DEBUG: e.Drives$a0: 21
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </25 & UpdateDriveInfo=7@0/26 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST$d0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Metatables0/9 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Inlines$a0/17 AsIs: )/20 AsIs: (/23 AsIs: e.Drives$a0/21 AsIs: )/24 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_gen_UpdateDriveInfo_A7Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A7Z1("UpdateDriveInfo=7@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A7Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A8Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & UpdateDriveInfo=8@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UpdateDriveInfo=8@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 e.new6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 2
  do {
    // </0 & UpdateDriveInfo=8@1/4 (/7 e.KnownNames$a0/25 )/8 (/11 e.AST$d0/27 )/12 (/15 e.Metatables0/29 )/16 (/19 e.Intrinsics0/31 )/20 (/23 e.Inlines$a0/33 )/24 e.Drives$b/35 >/1
    context[25] = context[5];
    context[26] = context[6];
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[21];
    context[34] = context[22];
    context[35] = context[2];
    context[36] = context[3];
    // closed e.KnownNames$a0 as range 25
    // closed e.AST$d0 as range 27
    // closed e.Metatables0 as range 29
    // closed e.Intrinsics0 as range 31
    // closed e.Inlines$a0 as range 33
    // closed e.Drives$b as range 35
    //DEBUG: e.KnownNames$a0: 25
    //DEBUG: e.AST$d0: 27
    //DEBUG: e.Metatables0: 29
    //DEBUG: e.Intrinsics0: 31
    //DEBUG: e.Inlines$a0: 33
    //DEBUG: e.Drives$b: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=9@1/4 AsIs: (/7 } Tile{ AsIs: e.KnownNames$a0/25 } Tile{ AsIs: )/24 } (/37 Tile{ AsIs: e.Drives$b/35 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.AST$d0/27 AsIs: )/12 AsIs: (/15 AsIs: e.Metatables0/29 AsIs: )/16 AsIs: (/19 AsIs: e.Intrinsics0/31 AsIs: )/20 HalfReuse: </23 } & SetNames-Reject/38 (/39 Tile{ AsIs: e.Inlines$a0/33 } )/40 (/41 e.KnownNames$a0/25/42 )/44 >/45 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::alloc_name(vm, context[38], functions[efunc_SetNamesm_Reject]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::copy_evar(vm, context[42], context[43], context[25], context[26]);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A9Z1]);
    refalrts::reinit_open_call(context[23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[41], context[44] );
    refalrts::link_brackets( context[39], context[40] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[37], context[8] );
    refalrts::link_brackets( context[7], context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[40], context[45] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[8], context[23] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=8@1/4 (/7 e.KnownNames$a0/5 )/8 (/11 e.AST$d0/9 )/12 (/15 e.Metatables0/13 )/16 (/19 e.Intrinsics0/17 )/20 (/23 e.Inlines$a0/21 )/24 e.dyn/2 >/1
  // closed e.KnownNames$a0 as range 5
  // closed e.AST$d0 as range 9
  // closed e.Metatables0 as range 13
  // closed e.Intrinsics0 as range 17
  // closed e.Inlines$a0 as range 21
  // closed e.dyn as range 2
  //DEBUG: e.KnownNames$a0: 5
  //DEBUG: e.AST$d0: 9
  //DEBUG: e.Metatables0: 13
  //DEBUG: e.Intrinsics0: 17
  //DEBUG: e.Inlines$a0: 21
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </25 & UpdateDriveInfo=8@0/26 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.KnownNames$a0/5 AsIs: )/8 AsIs: (/11 AsIs: e.AST$d0/9 AsIs: )/12 AsIs: (/15 AsIs: e.Metatables0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Intrinsics0/17 AsIs: )/20 AsIs: (/23 AsIs: e.Inlines$a0/21 AsIs: )/24 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_gen_UpdateDriveInfo_A8Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A8Z1("UpdateDriveInfo=8@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A8Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A9Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & UpdateDriveInfo=9@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UpdateDriveInfo=9@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 e.new6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 2
  do {
    // </0 & UpdateDriveInfo=9@1/4 (/7 e.KnownNames$a0/25 )/8 (/11 e.Drives$b0/27 )/12 (/15 e.AST$d0/29 )/16 (/19 e.Metatables0/31 )/20 (/23 e.Intrinsics0/33 )/24 e.Inlines$b/35 >/1
    context[25] = context[5];
    context[26] = context[6];
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[21];
    context[34] = context[22];
    context[35] = context[2];
    context[36] = context[3];
    // closed e.KnownNames$a0 as range 25
    // closed e.Drives$b0 as range 27
    // closed e.AST$d0 as range 29
    // closed e.Metatables0 as range 31
    // closed e.Intrinsics0 as range 33
    // closed e.Inlines$b as range 35
    //DEBUG: e.KnownNames$a0: 25
    //DEBUG: e.Drives$b0: 27
    //DEBUG: e.AST$d0: 29
    //DEBUG: e.Metatables0: 31
    //DEBUG: e.Intrinsics0: 33
    //DEBUG: e.Inlines$b: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=10@1/4 AsIs: (/7 } Tile{ AsIs: e.KnownNames$a0/25 } Tile{ AsIs: )/24 } (/37 Tile{ AsIs: e.Inlines$b/35 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Drives$b0/27 AsIs: )/12 AsIs: (/15 AsIs: e.AST$d0/29 AsIs: )/16 AsIs: (/19 AsIs: e.Metatables0/31 AsIs: )/20 HalfReuse: </23 } & SetNames-Reject/38 (/39 Tile{ AsIs: e.Intrinsics0/33 } )/40 (/41 e.KnownNames$a0/25/42 )/44 >/45 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::alloc_name(vm, context[38], functions[efunc_SetNamesm_Reject]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::copy_evar(vm, context[42], context[43], context[25], context[26]);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A10Z1]);
    refalrts::reinit_open_call(context[23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[41], context[44] );
    refalrts::link_brackets( context[39], context[40] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[37], context[8] );
    refalrts::link_brackets( context[7], context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[40], context[45] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[8], context[23] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=9@1/4 (/7 e.KnownNames$a0/5 )/8 (/11 e.Drives$b0/9 )/12 (/15 e.AST$d0/13 )/16 (/19 e.Metatables0/17 )/20 (/23 e.Intrinsics0/21 )/24 e.dyn/2 >/1
  // closed e.KnownNames$a0 as range 5
  // closed e.Drives$b0 as range 9
  // closed e.AST$d0 as range 13
  // closed e.Metatables0 as range 17
  // closed e.Intrinsics0 as range 21
  // closed e.dyn as range 2
  //DEBUG: e.KnownNames$a0: 5
  //DEBUG: e.Drives$b0: 9
  //DEBUG: e.AST$d0: 13
  //DEBUG: e.Metatables0: 17
  //DEBUG: e.Intrinsics0: 21
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </25 & UpdateDriveInfo=9@0/26 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.KnownNames$a0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Drives$b0/9 AsIs: )/12 AsIs: (/15 AsIs: e.AST$d0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Metatables0/17 AsIs: )/20 AsIs: (/23 AsIs: e.Intrinsics0/21 AsIs: )/24 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_gen_UpdateDriveInfo_A9Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A9Z1("UpdateDriveInfo=9@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A9Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A10Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 46 elems
  refalrts::Iter context[46];
  refalrts::zeros( context, 46 );
  // </0 & UpdateDriveInfo=10@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UpdateDriveInfo=10@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 e.new6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 2
  do {
    // </0 & UpdateDriveInfo=10@1/4 (/7 e.KnownNames$a0/25 )/8 (/11 e.Inlines$b0/27 )/12 (/15 e.Drives$b0/29 )/16 (/19 e.AST$d0/31 )/20 (/23 e.Metatables0/33 )/24 e.Intrinsics$a/35 >/1
    context[25] = context[5];
    context[26] = context[6];
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[21];
    context[34] = context[22];
    context[35] = context[2];
    context[36] = context[3];
    // closed e.KnownNames$a0 as range 25
    // closed e.Inlines$b0 as range 27
    // closed e.Drives$b0 as range 29
    // closed e.AST$d0 as range 31
    // closed e.Metatables0 as range 33
    // closed e.Intrinsics$a as range 35
    //DEBUG: e.KnownNames$a0: 25
    //DEBUG: e.Inlines$b0: 27
    //DEBUG: e.Drives$b0: 29
    //DEBUG: e.AST$d0: 31
    //DEBUG: e.Metatables0: 33
    //DEBUG: e.Intrinsics$a: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=11@1/4 AsIs: (/7 } Tile{ AsIs: e.KnownNames$a0/25 } Tile{ AsIs: )/24 } (/37 Tile{ AsIs: e.Intrinsics$a/35 } Tile{ AsIs: )/8 AsIs: (/11 AsIs: e.Inlines$b0/27 AsIs: )/12 AsIs: (/15 AsIs: e.Drives$b0/29 AsIs: )/16 AsIs: (/19 AsIs: e.AST$d0/31 AsIs: )/20 HalfReuse: </23 } & SetNames-Reject/38 (/39 Tile{ AsIs: e.Metatables0/33 } )/40 (/41 e.KnownNames$a0/25/42 )/44 >/45 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[37]);
    refalrts::alloc_name(vm, context[38], functions[efunc_SetNamesm_Reject]);
    refalrts::alloc_open_bracket(vm, context[39]);
    refalrts::alloc_close_bracket(vm, context[40]);
    refalrts::alloc_open_bracket(vm, context[41]);
    refalrts::copy_evar(vm, context[42], context[43], context[25], context[26]);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::alloc_close_call(vm, context[45]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A11Z1]);
    refalrts::reinit_open_call(context[23]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[41], context[44] );
    refalrts::link_brackets( context[39], context[40] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[37], context[8] );
    refalrts::link_brackets( context[7], context[24] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[40], context[45] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_evar( res, context[38], context[39] );
    res = refalrts::splice_evar( res, context[8], context[23] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_elem( res, context[37] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_evar( res, context[25], context[26] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=10@1/4 (/7 e.KnownNames$a0/5 )/8 (/11 e.Inlines$b0/9 )/12 (/15 e.Drives$b0/13 )/16 (/19 e.AST$d0/17 )/20 (/23 e.Metatables0/21 )/24 e.dyn/2 >/1
  // closed e.KnownNames$a0 as range 5
  // closed e.Inlines$b0 as range 9
  // closed e.Drives$b0 as range 13
  // closed e.AST$d0 as range 17
  // closed e.Metatables0 as range 21
  // closed e.dyn as range 2
  //DEBUG: e.KnownNames$a0: 5
  //DEBUG: e.Inlines$b0: 9
  //DEBUG: e.Drives$b0: 13
  //DEBUG: e.AST$d0: 17
  //DEBUG: e.Metatables0: 21
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </25 & UpdateDriveInfo=10@0/26 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.KnownNames$a0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Inlines$b0/9 AsIs: )/12 AsIs: (/15 AsIs: e.Drives$b0/13 AsIs: )/16 AsIs: (/19 AsIs: e.AST$d0/17 AsIs: )/20 AsIs: (/23 AsIs: e.Metatables0/21 AsIs: )/24 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_gen_UpdateDriveInfo_A10Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A10Z1("UpdateDriveInfo=10@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A10Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A11Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 50 elems
  refalrts::Iter context[50];
  refalrts::zeros( context, 50 );
  // </0 & UpdateDriveInfo=11@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UpdateDriveInfo=11@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 e.new6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 2
  do {
    // </0 & UpdateDriveInfo=11@1/4 (/7 e.KnownNames$a0/25 )/8 (/11 e.Intrinsics$a0/27 )/12 (/15 e.Inlines$b0/29 )/16 (/19 e.Drives$b0/31 )/20 (/23 e.AST$d0/33 )/24 e.Metatables$a/35 >/1
    context[25] = context[5];
    context[26] = context[6];
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[21];
    context[34] = context[22];
    context[35] = context[2];
    context[36] = context[3];
    // closed e.KnownNames$a0 as range 25
    // closed e.Intrinsics$a0 as range 27
    // closed e.Inlines$b0 as range 29
    // closed e.Drives$b0 as range 31
    // closed e.AST$d0 as range 33
    // closed e.Metatables$a as range 35
    //DEBUG: e.KnownNames$a0: 25
    //DEBUG: e.Intrinsics$a0: 27
    //DEBUG: e.Inlines$b0: 29
    //DEBUG: e.Drives$b0: 31
    //DEBUG: e.AST$d0: 33
    //DEBUG: e.Metatables$a: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=12@1/4 AsIs: (/7 AsIs: e.KnownNames$a0/25 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Intrinsics$a0/27 } )/37 (/38 e.Metatables$a/35/39 Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Inlines$b0/29 AsIs: )/16 AsIs: (/19 AsIs: e.Drives$b0/31 AsIs: )/20 AsIs: (/23 AsIs: e.AST$d0/33 AsIs: )/24 } </41 & Map@3/42 e.Drives$b0/31/43 e.Inlines$b0/29/45 e.Intrinsics$a0/27/47 Tile{ AsIs: e.Metatables$a/35 } >/49 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[37]);
    refalrts::alloc_open_bracket(vm, context[38]);
    refalrts::copy_evar(vm, context[39], context[40], context[35], context[36]);
    refalrts::alloc_open_call(vm, context[41]);
    refalrts::alloc_name(vm, context[42], functions[efunc_gen_Map_Z3]);
    refalrts::copy_evar(vm, context[43], context[44], context[31], context[32]);
    refalrts::copy_evar(vm, context[45], context[46], context[29], context[30]);
    refalrts::copy_evar(vm, context[47], context[48], context[27], context[28]);
    refalrts::alloc_close_call(vm, context[49]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A12Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[49] );
    refalrts::push_stack( vm, context[41] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[38], context[12] );
    refalrts::link_brackets( context[11], context[37] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[49] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[12], context[24] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=11@1/4 (/7 e.KnownNames$a0/5 )/8 (/11 e.Intrinsics$a0/9 )/12 (/15 e.Inlines$b0/13 )/16 (/19 e.Drives$b0/17 )/20 (/23 e.AST$d0/21 )/24 e.dyn/2 >/1
  // closed e.KnownNames$a0 as range 5
  // closed e.Intrinsics$a0 as range 9
  // closed e.Inlines$b0 as range 13
  // closed e.Drives$b0 as range 17
  // closed e.AST$d0 as range 21
  // closed e.dyn as range 2
  //DEBUG: e.KnownNames$a0: 5
  //DEBUG: e.Intrinsics$a0: 9
  //DEBUG: e.Inlines$b0: 13
  //DEBUG: e.Drives$b0: 17
  //DEBUG: e.AST$d0: 21
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </25 & UpdateDriveInfo=11@0/26 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.KnownNames$a0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Intrinsics$a0/9 AsIs: )/12 AsIs: (/15 AsIs: e.Inlines$b0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Drives$b0/17 AsIs: )/20 AsIs: (/23 AsIs: e.AST$d0/21 AsIs: )/24 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_gen_UpdateDriveInfo_A11Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A11Z1("UpdateDriveInfo=11@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A11Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A12Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  // </0 & UpdateDriveInfo=12@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UpdateDriveInfo=12@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 (/27 e.new6/25 )/28 e.new7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 25
  // closed e.new7 as range 2
  do {
    // </0 & UpdateDriveInfo=12@1/4 (/7 e.KnownNames$a0/29 )/8 (/11 e.Intrinsics$a0/31 )/12 (/15 e.Metatables$a0/33 )/16 (/19 e.Inlines$b0/35 )/20 (/23 e.Drives$b0/37 )/24 (/27 e.AST$d0/39 )/28 >/1
    context[29] = context[5];
    context[30] = context[6];
    context[31] = context[9];
    context[32] = context[10];
    context[33] = context[13];
    context[34] = context[14];
    context[35] = context[17];
    context[36] = context[18];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[25];
    context[40] = context[26];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.KnownNames$a0 as range 29
    // closed e.Intrinsics$a0 as range 31
    // closed e.Metatables$a0 as range 33
    // closed e.Inlines$b0 as range 35
    // closed e.Drives$b0 as range 37
    // closed e.AST$d0 as range 39
    //DEBUG: e.KnownNames$a0: 29
    //DEBUG: e.Intrinsics$a0: 31
    //DEBUG: e.Metatables$a0: 33
    //DEBUG: e.Inlines$b0: 35
    //DEBUG: e.Drives$b0: 37
    //DEBUG: e.AST$d0: 39

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=13@1/4 AsIs: (/7 AsIs: e.KnownNames$a0/29 AsIs: )/8 AsIs: (/11 AsIs: e.Intrinsics$a0/31 AsIs: )/12 AsIs: (/15 AsIs: e.Metatables$a0/33 AsIs: )/16 AsIs: (/19 AsIs: e.Inlines$b0/35 AsIs: )/20 AsIs: (/23 AsIs: e.Drives$b0/37 AsIs: )/24 AsIs: (/27 AsIs: e.AST$d0/39 AsIs: )/28 HalfReuse: </1 } & ExtractBaseNames=1/41 </42 & Map@2/43 e.Drives$b0/37/44 e.Inlines$b0/35/46 e.Metatables$a0/33/48 >/50 >/51 >/52 Tile{ ]] }
    refalrts::alloc_name(vm, context[41], functions[efunc_gen_ExtractBaseNames_A1]);
    refalrts::alloc_open_call(vm, context[42]);
    refalrts::alloc_name(vm, context[43], functions[efunc_gen_Map_Z2]);
    refalrts::copy_evar(vm, context[44], context[45], context[37], context[38]);
    refalrts::copy_evar(vm, context[46], context[47], context[35], context[36]);
    refalrts::copy_evar(vm, context[48], context[49], context[33], context[34]);
    refalrts::alloc_close_call(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::alloc_close_call(vm, context[52]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A13Z1]);
    refalrts::reinit_open_call(context[1]);
    refalrts::push_stack( vm, context[52] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[50] );
    refalrts::push_stack( vm, context[42] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[41], context[52] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=12@1/4 (/7 e.KnownNames$a0/5 )/8 (/11 e.Intrinsics$a0/9 )/12 (/15 e.Metatables$a0/13 )/16 (/19 e.Inlines$b0/17 )/20 (/23 e.Drives$b0/21 )/24 (/27 e.AST$d0/25 )/28 e.dyn/2 >/1
  // closed e.KnownNames$a0 as range 5
  // closed e.Intrinsics$a0 as range 9
  // closed e.Metatables$a0 as range 13
  // closed e.Inlines$b0 as range 17
  // closed e.Drives$b0 as range 21
  // closed e.AST$d0 as range 25
  // closed e.dyn as range 2
  //DEBUG: e.KnownNames$a0: 5
  //DEBUG: e.Intrinsics$a0: 9
  //DEBUG: e.Metatables$a0: 13
  //DEBUG: e.Inlines$b0: 17
  //DEBUG: e.Drives$b0: 21
  //DEBUG: e.AST$d0: 25
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </29 & UpdateDriveInfo=12@0/30 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.KnownNames$a0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Intrinsics$a0/9 AsIs: )/12 AsIs: (/15 AsIs: e.Metatables$a0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Inlines$b0/17 AsIs: )/20 AsIs: (/23 AsIs: e.Drives$b0/21 AsIs: )/24 AsIs: (/27 AsIs: e.AST$d0/25 AsIs: )/28 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_gen_UpdateDriveInfo_A12Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[29] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[29], context[30] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A12Z1("UpdateDriveInfo=12@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A12Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A13Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  // </0 & UpdateDriveInfo=13@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UpdateDriveInfo=13@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 (/27 e.new6/25 )/28 e.new7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 25
  // closed e.new7 as range 2
  do {
    // </0 & UpdateDriveInfo=13@1/4 (/7 e.KnownNames$a0/29 )/8 (/11 e.Intrinsics$a0/31 )/12 (/15 e.Metatables$a0/33 )/16 (/19 e.Inlines$b0/35 )/20 (/23 e.Drives$b0/37 )/24 (/27 e.AST$d0/39 )/28 e.ExtractedNames/41 >/1
    context[29] = context[5];
    context[30] = context[6];
    context[31] = context[9];
    context[32] = context[10];
    context[33] = context[13];
    context[34] = context[14];
    context[35] = context[17];
    context[36] = context[18];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[25];
    context[40] = context[26];
    context[41] = context[2];
    context[42] = context[3];
    // closed e.KnownNames$a0 as range 29
    // closed e.Intrinsics$a0 as range 31
    // closed e.Metatables$a0 as range 33
    // closed e.Inlines$b0 as range 35
    // closed e.Drives$b0 as range 37
    // closed e.AST$d0 as range 39
    // closed e.ExtractedNames as range 41
    //DEBUG: e.KnownNames$a0: 29
    //DEBUG: e.Intrinsics$a0: 31
    //DEBUG: e.Metatables$a0: 33
    //DEBUG: e.Inlines$b0: 35
    //DEBUG: e.Drives$b0: 37
    //DEBUG: e.AST$d0: 39
    //DEBUG: e.ExtractedNames: 41

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=14@1/4 AsIs: (/7 AsIs: e.KnownNames$a0/29 AsIs: )/8 AsIs: (/11 AsIs: e.Intrinsics$a0/31 AsIs: )/12 AsIs: (/15 AsIs: e.Metatables$a0/33 AsIs: )/16 AsIs: (/19 AsIs: e.Inlines$b0/35 AsIs: )/20 AsIs: (/23 AsIs: e.Drives$b0/37 AsIs: )/24 HalfReuse: </27 } & ExtractExtractableFunctions=1/43 </44 & DoMapAccum@3/45 (/46 (/47 Tile{ AsIs: e.ExtractedNames/41 } Tile{ AsIs: )/28 } )/48 (/49 )/50 Tile{ AsIs: e.AST$d0/39 } >/51 >/52 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[43], functions[efunc_gen_ExtractExtractableFunctions_A1]);
    refalrts::alloc_open_call(vm, context[44]);
    refalrts::alloc_name(vm, context[45], functions[efunc_gen_DoMapAccum_Z3]);
    refalrts::alloc_open_bracket(vm, context[46]);
    refalrts::alloc_open_bracket(vm, context[47]);
    refalrts::alloc_close_bracket(vm, context[48]);
    refalrts::alloc_open_bracket(vm, context[49]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::alloc_close_call(vm, context[52]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A14Z1]);
    refalrts::reinit_open_call(context[27]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[52] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[44] );
    refalrts::link_brackets( context[49], context[50] );
    refalrts::link_brackets( context[46], context[48] );
    refalrts::link_brackets( context[47], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[51], context[52] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[48], context[50] );
    res = refalrts::splice_elem( res, context[28] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[43], context[47] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=13@1/4 (/7 e.KnownNames$a0/5 )/8 (/11 e.Intrinsics$a0/9 )/12 (/15 e.Metatables$a0/13 )/16 (/19 e.Inlines$b0/17 )/20 (/23 e.Drives$b0/21 )/24 (/27 e.AST$d0/25 )/28 e.dyn/2 >/1
  // closed e.KnownNames$a0 as range 5
  // closed e.Intrinsics$a0 as range 9
  // closed e.Metatables$a0 as range 13
  // closed e.Inlines$b0 as range 17
  // closed e.Drives$b0 as range 21
  // closed e.AST$d0 as range 25
  // closed e.dyn as range 2
  //DEBUG: e.KnownNames$a0: 5
  //DEBUG: e.Intrinsics$a0: 9
  //DEBUG: e.Metatables$a0: 13
  //DEBUG: e.Inlines$b0: 17
  //DEBUG: e.Drives$b0: 21
  //DEBUG: e.AST$d0: 25
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </29 & UpdateDriveInfo=13@0/30 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.KnownNames$a0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Intrinsics$a0/9 AsIs: )/12 AsIs: (/15 AsIs: e.Metatables$a0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Inlines$b0/17 AsIs: )/20 AsIs: (/23 AsIs: e.Drives$b0/21 AsIs: )/24 AsIs: (/27 AsIs: e.AST$d0/25 AsIs: )/28 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_gen_UpdateDriveInfo_A13Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[29] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[29], context[30] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A13Z1("UpdateDriveInfo=13@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A13Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A14Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 48 elems
  refalrts::Iter context[48];
  refalrts::zeros( context, 48 );
  // </0 & UpdateDriveInfo=14@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UpdateDriveInfo=14@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 e.new6/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 2
  do {
    // </0 & UpdateDriveInfo=14@1/4 (/7 e.KnownNames$a0/25 )/8 (/11 e.Intrinsics$a0/27 )/12 (/15 e.Metatables$a0/29 )/16 (/19 e.Inlines$b0/31 )/20 (/23 e.Drives$b0/33 )/24 (/39 e.Extracted/37 )/40 e.AST$e/35 >/1
    context[25] = context[5];
    context[26] = context[6];
    context[27] = context[9];
    context[28] = context[10];
    context[29] = context[13];
    context[30] = context[14];
    context[31] = context[17];
    context[32] = context[18];
    context[33] = context[21];
    context[34] = context[22];
    context[35] = context[2];
    context[36] = context[3];
    context[37] = 0;
    context[38] = 0;
    context[39] = refalrts::brackets_left( context[37], context[38], context[35], context[36] );
    if( ! context[39] )
      continue;
    refalrts::bracket_pointers(context[39], context[40]);
    // closed e.KnownNames$a0 as range 25
    // closed e.Intrinsics$a0 as range 27
    // closed e.Metatables$a0 as range 29
    // closed e.Inlines$b0 as range 31
    // closed e.Drives$b0 as range 33
    // closed e.Extracted as range 37
    // closed e.AST$e as range 35
    //DEBUG: e.KnownNames$a0: 25
    //DEBUG: e.Intrinsics$a0: 27
    //DEBUG: e.Metatables$a0: 29
    //DEBUG: e.Inlines$b0: 31
    //DEBUG: e.Drives$b0: 33
    //DEBUG: e.Extracted: 37
    //DEBUG: e.AST$e: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=15@1/4 AsIs: (/7 AsIs: e.KnownNames$a0/25 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.Intrinsics$a0/27 } )/41 (/42 Tile{ AsIs: e.Extracted/37 } Tile{ AsIs: )/12 AsIs: (/15 AsIs: e.Metatables$a0/29 AsIs: )/16 AsIs: (/19 AsIs: e.Inlines$b0/31 AsIs: )/20 AsIs: (/23 AsIs: e.Drives$b0/33 AsIs: )/24 HalfReuse: </39 } & DoMapAccum@2/43 (/44 )/45 (/46 Tile{ AsIs: )/40 AsIs: e.AST$e/35 AsIs: >/1 } >/47 Tile{ ]] }
    refalrts::alloc_close_bracket(vm, context[41]);
    refalrts::alloc_open_bracket(vm, context[42]);
    refalrts::alloc_name(vm, context[43], functions[efunc_gen_DoMapAccum_Z2]);
    refalrts::alloc_open_bracket(vm, context[44]);
    refalrts::alloc_close_bracket(vm, context[45]);
    refalrts::alloc_open_bracket(vm, context[46]);
    refalrts::alloc_close_call(vm, context[47]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A15Z1]);
    refalrts::reinit_open_call(context[39]);
    refalrts::push_stack( vm, context[47] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[39] );
    refalrts::link_brackets( context[46], context[40] );
    refalrts::link_brackets( context[44], context[45] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[42], context[12] );
    refalrts::link_brackets( context[11], context[41] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[47] );
    res = refalrts::splice_evar( res, context[40], context[1] );
    res = refalrts::splice_evar( res, context[43], context[46] );
    res = refalrts::splice_evar( res, context[12], context[39] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[27], context[28] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=14@1/4 (/7 e.KnownNames$a0/5 )/8 (/11 e.Intrinsics$a0/9 )/12 (/15 e.Metatables$a0/13 )/16 (/19 e.Inlines$b0/17 )/20 (/23 e.Drives$b0/21 )/24 e.dyn/2 >/1
  // closed e.KnownNames$a0 as range 5
  // closed e.Intrinsics$a0 as range 9
  // closed e.Metatables$a0 as range 13
  // closed e.Inlines$b0 as range 17
  // closed e.Drives$b0 as range 21
  // closed e.dyn as range 2
  //DEBUG: e.KnownNames$a0: 5
  //DEBUG: e.Intrinsics$a0: 9
  //DEBUG: e.Metatables$a0: 13
  //DEBUG: e.Inlines$b0: 17
  //DEBUG: e.Drives$b0: 21
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </25 & UpdateDriveInfo=14@0/26 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.KnownNames$a0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Intrinsics$a0/9 AsIs: )/12 AsIs: (/15 AsIs: e.Metatables$a0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Inlines$b0/17 AsIs: )/20 AsIs: (/23 AsIs: e.Drives$b0/21 AsIs: )/24 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_name(vm, context[26], functions[efunc_gen_UpdateDriveInfo_A14Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[25] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[25], context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A14Z1("UpdateDriveInfo=14@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A14Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A15Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 59 elems
  refalrts::Iter context[59];
  refalrts::zeros( context, 59 );
  // </0 & UpdateDriveInfo=15@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UpdateDriveInfo=15@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 (/27 e.new6/25 )/28 e.new7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 25
  // closed e.new7 as range 2
  do {
    // </0 & UpdateDriveInfo=15@1/4 (/7 e.KnownNames$a0/29 )/8 (/11 e.Intrinsics$a0/31 )/12 (/15 e.Extracted0/33 )/16 (/19 e.Metatables$a0/35 )/20 (/23 e.Inlines$b0/37 )/24 (/27 e.Drives$b0/39 )/28 (/45 e.Lengths/43 )/46 e.AST$f/41 >/1
    context[29] = context[5];
    context[30] = context[6];
    context[31] = context[9];
    context[32] = context[10];
    context[33] = context[13];
    context[34] = context[14];
    context[35] = context[17];
    context[36] = context[18];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[25];
    context[40] = context[26];
    context[41] = context[2];
    context[42] = context[3];
    context[43] = 0;
    context[44] = 0;
    context[45] = refalrts::brackets_left( context[43], context[44], context[41], context[42] );
    if( ! context[45] )
      continue;
    refalrts::bracket_pointers(context[45], context[46]);
    // closed e.KnownNames$a0 as range 29
    // closed e.Intrinsics$a0 as range 31
    // closed e.Extracted0 as range 33
    // closed e.Metatables$a0 as range 35
    // closed e.Inlines$b0 as range 37
    // closed e.Drives$b0 as range 39
    // closed e.Lengths as range 43
    // closed e.AST$f as range 41
    //DEBUG: e.KnownNames$a0: 29
    //DEBUG: e.Intrinsics$a0: 31
    //DEBUG: e.Extracted0: 33
    //DEBUG: e.Metatables$a0: 35
    //DEBUG: e.Inlines$b0: 37
    //DEBUG: e.Drives$b0: 39
    //DEBUG: e.Lengths: 43
    //DEBUG: e.AST$f: 41

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & UpdateDriveInfo=16@1/47 (/48 Tile{ AsIs: e.AST$f/41 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.KnownNames$a0/29 AsIs: )/8 AsIs: (/11 AsIs: e.Intrinsics$a0/31 AsIs: )/12 AsIs: (/15 AsIs: e.Extracted0/33 AsIs: )/16 AsIs: (/19 AsIs: e.Metatables$a0/35 AsIs: )/20 AsIs: (/23 } e.Lengths/43/49 Tile{ AsIs: )/24 AsIs: (/27 } Tile{ AsIs: e.Inlines$b0/37 } )/51 </52 & MultiplyRemainderNames=1/53 </54 Tile{ HalfReuse: & DoMapAccum@1/28 AsIs: (/45 AsIs: e.Lengths/43 AsIs: )/46 } (/55 )/56 Tile{ AsIs: e.Drives$b0/39 } >/57 >/58 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[47], functions[efunc_gen_UpdateDriveInfo_A16Z1]);
    refalrts::alloc_open_bracket(vm, context[48]);
    refalrts::copy_evar(vm, context[49], context[50], context[43], context[44]);
    refalrts::alloc_close_bracket(vm, context[51]);
    refalrts::alloc_open_call(vm, context[52]);
    refalrts::alloc_name(vm, context[53], functions[efunc_gen_MultiplyRemainderNames_A1]);
    refalrts::alloc_open_call(vm, context[54]);
    refalrts::alloc_open_bracket(vm, context[55]);
    refalrts::alloc_close_bracket(vm, context[56]);
    refalrts::alloc_close_call(vm, context[57]);
    refalrts::alloc_close_call(vm, context[58]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_name(context[28], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[58] );
    refalrts::push_stack( vm, context[52] );
    refalrts::push_stack( vm, context[57] );
    refalrts::push_stack( vm, context[54] );
    refalrts::link_brackets( context[55], context[56] );
    refalrts::link_brackets( context[45], context[46] );
    refalrts::link_brackets( context[27], context[51] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[48], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[57], context[58] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[55], context[56] );
    res = refalrts::splice_evar( res, context[28], context[46] );
    res = refalrts::splice_evar( res, context[51], context[54] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[49], context[50] );
    res = refalrts::splice_evar( res, context[4], context[23] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=15@1/4 (/7 e.KnownNames$a0/5 )/8 (/11 e.Intrinsics$a0/9 )/12 (/15 e.Extracted0/13 )/16 (/19 e.Metatables$a0/17 )/20 (/23 e.Inlines$b0/21 )/24 (/27 e.Drives$b0/25 )/28 e.dyn/2 >/1
  // closed e.KnownNames$a0 as range 5
  // closed e.Intrinsics$a0 as range 9
  // closed e.Extracted0 as range 13
  // closed e.Metatables$a0 as range 17
  // closed e.Inlines$b0 as range 21
  // closed e.Drives$b0 as range 25
  // closed e.dyn as range 2
  //DEBUG: e.KnownNames$a0: 5
  //DEBUG: e.Intrinsics$a0: 9
  //DEBUG: e.Extracted0: 13
  //DEBUG: e.Metatables$a0: 17
  //DEBUG: e.Inlines$b0: 21
  //DEBUG: e.Drives$b0: 25
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </29 & UpdateDriveInfo=15@0/30 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.KnownNames$a0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Intrinsics$a0/9 AsIs: )/12 AsIs: (/15 AsIs: e.Extracted0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Metatables$a0/17 AsIs: )/20 AsIs: (/23 AsIs: e.Inlines$b0/21 AsIs: )/24 AsIs: (/27 AsIs: e.Drives$b0/25 AsIs: )/28 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_gen_UpdateDriveInfo_A15Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[29] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[29], context[30] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A15Z1("UpdateDriveInfo=15@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A15Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A16Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 57 elems
  refalrts::Iter context[57];
  refalrts::zeros( context, 57 );
  // </0 & UpdateDriveInfo=16@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UpdateDriveInfo=16@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 (/27 e.new6/25 )/28 (/31 e.new7/29 )/32 e.new8/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 25
  // closed e.new7 as range 29
  // closed e.new8 as range 2
  do {
    // </0 & UpdateDriveInfo=16@1/4 (/7 e.AST$f0/33 )/8 (/11 e.KnownNames$a0/35 )/12 (/15 e.Intrinsics$a0/37 )/16 (/19 e.Extracted0/39 )/20 (/23 e.Metatables$a0/41 )/24 (/27 e.Lengths0/43 )/28 (/31 e.Inlines$b0/45 )/32 e.Drives$c/47 >/1
    context[33] = context[5];
    context[34] = context[6];
    context[35] = context[9];
    context[36] = context[10];
    context[37] = context[13];
    context[38] = context[14];
    context[39] = context[17];
    context[40] = context[18];
    context[41] = context[21];
    context[42] = context[22];
    context[43] = context[25];
    context[44] = context[26];
    context[45] = context[29];
    context[46] = context[30];
    context[47] = context[2];
    context[48] = context[3];
    // closed e.AST$f0 as range 33
    // closed e.KnownNames$a0 as range 35
    // closed e.Intrinsics$a0 as range 37
    // closed e.Extracted0 as range 39
    // closed e.Metatables$a0 as range 41
    // closed e.Lengths0 as range 43
    // closed e.Inlines$b0 as range 45
    // closed e.Drives$c as range 47
    //DEBUG: e.AST$f0: 33
    //DEBUG: e.KnownNames$a0: 35
    //DEBUG: e.Intrinsics$a0: 37
    //DEBUG: e.Extracted0: 39
    //DEBUG: e.Metatables$a0: 41
    //DEBUG: e.Lengths0: 43
    //DEBUG: e.Inlines$b0: 45
    //DEBUG: e.Drives$c: 47

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=17@1/4 AsIs: (/7 AsIs: e.AST$f0/33 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames$a0/35 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics$a0/37 AsIs: )/16 AsIs: (/19 AsIs: e.Extracted0/39 AsIs: )/20 AsIs: (/23 AsIs: e.Metatables$a0/41 AsIs: )/24 AsIs: (/27 } Tile{ AsIs: e.Drives$c/47 } )/49 </50 & MultiplyRemainderNames=1/51 </52 & DoMapAccum@1/53 (/54 Tile{ AsIs: e.Lengths0/43 } Tile{ AsIs: )/28 AsIs: (/31 } Tile{ AsIs: )/32 } Tile{ AsIs: e.Inlines$b0/45 } >/55 >/56 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_bracket(vm, context[49]);
    refalrts::alloc_open_call(vm, context[50]);
    refalrts::alloc_name(vm, context[51], functions[efunc_gen_MultiplyRemainderNames_A1]);
    refalrts::alloc_open_call(vm, context[52]);
    refalrts::alloc_name(vm, context[53], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::alloc_open_bracket(vm, context[54]);
    refalrts::alloc_close_call(vm, context[55]);
    refalrts::alloc_close_call(vm, context[56]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A17Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[56] );
    refalrts::push_stack( vm, context[50] );
    refalrts::push_stack( vm, context[55] );
    refalrts::push_stack( vm, context[52] );
    refalrts::link_brackets( context[31], context[32] );
    refalrts::link_brackets( context[54], context[28] );
    refalrts::link_brackets( context[27], context[49] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[55], context[56] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_elem( res, context[32] );
    res = refalrts::splice_evar( res, context[28], context[31] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[49], context[54] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=16@1/4 (/7 e.AST$f0/5 )/8 (/11 e.KnownNames$a0/9 )/12 (/15 e.Intrinsics$a0/13 )/16 (/19 e.Extracted0/17 )/20 (/23 e.Metatables$a0/21 )/24 (/27 e.Lengths0/25 )/28 (/31 e.Inlines$b0/29 )/32 e.dyn/2 >/1
  // closed e.AST$f0 as range 5
  // closed e.KnownNames$a0 as range 9
  // closed e.Intrinsics$a0 as range 13
  // closed e.Extracted0 as range 17
  // closed e.Metatables$a0 as range 21
  // closed e.Lengths0 as range 25
  // closed e.Inlines$b0 as range 29
  // closed e.dyn as range 2
  //DEBUG: e.AST$f0: 5
  //DEBUG: e.KnownNames$a0: 9
  //DEBUG: e.Intrinsics$a0: 13
  //DEBUG: e.Extracted0: 17
  //DEBUG: e.Metatables$a0: 21
  //DEBUG: e.Lengths0: 25
  //DEBUG: e.Inlines$b0: 29
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </33 & UpdateDriveInfo=16@0/34 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST$f0/5 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames$a0/9 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics$a0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Extracted0/17 AsIs: )/20 AsIs: (/23 AsIs: e.Metatables$a0/21 AsIs: )/24 AsIs: (/27 AsIs: e.Lengths0/25 AsIs: )/28 AsIs: (/31 AsIs: e.Inlines$b0/29 AsIs: )/32 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[33]);
  refalrts::alloc_name(vm, context[34], functions[efunc_gen_UpdateDriveInfo_A16Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[33] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[33], context[34] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A16Z1("UpdateDriveInfo=16@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A16Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A17Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 52 elems
  refalrts::Iter context[52];
  refalrts::zeros( context, 52 );
  // </0 & UpdateDriveInfo=17@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UpdateDriveInfo=17@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 (/27 e.new6/25 )/28 e.new7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 25
  // closed e.new7 as range 2
  do {
    // </0 & UpdateDriveInfo=17@1/4 (/7 e.AST$f0/29 )/8 (/11 e.KnownNames$a0/31 )/12 (/15 e.Intrinsics$a0/33 )/16 (/19 e.Extracted0/35 )/20 (/23 e.Metatables$a0/37 )/24 (/27 e.Drives$c0/39 )/28 e.Inlines$c/41 >/1
    context[29] = context[5];
    context[30] = context[6];
    context[31] = context[9];
    context[32] = context[10];
    context[33] = context[13];
    context[34] = context[14];
    context[35] = context[17];
    context[36] = context[18];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[25];
    context[40] = context[26];
    context[41] = context[2];
    context[42] = context[3];
    // closed e.AST$f0 as range 29
    // closed e.KnownNames$a0 as range 31
    // closed e.Intrinsics$a0 as range 33
    // closed e.Extracted0 as range 35
    // closed e.Metatables$a0 as range 37
    // closed e.Drives$c0 as range 39
    // closed e.Inlines$c as range 41
    //DEBUG: e.AST$f0: 29
    //DEBUG: e.KnownNames$a0: 31
    //DEBUG: e.Intrinsics$a0: 33
    //DEBUG: e.Extracted0: 35
    //DEBUG: e.Metatables$a0: 37
    //DEBUG: e.Drives$c0: 39
    //DEBUG: e.Inlines$c: 41

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=18@1/4 AsIs: (/7 AsIs: e.AST$f0/29 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames$a0/31 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics$a0/33 AsIs: )/16 AsIs: (/19 AsIs: e.Extracted0/35 AsIs: )/20 AsIs: (/23 } e.Inlines$c/41/43 )/45 (/46 Tile{ AsIs: e.Metatables$a0/37 } )/47 </48 Tile{ HalfReuse: & SetNames-Reject/24 AsIs: (/27 AsIs: e.Drives$c0/39 AsIs: )/28 } (/49 Tile{ AsIs: e.Inlines$c/41 } )/50 >/51 Tile{ AsIs: >/1 ]] }
    refalrts::copy_evar(vm, context[43], context[44], context[41], context[42]);
    refalrts::alloc_close_bracket(vm, context[45]);
    refalrts::alloc_open_bracket(vm, context[46]);
    refalrts::alloc_close_bracket(vm, context[47]);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_open_bracket(vm, context[49]);
    refalrts::alloc_close_bracket(vm, context[50]);
    refalrts::alloc_close_call(vm, context[51]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A18Z1]);
    refalrts::reinit_name(context[24], functions[efunc_SetNamesm_Reject]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[51] );
    refalrts::push_stack( vm, context[48] );
    refalrts::link_brackets( context[49], context[50] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[46], context[47] );
    refalrts::link_brackets( context[23], context[45] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[50], context[51] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_elem( res, context[49] );
    res = refalrts::splice_evar( res, context[24], context[28] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=17@1/4 (/7 e.AST$f0/5 )/8 (/11 e.KnownNames$a0/9 )/12 (/15 e.Intrinsics$a0/13 )/16 (/19 e.Extracted0/17 )/20 (/23 e.Metatables$a0/21 )/24 (/27 e.Drives$c0/25 )/28 e.dyn/2 >/1
  // closed e.AST$f0 as range 5
  // closed e.KnownNames$a0 as range 9
  // closed e.Intrinsics$a0 as range 13
  // closed e.Extracted0 as range 17
  // closed e.Metatables$a0 as range 21
  // closed e.Drives$c0 as range 25
  // closed e.dyn as range 2
  //DEBUG: e.AST$f0: 5
  //DEBUG: e.KnownNames$a0: 9
  //DEBUG: e.Intrinsics$a0: 13
  //DEBUG: e.Extracted0: 17
  //DEBUG: e.Metatables$a0: 21
  //DEBUG: e.Drives$c0: 25
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </29 & UpdateDriveInfo=17@0/30 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST$f0/5 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames$a0/9 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics$a0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Extracted0/17 AsIs: )/20 AsIs: (/23 AsIs: e.Metatables$a0/21 AsIs: )/24 AsIs: (/27 AsIs: e.Drives$c0/25 AsIs: )/28 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_gen_UpdateDriveInfo_A17Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[29] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[29], context[30] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A17Z1("UpdateDriveInfo=17@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A17Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A18Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 63 elems
  refalrts::Iter context[63];
  refalrts::zeros( context, 63 );
  // </0 & UpdateDriveInfo=18@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UpdateDriveInfo=18@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 (/27 e.new6/25 )/28 e.new7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 25
  // closed e.new7 as range 2
  do {
    // </0 & UpdateDriveInfo=18@1/4 (/7 e.AST$f0/29 )/8 (/11 e.KnownNames$a0/31 )/12 (/15 e.Intrinsics$a0/33 )/16 (/19 e.Extracted0/35 )/20 (/23 e.Inlines$c0/37 )/24 (/27 e.Metatables$a0/39 )/28 e.Drives$d/41 >/1
    context[29] = context[5];
    context[30] = context[6];
    context[31] = context[9];
    context[32] = context[10];
    context[33] = context[13];
    context[34] = context[14];
    context[35] = context[17];
    context[36] = context[18];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[25];
    context[40] = context[26];
    context[41] = context[2];
    context[42] = context[3];
    // closed e.AST$f0 as range 29
    // closed e.KnownNames$a0 as range 31
    // closed e.Intrinsics$a0 as range 33
    // closed e.Extracted0 as range 35
    // closed e.Inlines$c0 as range 37
    // closed e.Metatables$a0 as range 39
    // closed e.Drives$d as range 41
    //DEBUG: e.AST$f0: 29
    //DEBUG: e.KnownNames$a0: 31
    //DEBUG: e.Intrinsics$a0: 33
    //DEBUG: e.Extracted0: 35
    //DEBUG: e.Inlines$c0: 37
    //DEBUG: e.Metatables$a0: 39
    //DEBUG: e.Drives$d: 41

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=20@2/4 AsIs: (/7 AsIs: e.AST$f0/29 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames$a0/31 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Drives$d/41 } Tile{ AsIs: )/20 AsIs: (/23 AsIs: e.Inlines$c0/37 AsIs: )/24 AsIs: (/27 AsIs: e.Metatables$a0/39 AsIs: )/28 } (/43 Tile{ AsIs: e.Intrinsics$a0/33 } )/44 </45 & FormatOptFunctions=1/46 </47 Tile{ HalfReuse: & MapAccum@1/16 AsIs: (/19 } </48 & ExtractBaseNames=1/49 </50 & Map@2/51 e.Drives$d/41/52 e.Inlines$c0/37/54 e.Metatables$a0/39/56 >/58 >/59 )/60 Tile{ AsIs: e.Extracted0/35 } >/61 >/62 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[43]);
    refalrts::alloc_close_bracket(vm, context[44]);
    refalrts::alloc_open_call(vm, context[45]);
    refalrts::alloc_name(vm, context[46], functions[efunc_gen_FormatOptFunctions_A1]);
    refalrts::alloc_open_call(vm, context[47]);
    refalrts::alloc_open_call(vm, context[48]);
    refalrts::alloc_name(vm, context[49], functions[efunc_gen_ExtractBaseNames_A1]);
    refalrts::alloc_open_call(vm, context[50]);
    refalrts::alloc_name(vm, context[51], functions[efunc_gen_Map_Z2]);
    refalrts::copy_evar(vm, context[52], context[53], context[41], context[42]);
    refalrts::copy_evar(vm, context[54], context[55], context[37], context[38]);
    refalrts::copy_evar(vm, context[56], context[57], context[39], context[40]);
    refalrts::alloc_close_call(vm, context[58]);
    refalrts::alloc_close_call(vm, context[59]);
    refalrts::alloc_close_bracket(vm, context[60]);
    refalrts::alloc_close_call(vm, context[61]);
    refalrts::alloc_close_call(vm, context[62]);
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A20Z2]);
    refalrts::reinit_name(context[16], functions[efunc_gen_MapAccum_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[62] );
    refalrts::push_stack( vm, context[45] );
    refalrts::push_stack( vm, context[61] );
    refalrts::push_stack( vm, context[47] );
    refalrts::link_brackets( context[19], context[60] );
    refalrts::push_stack( vm, context[59] );
    refalrts::push_stack( vm, context[48] );
    refalrts::push_stack( vm, context[58] );
    refalrts::push_stack( vm, context[50] );
    refalrts::link_brackets( context[43], context[44] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[15], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[61], context[62] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[48], context[60] );
    res = refalrts::splice_evar( res, context[16], context[19] );
    res = refalrts::splice_evar( res, context[44], context[47] );
    res = refalrts::splice_evar( res, context[33], context[34] );
    res = refalrts::splice_elem( res, context[43] );
    res = refalrts::splice_evar( res, context[20], context[28] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=18@1/4 (/7 e.AST$f0/5 )/8 (/11 e.KnownNames$a0/9 )/12 (/15 e.Intrinsics$a0/13 )/16 (/19 e.Extracted0/17 )/20 (/23 e.Inlines$c0/21 )/24 (/27 e.Metatables$a0/25 )/28 e.dyn/2 >/1
  // closed e.AST$f0 as range 5
  // closed e.KnownNames$a0 as range 9
  // closed e.Intrinsics$a0 as range 13
  // closed e.Extracted0 as range 17
  // closed e.Inlines$c0 as range 21
  // closed e.Metatables$a0 as range 25
  // closed e.dyn as range 2
  //DEBUG: e.AST$f0: 5
  //DEBUG: e.KnownNames$a0: 9
  //DEBUG: e.Intrinsics$a0: 13
  //DEBUG: e.Extracted0: 17
  //DEBUG: e.Inlines$c0: 21
  //DEBUG: e.Metatables$a0: 25
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </29 & UpdateDriveInfo=18@0/30 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST$f0/5 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames$a0/9 AsIs: )/12 AsIs: (/15 AsIs: e.Intrinsics$a0/13 AsIs: )/16 AsIs: (/19 AsIs: e.Extracted0/17 AsIs: )/20 AsIs: (/23 AsIs: e.Inlines$c0/21 AsIs: )/24 AsIs: (/27 AsIs: e.Metatables$a0/25 AsIs: )/28 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_gen_UpdateDriveInfo_A18Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[29] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[29], context[30] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A18Z1("UpdateDriveInfo=18@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A18Z1);


static refalrts::FnResult func_gen_UpdateDriveInfo_A20Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 50 elems
  refalrts::Iter context[50];
  refalrts::zeros( context, 50 );
  // </0 & UpdateDriveInfo=20@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UpdateDriveInfo=20@2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 (/27 e.new6/25 )/28 e.new7/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 25
  // closed e.new7 as range 2
  do {
    // </0 & UpdateDriveInfo=20@2/4 (/7 e.AST$f0/29 )/8 (/11 e.KnownNames$a0/31 )/12 (/15 e.Drives$d/33 )/16 (/19 e.Inlines$c0/35 )/20 (/23 e.Metatables$a0/37 )/24 (/27 e.Intrinsics$a0/39 )/28 e.OptFunctions/41 >/1
    context[29] = context[5];
    context[30] = context[6];
    context[31] = context[9];
    context[32] = context[10];
    context[33] = context[13];
    context[34] = context[14];
    context[35] = context[17];
    context[36] = context[18];
    context[37] = context[21];
    context[38] = context[22];
    context[39] = context[25];
    context[40] = context[26];
    context[41] = context[2];
    context[42] = context[3];
    // closed e.AST$f0 as range 29
    // closed e.KnownNames$a0 as range 31
    // closed e.Drives$d as range 33
    // closed e.Inlines$c0 as range 35
    // closed e.Metatables$a0 as range 37
    // closed e.Intrinsics$a0 as range 39
    // closed e.OptFunctions as range 41
    //DEBUG: e.AST$f0: 29
    //DEBUG: e.KnownNames$a0: 31
    //DEBUG: e.Drives$d: 33
    //DEBUG: e.Inlines$c0: 35
    //DEBUG: e.Metatables$a0: 37
    //DEBUG: e.Intrinsics$a0: 39
    //DEBUG: e.OptFunctions: 41

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 } & UpdateDriveInfo=21@2/43 (/44 Tile{ AsIs: e.OptFunctions/41 } Tile{ HalfReuse: )/4 AsIs: (/7 AsIs: e.AST$f0/29 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames$a0/31 AsIs: )/12 AsIs: (/15 AsIs: e.Drives$d/33 AsIs: )/16 AsIs: (/19 AsIs: e.Inlines$c0/35 AsIs: )/20 AsIs: (/23 AsIs: e.Metatables$a0/37 AsIs: )/24 AsIs: (/27 AsIs: e.Intrinsics$a0/39 AsIs: )/28 } </45 & Map@1/46 e.Intrinsics$a0/39/47 >/49 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[43], functions[efunc_gen_UpdateDriveInfo_A21Z2]);
    refalrts::alloc_open_bracket(vm, context[44]);
    refalrts::alloc_open_call(vm, context[45]);
    refalrts::alloc_name(vm, context[46], functions[efunc_gen_Map_Z1]);
    refalrts::copy_evar(vm, context[47], context[48], context[39], context[40]);
    refalrts::alloc_close_call(vm, context[49]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[49] );
    refalrts::push_stack( vm, context[45] );
    refalrts::link_brackets( context[27], context[28] );
    refalrts::link_brackets( context[23], context[24] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::link_brackets( context[44], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[45], context[49] );
    res = refalrts::splice_evar( res, context[4], context[28] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=20@2/4 (/7 e.AST$f0/5 )/8 (/11 e.KnownNames$a0/9 )/12 (/15 e.Drives$d/13 )/16 (/19 e.Inlines$c0/17 )/20 (/23 e.Metatables$a0/21 )/24 (/27 e.Intrinsics$a0/25 )/28 e.dyn/2 >/1
  // closed e.AST$f0 as range 5
  // closed e.KnownNames$a0 as range 9
  // closed e.Drives$d as range 13
  // closed e.Inlines$c0 as range 17
  // closed e.Metatables$a0 as range 21
  // closed e.Intrinsics$a0 as range 25
  // closed e.dyn as range 2
  //DEBUG: e.AST$f0: 5
  //DEBUG: e.KnownNames$a0: 9
  //DEBUG: e.Drives$d: 13
  //DEBUG: e.Inlines$c0: 17
  //DEBUG: e.Metatables$a0: 21
  //DEBUG: e.Intrinsics$a0: 25
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/16 (/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </20 HalfReuse: & UpdateDriveInfo=20@0/23 } Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.AST$f0/5 AsIs: )/8 AsIs: (/11 AsIs: e.KnownNames$a0/9 AsIs: )/12 AsIs: (/15 } Tile{ AsIs: e.Drives$d/13 } Tile{ AsIs: e.Inlines$c0/17 } Tile{ AsIs: e.Metatables$a0/21 } Tile{ AsIs: )/24 AsIs: (/27 AsIs: e.Intrinsics$a0/25 AsIs: )/28 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[20]);
  refalrts::reinit_name(context[23], functions[efunc_gen_UpdateDriveInfo_A20Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[20] );
  refalrts::link_brackets( context[27], context[28] );
  refalrts::link_brackets( context[15], context[24] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[24];
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[0], context[15] );
  res = refalrts::splice_evar( res, context[20], context[23] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A20Z2("UpdateDriveInfo=20@2", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A20Z2);


static refalrts::FnResult func_gen_UpdateDriveInfo_A21Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 49 elems
  refalrts::Iter context[49];
  refalrts::zeros( context, 49 );
  // </0 & UpdateDriveInfo=21@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UpdateDriveInfo=21@2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 (/27 e.new6/25 )/28 (/31 e.new7/29 )/32 e.new8/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 25
  // closed e.new7 as range 29
  // closed e.new8 as range 2
  do {
    // </0 & UpdateDriveInfo=21@2/4 (/7 e.OptFunctions0/33 )/8 (/11 e.AST$f0/35 )/12 (/15 e.KnownNames$a0/37 )/16 (/19 e.Drives$d/39 )/20 (/23 e.Inlines$c0/41 )/24 (/27 e.Metatables$a0/43 )/28 (/31 e.Intrinsics$a0/45 )/32 e.OptIntrinsicFuncs/47 >/1
    context[33] = context[5];
    context[34] = context[6];
    context[35] = context[9];
    context[36] = context[10];
    context[37] = context[13];
    context[38] = context[14];
    context[39] = context[17];
    context[40] = context[18];
    context[41] = context[21];
    context[42] = context[22];
    context[43] = context[25];
    context[44] = context[26];
    context[45] = context[29];
    context[46] = context[30];
    context[47] = context[2];
    context[48] = context[3];
    // closed e.OptFunctions0 as range 33
    // closed e.AST$f0 as range 35
    // closed e.KnownNames$a0 as range 37
    // closed e.Drives$d as range 39
    // closed e.Inlines$c0 as range 41
    // closed e.Metatables$a0 as range 43
    // closed e.Intrinsics$a0 as range 45
    // closed e.OptIntrinsicFuncs as range 47
    //DEBUG: e.OptFunctions0: 33
    //DEBUG: e.AST$f0: 35
    //DEBUG: e.KnownNames$a0: 37
    //DEBUG: e.Drives$d: 39
    //DEBUG: e.Inlines$c0: 41
    //DEBUG: e.Metatables$a0: 43
    //DEBUG: e.Intrinsics$a0: 45
    //DEBUG: e.OptIntrinsicFuncs: 47

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/32 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UpdateDriveInfo=22@1/4 AsIs: (/7 AsIs: e.OptFunctions0/33 AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.OptIntrinsicFuncs/47 } Tile{ AsIs: )/28 AsIs: (/31 } Tile{ AsIs: e.AST$f0/35 } Tile{ AsIs: )/20 HalfReuse: 101/23 } Tile{ HalfReuse: </12 HalfReuse: & DoHashSet/15 } Tile{ HalfReuse: </24 HalfReuse: & Map@5/27 } Tile{ AsIs: e.KnownNames$a0/37 } Tile{ AsIs: e.Drives$d/39 } Tile{ AsIs: e.Inlines$c0/41 } Tile{ AsIs: e.Metatables$a0/43 } Tile{ AsIs: e.Intrinsics$a0/45 } Tile{ HalfReuse: >/16 HalfReuse: >/19 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_UpdateDriveInfo_A22Z1]);
    refalrts::reinit_number(context[23], 101UL);
    refalrts::reinit_open_call(context[12]);
    refalrts::reinit_name(context[15], functions[efunc_DoHashSet]);
    refalrts::reinit_open_call(context[24]);
    refalrts::reinit_name(context[27], functions[efunc_gen_Map_Z5]);
    refalrts::reinit_close_call(context[16]);
    refalrts::reinit_close_call(context[19]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[24] );
    refalrts::link_brackets( context[31], context[20] );
    refalrts::link_brackets( context[11], context[28] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[16], context[19] );
    res = refalrts::splice_evar( res, context[45], context[46] );
    res = refalrts::splice_evar( res, context[43], context[44] );
    res = refalrts::splice_evar( res, context[41], context[42] );
    res = refalrts::splice_evar( res, context[39], context[40] );
    res = refalrts::splice_evar( res, context[37], context[38] );
    res = refalrts::splice_evar( res, context[24], context[27] );
    res = refalrts::splice_evar( res, context[12], context[15] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    res = refalrts::splice_evar( res, context[35], context[36] );
    res = refalrts::splice_evar( res, context[28], context[31] );
    res = refalrts::splice_evar( res, context[47], context[48] );
    refalrts::splice_to_freelist_open( vm, context[11], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=21@2/4 (/7 e.OptFunctions0/5 )/8 (/11 e.AST$f0/9 )/12 (/15 e.KnownNames$a0/13 )/16 (/19 e.Drives$d/17 )/20 (/23 e.Inlines$c0/21 )/24 (/27 e.Metatables$a0/25 )/28 (/31 e.Intrinsics$a0/29 )/32 e.dyn/2 >/1
  // closed e.OptFunctions0 as range 5
  // closed e.AST$f0 as range 9
  // closed e.KnownNames$a0 as range 13
  // closed e.Drives$d as range 17
  // closed e.Inlines$c0 as range 21
  // closed e.Metatables$a0 as range 25
  // closed e.Intrinsics$a0 as range 29
  // closed e.dyn as range 2
  //DEBUG: e.OptFunctions0: 5
  //DEBUG: e.AST$f0: 9
  //DEBUG: e.KnownNames$a0: 13
  //DEBUG: e.Drives$d: 17
  //DEBUG: e.Inlines$c0: 21
  //DEBUG: e.Metatables$a0: 25
  //DEBUG: e.Intrinsics$a0: 29
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/20 (/23 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </24 HalfReuse: & UpdateDriveInfo=21@0/27 } Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.OptFunctions0/5 AsIs: )/8 AsIs: (/11 AsIs: e.AST$f0/9 AsIs: )/12 AsIs: (/15 AsIs: e.KnownNames$a0/13 AsIs: )/16 AsIs: (/19 } Tile{ AsIs: e.Drives$d/17 } Tile{ AsIs: e.Inlines$c0/21 } Tile{ AsIs: e.Metatables$a0/25 } Tile{ AsIs: )/28 AsIs: (/31 AsIs: e.Intrinsics$a0/29 AsIs: )/32 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[24]);
  refalrts::reinit_name(context[27], functions[efunc_gen_UpdateDriveInfo_A21Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[24] );
  refalrts::link_brackets( context[31], context[32] );
  refalrts::link_brackets( context[19], context[28] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[28];
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[0], context[19] );
  res = refalrts::splice_evar( res, context[24], context[27] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A21Z2("UpdateDriveInfo=21@2", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A21Z2);


static refalrts::FnResult func_gen_UpdateDriveInfo_A22Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 25 elems
  refalrts::Iter context[25];
  refalrts::zeros( context, 25 );
  // </0 & UpdateDriveInfo=22@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & UpdateDriveInfo=22@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 e.new4/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 2
  do {
    // </0 & UpdateDriveInfo=22@1/4 (/7 e.OptFunctions0/17 )/8 (/11 e.OptIntrinsicFuncs0/19 )/12 (/15 e.AST$f0/21 )/16 e.HashSetNames/23 >/1
    context[17] = context[5];
    context[18] = context[6];
    context[19] = context[9];
    context[20] = context[10];
    context[21] = context[13];
    context[22] = context[14];
    context[23] = context[2];
    context[24] = context[3];
    // closed e.OptFunctions0 as range 17
    // closed e.OptIntrinsicFuncs0 as range 19
    // closed e.AST$f0 as range 21
    // closed e.HashSetNames as range 23
    //DEBUG: e.OptFunctions0: 17
    //DEBUG: e.OptIntrinsicFuncs0: 19
    //DEBUG: e.AST$f0: 21
    //DEBUG: e.HashSetNames: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 (/11 {REMOVED TILE} {REMOVED TILE} (/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: # DriveInfo/4 AsIs: (/7 } Tile{ AsIs: e.HashSetNames/23 } Tile{ AsIs: )/16 } Tile{ AsIs: e.OptFunctions0/17 } Tile{ AsIs: e.OptIntrinsicFuncs0/19 } Tile{ AsIs: )/12 } Tile{ AsIs: e.AST$f0/21 } Tile{ ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_ident(context[4], identifiers[ident_DriveInfo]);
    refalrts::link_brackets( context[0], context[12] );
    refalrts::link_brackets( context[7], context[16] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_elem( res, context[16] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & UpdateDriveInfo=22@1/4 (/7 e.OptFunctions0/5 )/8 (/11 e.OptIntrinsicFuncs0/9 )/12 (/15 e.AST$f0/13 )/16 e.dyn/2 >/1
  // closed e.OptFunctions0 as range 5
  // closed e.OptIntrinsicFuncs0 as range 9
  // closed e.AST$f0 as range 13
  // closed e.dyn as range 2
  //DEBUG: e.OptFunctions0: 5
  //DEBUG: e.OptIntrinsicFuncs0: 9
  //DEBUG: e.AST$f0: 13
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </17 & UpdateDriveInfo=22@0/18 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: (/7 AsIs: e.OptFunctions0/5 AsIs: )/8 AsIs: (/11 AsIs: e.OptIntrinsicFuncs0/9 AsIs: )/12 AsIs: (/15 AsIs: e.AST$f0/13 AsIs: )/16 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_gen_UpdateDriveInfo_A22Z0]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[17] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[17], context[18] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_UpdateDriveInfo_A22Z1("UpdateDriveInfo=22@1", COOKIE1_, COOKIE2_, func_gen_UpdateDriveInfo_A22Z1);


//End of file
