// This file automatically generated from 'Generator-RASL.ref'
// Don't edit! Edit 'Generator-RASL.ref' and recompile it

#include "refalrts.h"

#define cookie_ns cookie_ns_2576634705_2152158572
#define COOKIE1_ 2576634705U
#define COOKIE2_ 2152158572U

enum efunc {
  efunc_u_u_Stepm_Drop = 0,
  efunc_u_u_Metau_Mu = 1,
  efunc_d_table = 2,
  efunc_Map = 3,
  efunc_gen_Apply_Z3 = 4,
  efunc_gen_Apply_Z0 = 5,
  efunc_Reduce = 6,
  efunc_gen_Reduce_S1A1 = 7,
  efunc_gen_Apply_Z2 = 8,
  efunc_Apply = 9,
  efunc_DoMapAccum = 10,
  efunc_gen_DoMapAccum_S1A1 = 11,
  efunc_Add = 12,
  efunc_Sub = 13,
  efunc_Fetch = 14,
  efunc_Pipe = 15,
  efunc_gen_Pipe_S2L1 = 16,
  efunc_gen_Pipe_S3L1 = 17,
  efunc_gen_PutWordLE_Z1 = 18,
  efunc_gen_PutBlock_Z1 = 19,
  efunc_PutWordLE = 20,
  efunc_Mul = 21,
  efunc_gen_Map_Z1 = 22,
  efunc_DelAccumulator = 23,
  efunc_gen_DoMapAccum_Z1 = 24,
  efunc_gen_Assemble_A1 = 25,
  efunc_gen_Map_Z2 = 26,
  efunc_gen_GenProgramm_RASL_A4 = 27,
  efunc_Lenw = 28,
  efunc_gen_Map_Z3 = 29,
  efunc_gen_GenProgramm_RASL_A3 = 30,
  efunc_gen_Map_Z4 = 31,
  efunc_gen_GenProgramm_RASL_A2 = 32,
  efunc_gen_GenProgramm_RASL_A1 = 33,
  efunc_gen_Map_Z5 = 34,
  efunc_Ord = 35,
  efunc_gen_Fetch_Z2 = 36,
  efunc_gen_BlockTypeNumber_D12 = 37,
  efunc_Divmod = 38,
  efunc_gen_PutWordLE_S2A1 = 39,
  efunc_DisplayName = 40,
  efunc_gen_Asciiz_Z1 = 41,
  efunc_gen_Asciiz_Z2 = 42,
  efunc_gen_Map_Z6 = 43,
  efunc_gen_PutBlock_Z2 = 44,
  efunc_gen_NameWithSignm_Bytes_D2 = 45,
  efunc_gen_PutBlock_Z3 = 46,
  efunc_gen_PutBlock_Z4 = 47,
  efunc_gen_PutBlock_Z5 = 48,
  efunc_NameWithSignm_Bytes = 49,
  efunc_gen_GenCommandm_Globals_S4A1 = 50,
  efunc_gen_PutBlock_Z6 = 51,
  efunc_gen_PutBlock_Z7 = 52,
  efunc_gen_PutBlock_Z8 = 53,
  efunc_gen_PutBlock_Z9 = 54,
  efunc_ResolveLabeledDestinations = 55,
  efunc_gen_Assemble_A3 = 56,
  efunc_gen_DoMapAccum_Z2 = 57,
  efunc_gen_Assemble_A2 = 58,
  efunc_gen_PutCommand_S3B1 = 59,
  efunc_PutCommand = 60,
  efunc_gen_NumberFromOpcode_D119 = 61,
  efunc_gen_PutCommand_S3A1Z3 = 62,
  efunc_gen_PutCommand_S3A1 = 63,
  efunc_gen_PutCommand_S3A1Z7 = 64,
  efunc_gen_CreateCommandInfo_D8 = 65,
  efunc_gen_PutCommand_S3A1Z1 = 66,
  efunc_gen_PutCommand_S3A1Z8 = 67,
  efunc_gen_PutCommand_S3A1Z9 = 68,
  efunc_gen_PutCommand_S3A1Z10 = 69,
  efunc_gen_PutCommand_S3A1Z11 = 70,
  efunc_gen_NumberFromBracket_D6 = 71,
  efunc_gen_ResolveLabeledDestinations_Z1 = 72,
  efunc_gen_ResolveLabeledDestinations_S1B1S1A1 = 73,
  efunc_PrintErr = 74,
  efunc_Exit = 75,
  efunc_Symb = 76,
  efunc_gen_ResolveLabeledDestinations_S1B1 = 77,
  efunc_TermCompare = 78,
  efunc_gen_ResolveLabeledDestinations_S1A2 = 79,
  efunc_gen_ResolveLabeledDestinations_S1A1 = 80,
  efunc_gen_PutBlock_Z10 = 81,
  efunc_gen_PutBlock_Z11 = 82,
  efunc_Mu = 83,
  efunc_Up = 84,
  efunc_Evm_met = 85,
  efunc_Residue = 86,
  efunc_u_u_Metau_Residue = 87,
  efunc_MapAccum = 88,
  efunc_UnBracket = 89,
  efunc_Inc = 90,
  efunc_Dec = 91,
  efunc_NumberFromOpcode = 92,
  efunc_NumberFromBracket = 93,
  efunc_BlockTypeNumber = 94,
  efunc_Revu_NumberFromOpcode = 95,
  efunc_Revu_NumberFromBracket = 96,
  efunc_Revu_BlockTypeNumber = 97,
  efunc_GenProgramm_RASL = 98,
  efunc_BytesFromFunctionList = 99,
  efunc_BytesFromIdentList = 100,
  efunc_BytesFromStringList = 101,
  efunc_BytesFromString = 102,
  efunc_Asciiz = 103,
  efunc_PutBlock = 104,
  efunc_GenCommandm_Globals = 105,
  efunc_Assemble = 106,
  efunc_GenCommandm_RASL = 107,
  efunc_CreateCommandTag = 108,
  efunc_CreateCommandInfo = 109,
  efunc_CalcLabelsOffsets = 110,
  efunc_PutBlockStart = 111,
  efunc_PutBlockReference = 112,
  efunc_PutBlockIncorporated = 113,
  efunc_gen_Apply_Z4 = 114,
  efunc_gen_PutWordLE_Z0 = 115,
  efunc_gen_UnBracket_D1 = 116,
  efunc_gen_Map_Z0 = 117,
  efunc_gen_UnBracket_Z0 = 118,
  efunc_gen_PutBlock_Z0 = 119,
  efunc_gen_DoMapAccum_S1A1Z1 = 120,
  efunc_gen_GenCommandm_Globals_D4 = 121,
  efunc_gen_DoMapAccum_Z0 = 122,
  efunc_gen_GenCommandm_Globals_Z0 = 123,
  efunc_gen_GenCommandm_RASL_Z0 = 124,
  efunc_gen_Fetch_Z1 = 125,
  efunc_gen_BytesFromStringList_L1D1 = 126,
  efunc_gen_BytesFromStringList_L1Z0 = 127,
  efunc_gen_BytesFromIdentList_L1D1 = 128,
  efunc_gen_BytesFromIdentList_L1Z0 = 129,
  efunc_gen_BytesFromFunctionList_L1D1 = 130,
  efunc_gen_BytesFromFunctionList_L1Z0 = 131,
  efunc_gen_Asciiz_Z0 = 132,
  efunc_gen_BytesFromStringList_L1L1D1 = 133,
  efunc_gen_Fetch_Z0 = 134,
  efunc_gen_BytesFromStringList_L1L1Z0 = 135,
  efunc_gen_PutBlock_L1D1 = 136,
  efunc_gen_PutBlock_L1Z0 = 137,
  efunc_gen_GenCommandm_Globals_S4L1D1 = 138,
  efunc_gen_GenCommandm_Globals_S4L1Z0 = 139,
  efunc_gen_DoMapAccum_S1A1Z2 = 140,
  efunc_gen_CalcLabelsOffsets_L1D3 = 141,
  efunc_gen_CalcLabelsOffsets_L1Z0 = 142,
  efunc_gen_PutCommand_S3A1Z0 = 143,
  efunc_gen_ResolveLabeledDestinations_Z0 = 144,
  efunc_gen_DoMapAccum_S1A1Z0 = 145,
};


enum ident {
  ident_CmdProfileFunction = 0,
  ident_CmdLoadConstants = 1,
  ident_CmdIssueMemory = 2,
  ident_CmdReserveBacktrackStack = 3,
  ident_CmdOnFailGoTo = 4,
  ident_CmdProfilerStopSentence = 5,
  ident_CmdInitB0 = 6,
  ident_CmdInitB0m_Lite = 7,
  ident_CmdChar = 8,
  ident_AlgLeft = 9,
  ident_AlgRight = 10,
  ident_AlgTerm = 11,
  ident_CmdCharSave = 12,
  ident_CmdNumber = 13,
  ident_CmdNumberSave = 14,
  ident_CmdHugeNum = 15,
  ident_CmdHugeNumSave = 16,
  ident_CmdName = 17,
  ident_CmdNameSave = 18,
  ident_CmdIdent = 19,
  ident_CmdIdentSave = 20,
  ident_CmdBrackets = 21,
  ident_CmdBracketsSave = 22,
  ident_CmdADT = 23,
  ident_CmdADTSave = 24,
  ident_CmdCallSave = 25,
  ident_CmdEmpty = 26,
  ident_CmdNotEmpty = 27,
  ident_CmdVar = 28,
  ident_CmdVarSave = 29,
  ident_CmdRepeated = 30,
  ident_CmdRepeatedSave = 31,
  ident_CmdEPrepare = 32,
  ident_CmdEStart = 33,
  ident_CmdSave = 34,
  ident_CmdResetAllocator = 35,
  ident_CmdSetResArgBegin = 36,
  ident_CmdSetResRightEdge = 37,
  ident_CmdSetRes = 38,
  ident_CmdCopyEVar = 39,
  ident_CmdCopySTVar = 40,
  ident_CmdReinitSVar = 41,
  ident_Allocate = 42,
  ident_ElChar = 43,
  ident_ElName = 44,
  ident_ElNumber = 45,
  ident_ElHugeNumber = 46,
  ident_ElIdent = 47,
  ident_ElBracket = 48,
  ident_ElString = 49,
  ident_ElClosureHead = 50,
  ident_ElUnwrappedClosure = 51,
  ident_Reinit = 52,
  ident_Update = 53,
  ident_CmdLinkBrackets = 54,
  ident_CmdPushStack = 55,
  ident_CmdWrapClosure = 56,
  ident_CmdSpliceElem = 57,
  ident_CmdSpliceEVar = 58,
  ident_CmdSpliceSTVar = 59,
  ident_CmdSpliceRange = 60,
  ident_CmdSpliceTile = 61,
  ident_CmdSpliceToFreeList = 62,
  ident_CmdNextStep = 63,
  ident_CmdTrashLeftEdge = 64,
  ident_CmdTrash = 65,
  ident_CmdFail = 66,
  ident_CmdFetchSwapHead = 67,
  ident_CmdFetchSwapInfoBounds = 68,
  ident_CmdSwapSave = 69,
  ident_CmdPerformNative = 70,
  ident_CmdScale = 71,
  ident_CmdVariableDebugOffset = 72,
  ident_CmdSpliceToFreeListm_Range = 73,
  ident_CmdPushState = 74,
  ident_CmdPopState = 75,
  ident_CmdMainLoopReturnSuccess = 76,
  ident_ElOpenADT = 77,
  ident_ElOpenBracket = 78,
  ident_ElOpenCall = 79,
  ident_ElCloseADT = 80,
  ident_ElCloseBracket = 81,
  ident_ElCloseCall = 82,
  ident_Start = 83,
  ident_ConstTable = 84,
  ident_RefalFunction = 85,
  ident_NativeFunction = 86,
  ident_EmptyFunction = 87,
  ident_Swap = 88,
  ident_Reference = 89,
  ident_ConditionRasl = 90,
  ident_ConditionNative = 91,
  ident_Incorporated = 92,
  ident_UnitName = 93,
  ident_Metatable = 94,
  ident_Ok = 95,
  ident_Fails = 96,
  ident_ModuleID = 97,
  ident_CmdFuncArray = 98,
  ident_CmdIdentArray = 99,
  ident_CmdStringArray = 100,
  ident_RASL = 101,
  ident_Items = 102,
  ident_GNm_Entry = 103,
  ident_GNm_Local = 104,
  ident_CmdEnumDescr = 105,
  ident_CmdInterpretFuncDescr = 106,
  ident_CmdMetatable = 107,
  ident_CmdSwapDescr = 108,
  ident_CmdConditionFuncDecsrRasl = 109,
  ident_CmdConditionFuncDecsrNative = 110,
  ident_CmdNativeFuncDescr = 111,
  ident_LABEL = 112,
  ident_Funck32_namek58_ = 113,
  ident_CmdRepeatedTVarSave = 114,
  ident_CmdVariableDebugTable = 115,
  ident_ARGm_BEGIN = 116,
  ident_RIGHTm_EDGE = 117,
  ident_CmdCopyVar = 118,
  ident_CmdCreateElem = 119,
  ident_CmdInsertElem = 120,
  ident_CmdInsertVar = 121,
  ident_CmdInsertRange = 122,
  ident_CmdInsertTile = 123,
  ident_LEFTm_EDGE = 124,
  ident_Mu = 125,
  ident_Up = 126,
  ident_Evm_met = 127,
  ident_Residue = 128,
  ident_u_u_Metau_Residue = 129,
  ident_Apply = 130,
  ident_Map = 131,
  ident_Reduce = 132,
  ident_Fetch = 133,
  ident_MapAccum = 134,
  ident_DoMapAccum = 135,
  ident_UnBracket = 136,
  ident_DelAccumulator = 137,
  ident_Inc = 138,
  ident_Dec = 139,
  ident_Pipe = 140,
  ident_NumberFromOpcode = 141,
  ident_NumberFromBracket = 142,
  ident_BlockTypeNumber = 143,
  ident_Revu_NumberFromOpcode = 144,
  ident_Revu_NumberFromBracket = 145,
  ident_Revu_BlockTypeNumber = 146,
  ident_GenProgramm_RASL = 147,
  ident_BytesFromFunctionList = 148,
  ident_BytesFromIdentList = 149,
  ident_BytesFromStringList = 150,
  ident_BytesFromString = 151,
  ident_Asciiz = 152,
  ident_PutBlock = 153,
  ident_PutWordLE = 154,
  ident_NameWithSignm_Bytes = 155,
  ident_GenCommandm_Globals = 156,
  ident_Assemble = 157,
  ident_GenCommandm_RASL = 158,
  ident_PutCommand = 159,
  ident_CreateCommandTag = 160,
  ident_CreateCommandInfo = 161,
  ident_CalcLabelsOffsets = 162,
  ident_ResolveLabeledDestinations = 163,
  ident_PutBlockStart = 164,
  ident_PutBlockReference = 165,
  ident_PutBlockIncorporated = 166,
};


static refalrts::FnResult func_Mu(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Mu/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Mu("Mu", COOKIE1_, COOKIE2_, func_Mu);


static refalrts::FnResult func_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 HalfReuse: & $table/1 } >/8 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::alloc_close_call(vm, context[8]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::reinit_name(context[1], functions[efunc_d_table]);
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Residue("Residue", COOKIE1_, COOKIE2_, func_Residue);


static refalrts::FnResult func_u_u_Metau_Residue(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & __Meta_Residue/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & __Step-Drop/6 >/7 Tile{ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: e.Arg/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_u_u_Stepm_Drop]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_u_u_Metau_Residue("__Meta_Residue", COOKIE1_, COOKIE2_, func_u_u_Metau_Residue);


static refalrts::FnResult func_Apply(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Apply/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply/4 s.Fn/5 e.Argument/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.Argument as range 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.Argument: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.Argument/7 HalfReuse: & $table/1 } >/9 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply/4 (/5 t.Closure/9 e.Bounded/7 )/6 e.Argument/2 >/1
  context[7] = 0;
  context[8] = 0;
  if( ! refalrts::brackets_term( context[7], context[8], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument as range 2
  context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.Bounded as range 7
  //DEBUG: e.Argument: 2
  //DEBUG: t.Closure: 9
  //DEBUG: e.Bounded: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply/4 } Tile{ AsIs: t.Closure/9 } Tile{ AsIs: e.Bounded/7 } Tile{ AsIs: e.Argument/2 } Tile{ AsIs: >/1 ]] }
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Apply("Apply", COOKIE1_, COOKIE2_, func_Apply);


static refalrts::FnResult func_Map(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 24 elems
  refalrts::Iter context[24];
  refalrts::zeros( context, 24 );
  // </0 & Map/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Map/4 t.new1/5 e.new2/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Map/4 t.new3/5 t.new4/9 e.new5/7 >/1
    context[7] = context[2];
    context[8] = context[3];
    context[10] = refalrts::tvar_left( context[9], context[7], context[8] );
    if( ! context[10] )
      continue;
    // closed e.new5 as range 7
    do {
      // </0 & Map/4 s.Fn/5 t.Next/9 e.Tail/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      if( ! refalrts::svar_term( context[5], context[5] ) )
        continue;
      // closed e.Tail as range 11
      //DEBUG: t.Next: 9
      //DEBUG: s.Fn: 5
      //DEBUG: e.Tail: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: t.Next/9 } & $table/13 >/14 </15 & Map/16 s.Fn/5/17 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[13], functions[efunc_d_table]);
      refalrts::alloc_close_call(vm, context[14]);
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_Map]);
      refalrts::copy_stvar(vm, context[17], context[5]);
      refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[13], context[17] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Map/4 (/5 t./15 e.0/13 )/6 t.Next/9 e.Tail/11 >/1
      context[11] = context[7];
      context[12] = context[8];
      context[13] = 0;
      context[14] = 0;
      if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
        continue;
      // closed e.Tail as range 11
      context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
      if( ! context[16] )
        continue;
      // closed e.0 as range 13
      //DEBUG: t.Next: 9
      //DEBUG: e.Tail: 11
      //DEBUG: t.: 15
      //DEBUG: e.0: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </17 & Apply@3/18 t./15/19 e.0/13/21 Tile{ AsIs: t.Next/9 } >/23 Tile{ AsIs: </0 AsIs: & Map/4 AsIs: (/5 AsIs: t./15 AsIs: e.0/13 AsIs: )/6 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_gen_Apply_Z3]);
      refalrts::copy_evar(vm, context[19], context[20], context[15], context[16]);
      refalrts::copy_evar(vm, context[21], context[22], context[13], context[14]);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_evar( res, context[0], context[6] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[17], context[20] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map/4 t.Fn/5 t.Next/9 e.Tail/11 >/1
    context[11] = context[7];
    context[12] = context[8];
    // closed e.Tail as range 11
    //DEBUG: t.Fn: 5
    //DEBUG: t.Next: 9
    //DEBUG: e.Tail: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.Fn/5 AsIs: t.Next/9 } >/13 </14 & Map/15 t.Fn/5/16 Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_Map]);
    refalrts::copy_evar(vm, context[16], context[17], context[5], context[6]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map/4 t.Fn/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Map/4 t.Fn/5 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Map("Map", COOKIE1_, COOKIE2_, func_Map);


static refalrts::FnResult func_gen_Reduce_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Reduce$1=1/4 t.Fn/5 (/9 e.Tail/7 )/10 t.Acc$a/11 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Tail as range 7
  context[12] = refalrts::tvar_left( context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5
  //DEBUG: e.Tail: 7
  //DEBUG: t.Acc$a: 11

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Reduce/4 AsIs: t.Fn/5 } Tile{ AsIs: t.Acc$a/11 } Tile{ AsIs: e.Tail/7 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Reduce]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Reduce_S1A1("Reduce$1=1", COOKIE1_, COOKIE2_, func_gen_Reduce_S1A1);


static refalrts::FnResult func_Reduce(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Reduce/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Reduce/4 t.new1/5 t.new2/7 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & Reduce/4 t.Fn/5 t.Acc/7 t.Next/11 e.Tail/9 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[12] = refalrts::tvar_left( context[11], context[9], context[10] );
    if( ! context[12] )
      continue;
    // closed e.Tail as range 9
    //DEBUG: t.Fn: 5
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 11
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & Reduce$1=1/14 t.Fn/5/15 (/17 Tile{ AsIs: e.Tail/9 } )/18 Tile{ AsIs: </0 Reuse: & Apply@2/4 AsIs: t.Fn/5 AsIs: t.Acc/7 AsIs: t.Next/11 } >/19 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_Reduce_S1A1]);
    refalrts::copy_evar(vm, context[15], context[16], context[5], context[6]);
    refalrts::alloc_open_bracket(vm, context[17]);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[17], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[0], context[12] );
    res = refalrts::splice_elem( res, context[18] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[13], context[17] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Reduce/4 t.Fn/5 t.Acc/7 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Reduce/4 t.Fn/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Reduce("Reduce", COOKIE1_, COOKIE2_, func_Reduce);


static refalrts::FnResult func_Fetch(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & Fetch/4 e.Argument/2 t.Function/5 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_right( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Argument as range 2
  //DEBUG: t.Function: 5
  //DEBUG: e.Argument: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply/4 } Tile{ AsIs: t.Function/5 } Tile{ AsIs: e.Argument/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Apply]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Fetch("Fetch", COOKIE1_, COOKIE2_, func_Fetch);


static refalrts::FnResult func_MapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & MapAccum/4 t.Fn/5 t.Acc/7 e.Tail/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail as range 2
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn/5 AsIs: t.Acc/7 } (/9 )/10 Tile{ AsIs: e.Tail/2 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[9]);
  refalrts::alloc_close_bracket(vm, context[10]);
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_MapAccum("MapAccum", COOKIE1_, COOKIE2_, func_MapAccum);


static refalrts::FnResult func_gen_DoMapAccum_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & DoMapAccum$1=1/4 t.Fn/5 (/9 e.Scanned/7 )/10 (/13 e.Tail/11 )/14 t.Acc$a/15 e.StepScanned/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  // closed e.Scanned as range 7
  // closed e.Tail as range 11
  context[16] = refalrts::tvar_left( context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  // closed e.StepScanned as range 2
  //DEBUG: t.Fn: 5
  //DEBUG: e.Scanned: 7
  //DEBUG: e.Tail: 11
  //DEBUG: t.Acc$a: 15
  //DEBUG: e.StepScanned: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/9 {REMOVED TILE} )/10 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum/4 AsIs: t.Fn/5 } Tile{ AsIs: t.Acc$a/15 } Tile{ AsIs: (/13 } Tile{ AsIs: e.Scanned/7 } Tile{ AsIs: e.StepScanned/2 } Tile{ AsIs: )/14 } Tile{ AsIs: e.Tail/11 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_DoMapAccum]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[13], context[14] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  res = refalrts::splice_elem( res, context[13] );
  res = refalrts::splice_evar( res, context[15], context[16] );
  refalrts::splice_to_freelist_open( vm, context[6], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1("DoMapAccum$1=1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1);


static refalrts::FnResult func_DoMapAccum(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & DoMapAccum/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum/4 t.new1/5 t.new2/7 (/11 e.new3/9 )/12 e.new4/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new3 as range 9
  // closed e.new4 as range 2
  do {
    // </0 & DoMapAccum/4 t.Fn/5 t.Acc/7 (/11 e.Scanned/13 )/12 t.Next/17 e.Tail/15 >/1
    context[13] = context[9];
    context[14] = context[10];
    context[15] = context[2];
    context[16] = context[3];
    // closed e.Scanned as range 13
    context[18] = refalrts::tvar_left( context[17], context[15], context[16] );
    if( ! context[18] )
      continue;
    // closed e.Tail as range 15
    //DEBUG: t.Fn: 5
    //DEBUG: t.Acc: 7
    //DEBUG: e.Scanned: 13
    //DEBUG: t.Next: 17
    //DEBUG: e.Tail: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1/4 AsIs: t.Fn/5 } Tile{ AsIs: (/11 AsIs: e.Scanned/13 AsIs: )/12 } (/19 Tile{ AsIs: e.Tail/15 } )/20 </21 & Apply@2/22 t.Fn/5/23 Tile{ AsIs: t.Acc/7 } Tile{ AsIs: t.Next/17 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_gen_Apply_Z2]);
    refalrts::copy_evar(vm, context[23], context[24], context[5], context[6]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[21] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[7], context[8] );
    res = refalrts::splice_evar( res, context[20], context[24] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum/4 t.Fn/5 t.Acc/7 (/11 e.Scanned/9 )/12 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Scanned as range 9
  //DEBUG: t.Fn: 5
  //DEBUG: t.Acc: 7
  //DEBUG: e.Scanned: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DoMapAccum/4 t.Fn/5 {REMOVED TILE} (/11 {REMOVED TILE} )/12 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/7 } Tile{ AsIs: e.Scanned/9 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DoMapAccum("DoMapAccum", COOKIE1_, COOKIE2_, func_DoMapAccum);


static refalrts::FnResult func_UnBracket(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & UnBracket/4 (/7 e.Expr/5 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Expr as range 5
  //DEBUG: e.Expr: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & UnBracket/4 (/7 {REMOVED TILE} )/8 >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Expr/5 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_UnBracket("UnBracket", COOKIE1_, COOKIE2_, func_UnBracket);


static refalrts::FnResult func_DelAccumulator(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 7 elems
  refalrts::Iter context[7];
  refalrts::zeros( context, 7 );
  // </0 & DelAccumulator/4 t.Acc/5 e.Tail/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  // closed e.Tail as range 2
  //DEBUG: t.Acc: 5
  //DEBUG: e.Tail: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & DelAccumulator/4 t.Acc/5 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Tail/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_DelAccumulator("DelAccumulator", COOKIE1_, COOKIE2_, func_DelAccumulator);


static refalrts::FnResult func_Inc(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Inc/4 e.Num/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Num as range 2
  //DEBUG: e.Num: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Add/0 HalfReuse: 1/4 AsIs: e.Num/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_Add]);
  refalrts::reinit_number(context[4], 1UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Inc("Inc", COOKIE1_, COOKIE2_, func_Inc);


static refalrts::FnResult func_Dec(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Dec/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Dec/4 s.Num/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.Num: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 AsIs: s.Num/7 HalfReuse: 1/1 } >/8 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::update_name(context[4], functions[efunc_Sub]);
    refalrts::reinit_number(context[1], 1UL);
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Dec/4 e.Num/2 >/1
  // closed e.Num as range 2
  //DEBUG: e.Num: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Sub/4 } (/5 Tile{ AsIs: e.Num/2 } )/6 1/7 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[5]);
  refalrts::alloc_close_bracket(vm, context[6]);
  refalrts::alloc_number(vm, context[7], 1UL);
  refalrts::update_name(context[4], functions[efunc_Sub]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[5], context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[6], context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Dec("Dec", COOKIE1_, COOKIE2_, func_Dec);


static refalrts::FnResult func_gen_Pipe_S2L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Pipe$2\1/4 t.Func/5 (/9 e.Funcs/7 )/10 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.Funcs as range 7
  // closed e.Arg as range 2
  //DEBUG: t.Func: 5
  //DEBUG: e.Funcs: 7
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch/4 } </11 & Apply/12 Tile{ AsIs: t.Func/5 } Tile{ AsIs: e.Arg/2 } >/13 </14 Tile{ HalfReuse: & Pipe/9 AsIs: e.Funcs/7 HalfReuse: >/10 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::alloc_name(vm, context[12], functions[efunc_Apply]);
  refalrts::alloc_close_call(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::update_name(context[4], functions[efunc_Fetch]);
  refalrts::reinit_name(context[9], functions[efunc_Pipe]);
  refalrts::reinit_close_call(context[10]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[10] );
  refalrts::push_stack( vm, context[14] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[11] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S2L1("Pipe$2\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S2L1);


static refalrts::FnResult func_gen_Pipe_S3L1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & Pipe$3\1/4 e.Arg/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Arg as range 2
  //DEBUG: e.Arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe$3\1/4 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.Arg/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Pipe_S3L1("Pipe$3\\1", COOKIE1_, COOKIE2_, func_gen_Pipe_S3L1);


static refalrts::FnResult func_Pipe(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Pipe/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Pipe/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Pipe/4 t.Func/7 >/1
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;
      //DEBUG: t.Func: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: t.Func/7 } Tile{ ]] }
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[7], context[8] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Pipe/4 t.Func/7 e.Funcs/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Funcs as range 9
    //DEBUG: t.Func: 7
    //DEBUG: e.Funcs: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: [*]/0 Reuse: & Pipe$2\1/4 AsIs: t.Func/7 } (/11 Tile{ AsIs: e.Funcs/9 } )/12 Tile{ HalfReuse: {*}/1 ]] }
    refalrts::alloc_open_bracket(vm, context[11]);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::reinit_closure_head(context[0]);
    refalrts::update_name(context[4], functions[efunc_gen_Pipe_S2L1]);
    refalrts::reinit_unwrapped_closure(context[1], context[0]);
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    refalrts::wrap_closure( context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Pipe/4 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Pipe/4 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: & Pipe$3\1/1 ]] }
  refalrts::reinit_name(context[1], functions[efunc_gen_Pipe_S3L1]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Pipe("Pipe", COOKIE1_, COOKIE2_, func_Pipe);


static refalrts::FnResult func_NumberFromOpcode(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & NumberFromOpcode/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & NumberFromOpcode/4 e.new1/5 s.new2/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_right( context[7], context[5], context[6] ) )
      continue;
    // closed e.new1 as range 5
    do {
      // </0 & NumberFromOpcode/4 s.new3/7 >/1
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 # CmdProfileFunction/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdProfileFunction], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdProfileFunction/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/1 ]] }
        refalrts::reinit_number(context[1], 0UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdLoadConstants/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdLoadConstants], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdLoadConstants/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 1/1 ]] }
        refalrts::reinit_number(context[1], 1UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdIssueMemory/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdIssueMemory], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdIssueMemory/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 2/1 ]] }
        refalrts::reinit_number(context[1], 2UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdReserveBacktrackStack/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdReserveBacktrackStack], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdReserveBacktrackStack/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 3/1 ]] }
        refalrts::reinit_number(context[1], 3UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdOnFailGoTo/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdOnFailGoTo], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdOnFailGoTo/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 4/1 ]] }
        refalrts::reinit_number(context[1], 4UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdProfilerStopSentence/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdProfilerStopSentence], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdProfilerStopSentence/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 5/1 ]] }
        refalrts::reinit_number(context[1], 5UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdInitB0/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdInitB0], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdInitB0/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 6/1 ]] }
        refalrts::reinit_number(context[1], 6UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 # CmdInitB0-Lite/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdInitB0m_Lite], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdInitB0-Lite/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 7/1 ]] }
      refalrts::reinit_number(context[1], 7UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 s.new4/10 s.new3/7 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::svar_left( context[10], context[8], context[9] ) )
        continue;
      if( ! refalrts::empty_seq( context[8], context[9] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 # CmdChar/10 s.new5/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdChar], context[10] ) )
          continue;
        do {
          // </0 & NumberFromOpcode/4 # CmdChar/10 # AlgLeft/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdChar/10 # AlgLeft/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 8/1 ]] }
          refalrts::reinit_number(context[1], 8UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 # CmdChar/10 # AlgRight/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdChar/10 # AlgRight/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 9/1 ]] }
          refalrts::reinit_number(context[1], 9UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NumberFromOpcode/4 # CmdChar/10 # AlgTerm/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdChar/10 # AlgTerm/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 10/1 ]] }
        refalrts::reinit_number(context[1], 10UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdCharSave/10 s.new5/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdCharSave], context[10] ) )
          continue;
        do {
          // </0 & NumberFromOpcode/4 # CmdCharSave/10 # AlgLeft/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdCharSave/10 # AlgLeft/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 11/1 ]] }
          refalrts::reinit_number(context[1], 11UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NumberFromOpcode/4 # CmdCharSave/10 # AlgRight/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdCharSave/10 # AlgRight/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 12/1 ]] }
        refalrts::reinit_number(context[1], 12UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdNumber/10 s.new5/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdNumber], context[10] ) )
          continue;
        do {
          // </0 & NumberFromOpcode/4 # CmdNumber/10 # AlgLeft/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdNumber/10 # AlgLeft/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 13/1 ]] }
          refalrts::reinit_number(context[1], 13UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 # CmdNumber/10 # AlgRight/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdNumber/10 # AlgRight/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 14/1 ]] }
          refalrts::reinit_number(context[1], 14UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NumberFromOpcode/4 # CmdNumber/10 # AlgTerm/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdNumber/10 # AlgTerm/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 15/1 ]] }
        refalrts::reinit_number(context[1], 15UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdNumberSave/10 s.new5/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdNumberSave], context[10] ) )
          continue;
        do {
          // </0 & NumberFromOpcode/4 # CmdNumberSave/10 # AlgLeft/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdNumberSave/10 # AlgLeft/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 16/1 ]] }
          refalrts::reinit_number(context[1], 16UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NumberFromOpcode/4 # CmdNumberSave/10 # AlgRight/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdNumberSave/10 # AlgRight/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 17/1 ]] }
        refalrts::reinit_number(context[1], 17UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdHugeNum/10 s.new5/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdHugeNum], context[10] ) )
          continue;
        do {
          // </0 & NumberFromOpcode/4 # CmdHugeNum/10 # AlgLeft/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdHugeNum/10 # AlgLeft/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 18/1 ]] }
          refalrts::reinit_number(context[1], 18UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 # CmdHugeNum/10 # AlgRight/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdHugeNum/10 # AlgRight/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 19/1 ]] }
          refalrts::reinit_number(context[1], 19UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NumberFromOpcode/4 # CmdHugeNum/10 # AlgTerm/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdHugeNum/10 # AlgTerm/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 20/1 ]] }
        refalrts::reinit_number(context[1], 20UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdHugeNumSave/10 s.new5/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdHugeNumSave], context[10] ) )
          continue;
        do {
          // </0 & NumberFromOpcode/4 # CmdHugeNumSave/10 # AlgLeft/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdHugeNumSave/10 # AlgLeft/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 21/1 ]] }
          refalrts::reinit_number(context[1], 21UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NumberFromOpcode/4 # CmdHugeNumSave/10 # AlgRight/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdHugeNumSave/10 # AlgRight/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 22/1 ]] }
        refalrts::reinit_number(context[1], 22UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdName/10 s.new5/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdName], context[10] ) )
          continue;
        do {
          // </0 & NumberFromOpcode/4 # CmdName/10 # AlgLeft/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdName/10 # AlgLeft/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 23/1 ]] }
          refalrts::reinit_number(context[1], 23UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 # CmdName/10 # AlgRight/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdName/10 # AlgRight/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 24/1 ]] }
          refalrts::reinit_number(context[1], 24UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NumberFromOpcode/4 # CmdName/10 # AlgTerm/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdName/10 # AlgTerm/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 25/1 ]] }
        refalrts::reinit_number(context[1], 25UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdNameSave/10 s.new5/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdNameSave], context[10] ) )
          continue;
        do {
          // </0 & NumberFromOpcode/4 # CmdNameSave/10 # AlgLeft/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdNameSave/10 # AlgLeft/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 26/1 ]] }
          refalrts::reinit_number(context[1], 26UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NumberFromOpcode/4 # CmdNameSave/10 # AlgRight/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdNameSave/10 # AlgRight/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 27/1 ]] }
        refalrts::reinit_number(context[1], 27UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdIdent/10 s.new5/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdIdent], context[10] ) )
          continue;
        do {
          // </0 & NumberFromOpcode/4 # CmdIdent/10 # AlgLeft/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdIdent/10 # AlgLeft/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 28/1 ]] }
          refalrts::reinit_number(context[1], 28UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 # CmdIdent/10 # AlgRight/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdIdent/10 # AlgRight/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 29/1 ]] }
          refalrts::reinit_number(context[1], 29UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NumberFromOpcode/4 # CmdIdent/10 # AlgTerm/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdIdent/10 # AlgTerm/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 30/1 ]] }
        refalrts::reinit_number(context[1], 30UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdIdentSave/10 s.new5/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdIdentSave], context[10] ) )
          continue;
        do {
          // </0 & NumberFromOpcode/4 # CmdIdentSave/10 # AlgLeft/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdIdentSave/10 # AlgLeft/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 31/1 ]] }
          refalrts::reinit_number(context[1], 31UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NumberFromOpcode/4 # CmdIdentSave/10 # AlgRight/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdIdentSave/10 # AlgRight/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 32/1 ]] }
        refalrts::reinit_number(context[1], 32UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdBrackets/10 s.new5/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdBrackets], context[10] ) )
          continue;
        do {
          // </0 & NumberFromOpcode/4 # CmdBrackets/10 # AlgLeft/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdBrackets/10 # AlgLeft/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 33/1 ]] }
          refalrts::reinit_number(context[1], 33UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 # CmdBrackets/10 # AlgRight/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdBrackets/10 # AlgRight/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 34/1 ]] }
          refalrts::reinit_number(context[1], 34UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NumberFromOpcode/4 # CmdBrackets/10 # AlgTerm/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdBrackets/10 # AlgTerm/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 35/1 ]] }
        refalrts::reinit_number(context[1], 35UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdBracketsSave/10 s.new5/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdBracketsSave], context[10] ) )
          continue;
        do {
          // </0 & NumberFromOpcode/4 # CmdBracketsSave/10 # AlgLeft/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdBracketsSave/10 # AlgLeft/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 36/1 ]] }
          refalrts::reinit_number(context[1], 36UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NumberFromOpcode/4 # CmdBracketsSave/10 # AlgRight/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdBracketsSave/10 # AlgRight/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 37/1 ]] }
        refalrts::reinit_number(context[1], 37UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdADT/10 s.new5/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdADT], context[10] ) )
          continue;
        do {
          // </0 & NumberFromOpcode/4 # CmdADT/10 # AlgLeft/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdADT/10 # AlgLeft/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 38/1 ]] }
          refalrts::reinit_number(context[1], 38UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 # CmdADT/10 # AlgRight/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdADT/10 # AlgRight/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 39/1 ]] }
          refalrts::reinit_number(context[1], 39UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NumberFromOpcode/4 # CmdADT/10 # AlgTerm/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdADT/10 # AlgTerm/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 40/1 ]] }
        refalrts::reinit_number(context[1], 40UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdADTSave/10 s.new5/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdADTSave], context[10] ) )
          continue;
        do {
          // </0 & NumberFromOpcode/4 # CmdADTSave/10 # AlgLeft/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdADTSave/10 # AlgLeft/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 41/1 ]] }
          refalrts::reinit_number(context[1], 41UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 # CmdADTSave/10 # AlgRight/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdADTSave/10 # AlgRight/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 42/1 ]] }
          refalrts::reinit_number(context[1], 42UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NumberFromOpcode/4 # CmdADTSave/10 # AlgTerm/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdADTSave/10 # AlgTerm/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 43/1 ]] }
        refalrts::reinit_number(context[1], 43UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 # CmdCallSave/10 # AlgLeft/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdCallSave], context[10] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdCallSave/10 # AlgLeft/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 44/1 ]] }
      refalrts::reinit_number(context[1], 44UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 s.new3/7 >/1
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 # CmdEmpty/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdEmpty], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdEmpty/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 45/1 ]] }
        refalrts::reinit_number(context[1], 45UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 # CmdNotEmpty/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdNotEmpty], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdNotEmpty/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 46/1 ]] }
      refalrts::reinit_number(context[1], 46UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NumberFromOpcode/4 s.new4/11 # CmdVar/10 s.new3/7 >/1
    context[8] = context[5];
    context[9] = context[6];
    context[10] = refalrts::ident_right( identifiers[ident_CmdVar], context[8], context[9] );
    if( ! context[10] )
      continue;
    if( ! refalrts::svar_left( context[11], context[8], context[9] ) )
      continue;
    if( ! refalrts::empty_seq( context[8], context[9] ) )
      continue;
    do {
      // </0 & NumberFromOpcode/4 's'/11 # CmdVar/10 s.new5/7 >/1
      if( ! refalrts::char_term( 's', context[11] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 's'/11 # CmdVar/10 # AlgLeft/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 's'/11 # CmdVar/10 # AlgLeft/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 47/1 ]] }
        refalrts::reinit_number(context[1], 47UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 's'/11 # CmdVar/10 # AlgRight/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 's'/11 # CmdVar/10 # AlgRight/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 48/1 ]] }
        refalrts::reinit_number(context[1], 48UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 's'/11 # CmdVar/10 # AlgTerm/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 's'/11 # CmdVar/10 # AlgTerm/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 49/1 ]] }
      refalrts::reinit_number(context[1], 49UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NumberFromOpcode/4 't'/11 # CmdVar/10 # AlgLeft/7 >/1
    if( ! refalrts::char_term( 't', context[11] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[7] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 't'/11 # CmdVar/10 # AlgLeft/7 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 50/1 ]] }
    refalrts::reinit_number(context[1], 50UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 e.new1/5 s.new2/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_right( context[7], context[5], context[6] ) )
      continue;
    // closed e.new1 as range 5
    do {
      // </0 & NumberFromOpcode/4 s.new4/10 s.new5/11 s.new3/7 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::svar_left( context[10], context[8], context[9] ) )
        continue;
      if( ! refalrts::svar_left( context[11], context[8], context[9] ) )
        continue;
      if( ! refalrts::empty_seq( context[8], context[9] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 't'/10 s.new7/11 s.new6/7 >/1
        if( ! refalrts::char_term( 't', context[10] ) )
          continue;
        do {
          // </0 & NumberFromOpcode/4 't'/10 # CmdVar/11 # AlgRight/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_CmdVar], context[11] ) )
            continue;
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 't'/10 # CmdVar/11 # AlgRight/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 51/1 ]] }
          refalrts::reinit_number(context[1], 51UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NumberFromOpcode/4 't'/10 # CmdVarSave/11 s.new8/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdVarSave], context[11] ) )
          continue;
        do {
          // </0 & NumberFromOpcode/4 't'/10 # CmdVarSave/11 # AlgLeft/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 't'/10 # CmdVarSave/11 # AlgLeft/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 52/1 ]] }
          refalrts::reinit_number(context[1], 52UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NumberFromOpcode/4 't'/10 # CmdVarSave/11 # AlgRight/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 't'/10 # CmdVarSave/11 # AlgRight/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 53/1 ]] }
        refalrts::reinit_number(context[1], 53UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 s.new7/10 # CmdRepeated/11 s.new6/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdRepeated], context[11] ) )
          continue;
        do {
          // </0 & NumberFromOpcode/4 'e'/10 # CmdRepeated/11 s.new8/7 >/1
          if( ! refalrts::char_term( 'e', context[10] ) )
            continue;
          do {
            // </0 & NumberFromOpcode/4 'e'/10 # CmdRepeated/11 # AlgLeft/7 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[7] ) )
              continue;

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 'e'/10 # CmdRepeated/11 # AlgLeft/7 {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ HalfReuse: 54/1 ]] }
            refalrts::reinit_number(context[1], 54UL);
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & NumberFromOpcode/4 'e'/10 # CmdRepeated/11 # AlgRight/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 'e'/10 # CmdRepeated/11 # AlgRight/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 55/1 ]] }
          refalrts::reinit_number(context[1], 55UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 's'/10 # CmdRepeated/11 s.new8/7 >/1
          if( ! refalrts::char_term( 's', context[10] ) )
            continue;
          do {
            // </0 & NumberFromOpcode/4 's'/10 # CmdRepeated/11 # AlgLeft/7 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[7] ) )
              continue;

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 's'/10 # CmdRepeated/11 # AlgLeft/7 {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ HalfReuse: 56/1 ]] }
            refalrts::reinit_number(context[1], 56UL);
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & NumberFromOpcode/4 's'/10 # CmdRepeated/11 # AlgRight/7 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[7] ) )
              continue;

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 's'/10 # CmdRepeated/11 # AlgRight/7 {REMOVED TILE}
            //RESULT: Tile{ [[ } Tile{ HalfReuse: 57/1 ]] }
            refalrts::reinit_number(context[1], 57UL);
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & NumberFromOpcode/4 's'/10 # CmdRepeated/11 # AlgTerm/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 's'/10 # CmdRepeated/11 # AlgTerm/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 58/1 ]] }
          refalrts::reinit_number(context[1], 58UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NumberFromOpcode/4 't'/10 # CmdRepeated/11 s.new8/7 >/1
        if( ! refalrts::char_term( 't', context[10] ) )
          continue;
        do {
          // </0 & NumberFromOpcode/4 't'/10 # CmdRepeated/11 # AlgLeft/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 't'/10 # CmdRepeated/11 # AlgLeft/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 59/1 ]] }
          refalrts::reinit_number(context[1], 59UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 't'/10 # CmdRepeated/11 # AlgRight/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 't'/10 # CmdRepeated/11 # AlgRight/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 60/1 ]] }
          refalrts::reinit_number(context[1], 60UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NumberFromOpcode/4 't'/10 # CmdRepeated/11 # AlgTerm/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 't'/10 # CmdRepeated/11 # AlgTerm/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 61/1 ]] }
        refalrts::reinit_number(context[1], 61UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 't'/10 # CmdRepeatedSave/11 s.new6/7 >/1
      if( ! refalrts::char_term( 't', context[10] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_CmdRepeatedSave], context[11] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 't'/10 # CmdRepeatedSave/11 # AlgLeft/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 't'/10 # CmdRepeatedSave/11 # AlgLeft/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 62/1 ]] }
        refalrts::reinit_number(context[1], 62UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 't'/10 # CmdRepeatedSave/11 # AlgRight/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 't'/10 # CmdRepeatedSave/11 # AlgRight/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 63/1 ]] }
      refalrts::reinit_number(context[1], 63UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 s.new3/7 >/1
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 # CmdEPrepare/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdEPrepare], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdEPrepare/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 64/1 ]] }
        refalrts::reinit_number(context[1], 64UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdEStart/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdEStart], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdEStart/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 65/1 ]] }
        refalrts::reinit_number(context[1], 65UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdSave/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSave], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdSave/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 66/1 ]] }
        refalrts::reinit_number(context[1], 66UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdResetAllocator/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdResetAllocator], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdResetAllocator/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 67/1 ]] }
        refalrts::reinit_number(context[1], 67UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdSetResArgBegin/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSetResArgBegin], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdSetResArgBegin/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 68/1 ]] }
        refalrts::reinit_number(context[1], 68UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdSetResRightEdge/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSetResRightEdge], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdSetResRightEdge/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 69/1 ]] }
        refalrts::reinit_number(context[1], 69UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdSetRes/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSetRes], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdSetRes/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 70/1 ]] }
        refalrts::reinit_number(context[1], 70UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdCopyEVar/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdCopyEVar], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdCopyEVar/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 71/1 ]] }
        refalrts::reinit_number(context[1], 71UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # CmdCopySTVar/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdCopySTVar], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdCopySTVar/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 72/1 ]] }
        refalrts::reinit_number(context[1], 72UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 # CmdReinitSVar/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdReinitSVar], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdReinitSVar/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 73/1 ]] }
      refalrts::reinit_number(context[1], 73UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 s.new4/10 s.new3/7 >/1
      context[8] = context[5];
      context[9] = context[6];
      if( ! refalrts::svar_left( context[10], context[8], context[9] ) )
        continue;
      if( ! refalrts::empty_seq( context[8], context[9] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 # Allocate/10 s.new5/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_Allocate], context[10] ) )
          continue;
        do {
          // </0 & NumberFromOpcode/4 # Allocate/10 # ElChar/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElChar], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Allocate/10 # ElChar/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 74/1 ]] }
          refalrts::reinit_number(context[1], 74UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 # Allocate/10 # ElName/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElName], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Allocate/10 # ElName/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 75/1 ]] }
          refalrts::reinit_number(context[1], 75UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 # Allocate/10 # ElNumber/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Allocate/10 # ElNumber/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 76/1 ]] }
          refalrts::reinit_number(context[1], 76UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 # Allocate/10 # ElHugeNumber/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElHugeNumber], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Allocate/10 # ElHugeNumber/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 77/1 ]] }
          refalrts::reinit_number(context[1], 77UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 # Allocate/10 # ElIdent/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Allocate/10 # ElIdent/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 78/1 ]] }
          refalrts::reinit_number(context[1], 78UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 # Allocate/10 # ElBracket/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElBracket], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Allocate/10 # ElBracket/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 79/1 ]] }
          refalrts::reinit_number(context[1], 79UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 # Allocate/10 # ElString/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElString], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Allocate/10 # ElString/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 80/1 ]] }
          refalrts::reinit_number(context[1], 80UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 # Allocate/10 # ElClosureHead/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElClosureHead], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Allocate/10 # ElClosureHead/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 113/1 ]] }
          refalrts::reinit_number(context[1], 113UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NumberFromOpcode/4 # Allocate/10 # ElUnwrappedClosure/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Allocate/10 # ElUnwrappedClosure/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 114/1 ]] }
        refalrts::reinit_number(context[1], 114UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # Reinit/10 s.new5/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_Reinit], context[10] ) )
          continue;
        do {
          // </0 & NumberFromOpcode/4 # Reinit/10 # ElChar/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElChar], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Reinit/10 # ElChar/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 81/1 ]] }
          refalrts::reinit_number(context[1], 81UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 # Reinit/10 # ElName/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElName], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Reinit/10 # ElName/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 82/1 ]] }
          refalrts::reinit_number(context[1], 82UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 # Reinit/10 # ElNumber/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Reinit/10 # ElNumber/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 83/1 ]] }
          refalrts::reinit_number(context[1], 83UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 # Reinit/10 # ElHugeNumber/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElHugeNumber], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Reinit/10 # ElHugeNumber/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 84/1 ]] }
          refalrts::reinit_number(context[1], 84UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 # Reinit/10 # ElIdent/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Reinit/10 # ElIdent/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 85/1 ]] }
          refalrts::reinit_number(context[1], 85UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 # Reinit/10 # ElBracket/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElBracket], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Reinit/10 # ElBracket/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 86/1 ]] }
          refalrts::reinit_number(context[1], 86UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & NumberFromOpcode/4 # Reinit/10 # ElClosureHead/7 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElClosureHead], context[7] ) )
            continue;

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Reinit/10 # ElClosureHead/7 {REMOVED TILE}
          //RESULT: Tile{ [[ } Tile{ HalfReuse: 87/1 ]] }
          refalrts::reinit_number(context[1], 87UL);
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & NumberFromOpcode/4 # Reinit/10 # ElUnwrappedClosure/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Reinit/10 # ElUnwrappedClosure/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 88/1 ]] }
        refalrts::reinit_number(context[1], 88UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 # Update/10 s.new5/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_Update], context[10] ) )
        continue;
      do {
        // </0 & NumberFromOpcode/4 # Update/10 # ElChar/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElChar], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Update/10 # ElChar/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 89/1 ]] }
        refalrts::reinit_number(context[1], 89UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # Update/10 # ElName/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElName], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Update/10 # ElName/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 90/1 ]] }
        refalrts::reinit_number(context[1], 90UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # Update/10 # ElNumber/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Update/10 # ElNumber/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 91/1 ]] }
        refalrts::reinit_number(context[1], 91UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & NumberFromOpcode/4 # Update/10 # ElHugeNumber/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElHugeNumber], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Update/10 # ElHugeNumber/7 {REMOVED TILE}
        //RESULT: Tile{ [[ } Tile{ HalfReuse: 92/1 ]] }
        refalrts::reinit_number(context[1], 92UL);
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & NumberFromOpcode/4 # Update/10 # ElIdent/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # Update/10 # ElIdent/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 93/1 ]] }
      refalrts::reinit_number(context[1], 93UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NumberFromOpcode/4 s.new3/7 >/1
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & NumberFromOpcode/4 # CmdLinkBrackets/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdLinkBrackets], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdLinkBrackets/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 94/1 ]] }
      refalrts::reinit_number(context[1], 94UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdPushStack/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdPushStack], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdPushStack/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 95/1 ]] }
      refalrts::reinit_number(context[1], 95UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdWrapClosure/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdWrapClosure], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdWrapClosure/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 110/1 ]] }
      refalrts::reinit_number(context[1], 110UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdSpliceElem/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceElem], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdSpliceElem/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 96/1 ]] }
      refalrts::reinit_number(context[1], 96UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & NumberFromOpcode/4 # CmdSpliceEVar/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceEVar], context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdSpliceEVar/7 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: 97/1 ]] }
      refalrts::reinit_number(context[1], 97UL);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & NumberFromOpcode/4 # CmdSpliceSTVar/7 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdSpliceSTVar], context[7] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdSpliceSTVar/7 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 98/1 ]] }
    refalrts::reinit_number(context[1], 98UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & NumberFromOpcode/4 s.new1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & NumberFromOpcode/4 # CmdSpliceRange/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdSpliceRange], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdSpliceRange/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 99/1 ]] }
    refalrts::reinit_number(context[1], 99UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdSpliceTile/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdSpliceTile], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdSpliceTile/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 100/1 ]] }
    refalrts::reinit_number(context[1], 100UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdSpliceToFreeList/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdSpliceToFreeList], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdSpliceToFreeList/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 101/1 ]] }
    refalrts::reinit_number(context[1], 101UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdNextStep/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdNextStep], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdNextStep/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 102/1 ]] }
    refalrts::reinit_number(context[1], 102UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdTrashLeftEdge/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdTrashLeftEdge], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdTrashLeftEdge/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 103/1 ]] }
    refalrts::reinit_number(context[1], 103UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdTrash/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdTrash], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdTrash/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 104/1 ]] }
    refalrts::reinit_number(context[1], 104UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdFail/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdFail], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdFail/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 105/1 ]] }
    refalrts::reinit_number(context[1], 105UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdFetchSwapHead/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdFetchSwapHead], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdFetchSwapHead/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 106/1 ]] }
    refalrts::reinit_number(context[1], 106UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdFetchSwapInfoBounds/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdFetchSwapInfoBounds], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdFetchSwapInfoBounds/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 107/1 ]] }
    refalrts::reinit_number(context[1], 107UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdSwapSave/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdSwapSave], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdSwapSave/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 108/1 ]] }
    refalrts::reinit_number(context[1], 108UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdPerformNative/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdPerformNative], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdPerformNative/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 109/1 ]] }
    refalrts::reinit_number(context[1], 109UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdScale/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdScale], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdScale/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 111/1 ]] }
    refalrts::reinit_number(context[1], 111UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdVariableDebugOffset/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdVariableDebugOffset], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdVariableDebugOffset/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 112/1 ]] }
    refalrts::reinit_number(context[1], 112UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdSpliceToFreeList-Range/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdSpliceToFreeListm_Range], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdSpliceToFreeList-Range/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 115/1 ]] }
    refalrts::reinit_number(context[1], 115UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdPushState/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdPushState], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdPushState/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 116/1 ]] }
    refalrts::reinit_number(context[1], 116UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromOpcode/4 # CmdPopState/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdPopState], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdPopState/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 117/1 ]] }
    refalrts::reinit_number(context[1], 117UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & NumberFromOpcode/4 # CmdMainLoopReturnSuccess/5 >/1
  if( ! refalrts::ident_term( identifiers[ident_CmdMainLoopReturnSuccess], context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & NumberFromOpcode/4 # CmdMainLoopReturnSuccess/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: 118/1 ]] }
  refalrts::reinit_number(context[1], 118UL);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NumberFromOpcode("NumberFromOpcode", 0U, 0U, func_NumberFromOpcode);


static refalrts::FnResult func_NumberFromBracket(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & NumberFromBracket/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & NumberFromBracket/4 s.new1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & NumberFromBracket/4 # ElOpenADT/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElOpenADT], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromBracket/4 # ElOpenADT/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/1 ]] }
    refalrts::reinit_number(context[1], 0UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromBracket/4 # ElOpenBracket/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElOpenBracket], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromBracket/4 # ElOpenBracket/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 1/1 ]] }
    refalrts::reinit_number(context[1], 1UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromBracket/4 # ElOpenCall/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElOpenCall], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromBracket/4 # ElOpenCall/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 2/1 ]] }
    refalrts::reinit_number(context[1], 2UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromBracket/4 # ElCloseADT/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElCloseADT], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromBracket/4 # ElCloseADT/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 3/1 ]] }
    refalrts::reinit_number(context[1], 3UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & NumberFromBracket/4 # ElCloseBracket/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElCloseBracket], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & NumberFromBracket/4 # ElCloseBracket/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 4/1 ]] }
    refalrts::reinit_number(context[1], 4UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & NumberFromBracket/4 # ElCloseCall/5 >/1
  if( ! refalrts::ident_term( identifiers[ident_ElCloseCall], context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & NumberFromBracket/4 # ElCloseCall/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: 5/1 ]] }
  refalrts::reinit_number(context[1], 5UL);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NumberFromBracket("NumberFromBracket", 0U, 0U, func_NumberFromBracket);


static refalrts::FnResult func_BlockTypeNumber(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & BlockTypeNumber/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & BlockTypeNumber/4 s.new1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & BlockTypeNumber/4 # Start/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Start], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & BlockTypeNumber/4 # Start/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 1/1 ]] }
    refalrts::reinit_number(context[1], 1UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & BlockTypeNumber/4 # ConstTable/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ConstTable], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & BlockTypeNumber/4 # ConstTable/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 2/1 ]] }
    refalrts::reinit_number(context[1], 2UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & BlockTypeNumber/4 # RefalFunction/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_RefalFunction], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & BlockTypeNumber/4 # RefalFunction/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 3/1 ]] }
    refalrts::reinit_number(context[1], 3UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & BlockTypeNumber/4 # NativeFunction/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_NativeFunction], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & BlockTypeNumber/4 # NativeFunction/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 4/1 ]] }
    refalrts::reinit_number(context[1], 4UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & BlockTypeNumber/4 # EmptyFunction/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_EmptyFunction], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & BlockTypeNumber/4 # EmptyFunction/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 5/1 ]] }
    refalrts::reinit_number(context[1], 5UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & BlockTypeNumber/4 # Swap/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Swap], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & BlockTypeNumber/4 # Swap/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 6/1 ]] }
    refalrts::reinit_number(context[1], 6UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & BlockTypeNumber/4 # Reference/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Reference], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & BlockTypeNumber/4 # Reference/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 7/1 ]] }
    refalrts::reinit_number(context[1], 7UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & BlockTypeNumber/4 # ConditionRasl/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ConditionRasl], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & BlockTypeNumber/4 # ConditionRasl/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 8/1 ]] }
    refalrts::reinit_number(context[1], 8UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & BlockTypeNumber/4 # ConditionNative/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ConditionNative], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & BlockTypeNumber/4 # ConditionNative/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 9/1 ]] }
    refalrts::reinit_number(context[1], 9UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & BlockTypeNumber/4 # Incorporated/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_Incorporated], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & BlockTypeNumber/4 # Incorporated/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 10/1 ]] }
    refalrts::reinit_number(context[1], 10UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & BlockTypeNumber/4 # UnitName/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_UnitName], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & BlockTypeNumber/4 # UnitName/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 11/1 ]] }
    refalrts::reinit_number(context[1], 11UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & BlockTypeNumber/4 # Metatable/5 >/1
  if( ! refalrts::ident_term( identifiers[ident_Metatable], context[5] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & BlockTypeNumber/4 # Metatable/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: 12/1 ]] }
  refalrts::reinit_number(context[1], 12UL);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_BlockTypeNumber("BlockTypeNumber", 0U, 0U, func_BlockTypeNumber);


static refalrts::FnResult func_Revu_NumberFromOpcode(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Rev_NumberFromOpcode/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Rev_NumberFromOpcode/4 s.new1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & Rev_NumberFromOpcode/4 0/7 >/1
      if( ! refalrts::number_term( 0UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdProfileFunction/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdProfileFunction]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 1/7 >/1
      if( ! refalrts::number_term( 1UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdLoadConstants/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdLoadConstants]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 2/7 >/1
      if( ! refalrts::number_term( 2UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdIssueMemory/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdIssueMemory]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 3/7 >/1
      if( ! refalrts::number_term( 3UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdReserveBacktrackStack/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdReserveBacktrackStack]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 4/7 >/1
      if( ! refalrts::number_term( 4UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdOnFailGoTo/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdOnFailGoTo]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 5/7 >/1
      if( ! refalrts::number_term( 5UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdProfilerStopSentence/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdProfilerStopSentence]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 6/7 >/1
      if( ! refalrts::number_term( 6UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdInitB0/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdInitB0]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 7/7 >/1
      if( ! refalrts::number_term( 7UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdInitB0-Lite/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdInitB0m_Lite]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 8/7 >/1
      if( ! refalrts::number_term( 8UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdChar/7 HalfReuse: # AlgLeft/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdChar]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgLeft]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 9/7 >/1
      if( ! refalrts::number_term( 9UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdChar/7 HalfReuse: # AlgRight/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdChar]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgRight]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 10/7 >/1
      if( ! refalrts::number_term( 10UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdChar/7 HalfReuse: # AlgTerm/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdChar]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgTerm]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 11/7 >/1
      if( ! refalrts::number_term( 11UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdCharSave/7 HalfReuse: # AlgLeft/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdCharSave]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgLeft]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 12/7 >/1
      if( ! refalrts::number_term( 12UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdCharSave/7 HalfReuse: # AlgRight/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdCharSave]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgRight]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 13/7 >/1
      if( ! refalrts::number_term( 13UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdNumber/7 HalfReuse: # AlgLeft/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdNumber]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgLeft]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 14/7 >/1
      if( ! refalrts::number_term( 14UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdNumber/7 HalfReuse: # AlgRight/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdNumber]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgRight]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 15/7 >/1
      if( ! refalrts::number_term( 15UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdNumber/7 HalfReuse: # AlgTerm/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdNumber]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgTerm]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 16/7 >/1
      if( ! refalrts::number_term( 16UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdNumberSave/7 HalfReuse: # AlgLeft/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdNumberSave]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgLeft]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 17/7 >/1
      if( ! refalrts::number_term( 17UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdNumberSave/7 HalfReuse: # AlgRight/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdNumberSave]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgRight]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 18/7 >/1
      if( ! refalrts::number_term( 18UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdHugeNum/7 HalfReuse: # AlgLeft/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdHugeNum]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgLeft]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 19/7 >/1
      if( ! refalrts::number_term( 19UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdHugeNum/7 HalfReuse: # AlgRight/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdHugeNum]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgRight]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 20/7 >/1
      if( ! refalrts::number_term( 20UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdHugeNum/7 HalfReuse: # AlgTerm/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdHugeNum]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgTerm]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 21/7 >/1
      if( ! refalrts::number_term( 21UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdHugeNumSave/7 HalfReuse: # AlgLeft/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdHugeNumSave]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgLeft]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 22/7 >/1
      if( ! refalrts::number_term( 22UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdHugeNumSave/7 HalfReuse: # AlgRight/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdHugeNumSave]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgRight]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 23/7 >/1
      if( ! refalrts::number_term( 23UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdName/7 HalfReuse: # AlgLeft/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdName]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgLeft]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 24/7 >/1
      if( ! refalrts::number_term( 24UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdName/7 HalfReuse: # AlgRight/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdName]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgRight]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 25/7 >/1
      if( ! refalrts::number_term( 25UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdName/7 HalfReuse: # AlgTerm/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdName]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgTerm]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 26/7 >/1
      if( ! refalrts::number_term( 26UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdNameSave/7 HalfReuse: # AlgLeft/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdNameSave]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgLeft]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 27/7 >/1
      if( ! refalrts::number_term( 27UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdNameSave/7 HalfReuse: # AlgRight/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdNameSave]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgRight]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 28/7 >/1
      if( ! refalrts::number_term( 28UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdIdent/7 HalfReuse: # AlgLeft/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdIdent]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgLeft]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 29/7 >/1
      if( ! refalrts::number_term( 29UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdIdent/7 HalfReuse: # AlgRight/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdIdent]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgRight]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 30/7 >/1
      if( ! refalrts::number_term( 30UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdIdent/7 HalfReuse: # AlgTerm/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdIdent]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgTerm]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 31/7 >/1
      if( ! refalrts::number_term( 31UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdIdentSave/7 HalfReuse: # AlgLeft/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdIdentSave]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgLeft]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 32/7 >/1
      if( ! refalrts::number_term( 32UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdIdentSave/7 HalfReuse: # AlgRight/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdIdentSave]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgRight]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 33/7 >/1
      if( ! refalrts::number_term( 33UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdBrackets/7 HalfReuse: # AlgLeft/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdBrackets]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgLeft]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 34/7 >/1
      if( ! refalrts::number_term( 34UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdBrackets/7 HalfReuse: # AlgRight/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdBrackets]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgRight]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 35/7 >/1
      if( ! refalrts::number_term( 35UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdBrackets/7 HalfReuse: # AlgTerm/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdBrackets]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgTerm]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 36/7 >/1
      if( ! refalrts::number_term( 36UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdBracketsSave/7 HalfReuse: # AlgLeft/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdBracketsSave]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgLeft]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 37/7 >/1
      if( ! refalrts::number_term( 37UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdBracketsSave/7 HalfReuse: # AlgRight/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdBracketsSave]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgRight]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 38/7 >/1
      if( ! refalrts::number_term( 38UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdADT/7 HalfReuse: # AlgLeft/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdADT]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgLeft]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 39/7 >/1
      if( ! refalrts::number_term( 39UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdADT/7 HalfReuse: # AlgRight/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdADT]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgRight]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 40/7 >/1
      if( ! refalrts::number_term( 40UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdADT/7 HalfReuse: # AlgTerm/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdADT]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgTerm]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 41/7 >/1
      if( ! refalrts::number_term( 41UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdADTSave/7 HalfReuse: # AlgLeft/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdADTSave]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgLeft]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 42/7 >/1
      if( ! refalrts::number_term( 42UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdADTSave/7 HalfReuse: # AlgRight/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdADTSave]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgRight]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 43/7 >/1
      if( ! refalrts::number_term( 43UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdADTSave/7 HalfReuse: # AlgTerm/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdADTSave]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgTerm]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 44/7 >/1
      if( ! refalrts::number_term( 44UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # CmdCallSave/7 HalfReuse: # AlgLeft/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_CmdCallSave]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgLeft]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 45/7 >/1
      if( ! refalrts::number_term( 45UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdEmpty/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdEmpty]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 46/7 >/1
      if( ! refalrts::number_term( 46UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdNotEmpty/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdNotEmpty]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 47/7 >/1
      if( ! refalrts::number_term( 47UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: 's'/4 HalfReuse: # CmdVar/7 HalfReuse: # AlgLeft/1 ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
      refalrts::reinit_char(context[4], 's');
      refalrts::reinit_ident(context[7], identifiers[ident_CmdVar]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgLeft]);
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 48/7 >/1
      if( ! refalrts::number_term( 48UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: 's'/4 HalfReuse: # CmdVar/7 HalfReuse: # AlgRight/1 ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
      refalrts::reinit_char(context[4], 's');
      refalrts::reinit_ident(context[7], identifiers[ident_CmdVar]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgRight]);
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 49/7 >/1
      if( ! refalrts::number_term( 49UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: 's'/4 HalfReuse: # CmdVar/7 HalfReuse: # AlgTerm/1 ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
      refalrts::reinit_char(context[4], 's');
      refalrts::reinit_ident(context[7], identifiers[ident_CmdVar]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgTerm]);
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Rev_NumberFromOpcode/4 50/7 >/1
    if( ! refalrts::number_term( 50UL, context[7] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: 't'/4 HalfReuse: # CmdVar/7 HalfReuse: # AlgLeft/1 ]] }
    refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
    refalrts::reinit_char(context[4], 't');
    refalrts::reinit_ident(context[7], identifiers[ident_CmdVar]);
    refalrts::reinit_ident(context[1], identifiers[ident_AlgLeft]);
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Rev_NumberFromOpcode/4 s.new1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & Rev_NumberFromOpcode/4 51/7 >/1
      if( ! refalrts::number_term( 51UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: 't'/4 HalfReuse: # CmdVar/7 HalfReuse: # AlgRight/1 ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
      refalrts::reinit_char(context[4], 't');
      refalrts::reinit_ident(context[7], identifiers[ident_CmdVar]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgRight]);
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 52/7 >/1
      if( ! refalrts::number_term( 52UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: 't'/4 HalfReuse: # CmdVarSave/7 HalfReuse: # AlgLeft/1 ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
      refalrts::reinit_char(context[4], 't');
      refalrts::reinit_ident(context[7], identifiers[ident_CmdVarSave]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgLeft]);
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 53/7 >/1
      if( ! refalrts::number_term( 53UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: 't'/4 HalfReuse: # CmdVarSave/7 HalfReuse: # AlgRight/1 ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
      refalrts::reinit_char(context[4], 't');
      refalrts::reinit_ident(context[7], identifiers[ident_CmdVarSave]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgRight]);
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 54/7 >/1
      if( ! refalrts::number_term( 54UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: 'e'/4 HalfReuse: # CmdRepeated/7 HalfReuse: # AlgLeft/1 ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_ident(context[7], identifiers[ident_CmdRepeated]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgLeft]);
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 55/7 >/1
      if( ! refalrts::number_term( 55UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: 'e'/4 HalfReuse: # CmdRepeated/7 HalfReuse: # AlgRight/1 ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
      refalrts::reinit_char(context[4], 'e');
      refalrts::reinit_ident(context[7], identifiers[ident_CmdRepeated]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgRight]);
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 56/7 >/1
      if( ! refalrts::number_term( 56UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: 's'/4 HalfReuse: # CmdRepeated/7 HalfReuse: # AlgLeft/1 ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
      refalrts::reinit_char(context[4], 's');
      refalrts::reinit_ident(context[7], identifiers[ident_CmdRepeated]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgLeft]);
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 57/7 >/1
      if( ! refalrts::number_term( 57UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: 's'/4 HalfReuse: # CmdRepeated/7 HalfReuse: # AlgRight/1 ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
      refalrts::reinit_char(context[4], 's');
      refalrts::reinit_ident(context[7], identifiers[ident_CmdRepeated]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgRight]);
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 58/7 >/1
      if( ! refalrts::number_term( 58UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: 's'/4 HalfReuse: # CmdRepeated/7 HalfReuse: # AlgTerm/1 ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
      refalrts::reinit_char(context[4], 's');
      refalrts::reinit_ident(context[7], identifiers[ident_CmdRepeated]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgTerm]);
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 59/7 >/1
      if( ! refalrts::number_term( 59UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: 't'/4 HalfReuse: # CmdRepeated/7 HalfReuse: # AlgLeft/1 ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
      refalrts::reinit_char(context[4], 't');
      refalrts::reinit_ident(context[7], identifiers[ident_CmdRepeated]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgLeft]);
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 60/7 >/1
      if( ! refalrts::number_term( 60UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: 't'/4 HalfReuse: # CmdRepeated/7 HalfReuse: # AlgRight/1 ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
      refalrts::reinit_char(context[4], 't');
      refalrts::reinit_ident(context[7], identifiers[ident_CmdRepeated]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgRight]);
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 61/7 >/1
      if( ! refalrts::number_term( 61UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: 't'/4 HalfReuse: # CmdRepeated/7 HalfReuse: # AlgTerm/1 ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
      refalrts::reinit_char(context[4], 't');
      refalrts::reinit_ident(context[7], identifiers[ident_CmdRepeated]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgTerm]);
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 62/7 >/1
      if( ! refalrts::number_term( 62UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: 't'/4 HalfReuse: # CmdRepeatedSave/7 HalfReuse: # AlgLeft/1 ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
      refalrts::reinit_char(context[4], 't');
      refalrts::reinit_ident(context[7], identifiers[ident_CmdRepeatedSave]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgLeft]);
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 63/7 >/1
      if( ! refalrts::number_term( 63UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: # Ok/0 HalfReuse: 't'/4 HalfReuse: # CmdRepeatedSave/7 HalfReuse: # AlgRight/1 ]] }
      refalrts::reinit_ident(context[0], identifiers[ident_Ok]);
      refalrts::reinit_char(context[4], 't');
      refalrts::reinit_ident(context[7], identifiers[ident_CmdRepeatedSave]);
      refalrts::reinit_ident(context[1], identifiers[ident_AlgRight]);
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 64/7 >/1
      if( ! refalrts::number_term( 64UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdEPrepare/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdEPrepare]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 65/7 >/1
      if( ! refalrts::number_term( 65UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdEStart/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdEStart]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 66/7 >/1
      if( ! refalrts::number_term( 66UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdSave/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdSave]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 67/7 >/1
      if( ! refalrts::number_term( 67UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdResetAllocator/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdResetAllocator]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 68/7 >/1
      if( ! refalrts::number_term( 68UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdSetResArgBegin/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdSetResArgBegin]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 69/7 >/1
      if( ! refalrts::number_term( 69UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdSetResRightEdge/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdSetResRightEdge]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 70/7 >/1
      if( ! refalrts::number_term( 70UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdSetRes/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdSetRes]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 71/7 >/1
      if( ! refalrts::number_term( 71UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdCopyEVar/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdCopyEVar]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 72/7 >/1
      if( ! refalrts::number_term( 72UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdCopySTVar/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdCopySTVar]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 73/7 >/1
      if( ! refalrts::number_term( 73UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdReinitSVar/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdReinitSVar]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 74/7 >/1
      if( ! refalrts::number_term( 74UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # Allocate/7 HalfReuse: # ElChar/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_Allocate]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElChar]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 75/7 >/1
      if( ! refalrts::number_term( 75UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # Allocate/7 HalfReuse: # ElName/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_Allocate]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElName]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 76/7 >/1
      if( ! refalrts::number_term( 76UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # Allocate/7 HalfReuse: # ElNumber/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_Allocate]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElNumber]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 77/7 >/1
      if( ! refalrts::number_term( 77UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # Allocate/7 HalfReuse: # ElHugeNumber/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_Allocate]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElHugeNumber]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 78/7 >/1
      if( ! refalrts::number_term( 78UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # Allocate/7 HalfReuse: # ElIdent/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_Allocate]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElIdent]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 79/7 >/1
      if( ! refalrts::number_term( 79UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # Allocate/7 HalfReuse: # ElBracket/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_Allocate]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElBracket]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 80/7 >/1
      if( ! refalrts::number_term( 80UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # Allocate/7 HalfReuse: # ElString/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_Allocate]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElString]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 113/7 >/1
      if( ! refalrts::number_term( 113UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # Allocate/7 HalfReuse: # ElClosureHead/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_Allocate]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElClosureHead]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 114/7 >/1
      if( ! refalrts::number_term( 114UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # Allocate/7 HalfReuse: # ElUnwrappedClosure/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_Allocate]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElUnwrappedClosure]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 81/7 >/1
      if( ! refalrts::number_term( 81UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # Reinit/7 HalfReuse: # ElChar/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_Reinit]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElChar]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 82/7 >/1
      if( ! refalrts::number_term( 82UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # Reinit/7 HalfReuse: # ElName/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_Reinit]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElName]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 83/7 >/1
      if( ! refalrts::number_term( 83UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # Reinit/7 HalfReuse: # ElNumber/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_Reinit]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElNumber]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 84/7 >/1
      if( ! refalrts::number_term( 84UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # Reinit/7 HalfReuse: # ElHugeNumber/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_Reinit]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElHugeNumber]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 85/7 >/1
      if( ! refalrts::number_term( 85UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # Reinit/7 HalfReuse: # ElIdent/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_Reinit]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElIdent]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 86/7 >/1
      if( ! refalrts::number_term( 86UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # Reinit/7 HalfReuse: # ElBracket/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_Reinit]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElBracket]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 87/7 >/1
      if( ! refalrts::number_term( 87UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # Reinit/7 HalfReuse: # ElClosureHead/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_Reinit]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElClosureHead]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 88/7 >/1
      if( ! refalrts::number_term( 88UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # Reinit/7 HalfReuse: # ElUnwrappedClosure/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_Reinit]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElUnwrappedClosure]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 89/7 >/1
      if( ! refalrts::number_term( 89UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # Update/7 HalfReuse: # ElChar/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_Update]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElChar]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 90/7 >/1
      if( ! refalrts::number_term( 90UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # Update/7 HalfReuse: # ElName/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_Update]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElName]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 91/7 >/1
      if( ! refalrts::number_term( 91UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # Update/7 HalfReuse: # ElNumber/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_Update]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElNumber]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 92/7 >/1
      if( ! refalrts::number_term( 92UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # Update/7 HalfReuse: # ElHugeNumber/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_Update]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElHugeNumber]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 93/7 >/1
      if( ! refalrts::number_term( 93UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/4 HalfReuse: # Update/7 HalfReuse: # ElIdent/1 ]] }
      refalrts::reinit_ident(context[4], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[7], identifiers[ident_Update]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElIdent]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 94/7 >/1
      if( ! refalrts::number_term( 94UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdLinkBrackets/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdLinkBrackets]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 95/7 >/1
      if( ! refalrts::number_term( 95UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdPushStack/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdPushStack]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 110/7 >/1
      if( ! refalrts::number_term( 110UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdWrapClosure/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdWrapClosure]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 96/7 >/1
      if( ! refalrts::number_term( 96UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdSpliceElem/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdSpliceElem]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 97/7 >/1
      if( ! refalrts::number_term( 97UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdSpliceEVar/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdSpliceEVar]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Rev_NumberFromOpcode/4 98/7 >/1
    if( ! refalrts::number_term( 98UL, context[7] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdSpliceSTVar/1 ]] }
    refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
    refalrts::reinit_ident(context[1], identifiers[ident_CmdSpliceSTVar]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Rev_NumberFromOpcode/4 s.new1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & Rev_NumberFromOpcode/4 99/7 >/1
      if( ! refalrts::number_term( 99UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdSpliceRange/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdSpliceRange]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 100/7 >/1
      if( ! refalrts::number_term( 100UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdSpliceTile/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdSpliceTile]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 101/7 >/1
      if( ! refalrts::number_term( 101UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdSpliceToFreeList/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdSpliceToFreeList]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 102/7 >/1
      if( ! refalrts::number_term( 102UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdNextStep/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdNextStep]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 103/7 >/1
      if( ! refalrts::number_term( 103UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdTrashLeftEdge/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdTrashLeftEdge]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 104/7 >/1
      if( ! refalrts::number_term( 104UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdTrash/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdTrash]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 105/7 >/1
      if( ! refalrts::number_term( 105UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdFail/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdFail]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 106/7 >/1
      if( ! refalrts::number_term( 106UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdFetchSwapHead/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdFetchSwapHead]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 107/7 >/1
      if( ! refalrts::number_term( 107UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdFetchSwapInfoBounds/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdFetchSwapInfoBounds]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 108/7 >/1
      if( ! refalrts::number_term( 108UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdSwapSave/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdSwapSave]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 109/7 >/1
      if( ! refalrts::number_term( 109UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdPerformNative/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdPerformNative]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 111/7 >/1
      if( ! refalrts::number_term( 111UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdScale/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdScale]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 112/7 >/1
      if( ! refalrts::number_term( 112UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdVariableDebugOffset/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdVariableDebugOffset]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 115/7 >/1
      if( ! refalrts::number_term( 115UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdSpliceToFreeList-Range/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdSpliceToFreeListm_Range]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 116/7 >/1
      if( ! refalrts::number_term( 116UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdPushState/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdPushState]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromOpcode/4 117/7 >/1
      if( ! refalrts::number_term( 117UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdPopState/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_CmdPopState]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Rev_NumberFromOpcode/4 118/7 >/1
    if( ! refalrts::number_term( 118UL, context[7] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # CmdMainLoopReturnSuccess/1 ]] }
    refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
    refalrts::reinit_ident(context[1], identifiers[ident_CmdMainLoopReturnSuccess]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Rev_NumberFromOpcode/4 e._/2 >/1
  // closed e._ as range 2
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Rev_NumberFromOpcode/4 e._/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Fails/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_Fails]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Revu_NumberFromOpcode("Rev_NumberFromOpcode", 0U, 0U, func_Revu_NumberFromOpcode);


static refalrts::FnResult func_Revu_NumberFromBracket(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Rev_NumberFromBracket/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Rev_NumberFromBracket/4 s.new1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & Rev_NumberFromBracket/4 0/7 >/1
      if( ! refalrts::number_term( 0UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromBracket/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # ElOpenADT/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElOpenADT]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromBracket/4 1/7 >/1
      if( ! refalrts::number_term( 1UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromBracket/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # ElOpenBracket/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElOpenBracket]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromBracket/4 2/7 >/1
      if( ! refalrts::number_term( 2UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromBracket/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # ElOpenCall/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElOpenCall]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromBracket/4 3/7 >/1
      if( ! refalrts::number_term( 3UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromBracket/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # ElCloseADT/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElCloseADT]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_NumberFromBracket/4 4/7 >/1
      if( ! refalrts::number_term( 4UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_NumberFromBracket/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # ElCloseBracket/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_ElCloseBracket]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Rev_NumberFromBracket/4 5/7 >/1
    if( ! refalrts::number_term( 5UL, context[7] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Rev_NumberFromBracket/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # ElCloseCall/1 ]] }
    refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
    refalrts::reinit_ident(context[1], identifiers[ident_ElCloseCall]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Rev_NumberFromBracket/4 e._/2 >/1
  // closed e._ as range 2
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Rev_NumberFromBracket/4 e._/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Fails/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_Fails]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Revu_NumberFromBracket("Rev_NumberFromBracket", 0U, 0U, func_Revu_NumberFromBracket);


static refalrts::FnResult func_Revu_BlockTypeNumber(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Rev_BlockTypeNumber/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Rev_BlockTypeNumber/4 s.new1/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & Rev_BlockTypeNumber/4 1/7 >/1
      if( ! refalrts::number_term( 1UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_BlockTypeNumber/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # Start/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_Start]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_BlockTypeNumber/4 2/7 >/1
      if( ! refalrts::number_term( 2UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_BlockTypeNumber/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # ConstTable/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_ConstTable]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_BlockTypeNumber/4 3/7 >/1
      if( ! refalrts::number_term( 3UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_BlockTypeNumber/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # RefalFunction/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_RefalFunction]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_BlockTypeNumber/4 4/7 >/1
      if( ! refalrts::number_term( 4UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_BlockTypeNumber/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # NativeFunction/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_NativeFunction]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_BlockTypeNumber/4 5/7 >/1
      if( ! refalrts::number_term( 5UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_BlockTypeNumber/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # EmptyFunction/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_EmptyFunction]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_BlockTypeNumber/4 6/7 >/1
      if( ! refalrts::number_term( 6UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_BlockTypeNumber/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # Swap/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_Swap]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_BlockTypeNumber/4 7/7 >/1
      if( ! refalrts::number_term( 7UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_BlockTypeNumber/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # Reference/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_Reference]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_BlockTypeNumber/4 8/7 >/1
      if( ! refalrts::number_term( 8UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_BlockTypeNumber/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # ConditionRasl/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_ConditionRasl]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_BlockTypeNumber/4 9/7 >/1
      if( ! refalrts::number_term( 9UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_BlockTypeNumber/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # ConditionNative/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_ConditionNative]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_BlockTypeNumber/4 10/7 >/1
      if( ! refalrts::number_term( 10UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_BlockTypeNumber/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # Incorporated/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_Incorporated]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & Rev_BlockTypeNumber/4 11/7 >/1
      if( ! refalrts::number_term( 11UL, context[7] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & Rev_BlockTypeNumber/4 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # UnitName/1 ]] }
      refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
      refalrts::reinit_ident(context[1], identifiers[ident_UnitName]);
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[7];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Rev_BlockTypeNumber/4 12/7 >/1
    if( ! refalrts::number_term( 12UL, context[7] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Rev_BlockTypeNumber/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # Ok/7 HalfReuse: # Metatable/1 ]] }
    refalrts::reinit_ident(context[7], identifiers[ident_Ok]);
    refalrts::reinit_ident(context[1], identifiers[ident_Metatable]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Rev_BlockTypeNumber/4 e._/2 >/1
  // closed e._ as range 2
  //DEBUG: e._: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Rev_BlockTypeNumber/4 e._/2 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: # Fails/1 ]] }
  refalrts::reinit_ident(context[1], identifiers[ident_Fails]);
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Revu_BlockTypeNumber("Rev_BlockTypeNumber", 0U, 0U, func_Revu_BlockTypeNumber);


static refalrts::FnResult func_gen_GenProgramm_RASL_A4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 114 elems
  refalrts::Iter context[114];
  refalrts::zeros( context, 114 );
  // </0 & GenProgram-RASL=4/4 s.Cookie1/5 s.Cookie2/6 s.FunctionCount/7 s.IdentCount/8 s.StringCount/9 s.ExternalSize/10 s.IdentSize/11 s.StringSize/12 (/15 e.FuncNamesAsBytes/13 )/16 (/19 e.IdentsAsBytes/17 )/20 (/23 e.StringsAsBytes/21 )/24 (/27 e.Items/25 )/28 s.RaslLength/29 (/32 e.LabelOffsets/30 )/33 e.RASLAsWords/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[8], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[12], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  // closed e.FuncNamesAsBytes as range 13
  // closed e.IdentsAsBytes as range 17
  // closed e.StringsAsBytes as range 21
  // closed e.Items as range 25
  if( ! refalrts::svar_left( context[29], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[30] = 0;
  context[31] = 0;
  context[32] = refalrts::brackets_left( context[30], context[31], context[2], context[3] );
  if( ! context[32] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[32], context[33]);
  // closed e.LabelOffsets as range 30
  // closed e.RASLAsWords as range 2
  //DEBUG: s.Cookie1: 5
  //DEBUG: s.Cookie2: 6
  //DEBUG: s.FunctionCount: 7
  //DEBUG: s.IdentCount: 8
  //DEBUG: s.StringCount: 9
  //DEBUG: s.ExternalSize: 10
  //DEBUG: s.IdentSize: 11
  //DEBUG: s.StringSize: 12
  //DEBUG: e.FuncNamesAsBytes: 13
  //DEBUG: e.IdentsAsBytes: 17
  //DEBUG: e.StringsAsBytes: 21
  //DEBUG: e.Items: 25
  //DEBUG: s.RaslLength: 29
  //DEBUG: e.LabelOffsets: 30
  //DEBUG: e.RASLAsWords: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } 1/34 </35 & PutWordLE@1/36 8/37 >/38 82/39 65/40 83/41 76/42 67/43 79/44 68/45 69/46 </47 & PutBlock@1/48 (/49 Tile{ AsIs: </0 Reuse: & PutWordLE/4 AsIs: s.Cookie1/5 } >/50 )/51 (/52 </53 & PutWordLE/54 Tile{ AsIs: s.Cookie2/6 } >/55 )/56 (/57 </58 & PutWordLE/59 Tile{ AsIs: s.FunctionCount/7 } >/60 )/61 (/62 </63 & PutWordLE/64 Tile{ AsIs: s.IdentCount/8 } >/65 )/66 (/67 </68 & PutWordLE@1/69 >/70 )/71 (/72 </73 & PutWordLE/74 Tile{ AsIs: s.StringCount/9 } >/75 )/76 (/77 </78 Tile{ HalfReuse: & PutWordLE/28 AsIs: s.RaslLength/29 } >/79 )/80 (/81 </82 & PutWordLE/83 Tile{ AsIs: s.ExternalSize/10 } >/84 )/85 (/86 </87 & PutWordLE/88 Tile{ AsIs: s.IdentSize/11 } >/89 )/90 (/91 </92 & PutWordLE/93 </94 & Sub/95 Tile{ AsIs: s.StringSize/12 } </96 & Mul/97 4/98 s.StringCount/9/99 >/100 >/101 >/102 )/103 Tile{ AsIs: (/15 AsIs: e.FuncNamesAsBytes/13 AsIs: )/16 AsIs: (/19 AsIs: e.IdentsAsBytes/17 AsIs: )/20 AsIs: (/23 AsIs: e.StringsAsBytes/21 AsIs: )/24 HalfReuse: </27 } & Map@1/104 Tile{ AsIs: e.RASLAsWords/2 } >/105 >/106 </107 & DelAccumulator/108 </109 & DoMapAccum@1/110 Tile{ AsIs: (/32 AsIs: e.LabelOffsets/30 AsIs: )/33 } (/111 )/112 Tile{ AsIs: e.Items/25 } >/113 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_number(vm, context[34], 1UL);
  refalrts::alloc_open_call(vm, context[35]);
  refalrts::alloc_name(vm, context[36], functions[efunc_gen_PutWordLE_Z1]);
  refalrts::alloc_number(vm, context[37], 8UL);
  refalrts::alloc_close_call(vm, context[38]);
  refalrts::alloc_number(vm, context[39], 82UL);
  refalrts::alloc_number(vm, context[40], 65UL);
  refalrts::alloc_number(vm, context[41], 83UL);
  refalrts::alloc_number(vm, context[42], 76UL);
  refalrts::alloc_number(vm, context[43], 67UL);
  refalrts::alloc_number(vm, context[44], 79UL);
  refalrts::alloc_number(vm, context[45], 68UL);
  refalrts::alloc_number(vm, context[46], 69UL);
  refalrts::alloc_open_call(vm, context[47]);
  refalrts::alloc_name(vm, context[48], functions[efunc_gen_PutBlock_Z1]);
  refalrts::alloc_open_bracket(vm, context[49]);
  refalrts::alloc_close_call(vm, context[50]);
  refalrts::alloc_close_bracket(vm, context[51]);
  refalrts::alloc_open_bracket(vm, context[52]);
  refalrts::alloc_open_call(vm, context[53]);
  refalrts::alloc_name(vm, context[54], functions[efunc_PutWordLE]);
  refalrts::alloc_close_call(vm, context[55]);
  refalrts::alloc_close_bracket(vm, context[56]);
  refalrts::alloc_open_bracket(vm, context[57]);
  refalrts::alloc_open_call(vm, context[58]);
  refalrts::alloc_name(vm, context[59], functions[efunc_PutWordLE]);
  refalrts::alloc_close_call(vm, context[60]);
  refalrts::alloc_close_bracket(vm, context[61]);
  refalrts::alloc_open_bracket(vm, context[62]);
  refalrts::alloc_open_call(vm, context[63]);
  refalrts::alloc_name(vm, context[64], functions[efunc_PutWordLE]);
  refalrts::alloc_close_call(vm, context[65]);
  refalrts::alloc_close_bracket(vm, context[66]);
  refalrts::alloc_open_bracket(vm, context[67]);
  refalrts::alloc_open_call(vm, context[68]);
  refalrts::alloc_name(vm, context[69], functions[efunc_gen_PutWordLE_Z1]);
  refalrts::alloc_close_call(vm, context[70]);
  refalrts::alloc_close_bracket(vm, context[71]);
  refalrts::alloc_open_bracket(vm, context[72]);
  refalrts::alloc_open_call(vm, context[73]);
  refalrts::alloc_name(vm, context[74], functions[efunc_PutWordLE]);
  refalrts::alloc_close_call(vm, context[75]);
  refalrts::alloc_close_bracket(vm, context[76]);
  refalrts::alloc_open_bracket(vm, context[77]);
  refalrts::alloc_open_call(vm, context[78]);
  refalrts::alloc_close_call(vm, context[79]);
  refalrts::alloc_close_bracket(vm, context[80]);
  refalrts::alloc_open_bracket(vm, context[81]);
  refalrts::alloc_open_call(vm, context[82]);
  refalrts::alloc_name(vm, context[83], functions[efunc_PutWordLE]);
  refalrts::alloc_close_call(vm, context[84]);
  refalrts::alloc_close_bracket(vm, context[85]);
  refalrts::alloc_open_bracket(vm, context[86]);
  refalrts::alloc_open_call(vm, context[87]);
  refalrts::alloc_name(vm, context[88], functions[efunc_PutWordLE]);
  refalrts::alloc_close_call(vm, context[89]);
  refalrts::alloc_close_bracket(vm, context[90]);
  refalrts::alloc_open_bracket(vm, context[91]);
  refalrts::alloc_open_call(vm, context[92]);
  refalrts::alloc_name(vm, context[93], functions[efunc_PutWordLE]);
  refalrts::alloc_open_call(vm, context[94]);
  refalrts::alloc_name(vm, context[95], functions[efunc_Sub]);
  refalrts::alloc_open_call(vm, context[96]);
  refalrts::alloc_name(vm, context[97], functions[efunc_Mul]);
  refalrts::alloc_number(vm, context[98], 4UL);
  refalrts::copy_stvar(vm, context[99], context[9]);
  refalrts::alloc_close_call(vm, context[100]);
  refalrts::alloc_close_call(vm, context[101]);
  refalrts::alloc_close_call(vm, context[102]);
  refalrts::alloc_close_bracket(vm, context[103]);
  refalrts::alloc_name(vm, context[104], functions[efunc_gen_Map_Z1]);
  refalrts::alloc_close_call(vm, context[105]);
  refalrts::alloc_close_call(vm, context[106]);
  refalrts::alloc_open_call(vm, context[107]);
  refalrts::alloc_name(vm, context[108], functions[efunc_DelAccumulator]);
  refalrts::alloc_open_call(vm, context[109]);
  refalrts::alloc_name(vm, context[110], functions[efunc_gen_DoMapAccum_Z1]);
  refalrts::alloc_open_bracket(vm, context[111]);
  refalrts::alloc_close_bracket(vm, context[112]);
  refalrts::alloc_close_call(vm, context[113]);
  refalrts::update_name(context[4], functions[efunc_PutWordLE]);
  refalrts::reinit_name(context[28], functions[efunc_PutWordLE]);
  refalrts::reinit_open_call(context[27]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[107] );
  refalrts::push_stack( vm, context[113] );
  refalrts::push_stack( vm, context[109] );
  refalrts::link_brackets( context[111], context[112] );
  refalrts::link_brackets( context[32], context[33] );
  refalrts::push_stack( vm, context[106] );
  refalrts::push_stack( vm, context[47] );
  refalrts::push_stack( vm, context[105] );
  refalrts::push_stack( vm, context[27] );
  refalrts::link_brackets( context[23], context[24] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[91], context[103] );
  refalrts::push_stack( vm, context[102] );
  refalrts::push_stack( vm, context[92] );
  refalrts::push_stack( vm, context[101] );
  refalrts::push_stack( vm, context[94] );
  refalrts::push_stack( vm, context[100] );
  refalrts::push_stack( vm, context[96] );
  refalrts::link_brackets( context[86], context[90] );
  refalrts::push_stack( vm, context[89] );
  refalrts::push_stack( vm, context[87] );
  refalrts::link_brackets( context[81], context[85] );
  refalrts::push_stack( vm, context[84] );
  refalrts::push_stack( vm, context[82] );
  refalrts::link_brackets( context[77], context[80] );
  refalrts::push_stack( vm, context[79] );
  refalrts::push_stack( vm, context[78] );
  refalrts::link_brackets( context[72], context[76] );
  refalrts::push_stack( vm, context[75] );
  refalrts::push_stack( vm, context[73] );
  refalrts::link_brackets( context[67], context[71] );
  refalrts::push_stack( vm, context[70] );
  refalrts::push_stack( vm, context[68] );
  refalrts::link_brackets( context[62], context[66] );
  refalrts::push_stack( vm, context[65] );
  refalrts::push_stack( vm, context[63] );
  refalrts::link_brackets( context[57], context[61] );
  refalrts::push_stack( vm, context[60] );
  refalrts::push_stack( vm, context[58] );
  refalrts::link_brackets( context[52], context[56] );
  refalrts::push_stack( vm, context[55] );
  refalrts::push_stack( vm, context[53] );
  refalrts::link_brackets( context[49], context[51] );
  refalrts::push_stack( vm, context[50] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[38] );
  refalrts::push_stack( vm, context[35] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[113] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[111], context[112] );
  res = refalrts::splice_evar( res, context[32], context[33] );
  res = refalrts::splice_evar( res, context[105], context[110] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[104] );
  res = refalrts::splice_evar( res, context[15], context[27] );
  res = refalrts::splice_evar( res, context[96], context[103] );
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[89], context[95] );
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[84], context[88] );
  res = refalrts::splice_elem( res, context[10] );
  res = refalrts::splice_evar( res, context[79], context[83] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[75], context[78] );
  res = refalrts::splice_elem( res, context[9] );
  res = refalrts::splice_evar( res, context[65], context[74] );
  res = refalrts::splice_elem( res, context[8] );
  res = refalrts::splice_evar( res, context[60], context[64] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[55], context[59] );
  res = refalrts::splice_elem( res, context[6] );
  res = refalrts::splice_evar( res, context[50], context[54] );
  res = refalrts::splice_evar( res, context[0], context[5] );
  res = refalrts::splice_evar( res, context[34], context[49] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GenProgramm_RASL_A4("GenProgram-RASL=4", COOKIE1_, COOKIE2_, func_gen_GenProgramm_RASL_A4);


static refalrts::FnResult func_gen_GenProgramm_RASL_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & GenProgram-RASL=3/4 s.Cookie1/5 s.Cookie2/6 s.FunctionCount/7 s.IdentCount/8 s.StringCount/9 s.ExternalSize/10 s.IdentSize/11 (/14 e.FuncNamesAsBytes/12 )/15 (/18 e.IdentsAsBytes/16 )/19 (/22 e.Items/20 )/23 (/26 e.RASL/24 )/27 s.StringSize/28 e.StringsAsBytes/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[8], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  context[16] = 0;
  context[17] = 0;
  context[18] = refalrts::brackets_left( context[16], context[17], context[2], context[3] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[18], context[19]);
  context[20] = 0;
  context[21] = 0;
  context[22] = refalrts::brackets_left( context[20], context[21], context[2], context[3] );
  if( ! context[22] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[22], context[23]);
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[2], context[3] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  // closed e.FuncNamesAsBytes as range 12
  // closed e.IdentsAsBytes as range 16
  // closed e.Items as range 20
  // closed e.RASL as range 24
  if( ! refalrts::svar_left( context[28], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.StringsAsBytes as range 2
  //DEBUG: s.Cookie1: 5
  //DEBUG: s.Cookie2: 6
  //DEBUG: s.FunctionCount: 7
  //DEBUG: s.IdentCount: 8
  //DEBUG: s.StringCount: 9
  //DEBUG: s.ExternalSize: 10
  //DEBUG: s.IdentSize: 11
  //DEBUG: e.FuncNamesAsBytes: 12
  //DEBUG: e.IdentsAsBytes: 16
  //DEBUG: e.Items: 20
  //DEBUG: e.RASL: 24
  //DEBUG: s.StringSize: 28
  //DEBUG: e.StringsAsBytes: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.StringSize/28 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & GenProgram-RASL=4/4 AsIs: s.Cookie1/5 AsIs: s.Cookie2/6 AsIs: s.FunctionCount/7 AsIs: s.IdentCount/8 AsIs: s.StringCount/9 AsIs: s.ExternalSize/10 AsIs: s.IdentSize/11 HalfReuse: s.StringSize28 /14 } (/29 Tile{ AsIs: e.FuncNamesAsBytes/12 } Tile{ AsIs: )/15 AsIs: (/18 AsIs: e.IdentsAsBytes/16 AsIs: )/19 AsIs: (/22 } Tile{ AsIs: e.StringsAsBytes/2 } Tile{ AsIs: )/23 AsIs: (/26 } Tile{ AsIs: e.Items/20 } Tile{ AsIs: )/27 } </30 & Assemble=1/31 </32 & Map@2/33 Tile{ AsIs: e.RASL/24 } >/34 >/35 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[29]);
  refalrts::alloc_open_call(vm, context[30]);
  refalrts::alloc_name(vm, context[31], functions[efunc_gen_Assemble_A1]);
  refalrts::alloc_open_call(vm, context[32]);
  refalrts::alloc_name(vm, context[33], functions[efunc_gen_Map_Z2]);
  refalrts::alloc_close_call(vm, context[34]);
  refalrts::alloc_close_call(vm, context[35]);
  refalrts::update_name(context[4], functions[efunc_gen_GenProgramm_RASL_A4]);
  refalrts::reinit_svar( context[14], context[28] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[35] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[34] );
  refalrts::push_stack( vm, context[32] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[22], context[23] );
  refalrts::link_brackets( context[18], context[19] );
  refalrts::link_brackets( context[29], context[15] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[34], context[35] );
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[30], context[33] );
  res = refalrts::splice_elem( res, context[27] );
  res = refalrts::splice_evar( res, context[20], context[21] );
  res = refalrts::splice_evar( res, context[23], context[26] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[15], context[22] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_elem( res, context[29] );
  refalrts::splice_to_freelist_open( vm, context[14], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GenProgramm_RASL_A3("GenProgram-RASL=3", COOKIE1_, COOKIE2_, func_gen_GenProgramm_RASL_A3);


static refalrts::FnResult func_gen_GenProgramm_RASL_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & GenProgram-RASL=2/4 s.Cookie1/5 s.Cookie2/6 s.FunctionCount/7 s.IdentCount/8 s.StringCount/9 s.ExternalSize/10 (/13 e.FuncNamesAsBytes/11 )/14 (/17 e.Items/15 )/18 (/21 e.RASL/19 )/22 (/25 e.Strings/23 )/26 s.IdentSize/27 e.IdentsAsBytes/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[8], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[11] = 0;
  context[12] = 0;
  context[13] = refalrts::brackets_left( context[11], context[12], context[2], context[3] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[13], context[14]);
  context[15] = 0;
  context[16] = 0;
  context[17] = refalrts::brackets_left( context[15], context[16], context[2], context[3] );
  if( ! context[17] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[17], context[18]);
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[2], context[3] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = 0;
  context[24] = 0;
  context[25] = refalrts::brackets_left( context[23], context[24], context[2], context[3] );
  if( ! context[25] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[25], context[26]);
  // closed e.FuncNamesAsBytes as range 11
  // closed e.Items as range 15
  // closed e.RASL as range 19
  // closed e.Strings as range 23
  if( ! refalrts::svar_left( context[27], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.IdentsAsBytes as range 2
  //DEBUG: s.Cookie1: 5
  //DEBUG: s.Cookie2: 6
  //DEBUG: s.FunctionCount: 7
  //DEBUG: s.IdentCount: 8
  //DEBUG: s.StringCount: 9
  //DEBUG: s.ExternalSize: 10
  //DEBUG: e.FuncNamesAsBytes: 11
  //DEBUG: e.Items: 15
  //DEBUG: e.RASL: 19
  //DEBUG: e.Strings: 23
  //DEBUG: s.IdentSize: 27
  //DEBUG: e.IdentsAsBytes: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.IdentSize/27 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & GenProgram-RASL=3/4 AsIs: s.Cookie1/5 AsIs: s.Cookie2/6 AsIs: s.FunctionCount/7 AsIs: s.IdentCount/8 AsIs: s.StringCount/9 AsIs: s.ExternalSize/10 HalfReuse: s.IdentSize27 /13 } (/28 Tile{ AsIs: e.FuncNamesAsBytes/11 } Tile{ AsIs: )/26 } (/29 Tile{ AsIs: e.IdentsAsBytes/2 } Tile{ AsIs: )/14 AsIs: (/17 AsIs: e.Items/15 AsIs: )/18 AsIs: (/21 AsIs: e.RASL/19 AsIs: )/22 HalfReuse: </25 } & Lenw/30 </31 & Map@3/32 Tile{ AsIs: e.Strings/23 } >/33 >/34 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[28]);
  refalrts::alloc_open_bracket(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_Lenw]);
  refalrts::alloc_open_call(vm, context[31]);
  refalrts::alloc_name(vm, context[32], functions[efunc_gen_Map_Z3]);
  refalrts::alloc_close_call(vm, context[33]);
  refalrts::alloc_close_call(vm, context[34]);
  refalrts::update_name(context[4], functions[efunc_gen_GenProgramm_RASL_A3]);
  refalrts::reinit_svar( context[13], context[27] );
  refalrts::reinit_open_call(context[25]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[34] );
  refalrts::push_stack( vm, context[25] );
  refalrts::push_stack( vm, context[33] );
  refalrts::push_stack( vm, context[31] );
  refalrts::link_brackets( context[21], context[22] );
  refalrts::link_brackets( context[17], context[18] );
  refalrts::link_brackets( context[29], context[14] );
  refalrts::link_brackets( context[28], context[26] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[33], context[34] );
  res = refalrts::splice_evar( res, context[23], context[24] );
  res = refalrts::splice_evar( res, context[30], context[32] );
  res = refalrts::splice_evar( res, context[14], context[25] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[29] );
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_evar( res, context[11], context[12] );
  res = refalrts::splice_elem( res, context[28] );
  refalrts::splice_to_freelist_open( vm, context[13], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GenProgramm_RASL_A2("GenProgram-RASL=2", COOKIE1_, COOKIE2_, func_gen_GenProgramm_RASL_A2);


static refalrts::FnResult func_gen_GenProgramm_RASL_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 33 elems
  refalrts::Iter context[33];
  refalrts::zeros( context, 33 );
  // </0 & GenProgram-RASL=1/4 s.Cookie1/5 s.Cookie2/6 s.FunctionCount/7 s.IdentCount/8 s.StringCount/9 (/12 e.Items/10 )/13 (/16 e.RASL/14 )/17 (/20 e.Strings/18 )/21 (/24 e.Idents/22 )/25 s.ExternalSize/26 e.FuncNamesAsBytes/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[8], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.Items as range 10
  // closed e.RASL as range 14
  // closed e.Strings as range 18
  // closed e.Idents as range 22
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.FuncNamesAsBytes as range 2
  //DEBUG: s.Cookie1: 5
  //DEBUG: s.Cookie2: 6
  //DEBUG: s.FunctionCount: 7
  //DEBUG: s.IdentCount: 8
  //DEBUG: s.StringCount: 9
  //DEBUG: e.Items: 10
  //DEBUG: e.RASL: 14
  //DEBUG: e.Strings: 18
  //DEBUG: e.Idents: 22
  //DEBUG: s.ExternalSize: 26
  //DEBUG: e.FuncNamesAsBytes: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & GenProgram-RASL=2/4 AsIs: s.Cookie1/5 AsIs: s.Cookie2/6 AsIs: s.FunctionCount/7 AsIs: s.IdentCount/8 AsIs: s.StringCount/9 } Tile{ AsIs: s.ExternalSize/26 } (/27 Tile{ AsIs: e.FuncNamesAsBytes/2 } Tile{ AsIs: )/25 } Tile{ AsIs: (/12 AsIs: e.Items/10 AsIs: )/13 AsIs: (/16 AsIs: e.RASL/14 AsIs: )/17 AsIs: (/20 AsIs: e.Strings/18 AsIs: )/21 HalfReuse: </24 } & Lenw/28 </29 & Map@4/30 Tile{ AsIs: e.Idents/22 } >/31 >/32 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_Lenw]);
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_name(vm, context[30], functions[efunc_gen_Map_Z4]);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::alloc_close_call(vm, context[32]);
  refalrts::update_name(context[4], functions[efunc_gen_GenProgramm_RASL_A2]);
  refalrts::reinit_open_call(context[24]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[29] );
  refalrts::link_brackets( context[20], context[21] );
  refalrts::link_brackets( context[16], context[17] );
  refalrts::link_brackets( context[12], context[13] );
  refalrts::link_brackets( context[27], context[25] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[31], context[32] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[28], context[30] );
  res = refalrts::splice_evar( res, context[12], context[24] );
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[27] );
  res = refalrts::splice_elem( res, context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GenProgramm_RASL_A1("GenProgram-RASL=1", COOKIE1_, COOKIE2_, func_gen_GenProgramm_RASL_A1);


static refalrts::FnResult func_GenProgramm_RASL(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 44 elems
  refalrts::Iter context[44];
  refalrts::zeros( context, 44 );
  // </0 & GenProgram-RASL/4 (/7 (/11 # ModuleID/13 s.Cookie1/39 s.Cookie2/40 )/12 (/16 # CmdFuncArray/18 s.FunctionCount/41 e.FuncNames/14 )/17 (/21 # CmdIdentArray/23 s.IdentCount/42 e.Idents/19 )/22 (/26 # CmdStringArray/28 s.StringCount/43 e.Strings/24 )/27 (/31 # RASL/33 e.RASL/29 )/32 (/36 # Items/38 e.Items/34 )/37 )/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[5], context[6] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = refalrts::ident_left( identifiers[ident_ModuleID], context[9], context[10] );
  if( ! context[13] )
    return refalrts::cRecognitionImpossible;
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[5], context[6] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  context[18] = refalrts::ident_left( identifiers[ident_CmdFuncArray], context[14], context[15] );
  if( ! context[18] )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  context[21] = refalrts::brackets_left( context[19], context[20], context[5], context[6] );
  if( ! context[21] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[21], context[22]);
  context[23] = refalrts::ident_left( identifiers[ident_CmdIdentArray], context[19], context[20] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  context[24] = 0;
  context[25] = 0;
  context[26] = refalrts::brackets_left( context[24], context[25], context[5], context[6] );
  if( ! context[26] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[26], context[27]);
  context[28] = refalrts::ident_left( identifiers[ident_CmdStringArray], context[24], context[25] );
  if( ! context[28] )
    return refalrts::cRecognitionImpossible;
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[5], context[6] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  context[33] = refalrts::ident_left( identifiers[ident_RASL], context[29], context[30] );
  if( ! context[33] )
    return refalrts::cRecognitionImpossible;
  context[34] = 0;
  context[35] = 0;
  context[36] = refalrts::brackets_left( context[34], context[35], context[5], context[6] );
  if( ! context[36] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[36], context[37]);
  context[38] = refalrts::ident_left( identifiers[ident_Items], context[34], context[35] );
  if( ! context[38] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.RASL as range 29
  // closed e.Items as range 34
  if( ! refalrts::svar_left( context[39], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[40], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[41], context[14], context[15] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.FuncNames as range 14
  if( ! refalrts::svar_left( context[42], context[19], context[20] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Idents as range 19
  if( ! refalrts::svar_left( context[43], context[24], context[25] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Strings as range 24
  //DEBUG: e.RASL: 29
  //DEBUG: e.Items: 34
  //DEBUG: s.Cookie1: 39
  //DEBUG: s.Cookie2: 40
  //DEBUG: s.FunctionCount: 41
  //DEBUG: e.FuncNames: 14
  //DEBUG: s.IdentCount: 42
  //DEBUG: e.Idents: 19
  //DEBUG: s.StringCount: 43
  //DEBUG: e.Strings: 24

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.FunctionCount/41 {REMOVED TILE} )/17 {REMOVED TILE} # CmdIdentArray/23 s.IdentCount/42 {REMOVED TILE} {REMOVED TILE} # CmdStringArray/28 s.StringCount/43 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: </11 HalfReuse: & GenProgram-RASL=1/13 AsIs: s.Cookie1/39 AsIs: s.Cookie2/40 HalfReuse: s.FunctionCount41 /12 HalfReuse: s.IdentCount42 /16 HalfReuse: s.StringCount43 /18 } Tile{ AsIs: (/21 } Tile{ AsIs: e.Items/34 } Tile{ HalfReuse: )/31 HalfReuse: (/33 AsIs: e.RASL/29 AsIs: )/32 AsIs: (/36 } Tile{ AsIs: e.Strings/24 } Tile{ AsIs: )/22 AsIs: (/26 } Tile{ AsIs: e.Idents/19 } Tile{ AsIs: )/27 } Tile{ AsIs: </0 Reuse: & Lenw/4 HalfReuse: </7 } Tile{ HalfReuse: & Map@5/38 } Tile{ AsIs: e.FuncNames/14 } Tile{ HalfReuse: >/37 HalfReuse: >/8 AsIs: >/1 ]] }
  refalrts::reinit_open_call(context[11]);
  refalrts::reinit_name(context[13], functions[efunc_gen_GenProgramm_RASL_A1]);
  refalrts::reinit_svar( context[12], context[41] );
  refalrts::reinit_svar( context[16], context[42] );
  refalrts::reinit_svar( context[18], context[43] );
  refalrts::reinit_close_bracket(context[31]);
  refalrts::reinit_open_bracket(context[33]);
  refalrts::update_name(context[4], functions[efunc_Lenw]);
  refalrts::reinit_open_call(context[7]);
  refalrts::reinit_name(context[38], functions[efunc_gen_Map_Z5]);
  refalrts::reinit_close_call(context[37]);
  refalrts::reinit_close_call(context[8]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[8] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[37] );
  refalrts::push_stack( vm, context[7] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[36], context[22] );
  refalrts::link_brackets( context[33], context[32] );
  refalrts::link_brackets( context[21], context[31] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[37];
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_elem( res, context[38] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_elem( res, context[27] );
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_evar( res, context[22], context[26] );
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[31], context[36] );
  res = refalrts::splice_evar( res, context[34], context[35] );
  res = refalrts::splice_elem( res, context[21] );
  res = refalrts::splice_evar( res, context[11], context[18] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_GenProgramm_RASL("GenProgram-RASL", 0U, 0U, func_GenProgramm_RASL);


static refalrts::FnResult func_BytesFromFunctionList(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & BytesFromFunctionList/4 e.FuncNames/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.FuncNames as range 2
  //DEBUG: e.FuncNames: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@5/4 AsIs: e.FuncNames/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z5]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_BytesFromFunctionList("BytesFromFunctionList", COOKIE1_, COOKIE2_, func_BytesFromFunctionList);


static refalrts::FnResult func_BytesFromIdentList(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & BytesFromIdentList/4 e.Idents/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Idents as range 2
  //DEBUG: e.Idents: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@4/4 AsIs: e.Idents/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_BytesFromIdentList("BytesFromIdentList", COOKIE1_, COOKIE2_, func_BytesFromIdentList);


static refalrts::FnResult func_BytesFromStringList(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & BytesFromStringList/4 e.Strings/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Strings as range 2
  //DEBUG: e.Strings: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Map@3/4 AsIs: e.Strings/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z3]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_BytesFromStringList("BytesFromStringList", COOKIE1_, COOKIE2_, func_BytesFromStringList);


static refalrts::FnResult func_BytesFromString(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 5 elems
  refalrts::Iter context[5];
  refalrts::zeros( context, 5 );
  // </0 & BytesFromString/4 e.String/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.String as range 2
  //DEBUG: e.String: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Ord/4 AsIs: e.String/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_Ord]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_BytesFromString("BytesFromString", COOKIE1_, COOKIE2_, func_BytesFromString);


static refalrts::FnResult func_Asciiz(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & Asciiz/4 e.String/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.String as range 2
  //DEBUG: e.String: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Ord/4 AsIs: e.String/2 AsIs: >/1 } 0/5 Tile{ ]] }
  refalrts::alloc_number(vm, context[5], 0UL);
  refalrts::update_name(context[4], functions[efunc_Ord]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Asciiz("Asciiz", COOKIE1_, COOKIE2_, func_Asciiz);


static refalrts::FnResult func_PutBlock(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & PutBlock/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PutBlock/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & PutBlock/4 # Start/5 e.Bytes/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Start], context[5] ) )
      continue;
    // closed e.Bytes as range 6
    //DEBUG: e.Bytes: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 1/8 </9 Tile{ HalfReuse: & Fetch@2/0 HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.Bytes/6 AsIs: >/1 } >/10 Tile{ ]] }
    refalrts::alloc_number(vm, context[8], 1UL);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::reinit_name(context[0], functions[efunc_gen_Fetch_Z2]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutBlock/4 # ConstTable/5 e.Bytes/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_ConstTable], context[5] ) )
      continue;
    // closed e.Bytes as range 6
    //DEBUG: e.Bytes: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 2/8 </9 Tile{ HalfReuse: & Fetch@2/0 HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.Bytes/6 AsIs: >/1 } >/10 Tile{ ]] }
    refalrts::alloc_number(vm, context[8], 2UL);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::reinit_name(context[0], functions[efunc_gen_Fetch_Z2]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutBlock/4 # RefalFunction/5 e.Bytes/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_RefalFunction], context[5] ) )
      continue;
    // closed e.Bytes as range 6
    //DEBUG: e.Bytes: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 3/8 </9 Tile{ HalfReuse: & Fetch@2/0 HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.Bytes/6 AsIs: >/1 } >/10 Tile{ ]] }
    refalrts::alloc_number(vm, context[8], 3UL);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::reinit_name(context[0], functions[efunc_gen_Fetch_Z2]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutBlock/4 # NativeFunction/5 e.Bytes/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_NativeFunction], context[5] ) )
      continue;
    // closed e.Bytes as range 6
    //DEBUG: e.Bytes: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 4/8 </9 Tile{ HalfReuse: & Fetch@2/0 HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.Bytes/6 AsIs: >/1 } >/10 Tile{ ]] }
    refalrts::alloc_number(vm, context[8], 4UL);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::reinit_name(context[0], functions[efunc_gen_Fetch_Z2]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutBlock/4 # EmptyFunction/5 e.Bytes/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_EmptyFunction], context[5] ) )
      continue;
    // closed e.Bytes as range 6
    //DEBUG: e.Bytes: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 5/8 </9 Tile{ HalfReuse: & Fetch@2/0 HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.Bytes/6 AsIs: >/1 } >/10 Tile{ ]] }
    refalrts::alloc_number(vm, context[8], 5UL);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::reinit_name(context[0], functions[efunc_gen_Fetch_Z2]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutBlock/4 # Swap/5 e.Bytes/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Swap], context[5] ) )
      continue;
    // closed e.Bytes as range 6
    //DEBUG: e.Bytes: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 6/8 </9 Tile{ HalfReuse: & Fetch@2/0 HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.Bytes/6 AsIs: >/1 } >/10 Tile{ ]] }
    refalrts::alloc_number(vm, context[8], 6UL);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::reinit_name(context[0], functions[efunc_gen_Fetch_Z2]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutBlock/4 # Reference/5 e.Bytes/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Reference], context[5] ) )
      continue;
    // closed e.Bytes as range 6
    //DEBUG: e.Bytes: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 7/8 </9 Tile{ HalfReuse: & Fetch@2/0 HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.Bytes/6 AsIs: >/1 } >/10 Tile{ ]] }
    refalrts::alloc_number(vm, context[8], 7UL);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::reinit_name(context[0], functions[efunc_gen_Fetch_Z2]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutBlock/4 # ConditionRasl/5 e.Bytes/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_ConditionRasl], context[5] ) )
      continue;
    // closed e.Bytes as range 6
    //DEBUG: e.Bytes: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 8/8 </9 Tile{ HalfReuse: & Fetch@2/0 HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.Bytes/6 AsIs: >/1 } >/10 Tile{ ]] }
    refalrts::alloc_number(vm, context[8], 8UL);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::reinit_name(context[0], functions[efunc_gen_Fetch_Z2]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutBlock/4 # ConditionNative/5 e.Bytes/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_ConditionNative], context[5] ) )
      continue;
    // closed e.Bytes as range 6
    //DEBUG: e.Bytes: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 9/8 </9 Tile{ HalfReuse: & Fetch@2/0 HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.Bytes/6 AsIs: >/1 } >/10 Tile{ ]] }
    refalrts::alloc_number(vm, context[8], 9UL);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::reinit_name(context[0], functions[efunc_gen_Fetch_Z2]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutBlock/4 # Incorporated/5 e.Bytes/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Incorporated], context[5] ) )
      continue;
    // closed e.Bytes as range 6
    //DEBUG: e.Bytes: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 10/8 </9 Tile{ HalfReuse: & Fetch@2/0 HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.Bytes/6 AsIs: >/1 } >/10 Tile{ ]] }
    refalrts::alloc_number(vm, context[8], 10UL);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::reinit_name(context[0], functions[efunc_gen_Fetch_Z2]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutBlock/4 # UnitName/5 e.Bytes/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_UnitName], context[5] ) )
      continue;
    // closed e.Bytes as range 6
    //DEBUG: e.Bytes: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 11/8 </9 Tile{ HalfReuse: & Fetch@2/0 HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.Bytes/6 AsIs: >/1 } >/10 Tile{ ]] }
    refalrts::alloc_number(vm, context[8], 11UL);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::reinit_name(context[0], functions[efunc_gen_Fetch_Z2]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutBlock/4 # Metatable/5 e.Bytes/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_Metatable], context[5] ) )
      continue;
    // closed e.Bytes as range 6
    //DEBUG: e.Bytes: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 12/8 </9 Tile{ HalfReuse: & Fetch@2/0 HalfReuse: </4 HalfReuse: & Lenw/5 AsIs: e.Bytes/6 AsIs: >/1 } >/10 Tile{ ]] }
    refalrts::alloc_number(vm, context[8], 12UL);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::reinit_name(context[0], functions[efunc_gen_Fetch_Z2]);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[5], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[8], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutBlock/4 s.Type/5 e.Bytes/2 >/1
  // closed e.Bytes as range 2
  //DEBUG: s.Type: 5
  //DEBUG: e.Bytes: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & BlockTypeNumber*12/4 AsIs: s.Type/5 } >/6 </7 & Fetch@2/8 </9 & Lenw/10 Tile{ AsIs: e.Bytes/2 } >/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_close_call(vm, context[6]);
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::alloc_name(vm, context[8], functions[efunc_gen_Fetch_Z2]);
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_Lenw]);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_BlockTypeNumber_D12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[9] );
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[6], context[10] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PutBlock("PutBlock", COOKIE1_, COOKIE2_, func_PutBlock);


static refalrts::FnResult func_gen_PutWordLE_S2A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & PutWordLE$2=1/4 (/7 e.Bytes/5 )/8 (/11 s.ValueHigh/13 )/12 s.ValueLow/14 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.Bytes as range 5
  if( ! refalrts::svar_left( context[13], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.Bytes: 5
  //DEBUG: s.ValueHigh: 13
  //DEBUG: s.ValueLow: 14

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} )/12 s.ValueLow/14 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutWordLE/4 } Tile{ AsIs: e.Bytes/5 } Tile{ HalfReuse: s.ValueLow14 /11 AsIs: s.ValueHigh/13 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_PutWordLE]);
  refalrts::reinit_svar( context[11], context[14] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[11], context[13] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutWordLE_S2A1("PutWordLE$2=1", COOKIE1_, COOKIE2_, func_gen_PutWordLE_S2A1);


static refalrts::FnResult func_PutWordLE(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & PutWordLE/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PutWordLE/4 e.new1/2 s.new2/5 >/1
  if( ! refalrts::svar_right( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 2
  do {
    // </0 & PutWordLE/4 s.1/8 s.2/9 s.3/10 s.4/5 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    if( ! refalrts::svar_left( context[9], context[6], context[7] ) )
      continue;
    if( ! refalrts::svar_left( context[10], context[6], context[7] ) )
      continue;
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    //DEBUG: s.4: 5
    //DEBUG: s.1: 8
    //DEBUG: s.2: 9
    //DEBUG: s.3: 10

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & PutWordLE/4 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: s.1/8 AsIs: s.2/9 AsIs: s.3/10 AsIs: s.4/5 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[8], context[5] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutWordLE/4 e.Bytes/2 s.Value/5 >/1
  // closed e.Bytes as range 2
  //DEBUG: s.Value: 5
  //DEBUG: e.Bytes: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutWordLE$2=1/4 } (/6 Tile{ AsIs: e.Bytes/2 } )/7 </8 & Divmod/9 Tile{ AsIs: s.Value/5 } 256/10 >/11 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[6]);
  refalrts::alloc_close_bracket(vm, context[7]);
  refalrts::alloc_open_call(vm, context[8]);
  refalrts::alloc_name(vm, context[9], functions[efunc_Divmod]);
  refalrts::alloc_number(vm, context[10], 256UL);
  refalrts::alloc_close_call(vm, context[11]);
  refalrts::update_name(context[4], functions[efunc_gen_PutWordLE_S2A1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[11] );
  refalrts::push_stack( vm, context[8] );
  refalrts::link_brackets( context[6], context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[10], context[11] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[7], context[9] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PutWordLE("PutWordLE", COOKIE1_, COOKIE2_, func_PutWordLE);


static refalrts::FnResult func_NameWithSignm_Bytes(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & NameWithSign-Bytes/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & NameWithSign-Bytes/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & NameWithSign-Bytes/4 # GN-Entry/5 e.Name/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[5] ) )
      continue;
    // closed e.Name as range 6
    //DEBUG: e.Name: 6

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Asciiz@1/4 HalfReuse: </5 } & DisplayName/8 Tile{ AsIs: e.Name/6 } >/9 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[8], functions[efunc_DisplayName]);
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::update_name(context[4], functions[efunc_gen_Asciiz_Z1]);
    refalrts::reinit_open_call(context[5]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[5] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[9] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & NameWithSign-Bytes/4 # GN-Local/5 e.Name/2 >/1
  if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[5] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Name as range 2
  //DEBUG: e.Name: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Asciiz@2/4 HalfReuse: </5 } & DisplayName/6 Tile{ AsIs: e.Name/2 } >/7 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_name(vm, context[6], functions[efunc_DisplayName]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_gen_Asciiz_Z2]);
  refalrts::reinit_open_call(context[5]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_NameWithSignm_Bytes("NameWithSign-Bytes", COOKIE1_, COOKIE2_, func_NameWithSignm_Bytes);


static refalrts::FnResult func_gen_GenCommandm_Globals_S4A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & GenCommand-Globals$4=1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & GenCommand-Globals$4=1/4 (/7 e.new1/5 )/8 s.new2/9 (/12 e.new3/10 )/13 s.new4/14 e.new5/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  // closed e.new3 as range 10
  if( ! refalrts::svar_left( context[14], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 2
  do {
    // </0 & GenCommand-Globals$4=1/4 (/7 e.Labels/15 )/8 # GN-Entry/9 (/12 e.Name/17 )/13 s.Count/14 e.Table$a/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[10];
    context[18] = context[11];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[9] ) )
      continue;
    // closed e.Labels as range 15
    // closed e.Name as range 17
    // closed e.Table$a as range 19
    //DEBUG: s.Count: 14
    //DEBUG: e.Labels: 15
    //DEBUG: e.Name: 17
    //DEBUG: e.Table$a: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels/15 AsIs: )/8 HalfReuse: </9 HalfReuse: & PutBlock@2/12 } (/21 </22 & Asciiz@1/23 Tile{ AsIs: </0 Reuse: & DisplayName/4 } Tile{ AsIs: e.Name/17 } >/24 >/25 )/26 (/27 </28 Tile{ HalfReuse: & PutWordLE/13 AsIs: s.Count/14 } >/29 )/30 </31 & Map@6/32 Tile{ AsIs: e.Table$a/19 } >/33 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_Asciiz_Z1]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_bracket(vm, context[26]);
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::alloc_open_call(vm, context[28]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_gen_Map_Z6]);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::reinit_open_call(context[9]);
    refalrts::reinit_name(context[12], functions[efunc_gen_PutBlock_Z2]);
    refalrts::update_name(context[4], functions[efunc_DisplayName]);
    refalrts::reinit_name(context[13], functions[efunc_PutWordLE]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[27], context[30] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[28] );
    refalrts::link_brackets( context[21], context[26] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[29], context[32] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[24], context[28] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[21], context[23] );
    res = refalrts::splice_evar( res, context[7], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Globals$4=1/4 (/7 e.Labels/15 )/8 # GN-Local/9 (/12 e.Name/17 )/13 s.Count/14 e.Table$a/19 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[10];
    context[18] = context[11];
    context[19] = context[2];
    context[20] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[9] ) )
      continue;
    // closed e.Labels as range 15
    // closed e.Name as range 17
    // closed e.Table$a as range 19
    //DEBUG: s.Count: 14
    //DEBUG: e.Labels: 15
    //DEBUG: e.Name: 17
    //DEBUG: e.Table$a: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels/15 AsIs: )/8 HalfReuse: </9 HalfReuse: & PutBlock@2/12 } (/21 </22 & Asciiz@2/23 Tile{ AsIs: </0 Reuse: & DisplayName/4 } Tile{ AsIs: e.Name/17 } >/24 >/25 )/26 (/27 </28 Tile{ HalfReuse: & PutWordLE/13 AsIs: s.Count/14 } >/29 )/30 </31 & Map@6/32 Tile{ AsIs: e.Table$a/19 } >/33 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_name(vm, context[23], functions[efunc_gen_Asciiz_Z2]);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::alloc_close_bracket(vm, context[26]);
    refalrts::alloc_open_bracket(vm, context[27]);
    refalrts::alloc_open_call(vm, context[28]);
    refalrts::alloc_close_call(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::alloc_open_call(vm, context[31]);
    refalrts::alloc_name(vm, context[32], functions[efunc_gen_Map_Z6]);
    refalrts::alloc_close_call(vm, context[33]);
    refalrts::reinit_open_call(context[9]);
    refalrts::reinit_name(context[12], functions[efunc_gen_PutBlock_Z2]);
    refalrts::update_name(context[4], functions[efunc_DisplayName]);
    refalrts::reinit_name(context[13], functions[efunc_PutWordLE]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[33] );
    refalrts::push_stack( vm, context[31] );
    refalrts::link_brackets( context[27], context[30] );
    refalrts::push_stack( vm, context[29] );
    refalrts::push_stack( vm, context[28] );
    refalrts::link_brackets( context[21], context[26] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[33] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_evar( res, context[29], context[32] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[24], context[28] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_evar( res, context[21], context[23] );
    res = refalrts::splice_evar( res, context[7], context[12] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenCommand-Globals$4=1/4 (/7 e.Labels/5 )/8 s.ScopeClass/9 (/12 e.Name/10 )/13 s.Count/14 e.Table$a/2 >/1
  // closed e.Labels as range 5
  // closed e.Name as range 10
  // closed e.Table$a as range 2
  //DEBUG: s.ScopeClass: 9
  //DEBUG: s.Count: 14
  //DEBUG: e.Labels: 5
  //DEBUG: e.Name: 10
  //DEBUG: e.Table$a: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.ScopeClass/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels/5 AsIs: )/8 } Tile{ AsIs: </0 Reuse: & PutBlock@2/4 } (/15 </16 & NameWithSign-Bytes*2/17 Tile{ HalfReuse: s.ScopeClass9 /12 AsIs: e.Name/10 HalfReuse: >/13 } )/18 (/19 </20 & PutWordLE/21 Tile{ AsIs: s.Count/14 } >/22 )/23 </24 & Map@6/25 Tile{ AsIs: e.Table$a/2 } >/26 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[15]);
  refalrts::alloc_open_call(vm, context[16]);
  refalrts::alloc_name(vm, context[17], functions[efunc_gen_NameWithSignm_Bytes_D2]);
  refalrts::alloc_close_bracket(vm, context[18]);
  refalrts::alloc_open_bracket(vm, context[19]);
  refalrts::alloc_open_call(vm, context[20]);
  refalrts::alloc_name(vm, context[21], functions[efunc_PutWordLE]);
  refalrts::alloc_close_call(vm, context[22]);
  refalrts::alloc_close_bracket(vm, context[23]);
  refalrts::alloc_open_call(vm, context[24]);
  refalrts::alloc_name(vm, context[25], functions[efunc_gen_Map_Z6]);
  refalrts::alloc_close_call(vm, context[26]);
  refalrts::update_name(context[4], functions[efunc_gen_PutBlock_Z2]);
  refalrts::reinit_svar( context[12], context[9] );
  refalrts::reinit_close_call(context[13]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[26] );
  refalrts::push_stack( vm, context[24] );
  refalrts::link_brackets( context[19], context[23] );
  refalrts::push_stack( vm, context[22] );
  refalrts::push_stack( vm, context[20] );
  refalrts::link_brackets( context[15], context[18] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[16] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[22], context[25] );
  res = refalrts::splice_elem( res, context[14] );
  res = refalrts::splice_evar( res, context[18], context[21] );
  res = refalrts::splice_evar( res, context[12], context[13] );
  res = refalrts::splice_evar( res, context[15], context[17] );
  res = refalrts::splice_evar( res, context[0], context[4] );
  res = refalrts::splice_evar( res, context[7], context[8] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GenCommandm_Globals_S4A1("GenCommand-Globals$4=1", COOKIE1_, COOKIE2_, func_gen_GenCommandm_Globals_S4A1);


static refalrts::FnResult func_GenCommandm_Globals(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & GenCommand-Globals/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & GenCommand-Globals/4 (/7 e.new1/5 )/8 (/11 s.new2/13 e.new3/9 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[13], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 9
  do {
    // </0 & GenCommand-Globals/4 (/7 e.Labels/14 )/8 (/11 # UnitName/13 e.SrcName/16 )/12 >/1
    context[14] = context[5];
    context[15] = context[6];
    context[16] = context[9];
    context[17] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_UnitName], context[13] ) )
      continue;
    // closed e.Labels as range 14
    // closed e.SrcName as range 16
    //DEBUG: e.Labels: 14
    //DEBUG: e.SrcName: 16

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Labels/14 } Tile{ HalfReuse: )/4 HalfReuse: </7 } Tile{ HalfReuse: & PutBlock@3/8 HalfReuse: </11 HalfReuse: & Ord/13 AsIs: e.SrcName/16 HalfReuse: >/12 AsIs: >/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_PutBlock_Z3]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[13], functions[efunc_Ord]);
    refalrts::reinit_close_call(context[12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[14], context[15] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenCommand-Globals/4 (/7 e.new4/5 )/8 (/11 s.new5/13 s.new6/14 e.new7/9 )/12 >/1
  // closed e.new4 as range 5
  if( ! refalrts::svar_left( context[14], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new7 as range 9
  do {
    // </0 & GenCommand-Globals/4 (/7 e.new8/15 )/8 (/11 # CmdEnumDescr/13 s.new9/14 e.new10/17 )/12 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[9];
    context[18] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_CmdEnumDescr], context[13] ) )
      continue;
    // closed e.new8 as range 15
    // closed e.new10 as range 17
    do {
      // </0 & GenCommand-Globals/4 (/7 e.Labels/19 )/8 (/11 # CmdEnumDescr/13 # GN-Entry/14 e.Name/21 )/12 >/1
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[14] ) )
        continue;
      // closed e.Labels as range 19
      // closed e.Name as range 21
      //DEBUG: e.Labels: 19
      //DEBUG: e.Name: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels/19 AsIs: )/8 HalfReuse: </11 HalfReuse: & PutBlock@4/13 HalfReuse: </14 } & Asciiz@1/23 Tile{ AsIs: </0 Reuse: & DisplayName/4 } Tile{ AsIs: e.Name/21 } >/24 Tile{ HalfReuse: >/12 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_Asciiz_Z1]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[13], functions[efunc_gen_PutBlock_Z4]);
      refalrts::reinit_open_call(context[14]);
      refalrts::update_name(context[4], functions[efunc_DisplayName]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[12];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[7], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Globals/4 (/7 e.Labels/19 )/8 (/11 # CmdEnumDescr/13 # GN-Local/14 e.Name/21 )/12 >/1
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[14] ) )
        continue;
      // closed e.Labels as range 19
      // closed e.Name as range 21
      //DEBUG: e.Labels: 19
      //DEBUG: e.Name: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels/19 AsIs: )/8 HalfReuse: </11 HalfReuse: & PutBlock@4/13 HalfReuse: </14 } & Asciiz@2/23 Tile{ AsIs: </0 Reuse: & DisplayName/4 } Tile{ AsIs: e.Name/21 } >/24 Tile{ HalfReuse: >/12 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_Asciiz_Z2]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[13], functions[efunc_gen_PutBlock_Z4]);
      refalrts::reinit_open_call(context[14]);
      refalrts::update_name(context[4], functions[efunc_DisplayName]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[12];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[7], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Globals/4 (/7 e.Labels/19 )/8 (/11 # CmdEnumDescr/13 s.ScopeClass/14 e.Name/21 )/12 >/1
    context[19] = context[15];
    context[20] = context[16];
    context[21] = context[17];
    context[22] = context[18];
    // closed e.Labels as range 19
    // closed e.Name as range 21
    //DEBUG: s.ScopeClass: 14
    //DEBUG: e.Labels: 19
    //DEBUG: e.Name: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Labels/19 } Tile{ HalfReuse: )/4 HalfReuse: </7 } Tile{ HalfReuse: & PutBlock@4/8 HalfReuse: </11 HalfReuse: & NameWithSign-Bytes*2/13 AsIs: s.ScopeClass/14 AsIs: e.Name/21 HalfReuse: >/12 AsIs: >/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_PutBlock_Z4]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[13], functions[efunc_gen_NameWithSignm_Bytes_D2]);
    refalrts::reinit_close_call(context[12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Globals/4 (/7 e.Labels-B/20 (/26 s.Label/28 s.Offset/29 )/27 e.Labels-E/22 )/8 (/11 # CmdInterpretFuncDescr/13 s.ScopeClass/14 e.Name/17 s.Label/19 )/12 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[9];
    context[18] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_CmdInterpretFuncDescr], context[13] ) )
      continue;
    if( ! refalrts::svar_right( context[19], context[17], context[18] ) )
      continue;
    // closed e.Name as range 17
    context[20] = 0;
    context[21] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[22] = context[15];
      context[23] = context[16];
      context[24] = 0;
      context[25] = 0;
      context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
      if( ! context[26] )
        continue;
      refalrts::bracket_pointers(context[26], context[27]);
      if( ! refalrts::repeated_stvar_left( vm, context[28], context[19], context[24], context[25] ) )
        continue;
      // closed e.Labels-E as range 22
      if( ! refalrts::svar_left( context[29], context[24], context[25] ) )
        continue;
      if( ! refalrts::empty_seq( context[24], context[25] ) )
        continue;
      //DEBUG: s.ScopeClass: 14
      //DEBUG: s.Label: 19
      //DEBUG: e.Name: 17
      //DEBUG: e.Labels-B: 20
      //DEBUG: e.Labels-E: 22
      //DEBUG: s.Offset: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Label/19 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels-B/20 AsIs: (/26 AsIs: s.Label/28 AsIs: s.Offset/29 AsIs: )/27 AsIs: e.Labels-E/22 AsIs: )/8 HalfReuse: </11 HalfReuse: & PutBlock@5/13 } (/30 Tile{ AsIs: </0 Reuse: & NameWithSign-Bytes/4 } Tile{ AsIs: s.ScopeClass/14 } Tile{ AsIs: e.Name/17 } >/31 )/32 </33 & PutWordLE/34 s.Offset/29/35 Tile{ HalfReuse: >/12 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[30]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::alloc_close_bracket(vm, context[32]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_PutWordLE]);
      refalrts::copy_stvar(vm, context[35], context[29]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[13], functions[efunc_gen_PutBlock_Z5]);
      refalrts::update_name(context[4], functions[efunc_NameWithSignm_Bytes]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[33] );
      refalrts::link_brackets( context[30], context[32] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[26], context[27] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[12];
      res = refalrts::splice_evar( res, context[31], context[35] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[7], context[13] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[20], context[21], context[15], context[16] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Globals/4 (/7 e.Labels/15 )/8 (/11 # CmdMetatable/13 s.ScopeClass/14 (/21 e.Name/19 )/22 e.Table/17 )/12 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[9];
    context[18] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_CmdMetatable], context[13] ) )
      continue;
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.Labels as range 15
    // closed e.Name as range 19
    // closed e.Table as range 17
    //DEBUG: s.ScopeClass: 14
    //DEBUG: e.Labels: 15
    //DEBUG: e.Name: 19
    //DEBUG: e.Table: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.ScopeClass/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & GenCommand-Globals$4=1/4 AsIs: (/7 AsIs: e.Labels/15 AsIs: )/8 HalfReuse: s.ScopeClass14 /11 HalfReuse: (/13 } Tile{ AsIs: e.Name/19 } Tile{ HalfReuse: )/21 } </23 Tile{ HalfReuse: & Lenw/22 AsIs: e.Table/17 HalfReuse: >/12 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::update_name(context[4], functions[efunc_gen_GenCommandm_Globals_S4A1]);
    refalrts::reinit_svar( context[11], context[14] );
    refalrts::reinit_open_bracket(context[13]);
    refalrts::reinit_close_bracket(context[21]);
    refalrts::reinit_name(context[22], functions[efunc_Lenw]);
    refalrts::reinit_close_call(context[12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[13], context[21] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[22];
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[13], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Globals/4 (/7 e.new8/15 )/8 (/11 # CmdSwapDescr/13 s.new9/14 e.new10/17 )/12 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[9];
    context[18] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_CmdSwapDescr], context[13] ) )
      continue;
    // closed e.new8 as range 15
    // closed e.new10 as range 17
    do {
      // </0 & GenCommand-Globals/4 (/7 e.Labels/19 )/8 (/11 # CmdSwapDescr/13 # GN-Entry/14 e.Name/21 )/12 >/1
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[14] ) )
        continue;
      // closed e.Labels as range 19
      // closed e.Name as range 21
      //DEBUG: e.Labels: 19
      //DEBUG: e.Name: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels/19 AsIs: )/8 HalfReuse: </11 HalfReuse: & PutBlock@6/13 HalfReuse: </14 } & Asciiz@1/23 Tile{ AsIs: </0 Reuse: & DisplayName/4 } Tile{ AsIs: e.Name/21 } >/24 Tile{ HalfReuse: >/12 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_Asciiz_Z1]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[13], functions[efunc_gen_PutBlock_Z6]);
      refalrts::reinit_open_call(context[14]);
      refalrts::update_name(context[4], functions[efunc_DisplayName]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[12];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[7], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Globals/4 (/7 e.Labels/19 )/8 (/11 # CmdSwapDescr/13 # GN-Local/14 e.Name/21 )/12 >/1
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[14] ) )
        continue;
      // closed e.Labels as range 19
      // closed e.Name as range 21
      //DEBUG: e.Labels: 19
      //DEBUG: e.Name: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels/19 AsIs: )/8 HalfReuse: </11 HalfReuse: & PutBlock@6/13 HalfReuse: </14 } & Asciiz@2/23 Tile{ AsIs: </0 Reuse: & DisplayName/4 } Tile{ AsIs: e.Name/21 } >/24 Tile{ HalfReuse: >/12 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_Asciiz_Z2]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[13], functions[efunc_gen_PutBlock_Z6]);
      refalrts::reinit_open_call(context[14]);
      refalrts::update_name(context[4], functions[efunc_DisplayName]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[12];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[7], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Globals/4 (/7 e.Labels/19 )/8 (/11 # CmdSwapDescr/13 s.ScopeClass/14 e.Name/21 )/12 >/1
    context[19] = context[15];
    context[20] = context[16];
    context[21] = context[17];
    context[22] = context[18];
    // closed e.Labels as range 19
    // closed e.Name as range 21
    //DEBUG: s.ScopeClass: 14
    //DEBUG: e.Labels: 19
    //DEBUG: e.Name: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Labels/19 } Tile{ HalfReuse: )/4 HalfReuse: </7 } Tile{ HalfReuse: & PutBlock@6/8 HalfReuse: </11 HalfReuse: & NameWithSign-Bytes*2/13 AsIs: s.ScopeClass/14 AsIs: e.Name/21 HalfReuse: >/12 AsIs: >/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_PutBlock_Z6]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[13], functions[efunc_gen_NameWithSignm_Bytes_D2]);
    refalrts::reinit_close_call(context[12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Globals/4 (/7 e.new8/15 )/8 (/11 # CmdConditionFuncDecsrRasl/13 s.new9/14 e.new10/17 )/12 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[9];
    context[18] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_CmdConditionFuncDecsrRasl], context[13] ) )
      continue;
    // closed e.new8 as range 15
    // closed e.new10 as range 17
    do {
      // </0 & GenCommand-Globals/4 (/7 e.Labels/19 )/8 (/11 # CmdConditionFuncDecsrRasl/13 # GN-Entry/14 e.Name/21 )/12 >/1
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[14] ) )
        continue;
      // closed e.Labels as range 19
      // closed e.Name as range 21
      //DEBUG: e.Labels: 19
      //DEBUG: e.Name: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels/19 AsIs: )/8 HalfReuse: </11 HalfReuse: & PutBlock@7/13 HalfReuse: </14 } & Asciiz@1/23 Tile{ AsIs: </0 Reuse: & DisplayName/4 } Tile{ AsIs: e.Name/21 } >/24 Tile{ HalfReuse: >/12 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_Asciiz_Z1]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[13], functions[efunc_gen_PutBlock_Z7]);
      refalrts::reinit_open_call(context[14]);
      refalrts::update_name(context[4], functions[efunc_DisplayName]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[12];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[7], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Globals/4 (/7 e.Labels/19 )/8 (/11 # CmdConditionFuncDecsrRasl/13 # GN-Local/14 e.Name/21 )/12 >/1
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[14] ) )
        continue;
      // closed e.Labels as range 19
      // closed e.Name as range 21
      //DEBUG: e.Labels: 19
      //DEBUG: e.Name: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels/19 AsIs: )/8 HalfReuse: </11 HalfReuse: & PutBlock@7/13 HalfReuse: </14 } & Asciiz@2/23 Tile{ AsIs: </0 Reuse: & DisplayName/4 } Tile{ AsIs: e.Name/21 } >/24 Tile{ HalfReuse: >/12 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_Asciiz_Z2]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[13], functions[efunc_gen_PutBlock_Z7]);
      refalrts::reinit_open_call(context[14]);
      refalrts::update_name(context[4], functions[efunc_DisplayName]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[12];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[7], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Globals/4 (/7 e.Labels/19 )/8 (/11 # CmdConditionFuncDecsrRasl/13 s.ScopeClass/14 e.Name/21 )/12 >/1
    context[19] = context[15];
    context[20] = context[16];
    context[21] = context[17];
    context[22] = context[18];
    // closed e.Labels as range 19
    // closed e.Name as range 21
    //DEBUG: s.ScopeClass: 14
    //DEBUG: e.Labels: 19
    //DEBUG: e.Name: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Labels/19 } Tile{ HalfReuse: )/4 HalfReuse: </7 } Tile{ HalfReuse: & PutBlock@7/8 HalfReuse: </11 HalfReuse: & NameWithSign-Bytes*2/13 AsIs: s.ScopeClass/14 AsIs: e.Name/21 HalfReuse: >/12 AsIs: >/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_PutBlock_Z7]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[13], functions[efunc_gen_NameWithSignm_Bytes_D2]);
    refalrts::reinit_close_call(context[12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Globals/4 (/7 e.new8/15 )/8 (/11 # CmdConditionFuncDecsrNative/13 s.new9/14 e.new10/17 )/12 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[9];
    context[18] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_CmdConditionFuncDecsrNative], context[13] ) )
      continue;
    // closed e.new8 as range 15
    // closed e.new10 as range 17
    do {
      // </0 & GenCommand-Globals/4 (/7 e.Labels/19 )/8 (/11 # CmdConditionFuncDecsrNative/13 # GN-Entry/14 e.Name/21 )/12 >/1
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[14] ) )
        continue;
      // closed e.Labels as range 19
      // closed e.Name as range 21
      //DEBUG: e.Labels: 19
      //DEBUG: e.Name: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels/19 AsIs: )/8 HalfReuse: </11 HalfReuse: & PutBlock@8/13 HalfReuse: </14 } & Asciiz@1/23 Tile{ AsIs: </0 Reuse: & DisplayName/4 } Tile{ AsIs: e.Name/21 } >/24 Tile{ HalfReuse: >/12 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_Asciiz_Z1]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[13], functions[efunc_gen_PutBlock_Z8]);
      refalrts::reinit_open_call(context[14]);
      refalrts::update_name(context[4], functions[efunc_DisplayName]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[12];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[7], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Globals/4 (/7 e.Labels/19 )/8 (/11 # CmdConditionFuncDecsrNative/13 # GN-Local/14 e.Name/21 )/12 >/1
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[14] ) )
        continue;
      // closed e.Labels as range 19
      // closed e.Name as range 21
      //DEBUG: e.Labels: 19
      //DEBUG: e.Name: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels/19 AsIs: )/8 HalfReuse: </11 HalfReuse: & PutBlock@8/13 HalfReuse: </14 } & Asciiz@2/23 Tile{ AsIs: </0 Reuse: & DisplayName/4 } Tile{ AsIs: e.Name/21 } >/24 Tile{ HalfReuse: >/12 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_Asciiz_Z2]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[13], functions[efunc_gen_PutBlock_Z8]);
      refalrts::reinit_open_call(context[14]);
      refalrts::update_name(context[4], functions[efunc_DisplayName]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[12];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[7], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Globals/4 (/7 e.Labels/19 )/8 (/11 # CmdConditionFuncDecsrNative/13 s.ScopeClass/14 e.Name/21 )/12 >/1
    context[19] = context[15];
    context[20] = context[16];
    context[21] = context[17];
    context[22] = context[18];
    // closed e.Labels as range 19
    // closed e.Name as range 21
    //DEBUG: s.ScopeClass: 14
    //DEBUG: e.Labels: 19
    //DEBUG: e.Name: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Labels/19 } Tile{ HalfReuse: )/4 HalfReuse: </7 } Tile{ HalfReuse: & PutBlock@8/8 HalfReuse: </11 HalfReuse: & NameWithSign-Bytes*2/13 AsIs: s.ScopeClass/14 AsIs: e.Name/21 HalfReuse: >/12 AsIs: >/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_PutBlock_Z8]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[13], functions[efunc_gen_NameWithSignm_Bytes_D2]);
    refalrts::reinit_close_call(context[12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenCommand-Globals/4 (/7 e.new8/5 )/8 (/11 # CmdNativeFuncDescr/13 s.new9/14 e.new10/9 )/12 >/1
  if( ! refalrts::ident_term( identifiers[ident_CmdNativeFuncDescr], context[13] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new8 as range 5
  // closed e.new10 as range 9
  do {
    // </0 & GenCommand-Globals/4 (/7 e.Labels/15 )/8 (/11 # CmdNativeFuncDescr/13 # GN-Entry/14 e.Name/17 )/12 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[9];
    context[18] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[14] ) )
      continue;
    // closed e.Labels as range 15
    // closed e.Name as range 17
    //DEBUG: e.Labels: 15
    //DEBUG: e.Name: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels/15 AsIs: )/8 HalfReuse: </11 HalfReuse: & PutBlock@9/13 HalfReuse: </14 } & Asciiz@1/19 Tile{ AsIs: </0 Reuse: & DisplayName/4 } Tile{ AsIs: e.Name/17 } >/20 Tile{ HalfReuse: >/12 AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[19], functions[efunc_gen_Asciiz_Z1]);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[13], functions[efunc_gen_PutBlock_Z9]);
    refalrts::reinit_open_call(context[14]);
    refalrts::update_name(context[4], functions[efunc_DisplayName]);
    refalrts::reinit_close_call(context[12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[7], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Globals/4 (/7 e.Labels/15 )/8 (/11 # CmdNativeFuncDescr/13 # GN-Local/14 e.Name/17 )/12 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[9];
    context[18] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[14] ) )
      continue;
    // closed e.Labels as range 15
    // closed e.Name as range 17
    //DEBUG: e.Labels: 15
    //DEBUG: e.Name: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels/15 AsIs: )/8 HalfReuse: </11 HalfReuse: & PutBlock@9/13 HalfReuse: </14 } & Asciiz@2/19 Tile{ AsIs: </0 Reuse: & DisplayName/4 } Tile{ AsIs: e.Name/17 } >/20 Tile{ HalfReuse: >/12 AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[19], functions[efunc_gen_Asciiz_Z2]);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[13], functions[efunc_gen_PutBlock_Z9]);
    refalrts::reinit_open_call(context[14]);
    refalrts::update_name(context[4], functions[efunc_DisplayName]);
    refalrts::reinit_close_call(context[12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[7], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenCommand-Globals/4 (/7 e.Labels/5 )/8 (/11 # CmdNativeFuncDescr/13 s.ScopeClass/14 e.Name/9 )/12 >/1
  // closed e.Labels as range 5
  // closed e.Name as range 9
  //DEBUG: s.ScopeClass: 14
  //DEBUG: e.Labels: 5
  //DEBUG: e.Name: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Labels/5 } Tile{ HalfReuse: )/4 HalfReuse: </7 } Tile{ HalfReuse: & PutBlock@9/8 HalfReuse: </11 HalfReuse: & NameWithSign-Bytes*2/13 AsIs: s.ScopeClass/14 AsIs: e.Name/9 HalfReuse: >/12 AsIs: >/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::reinit_open_call(context[7]);
  refalrts::reinit_name(context[8], functions[efunc_gen_PutBlock_Z9]);
  refalrts::reinit_open_call(context[11]);
  refalrts::reinit_name(context[13], functions[efunc_gen_NameWithSignm_Bytes_D2]);
  refalrts::reinit_close_call(context[12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[4], context[7] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_GenCommandm_Globals("GenCommand-Globals", COOKIE1_, COOKIE2_, func_GenCommandm_Globals);


static refalrts::FnResult func_gen_Assemble_A3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & Assemble=3/4 s.RaslLength/5 (/8 e.Labels/6 )/9 e.RASLAsWords$b/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  // closed e.Labels as range 6
  // closed e.RASLAsWords$b as range 2
  //DEBUG: s.RaslLength: 5
  //DEBUG: e.Labels: 6
  //DEBUG: e.RASLAsWords$b: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & Assemble=3/4 {REMOVED TILE} {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: s.RaslLength/5 AsIs: (/8 AsIs: e.Labels/6 AsIs: )/9 } Tile{ AsIs: e.RASLAsWords$b/2 } Tile{ ]] }
  refalrts::link_brackets( context[8], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Assemble_A3("Assemble=3", COOKIE1_, COOKIE2_, func_gen_Assemble_A3);


static refalrts::FnResult func_gen_Assemble_A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & Assemble=2/4 (/7 s.RaslLength/9 e.Labels/5 )/8 e.RASLAsWords$a/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.RASLAsWords$a as range 2
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.Labels as range 5
  //DEBUG: e.RASLAsWords$a: 2
  //DEBUG: s.RaslLength: 9
  //DEBUG: e.Labels: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} s.RaslLength/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Assemble=3/4 HalfReuse: s.RaslLength9 /7 } (/10 e.Labels/5/11 )/13 </14 & ResolveLabeledDestinations/15 (/16 Tile{ AsIs: e.Labels/5 } Tile{ AsIs: )/8 AsIs: e.RASLAsWords$a/2 AsIs: >/1 } >/17 Tile{ ]] }
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::copy_evar(vm, context[11], context[12], context[5], context[6]);
  refalrts::alloc_close_bracket(vm, context[13]);
  refalrts::alloc_open_call(vm, context[14]);
  refalrts::alloc_name(vm, context[15], functions[efunc_ResolveLabeledDestinations]);
  refalrts::alloc_open_bracket(vm, context[16]);
  refalrts::alloc_close_call(vm, context[17]);
  refalrts::update_name(context[4], functions[efunc_gen_Assemble_A3]);
  refalrts::reinit_svar( context[7], context[9] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[14] );
  refalrts::link_brackets( context[16], context[8] );
  refalrts::link_brackets( context[10], context[13] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[17] );
  res = refalrts::splice_evar( res, context[8], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_evar( res, context[10], context[16] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Assemble_A2("Assemble=2", COOKIE1_, COOKIE2_, func_gen_Assemble_A2);


static refalrts::FnResult func_gen_Assemble_A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 13 elems
  refalrts::Iter context[13];
  refalrts::zeros( context, 13 );
  // </0 & Assemble=1/4 e.RASLAsWords/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.RASLAsWords as range 2
  //DEBUG: e.RASLAsWords: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Assemble=2/4 } </5 & DoMapAccum@2/6 (/7 0/8 )/9 (/10 )/11 Tile{ AsIs: e.RASLAsWords/2 } >/12 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoMapAccum_Z2]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_number(vm, context[8], 0UL);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::alloc_open_bracket(vm, context[10]);
  refalrts::alloc_close_bracket(vm, context[11]);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::update_name(context[4], functions[efunc_gen_Assemble_A2]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[10], context[11] );
  refalrts::link_brackets( context[7], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Assemble_A1("Assemble=1", COOKIE1_, COOKIE2_, func_gen_Assemble_A1);


static refalrts::FnResult func_Assemble(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Assemble/4 e.RASL/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.RASL as range 2
  //DEBUG: e.RASL: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & Assemble=1/6 Tile{ AsIs: </0 Reuse: & Map@2/4 AsIs: e.RASL/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_Assemble_A1]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_gen_Map_Z2]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_Assemble("Assemble", COOKIE1_, COOKIE2_, func_Assemble);


static refalrts::FnResult func_GenCommandm_RASL(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & GenCommand-RASL/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & GenCommand-RASL/4 (/9 s.new1/11 e.new2/7 )/10 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[11], context[7], context[8] ) )
      continue;
    // closed e.new2 as range 7
    do {
      // </0 & GenCommand-RASL/4 (/9 # LABEL/11 s.Label/14 )/10 >/1
      context[12] = context[7];
      context[13] = context[8];
      if( ! refalrts::ident_term( identifiers[ident_LABEL], context[11] ) )
        continue;
      if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
        continue;
      if( ! refalrts::empty_seq( context[12], context[13] ) )
        continue;
      //DEBUG: s.Label: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & GenCommand-RASL/4 {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # LABEL/11 AsIs: s.Label/14 AsIs: )/10 } Tile{ ]] }
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[9], context[10] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-RASL/4 (/9 s.new3/11 )/10 >/1
      if( ! refalrts::empty_seq( context[7], context[8] ) )
        continue;
      do {
        // </0 & GenCommand-RASL/4 (/9 # CmdProfileFunction/11 )/10 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdProfileFunction], context[11] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 0/4 HalfReuse: 0/9 HalfReuse: 0/11 HalfReuse: 0/10 HalfReuse: )/1 ]] }
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 0UL);
        refalrts::reinit_number(context[9], 0UL);
        refalrts::reinit_number(context[11], 0UL);
        refalrts::reinit_number(context[10], 0UL);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[0], context[1] );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/9 # CmdLoadConstants/11 )/10 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdLoadConstants], context[11] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 1/4 HalfReuse: 0/9 HalfReuse: 0/11 HalfReuse: 0/10 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 1UL);
      refalrts::reinit_number(context[9], 0UL);
      refalrts::reinit_number(context[11], 0UL);
      refalrts::reinit_number(context[10], 0UL);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-RASL/4 (/9 s.new3/11 s.new4/14 e.new5/12 )/10 >/1
      context[12] = context[7];
      context[13] = context[8];
      if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
        continue;
      // closed e.new5 as range 12
      do {
        // </0 & GenCommand-RASL/4 (/9 s.new6/11 s.new7/14 )/10 >/1
        if( ! refalrts::empty_seq( context[12], context[13] ) )
          continue;
        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdIssueMemory/11 s.Memory/14 )/10 >/1
          if( ! refalrts::ident_term( identifiers[ident_CmdIssueMemory], context[11] ) )
            continue;
          //DEBUG: s.Memory: 14

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </15 Tile{ HalfReuse: & PutCommand$3:1/0 HalfReuse: 2/4 HalfReuse: </9 HalfReuse: & Divmod/11 AsIs: s.Memory/14 HalfReuse: 256/10 AsIs: >/1 } (/16 0/17 )/18 0/19 (/20 0/21 )/22 0/23 >/24 Tile{ ]] }
          refalrts::alloc_open_call(vm, context[15]);
          refalrts::alloc_open_bracket(vm, context[16]);
          refalrts::alloc_number(vm, context[17], 0UL);
          refalrts::alloc_close_bracket(vm, context[18]);
          refalrts::alloc_number(vm, context[19], 0UL);
          refalrts::alloc_open_bracket(vm, context[20]);
          refalrts::alloc_number(vm, context[21], 0UL);
          refalrts::alloc_close_bracket(vm, context[22]);
          refalrts::alloc_number(vm, context[23], 0UL);
          refalrts::alloc_close_call(vm, context[24]);
          refalrts::reinit_name(context[0], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[4], 2UL);
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_name(context[11], functions[efunc_Divmod]);
          refalrts::reinit_number(context[10], 256UL);
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[15] );
          refalrts::link_brackets( context[20], context[22] );
          refalrts::link_brackets( context[16], context[18] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[16], context[24] );
          res = refalrts::splice_evar( res, context[0], context[1] );
          res = refalrts::splice_elem( res, context[15] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/9 # CmdReserveBacktrackStack/11 s.Depth/14 )/10 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdReserveBacktrackStack], context[11] ) )
          continue;
        //DEBUG: s.Depth: 14

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </15 Tile{ HalfReuse: & PutCommand$3:1/0 HalfReuse: 3/4 HalfReuse: </9 HalfReuse: & Divmod/11 AsIs: s.Depth/14 HalfReuse: 256/10 AsIs: >/1 } (/16 0/17 )/18 0/19 (/20 0/21 )/22 0/23 >/24 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[15]);
        refalrts::alloc_open_bracket(vm, context[16]);
        refalrts::alloc_number(vm, context[17], 0UL);
        refalrts::alloc_close_bracket(vm, context[18]);
        refalrts::alloc_number(vm, context[19], 0UL);
        refalrts::alloc_open_bracket(vm, context[20]);
        refalrts::alloc_number(vm, context[21], 0UL);
        refalrts::alloc_close_bracket(vm, context[22]);
        refalrts::alloc_number(vm, context[23], 0UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::reinit_name(context[0], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[4], 3UL);
        refalrts::reinit_open_call(context[9]);
        refalrts::reinit_name(context[11], functions[efunc_Divmod]);
        refalrts::reinit_number(context[10], 256UL);
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[15] );
        refalrts::link_brackets( context[20], context[22] );
        refalrts::link_brackets( context[16], context[18] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[16], context[24] );
        res = refalrts::splice_evar( res, context[0], context[1] );
        res = refalrts::splice_elem( res, context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/9 # CmdOnFailGoTo/11 s.Offset/14 # Func$_name:/17 e.FuncName/15 )/10 >/1
      context[15] = context[12];
      context[16] = context[13];
      if( ! refalrts::ident_term( identifiers[ident_CmdOnFailGoTo], context[11] ) )
        continue;
      context[17] = refalrts::ident_left( identifiers[ident_Funck32_namek58_], context[15], context[16] );
      if( ! context[17] )
        continue;
      // closed e.FuncName as range 15
      //DEBUG: s.Offset: 14
      //DEBUG: e.FuncName: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & GenCommand-RASL/4 {REMOVED TILE} # Func$_name:/17 {REMOVED TILE} )/10 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/9 AsIs: # CmdOnFailGoTo/11 AsIs: s.Offset/14 } Tile{ AsIs: e.FuncName/15 } Tile{ HalfReuse: )/1 ]] }
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[9], context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[9], context[14] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-RASL/4 (/9 s.new3/11 )/10 >/1
      if( ! refalrts::empty_seq( context[7], context[8] ) )
        continue;
      do {
        // </0 & GenCommand-RASL/4 (/9 # CmdProfilerStopSentence/11 )/10 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdProfilerStopSentence], context[11] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 5/4 HalfReuse: 0/9 HalfReuse: 0/11 HalfReuse: 0/10 HalfReuse: )/1 ]] }
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 5UL);
        refalrts::reinit_number(context[9], 0UL);
        refalrts::reinit_number(context[11], 0UL);
        refalrts::reinit_number(context[10], 0UL);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[0], context[1] );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/9 # CmdInitB0/11 )/10 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdInitB0], context[11] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 6/4 HalfReuse: 0/9 HalfReuse: 0/11 HalfReuse: 0/10 HalfReuse: )/1 ]] }
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 6UL);
        refalrts::reinit_number(context[9], 0UL);
        refalrts::reinit_number(context[11], 0UL);
        refalrts::reinit_number(context[10], 0UL);
        refalrts::reinit_close_bracket(context[1]);
        refalrts::link_brackets( context[0], context[1] );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/9 # CmdInitB0-Lite/11 )/10 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdInitB0m_Lite], context[11] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 7/4 HalfReuse: 0/9 HalfReuse: 0/11 HalfReuse: 0/10 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 7UL);
      refalrts::reinit_number(context[9], 0UL);
      refalrts::reinit_number(context[11], 0UL);
      refalrts::reinit_number(context[10], 0UL);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-RASL/4 (/9 s.new3/11 s.new4/14 s.new5/15 e.new6/12 )/10 >/1
    context[12] = context[7];
    context[13] = context[8];
    if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[12], context[13] ) )
      continue;
    // closed e.new6 as range 12
    do {
      // </0 & GenCommand-RASL/4 (/9 s.new7/11 s.new8/14 s.new9/15 s.new10/18 e.new11/16 )/10 >/1
      context[16] = context[12];
      context[17] = context[13];
      if( ! refalrts::svar_left( context[18], context[16], context[17] ) )
        continue;
      // closed e.new11 as range 16
      do {
        // </0 & GenCommand-RASL/4 (/9 # CmdChar/11 s.Direction/14 s.BracketNumber/15 s.Char/18 )/10 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdChar], context[11] ) )
          continue;
        if( ! refalrts::empty_seq( context[16], context[17] ) )
          continue;
        //DEBUG: s.Direction: 14
        //DEBUG: s.BracketNumber: 15
        //DEBUG: s.Char: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.BracketNumber/15 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand/4 AsIs: (/9 AsIs: # CmdChar/11 AsIs: s.Direction/14 } )/19 0/20 </21 & Ord/22 Tile{ AsIs: s.Char/18 } >/23 Tile{ HalfReuse: s.BracketNumber15 /10 AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[19]);
        refalrts::alloc_number(vm, context[20], 0UL);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Ord]);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_PutCommand]);
        refalrts::reinit_svar( context[10], context[15] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[21] );
        refalrts::link_brackets( context[9], context[19] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[10];
        res = refalrts::splice_elem( res, context[23] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        refalrts::splice_to_freelist_open( vm, context[14], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/9 # CmdCharSave/11 s.Direction/14 s.BracketNumber/15 s.SaveOffset/18 s.Char/21 )/10 >/1
        context[19] = context[16];
        context[20] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_CmdCharSave], context[11] ) )
          continue;
        if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
          continue;
        if( ! refalrts::empty_seq( context[19], context[20] ) )
          continue;
        //DEBUG: s.Direction: 14
        //DEBUG: s.BracketNumber: 15
        //DEBUG: s.SaveOffset: 18
        //DEBUG: s.Char: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.BracketNumber/15 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand/4 AsIs: (/9 AsIs: # CmdCharSave/11 AsIs: s.Direction/14 } )/22 Tile{ AsIs: s.SaveOffset/18 } </23 & Ord/24 Tile{ AsIs: s.Char/21 } >/25 Tile{ HalfReuse: s.BracketNumber15 /10 AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[22]);
        refalrts::alloc_open_call(vm, context[23]);
        refalrts::alloc_name(vm, context[24], functions[efunc_Ord]);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::update_name(context[4], functions[efunc_PutCommand]);
        refalrts::reinit_svar( context[10], context[15] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[23] );
        refalrts::link_brackets( context[9], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[10];
        res = refalrts::splice_elem( res, context[25] );
        res = refalrts::splice_elem( res, context[21] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_elem( res, context[18] );
        res = refalrts::splice_elem( res, context[22] );
        refalrts::splice_to_freelist_open( vm, context[14], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/9 # CmdNumber/11 s.new12/14 s.new13/15 s.new14/18 )/10 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdNumber], context[11] ) )
          continue;
        if( ! refalrts::empty_seq( context[16], context[17] ) )
          continue;
        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdNumber/11 # AlgLeft/14 s.BracketNumber/15 s.Number/18 )/10 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.BracketNumber: 15
          //DEBUG: s.Number: 18

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 13/9 HalfReuse: (/11 HalfReuse: 0/14 } )/19 0/20 </21 & Divmod/22 Tile{ AsIs: s.Number/18 HalfReuse: 256/10 AsIs: >/1 } </23 & Divmod/24 Tile{ AsIs: s.BracketNumber/15 } 256/25 >/26 >/27 Tile{ ]] }
          refalrts::alloc_close_bracket(vm, context[19]);
          refalrts::alloc_number(vm, context[20], 0UL);
          refalrts::alloc_open_call(vm, context[21]);
          refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
          refalrts::alloc_open_call(vm, context[23]);
          refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[25], 256UL);
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 13UL);
          refalrts::reinit_open_bracket(context[11]);
          refalrts::reinit_number(context[14], 0UL);
          refalrts::reinit_number(context[10], 256UL);
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[21] );
          refalrts::link_brackets( context[11], context[19] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[25], context[27] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[23], context[24] );
          res = refalrts::splice_evar( res, context[18], context[1] );
          res = refalrts::splice_evar( res, context[19], context[22] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdNumber/11 # AlgRight/14 s.BracketNumber/15 s.Number/18 )/10 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          //DEBUG: s.BracketNumber: 15
          //DEBUG: s.Number: 18

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 14/9 HalfReuse: (/11 HalfReuse: 0/14 } )/19 0/20 </21 & Divmod/22 Tile{ AsIs: s.Number/18 HalfReuse: 256/10 AsIs: >/1 } </23 & Divmod/24 Tile{ AsIs: s.BracketNumber/15 } 256/25 >/26 >/27 Tile{ ]] }
          refalrts::alloc_close_bracket(vm, context[19]);
          refalrts::alloc_number(vm, context[20], 0UL);
          refalrts::alloc_open_call(vm, context[21]);
          refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
          refalrts::alloc_open_call(vm, context[23]);
          refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[25], 256UL);
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 14UL);
          refalrts::reinit_open_bracket(context[11]);
          refalrts::reinit_number(context[14], 0UL);
          refalrts::reinit_number(context[10], 256UL);
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[21] );
          refalrts::link_brackets( context[11], context[19] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[25], context[27] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[23], context[24] );
          res = refalrts::splice_evar( res, context[18], context[1] );
          res = refalrts::splice_evar( res, context[19], context[22] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdNumber/11 # AlgTerm/14 s.BracketNumber/15 s.Number/18 )/10 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
            continue;
          //DEBUG: s.BracketNumber: 15
          //DEBUG: s.Number: 18

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 15/9 HalfReuse: (/11 HalfReuse: 0/14 } )/19 0/20 </21 & Divmod/22 Tile{ AsIs: s.Number/18 HalfReuse: 256/10 AsIs: >/1 } </23 & Divmod/24 Tile{ AsIs: s.BracketNumber/15 } 256/25 >/26 >/27 Tile{ ]] }
          refalrts::alloc_close_bracket(vm, context[19]);
          refalrts::alloc_number(vm, context[20], 0UL);
          refalrts::alloc_open_call(vm, context[21]);
          refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
          refalrts::alloc_open_call(vm, context[23]);
          refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[25], 256UL);
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 15UL);
          refalrts::reinit_open_bracket(context[11]);
          refalrts::reinit_number(context[14], 0UL);
          refalrts::reinit_number(context[10], 256UL);
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[21] );
          refalrts::link_brackets( context[11], context[19] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[25], context[27] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[23], context[24] );
          res = refalrts::splice_evar( res, context[18], context[1] );
          res = refalrts::splice_evar( res, context[19], context[22] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/9 # CmdNumber/11 s.Direction/14 s.BracketNumber/15 s.Number/18 )/10 >/1
        //DEBUG: s.Direction: 14
        //DEBUG: s.BracketNumber: 15
        //DEBUG: s.Number: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.BracketNumber/15 s.Number/18 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1@3/4 HalfReuse: s.Number18 /9 HalfReuse: s.BracketNumber15 /11 } </19 & NumberFromOpcode*119/20 # CmdNumber/21 Tile{ AsIs: s.Direction/14 } Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_gen_NumberFromOpcode_D119]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_CmdNumber]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1Z3]);
        refalrts::reinit_svar( context[9], context[18] );
        refalrts::reinit_svar( context[11], context[15] );
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[19] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[10];
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[19], context[21] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/9 # CmdNumberSave/11 s.new12/14 s.new13/15 s.new14/18 s.new15/21 )/10 >/1
        context[19] = context[16];
        context[20] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_CmdNumberSave], context[11] ) )
          continue;
        if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
          continue;
        if( ! refalrts::empty_seq( context[19], context[20] ) )
          continue;
        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdNumberSave/11 # AlgLeft/14 s.BracketNumber/15 s.SaveOffset/18 s.Number/21 )/10 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.BracketNumber: 15
          //DEBUG: s.SaveOffset: 18
          //DEBUG: s.Number: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 16/9 HalfReuse: </11 HalfReuse: & Divmod/14 } Tile{ AsIs: s.SaveOffset/18 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Number/21 HalfReuse: 256/10 AsIs: >/1 } </26 & Divmod/27 Tile{ AsIs: s.BracketNumber/15 } 256/28 >/29 >/30 Tile{ ]] }
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_open_call(vm, context[26]);
          refalrts::alloc_name(vm, context[27], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[28], 256UL);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_close_call(vm, context[30]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 16UL);
          refalrts::reinit_open_call(context[11]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_number(context[10], 256UL);
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[11] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[28], context[30] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[21], context[1] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[18] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdNumberSave/11 # AlgRight/14 s.BracketNumber/15 s.SaveOffset/18 s.Number/21 )/10 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          //DEBUG: s.BracketNumber: 15
          //DEBUG: s.SaveOffset: 18
          //DEBUG: s.Number: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 17/9 HalfReuse: </11 HalfReuse: & Divmod/14 } Tile{ AsIs: s.SaveOffset/18 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Number/21 HalfReuse: 256/10 AsIs: >/1 } </26 & Divmod/27 Tile{ AsIs: s.BracketNumber/15 } 256/28 >/29 >/30 Tile{ ]] }
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_open_call(vm, context[26]);
          refalrts::alloc_name(vm, context[27], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[28], 256UL);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_close_call(vm, context[30]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 17UL);
          refalrts::reinit_open_call(context[11]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_number(context[10], 256UL);
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[11] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[28], context[30] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_evar( res, context[21], context[1] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[18] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/9 # CmdNumberSave/11 s.Direction/14 s.BracketNumber/15 s.SaveOffset/18 s.Number/21 )/10 >/1
        //DEBUG: s.Direction: 14
        //DEBUG: s.BracketNumber: 15
        //DEBUG: s.SaveOffset: 18
        //DEBUG: s.Number: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.SaveOffset/18 s.Number/21 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: s.SaveOffset18 /9 HalfReuse: s.Number21 /11 } Tile{ AsIs: s.BracketNumber/15 } </22 & NumberFromOpcode*119/23 # CmdNumberSave/24 Tile{ AsIs: s.Direction/14 } Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[22]);
        refalrts::alloc_name(vm, context[23], functions[efunc_gen_NumberFromOpcode_D119]);
        refalrts::alloc_ident(vm, context[24], identifiers[ident_CmdNumberSave]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
        refalrts::reinit_svar( context[9], context[18] );
        refalrts::reinit_svar( context[11], context[21] );
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[10];
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[22], context[24] );
        res = refalrts::splice_elem( res, context[15] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/9 # CmdName/11 s.new12/14 s.new13/15 s.new14/18 e.new15/19 )/10 >/1
        context[19] = context[16];
        context[20] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_CmdName], context[11] ) )
          continue;
        // closed e.new15 as range 19
        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdName/11 # AlgLeft/14 s.BracketNumber/15 s.NameId/18 e.Name/21 )/10 >/1
          context[21] = context[19];
          context[22] = context[20];
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          // closed e.Name as range 21
          //DEBUG: s.BracketNumber: 15
          //DEBUG: s.NameId: 18
          //DEBUG: e.Name: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name/21 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 23/9 HalfReuse: (/11 HalfReuse: 0/14 } )/23 0/24 </25 & Divmod/26 Tile{ AsIs: s.NameId/18 } 256/27 >/28 </29 & Divmod/30 Tile{ AsIs: s.BracketNumber/15 } 256/31 Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[23]);
          refalrts::alloc_number(vm, context[24], 0UL);
          refalrts::alloc_open_call(vm, context[25]);
          refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[27], 256UL);
          refalrts::alloc_close_call(vm, context[28]);
          refalrts::alloc_open_call(vm, context[29]);
          refalrts::alloc_name(vm, context[30], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[31], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 23UL);
          refalrts::reinit_open_bracket(context[11]);
          refalrts::reinit_number(context[14], 0UL);
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[25] );
          refalrts::link_brackets( context[11], context[23] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[10];
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[27], context[30] );
          res = refalrts::splice_elem( res, context[18] );
          res = refalrts::splice_evar( res, context[23], context[26] );
          refalrts::splice_to_freelist_open( vm, context[14], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdName/11 # AlgRight/14 s.BracketNumber/15 s.NameId/18 e.Name/21 )/10 >/1
          context[21] = context[19];
          context[22] = context[20];
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          // closed e.Name as range 21
          //DEBUG: s.BracketNumber: 15
          //DEBUG: s.NameId: 18
          //DEBUG: e.Name: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name/21 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 24/9 HalfReuse: (/11 HalfReuse: 0/14 } )/23 0/24 </25 & Divmod/26 Tile{ AsIs: s.NameId/18 } 256/27 >/28 </29 & Divmod/30 Tile{ AsIs: s.BracketNumber/15 } 256/31 Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[23]);
          refalrts::alloc_number(vm, context[24], 0UL);
          refalrts::alloc_open_call(vm, context[25]);
          refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[27], 256UL);
          refalrts::alloc_close_call(vm, context[28]);
          refalrts::alloc_open_call(vm, context[29]);
          refalrts::alloc_name(vm, context[30], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[31], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 24UL);
          refalrts::reinit_open_bracket(context[11]);
          refalrts::reinit_number(context[14], 0UL);
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[25] );
          refalrts::link_brackets( context[11], context[23] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[10];
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[27], context[30] );
          res = refalrts::splice_elem( res, context[18] );
          res = refalrts::splice_evar( res, context[23], context[26] );
          refalrts::splice_to_freelist_open( vm, context[14], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdName/11 # AlgTerm/14 s.BracketNumber/15 s.NameId/18 e.Name/21 )/10 >/1
          context[21] = context[19];
          context[22] = context[20];
          if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
            continue;
          // closed e.Name as range 21
          //DEBUG: s.BracketNumber: 15
          //DEBUG: s.NameId: 18
          //DEBUG: e.Name: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name/21 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 25/9 HalfReuse: (/11 HalfReuse: 0/14 } )/23 0/24 </25 & Divmod/26 Tile{ AsIs: s.NameId/18 } 256/27 >/28 </29 & Divmod/30 Tile{ AsIs: s.BracketNumber/15 } 256/31 Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[23]);
          refalrts::alloc_number(vm, context[24], 0UL);
          refalrts::alloc_open_call(vm, context[25]);
          refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[27], 256UL);
          refalrts::alloc_close_call(vm, context[28]);
          refalrts::alloc_open_call(vm, context[29]);
          refalrts::alloc_name(vm, context[30], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[31], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 25UL);
          refalrts::reinit_open_bracket(context[11]);
          refalrts::reinit_number(context[14], 0UL);
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[25] );
          refalrts::link_brackets( context[11], context[23] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[10];
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[27], context[30] );
          res = refalrts::splice_elem( res, context[18] );
          res = refalrts::splice_evar( res, context[23], context[26] );
          refalrts::splice_to_freelist_open( vm, context[14], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/9 # CmdName/11 s.Direction/14 s.BracketNumber/15 s.NameId/18 e.Name/21 )/10 >/1
        context[21] = context[19];
        context[22] = context[20];
        // closed e.Name as range 21
        //DEBUG: s.Direction: 14
        //DEBUG: s.BracketNumber: 15
        //DEBUG: s.NameId: 18
        //DEBUG: e.Name: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.BracketNumber/15 s.NameId/18 e.Name/21 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1@3/4 HalfReuse: s.NameId18 /9 HalfReuse: s.BracketNumber15 /11 } </23 & NumberFromOpcode*119/24 # CmdName/25 Tile{ AsIs: s.Direction/14 } Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[23]);
        refalrts::alloc_name(vm, context[24], functions[efunc_gen_NumberFromOpcode_D119]);
        refalrts::alloc_ident(vm, context[25], identifiers[ident_CmdName]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1Z3]);
        refalrts::reinit_svar( context[9], context[18] );
        refalrts::reinit_svar( context[11], context[15] );
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[23] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[10];
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[23], context[25] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/9 # CmdNameSave/11 s.new12/14 s.new13/15 s.new14/18 s.new15/21 e.new16/19 )/10 >/1
        context[19] = context[16];
        context[20] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_CmdNameSave], context[11] ) )
          continue;
        if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
          continue;
        // closed e.new16 as range 19
        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdNameSave/11 # AlgLeft/14 s.BracketNumber/15 s.SaveOffset/18 s.NameId/21 e.Name/22 )/10 >/1
          context[22] = context[19];
          context[23] = context[20];
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          // closed e.Name as range 22
          //DEBUG: s.BracketNumber: 15
          //DEBUG: s.SaveOffset: 18
          //DEBUG: s.NameId: 21
          //DEBUG: e.Name: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name/22 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 26/9 HalfReuse: </11 HalfReuse: & Divmod/14 } Tile{ AsIs: s.SaveOffset/18 } 256/24 >/25 </26 & Divmod/27 Tile{ AsIs: s.NameId/21 } 256/28 >/29 </30 & Divmod/31 Tile{ AsIs: s.BracketNumber/15 } 256/32 Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[24], 256UL);
          refalrts::alloc_close_call(vm, context[25]);
          refalrts::alloc_open_call(vm, context[26]);
          refalrts::alloc_name(vm, context[27], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[28], 256UL);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_open_call(vm, context[30]);
          refalrts::alloc_name(vm, context[31], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[32], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 26UL);
          refalrts::reinit_open_call(context[11]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[25] );
          refalrts::push_stack( vm, context[11] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[10];
          res = refalrts::splice_elem( res, context[32] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[28], context[31] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_evar( res, context[24], context[27] );
          res = refalrts::splice_elem( res, context[18] );
          refalrts::splice_to_freelist_open( vm, context[14], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdNameSave/11 # AlgRight/14 s.BracketNumber/15 s.SaveOffset/18 s.NameId/21 e.Name/22 )/10 >/1
          context[22] = context[19];
          context[23] = context[20];
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          // closed e.Name as range 22
          //DEBUG: s.BracketNumber: 15
          //DEBUG: s.SaveOffset: 18
          //DEBUG: s.NameId: 21
          //DEBUG: e.Name: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name/22 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 27/9 HalfReuse: </11 HalfReuse: & Divmod/14 } Tile{ AsIs: s.SaveOffset/18 } 256/24 >/25 </26 & Divmod/27 Tile{ AsIs: s.NameId/21 } 256/28 >/29 </30 & Divmod/31 Tile{ AsIs: s.BracketNumber/15 } 256/32 Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[24], 256UL);
          refalrts::alloc_close_call(vm, context[25]);
          refalrts::alloc_open_call(vm, context[26]);
          refalrts::alloc_name(vm, context[27], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[28], 256UL);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_open_call(vm, context[30]);
          refalrts::alloc_name(vm, context[31], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[32], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 27UL);
          refalrts::reinit_open_call(context[11]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[25] );
          refalrts::push_stack( vm, context[11] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[10];
          res = refalrts::splice_elem( res, context[32] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[28], context[31] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_evar( res, context[24], context[27] );
          res = refalrts::splice_elem( res, context[18] );
          refalrts::splice_to_freelist_open( vm, context[14], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/9 # CmdNameSave/11 s.Direction/14 s.BracketNumber/15 s.SaveOffset/18 s.NameId/21 e.Name/22 )/10 >/1
        context[22] = context[19];
        context[23] = context[20];
        // closed e.Name as range 22
        //DEBUG: s.Direction: 14
        //DEBUG: s.BracketNumber: 15
        //DEBUG: s.SaveOffset: 18
        //DEBUG: s.NameId: 21
        //DEBUG: e.Name: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.SaveOffset/18 s.NameId/21 e.Name/22 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: s.SaveOffset18 /9 HalfReuse: s.NameId21 /11 } Tile{ AsIs: s.BracketNumber/15 } </24 & NumberFromOpcode*119/25 # CmdNameSave/26 Tile{ AsIs: s.Direction/14 } Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_gen_NumberFromOpcode_D119]);
        refalrts::alloc_ident(vm, context[26], identifiers[ident_CmdNameSave]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
        refalrts::reinit_svar( context[9], context[18] );
        refalrts::reinit_svar( context[11], context[21] );
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[24] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[10];
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[24], context[26] );
        res = refalrts::splice_elem( res, context[15] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/9 # CmdIdent/11 s.new12/14 s.new13/15 s.new14/18 e.new15/19 )/10 >/1
        context[19] = context[16];
        context[20] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_CmdIdent], context[11] ) )
          continue;
        // closed e.new15 as range 19
        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdIdent/11 # AlgLeft/14 s.BracketNumber/15 s.NameId/18 e.Name/21 )/10 >/1
          context[21] = context[19];
          context[22] = context[20];
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          // closed e.Name as range 21
          //DEBUG: s.BracketNumber: 15
          //DEBUG: s.NameId: 18
          //DEBUG: e.Name: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name/21 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 28/9 HalfReuse: (/11 HalfReuse: 0/14 } )/23 0/24 </25 & Divmod/26 Tile{ AsIs: s.NameId/18 } 256/27 >/28 </29 & Divmod/30 Tile{ AsIs: s.BracketNumber/15 } 256/31 Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[23]);
          refalrts::alloc_number(vm, context[24], 0UL);
          refalrts::alloc_open_call(vm, context[25]);
          refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[27], 256UL);
          refalrts::alloc_close_call(vm, context[28]);
          refalrts::alloc_open_call(vm, context[29]);
          refalrts::alloc_name(vm, context[30], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[31], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 28UL);
          refalrts::reinit_open_bracket(context[11]);
          refalrts::reinit_number(context[14], 0UL);
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[25] );
          refalrts::link_brackets( context[11], context[23] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[10];
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[27], context[30] );
          res = refalrts::splice_elem( res, context[18] );
          res = refalrts::splice_evar( res, context[23], context[26] );
          refalrts::splice_to_freelist_open( vm, context[14], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdIdent/11 # AlgRight/14 s.BracketNumber/15 s.NameId/18 e.Name/21 )/10 >/1
          context[21] = context[19];
          context[22] = context[20];
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          // closed e.Name as range 21
          //DEBUG: s.BracketNumber: 15
          //DEBUG: s.NameId: 18
          //DEBUG: e.Name: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name/21 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 29/9 HalfReuse: (/11 HalfReuse: 0/14 } )/23 0/24 </25 & Divmod/26 Tile{ AsIs: s.NameId/18 } 256/27 >/28 </29 & Divmod/30 Tile{ AsIs: s.BracketNumber/15 } 256/31 Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[23]);
          refalrts::alloc_number(vm, context[24], 0UL);
          refalrts::alloc_open_call(vm, context[25]);
          refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[27], 256UL);
          refalrts::alloc_close_call(vm, context[28]);
          refalrts::alloc_open_call(vm, context[29]);
          refalrts::alloc_name(vm, context[30], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[31], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 29UL);
          refalrts::reinit_open_bracket(context[11]);
          refalrts::reinit_number(context[14], 0UL);
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[25] );
          refalrts::link_brackets( context[11], context[23] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[10];
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[27], context[30] );
          res = refalrts::splice_elem( res, context[18] );
          res = refalrts::splice_evar( res, context[23], context[26] );
          refalrts::splice_to_freelist_open( vm, context[14], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdIdent/11 # AlgTerm/14 s.BracketNumber/15 s.NameId/18 e.Name/21 )/10 >/1
          context[21] = context[19];
          context[22] = context[20];
          if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
            continue;
          // closed e.Name as range 21
          //DEBUG: s.BracketNumber: 15
          //DEBUG: s.NameId: 18
          //DEBUG: e.Name: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name/21 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 30/9 HalfReuse: (/11 HalfReuse: 0/14 } )/23 0/24 </25 & Divmod/26 Tile{ AsIs: s.NameId/18 } 256/27 >/28 </29 & Divmod/30 Tile{ AsIs: s.BracketNumber/15 } 256/31 Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
          refalrts::alloc_close_bracket(vm, context[23]);
          refalrts::alloc_number(vm, context[24], 0UL);
          refalrts::alloc_open_call(vm, context[25]);
          refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[27], 256UL);
          refalrts::alloc_close_call(vm, context[28]);
          refalrts::alloc_open_call(vm, context[29]);
          refalrts::alloc_name(vm, context[30], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[31], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 30UL);
          refalrts::reinit_open_bracket(context[11]);
          refalrts::reinit_number(context[14], 0UL);
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[25] );
          refalrts::link_brackets( context[11], context[23] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[10];
          res = refalrts::splice_elem( res, context[31] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[27], context[30] );
          res = refalrts::splice_elem( res, context[18] );
          res = refalrts::splice_evar( res, context[23], context[26] );
          refalrts::splice_to_freelist_open( vm, context[14], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/9 # CmdIdent/11 s.Direction/14 s.BracketNumber/15 s.NameId/18 e.Name/21 )/10 >/1
        context[21] = context[19];
        context[22] = context[20];
        // closed e.Name as range 21
        //DEBUG: s.Direction: 14
        //DEBUG: s.BracketNumber: 15
        //DEBUG: s.NameId: 18
        //DEBUG: e.Name: 21

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.BracketNumber/15 s.NameId/18 e.Name/21 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1@3/4 HalfReuse: s.NameId18 /9 HalfReuse: s.BracketNumber15 /11 } </23 & NumberFromOpcode*119/24 # CmdIdent/25 Tile{ AsIs: s.Direction/14 } Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[23]);
        refalrts::alloc_name(vm, context[24], functions[efunc_gen_NumberFromOpcode_D119]);
        refalrts::alloc_ident(vm, context[25], identifiers[ident_CmdIdent]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1Z3]);
        refalrts::reinit_svar( context[9], context[18] );
        refalrts::reinit_svar( context[11], context[15] );
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[23] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[10];
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[23], context[25] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/9 # CmdIdentSave/11 s.new12/14 s.new13/15 s.new14/18 s.new15/21 e.new16/19 )/10 >/1
        context[19] = context[16];
        context[20] = context[17];
        if( ! refalrts::ident_term( identifiers[ident_CmdIdentSave], context[11] ) )
          continue;
        if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
          continue;
        // closed e.new16 as range 19
        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdIdentSave/11 # AlgLeft/14 s.BracketNumber/15 s.SaveOffset/18 s.NameId/21 e.Name/22 )/10 >/1
          context[22] = context[19];
          context[23] = context[20];
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          // closed e.Name as range 22
          //DEBUG: s.BracketNumber: 15
          //DEBUG: s.SaveOffset: 18
          //DEBUG: s.NameId: 21
          //DEBUG: e.Name: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name/22 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 31/9 HalfReuse: </11 HalfReuse: & Divmod/14 } Tile{ AsIs: s.SaveOffset/18 } 256/24 >/25 </26 & Divmod/27 Tile{ AsIs: s.NameId/21 } 256/28 >/29 </30 & Divmod/31 Tile{ AsIs: s.BracketNumber/15 } 256/32 Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[24], 256UL);
          refalrts::alloc_close_call(vm, context[25]);
          refalrts::alloc_open_call(vm, context[26]);
          refalrts::alloc_name(vm, context[27], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[28], 256UL);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_open_call(vm, context[30]);
          refalrts::alloc_name(vm, context[31], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[32], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 31UL);
          refalrts::reinit_open_call(context[11]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[25] );
          refalrts::push_stack( vm, context[11] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[10];
          res = refalrts::splice_elem( res, context[32] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[28], context[31] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_evar( res, context[24], context[27] );
          res = refalrts::splice_elem( res, context[18] );
          refalrts::splice_to_freelist_open( vm, context[14], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdIdentSave/11 # AlgRight/14 s.BracketNumber/15 s.SaveOffset/18 s.NameId/21 e.Name/22 )/10 >/1
          context[22] = context[19];
          context[23] = context[20];
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          // closed e.Name as range 22
          //DEBUG: s.BracketNumber: 15
          //DEBUG: s.SaveOffset: 18
          //DEBUG: s.NameId: 21
          //DEBUG: e.Name: 22

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name/22 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 32/9 HalfReuse: </11 HalfReuse: & Divmod/14 } Tile{ AsIs: s.SaveOffset/18 } 256/24 >/25 </26 & Divmod/27 Tile{ AsIs: s.NameId/21 } 256/28 >/29 </30 & Divmod/31 Tile{ AsIs: s.BracketNumber/15 } 256/32 Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[24], 256UL);
          refalrts::alloc_close_call(vm, context[25]);
          refalrts::alloc_open_call(vm, context[26]);
          refalrts::alloc_name(vm, context[27], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[28], 256UL);
          refalrts::alloc_close_call(vm, context[29]);
          refalrts::alloc_open_call(vm, context[30]);
          refalrts::alloc_name(vm, context[31], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[32], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 32UL);
          refalrts::reinit_open_call(context[11]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[30] );
          refalrts::push_stack( vm, context[29] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[25] );
          refalrts::push_stack( vm, context[11] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[10];
          res = refalrts::splice_elem( res, context[32] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[28], context[31] );
          res = refalrts::splice_elem( res, context[21] );
          res = refalrts::splice_evar( res, context[24], context[27] );
          res = refalrts::splice_elem( res, context[18] );
          refalrts::splice_to_freelist_open( vm, context[14], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/9 # CmdIdentSave/11 s.Direction/14 s.BracketNumber/15 s.SaveOffset/18 s.NameId/21 e.Name/22 )/10 >/1
        context[22] = context[19];
        context[23] = context[20];
        // closed e.Name as range 22
        //DEBUG: s.Direction: 14
        //DEBUG: s.BracketNumber: 15
        //DEBUG: s.SaveOffset: 18
        //DEBUG: s.NameId: 21
        //DEBUG: e.Name: 22

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.SaveOffset/18 s.NameId/21 e.Name/22 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: s.SaveOffset18 /9 HalfReuse: s.NameId21 /11 } Tile{ AsIs: s.BracketNumber/15 } </24 & NumberFromOpcode*119/25 # CmdIdentSave/26 Tile{ AsIs: s.Direction/14 } Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_gen_NumberFromOpcode_D119]);
        refalrts::alloc_ident(vm, context[26], identifiers[ident_CmdIdentSave]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
        refalrts::reinit_svar( context[9], context[18] );
        refalrts::reinit_svar( context[11], context[21] );
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[24] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[10];
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[24], context[26] );
        res = refalrts::splice_elem( res, context[15] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/9 s.new12/11 s.new13/14 s.new14/15 s.new15/18 )/10 >/1
        if( ! refalrts::empty_seq( context[16], context[17] ) )
          continue;
        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdBrackets/11 s.new16/14 s.new17/15 s.new18/18 )/10 >/1
          if( ! refalrts::ident_term( identifiers[ident_CmdBrackets], context[11] ) )
            continue;
          do {
            // </0 & GenCommand-RASL/4 (/9 # CmdBrackets/11 # AlgLeft/14 s.Num/15 s.NumRanges/18 )/10 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
              continue;
            //DEBUG: s.Num: 15
            //DEBUG: s.NumRanges: 18

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 33/9 HalfReuse: (/11 HalfReuse: 0/14 } )/19 0/20 </21 & Divmod/22 Tile{ AsIs: s.NumRanges/18 HalfReuse: 256/10 AsIs: >/1 } </23 & Divmod/24 Tile{ AsIs: s.Num/15 } 256/25 >/26 >/27 Tile{ ]] }
            refalrts::alloc_close_bracket(vm, context[19]);
            refalrts::alloc_number(vm, context[20], 0UL);
            refalrts::alloc_open_call(vm, context[21]);
            refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
            refalrts::alloc_open_call(vm, context[23]);
            refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[25], 256UL);
            refalrts::alloc_close_call(vm, context[26]);
            refalrts::alloc_close_call(vm, context[27]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[9], 33UL);
            refalrts::reinit_open_bracket(context[11]);
            refalrts::reinit_number(context[14], 0UL);
            refalrts::reinit_number(context[10], 256UL);
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[26] );
            refalrts::push_stack( vm, context[23] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[21] );
            refalrts::link_brackets( context[11], context[19] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[25], context[27] );
            res = refalrts::splice_elem( res, context[15] );
            res = refalrts::splice_evar( res, context[23], context[24] );
            res = refalrts::splice_evar( res, context[18], context[1] );
            res = refalrts::splice_evar( res, context[19], context[22] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/9 # CmdBrackets/11 # AlgRight/14 s.Num/15 s.NumRanges/18 )/10 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
              continue;
            //DEBUG: s.Num: 15
            //DEBUG: s.NumRanges: 18

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 34/9 HalfReuse: (/11 HalfReuse: 0/14 } )/19 0/20 </21 & Divmod/22 Tile{ AsIs: s.NumRanges/18 HalfReuse: 256/10 AsIs: >/1 } </23 & Divmod/24 Tile{ AsIs: s.Num/15 } 256/25 >/26 >/27 Tile{ ]] }
            refalrts::alloc_close_bracket(vm, context[19]);
            refalrts::alloc_number(vm, context[20], 0UL);
            refalrts::alloc_open_call(vm, context[21]);
            refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
            refalrts::alloc_open_call(vm, context[23]);
            refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[25], 256UL);
            refalrts::alloc_close_call(vm, context[26]);
            refalrts::alloc_close_call(vm, context[27]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[9], 34UL);
            refalrts::reinit_open_bracket(context[11]);
            refalrts::reinit_number(context[14], 0UL);
            refalrts::reinit_number(context[10], 256UL);
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[26] );
            refalrts::push_stack( vm, context[23] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[21] );
            refalrts::link_brackets( context[11], context[19] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[25], context[27] );
            res = refalrts::splice_elem( res, context[15] );
            res = refalrts::splice_evar( res, context[23], context[24] );
            res = refalrts::splice_evar( res, context[18], context[1] );
            res = refalrts::splice_evar( res, context[19], context[22] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/9 # CmdBrackets/11 # AlgTerm/14 s.Num/15 s.NumRanges/18 )/10 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
              continue;
            //DEBUG: s.Num: 15
            //DEBUG: s.NumRanges: 18

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 35/9 HalfReuse: (/11 HalfReuse: 0/14 } )/19 0/20 </21 & Divmod/22 Tile{ AsIs: s.NumRanges/18 HalfReuse: 256/10 AsIs: >/1 } </23 & Divmod/24 Tile{ AsIs: s.Num/15 } 256/25 >/26 >/27 Tile{ ]] }
            refalrts::alloc_close_bracket(vm, context[19]);
            refalrts::alloc_number(vm, context[20], 0UL);
            refalrts::alloc_open_call(vm, context[21]);
            refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
            refalrts::alloc_open_call(vm, context[23]);
            refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[25], 256UL);
            refalrts::alloc_close_call(vm, context[26]);
            refalrts::alloc_close_call(vm, context[27]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[9], 35UL);
            refalrts::reinit_open_bracket(context[11]);
            refalrts::reinit_number(context[14], 0UL);
            refalrts::reinit_number(context[10], 256UL);
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[26] );
            refalrts::push_stack( vm, context[23] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[21] );
            refalrts::link_brackets( context[11], context[19] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[25], context[27] );
            res = refalrts::splice_elem( res, context[15] );
            res = refalrts::splice_evar( res, context[23], context[24] );
            res = refalrts::splice_evar( res, context[18], context[1] );
            res = refalrts::splice_evar( res, context[19], context[22] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/9 # CmdBrackets/11 s.Direction/14 s.Num/15 s.NumRanges/18 )/10 >/1
          //DEBUG: s.Direction: 14
          //DEBUG: s.Num: 15
          //DEBUG: s.NumRanges: 18

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.Num/15 s.NumRanges/18 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1@3/4 HalfReuse: s.NumRanges18 /9 HalfReuse: s.Num15 /11 } </19 & NumberFromOpcode*119/20 # CmdBrackets/21 Tile{ AsIs: s.Direction/14 } Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[19]);
          refalrts::alloc_name(vm, context[20], functions[efunc_gen_NumberFromOpcode_D119]);
          refalrts::alloc_ident(vm, context[21], identifiers[ident_CmdBrackets]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1Z3]);
          refalrts::reinit_svar( context[9], context[18] );
          refalrts::reinit_svar( context[11], context[15] );
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[19] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[10];
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[19], context[21] );
          refalrts::splice_to_freelist_open( vm, context[11], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/9 # CmdBracketsSave/11 s.new16/14 s.new17/15 s.new18/18 )/10 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdBracketsSave], context[11] ) )
          continue;
        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdBracketsSave/11 # AlgLeft/14 s.Num/15 s.NumRanges/18 )/10 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Num: 15
          //DEBUG: s.NumRanges: 18

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 36/9 HalfReuse: (/11 HalfReuse: 0/14 } )/19 0/20 </21 & Divmod/22 Tile{ AsIs: s.NumRanges/18 HalfReuse: 256/10 AsIs: >/1 } </23 & Divmod/24 Tile{ AsIs: s.Num/15 } 256/25 >/26 >/27 Tile{ ]] }
          refalrts::alloc_close_bracket(vm, context[19]);
          refalrts::alloc_number(vm, context[20], 0UL);
          refalrts::alloc_open_call(vm, context[21]);
          refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
          refalrts::alloc_open_call(vm, context[23]);
          refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[25], 256UL);
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 36UL);
          refalrts::reinit_open_bracket(context[11]);
          refalrts::reinit_number(context[14], 0UL);
          refalrts::reinit_number(context[10], 256UL);
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[21] );
          refalrts::link_brackets( context[11], context[19] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[25], context[27] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[23], context[24] );
          res = refalrts::splice_evar( res, context[18], context[1] );
          res = refalrts::splice_evar( res, context[19], context[22] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdBracketsSave/11 # AlgRight/14 s.Num/15 s.NumRanges/18 )/10 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          //DEBUG: s.Num: 15
          //DEBUG: s.NumRanges: 18

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 37/9 HalfReuse: (/11 HalfReuse: 0/14 } )/19 0/20 </21 & Divmod/22 Tile{ AsIs: s.NumRanges/18 HalfReuse: 256/10 AsIs: >/1 } </23 & Divmod/24 Tile{ AsIs: s.Num/15 } 256/25 >/26 >/27 Tile{ ]] }
          refalrts::alloc_close_bracket(vm, context[19]);
          refalrts::alloc_number(vm, context[20], 0UL);
          refalrts::alloc_open_call(vm, context[21]);
          refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
          refalrts::alloc_open_call(vm, context[23]);
          refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[25], 256UL);
          refalrts::alloc_close_call(vm, context[26]);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 37UL);
          refalrts::reinit_open_bracket(context[11]);
          refalrts::reinit_number(context[14], 0UL);
          refalrts::reinit_number(context[10], 256UL);
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[26] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[21] );
          refalrts::link_brackets( context[11], context[19] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[25], context[27] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[23], context[24] );
          res = refalrts::splice_evar( res, context[18], context[1] );
          res = refalrts::splice_evar( res, context[19], context[22] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/9 # CmdBracketsSave/11 s.Direction/14 s.Num/15 s.NumRanges/18 )/10 >/1
        //DEBUG: s.Direction: 14
        //DEBUG: s.Num: 15
        //DEBUG: s.NumRanges: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.Num/15 s.NumRanges/18 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1@3/4 HalfReuse: s.NumRanges18 /9 HalfReuse: s.Num15 /11 } </19 & NumberFromOpcode*119/20 # CmdBracketsSave/21 Tile{ AsIs: s.Direction/14 } Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_gen_NumberFromOpcode_D119]);
        refalrts::alloc_ident(vm, context[21], identifiers[ident_CmdBracketsSave]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1Z3]);
        refalrts::reinit_svar( context[9], context[18] );
        refalrts::reinit_svar( context[11], context[15] );
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[19] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[10];
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[19], context[21] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/9 s.new12/11 s.new13/14 s.new14/15 s.new15/18 s.new16/21 e.new17/19 )/10 >/1
        context[19] = context[16];
        context[20] = context[17];
        if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
          continue;
        // closed e.new17 as range 19
        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdADT/11 s.new18/14 s.new19/15 s.new20/18 s.new21/21 e.new22/22 )/10 >/1
          context[22] = context[19];
          context[23] = context[20];
          if( ! refalrts::ident_term( identifiers[ident_CmdADT], context[11] ) )
            continue;
          // closed e.new22 as range 22
          do {
            // </0 & GenCommand-RASL/4 (/9 # CmdADT/11 # AlgLeft/14 s.BracketNumber/15 s.InnerBrackets/18 s.NameId/21 e.Name/24 )/10 >/1
            context[24] = context[22];
            context[25] = context[23];
            if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
              continue;
            // closed e.Name as range 24
            //DEBUG: s.BracketNumber: 15
            //DEBUG: s.InnerBrackets: 18
            //DEBUG: s.NameId: 21
            //DEBUG: e.Name: 24

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name/24 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 38/9 HalfReuse: </11 HalfReuse: & Divmod/14 } Tile{ AsIs: s.NameId/21 } 256/26 >/27 </28 & Divmod/29 Tile{ AsIs: s.InnerBrackets/18 } 256/30 >/31 </32 & Divmod/33 Tile{ AsIs: s.BracketNumber/15 } 256/34 Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
            refalrts::alloc_number(vm, context[26], 256UL);
            refalrts::alloc_close_call(vm, context[27]);
            refalrts::alloc_open_call(vm, context[28]);
            refalrts::alloc_name(vm, context[29], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[30], 256UL);
            refalrts::alloc_close_call(vm, context[31]);
            refalrts::alloc_open_call(vm, context[32]);
            refalrts::alloc_name(vm, context[33], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[34], 256UL);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[9], 38UL);
            refalrts::reinit_open_call(context[11]);
            refalrts::reinit_name(context[14], functions[efunc_Divmod]);
            refalrts::reinit_close_call(context[10]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[10] );
            refalrts::push_stack( vm, context[32] );
            refalrts::push_stack( vm, context[31] );
            refalrts::push_stack( vm, context[28] );
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[11] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[10];
            res = refalrts::splice_elem( res, context[34] );
            res = refalrts::splice_elem( res, context[15] );
            res = refalrts::splice_evar( res, context[30], context[33] );
            res = refalrts::splice_elem( res, context[18] );
            res = refalrts::splice_evar( res, context[26], context[29] );
            res = refalrts::splice_elem( res, context[21] );
            refalrts::splice_to_freelist_open( vm, context[14], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/9 # CmdADT/11 # AlgRight/14 s.BracketNumber/15 s.InnerBrackets/18 s.NameId/21 e.Name/24 )/10 >/1
            context[24] = context[22];
            context[25] = context[23];
            if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
              continue;
            // closed e.Name as range 24
            //DEBUG: s.BracketNumber: 15
            //DEBUG: s.InnerBrackets: 18
            //DEBUG: s.NameId: 21
            //DEBUG: e.Name: 24

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name/24 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 39/9 HalfReuse: </11 HalfReuse: & Divmod/14 } Tile{ AsIs: s.NameId/21 } 256/26 >/27 </28 & Divmod/29 Tile{ AsIs: s.InnerBrackets/18 } 256/30 >/31 </32 & Divmod/33 Tile{ AsIs: s.BracketNumber/15 } 256/34 Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
            refalrts::alloc_number(vm, context[26], 256UL);
            refalrts::alloc_close_call(vm, context[27]);
            refalrts::alloc_open_call(vm, context[28]);
            refalrts::alloc_name(vm, context[29], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[30], 256UL);
            refalrts::alloc_close_call(vm, context[31]);
            refalrts::alloc_open_call(vm, context[32]);
            refalrts::alloc_name(vm, context[33], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[34], 256UL);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[9], 39UL);
            refalrts::reinit_open_call(context[11]);
            refalrts::reinit_name(context[14], functions[efunc_Divmod]);
            refalrts::reinit_close_call(context[10]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[10] );
            refalrts::push_stack( vm, context[32] );
            refalrts::push_stack( vm, context[31] );
            refalrts::push_stack( vm, context[28] );
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[11] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[10];
            res = refalrts::splice_elem( res, context[34] );
            res = refalrts::splice_elem( res, context[15] );
            res = refalrts::splice_evar( res, context[30], context[33] );
            res = refalrts::splice_elem( res, context[18] );
            res = refalrts::splice_evar( res, context[26], context[29] );
            res = refalrts::splice_elem( res, context[21] );
            refalrts::splice_to_freelist_open( vm, context[14], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/9 # CmdADT/11 # AlgTerm/14 s.BracketNumber/15 s.InnerBrackets/18 s.NameId/21 e.Name/24 )/10 >/1
            context[24] = context[22];
            context[25] = context[23];
            if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
              continue;
            // closed e.Name as range 24
            //DEBUG: s.BracketNumber: 15
            //DEBUG: s.InnerBrackets: 18
            //DEBUG: s.NameId: 21
            //DEBUG: e.Name: 24

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name/24 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 40/9 HalfReuse: </11 HalfReuse: & Divmod/14 } Tile{ AsIs: s.NameId/21 } 256/26 >/27 </28 & Divmod/29 Tile{ AsIs: s.InnerBrackets/18 } 256/30 >/31 </32 & Divmod/33 Tile{ AsIs: s.BracketNumber/15 } 256/34 Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
            refalrts::alloc_number(vm, context[26], 256UL);
            refalrts::alloc_close_call(vm, context[27]);
            refalrts::alloc_open_call(vm, context[28]);
            refalrts::alloc_name(vm, context[29], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[30], 256UL);
            refalrts::alloc_close_call(vm, context[31]);
            refalrts::alloc_open_call(vm, context[32]);
            refalrts::alloc_name(vm, context[33], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[34], 256UL);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[9], 40UL);
            refalrts::reinit_open_call(context[11]);
            refalrts::reinit_name(context[14], functions[efunc_Divmod]);
            refalrts::reinit_close_call(context[10]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[10] );
            refalrts::push_stack( vm, context[32] );
            refalrts::push_stack( vm, context[31] );
            refalrts::push_stack( vm, context[28] );
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[11] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[10];
            res = refalrts::splice_elem( res, context[34] );
            res = refalrts::splice_elem( res, context[15] );
            res = refalrts::splice_evar( res, context[30], context[33] );
            res = refalrts::splice_elem( res, context[18] );
            res = refalrts::splice_evar( res, context[26], context[29] );
            res = refalrts::splice_elem( res, context[21] );
            refalrts::splice_to_freelist_open( vm, context[14], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/9 # CmdADT/11 s.Direction/14 s.BracketNumber/15 s.InnerBrackets/18 s.NameId/21 e.Name/24 )/10 >/1
          context[24] = context[22];
          context[25] = context[23];
          // closed e.Name as range 24
          //DEBUG: s.Direction: 14
          //DEBUG: s.BracketNumber: 15
          //DEBUG: s.InnerBrackets: 18
          //DEBUG: s.NameId: 21
          //DEBUG: e.Name: 24

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerBrackets/18 s.NameId/21 e.Name/24 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: s.NameId21 /9 HalfReuse: s.InnerBrackets18 /11 } Tile{ AsIs: s.BracketNumber/15 } </26 & NumberFromOpcode*119/27 # CmdADT/28 Tile{ AsIs: s.Direction/14 } Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[26]);
          refalrts::alloc_name(vm, context[27], functions[efunc_gen_NumberFromOpcode_D119]);
          refalrts::alloc_ident(vm, context[28], identifiers[ident_CmdADT]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
          refalrts::reinit_svar( context[9], context[21] );
          refalrts::reinit_svar( context[11], context[18] );
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[26] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[10];
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[26], context[28] );
          res = refalrts::splice_elem( res, context[15] );
          refalrts::splice_to_freelist_open( vm, context[11], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/9 # CmdADTSave/11 s.new18/14 s.new19/15 s.new20/18 s.new21/21 e.new22/22 )/10 >/1
        context[22] = context[19];
        context[23] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_CmdADTSave], context[11] ) )
          continue;
        // closed e.new22 as range 22
        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdADTSave/11 # AlgLeft/14 s.BracketNumber/15 s.InnerBrackets/18 s.NameId/21 e.Name/24 )/10 >/1
          context[24] = context[22];
          context[25] = context[23];
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          // closed e.Name as range 24
          //DEBUG: s.BracketNumber: 15
          //DEBUG: s.InnerBrackets: 18
          //DEBUG: s.NameId: 21
          //DEBUG: e.Name: 24

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name/24 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 41/9 HalfReuse: </11 HalfReuse: & Divmod/14 } Tile{ AsIs: s.NameId/21 } 256/26 >/27 </28 & Divmod/29 Tile{ AsIs: s.InnerBrackets/18 } 256/30 >/31 </32 & Divmod/33 Tile{ AsIs: s.BracketNumber/15 } 256/34 Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_open_call(vm, context[28]);
          refalrts::alloc_name(vm, context[29], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[30], 256UL);
          refalrts::alloc_close_call(vm, context[31]);
          refalrts::alloc_open_call(vm, context[32]);
          refalrts::alloc_name(vm, context[33], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[34], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 41UL);
          refalrts::reinit_open_call(context[11]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[31] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[11] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[10];
          res = refalrts::splice_elem( res, context[34] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[30], context[33] );
          res = refalrts::splice_elem( res, context[18] );
          res = refalrts::splice_evar( res, context[26], context[29] );
          res = refalrts::splice_elem( res, context[21] );
          refalrts::splice_to_freelist_open( vm, context[14], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdADTSave/11 # AlgRight/14 s.BracketNumber/15 s.InnerBrackets/18 s.NameId/21 e.Name/24 )/10 >/1
          context[24] = context[22];
          context[25] = context[23];
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          // closed e.Name as range 24
          //DEBUG: s.BracketNumber: 15
          //DEBUG: s.InnerBrackets: 18
          //DEBUG: s.NameId: 21
          //DEBUG: e.Name: 24

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name/24 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 42/9 HalfReuse: </11 HalfReuse: & Divmod/14 } Tile{ AsIs: s.NameId/21 } 256/26 >/27 </28 & Divmod/29 Tile{ AsIs: s.InnerBrackets/18 } 256/30 >/31 </32 & Divmod/33 Tile{ AsIs: s.BracketNumber/15 } 256/34 Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_open_call(vm, context[28]);
          refalrts::alloc_name(vm, context[29], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[30], 256UL);
          refalrts::alloc_close_call(vm, context[31]);
          refalrts::alloc_open_call(vm, context[32]);
          refalrts::alloc_name(vm, context[33], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[34], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 42UL);
          refalrts::reinit_open_call(context[11]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[31] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[11] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[10];
          res = refalrts::splice_elem( res, context[34] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[30], context[33] );
          res = refalrts::splice_elem( res, context[18] );
          res = refalrts::splice_evar( res, context[26], context[29] );
          res = refalrts::splice_elem( res, context[21] );
          refalrts::splice_to_freelist_open( vm, context[14], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdADTSave/11 # AlgTerm/14 s.BracketNumber/15 s.InnerBrackets/18 s.NameId/21 e.Name/24 )/10 >/1
          context[24] = context[22];
          context[25] = context[23];
          if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
            continue;
          // closed e.Name as range 24
          //DEBUG: s.BracketNumber: 15
          //DEBUG: s.InnerBrackets: 18
          //DEBUG: s.NameId: 21
          //DEBUG: e.Name: 24

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.Name/24 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 43/9 HalfReuse: </11 HalfReuse: & Divmod/14 } Tile{ AsIs: s.NameId/21 } 256/26 >/27 </28 & Divmod/29 Tile{ AsIs: s.InnerBrackets/18 } 256/30 >/31 </32 & Divmod/33 Tile{ AsIs: s.BracketNumber/15 } 256/34 Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_open_call(vm, context[28]);
          refalrts::alloc_name(vm, context[29], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[30], 256UL);
          refalrts::alloc_close_call(vm, context[31]);
          refalrts::alloc_open_call(vm, context[32]);
          refalrts::alloc_name(vm, context[33], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[34], 256UL);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 43UL);
          refalrts::reinit_open_call(context[11]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[32] );
          refalrts::push_stack( vm, context[31] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[11] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[10];
          res = refalrts::splice_elem( res, context[34] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[30], context[33] );
          res = refalrts::splice_elem( res, context[18] );
          res = refalrts::splice_evar( res, context[26], context[29] );
          res = refalrts::splice_elem( res, context[21] );
          refalrts::splice_to_freelist_open( vm, context[14], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/9 # CmdADTSave/11 s.Direction/14 s.BracketNumber/15 s.InnerBrackets/18 s.NameId/21 e.Name/24 )/10 >/1
        context[24] = context[22];
        context[25] = context[23];
        // closed e.Name as range 24
        //DEBUG: s.Direction: 14
        //DEBUG: s.BracketNumber: 15
        //DEBUG: s.InnerBrackets: 18
        //DEBUG: s.NameId: 21
        //DEBUG: e.Name: 24

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.InnerBrackets/18 s.NameId/21 e.Name/24 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 HalfReuse: s.NameId21 /9 HalfReuse: s.InnerBrackets18 /11 } Tile{ AsIs: s.BracketNumber/15 } </26 & NumberFromOpcode*119/27 # CmdADTSave/28 Tile{ AsIs: s.Direction/14 } Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[26]);
        refalrts::alloc_name(vm, context[27], functions[efunc_gen_NumberFromOpcode_D119]);
        refalrts::alloc_ident(vm, context[28], identifiers[ident_CmdADTSave]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
        refalrts::reinit_svar( context[9], context[21] );
        refalrts::reinit_svar( context[11], context[18] );
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[26] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[10];
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_evar( res, context[26], context[28] );
        res = refalrts::splice_elem( res, context[15] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/9 # CmdCallSave/11 s.new12/14 s.new13/15 s.new14/18 )/10 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdCallSave], context[11] ) )
        continue;
      if( ! refalrts::empty_seq( context[16], context[17] ) )
        continue;
      do {
        // </0 & GenCommand-RASL/4 (/9 # CmdCallSave/11 # AlgLeft/14 s.BracketNumber/15 s.InnerBrackets/18 )/10 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
          continue;
        //DEBUG: s.BracketNumber: 15
        //DEBUG: s.InnerBrackets: 18

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 44/9 HalfReuse: (/11 HalfReuse: 0/14 } )/19 0/20 </21 & Divmod/22 Tile{ AsIs: s.InnerBrackets/18 HalfReuse: 256/10 AsIs: >/1 } </23 & Divmod/24 Tile{ AsIs: s.BracketNumber/15 } 256/25 >/26 >/27 Tile{ ]] }
        refalrts::alloc_close_bracket(vm, context[19]);
        refalrts::alloc_number(vm, context[20], 0UL);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_open_call(vm, context[23]);
        refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[25], 256UL);
        refalrts::alloc_close_call(vm, context[26]);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 44UL);
        refalrts::reinit_open_bracket(context[11]);
        refalrts::reinit_number(context[14], 0UL);
        refalrts::reinit_number(context[10], 256UL);
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[21] );
        refalrts::link_brackets( context[11], context[19] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[25], context[27] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/9 # CmdCallSave/11 s.Direction/14 s.BracketNumber/15 s.InnerBrackets/18 )/10 >/1
      //DEBUG: s.Direction: 14
      //DEBUG: s.BracketNumber: 15
      //DEBUG: s.InnerBrackets: 18

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.BracketNumber/15 s.InnerBrackets/18 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1@3/4 HalfReuse: s.InnerBrackets18 /9 HalfReuse: s.BracketNumber15 /11 } </19 & NumberFromOpcode*119/20 # CmdCallSave/21 Tile{ AsIs: s.Direction/14 } Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_gen_NumberFromOpcode_D119]);
      refalrts::alloc_ident(vm, context[21], identifiers[ident_CmdCallSave]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1Z3]);
      refalrts::reinit_svar( context[9], context[18] );
      refalrts::reinit_svar( context[11], context[15] );
      refalrts::reinit_close_call(context[10]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[10];
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[19], context[21] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-RASL/4 (/9 # CmdEmpty/11 s.Direction/14 s.Num/15 )/10 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdEmpty], context[11] ) )
        continue;
      if( ! refalrts::empty_seq( context[12], context[13] ) )
        continue;
      //DEBUG: s.Direction: 14
      //DEBUG: s.Num: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Direction/14 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 45/9 HalfReuse: (/11 } 0/16 )/17 0/18 (/19 0/20 )/21 0/22 </23 & Divmod/24 Tile{ AsIs: s.Num/15 HalfReuse: 256/10 AsIs: >/1 } >/25 Tile{ ]] }
      refalrts::alloc_number(vm, context[16], 0UL);
      refalrts::alloc_close_bracket(vm, context[17]);
      refalrts::alloc_number(vm, context[18], 0UL);
      refalrts::alloc_open_bracket(vm, context[19]);
      refalrts::alloc_number(vm, context[20], 0UL);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::alloc_number(vm, context[22], 0UL);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 45UL);
      refalrts::reinit_open_bracket(context[11]);
      refalrts::reinit_number(context[10], 256UL);
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[19], context[21] );
      refalrts::link_brackets( context[11], context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[15], context[1] );
      res = refalrts::splice_evar( res, context[16], context[24] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-RASL/4 (/9 # CmdVar/11 # AlgLeft/14 s.BracketNumber/15 's'/18 s.VarNumber/19 )/10 >/1
    context[16] = context[12];
    context[17] = context[13];
    if( ! refalrts::ident_term( identifiers[ident_CmdVar], context[11] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
      continue;
    context[18] = refalrts::char_left( 's', context[16], context[17] );
    if( ! context[18] )
      continue;
    if( ! refalrts::svar_left( context[19], context[16], context[17] ) )
      continue;
    if( ! refalrts::empty_seq( context[16], context[17] ) )
      continue;
    //DEBUG: s.BracketNumber: 15
    //DEBUG: s.VarNumber: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 47/9 HalfReuse: (/11 HalfReuse: 0/14 } )/20 0/21 </22 Tile{ HalfReuse: & Divmod/18 AsIs: s.VarNumber/19 HalfReuse: 256/10 AsIs: >/1 } </23 & Divmod/24 Tile{ AsIs: s.BracketNumber/15 } 256/25 >/26 >/27 Tile{ ]] }
    refalrts::alloc_close_bracket(vm, context[20]);
    refalrts::alloc_number(vm, context[21], 0UL);
    refalrts::alloc_open_call(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[25], 256UL);
    refalrts::alloc_close_call(vm, context[26]);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::reinit_number(context[9], 47UL);
    refalrts::reinit_open_bracket(context[11]);
    refalrts::reinit_number(context[14], 0UL);
    refalrts::reinit_name(context[18], functions[efunc_Divmod]);
    refalrts::reinit_number(context[10], 256UL);
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[22] );
    refalrts::link_brackets( context[11], context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[25], context[27] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_evar( res, context[18], context[1] );
    res = refalrts::splice_evar( res, context[20], context[22] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-RASL/4 (/9 s.new1/11 e.new2/7 )/10 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[11], context[7], context[8] ) )
      continue;
    // closed e.new2 as range 7
    do {
      // </0 & GenCommand-RASL/4 (/9 s.new3/11 e.new4/12 s.new5/15 s.new6/14 )/10 >/1
      context[12] = context[7];
      context[13] = context[8];
      if( ! refalrts::svar_right( context[14], context[12], context[13] ) )
        continue;
      if( ! refalrts::svar_right( context[15], context[12], context[13] ) )
        continue;
      // closed e.new4 as range 12
      do {
        // </0 & GenCommand-RASL/4 (/9 s.new7/11 e.new10/16 s.new11/19 s.new12/18 s.new9/15 s.new8/14 )/10 >/1
        context[16] = context[12];
        context[17] = context[13];
        if( ! refalrts::svar_right( context[18], context[16], context[17] ) )
          continue;
        if( ! refalrts::svar_right( context[19], context[16], context[17] ) )
          continue;
        // closed e.new10 as range 16
        do {
          // </0 & GenCommand-RASL/4 (/9 s.new13/11 s.new17/19 s.new16/18 s.new15/15 s.new14/14 )/10 >/1
          if( ! refalrts::empty_seq( context[16], context[17] ) )
            continue;
          do {
            // </0 & GenCommand-RASL/4 (/9 # CmdVar/11 s.new21/19 s.new20/18 s.new19/15 s.new18/14 )/10 >/1
            if( ! refalrts::ident_term( identifiers[ident_CmdVar], context[11] ) )
              continue;
            do {
              // </0 & GenCommand-RASL/4 (/9 # CmdVar/11 s.new24/19 s.new23/18 's'/15 s.new22/14 )/10 >/1
              if( ! refalrts::char_term( 's', context[15] ) )
                continue;
              do {
                // </0 & GenCommand-RASL/4 (/9 # CmdVar/11 # AlgRight/19 s.BracketNumber/18 's'/15 s.VarNumber/14 )/10 >/1
                if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[19] ) )
                  continue;
                //DEBUG: s.BracketNumber: 18
                //DEBUG: s.VarNumber: 14

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 48/9 HalfReuse: (/11 HalfReuse: 0/19 } )/20 0/21 </22 Tile{ HalfReuse: & Divmod/15 AsIs: s.VarNumber/14 HalfReuse: 256/10 AsIs: >/1 } </23 & Divmod/24 Tile{ AsIs: s.BracketNumber/18 } 256/25 >/26 >/27 Tile{ ]] }
                refalrts::alloc_close_bracket(vm, context[20]);
                refalrts::alloc_number(vm, context[21], 0UL);
                refalrts::alloc_open_call(vm, context[22]);
                refalrts::alloc_open_call(vm, context[23]);
                refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
                refalrts::alloc_number(vm, context[25], 256UL);
                refalrts::alloc_close_call(vm, context[26]);
                refalrts::alloc_close_call(vm, context[27]);
                refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
                refalrts::reinit_number(context[9], 48UL);
                refalrts::reinit_open_bracket(context[11]);
                refalrts::reinit_number(context[19], 0UL);
                refalrts::reinit_name(context[15], functions[efunc_Divmod]);
                refalrts::reinit_number(context[10], 256UL);
                refalrts::push_stack( vm, context[27] );
                refalrts::push_stack( vm, context[0] );
                refalrts::push_stack( vm, context[26] );
                refalrts::push_stack( vm, context[23] );
                refalrts::push_stack( vm, context[1] );
                refalrts::push_stack( vm, context[22] );
                refalrts::link_brackets( context[11], context[20] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[25], context[27] );
                res = refalrts::splice_elem( res, context[18] );
                res = refalrts::splice_evar( res, context[23], context[24] );
                res = refalrts::splice_evar( res, context[15], context[1] );
                res = refalrts::splice_evar( res, context[20], context[22] );
                refalrts::use( res );
                return refalrts::cSuccess;
              } while ( 0 );
              refalrts::stop_sentence(vm);

              // </0 & GenCommand-RASL/4 (/9 # CmdVar/11 # AlgTerm/19 s.BracketNumber/18 's'/15 s.VarNumber/14 )/10 >/1
              if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[19] ) )
                continue;
              //DEBUG: s.BracketNumber: 18
              //DEBUG: s.VarNumber: 14

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 49/9 HalfReuse: (/11 HalfReuse: 0/19 } )/20 0/21 </22 Tile{ HalfReuse: & Divmod/15 AsIs: s.VarNumber/14 HalfReuse: 256/10 AsIs: >/1 } </23 & Divmod/24 Tile{ AsIs: s.BracketNumber/18 } 256/25 >/26 >/27 Tile{ ]] }
              refalrts::alloc_close_bracket(vm, context[20]);
              refalrts::alloc_number(vm, context[21], 0UL);
              refalrts::alloc_open_call(vm, context[22]);
              refalrts::alloc_open_call(vm, context[23]);
              refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[25], 256UL);
              refalrts::alloc_close_call(vm, context[26]);
              refalrts::alloc_close_call(vm, context[27]);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[9], 49UL);
              refalrts::reinit_open_bracket(context[11]);
              refalrts::reinit_number(context[19], 0UL);
              refalrts::reinit_name(context[15], functions[efunc_Divmod]);
              refalrts::reinit_number(context[10], 256UL);
              refalrts::push_stack( vm, context[27] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[26] );
              refalrts::push_stack( vm, context[23] );
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[22] );
              refalrts::link_brackets( context[11], context[20] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[25], context[27] );
              res = refalrts::splice_elem( res, context[18] );
              res = refalrts::splice_evar( res, context[23], context[24] );
              res = refalrts::splice_evar( res, context[15], context[1] );
              res = refalrts::splice_evar( res, context[20], context[22] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & GenCommand-RASL/4 (/9 # CmdVar/11 s.new24/19 s.new23/18 't'/15 s.new22/14 )/10 >/1
              if( ! refalrts::char_term( 't', context[15] ) )
                continue;
              do {
                // </0 & GenCommand-RASL/4 (/9 # CmdVar/11 # AlgLeft/19 s.BracketNumber/18 't'/15 s.VarNumber/14 )/10 >/1
                if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[19] ) )
                  continue;
                //DEBUG: s.BracketNumber: 18
                //DEBUG: s.VarNumber: 14

                refalrts::reset_allocator(vm);
                //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
                //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 50/9 HalfReuse: (/11 HalfReuse: 0/19 } )/20 0/21 </22 Tile{ HalfReuse: & Divmod/15 AsIs: s.VarNumber/14 HalfReuse: 256/10 AsIs: >/1 } </23 & Divmod/24 Tile{ AsIs: s.BracketNumber/18 } 256/25 >/26 >/27 Tile{ ]] }
                refalrts::alloc_close_bracket(vm, context[20]);
                refalrts::alloc_number(vm, context[21], 0UL);
                refalrts::alloc_open_call(vm, context[22]);
                refalrts::alloc_open_call(vm, context[23]);
                refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
                refalrts::alloc_number(vm, context[25], 256UL);
                refalrts::alloc_close_call(vm, context[26]);
                refalrts::alloc_close_call(vm, context[27]);
                refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
                refalrts::reinit_number(context[9], 50UL);
                refalrts::reinit_open_bracket(context[11]);
                refalrts::reinit_number(context[19], 0UL);
                refalrts::reinit_name(context[15], functions[efunc_Divmod]);
                refalrts::reinit_number(context[10], 256UL);
                refalrts::push_stack( vm, context[27] );
                refalrts::push_stack( vm, context[0] );
                refalrts::push_stack( vm, context[26] );
                refalrts::push_stack( vm, context[23] );
                refalrts::push_stack( vm, context[1] );
                refalrts::push_stack( vm, context[22] );
                refalrts::link_brackets( context[11], context[20] );
                refalrts::Iter trash_prev = arg_begin->prev;
                refalrts::use(trash_prev);
                refalrts::Iter res = arg_end->next;
                res = refalrts::splice_evar( res, context[25], context[27] );
                res = refalrts::splice_elem( res, context[18] );
                res = refalrts::splice_evar( res, context[23], context[24] );
                res = refalrts::splice_evar( res, context[15], context[1] );
                res = refalrts::splice_evar( res, context[20], context[22] );
                refalrts::use( res );
                return refalrts::cSuccess;
              } while ( 0 );
              refalrts::stop_sentence(vm);

              // </0 & GenCommand-RASL/4 (/9 # CmdVar/11 # AlgRight/19 s.BracketNumber/18 't'/15 s.VarNumber/14 )/10 >/1
              if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[19] ) )
                continue;
              //DEBUG: s.BracketNumber: 18
              //DEBUG: s.VarNumber: 14

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 51/9 HalfReuse: (/11 HalfReuse: 0/19 } )/20 0/21 </22 Tile{ HalfReuse: & Divmod/15 AsIs: s.VarNumber/14 HalfReuse: 256/10 AsIs: >/1 } </23 & Divmod/24 Tile{ AsIs: s.BracketNumber/18 } 256/25 >/26 >/27 Tile{ ]] }
              refalrts::alloc_close_bracket(vm, context[20]);
              refalrts::alloc_number(vm, context[21], 0UL);
              refalrts::alloc_open_call(vm, context[22]);
              refalrts::alloc_open_call(vm, context[23]);
              refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[25], 256UL);
              refalrts::alloc_close_call(vm, context[26]);
              refalrts::alloc_close_call(vm, context[27]);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[9], 51UL);
              refalrts::reinit_open_bracket(context[11]);
              refalrts::reinit_number(context[19], 0UL);
              refalrts::reinit_name(context[15], functions[efunc_Divmod]);
              refalrts::reinit_number(context[10], 256UL);
              refalrts::push_stack( vm, context[27] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[26] );
              refalrts::push_stack( vm, context[23] );
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[22] );
              refalrts::link_brackets( context[11], context[20] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[25], context[27] );
              res = refalrts::splice_elem( res, context[18] );
              res = refalrts::splice_evar( res, context[23], context[24] );
              res = refalrts::splice_evar( res, context[15], context[1] );
              res = refalrts::splice_evar( res, context[20], context[22] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & GenCommand-RASL/4 (/9 # CmdVar/11 s.Direction/19 s.BracketNumber/18 s.Mode/15 s.VarNumber/14 )/10 >/1
            //DEBUG: s.Direction: 19
            //DEBUG: s.BracketNumber: 18
            //DEBUG: s.Mode: 15
            //DEBUG: s.VarNumber: 14

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Mode/15 {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } </20 & PutCommand$3=1@3/21 Tile{ AsIs: s.VarNumber/14 } Tile{ AsIs: s.BracketNumber/18 } Tile{ AsIs: </0 Reuse: & NumberFromOpcode*119/4 HalfReuse: s.Mode15 /9 AsIs: # CmdVar/11 AsIs: s.Direction/19 } Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[20]);
            refalrts::alloc_name(vm, context[21], functions[efunc_gen_PutCommand_S3A1Z3]);
            refalrts::update_name(context[4], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::reinit_svar( context[9], context[15] );
            refalrts::reinit_close_call(context[10]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[20] );
            refalrts::push_stack( vm, context[10] );
            refalrts::push_stack( vm, context[0] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[10];
            res = refalrts::splice_evar( res, context[0], context[19] );
            res = refalrts::splice_elem( res, context[18] );
            res = refalrts::splice_elem( res, context[14] );
            res = refalrts::splice_evar( res, context[20], context[21] );
            refalrts::splice_to_freelist_open( vm, trash_prev, res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/9 # CmdVarSave/11 s.new21/19 s.new20/18 s.new19/15 s.new18/14 )/10 >/1
          if( ! refalrts::ident_term( identifiers[ident_CmdVarSave], context[11] ) )
            continue;
          do {
            // </0 & GenCommand-RASL/4 (/9 # CmdVarSave/11 s.new24/19 s.new23/18 't'/15 s.new22/14 )/10 >/1
            if( ! refalrts::char_term( 't', context[15] ) )
              continue;
            do {
              // </0 & GenCommand-RASL/4 (/9 # CmdVarSave/11 # AlgLeft/19 s.BracketNumber/18 't'/15 s.VarNumber/14 )/10 >/1
              if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[19] ) )
                continue;
              //DEBUG: s.BracketNumber: 18
              //DEBUG: s.VarNumber: 14

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 52/9 HalfReuse: (/11 HalfReuse: 0/19 } )/20 0/21 </22 Tile{ HalfReuse: & Divmod/15 AsIs: s.VarNumber/14 HalfReuse: 256/10 AsIs: >/1 } </23 & Divmod/24 Tile{ AsIs: s.BracketNumber/18 } 256/25 >/26 >/27 Tile{ ]] }
              refalrts::alloc_close_bracket(vm, context[20]);
              refalrts::alloc_number(vm, context[21], 0UL);
              refalrts::alloc_open_call(vm, context[22]);
              refalrts::alloc_open_call(vm, context[23]);
              refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[25], 256UL);
              refalrts::alloc_close_call(vm, context[26]);
              refalrts::alloc_close_call(vm, context[27]);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[9], 52UL);
              refalrts::reinit_open_bracket(context[11]);
              refalrts::reinit_number(context[19], 0UL);
              refalrts::reinit_name(context[15], functions[efunc_Divmod]);
              refalrts::reinit_number(context[10], 256UL);
              refalrts::push_stack( vm, context[27] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[26] );
              refalrts::push_stack( vm, context[23] );
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[22] );
              refalrts::link_brackets( context[11], context[20] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[25], context[27] );
              res = refalrts::splice_elem( res, context[18] );
              res = refalrts::splice_evar( res, context[23], context[24] );
              res = refalrts::splice_evar( res, context[15], context[1] );
              res = refalrts::splice_evar( res, context[20], context[22] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & GenCommand-RASL/4 (/9 # CmdVarSave/11 # AlgRight/19 s.BracketNumber/18 't'/15 s.VarNumber/14 )/10 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[19] ) )
              continue;
            //DEBUG: s.BracketNumber: 18
            //DEBUG: s.VarNumber: 14

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 53/9 HalfReuse: (/11 HalfReuse: 0/19 } )/20 0/21 </22 Tile{ HalfReuse: & Divmod/15 AsIs: s.VarNumber/14 HalfReuse: 256/10 AsIs: >/1 } </23 & Divmod/24 Tile{ AsIs: s.BracketNumber/18 } 256/25 >/26 >/27 Tile{ ]] }
            refalrts::alloc_close_bracket(vm, context[20]);
            refalrts::alloc_number(vm, context[21], 0UL);
            refalrts::alloc_open_call(vm, context[22]);
            refalrts::alloc_open_call(vm, context[23]);
            refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[25], 256UL);
            refalrts::alloc_close_call(vm, context[26]);
            refalrts::alloc_close_call(vm, context[27]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[9], 53UL);
            refalrts::reinit_open_bracket(context[11]);
            refalrts::reinit_number(context[19], 0UL);
            refalrts::reinit_name(context[15], functions[efunc_Divmod]);
            refalrts::reinit_number(context[10], 256UL);
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[26] );
            refalrts::push_stack( vm, context[23] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[22] );
            refalrts::link_brackets( context[11], context[20] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[25], context[27] );
            res = refalrts::splice_elem( res, context[18] );
            res = refalrts::splice_evar( res, context[23], context[24] );
            res = refalrts::splice_evar( res, context[15], context[1] );
            res = refalrts::splice_evar( res, context[20], context[22] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/9 # CmdVarSave/11 s.Direction/19 s.BracketNumber/18 s.Mode/15 s.VarNumber/14 )/10 >/1
          //DEBUG: s.Direction: 19
          //DEBUG: s.BracketNumber: 18
          //DEBUG: s.Mode: 15
          //DEBUG: s.VarNumber: 14

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Mode/15 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </20 & PutCommand$3=1@3/21 Tile{ AsIs: s.VarNumber/14 } Tile{ AsIs: s.BracketNumber/18 } Tile{ AsIs: </0 Reuse: & NumberFromOpcode*119/4 HalfReuse: s.Mode15 /9 AsIs: # CmdVarSave/11 AsIs: s.Direction/19 } Tile{ HalfReuse: >/10 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_gen_PutCommand_S3A1Z3]);
          refalrts::update_name(context[4], functions[efunc_gen_NumberFromOpcode_D119]);
          refalrts::reinit_svar( context[9], context[15] );
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[10];
          res = refalrts::splice_evar( res, context[0], context[19] );
          res = refalrts::splice_elem( res, context[18] );
          res = refalrts::splice_elem( res, context[14] );
          res = refalrts::splice_evar( res, context[20], context[21] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdRepeated/11 s.new17/22 s.new16/19 s.new15/18 s.new14/15 s.new13/14 )/10 >/1
          context[20] = context[16];
          context[21] = context[17];
          if( ! refalrts::ident_term( identifiers[ident_CmdRepeated], context[11] ) )
            continue;
          if( ! refalrts::svar_left( context[22], context[20], context[21] ) )
            continue;
          if( ! refalrts::empty_seq( context[20], context[21] ) )
            continue;
          do {
            // </0 & GenCommand-RASL/4 (/9 # CmdRepeated/11 s.new21/22 s.new20/19 'e'/18 s.new19/15 s.new18/14 )/10 >/1
            if( ! refalrts::char_term( 'e', context[18] ) )
              continue;
            do {
              // </0 & GenCommand-RASL/4 (/9 # CmdRepeated/11 # AlgLeft/22 s.BracketNumber/19 'e'/18 s.VarNumber/15 s.SampleNumber/14 )/10 >/1
              if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[22] ) )
                continue;
              //DEBUG: s.BracketNumber: 19
              //DEBUG: s.VarNumber: 15
              //DEBUG: s.SampleNumber: 14

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 54/9 HalfReuse: </11 HalfReuse: & Divmod/22 } Tile{ AsIs: s.VarNumber/15 } 256/23 >/24 </25 & Divmod/26 Tile{ AsIs: s.SampleNumber/14 HalfReuse: 256/10 AsIs: >/1 } </27 & Divmod/28 Tile{ AsIs: s.BracketNumber/19 HalfReuse: 256/18 } >/29 >/30 Tile{ ]] }
              refalrts::alloc_number(vm, context[23], 256UL);
              refalrts::alloc_close_call(vm, context[24]);
              refalrts::alloc_open_call(vm, context[25]);
              refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
              refalrts::alloc_open_call(vm, context[27]);
              refalrts::alloc_name(vm, context[28], functions[efunc_Divmod]);
              refalrts::alloc_close_call(vm, context[29]);
              refalrts::alloc_close_call(vm, context[30]);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[9], 54UL);
              refalrts::reinit_open_call(context[11]);
              refalrts::reinit_name(context[22], functions[efunc_Divmod]);
              refalrts::reinit_number(context[10], 256UL);
              refalrts::reinit_number(context[18], 256UL);
              refalrts::push_stack( vm, context[30] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[27] );
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[25] );
              refalrts::push_stack( vm, context[24] );
              refalrts::push_stack( vm, context[11] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[29], context[30] );
              res = refalrts::splice_evar( res, context[19], context[18] );
              res = refalrts::splice_evar( res, context[27], context[28] );
              res = refalrts::splice_evar( res, context[14], context[1] );
              res = refalrts::splice_evar( res, context[23], context[26] );
              res = refalrts::splice_elem( res, context[15] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & GenCommand-RASL/4 (/9 # CmdRepeated/11 # AlgRight/22 s.BracketNumber/19 'e'/18 s.VarNumber/15 s.SampleNumber/14 )/10 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[22] ) )
              continue;
            //DEBUG: s.BracketNumber: 19
            //DEBUG: s.VarNumber: 15
            //DEBUG: s.SampleNumber: 14

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 55/9 HalfReuse: </11 HalfReuse: & Divmod/22 } Tile{ AsIs: s.VarNumber/15 } 256/23 >/24 </25 & Divmod/26 Tile{ AsIs: s.SampleNumber/14 HalfReuse: 256/10 AsIs: >/1 } </27 & Divmod/28 Tile{ AsIs: s.BracketNumber/19 HalfReuse: 256/18 } >/29 >/30 Tile{ ]] }
            refalrts::alloc_number(vm, context[23], 256UL);
            refalrts::alloc_close_call(vm, context[24]);
            refalrts::alloc_open_call(vm, context[25]);
            refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
            refalrts::alloc_open_call(vm, context[27]);
            refalrts::alloc_name(vm, context[28], functions[efunc_Divmod]);
            refalrts::alloc_close_call(vm, context[29]);
            refalrts::alloc_close_call(vm, context[30]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[9], 55UL);
            refalrts::reinit_open_call(context[11]);
            refalrts::reinit_name(context[22], functions[efunc_Divmod]);
            refalrts::reinit_number(context[10], 256UL);
            refalrts::reinit_number(context[18], 256UL);
            refalrts::push_stack( vm, context[30] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[29] );
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[25] );
            refalrts::push_stack( vm, context[24] );
            refalrts::push_stack( vm, context[11] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[29], context[30] );
            res = refalrts::splice_evar( res, context[19], context[18] );
            res = refalrts::splice_evar( res, context[27], context[28] );
            res = refalrts::splice_evar( res, context[14], context[1] );
            res = refalrts::splice_evar( res, context[23], context[26] );
            res = refalrts::splice_elem( res, context[15] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/9 # CmdRepeated/11 s.new21/22 s.new20/19 's'/18 s.new19/15 s.new18/14 )/10 >/1
            if( ! refalrts::char_term( 's', context[18] ) )
              continue;
            do {
              // </0 & GenCommand-RASL/4 (/9 # CmdRepeated/11 # AlgLeft/22 s.BracketNumber/19 's'/18 s.VarNumber/15 s.SampleNumber/14 )/10 >/1
              if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[22] ) )
                continue;
              //DEBUG: s.BracketNumber: 19
              //DEBUG: s.VarNumber: 15
              //DEBUG: s.SampleNumber: 14

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 56/9 HalfReuse: </11 HalfReuse: & Divmod/22 } Tile{ AsIs: s.VarNumber/15 } 256/23 >/24 </25 & Divmod/26 Tile{ AsIs: s.SampleNumber/14 HalfReuse: 256/10 AsIs: >/1 } </27 & Divmod/28 Tile{ AsIs: s.BracketNumber/19 HalfReuse: 256/18 } >/29 >/30 Tile{ ]] }
              refalrts::alloc_number(vm, context[23], 256UL);
              refalrts::alloc_close_call(vm, context[24]);
              refalrts::alloc_open_call(vm, context[25]);
              refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
              refalrts::alloc_open_call(vm, context[27]);
              refalrts::alloc_name(vm, context[28], functions[efunc_Divmod]);
              refalrts::alloc_close_call(vm, context[29]);
              refalrts::alloc_close_call(vm, context[30]);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[9], 56UL);
              refalrts::reinit_open_call(context[11]);
              refalrts::reinit_name(context[22], functions[efunc_Divmod]);
              refalrts::reinit_number(context[10], 256UL);
              refalrts::reinit_number(context[18], 256UL);
              refalrts::push_stack( vm, context[30] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[27] );
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[25] );
              refalrts::push_stack( vm, context[24] );
              refalrts::push_stack( vm, context[11] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[29], context[30] );
              res = refalrts::splice_evar( res, context[19], context[18] );
              res = refalrts::splice_evar( res, context[27], context[28] );
              res = refalrts::splice_evar( res, context[14], context[1] );
              res = refalrts::splice_evar( res, context[23], context[26] );
              res = refalrts::splice_elem( res, context[15] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & GenCommand-RASL/4 (/9 # CmdRepeated/11 # AlgRight/22 s.BracketNumber/19 's'/18 s.VarNumber/15 s.SampleNumber/14 )/10 >/1
              if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[22] ) )
                continue;
              //DEBUG: s.BracketNumber: 19
              //DEBUG: s.VarNumber: 15
              //DEBUG: s.SampleNumber: 14

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 57/9 HalfReuse: </11 HalfReuse: & Divmod/22 } Tile{ AsIs: s.VarNumber/15 } 256/23 >/24 </25 & Divmod/26 Tile{ AsIs: s.SampleNumber/14 HalfReuse: 256/10 AsIs: >/1 } </27 & Divmod/28 Tile{ AsIs: s.BracketNumber/19 HalfReuse: 256/18 } >/29 >/30 Tile{ ]] }
              refalrts::alloc_number(vm, context[23], 256UL);
              refalrts::alloc_close_call(vm, context[24]);
              refalrts::alloc_open_call(vm, context[25]);
              refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
              refalrts::alloc_open_call(vm, context[27]);
              refalrts::alloc_name(vm, context[28], functions[efunc_Divmod]);
              refalrts::alloc_close_call(vm, context[29]);
              refalrts::alloc_close_call(vm, context[30]);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[9], 57UL);
              refalrts::reinit_open_call(context[11]);
              refalrts::reinit_name(context[22], functions[efunc_Divmod]);
              refalrts::reinit_number(context[10], 256UL);
              refalrts::reinit_number(context[18], 256UL);
              refalrts::push_stack( vm, context[30] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[27] );
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[25] );
              refalrts::push_stack( vm, context[24] );
              refalrts::push_stack( vm, context[11] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[29], context[30] );
              res = refalrts::splice_evar( res, context[19], context[18] );
              res = refalrts::splice_evar( res, context[27], context[28] );
              res = refalrts::splice_evar( res, context[14], context[1] );
              res = refalrts::splice_evar( res, context[23], context[26] );
              res = refalrts::splice_elem( res, context[15] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & GenCommand-RASL/4 (/9 # CmdRepeated/11 # AlgTerm/22 s.BracketNumber/19 's'/18 s.VarNumber/15 s.SampleNumber/14 )/10 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[22] ) )
              continue;
            //DEBUG: s.BracketNumber: 19
            //DEBUG: s.VarNumber: 15
            //DEBUG: s.SampleNumber: 14

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 58/9 HalfReuse: </11 HalfReuse: & Divmod/22 } Tile{ AsIs: s.VarNumber/15 } 256/23 >/24 </25 & Divmod/26 Tile{ AsIs: s.SampleNumber/14 HalfReuse: 256/10 AsIs: >/1 } </27 & Divmod/28 Tile{ AsIs: s.BracketNumber/19 HalfReuse: 256/18 } >/29 >/30 Tile{ ]] }
            refalrts::alloc_number(vm, context[23], 256UL);
            refalrts::alloc_close_call(vm, context[24]);
            refalrts::alloc_open_call(vm, context[25]);
            refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
            refalrts::alloc_open_call(vm, context[27]);
            refalrts::alloc_name(vm, context[28], functions[efunc_Divmod]);
            refalrts::alloc_close_call(vm, context[29]);
            refalrts::alloc_close_call(vm, context[30]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[9], 58UL);
            refalrts::reinit_open_call(context[11]);
            refalrts::reinit_name(context[22], functions[efunc_Divmod]);
            refalrts::reinit_number(context[10], 256UL);
            refalrts::reinit_number(context[18], 256UL);
            refalrts::push_stack( vm, context[30] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[29] );
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[25] );
            refalrts::push_stack( vm, context[24] );
            refalrts::push_stack( vm, context[11] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[29], context[30] );
            res = refalrts::splice_evar( res, context[19], context[18] );
            res = refalrts::splice_evar( res, context[27], context[28] );
            res = refalrts::splice_evar( res, context[14], context[1] );
            res = refalrts::splice_evar( res, context[23], context[26] );
            res = refalrts::splice_elem( res, context[15] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/9 # CmdRepeated/11 s.new21/22 s.new20/19 't'/18 s.new19/15 s.new18/14 )/10 >/1
            if( ! refalrts::char_term( 't', context[18] ) )
              continue;
            do {
              // </0 & GenCommand-RASL/4 (/9 # CmdRepeated/11 # AlgLeft/22 s.BracketNumber/19 't'/18 s.VarNumber/15 s.SampleNumber/14 )/10 >/1
              if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[22] ) )
                continue;
              //DEBUG: s.BracketNumber: 19
              //DEBUG: s.VarNumber: 15
              //DEBUG: s.SampleNumber: 14

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 59/9 HalfReuse: </11 HalfReuse: & Divmod/22 } Tile{ AsIs: s.VarNumber/15 } 256/23 >/24 </25 & Divmod/26 Tile{ AsIs: s.SampleNumber/14 HalfReuse: 256/10 AsIs: >/1 } </27 & Divmod/28 Tile{ AsIs: s.BracketNumber/19 HalfReuse: 256/18 } >/29 >/30 Tile{ ]] }
              refalrts::alloc_number(vm, context[23], 256UL);
              refalrts::alloc_close_call(vm, context[24]);
              refalrts::alloc_open_call(vm, context[25]);
              refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
              refalrts::alloc_open_call(vm, context[27]);
              refalrts::alloc_name(vm, context[28], functions[efunc_Divmod]);
              refalrts::alloc_close_call(vm, context[29]);
              refalrts::alloc_close_call(vm, context[30]);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[9], 59UL);
              refalrts::reinit_open_call(context[11]);
              refalrts::reinit_name(context[22], functions[efunc_Divmod]);
              refalrts::reinit_number(context[10], 256UL);
              refalrts::reinit_number(context[18], 256UL);
              refalrts::push_stack( vm, context[30] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[27] );
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[25] );
              refalrts::push_stack( vm, context[24] );
              refalrts::push_stack( vm, context[11] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[29], context[30] );
              res = refalrts::splice_evar( res, context[19], context[18] );
              res = refalrts::splice_evar( res, context[27], context[28] );
              res = refalrts::splice_evar( res, context[14], context[1] );
              res = refalrts::splice_evar( res, context[23], context[26] );
              res = refalrts::splice_elem( res, context[15] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & GenCommand-RASL/4 (/9 # CmdRepeated/11 # AlgRight/22 s.BracketNumber/19 't'/18 s.VarNumber/15 s.SampleNumber/14 )/10 >/1
              if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[22] ) )
                continue;
              //DEBUG: s.BracketNumber: 19
              //DEBUG: s.VarNumber: 15
              //DEBUG: s.SampleNumber: 14

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 60/9 HalfReuse: </11 HalfReuse: & Divmod/22 } Tile{ AsIs: s.VarNumber/15 } 256/23 >/24 </25 & Divmod/26 Tile{ AsIs: s.SampleNumber/14 HalfReuse: 256/10 AsIs: >/1 } </27 & Divmod/28 Tile{ AsIs: s.BracketNumber/19 HalfReuse: 256/18 } >/29 >/30 Tile{ ]] }
              refalrts::alloc_number(vm, context[23], 256UL);
              refalrts::alloc_close_call(vm, context[24]);
              refalrts::alloc_open_call(vm, context[25]);
              refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
              refalrts::alloc_open_call(vm, context[27]);
              refalrts::alloc_name(vm, context[28], functions[efunc_Divmod]);
              refalrts::alloc_close_call(vm, context[29]);
              refalrts::alloc_close_call(vm, context[30]);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[9], 60UL);
              refalrts::reinit_open_call(context[11]);
              refalrts::reinit_name(context[22], functions[efunc_Divmod]);
              refalrts::reinit_number(context[10], 256UL);
              refalrts::reinit_number(context[18], 256UL);
              refalrts::push_stack( vm, context[30] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[27] );
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[25] );
              refalrts::push_stack( vm, context[24] );
              refalrts::push_stack( vm, context[11] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[29], context[30] );
              res = refalrts::splice_evar( res, context[19], context[18] );
              res = refalrts::splice_evar( res, context[27], context[28] );
              res = refalrts::splice_evar( res, context[14], context[1] );
              res = refalrts::splice_evar( res, context[23], context[26] );
              res = refalrts::splice_elem( res, context[15] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & GenCommand-RASL/4 (/9 # CmdRepeated/11 # AlgTerm/22 s.BracketNumber/19 't'/18 s.VarNumber/15 s.SampleNumber/14 )/10 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[22] ) )
              continue;
            //DEBUG: s.BracketNumber: 19
            //DEBUG: s.VarNumber: 15
            //DEBUG: s.SampleNumber: 14

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 61/9 HalfReuse: </11 HalfReuse: & Divmod/22 } Tile{ AsIs: s.VarNumber/15 } 256/23 >/24 </25 & Divmod/26 Tile{ AsIs: s.SampleNumber/14 HalfReuse: 256/10 AsIs: >/1 } </27 & Divmod/28 Tile{ AsIs: s.BracketNumber/19 HalfReuse: 256/18 } >/29 >/30 Tile{ ]] }
            refalrts::alloc_number(vm, context[23], 256UL);
            refalrts::alloc_close_call(vm, context[24]);
            refalrts::alloc_open_call(vm, context[25]);
            refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
            refalrts::alloc_open_call(vm, context[27]);
            refalrts::alloc_name(vm, context[28], functions[efunc_Divmod]);
            refalrts::alloc_close_call(vm, context[29]);
            refalrts::alloc_close_call(vm, context[30]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[9], 61UL);
            refalrts::reinit_open_call(context[11]);
            refalrts::reinit_name(context[22], functions[efunc_Divmod]);
            refalrts::reinit_number(context[10], 256UL);
            refalrts::reinit_number(context[18], 256UL);
            refalrts::push_stack( vm, context[30] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[29] );
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[25] );
            refalrts::push_stack( vm, context[24] );
            refalrts::push_stack( vm, context[11] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[29], context[30] );
            res = refalrts::splice_evar( res, context[19], context[18] );
            res = refalrts::splice_evar( res, context[27], context[28] );
            res = refalrts::splice_evar( res, context[14], context[1] );
            res = refalrts::splice_evar( res, context[23], context[26] );
            res = refalrts::splice_elem( res, context[15] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/9 # CmdRepeated/11 s.Direction/22 s.BracketNumber/19 s.Mode/18 s.VarNumber/15 s.SampleNumber/14 )/10 >/1
          //DEBUG: s.Direction: 22
          //DEBUG: s.BracketNumber: 19
          //DEBUG: s.Mode: 18
          //DEBUG: s.VarNumber: 15
          //DEBUG: s.SampleNumber: 14

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.BracketNumber/19 s.Mode/18 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </23 & PutCommand$3=1/24 Tile{ AsIs: s.VarNumber/15 AsIs: s.SampleNumber/14 HalfReuse: s.BracketNumber19 /10 } Tile{ AsIs: </0 Reuse: & NumberFromOpcode*119/4 HalfReuse: s.Mode18 /9 AsIs: # CmdRepeated/11 AsIs: s.Direction/22 } >/25 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[23]);
          refalrts::alloc_name(vm, context[24], functions[efunc_gen_PutCommand_S3A1]);
          refalrts::alloc_close_call(vm, context[25]);
          refalrts::reinit_svar( context[10], context[19] );
          refalrts::update_name(context[4], functions[efunc_gen_NumberFromOpcode_D119]);
          refalrts::reinit_svar( context[9], context[18] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[25] );
          refalrts::push_stack( vm, context[0] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_elem( res, context[25] );
          res = refalrts::splice_evar( res, context[0], context[22] );
          res = refalrts::splice_evar( res, context[15], context[10] );
          res = refalrts::splice_evar( res, context[23], context[24] );
          refalrts::splice_to_freelist_open( vm, trash_prev, res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/9 # CmdRepeatedTVarSave/11 s.new16/19 s.new15/18 s.new14/15 s.new13/14 )/10 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdRepeatedTVarSave], context[11] ) )
          continue;
        if( ! refalrts::empty_seq( context[16], context[17] ) )
          continue;
        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdRepeatedTVarSave/11 # AlgLeft/19 s.BracketNumber/18 s.VarNumber/15 s.SampleNumber/14 )/10 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[19] ) )
            continue;
          //DEBUG: s.BracketNumber: 18
          //DEBUG: s.VarNumber: 15
          //DEBUG: s.SampleNumber: 14

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 62/9 HalfReuse: </11 HalfReuse: & Divmod/19 } Tile{ AsIs: s.VarNumber/15 } 256/20 >/21 </22 & Divmod/23 Tile{ AsIs: s.SampleNumber/14 HalfReuse: 256/10 AsIs: >/1 } </24 & Divmod/25 Tile{ AsIs: s.BracketNumber/18 } 256/26 >/27 >/28 Tile{ ]] }
          refalrts::alloc_number(vm, context[20], 256UL);
          refalrts::alloc_close_call(vm, context[21]);
          refalrts::alloc_open_call(vm, context[22]);
          refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_close_call(vm, context[28]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 62UL);
          refalrts::reinit_open_call(context[11]);
          refalrts::reinit_name(context[19], functions[efunc_Divmod]);
          refalrts::reinit_number(context[10], 256UL);
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[21] );
          refalrts::push_stack( vm, context[11] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[28] );
          res = refalrts::splice_elem( res, context[18] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[14], context[1] );
          res = refalrts::splice_evar( res, context[20], context[23] );
          res = refalrts::splice_elem( res, context[15] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdRepeatedTVarSave/11 # AlgRight/19 s.BracketNumber/18 s.VarNumber/15 s.SampleNumber/14 )/10 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[19] ) )
            continue;
          //DEBUG: s.BracketNumber: 18
          //DEBUG: s.VarNumber: 15
          //DEBUG: s.SampleNumber: 14

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 63/9 HalfReuse: </11 HalfReuse: & Divmod/19 } Tile{ AsIs: s.VarNumber/15 } 256/20 >/21 </22 & Divmod/23 Tile{ AsIs: s.SampleNumber/14 HalfReuse: 256/10 AsIs: >/1 } </24 & Divmod/25 Tile{ AsIs: s.BracketNumber/18 } 256/26 >/27 >/28 Tile{ ]] }
          refalrts::alloc_number(vm, context[20], 256UL);
          refalrts::alloc_close_call(vm, context[21]);
          refalrts::alloc_open_call(vm, context[22]);
          refalrts::alloc_name(vm, context[23], functions[efunc_Divmod]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::alloc_close_call(vm, context[28]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 63UL);
          refalrts::reinit_open_call(context[11]);
          refalrts::reinit_name(context[19], functions[efunc_Divmod]);
          refalrts::reinit_number(context[10], 256UL);
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[21] );
          refalrts::push_stack( vm, context[11] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_evar( res, context[26], context[28] );
          res = refalrts::splice_elem( res, context[18] );
          res = refalrts::splice_evar( res, context[24], context[25] );
          res = refalrts::splice_evar( res, context[14], context[1] );
          res = refalrts::splice_evar( res, context[20], context[23] );
          res = refalrts::splice_elem( res, context[15] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/9 # CmdRepeatedTVarSave/11 s.Direction/19 s.BracketNumber/18 s.VarNumber/15 s.SampleNumber/14 )/10 >/1
        //DEBUG: s.Direction: 19
        //DEBUG: s.BracketNumber: 18
        //DEBUG: s.VarNumber: 15
        //DEBUG: s.SampleNumber: 14

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.BracketNumber/18 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </20 & PutCommand$3=1/21 Tile{ AsIs: s.VarNumber/15 AsIs: s.SampleNumber/14 HalfReuse: s.BracketNumber18 /10 } Tile{ AsIs: </0 Reuse: & NumberFromOpcode*119/4 HalfReuse: 't'/9 Reuse: # CmdRepeatedSave/11 AsIs: s.Direction/19 } >/22 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_gen_PutCommand_S3A1]);
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::reinit_svar( context[10], context[18] );
        refalrts::update_name(context[4], functions[efunc_gen_NumberFromOpcode_D119]);
        refalrts::reinit_char(context[9], 't');
        refalrts::update_ident(context[11], identifiers[ident_CmdRepeatedSave]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[0] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[22] );
        res = refalrts::splice_evar( res, context[0], context[19] );
        res = refalrts::splice_evar( res, context[15], context[10] );
        res = refalrts::splice_evar( res, context[20], context[21] );
        refalrts::splice_to_freelist_open( vm, trash_prev, res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/9 s.new7/11 s.new9/15 s.new8/14 )/10 >/1
      if( ! refalrts::empty_seq( context[12], context[13] ) )
        continue;
      do {
        // </0 & GenCommand-RASL/4 (/9 # CmdEPrepare/11 s.BracketNumber/15 s.VarNumber/14 )/10 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdEPrepare], context[11] ) )
          continue;
        //DEBUG: s.BracketNumber: 15
        //DEBUG: s.VarNumber: 14

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 64/9 HalfReuse: (/11 } 0/16 )/17 0/18 </19 & Divmod/20 Tile{ AsIs: s.VarNumber/14 HalfReuse: 256/10 AsIs: >/1 } </21 & Divmod/22 Tile{ AsIs: s.BracketNumber/15 } 256/23 >/24 >/25 Tile{ ]] }
        refalrts::alloc_number(vm, context[16], 0UL);
        refalrts::alloc_close_bracket(vm, context[17]);
        refalrts::alloc_number(vm, context[18], 0UL);
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_Divmod]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 64UL);
        refalrts::reinit_open_bracket(context[11]);
        refalrts::reinit_number(context[10], 256UL);
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[19] );
        refalrts::link_brackets( context[11], context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[23], context[25] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[14], context[1] );
        res = refalrts::splice_evar( res, context[16], context[20] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/9 # CmdEStart/11 s.BracketNumber/15 s.VarNumber/14 )/10 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdEStart], context[11] ) )
          continue;
        //DEBUG: s.BracketNumber: 15
        //DEBUG: s.VarNumber: 14

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 65/9 HalfReuse: (/11 } 0/16 )/17 0/18 </19 & Divmod/20 Tile{ AsIs: s.VarNumber/14 HalfReuse: 256/10 AsIs: >/1 } </21 & Divmod/22 Tile{ AsIs: s.BracketNumber/15 } 256/23 >/24 >/25 Tile{ ]] }
        refalrts::alloc_number(vm, context[16], 0UL);
        refalrts::alloc_close_bracket(vm, context[17]);
        refalrts::alloc_number(vm, context[18], 0UL);
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_Divmod]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 65UL);
        refalrts::reinit_open_bracket(context[11]);
        refalrts::reinit_number(context[10], 256UL);
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[19] );
        refalrts::link_brackets( context[11], context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[23], context[25] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[14], context[1] );
        res = refalrts::splice_evar( res, context[16], context[20] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/9 # CmdSave/11 s.OldBracketNumber/15 s.NewBracketNumber/14 )/10 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSave], context[11] ) )
          continue;
        //DEBUG: s.OldBracketNumber: 15
        //DEBUG: s.NewBracketNumber: 14

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 66/9 HalfReuse: (/11 } 0/16 )/17 0/18 </19 & Divmod/20 Tile{ AsIs: s.NewBracketNumber/14 HalfReuse: 256/10 AsIs: >/1 } </21 & Divmod/22 Tile{ AsIs: s.OldBracketNumber/15 } 256/23 >/24 >/25 Tile{ ]] }
        refalrts::alloc_number(vm, context[16], 0UL);
        refalrts::alloc_close_bracket(vm, context[17]);
        refalrts::alloc_number(vm, context[18], 0UL);
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_Divmod]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::alloc_close_call(vm, context[25]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 66UL);
        refalrts::reinit_open_bracket(context[11]);
        refalrts::reinit_number(context[10], 256UL);
        refalrts::push_stack( vm, context[25] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[19] );
        refalrts::link_brackets( context[11], context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[23], context[25] );
        res = refalrts::splice_elem( res, context[15] );
        res = refalrts::splice_evar( res, context[21], context[22] );
        res = refalrts::splice_evar( res, context[14], context[1] );
        res = refalrts::splice_evar( res, context[16], context[20] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/9 # CmdVariableDebugTable/11 s.StringId/15 s.Offset/14 )/10 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdVariableDebugTable], context[11] ) )
        continue;
      //DEBUG: s.StringId: 15
      //DEBUG: s.Offset: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 112/9 HalfReuse: </11 } & Divmod/16 Tile{ AsIs: s.StringId/15 } 256/17 >/18 (/19 0/20 )/21 0/22 </23 & Divmod/24 Tile{ AsIs: s.Offset/14 HalfReuse: 256/10 AsIs: >/1 } >/25 Tile{ ]] }
      refalrts::alloc_name(vm, context[16], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[17], 256UL);
      refalrts::alloc_close_call(vm, context[18]);
      refalrts::alloc_open_bracket(vm, context[19]);
      refalrts::alloc_number(vm, context[20], 0UL);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::alloc_number(vm, context[22], 0UL);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 112UL);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_number(context[10], 256UL);
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[19], context[21] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[14], context[1] );
      res = refalrts::splice_evar( res, context[17], context[24] );
      res = refalrts::splice_elem( res, context[15] );
      res = refalrts::splice_elem( res, context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-RASL/4 (/9 # CmdResetAllocator/11 )/10 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdResetAllocator], context[11] ) )
        continue;
      if( ! refalrts::empty_seq( context[7], context[8] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 67/4 HalfReuse: 0/9 HalfReuse: 0/11 HalfReuse: 0/10 HalfReuse: )/1 ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 67UL);
      refalrts::reinit_number(context[9], 0UL);
      refalrts::reinit_number(context[11], 0UL);
      refalrts::reinit_number(context[10], 0UL);
      refalrts::reinit_close_bracket(context[1]);
      refalrts::link_brackets( context[0], context[1] );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-RASL/4 (/9 s.new3/11 s.new4/14 e.new5/12 )/10 >/1
    context[12] = context[7];
    context[13] = context[8];
    if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
      continue;
    // closed e.new5 as range 12
    do {
      // </0 & GenCommand-RASL/4 (/9 # CmdSetRes/11 s.new6/14 )/10 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSetRes], context[11] ) )
        continue;
      if( ! refalrts::empty_seq( context[12], context[13] ) )
        continue;
      do {
        // </0 & GenCommand-RASL/4 (/9 # CmdSetRes/11 # ARG-BEGIN/14 )/10 >/1
        if( ! refalrts::ident_term( identifiers[ident_ARGm_BEGIN], context[14] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 68/4 HalfReuse: 0/9 HalfReuse: 0/11 HalfReuse: 0/14 AsIs: )/10 } Tile{ ]] }
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 68UL);
        refalrts::reinit_number(context[9], 0UL);
        refalrts::reinit_number(context[11], 0UL);
        refalrts::reinit_number(context[14], 0UL);
        refalrts::link_brackets( context[0], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/9 # CmdSetRes/11 # RIGHT-EDGE/14 )/10 >/1
        if( ! refalrts::ident_term( identifiers[ident_RIGHTm_EDGE], context[14] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} >/1 {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 69/4 HalfReuse: 0/9 HalfReuse: 0/11 HalfReuse: 0/14 AsIs: )/10 } Tile{ ]] }
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 69UL);
        refalrts::reinit_number(context[9], 0UL);
        refalrts::reinit_number(context[11], 0UL);
        refalrts::reinit_number(context[14], 0UL);
        refalrts::link_brackets( context[0], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/9 # CmdSetRes/11 s.Offset/14 )/10 >/1
      //DEBUG: s.Offset: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </15 & PutCommand$3:1/16 70/17 (/18 0/19 )/20 0/21 (/22 0/23 Tile{ HalfReuse: )/0 HalfReuse: 0/4 HalfReuse: </9 HalfReuse: & Divmod/11 AsIs: s.Offset/14 HalfReuse: 256/10 AsIs: >/1 } >/24 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[15]);
      refalrts::alloc_name(vm, context[16], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::alloc_number(vm, context[17], 70UL);
      refalrts::alloc_open_bracket(vm, context[18]);
      refalrts::alloc_number(vm, context[19], 0UL);
      refalrts::alloc_close_bracket(vm, context[20]);
      refalrts::alloc_number(vm, context[21], 0UL);
      refalrts::alloc_open_bracket(vm, context[22]);
      refalrts::alloc_number(vm, context[23], 0UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_close_bracket(context[0]);
      refalrts::reinit_number(context[4], 0UL);
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_name(context[11], functions[efunc_Divmod]);
      refalrts::reinit_number(context[10], 256UL);
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[9] );
      refalrts::link_brackets( context[22], context[0] );
      refalrts::link_brackets( context[18], context[20] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[0], context[1] );
      res = refalrts::splice_evar( res, context[15], context[23] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-RASL/4 (/9 s.new6/11 s.new7/14 s.new8/17 e.new9/15 )/10 >/1
    context[15] = context[12];
    context[16] = context[13];
    if( ! refalrts::svar_left( context[17], context[15], context[16] ) )
      continue;
    // closed e.new9 as range 15
    do {
      // </0 & GenCommand-RASL/4 (/9 # CmdCopyVar/11 s.new10/14 s.new11/17 s.new12/20 )/10 >/1
      context[18] = context[15];
      context[19] = context[16];
      if( ! refalrts::ident_term( identifiers[ident_CmdCopyVar], context[11] ) )
        continue;
      if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
        continue;
      if( ! refalrts::empty_seq( context[18], context[19] ) )
        continue;
      do {
        // </0 & GenCommand-RASL/4 (/9 # CmdCopyVar/11 'e'/14 s.Target/17 s.Sample/20 )/10 >/1
        if( ! refalrts::char_term( 'e', context[14] ) )
          continue;
        //DEBUG: s.Target: 17
        //DEBUG: s.Sample: 20

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 71/9 HalfReuse: </11 HalfReuse: & Divmod/14 AsIs: s.Target/17 } 256/21 >/22 </23 & Divmod/24 Tile{ AsIs: s.Sample/20 HalfReuse: 256/10 AsIs: >/1 } (/25 0/26 )/27 0/28 >/29 Tile{ ]] }
        refalrts::alloc_number(vm, context[21], 256UL);
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::alloc_open_call(vm, context[23]);
        refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
        refalrts::alloc_open_bracket(vm, context[25]);
        refalrts::alloc_number(vm, context[26], 0UL);
        refalrts::alloc_close_bracket(vm, context[27]);
        refalrts::alloc_number(vm, context[28], 0UL);
        refalrts::alloc_close_call(vm, context[29]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 71UL);
        refalrts::reinit_open_call(context[11]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_number(context[10], 256UL);
        refalrts::push_stack( vm, context[29] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[25], context[27] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[11] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[25], context[29] );
        res = refalrts::splice_evar( res, context[20], context[1] );
        res = refalrts::splice_evar( res, context[21], context[24] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/9 # CmdCopyVar/11 s.Mode/14 s.Target/17 s.Sample/20 )/10 >/1
      //DEBUG: s.Mode: 14
      //DEBUG: s.Target: 17
      //DEBUG: s.Sample: 20

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Mode/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 72/9 HalfReuse: </11 } & Divmod/21 Tile{ AsIs: s.Target/17 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Sample/20 HalfReuse: 256/10 AsIs: >/1 } (/26 0/27 )/28 0/29 >/30 Tile{ ]] }
      refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[22], 256UL);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
      refalrts::alloc_open_bracket(vm, context[26]);
      refalrts::alloc_number(vm, context[27], 0UL);
      refalrts::alloc_close_bracket(vm, context[28]);
      refalrts::alloc_number(vm, context[29], 0UL);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 72UL);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_number(context[10], 256UL);
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[26], context[28] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[26], context[30] );
      res = refalrts::splice_evar( res, context[20], context[1] );
      res = refalrts::splice_evar( res, context[22], context[25] );
      res = refalrts::splice_elem( res, context[17] );
      res = refalrts::splice_elem( res, context[21] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-RASL/4 (/9 # CmdReinitSVar/11 s.Offset/14 s.Sample/17 )/10 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdReinitSVar], context[11] ) )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      //DEBUG: s.Offset: 14
      //DEBUG: s.Sample: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 73/9 HalfReuse: (/11 } 0/18 )/19 0/20 </21 & Divmod/22 Tile{ AsIs: s.Sample/17 HalfReuse: 256/10 AsIs: >/1 } </23 & Divmod/24 Tile{ AsIs: s.Offset/14 } 256/25 >/26 >/27 Tile{ ]] }
      refalrts::alloc_number(vm, context[18], 0UL);
      refalrts::alloc_close_bracket(vm, context[19]);
      refalrts::alloc_number(vm, context[20], 0UL);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[25], 256UL);
      refalrts::alloc_close_call(vm, context[26]);
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 73UL);
      refalrts::reinit_open_bracket(context[11]);
      refalrts::reinit_number(context[10], 256UL);
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[26] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[21] );
      refalrts::link_brackets( context[11], context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[25], context[27] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[17], context[1] );
      res = refalrts::splice_evar( res, context[18], context[22] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 s.new10/14 s.new11/17 s.new12/20 e.new13/18 )/10 >/1
    context[18] = context[15];
    context[19] = context[16];
    if( ! refalrts::ident_term( identifiers[ident_CmdCreateElem], context[11] ) )
      continue;
    if( ! refalrts::svar_left( context[20], context[18], context[19] ) )
      continue;
    // closed e.new13 as range 18
    do {
      // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 s.new14/14 s.new15/17 # ElOpenBracket/20 e.new16/21 )/10 >/1
      context[21] = context[18];
      context[22] = context[19];
      if( ! refalrts::ident_term( identifiers[ident_ElOpenBracket], context[20] ) )
        continue;
      // closed e.new16 as range 21
      do {
        // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 s.new17/14 s.new18/17 # ElOpenBracket/20 )/10 >/1
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 # Allocate/14 s.ElemNumber/17 # ElOpenBracket/20 )/10 >/1
          if( ! refalrts::ident_term( identifiers[ident_Allocate], context[14] ) )
            continue;
          //DEBUG: s.ElemNumber: 17

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </23 & PutCommand$3:1/24 79/25 (/26 0/27 )/28 0/29 (/30 Tile{ HalfReuse: 0/0 HalfReuse: )/4 HalfReuse: 1/9 HalfReuse: </11 HalfReuse: & Divmod/14 AsIs: s.ElemNumber/17 HalfReuse: 256/20 HalfReuse: >/10 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[23]);
          refalrts::alloc_name(vm, context[24], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::alloc_number(vm, context[25], 79UL);
          refalrts::alloc_open_bracket(vm, context[26]);
          refalrts::alloc_number(vm, context[27], 0UL);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::alloc_number(vm, context[29], 0UL);
          refalrts::alloc_open_bracket(vm, context[30]);
          refalrts::reinit_number(context[0], 0UL);
          refalrts::reinit_close_bracket(context[4]);
          refalrts::reinit_number(context[9], 1UL);
          refalrts::reinit_open_call(context[11]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_number(context[20], 256UL);
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[11] );
          refalrts::link_brackets( context[30], context[4] );
          refalrts::link_brackets( context[26], context[28] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[0];
          res = refalrts::splice_evar( res, context[23], context[30] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 # Reinit/14 s.ElemNumber/17 # ElOpenBracket/20 )/10 >/1
          if( ! refalrts::ident_term( identifiers[ident_Reinit], context[14] ) )
            continue;
          //DEBUG: s.ElemNumber: 17

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </23 & PutCommand$3:1/24 86/25 (/26 0/27 )/28 0/29 (/30 Tile{ HalfReuse: 0/0 HalfReuse: )/4 HalfReuse: 1/9 HalfReuse: </11 HalfReuse: & Divmod/14 AsIs: s.ElemNumber/17 HalfReuse: 256/20 HalfReuse: >/10 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[23]);
          refalrts::alloc_name(vm, context[24], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::alloc_number(vm, context[25], 86UL);
          refalrts::alloc_open_bracket(vm, context[26]);
          refalrts::alloc_number(vm, context[27], 0UL);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::alloc_number(vm, context[29], 0UL);
          refalrts::alloc_open_bracket(vm, context[30]);
          refalrts::reinit_number(context[0], 0UL);
          refalrts::reinit_close_bracket(context[4]);
          refalrts::reinit_number(context[9], 1UL);
          refalrts::reinit_open_call(context[11]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_number(context[20], 256UL);
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[11] );
          refalrts::link_brackets( context[30], context[4] );
          refalrts::link_brackets( context[26], context[28] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[0];
          res = refalrts::splice_evar( res, context[23], context[30] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 s.CreateMode/14 s.ElemNumber/17 # ElOpenBracket/20 )/10 >/1
        //DEBUG: s.CreateMode: 14
        //DEBUG: s.ElemNumber: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.ElemNumber/17 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1@7/4 HalfReuse: s.ElemNumber17 /9 HalfReuse: </11 } & NumberFromOpcode*119/23 Tile{ AsIs: s.CreateMode/14 } Tile{ Reuse: # ElBracket/20 HalfReuse: >/10 AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[23], functions[efunc_gen_NumberFromOpcode_D119]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1Z7]);
        refalrts::reinit_svar( context[9], context[17] );
        refalrts::reinit_open_call(context[11]);
        refalrts::update_ident(context[20], identifiers[ident_ElBracket]);
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[11] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[20];
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 s.CreateMode/14 s.ElemNumber/17 # ElOpenBracket/20 e.Info/23 )/10 >/1
      context[23] = context[21];
      context[24] = context[22];
      // closed e.Info as range 23
      //DEBUG: s.CreateMode: 14
      //DEBUG: s.ElemNumber: 17
      //DEBUG: e.Info: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.CreateMode/14 s.ElemNumber/17 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand/4 AsIs: (/9 HalfReuse: s.CreateMode14 /11 } # ElBracket/25 )/26 0/27 </28 & CreateCommandInfo*8/29 Tile{ AsIs: # ElOpenBracket/20 AsIs: e.Info/23 HalfReuse: >/10 HalfReuse: s.ElemNumber17 /1 } >/30 Tile{ ]] }
      refalrts::alloc_ident(vm, context[25], identifiers[ident_ElBracket]);
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::alloc_number(vm, context[27], 0UL);
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_gen_CreateCommandInfo_D8]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::update_name(context[4], functions[efunc_PutCommand]);
      refalrts::reinit_svar( context[11], context[14] );
      refalrts::reinit_close_call(context[10]);
      refalrts::reinit_svar( context[1], context[17] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[9], context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[20], context[1] );
      res = refalrts::splice_evar( res, context[25], context[29] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 s.new14/14 s.new15/17 # ElOpenADT/20 e.new16/21 )/10 >/1
      context[21] = context[18];
      context[22] = context[19];
      if( ! refalrts::ident_term( identifiers[ident_ElOpenADT], context[20] ) )
        continue;
      // closed e.new16 as range 21
      do {
        // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 s.new17/14 s.new18/17 # ElOpenADT/20 )/10 >/1
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 # Allocate/14 s.ElemNumber/17 # ElOpenADT/20 )/10 >/1
          if( ! refalrts::ident_term( identifiers[ident_Allocate], context[14] ) )
            continue;
          //DEBUG: s.ElemNumber: 17

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </23 & PutCommand$3:1/24 79/25 (/26 0/27 )/28 0/29 (/30 Tile{ HalfReuse: 0/0 HalfReuse: )/4 HalfReuse: 0/9 HalfReuse: </11 HalfReuse: & Divmod/14 AsIs: s.ElemNumber/17 HalfReuse: 256/20 HalfReuse: >/10 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[23]);
          refalrts::alloc_name(vm, context[24], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::alloc_number(vm, context[25], 79UL);
          refalrts::alloc_open_bracket(vm, context[26]);
          refalrts::alloc_number(vm, context[27], 0UL);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::alloc_number(vm, context[29], 0UL);
          refalrts::alloc_open_bracket(vm, context[30]);
          refalrts::reinit_number(context[0], 0UL);
          refalrts::reinit_close_bracket(context[4]);
          refalrts::reinit_number(context[9], 0UL);
          refalrts::reinit_open_call(context[11]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_number(context[20], 256UL);
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[11] );
          refalrts::link_brackets( context[30], context[4] );
          refalrts::link_brackets( context[26], context[28] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[0];
          res = refalrts::splice_evar( res, context[23], context[30] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 # Reinit/14 s.ElemNumber/17 # ElOpenADT/20 )/10 >/1
          if( ! refalrts::ident_term( identifiers[ident_Reinit], context[14] ) )
            continue;
          //DEBUG: s.ElemNumber: 17

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </23 & PutCommand$3:1/24 86/25 (/26 0/27 )/28 0/29 (/30 Tile{ HalfReuse: 0/0 HalfReuse: )/4 HalfReuse: 0/9 HalfReuse: </11 HalfReuse: & Divmod/14 AsIs: s.ElemNumber/17 HalfReuse: 256/20 HalfReuse: >/10 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[23]);
          refalrts::alloc_name(vm, context[24], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::alloc_number(vm, context[25], 86UL);
          refalrts::alloc_open_bracket(vm, context[26]);
          refalrts::alloc_number(vm, context[27], 0UL);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::alloc_number(vm, context[29], 0UL);
          refalrts::alloc_open_bracket(vm, context[30]);
          refalrts::reinit_number(context[0], 0UL);
          refalrts::reinit_close_bracket(context[4]);
          refalrts::reinit_number(context[9], 0UL);
          refalrts::reinit_open_call(context[11]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_number(context[20], 256UL);
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[11] );
          refalrts::link_brackets( context[30], context[4] );
          refalrts::link_brackets( context[26], context[28] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[0];
          res = refalrts::splice_evar( res, context[23], context[30] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 s.CreateMode/14 s.ElemNumber/17 # ElOpenADT/20 )/10 >/1
        //DEBUG: s.CreateMode: 14
        //DEBUG: s.ElemNumber: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.ElemNumber/17 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1@1/4 HalfReuse: s.ElemNumber17 /9 HalfReuse: </11 } & NumberFromOpcode*119/23 Tile{ AsIs: s.CreateMode/14 } Tile{ Reuse: # ElBracket/20 HalfReuse: >/10 AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[23], functions[efunc_gen_NumberFromOpcode_D119]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1Z1]);
        refalrts::reinit_svar( context[9], context[17] );
        refalrts::reinit_open_call(context[11]);
        refalrts::update_ident(context[20], identifiers[ident_ElBracket]);
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[11] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[20];
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 s.CreateMode/14 s.ElemNumber/17 # ElOpenADT/20 e.Info/23 )/10 >/1
      context[23] = context[21];
      context[24] = context[22];
      // closed e.Info as range 23
      //DEBUG: s.CreateMode: 14
      //DEBUG: s.ElemNumber: 17
      //DEBUG: e.Info: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.CreateMode/14 s.ElemNumber/17 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand/4 AsIs: (/9 HalfReuse: s.CreateMode14 /11 } # ElBracket/25 )/26 0/27 </28 & CreateCommandInfo*8/29 Tile{ AsIs: # ElOpenADT/20 AsIs: e.Info/23 HalfReuse: >/10 HalfReuse: s.ElemNumber17 /1 } >/30 Tile{ ]] }
      refalrts::alloc_ident(vm, context[25], identifiers[ident_ElBracket]);
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::alloc_number(vm, context[27], 0UL);
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_gen_CreateCommandInfo_D8]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::update_name(context[4], functions[efunc_PutCommand]);
      refalrts::reinit_svar( context[11], context[14] );
      refalrts::reinit_close_call(context[10]);
      refalrts::reinit_svar( context[1], context[17] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[9], context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[20], context[1] );
      res = refalrts::splice_evar( res, context[25], context[29] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 s.new14/14 s.new15/17 # ElOpenCall/20 e.new16/21 )/10 >/1
      context[21] = context[18];
      context[22] = context[19];
      if( ! refalrts::ident_term( identifiers[ident_ElOpenCall], context[20] ) )
        continue;
      // closed e.new16 as range 21
      do {
        // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 s.new17/14 s.new18/17 # ElOpenCall/20 )/10 >/1
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 # Allocate/14 s.ElemNumber/17 # ElOpenCall/20 )/10 >/1
          if( ! refalrts::ident_term( identifiers[ident_Allocate], context[14] ) )
            continue;
          //DEBUG: s.ElemNumber: 17

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </23 & PutCommand$3:1/24 79/25 (/26 0/27 )/28 0/29 (/30 Tile{ HalfReuse: 0/0 HalfReuse: )/4 HalfReuse: 2/9 HalfReuse: </11 HalfReuse: & Divmod/14 AsIs: s.ElemNumber/17 HalfReuse: 256/20 HalfReuse: >/10 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[23]);
          refalrts::alloc_name(vm, context[24], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::alloc_number(vm, context[25], 79UL);
          refalrts::alloc_open_bracket(vm, context[26]);
          refalrts::alloc_number(vm, context[27], 0UL);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::alloc_number(vm, context[29], 0UL);
          refalrts::alloc_open_bracket(vm, context[30]);
          refalrts::reinit_number(context[0], 0UL);
          refalrts::reinit_close_bracket(context[4]);
          refalrts::reinit_number(context[9], 2UL);
          refalrts::reinit_open_call(context[11]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_number(context[20], 256UL);
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[11] );
          refalrts::link_brackets( context[30], context[4] );
          refalrts::link_brackets( context[26], context[28] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[0];
          res = refalrts::splice_evar( res, context[23], context[30] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 # Reinit/14 s.ElemNumber/17 # ElOpenCall/20 )/10 >/1
          if( ! refalrts::ident_term( identifiers[ident_Reinit], context[14] ) )
            continue;
          //DEBUG: s.ElemNumber: 17

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </23 & PutCommand$3:1/24 86/25 (/26 0/27 )/28 0/29 (/30 Tile{ HalfReuse: 0/0 HalfReuse: )/4 HalfReuse: 2/9 HalfReuse: </11 HalfReuse: & Divmod/14 AsIs: s.ElemNumber/17 HalfReuse: 256/20 HalfReuse: >/10 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[23]);
          refalrts::alloc_name(vm, context[24], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::alloc_number(vm, context[25], 86UL);
          refalrts::alloc_open_bracket(vm, context[26]);
          refalrts::alloc_number(vm, context[27], 0UL);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::alloc_number(vm, context[29], 0UL);
          refalrts::alloc_open_bracket(vm, context[30]);
          refalrts::reinit_number(context[0], 0UL);
          refalrts::reinit_close_bracket(context[4]);
          refalrts::reinit_number(context[9], 2UL);
          refalrts::reinit_open_call(context[11]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_number(context[20], 256UL);
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[11] );
          refalrts::link_brackets( context[30], context[4] );
          refalrts::link_brackets( context[26], context[28] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[0];
          res = refalrts::splice_evar( res, context[23], context[30] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 s.CreateMode/14 s.ElemNumber/17 # ElOpenCall/20 )/10 >/1
        //DEBUG: s.CreateMode: 14
        //DEBUG: s.ElemNumber: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.ElemNumber/17 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1@8/4 HalfReuse: s.ElemNumber17 /9 HalfReuse: </11 } & NumberFromOpcode*119/23 Tile{ AsIs: s.CreateMode/14 } Tile{ Reuse: # ElBracket/20 HalfReuse: >/10 AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[23], functions[efunc_gen_NumberFromOpcode_D119]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1Z8]);
        refalrts::reinit_svar( context[9], context[17] );
        refalrts::reinit_open_call(context[11]);
        refalrts::update_ident(context[20], identifiers[ident_ElBracket]);
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[11] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[20];
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 s.CreateMode/14 s.ElemNumber/17 # ElOpenCall/20 e.Info/23 )/10 >/1
      context[23] = context[21];
      context[24] = context[22];
      // closed e.Info as range 23
      //DEBUG: s.CreateMode: 14
      //DEBUG: s.ElemNumber: 17
      //DEBUG: e.Info: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.CreateMode/14 s.ElemNumber/17 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand/4 AsIs: (/9 HalfReuse: s.CreateMode14 /11 } # ElBracket/25 )/26 0/27 </28 & CreateCommandInfo*8/29 Tile{ AsIs: # ElOpenCall/20 AsIs: e.Info/23 HalfReuse: >/10 HalfReuse: s.ElemNumber17 /1 } >/30 Tile{ ]] }
      refalrts::alloc_ident(vm, context[25], identifiers[ident_ElBracket]);
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::alloc_number(vm, context[27], 0UL);
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_gen_CreateCommandInfo_D8]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::update_name(context[4], functions[efunc_PutCommand]);
      refalrts::reinit_svar( context[11], context[14] );
      refalrts::reinit_close_call(context[10]);
      refalrts::reinit_svar( context[1], context[17] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[9], context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[20], context[1] );
      res = refalrts::splice_evar( res, context[25], context[29] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 s.new14/14 s.new15/17 # ElCloseBracket/20 e.new16/21 )/10 >/1
      context[21] = context[18];
      context[22] = context[19];
      if( ! refalrts::ident_term( identifiers[ident_ElCloseBracket], context[20] ) )
        continue;
      // closed e.new16 as range 21
      do {
        // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 s.new17/14 s.new18/17 # ElCloseBracket/20 )/10 >/1
        if( ! refalrts::empty_seq( context[21], context[22] ) )
          continue;
        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 # Allocate/14 s.ElemNumber/17 # ElCloseBracket/20 )/10 >/1
          if( ! refalrts::ident_term( identifiers[ident_Allocate], context[14] ) )
            continue;
          //DEBUG: s.ElemNumber: 17

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </23 & PutCommand$3:1/24 79/25 (/26 0/27 )/28 0/29 (/30 Tile{ HalfReuse: 0/0 HalfReuse: )/4 HalfReuse: 4/9 HalfReuse: </11 HalfReuse: & Divmod/14 AsIs: s.ElemNumber/17 HalfReuse: 256/20 HalfReuse: >/10 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[23]);
          refalrts::alloc_name(vm, context[24], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::alloc_number(vm, context[25], 79UL);
          refalrts::alloc_open_bracket(vm, context[26]);
          refalrts::alloc_number(vm, context[27], 0UL);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::alloc_number(vm, context[29], 0UL);
          refalrts::alloc_open_bracket(vm, context[30]);
          refalrts::reinit_number(context[0], 0UL);
          refalrts::reinit_close_bracket(context[4]);
          refalrts::reinit_number(context[9], 4UL);
          refalrts::reinit_open_call(context[11]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_number(context[20], 256UL);
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[11] );
          refalrts::link_brackets( context[30], context[4] );
          refalrts::link_brackets( context[26], context[28] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[0];
          res = refalrts::splice_evar( res, context[23], context[30] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 # Reinit/14 s.ElemNumber/17 # ElCloseBracket/20 )/10 >/1
          if( ! refalrts::ident_term( identifiers[ident_Reinit], context[14] ) )
            continue;
          //DEBUG: s.ElemNumber: 17

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ } </23 & PutCommand$3:1/24 86/25 (/26 0/27 )/28 0/29 (/30 Tile{ HalfReuse: 0/0 HalfReuse: )/4 HalfReuse: 4/9 HalfReuse: </11 HalfReuse: & Divmod/14 AsIs: s.ElemNumber/17 HalfReuse: 256/20 HalfReuse: >/10 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[23]);
          refalrts::alloc_name(vm, context[24], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::alloc_number(vm, context[25], 86UL);
          refalrts::alloc_open_bracket(vm, context[26]);
          refalrts::alloc_number(vm, context[27], 0UL);
          refalrts::alloc_close_bracket(vm, context[28]);
          refalrts::alloc_number(vm, context[29], 0UL);
          refalrts::alloc_open_bracket(vm, context[30]);
          refalrts::reinit_number(context[0], 0UL);
          refalrts::reinit_close_bracket(context[4]);
          refalrts::reinit_number(context[9], 4UL);
          refalrts::reinit_open_call(context[11]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_number(context[20], 256UL);
          refalrts::reinit_close_call(context[10]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[10] );
          refalrts::push_stack( vm, context[11] );
          refalrts::link_brackets( context[30], context[4] );
          refalrts::link_brackets( context[26], context[28] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[0];
          res = refalrts::splice_evar( res, context[23], context[30] );
          refalrts::use( res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 s.CreateMode/14 s.ElemNumber/17 # ElCloseBracket/20 )/10 >/1
        //DEBUG: s.CreateMode: 14
        //DEBUG: s.ElemNumber: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} s.ElemNumber/17 {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1@9/4 HalfReuse: s.ElemNumber17 /9 HalfReuse: </11 } & NumberFromOpcode*119/23 Tile{ AsIs: s.CreateMode/14 } Tile{ Reuse: # ElBracket/20 HalfReuse: >/10 AsIs: >/1 ]] }
        refalrts::alloc_name(vm, context[23], functions[efunc_gen_NumberFromOpcode_D119]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1Z9]);
        refalrts::reinit_svar( context[9], context[17] );
        refalrts::reinit_open_call(context[11]);
        refalrts::update_ident(context[20], identifiers[ident_ElBracket]);
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[11] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[20];
        res = refalrts::splice_elem( res, context[14] );
        res = refalrts::splice_elem( res, context[23] );
        refalrts::splice_to_freelist_open( vm, context[11], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 s.CreateMode/14 s.ElemNumber/17 # ElCloseBracket/20 e.Info/23 )/10 >/1
      context[23] = context[21];
      context[24] = context[22];
      // closed e.Info as range 23
      //DEBUG: s.CreateMode: 14
      //DEBUG: s.ElemNumber: 17
      //DEBUG: e.Info: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.CreateMode/14 s.ElemNumber/17 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand/4 AsIs: (/9 HalfReuse: s.CreateMode14 /11 } # ElBracket/25 )/26 0/27 </28 & CreateCommandInfo*8/29 Tile{ AsIs: # ElCloseBracket/20 AsIs: e.Info/23 HalfReuse: >/10 HalfReuse: s.ElemNumber17 /1 } >/30 Tile{ ]] }
      refalrts::alloc_ident(vm, context[25], identifiers[ident_ElBracket]);
      refalrts::alloc_close_bracket(vm, context[26]);
      refalrts::alloc_number(vm, context[27], 0UL);
      refalrts::alloc_open_call(vm, context[28]);
      refalrts::alloc_name(vm, context[29], functions[efunc_gen_CreateCommandInfo_D8]);
      refalrts::alloc_close_call(vm, context[30]);
      refalrts::update_name(context[4], functions[efunc_PutCommand]);
      refalrts::reinit_svar( context[11], context[14] );
      refalrts::reinit_close_call(context[10]);
      refalrts::reinit_svar( context[1], context[17] );
      refalrts::push_stack( vm, context[30] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[28] );
      refalrts::link_brackets( context[9], context[26] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[20], context[1] );
      res = refalrts::splice_evar( res, context[25], context[29] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 s.new14/14 s.new15/17 # ElCloseADT/20 e.new16/21 )/10 >/1
    context[21] = context[18];
    context[22] = context[19];
    if( ! refalrts::ident_term( identifiers[ident_ElCloseADT], context[20] ) )
      continue;
    // closed e.new16 as range 21
    do {
      // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 s.new17/14 s.new18/17 # ElCloseADT/20 )/10 >/1
      if( ! refalrts::empty_seq( context[21], context[22] ) )
        continue;
      do {
        // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 # Allocate/14 s.ElemNumber/17 # ElCloseADT/20 )/10 >/1
        if( ! refalrts::ident_term( identifiers[ident_Allocate], context[14] ) )
          continue;
        //DEBUG: s.ElemNumber: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </23 & PutCommand$3:1/24 79/25 (/26 0/27 )/28 0/29 (/30 Tile{ HalfReuse: 0/0 HalfReuse: )/4 HalfReuse: 3/9 HalfReuse: </11 HalfReuse: & Divmod/14 AsIs: s.ElemNumber/17 HalfReuse: 256/20 HalfReuse: >/10 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[23]);
        refalrts::alloc_name(vm, context[24], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::alloc_number(vm, context[25], 79UL);
        refalrts::alloc_open_bracket(vm, context[26]);
        refalrts::alloc_number(vm, context[27], 0UL);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::alloc_number(vm, context[29], 0UL);
        refalrts::alloc_open_bracket(vm, context[30]);
        refalrts::reinit_number(context[0], 0UL);
        refalrts::reinit_close_bracket(context[4]);
        refalrts::reinit_number(context[9], 3UL);
        refalrts::reinit_open_call(context[11]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_number(context[20], 256UL);
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[11] );
        refalrts::link_brackets( context[30], context[4] );
        refalrts::link_brackets( context[26], context[28] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[0];
        res = refalrts::splice_evar( res, context[23], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 # Reinit/14 s.ElemNumber/17 # ElCloseADT/20 )/10 >/1
        if( ! refalrts::ident_term( identifiers[ident_Reinit], context[14] ) )
          continue;
        //DEBUG: s.ElemNumber: 17

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </23 & PutCommand$3:1/24 86/25 (/26 0/27 )/28 0/29 (/30 Tile{ HalfReuse: 0/0 HalfReuse: )/4 HalfReuse: 3/9 HalfReuse: </11 HalfReuse: & Divmod/14 AsIs: s.ElemNumber/17 HalfReuse: 256/20 HalfReuse: >/10 AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[23]);
        refalrts::alloc_name(vm, context[24], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::alloc_number(vm, context[25], 86UL);
        refalrts::alloc_open_bracket(vm, context[26]);
        refalrts::alloc_number(vm, context[27], 0UL);
        refalrts::alloc_close_bracket(vm, context[28]);
        refalrts::alloc_number(vm, context[29], 0UL);
        refalrts::alloc_open_bracket(vm, context[30]);
        refalrts::reinit_number(context[0], 0UL);
        refalrts::reinit_close_bracket(context[4]);
        refalrts::reinit_number(context[9], 3UL);
        refalrts::reinit_open_call(context[11]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_number(context[20], 256UL);
        refalrts::reinit_close_call(context[10]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[10] );
        refalrts::push_stack( vm, context[11] );
        refalrts::link_brackets( context[30], context[4] );
        refalrts::link_brackets( context[26], context[28] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[0];
        res = refalrts::splice_evar( res, context[23], context[30] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 s.CreateMode/14 s.ElemNumber/17 # ElCloseADT/20 )/10 >/1
      //DEBUG: s.CreateMode: 14
      //DEBUG: s.ElemNumber: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} s.ElemNumber/17 {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1@10/4 HalfReuse: s.ElemNumber17 /9 HalfReuse: </11 } & NumberFromOpcode*119/23 Tile{ AsIs: s.CreateMode/14 } Tile{ Reuse: # ElBracket/20 HalfReuse: >/10 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_NumberFromOpcode_D119]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1Z10]);
      refalrts::reinit_svar( context[9], context[17] );
      refalrts::reinit_open_call(context[11]);
      refalrts::update_ident(context[20], identifiers[ident_ElBracket]);
      refalrts::reinit_close_call(context[10]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[10] );
      refalrts::push_stack( vm, context[11] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[20];
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_elem( res, context[23] );
      refalrts::splice_to_freelist_open( vm, context[11], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-RASL/4 (/9 # CmdCreateElem/11 s.CreateMode/14 s.ElemNumber/17 # ElCloseADT/20 e.Info/23 )/10 >/1
    context[23] = context[21];
    context[24] = context[22];
    // closed e.Info as range 23
    //DEBUG: s.CreateMode: 14
    //DEBUG: s.ElemNumber: 17
    //DEBUG: e.Info: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.CreateMode/14 s.ElemNumber/17 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand/4 AsIs: (/9 HalfReuse: s.CreateMode14 /11 } # ElBracket/25 )/26 0/27 </28 & CreateCommandInfo*8/29 Tile{ AsIs: # ElCloseADT/20 AsIs: e.Info/23 HalfReuse: >/10 HalfReuse: s.ElemNumber17 /1 } >/30 Tile{ ]] }
    refalrts::alloc_ident(vm, context[25], identifiers[ident_ElBracket]);
    refalrts::alloc_close_bracket(vm, context[26]);
    refalrts::alloc_number(vm, context[27], 0UL);
    refalrts::alloc_open_call(vm, context[28]);
    refalrts::alloc_name(vm, context[29], functions[efunc_gen_CreateCommandInfo_D8]);
    refalrts::alloc_close_call(vm, context[30]);
    refalrts::update_name(context[4], functions[efunc_PutCommand]);
    refalrts::reinit_svar( context[11], context[14] );
    refalrts::reinit_close_call(context[10]);
    refalrts::reinit_svar( context[1], context[17] );
    refalrts::push_stack( vm, context[30] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[28] );
    refalrts::link_brackets( context[9], context[26] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[20], context[1] );
    res = refalrts::splice_evar( res, context[25], context[29] );
    refalrts::splice_to_freelist_open( vm, context[11], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenCommand-RASL/4 (/7 s.new1/9 e.new2/5 )/8 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 5
  do {
    // </0 & GenCommand-RASL/4 (/7 s.new3/9 s.new4/12 e.new5/10 )/8 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::svar_left( context[12], context[10], context[11] ) )
      continue;
    // closed e.new5 as range 10
    do {
      // </0 & GenCommand-RASL/4 (/7 s.new6/9 s.new7/12 s.new8/15 e.new9/13 )/8 >/1
      context[13] = context[10];
      context[14] = context[11];
      if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
        continue;
      // closed e.new9 as range 13
      do {
        // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new10/12 s.new11/15 s.new12/18 e.new13/16 )/8 >/1
        context[16] = context[13];
        context[17] = context[14];
        if( ! refalrts::ident_term( identifiers[ident_CmdCreateElem], context[9] ) )
          continue;
        if( ! refalrts::svar_left( context[18], context[16], context[17] ) )
          continue;
        // closed e.new13 as range 16
        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new14/12 s.new15/15 # ElCloseCall/18 e.new16/19 )/8 >/1
          context[19] = context[16];
          context[20] = context[17];
          if( ! refalrts::ident_term( identifiers[ident_ElCloseCall], context[18] ) )
            continue;
          // closed e.new16 as range 19
          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new17/12 s.new18/15 # ElCloseCall/18 )/8 >/1
            if( ! refalrts::empty_seq( context[19], context[20] ) )
              continue;
            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Allocate/12 s.ElemNumber/15 # ElCloseCall/18 )/8 >/1
              if( ! refalrts::ident_term( identifiers[ident_Allocate], context[12] ) )
                continue;
              //DEBUG: s.ElemNumber: 15

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } </21 & PutCommand$3:1/22 79/23 (/24 0/25 )/26 0/27 (/28 Tile{ HalfReuse: 0/0 HalfReuse: )/4 HalfReuse: 5/7 HalfReuse: </9 HalfReuse: & Divmod/12 AsIs: s.ElemNumber/15 HalfReuse: 256/18 HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_open_call(vm, context[21]);
              refalrts::alloc_name(vm, context[22], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::alloc_number(vm, context[23], 79UL);
              refalrts::alloc_open_bracket(vm, context[24]);
              refalrts::alloc_number(vm, context[25], 0UL);
              refalrts::alloc_close_bracket(vm, context[26]);
              refalrts::alloc_number(vm, context[27], 0UL);
              refalrts::alloc_open_bracket(vm, context[28]);
              refalrts::reinit_number(context[0], 0UL);
              refalrts::reinit_close_bracket(context[4]);
              refalrts::reinit_number(context[7], 5UL);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_number(context[18], 256UL);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[21] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[9] );
              refalrts::link_brackets( context[28], context[4] );
              refalrts::link_brackets( context[24], context[26] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[0];
              res = refalrts::splice_evar( res, context[21], context[28] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Reinit/12 s.ElemNumber/15 # ElCloseCall/18 )/8 >/1
              if( ! refalrts::ident_term( identifiers[ident_Reinit], context[12] ) )
                continue;
              //DEBUG: s.ElemNumber: 15

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ } </21 & PutCommand$3:1/22 86/23 (/24 0/25 )/26 0/27 (/28 Tile{ HalfReuse: 0/0 HalfReuse: )/4 HalfReuse: 5/7 HalfReuse: </9 HalfReuse: & Divmod/12 AsIs: s.ElemNumber/15 HalfReuse: 256/18 HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_open_call(vm, context[21]);
              refalrts::alloc_name(vm, context[22], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::alloc_number(vm, context[23], 86UL);
              refalrts::alloc_open_bracket(vm, context[24]);
              refalrts::alloc_number(vm, context[25], 0UL);
              refalrts::alloc_close_bracket(vm, context[26]);
              refalrts::alloc_number(vm, context[27], 0UL);
              refalrts::alloc_open_bracket(vm, context[28]);
              refalrts::reinit_number(context[0], 0UL);
              refalrts::reinit_close_bracket(context[4]);
              refalrts::reinit_number(context[7], 5UL);
              refalrts::reinit_open_call(context[9]);
              refalrts::reinit_name(context[12], functions[efunc_Divmod]);
              refalrts::reinit_number(context[18], 256UL);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[21] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[9] );
              refalrts::link_brackets( context[28], context[4] );
              refalrts::link_brackets( context[24], context[26] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[0];
              res = refalrts::splice_evar( res, context[21], context[28] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode/12 s.ElemNumber/15 # ElCloseCall/18 )/8 >/1
            //DEBUG: s.CreateMode: 12
            //DEBUG: s.ElemNumber: 15

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} s.ElemNumber/15 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1@11/4 HalfReuse: s.ElemNumber15 /7 HalfReuse: </9 } & NumberFromOpcode*119/21 Tile{ AsIs: s.CreateMode/12 } Tile{ Reuse: # ElBracket/18 HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_name(vm, context[21], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1Z11]);
            refalrts::reinit_svar( context[7], context[15] );
            refalrts::reinit_open_call(context[9]);
            refalrts::update_ident(context[18], identifiers[ident_ElBracket]);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[18];
            res = refalrts::splice_elem( res, context[12] );
            res = refalrts::splice_elem( res, context[21] );
            refalrts::splice_to_freelist_open( vm, context[9], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode/12 s.ElemNumber/15 # ElCloseCall/18 e.Info/21 )/8 >/1
          context[21] = context[19];
          context[22] = context[20];
          // closed e.Info as range 21
          //DEBUG: s.CreateMode: 12
          //DEBUG: s.ElemNumber: 15
          //DEBUG: e.Info: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.CreateMode/12 s.ElemNumber/15 {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand/4 AsIs: (/7 HalfReuse: s.CreateMode12 /9 } # ElBracket/23 )/24 0/25 </26 & CreateCommandInfo*8/27 Tile{ AsIs: # ElCloseCall/18 AsIs: e.Info/21 HalfReuse: >/8 HalfReuse: s.ElemNumber15 /1 } >/28 Tile{ ]] }
          refalrts::alloc_ident(vm, context[23], identifiers[ident_ElBracket]);
          refalrts::alloc_close_bracket(vm, context[24]);
          refalrts::alloc_number(vm, context[25], 0UL);
          refalrts::alloc_open_call(vm, context[26]);
          refalrts::alloc_name(vm, context[27], functions[efunc_gen_CreateCommandInfo_D8]);
          refalrts::alloc_close_call(vm, context[28]);
          refalrts::update_name(context[4], functions[efunc_PutCommand]);
          refalrts::reinit_svar( context[9], context[12] );
          refalrts::reinit_close_call(context[8]);
          refalrts::reinit_svar( context[1], context[15] );
          refalrts::push_stack( vm, context[28] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[26] );
          refalrts::link_brackets( context[7], context[24] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_elem( res, context[28] );
          res = refalrts::splice_evar( res, context[18], context[1] );
          res = refalrts::splice_evar( res, context[23], context[27] );
          refalrts::splice_to_freelist_open( vm, context[9], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new14/12 s.new15/15 s.new16/18 s.new17/21 e.new18/19 )/8 >/1
          context[19] = context[16];
          context[20] = context[17];
          if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
            continue;
          // closed e.new18 as range 19
          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode/12 s.ElemNumber/15 # ElChar/18 s.Char/21 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_ElChar], context[18] ) )
              continue;
            if( ! refalrts::empty_seq( context[19], context[20] ) )
              continue;
            //DEBUG: s.CreateMode: 12
            //DEBUG: s.ElemNumber: 15
            //DEBUG: s.Char: 21

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.CreateMode/12 s.ElemNumber/15 {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand/4 AsIs: (/7 HalfReuse: s.CreateMode12 /9 } # ElChar/22 )/23 0/24 </25 Tile{ HalfReuse: & Ord/18 AsIs: s.Char/21 } >/26 Tile{ HalfReuse: s.ElemNumber15 /8 AsIs: >/1 ]] }
            refalrts::alloc_ident(vm, context[22], identifiers[ident_ElChar]);
            refalrts::alloc_close_bracket(vm, context[23]);
            refalrts::alloc_number(vm, context[24], 0UL);
            refalrts::alloc_open_call(vm, context[25]);
            refalrts::alloc_close_call(vm, context[26]);
            refalrts::update_name(context[4], functions[efunc_PutCommand]);
            refalrts::reinit_svar( context[9], context[12] );
            refalrts::reinit_name(context[18], functions[efunc_Ord]);
            refalrts::reinit_svar( context[8], context[15] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[26] );
            refalrts::push_stack( vm, context[25] );
            refalrts::link_brackets( context[7], context[23] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[8];
            res = refalrts::splice_elem( res, context[26] );
            res = refalrts::splice_evar( res, context[18], context[21] );
            res = refalrts::splice_evar( res, context[22], context[25] );
            refalrts::splice_to_freelist_open( vm, context[9], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new19/12 s.new20/15 # ElName/18 s.new21/21 e.new22/22 )/8 >/1
            context[22] = context[19];
            context[23] = context[20];
            if( ! refalrts::ident_term( identifiers[ident_ElName], context[18] ) )
              continue;
            // closed e.new22 as range 22
            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Allocate/12 s.ElemNumber/15 # ElName/18 s.NameId/21 e./24 )/8 >/1
              context[24] = context[22];
              context[25] = context[23];
              if( ! refalrts::ident_term( identifiers[ident_Allocate], context[12] ) )
                continue;
              // closed e. as range 24
              //DEBUG: s.ElemNumber: 15
              //DEBUG: s.NameId: 21
              //DEBUG: e.: 24

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e./24 {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 75/7 HalfReuse: (/9 HalfReuse: 0/12 } )/26 0/27 </28 Tile{ HalfReuse: & Divmod/18 AsIs: s.NameId/21 } 256/29 >/30 </31 & Divmod/32 Tile{ AsIs: s.ElemNumber/15 } 256/33 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_close_bracket(vm, context[26]);
              refalrts::alloc_number(vm, context[27], 0UL);
              refalrts::alloc_open_call(vm, context[28]);
              refalrts::alloc_number(vm, context[29], 256UL);
              refalrts::alloc_close_call(vm, context[30]);
              refalrts::alloc_open_call(vm, context[31]);
              refalrts::alloc_name(vm, context[32], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[33], 256UL);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[7], 75UL);
              refalrts::reinit_open_bracket(context[9]);
              refalrts::reinit_number(context[12], 0UL);
              refalrts::reinit_name(context[18], functions[efunc_Divmod]);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[31] );
              refalrts::push_stack( vm, context[30] );
              refalrts::push_stack( vm, context[28] );
              refalrts::link_brackets( context[9], context[26] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[8];
              res = refalrts::splice_elem( res, context[33] );
              res = refalrts::splice_elem( res, context[15] );
              res = refalrts::splice_evar( res, context[29], context[32] );
              res = refalrts::splice_evar( res, context[18], context[21] );
              res = refalrts::splice_evar( res, context[26], context[28] );
              refalrts::splice_to_freelist_open( vm, context[12], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Reinit/12 s.ElemNumber/15 # ElName/18 s.NameId/21 e./24 )/8 >/1
              context[24] = context[22];
              context[25] = context[23];
              if( ! refalrts::ident_term( identifiers[ident_Reinit], context[12] ) )
                continue;
              // closed e. as range 24
              //DEBUG: s.ElemNumber: 15
              //DEBUG: s.NameId: 21
              //DEBUG: e.: 24

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e./24 {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 82/7 HalfReuse: (/9 HalfReuse: 0/12 } )/26 0/27 </28 Tile{ HalfReuse: & Divmod/18 AsIs: s.NameId/21 } 256/29 >/30 </31 & Divmod/32 Tile{ AsIs: s.ElemNumber/15 } 256/33 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_close_bracket(vm, context[26]);
              refalrts::alloc_number(vm, context[27], 0UL);
              refalrts::alloc_open_call(vm, context[28]);
              refalrts::alloc_number(vm, context[29], 256UL);
              refalrts::alloc_close_call(vm, context[30]);
              refalrts::alloc_open_call(vm, context[31]);
              refalrts::alloc_name(vm, context[32], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[33], 256UL);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[7], 82UL);
              refalrts::reinit_open_bracket(context[9]);
              refalrts::reinit_number(context[12], 0UL);
              refalrts::reinit_name(context[18], functions[efunc_Divmod]);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[31] );
              refalrts::push_stack( vm, context[30] );
              refalrts::push_stack( vm, context[28] );
              refalrts::link_brackets( context[9], context[26] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[8];
              res = refalrts::splice_elem( res, context[33] );
              res = refalrts::splice_elem( res, context[15] );
              res = refalrts::splice_evar( res, context[29], context[32] );
              res = refalrts::splice_evar( res, context[18], context[21] );
              res = refalrts::splice_evar( res, context[26], context[28] );
              refalrts::splice_to_freelist_open( vm, context[12], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Update/12 s.ElemNumber/15 # ElName/18 s.NameId/21 e./24 )/8 >/1
              context[24] = context[22];
              context[25] = context[23];
              if( ! refalrts::ident_term( identifiers[ident_Update], context[12] ) )
                continue;
              // closed e. as range 24
              //DEBUG: s.ElemNumber: 15
              //DEBUG: s.NameId: 21
              //DEBUG: e.: 24

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e./24 {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 90/7 HalfReuse: (/9 HalfReuse: 0/12 } )/26 0/27 </28 Tile{ HalfReuse: & Divmod/18 AsIs: s.NameId/21 } 256/29 >/30 </31 & Divmod/32 Tile{ AsIs: s.ElemNumber/15 } 256/33 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_close_bracket(vm, context[26]);
              refalrts::alloc_number(vm, context[27], 0UL);
              refalrts::alloc_open_call(vm, context[28]);
              refalrts::alloc_number(vm, context[29], 256UL);
              refalrts::alloc_close_call(vm, context[30]);
              refalrts::alloc_open_call(vm, context[31]);
              refalrts::alloc_name(vm, context[32], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[33], 256UL);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[7], 90UL);
              refalrts::reinit_open_bracket(context[9]);
              refalrts::reinit_number(context[12], 0UL);
              refalrts::reinit_name(context[18], functions[efunc_Divmod]);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[31] );
              refalrts::push_stack( vm, context[30] );
              refalrts::push_stack( vm, context[28] );
              refalrts::link_brackets( context[9], context[26] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[8];
              res = refalrts::splice_elem( res, context[33] );
              res = refalrts::splice_elem( res, context[15] );
              res = refalrts::splice_evar( res, context[29], context[32] );
              res = refalrts::splice_evar( res, context[18], context[21] );
              res = refalrts::splice_evar( res, context[26], context[28] );
              refalrts::splice_to_freelist_open( vm, context[12], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode/12 s.ElemNumber/15 # ElName/18 s.NameId/21 e./24 )/8 >/1
            context[24] = context[22];
            context[25] = context[23];
            // closed e. as range 24
            //DEBUG: s.CreateMode: 12
            //DEBUG: s.ElemNumber: 15
            //DEBUG: s.NameId: 21
            //DEBUG: e.: 24

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} s.ElemNumber/15 {REMOVED TILE} s.NameId/21 e./24 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1@3/4 HalfReuse: s.NameId21 /7 HalfReuse: s.ElemNumber15 /9 } </26 & NumberFromOpcode*119/27 Tile{ AsIs: s.CreateMode/12 } Tile{ AsIs: # ElName/18 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[26]);
            refalrts::alloc_name(vm, context[27], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1Z3]);
            refalrts::reinit_svar( context[7], context[21] );
            refalrts::reinit_svar( context[9], context[15] );
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[26] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[8];
            res = refalrts::splice_elem( res, context[18] );
            res = refalrts::splice_elem( res, context[12] );
            res = refalrts::splice_evar( res, context[26], context[27] );
            refalrts::splice_to_freelist_open( vm, context[9], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new19/12 s.new20/15 # ElNumber/18 s.new21/21 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[18] ) )
              continue;
            if( ! refalrts::empty_seq( context[19], context[20] ) )
              continue;
            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Allocate/12 s.ElemNumber/15 # ElNumber/18 s.Number/21 )/8 >/1
              if( ! refalrts::ident_term( identifiers[ident_Allocate], context[12] ) )
                continue;
              //DEBUG: s.ElemNumber: 15
              //DEBUG: s.Number: 21

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 76/7 HalfReuse: (/9 HalfReuse: 0/12 } )/22 0/23 </24 Tile{ HalfReuse: & Divmod/18 AsIs: s.Number/21 HalfReuse: 256/8 AsIs: >/1 } </25 & Divmod/26 Tile{ AsIs: s.ElemNumber/15 } 256/27 >/28 >/29 Tile{ ]] }
              refalrts::alloc_close_bracket(vm, context[22]);
              refalrts::alloc_number(vm, context[23], 0UL);
              refalrts::alloc_open_call(vm, context[24]);
              refalrts::alloc_open_call(vm, context[25]);
              refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[27], 256UL);
              refalrts::alloc_close_call(vm, context[28]);
              refalrts::alloc_close_call(vm, context[29]);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[7], 76UL);
              refalrts::reinit_open_bracket(context[9]);
              refalrts::reinit_number(context[12], 0UL);
              refalrts::reinit_name(context[18], functions[efunc_Divmod]);
              refalrts::reinit_number(context[8], 256UL);
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[28] );
              refalrts::push_stack( vm, context[25] );
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[24] );
              refalrts::link_brackets( context[9], context[22] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[27], context[29] );
              res = refalrts::splice_elem( res, context[15] );
              res = refalrts::splice_evar( res, context[25], context[26] );
              res = refalrts::splice_evar( res, context[18], context[1] );
              res = refalrts::splice_evar( res, context[22], context[24] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Reinit/12 s.ElemNumber/15 # ElNumber/18 s.Number/21 )/8 >/1
              if( ! refalrts::ident_term( identifiers[ident_Reinit], context[12] ) )
                continue;
              //DEBUG: s.ElemNumber: 15
              //DEBUG: s.Number: 21

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 83/7 HalfReuse: (/9 HalfReuse: 0/12 } )/22 0/23 </24 Tile{ HalfReuse: & Divmod/18 AsIs: s.Number/21 HalfReuse: 256/8 AsIs: >/1 } </25 & Divmod/26 Tile{ AsIs: s.ElemNumber/15 } 256/27 >/28 >/29 Tile{ ]] }
              refalrts::alloc_close_bracket(vm, context[22]);
              refalrts::alloc_number(vm, context[23], 0UL);
              refalrts::alloc_open_call(vm, context[24]);
              refalrts::alloc_open_call(vm, context[25]);
              refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[27], 256UL);
              refalrts::alloc_close_call(vm, context[28]);
              refalrts::alloc_close_call(vm, context[29]);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[7], 83UL);
              refalrts::reinit_open_bracket(context[9]);
              refalrts::reinit_number(context[12], 0UL);
              refalrts::reinit_name(context[18], functions[efunc_Divmod]);
              refalrts::reinit_number(context[8], 256UL);
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[28] );
              refalrts::push_stack( vm, context[25] );
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[24] );
              refalrts::link_brackets( context[9], context[22] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[27], context[29] );
              res = refalrts::splice_elem( res, context[15] );
              res = refalrts::splice_evar( res, context[25], context[26] );
              res = refalrts::splice_evar( res, context[18], context[1] );
              res = refalrts::splice_evar( res, context[22], context[24] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Update/12 s.ElemNumber/15 # ElNumber/18 s.Number/21 )/8 >/1
              if( ! refalrts::ident_term( identifiers[ident_Update], context[12] ) )
                continue;
              //DEBUG: s.ElemNumber: 15
              //DEBUG: s.Number: 21

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 91/7 HalfReuse: (/9 HalfReuse: 0/12 } )/22 0/23 </24 Tile{ HalfReuse: & Divmod/18 AsIs: s.Number/21 HalfReuse: 256/8 AsIs: >/1 } </25 & Divmod/26 Tile{ AsIs: s.ElemNumber/15 } 256/27 >/28 >/29 Tile{ ]] }
              refalrts::alloc_close_bracket(vm, context[22]);
              refalrts::alloc_number(vm, context[23], 0UL);
              refalrts::alloc_open_call(vm, context[24]);
              refalrts::alloc_open_call(vm, context[25]);
              refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[27], 256UL);
              refalrts::alloc_close_call(vm, context[28]);
              refalrts::alloc_close_call(vm, context[29]);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[7], 91UL);
              refalrts::reinit_open_bracket(context[9]);
              refalrts::reinit_number(context[12], 0UL);
              refalrts::reinit_name(context[18], functions[efunc_Divmod]);
              refalrts::reinit_number(context[8], 256UL);
              refalrts::push_stack( vm, context[29] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[28] );
              refalrts::push_stack( vm, context[25] );
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[24] );
              refalrts::link_brackets( context[9], context[22] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = arg_end->next;
              res = refalrts::splice_evar( res, context[27], context[29] );
              res = refalrts::splice_elem( res, context[15] );
              res = refalrts::splice_evar( res, context[25], context[26] );
              res = refalrts::splice_evar( res, context[18], context[1] );
              res = refalrts::splice_evar( res, context[22], context[24] );
              refalrts::use( res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode/12 s.ElemNumber/15 # ElNumber/18 s.Number/21 )/8 >/1
            //DEBUG: s.CreateMode: 12
            //DEBUG: s.ElemNumber: 15
            //DEBUG: s.Number: 21

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} s.ElemNumber/15 {REMOVED TILE} s.Number/21 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1@3/4 HalfReuse: s.Number21 /7 HalfReuse: s.ElemNumber15 /9 } </22 & NumberFromOpcode*119/23 Tile{ AsIs: s.CreateMode/12 } Tile{ AsIs: # ElNumber/18 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[22]);
            refalrts::alloc_name(vm, context[23], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1Z3]);
            refalrts::reinit_svar( context[7], context[21] );
            refalrts::reinit_svar( context[9], context[15] );
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[22] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[8];
            res = refalrts::splice_elem( res, context[18] );
            res = refalrts::splice_elem( res, context[12] );
            res = refalrts::splice_evar( res, context[22], context[23] );
            refalrts::splice_to_freelist_open( vm, context[9], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new19/12 s.new20/15 # ElIdent/18 s.new21/21 e.new22/22 )/8 >/1
            context[22] = context[19];
            context[23] = context[20];
            if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[18] ) )
              continue;
            // closed e.new22 as range 22
            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Allocate/12 s.ElemNumber/15 # ElIdent/18 s.NameId/21 e./24 )/8 >/1
              context[24] = context[22];
              context[25] = context[23];
              if( ! refalrts::ident_term( identifiers[ident_Allocate], context[12] ) )
                continue;
              // closed e. as range 24
              //DEBUG: s.ElemNumber: 15
              //DEBUG: s.NameId: 21
              //DEBUG: e.: 24

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e./24 {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 78/7 HalfReuse: (/9 HalfReuse: 0/12 } )/26 0/27 </28 Tile{ HalfReuse: & Divmod/18 AsIs: s.NameId/21 } 256/29 >/30 </31 & Divmod/32 Tile{ AsIs: s.ElemNumber/15 } 256/33 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_close_bracket(vm, context[26]);
              refalrts::alloc_number(vm, context[27], 0UL);
              refalrts::alloc_open_call(vm, context[28]);
              refalrts::alloc_number(vm, context[29], 256UL);
              refalrts::alloc_close_call(vm, context[30]);
              refalrts::alloc_open_call(vm, context[31]);
              refalrts::alloc_name(vm, context[32], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[33], 256UL);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[7], 78UL);
              refalrts::reinit_open_bracket(context[9]);
              refalrts::reinit_number(context[12], 0UL);
              refalrts::reinit_name(context[18], functions[efunc_Divmod]);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[31] );
              refalrts::push_stack( vm, context[30] );
              refalrts::push_stack( vm, context[28] );
              refalrts::link_brackets( context[9], context[26] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[8];
              res = refalrts::splice_elem( res, context[33] );
              res = refalrts::splice_elem( res, context[15] );
              res = refalrts::splice_evar( res, context[29], context[32] );
              res = refalrts::splice_evar( res, context[18], context[21] );
              res = refalrts::splice_evar( res, context[26], context[28] );
              refalrts::splice_to_freelist_open( vm, context[12], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Reinit/12 s.ElemNumber/15 # ElIdent/18 s.NameId/21 e./24 )/8 >/1
              context[24] = context[22];
              context[25] = context[23];
              if( ! refalrts::ident_term( identifiers[ident_Reinit], context[12] ) )
                continue;
              // closed e. as range 24
              //DEBUG: s.ElemNumber: 15
              //DEBUG: s.NameId: 21
              //DEBUG: e.: 24

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e./24 {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 85/7 HalfReuse: (/9 HalfReuse: 0/12 } )/26 0/27 </28 Tile{ HalfReuse: & Divmod/18 AsIs: s.NameId/21 } 256/29 >/30 </31 & Divmod/32 Tile{ AsIs: s.ElemNumber/15 } 256/33 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_close_bracket(vm, context[26]);
              refalrts::alloc_number(vm, context[27], 0UL);
              refalrts::alloc_open_call(vm, context[28]);
              refalrts::alloc_number(vm, context[29], 256UL);
              refalrts::alloc_close_call(vm, context[30]);
              refalrts::alloc_open_call(vm, context[31]);
              refalrts::alloc_name(vm, context[32], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[33], 256UL);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[7], 85UL);
              refalrts::reinit_open_bracket(context[9]);
              refalrts::reinit_number(context[12], 0UL);
              refalrts::reinit_name(context[18], functions[efunc_Divmod]);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[31] );
              refalrts::push_stack( vm, context[30] );
              refalrts::push_stack( vm, context[28] );
              refalrts::link_brackets( context[9], context[26] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[8];
              res = refalrts::splice_elem( res, context[33] );
              res = refalrts::splice_elem( res, context[15] );
              res = refalrts::splice_evar( res, context[29], context[32] );
              res = refalrts::splice_evar( res, context[18], context[21] );
              res = refalrts::splice_evar( res, context[26], context[28] );
              refalrts::splice_to_freelist_open( vm, context[12], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            do {
              // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Update/12 s.ElemNumber/15 # ElIdent/18 s.NameId/21 e./24 )/8 >/1
              context[24] = context[22];
              context[25] = context[23];
              if( ! refalrts::ident_term( identifiers[ident_Update], context[12] ) )
                continue;
              // closed e. as range 24
              //DEBUG: s.ElemNumber: 15
              //DEBUG: s.NameId: 21
              //DEBUG: e.: 24

              refalrts::reset_allocator(vm);
              //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e./24 {REMOVED TILE}
              //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 93/7 HalfReuse: (/9 HalfReuse: 0/12 } )/26 0/27 </28 Tile{ HalfReuse: & Divmod/18 AsIs: s.NameId/21 } 256/29 >/30 </31 & Divmod/32 Tile{ AsIs: s.ElemNumber/15 } 256/33 Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
              refalrts::alloc_close_bracket(vm, context[26]);
              refalrts::alloc_number(vm, context[27], 0UL);
              refalrts::alloc_open_call(vm, context[28]);
              refalrts::alloc_number(vm, context[29], 256UL);
              refalrts::alloc_close_call(vm, context[30]);
              refalrts::alloc_open_call(vm, context[31]);
              refalrts::alloc_name(vm, context[32], functions[efunc_Divmod]);
              refalrts::alloc_number(vm, context[33], 256UL);
              refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
              refalrts::reinit_number(context[7], 93UL);
              refalrts::reinit_open_bracket(context[9]);
              refalrts::reinit_number(context[12], 0UL);
              refalrts::reinit_name(context[18], functions[efunc_Divmod]);
              refalrts::reinit_close_call(context[8]);
              refalrts::push_stack( vm, context[1] );
              refalrts::push_stack( vm, context[0] );
              refalrts::push_stack( vm, context[8] );
              refalrts::push_stack( vm, context[31] );
              refalrts::push_stack( vm, context[30] );
              refalrts::push_stack( vm, context[28] );
              refalrts::link_brackets( context[9], context[26] );
              refalrts::Iter trash_prev = arg_begin->prev;
              refalrts::use(trash_prev);
              refalrts::Iter res = context[8];
              res = refalrts::splice_elem( res, context[33] );
              res = refalrts::splice_elem( res, context[15] );
              res = refalrts::splice_evar( res, context[29], context[32] );
              res = refalrts::splice_evar( res, context[18], context[21] );
              res = refalrts::splice_evar( res, context[26], context[28] );
              refalrts::splice_to_freelist_open( vm, context[12], res );
              return refalrts::cSuccess;
            } while ( 0 );
            refalrts::stop_sentence(vm);

            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode/12 s.ElemNumber/15 # ElIdent/18 s.NameId/21 e./24 )/8 >/1
            context[24] = context[22];
            context[25] = context[23];
            // closed e. as range 24
            //DEBUG: s.CreateMode: 12
            //DEBUG: s.ElemNumber: 15
            //DEBUG: s.NameId: 21
            //DEBUG: e.: 24

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} s.ElemNumber/15 {REMOVED TILE} s.NameId/21 e./24 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1@3/4 HalfReuse: s.NameId21 /7 HalfReuse: s.ElemNumber15 /9 } </26 & NumberFromOpcode*119/27 Tile{ AsIs: s.CreateMode/12 } Tile{ AsIs: # ElIdent/18 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[26]);
            refalrts::alloc_name(vm, context[27], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1Z3]);
            refalrts::reinit_svar( context[7], context[21] );
            refalrts::reinit_svar( context[9], context[15] );
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[26] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[8];
            res = refalrts::splice_elem( res, context[18] );
            res = refalrts::splice_elem( res, context[12] );
            res = refalrts::splice_evar( res, context[26], context[27] );
            refalrts::splice_to_freelist_open( vm, context[9], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new19/12 s.new20/15 # ElString/18 s.new21/21 )/8 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElString], context[18] ) )
            continue;
          if( ! refalrts::empty_seq( context[19], context[20] ) )
            continue;
          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Allocate/12 s.ElemNumber/15 # ElString/18 s.StringId/21 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_Allocate], context[12] ) )
              continue;
            //DEBUG: s.ElemNumber: 15
            //DEBUG: s.StringId: 21

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 80/7 HalfReuse: (/9 HalfReuse: 0/12 } )/22 0/23 </24 Tile{ HalfReuse: & Divmod/18 AsIs: s.StringId/21 HalfReuse: 256/8 AsIs: >/1 } </25 & Divmod/26 Tile{ AsIs: s.ElemNumber/15 } 256/27 >/28 >/29 Tile{ ]] }
            refalrts::alloc_close_bracket(vm, context[22]);
            refalrts::alloc_number(vm, context[23], 0UL);
            refalrts::alloc_open_call(vm, context[24]);
            refalrts::alloc_open_call(vm, context[25]);
            refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[27], 256UL);
            refalrts::alloc_close_call(vm, context[28]);
            refalrts::alloc_close_call(vm, context[29]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[7], 80UL);
            refalrts::reinit_open_bracket(context[9]);
            refalrts::reinit_number(context[12], 0UL);
            refalrts::reinit_name(context[18], functions[efunc_Divmod]);
            refalrts::reinit_number(context[8], 256UL);
            refalrts::push_stack( vm, context[29] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[28] );
            refalrts::push_stack( vm, context[25] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[24] );
            refalrts::link_brackets( context[9], context[22] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[27], context[29] );
            res = refalrts::splice_elem( res, context[15] );
            res = refalrts::splice_evar( res, context[25], context[26] );
            res = refalrts::splice_evar( res, context[18], context[1] );
            res = refalrts::splice_evar( res, context[22], context[24] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode/12 s.ElemNumber/15 # ElString/18 s.StringId/21 )/8 >/1
          //DEBUG: s.CreateMode: 12
          //DEBUG: s.ElemNumber: 15
          //DEBUG: s.StringId: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.ElemNumber/15 {REMOVED TILE} s.StringId/21 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1@3/4 HalfReuse: s.StringId21 /7 HalfReuse: s.ElemNumber15 /9 } </22 & NumberFromOpcode*119/23 Tile{ AsIs: s.CreateMode/12 } Tile{ AsIs: # ElString/18 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[22]);
          refalrts::alloc_name(vm, context[23], functions[efunc_gen_NumberFromOpcode_D119]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1Z3]);
          refalrts::reinit_svar( context[7], context[21] );
          refalrts::reinit_svar( context[9], context[15] );
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_elem( res, context[18] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[22], context[23] );
          refalrts::splice_to_freelist_open( vm, context[9], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new14/12 s.new15/15 # ElClosureHead/18 )/8 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElClosureHead], context[18] ) )
            continue;
          if( ! refalrts::empty_seq( context[16], context[17] ) )
            continue;
          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Allocate/12 s.ElemNumber/15 # ElClosureHead/18 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_Allocate], context[12] ) )
              continue;
            //DEBUG: s.ElemNumber: 15

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } </19 & PutCommand$3:1/20 113/21 (/22 0/23 )/24 0/25 (/26 Tile{ HalfReuse: 0/0 HalfReuse: )/4 HalfReuse: 0/7 HalfReuse: </9 HalfReuse: & Divmod/12 AsIs: s.ElemNumber/15 HalfReuse: 256/18 HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[19]);
            refalrts::alloc_name(vm, context[20], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::alloc_number(vm, context[21], 113UL);
            refalrts::alloc_open_bracket(vm, context[22]);
            refalrts::alloc_number(vm, context[23], 0UL);
            refalrts::alloc_close_bracket(vm, context[24]);
            refalrts::alloc_number(vm, context[25], 0UL);
            refalrts::alloc_open_bracket(vm, context[26]);
            refalrts::reinit_number(context[0], 0UL);
            refalrts::reinit_close_bracket(context[4]);
            refalrts::reinit_number(context[7], 0UL);
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_name(context[12], functions[efunc_Divmod]);
            refalrts::reinit_number(context[18], 256UL);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[19] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[9] );
            refalrts::link_brackets( context[26], context[4] );
            refalrts::link_brackets( context[22], context[24] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[0];
            res = refalrts::splice_evar( res, context[19], context[26] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Reinit/12 s.ElemNumber/15 # ElClosureHead/18 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_Reinit], context[12] ) )
              continue;
            //DEBUG: s.ElemNumber: 15

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ } </19 & PutCommand$3:1/20 87/21 (/22 0/23 )/24 0/25 (/26 Tile{ HalfReuse: 0/0 HalfReuse: )/4 HalfReuse: 0/7 HalfReuse: </9 HalfReuse: & Divmod/12 AsIs: s.ElemNumber/15 HalfReuse: 256/18 HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_open_call(vm, context[19]);
            refalrts::alloc_name(vm, context[20], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::alloc_number(vm, context[21], 87UL);
            refalrts::alloc_open_bracket(vm, context[22]);
            refalrts::alloc_number(vm, context[23], 0UL);
            refalrts::alloc_close_bracket(vm, context[24]);
            refalrts::alloc_number(vm, context[25], 0UL);
            refalrts::alloc_open_bracket(vm, context[26]);
            refalrts::reinit_number(context[0], 0UL);
            refalrts::reinit_close_bracket(context[4]);
            refalrts::reinit_number(context[7], 0UL);
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_name(context[12], functions[efunc_Divmod]);
            refalrts::reinit_number(context[18], 256UL);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[19] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[9] );
            refalrts::link_brackets( context[26], context[4] );
            refalrts::link_brackets( context[22], context[24] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[0];
            res = refalrts::splice_evar( res, context[19], context[26] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode/12 s.ElemNumber/15 # ElClosureHead/18 )/8 >/1
          //DEBUG: s.CreateMode: 12
          //DEBUG: s.ElemNumber: 15

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.ElemNumber/15 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1@1/4 HalfReuse: s.ElemNumber15 /7 HalfReuse: </9 } & NumberFromOpcode*119/19 Tile{ AsIs: s.CreateMode/12 } Tile{ AsIs: # ElClosureHead/18 HalfReuse: >/8 AsIs: >/1 ]] }
          refalrts::alloc_name(vm, context[19], functions[efunc_gen_NumberFromOpcode_D119]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1Z1]);
          refalrts::reinit_svar( context[7], context[15] );
          refalrts::reinit_open_call(context[9]);
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[9] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[18];
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_elem( res, context[19] );
          refalrts::splice_to_freelist_open( vm, context[9], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new14/12 s.new15/15 # ElUnwrappedClosure/18 s.new16/21 )/8 >/1
          context[19] = context[16];
          context[20] = context[17];
          if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[18] ) )
            continue;
          if( ! refalrts::svar_left( context[21], context[19], context[20] ) )
            continue;
          if( ! refalrts::empty_seq( context[19], context[20] ) )
            continue;
          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Allocate/12 s.ElemNumber/15 # ElUnwrappedClosure/18 s.HeadCounter/21 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_Allocate], context[12] ) )
              continue;
            //DEBUG: s.ElemNumber: 15
            //DEBUG: s.HeadCounter: 21

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 114/7 HalfReuse: (/9 HalfReuse: 0/12 } )/22 0/23 </24 Tile{ HalfReuse: & Divmod/18 AsIs: s.HeadCounter/21 HalfReuse: 256/8 AsIs: >/1 } </25 & Divmod/26 Tile{ AsIs: s.ElemNumber/15 } 256/27 >/28 >/29 Tile{ ]] }
            refalrts::alloc_close_bracket(vm, context[22]);
            refalrts::alloc_number(vm, context[23], 0UL);
            refalrts::alloc_open_call(vm, context[24]);
            refalrts::alloc_open_call(vm, context[25]);
            refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[27], 256UL);
            refalrts::alloc_close_call(vm, context[28]);
            refalrts::alloc_close_call(vm, context[29]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[7], 114UL);
            refalrts::reinit_open_bracket(context[9]);
            refalrts::reinit_number(context[12], 0UL);
            refalrts::reinit_name(context[18], functions[efunc_Divmod]);
            refalrts::reinit_number(context[8], 256UL);
            refalrts::push_stack( vm, context[29] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[28] );
            refalrts::push_stack( vm, context[25] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[24] );
            refalrts::link_brackets( context[9], context[22] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[27], context[29] );
            res = refalrts::splice_elem( res, context[15] );
            res = refalrts::splice_evar( res, context[25], context[26] );
            res = refalrts::splice_evar( res, context[18], context[1] );
            res = refalrts::splice_evar( res, context[22], context[24] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 # Reinit/12 s.ElemNumber/15 # ElUnwrappedClosure/18 s.HeadCounter/21 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_Reinit], context[12] ) )
              continue;
            //DEBUG: s.ElemNumber: 15
            //DEBUG: s.HeadCounter: 21

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 88/7 HalfReuse: (/9 HalfReuse: 0/12 } )/22 0/23 </24 Tile{ HalfReuse: & Divmod/18 AsIs: s.HeadCounter/21 HalfReuse: 256/8 AsIs: >/1 } </25 & Divmod/26 Tile{ AsIs: s.ElemNumber/15 } 256/27 >/28 >/29 Tile{ ]] }
            refalrts::alloc_close_bracket(vm, context[22]);
            refalrts::alloc_number(vm, context[23], 0UL);
            refalrts::alloc_open_call(vm, context[24]);
            refalrts::alloc_open_call(vm, context[25]);
            refalrts::alloc_name(vm, context[26], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[27], 256UL);
            refalrts::alloc_close_call(vm, context[28]);
            refalrts::alloc_close_call(vm, context[29]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[7], 88UL);
            refalrts::reinit_open_bracket(context[9]);
            refalrts::reinit_number(context[12], 0UL);
            refalrts::reinit_name(context[18], functions[efunc_Divmod]);
            refalrts::reinit_number(context[8], 256UL);
            refalrts::push_stack( vm, context[29] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[28] );
            refalrts::push_stack( vm, context[25] );
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[24] );
            refalrts::link_brackets( context[9], context[22] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = arg_end->next;
            res = refalrts::splice_evar( res, context[27], context[29] );
            res = refalrts::splice_elem( res, context[15] );
            res = refalrts::splice_evar( res, context[25], context[26] );
            res = refalrts::splice_evar( res, context[18], context[1] );
            res = refalrts::splice_evar( res, context[22], context[24] );
            refalrts::use( res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode/12 s.ElemNumber/15 # ElUnwrappedClosure/18 s.HeadCounter/21 )/8 >/1
          //DEBUG: s.CreateMode: 12
          //DEBUG: s.ElemNumber: 15
          //DEBUG: s.HeadCounter: 21

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} s.ElemNumber/15 {REMOVED TILE} s.HeadCounter/21 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1@3/4 HalfReuse: s.HeadCounter21 /7 HalfReuse: s.ElemNumber15 /9 } </22 & NumberFromOpcode*119/23 Tile{ AsIs: s.CreateMode/12 } Tile{ AsIs: # ElUnwrappedClosure/18 } Tile{ HalfReuse: >/8 AsIs: >/1 ]] }
          refalrts::alloc_open_call(vm, context[22]);
          refalrts::alloc_name(vm, context[23], functions[efunc_gen_NumberFromOpcode_D119]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1Z3]);
          refalrts::reinit_svar( context[7], context[21] );
          refalrts::reinit_svar( context[9], context[15] );
          refalrts::reinit_close_call(context[8]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[8] );
          refalrts::push_stack( vm, context[22] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[8];
          res = refalrts::splice_elem( res, context[18] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[22], context[23] );
          refalrts::splice_to_freelist_open( vm, context[9], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.new14/12 s.new15/15 s.new16/18 )/8 >/1
          if( ! refalrts::empty_seq( context[16], context[17] ) )
            continue;
          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode/12 s.ElemNumber/15 # ElOpenADT/18 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_ElOpenADT], context[18] ) )
              continue;
            //DEBUG: s.CreateMode: 12
            //DEBUG: s.ElemNumber: 15

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} s.ElemNumber/15 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1@1/4 HalfReuse: s.ElemNumber15 /7 HalfReuse: </9 } & NumberFromOpcode*119/19 Tile{ AsIs: s.CreateMode/12 } Tile{ AsIs: # ElOpenADT/18 HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_name(vm, context[19], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1Z1]);
            refalrts::reinit_svar( context[7], context[15] );
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[18];
            res = refalrts::splice_elem( res, context[12] );
            res = refalrts::splice_elem( res, context[19] );
            refalrts::splice_to_freelist_open( vm, context[9], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode/12 s.ElemNumber/15 # ElOpenBracket/18 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_ElOpenBracket], context[18] ) )
              continue;
            //DEBUG: s.CreateMode: 12
            //DEBUG: s.ElemNumber: 15

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} s.ElemNumber/15 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1@7/4 HalfReuse: s.ElemNumber15 /7 HalfReuse: </9 } & NumberFromOpcode*119/19 Tile{ AsIs: s.CreateMode/12 } Tile{ AsIs: # ElOpenBracket/18 HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_name(vm, context[19], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1Z7]);
            refalrts::reinit_svar( context[7], context[15] );
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[18];
            res = refalrts::splice_elem( res, context[12] );
            res = refalrts::splice_elem( res, context[19] );
            refalrts::splice_to_freelist_open( vm, context[9], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode/12 s.ElemNumber/15 # ElOpenCall/18 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_ElOpenCall], context[18] ) )
              continue;
            //DEBUG: s.CreateMode: 12
            //DEBUG: s.ElemNumber: 15

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} s.ElemNumber/15 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1@8/4 HalfReuse: s.ElemNumber15 /7 HalfReuse: </9 } & NumberFromOpcode*119/19 Tile{ AsIs: s.CreateMode/12 } Tile{ AsIs: # ElOpenCall/18 HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_name(vm, context[19], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1Z8]);
            refalrts::reinit_svar( context[7], context[15] );
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[18];
            res = refalrts::splice_elem( res, context[12] );
            res = refalrts::splice_elem( res, context[19] );
            refalrts::splice_to_freelist_open( vm, context[9], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode/12 s.ElemNumber/15 # ElCloseADT/18 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_ElCloseADT], context[18] ) )
              continue;
            //DEBUG: s.CreateMode: 12
            //DEBUG: s.ElemNumber: 15

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} s.ElemNumber/15 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1@10/4 HalfReuse: s.ElemNumber15 /7 HalfReuse: </9 } & NumberFromOpcode*119/19 Tile{ AsIs: s.CreateMode/12 } Tile{ AsIs: # ElCloseADT/18 HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_name(vm, context[19], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1Z10]);
            refalrts::reinit_svar( context[7], context[15] );
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[18];
            res = refalrts::splice_elem( res, context[12] );
            res = refalrts::splice_elem( res, context[19] );
            refalrts::splice_to_freelist_open( vm, context[9], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode/12 s.ElemNumber/15 # ElCloseBracket/18 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_ElCloseBracket], context[18] ) )
              continue;
            //DEBUG: s.CreateMode: 12
            //DEBUG: s.ElemNumber: 15

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} s.ElemNumber/15 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1@9/4 HalfReuse: s.ElemNumber15 /7 HalfReuse: </9 } & NumberFromOpcode*119/19 Tile{ AsIs: s.CreateMode/12 } Tile{ AsIs: # ElCloseBracket/18 HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_name(vm, context[19], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1Z9]);
            refalrts::reinit_svar( context[7], context[15] );
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[18];
            res = refalrts::splice_elem( res, context[12] );
            res = refalrts::splice_elem( res, context[19] );
            refalrts::splice_to_freelist_open( vm, context[9], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode/12 s.ElemNumber/15 # ElCloseCall/18 )/8 >/1
            if( ! refalrts::ident_term( identifiers[ident_ElCloseCall], context[18] ) )
              continue;
            //DEBUG: s.CreateMode: 12
            //DEBUG: s.ElemNumber: 15

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} {REMOVED TILE} s.ElemNumber/15 {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1@11/4 HalfReuse: s.ElemNumber15 /7 HalfReuse: </9 } & NumberFromOpcode*119/19 Tile{ AsIs: s.CreateMode/12 } Tile{ AsIs: # ElCloseCall/18 HalfReuse: >/8 AsIs: >/1 ]] }
            refalrts::alloc_name(vm, context[19], functions[efunc_gen_NumberFromOpcode_D119]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1Z11]);
            refalrts::reinit_svar( context[7], context[15] );
            refalrts::reinit_open_call(context[9]);
            refalrts::reinit_close_call(context[8]);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[8] );
            refalrts::push_stack( vm, context[9] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[18];
            res = refalrts::splice_elem( res, context[12] );
            res = refalrts::splice_elem( res, context[19] );
            refalrts::splice_to_freelist_open( vm, context[9], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode/12 s.ElemNumber/15 s.ElementType/18 )/8 >/1
          //DEBUG: s.CreateMode: 12
          //DEBUG: s.ElemNumber: 15
          //DEBUG: s.ElementType: 18

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.CreateMode/12 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand/4 AsIs: (/7 HalfReuse: s.CreateMode12 /9 } Tile{ AsIs: s.ElementType/18 AsIs: )/8 HalfReuse: 0/1 } </19 & NumberFromBracket*6/20 s.ElementType/18/21 >/22 Tile{ AsIs: s.ElemNumber/15 } >/23 Tile{ ]] }
          refalrts::alloc_open_call(vm, context[19]);
          refalrts::alloc_name(vm, context[20], functions[efunc_gen_NumberFromBracket_D6]);
          refalrts::copy_stvar(vm, context[21], context[18]);
          refalrts::alloc_close_call(vm, context[22]);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::update_name(context[4], functions[efunc_PutCommand]);
          refalrts::reinit_svar( context[9], context[12] );
          refalrts::reinit_number(context[1], 0UL);
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[22] );
          refalrts::push_stack( vm, context[19] );
          refalrts::link_brackets( context[7], context[8] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = arg_end->next;
          res = refalrts::splice_elem( res, context[23] );
          res = refalrts::splice_elem( res, context[15] );
          res = refalrts::splice_evar( res, context[19], context[22] );
          res = refalrts::splice_evar( res, context[18], context[1] );
          refalrts::splice_to_freelist_open( vm, context[9], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & GenCommand-RASL/4 (/7 # CmdCreateElem/9 s.CreateMode/12 s.ElemNumber/15 s.ElementType/18 e.Info/19 )/8 >/1
        context[19] = context[16];
        context[20] = context[17];
        // closed e.Info as range 19
        //DEBUG: s.CreateMode: 12
        //DEBUG: s.ElemNumber: 15
        //DEBUG: s.ElementType: 18
        //DEBUG: e.Info: 19

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.CreateMode/12 s.ElemNumber/15 {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand/4 AsIs: (/7 HalfReuse: s.CreateMode12 /9 } s.ElementType/18/21 )/22 0/23 </24 & CreateCommandInfo*8/25 Tile{ AsIs: s.ElementType/18 AsIs: e.Info/19 HalfReuse: >/8 HalfReuse: s.ElemNumber15 /1 } >/26 Tile{ ]] }
        refalrts::copy_stvar(vm, context[21], context[18]);
        refalrts::alloc_close_bracket(vm, context[22]);
        refalrts::alloc_number(vm, context[23], 0UL);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_gen_CreateCommandInfo_D8]);
        refalrts::alloc_close_call(vm, context[26]);
        refalrts::update_name(context[4], functions[efunc_PutCommand]);
        refalrts::reinit_svar( context[9], context[12] );
        refalrts::reinit_close_call(context[8]);
        refalrts::reinit_svar( context[1], context[15] );
        refalrts::push_stack( vm, context[26] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[24] );
        refalrts::link_brackets( context[7], context[22] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[26] );
        res = refalrts::splice_evar( res, context[18], context[1] );
        res = refalrts::splice_evar( res, context[21], context[25] );
        refalrts::splice_to_freelist_open( vm, context[9], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/7 # CmdLinkBrackets/9 s.Left/12 s.Right/15 )/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdLinkBrackets], context[9] ) )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      //DEBUG: s.Left: 12
      //DEBUG: s.Right: 15

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 94/7 HalfReuse: </9 } & Divmod/16 Tile{ AsIs: s.Left/12 } 256/17 >/18 </19 & Divmod/20 Tile{ AsIs: s.Right/15 HalfReuse: 256/8 AsIs: >/1 } (/21 0/22 )/23 0/24 >/25 Tile{ ]] }
      refalrts::alloc_name(vm, context[16], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[17], 256UL);
      refalrts::alloc_close_call(vm, context[18]);
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::alloc_name(vm, context[20], functions[efunc_Divmod]);
      refalrts::alloc_open_bracket(vm, context[21]);
      refalrts::alloc_number(vm, context[22], 0UL);
      refalrts::alloc_close_bracket(vm, context[23]);
      refalrts::alloc_number(vm, context[24], 0UL);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[7], 94UL);
      refalrts::reinit_open_call(context[9]);
      refalrts::reinit_number(context[8], 256UL);
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[21], context[23] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[9] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[21], context[25] );
      res = refalrts::splice_evar( res, context[15], context[1] );
      res = refalrts::splice_evar( res, context[17], context[20] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_elem( res, context[16] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-RASL/4 (/7 # CmdPushStack/9 s.ElemNumber/12 )/8 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdPushStack], context[9] ) )
      continue;
    if( ! refalrts::empty_seq( context[10], context[11] ) )
      continue;
    //DEBUG: s.ElemNumber: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & PutCommand$3:1/14 95/15 (/16 0/17 )/18 0/19 (/20 0/21 Tile{ HalfReuse: )/0 HalfReuse: 0/4 HalfReuse: </7 HalfReuse: & Divmod/9 AsIs: s.ElemNumber/12 HalfReuse: 256/8 AsIs: >/1 } >/22 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::alloc_number(vm, context[15], 95UL);
    refalrts::alloc_open_bracket(vm, context[16]);
    refalrts::alloc_number(vm, context[17], 0UL);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_number(vm, context[19], 0UL);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_number(vm, context[21], 0UL);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::reinit_close_bracket(context[0]);
    refalrts::reinit_number(context[4], 0UL);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[9], functions[efunc_Divmod]);
    refalrts::reinit_number(context[8], 256UL);
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[20], context[0] );
    refalrts::link_brackets( context[16], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[13], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-RASL/4 (/7 # CmdPushState/9 )/8 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdPushState], context[9] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 116/4 HalfReuse: 0/7 HalfReuse: 0/9 HalfReuse: 0/8 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_number(context[4], 116UL);
    refalrts::reinit_number(context[7], 0UL);
    refalrts::reinit_number(context[9], 0UL);
    refalrts::reinit_number(context[8], 0UL);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-RASL/4 (/7 s.new3/9 e.new4/10 s.new5/12 )/8 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::svar_right( context[12], context[10], context[11] ) )
      continue;
    // closed e.new4 as range 10
    do {
      // </0 & GenCommand-RASL/4 (/7 s.new6/9 s.new7/12 )/8 >/1
      if( ! refalrts::empty_seq( context[10], context[11] ) )
        continue;
      do {
        // </0 & GenCommand-RASL/4 (/7 # CmdWrapClosure/9 s.Offset/12 )/8 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdWrapClosure], context[9] ) )
          continue;
        //DEBUG: s.Offset: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </13 & PutCommand$3:1/14 110/15 (/16 0/17 )/18 0/19 (/20 0/21 Tile{ HalfReuse: )/0 HalfReuse: 0/4 HalfReuse: </7 HalfReuse: & Divmod/9 AsIs: s.Offset/12 HalfReuse: 256/8 AsIs: >/1 } >/22 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[13]);
        refalrts::alloc_name(vm, context[14], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::alloc_number(vm, context[15], 110UL);
        refalrts::alloc_open_bracket(vm, context[16]);
        refalrts::alloc_number(vm, context[17], 0UL);
        refalrts::alloc_close_bracket(vm, context[18]);
        refalrts::alloc_number(vm, context[19], 0UL);
        refalrts::alloc_open_bracket(vm, context[20]);
        refalrts::alloc_number(vm, context[21], 0UL);
        refalrts::alloc_close_call(vm, context[22]);
        refalrts::reinit_close_bracket(context[0]);
        refalrts::reinit_number(context[4], 0UL);
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[9], functions[efunc_Divmod]);
        refalrts::reinit_number(context[8], 256UL);
        refalrts::push_stack( vm, context[22] );
        refalrts::push_stack( vm, context[13] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[7] );
        refalrts::link_brackets( context[20], context[0] );
        refalrts::link_brackets( context[16], context[18] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[22] );
        res = refalrts::splice_evar( res, context[0], context[1] );
        res = refalrts::splice_evar( res, context[13], context[21] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/7 # CmdInsertElem/9 s.ElemNumber/12 )/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdInsertElem], context[9] ) )
        continue;
      //DEBUG: s.ElemNumber: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </13 & PutCommand$3:1/14 96/15 (/16 0/17 )/18 0/19 (/20 0/21 Tile{ HalfReuse: )/0 HalfReuse: 0/4 HalfReuse: </7 HalfReuse: & Divmod/9 AsIs: s.ElemNumber/12 HalfReuse: 256/8 AsIs: >/1 } >/22 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::alloc_number(vm, context[15], 96UL);
      refalrts::alloc_open_bracket(vm, context[16]);
      refalrts::alloc_number(vm, context[17], 0UL);
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::alloc_number(vm, context[19], 0UL);
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_number(vm, context[21], 0UL);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::reinit_close_bracket(context[0]);
      refalrts::reinit_number(context[4], 0UL);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[9], functions[efunc_Divmod]);
      refalrts::reinit_number(context[8], 256UL);
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[7] );
      refalrts::link_brackets( context[20], context[0] );
      refalrts::link_brackets( context[16], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[0], context[1] );
      res = refalrts::splice_evar( res, context[13], context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-RASL/4 (/7 # CmdInsertVar/9 s.new7/15 s.new6/12 )/8 >/1
      context[13] = context[10];
      context[14] = context[11];
      if( ! refalrts::ident_term( identifiers[ident_CmdInsertVar], context[9] ) )
        continue;
      if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
        continue;
      if( ! refalrts::empty_seq( context[13], context[14] ) )
        continue;
      do {
        // </0 & GenCommand-RASL/4 (/7 # CmdInsertVar/9 'e'/15 s.Offset/12 )/8 >/1
        if( ! refalrts::char_term( 'e', context[15] ) )
          continue;
        //DEBUG: s.Offset: 12

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </16 & PutCommand$3:1/17 97/18 (/19 0/20 )/21 0/22 (/23 Tile{ HalfReuse: 0/0 HalfReuse: )/4 HalfReuse: 0/7 HalfReuse: </9 HalfReuse: & Divmod/15 AsIs: s.Offset/12 HalfReuse: 256/8 AsIs: >/1 } >/24 Tile{ ]] }
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::alloc_number(vm, context[18], 97UL);
        refalrts::alloc_open_bracket(vm, context[19]);
        refalrts::alloc_number(vm, context[20], 0UL);
        refalrts::alloc_close_bracket(vm, context[21]);
        refalrts::alloc_number(vm, context[22], 0UL);
        refalrts::alloc_open_bracket(vm, context[23]);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::reinit_number(context[0], 0UL);
        refalrts::reinit_close_bracket(context[4]);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_open_call(context[9]);
        refalrts::reinit_name(context[15], functions[efunc_Divmod]);
        refalrts::reinit_number(context[8], 256UL);
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[9] );
        refalrts::link_brackets( context[23], context[4] );
        refalrts::link_brackets( context[19], context[21] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_elem( res, context[24] );
        res = refalrts::splice_evar( res, context[0], context[1] );
        res = refalrts::splice_evar( res, context[16], context[23] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & GenCommand-RASL/4 (/7 # CmdInsertVar/9 s.Mode/15 s.Offset/12 )/8 >/1
      //DEBUG: s.Mode: 15
      //DEBUG: s.Offset: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Mode/15 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 98/7 HalfReuse: (/9 } 0/16 )/17 0/18 (/19 0/20 )/21 0/22 </23 & Divmod/24 Tile{ AsIs: s.Offset/12 HalfReuse: 256/8 AsIs: >/1 } >/25 Tile{ ]] }
      refalrts::alloc_number(vm, context[16], 0UL);
      refalrts::alloc_close_bracket(vm, context[17]);
      refalrts::alloc_number(vm, context[18], 0UL);
      refalrts::alloc_open_bracket(vm, context[19]);
      refalrts::alloc_number(vm, context[20], 0UL);
      refalrts::alloc_close_bracket(vm, context[21]);
      refalrts::alloc_number(vm, context[22], 0UL);
      refalrts::alloc_open_call(vm, context[23]);
      refalrts::alloc_name(vm, context[24], functions[efunc_Divmod]);
      refalrts::alloc_close_call(vm, context[25]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[7], 98UL);
      refalrts::reinit_open_bracket(context[9]);
      refalrts::reinit_number(context[8], 256UL);
      refalrts::push_stack( vm, context[25] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[23] );
      refalrts::link_brackets( context[19], context[21] );
      refalrts::link_brackets( context[9], context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[25] );
      res = refalrts::splice_evar( res, context[12], context[1] );
      res = refalrts::splice_evar( res, context[16], context[24] );
      refalrts::splice_to_freelist_open( vm, context[9], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-RASL/4 (/7 # CmdInsertRange/9 s.ElemNumber/12 )/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdInsertRange], context[9] ) )
        continue;
      if( ! refalrts::empty_seq( context[10], context[11] ) )
        continue;
      //DEBUG: s.ElemNumber: 12

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } </13 & PutCommand$3:1/14 99/15 (/16 0/17 )/18 0/19 (/20 0/21 Tile{ HalfReuse: )/0 HalfReuse: 0/4 HalfReuse: </7 HalfReuse: & Divmod/9 AsIs: s.ElemNumber/12 HalfReuse: 256/8 AsIs: >/1 } >/22 Tile{ ]] }
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::alloc_number(vm, context[15], 99UL);
      refalrts::alloc_open_bracket(vm, context[16]);
      refalrts::alloc_number(vm, context[17], 0UL);
      refalrts::alloc_close_bracket(vm, context[18]);
      refalrts::alloc_number(vm, context[19], 0UL);
      refalrts::alloc_open_bracket(vm, context[20]);
      refalrts::alloc_number(vm, context[21], 0UL);
      refalrts::alloc_close_call(vm, context[22]);
      refalrts::reinit_close_bracket(context[0]);
      refalrts::reinit_number(context[4], 0UL);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[9], functions[efunc_Divmod]);
      refalrts::reinit_number(context[8], 256UL);
      refalrts::push_stack( vm, context[22] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[7] );
      refalrts::link_brackets( context[20], context[0] );
      refalrts::link_brackets( context[16], context[18] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_evar( res, context[0], context[1] );
      res = refalrts::splice_evar( res, context[13], context[21] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-RASL/4 (/7 # CmdInsertTile/9 s.BeginOffset/15 s.EndOffset/12 )/8 >/1
    context[13] = context[10];
    context[14] = context[11];
    if( ! refalrts::ident_term( identifiers[ident_CmdInsertTile], context[9] ) )
      continue;
    if( ! refalrts::svar_left( context[15], context[13], context[14] ) )
      continue;
    if( ! refalrts::empty_seq( context[13], context[14] ) )
      continue;
    //DEBUG: s.EndOffset: 12
    //DEBUG: s.BeginOffset: 15

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 100/7 HalfReuse: </9 } & Divmod/16 Tile{ AsIs: s.BeginOffset/15 } 256/17 >/18 </19 & Divmod/20 Tile{ AsIs: s.EndOffset/12 HalfReuse: 256/8 AsIs: >/1 } (/21 0/22 )/23 0/24 >/25 Tile{ ]] }
    refalrts::alloc_name(vm, context[16], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[17], 256UL);
    refalrts::alloc_close_call(vm, context[18]);
    refalrts::alloc_open_call(vm, context[19]);
    refalrts::alloc_name(vm, context[20], functions[efunc_Divmod]);
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_number(vm, context[22], 0UL);
    refalrts::alloc_close_bracket(vm, context[23]);
    refalrts::alloc_number(vm, context[24], 0UL);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::reinit_number(context[7], 100UL);
    refalrts::reinit_open_call(context[9]);
    refalrts::reinit_number(context[8], 256UL);
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[21], context[23] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[21], context[25] );
    res = refalrts::splice_evar( res, context[12], context[1] );
    res = refalrts::splice_evar( res, context[17], context[20] );
    res = refalrts::splice_elem( res, context[15] );
    res = refalrts::splice_elem( res, context[16] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-RASL/4 (/7 # CmdSpliceToFreeList/9 )/8 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdSpliceToFreeList], context[9] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 101/4 HalfReuse: 0/7 HalfReuse: 0/9 HalfReuse: 0/8 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_number(context[4], 101UL);
    refalrts::reinit_number(context[7], 0UL);
    refalrts::reinit_number(context[9], 0UL);
    refalrts::reinit_number(context[8], 0UL);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-RASL/4 (/7 # CmdSpliceToFreeList-Range/9 s.Start/12 s.End/13 )/8 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_CmdSpliceToFreeListm_Range], context[9] ) )
      continue;
    if( ! refalrts::svar_left( context[12], context[10], context[11] ) )
      continue;
    if( ! refalrts::svar_left( context[13], context[10], context[11] ) )
      continue;
    if( ! refalrts::empty_seq( context[10], context[11] ) )
      continue;
    //DEBUG: s.Start: 12
    //DEBUG: s.End: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 115/7 HalfReuse: </9 } & Divmod/14 Tile{ AsIs: s.Start/12 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.End/13 HalfReuse: 256/8 AsIs: >/1 } (/19 0/20 )/21 0/22 >/23 Tile{ ]] }
    refalrts::alloc_name(vm, context[14], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[15], 256UL);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
    refalrts::alloc_open_bracket(vm, context[19]);
    refalrts::alloc_number(vm, context[20], 0UL);
    refalrts::alloc_close_bracket(vm, context[21]);
    refalrts::alloc_number(vm, context[22], 0UL);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::reinit_number(context[7], 115UL);
    refalrts::reinit_open_call(context[9]);
    refalrts::reinit_number(context[8], 256UL);
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[19], context[21] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[9] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[19], context[23] );
    res = refalrts::splice_evar( res, context[13], context[1] );
    res = refalrts::splice_evar( res, context[15], context[18] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_elem( res, context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-RASL/4 (/7 # CmdNextStep/9 )/8 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdNextStep], context[9] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 102/4 HalfReuse: 0/7 HalfReuse: 0/9 HalfReuse: 0/8 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_number(context[4], 102UL);
    refalrts::reinit_number(context[7], 0UL);
    refalrts::reinit_number(context[9], 0UL);
    refalrts::reinit_number(context[8], 0UL);
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-RASL/4 (/7 # CmdTrash/9 s.new3/12 )/8 >/1
    context[10] = context[5];
    context[11] = context[6];
    if( ! refalrts::ident_term( identifiers[ident_CmdTrash], context[9] ) )
      continue;
    if( ! refalrts::svar_left( context[12], context[10], context[11] ) )
      continue;
    if( ! refalrts::empty_seq( context[10], context[11] ) )
      continue;
    do {
      // </0 & GenCommand-RASL/4 (/7 # CmdTrash/9 # LEFT-EDGE/12 )/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_LEFTm_EDGE], context[12] ) )
        continue;

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} >/1 {REMOVED TILE}
      //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 103/4 HalfReuse: 0/7 HalfReuse: 0/9 HalfReuse: 0/12 AsIs: )/8 } Tile{ ]] }
      refalrts::reinit_open_bracket(context[0]);
      refalrts::reinit_number(context[4], 103UL);
      refalrts::reinit_number(context[7], 0UL);
      refalrts::reinit_number(context[9], 0UL);
      refalrts::reinit_number(context[12], 0UL);
      refalrts::link_brackets( context[0], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-RASL/4 (/7 # CmdTrash/9 s.Offset/12 )/8 >/1
    //DEBUG: s.Offset: 12

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } </13 & PutCommand$3:1/14 104/15 (/16 0/17 )/18 0/19 (/20 0/21 Tile{ HalfReuse: )/0 HalfReuse: 0/4 HalfReuse: </7 HalfReuse: & Divmod/9 AsIs: s.Offset/12 HalfReuse: 256/8 AsIs: >/1 } >/22 Tile{ ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::alloc_number(vm, context[15], 104UL);
    refalrts::alloc_open_bracket(vm, context[16]);
    refalrts::alloc_number(vm, context[17], 0UL);
    refalrts::alloc_close_bracket(vm, context[18]);
    refalrts::alloc_number(vm, context[19], 0UL);
    refalrts::alloc_open_bracket(vm, context[20]);
    refalrts::alloc_number(vm, context[21], 0UL);
    refalrts::alloc_close_call(vm, context[22]);
    refalrts::reinit_close_bracket(context[0]);
    refalrts::reinit_number(context[4], 0UL);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[9], functions[efunc_Divmod]);
    refalrts::reinit_number(context[8], 256UL);
    refalrts::push_stack( vm, context[22] );
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[7] );
    refalrts::link_brackets( context[20], context[0] );
    refalrts::link_brackets( context[16], context[18] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[22] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[13], context[21] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenCommand-RASL/4 (/7 # CmdFail/9 )/8 >/1
  if( ! refalrts::ident_term( identifiers[ident_CmdFail], context[9] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[5], context[6] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 105/4 HalfReuse: 0/7 HalfReuse: 0/9 HalfReuse: 0/8 HalfReuse: )/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_number(context[4], 105UL);
  refalrts::reinit_number(context[7], 0UL);
  refalrts::reinit_number(context[9], 0UL);
  refalrts::reinit_number(context[8], 0UL);
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[0], context[1] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_GenCommandm_RASL("GenCommand-RASL", COOKIE1_, COOKIE2_, func_GenCommandm_RASL);


static refalrts::FnResult func_gen_PutCommand_S3B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 34 elems
  refalrts::Iter context[34];
  refalrts::zeros( context, 34 );
  // </0 & PutCommand$3:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PutCommand$3:1/4 s.new1/5 (/8 s.new2/10 )/9 s.new3/11 (/14 s.new4/16 )/15 s.new5/17 (/20 s.new6/22 )/21 s.new7/23 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  if( ! refalrts::svar_left( context[10], context[6], context[7] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[6], context[7] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[12] = 0;
  context[13] = 0;
  context[14] = refalrts::brackets_left( context[12], context[13], context[2], context[3] );
  if( ! context[14] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[14], context[15]);
  if( ! refalrts::svar_left( context[16], context[12], context[13] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[12], context[13] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[17], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[18] = 0;
  context[19] = 0;
  context[20] = refalrts::brackets_left( context[18], context[19], context[2], context[3] );
  if( ! context[20] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[20], context[21]);
  if( ! refalrts::svar_left( context[22], context[18], context[19] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[18], context[19] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[23], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & PutCommand$3:1/4 s.OpCode/5 (/8 0/10 )/9 s.LoArg1/11 (/14 0/16 )/15 s.LoArg2/17 (/20 0/22 )/21 s.LoArg3/23 >/1
    if( ! refalrts::number_term( 0UL, context[10] ) )
      continue;
    if( ! refalrts::number_term( 0UL, context[16] ) )
      continue;
    if( ! refalrts::number_term( 0UL, context[22] ) )
      continue;
    //DEBUG: s.OpCode: 5
    //DEBUG: s.LoArg1: 11
    //DEBUG: s.LoArg2: 17
    //DEBUG: s.LoArg3: 23

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} & PutCommand$3:1/4 s.OpCode/5 (/8 0/10 )/9 s.LoArg1/11 (/14 0/16 )/15 s.LoArg2/17 {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ HalfReuse: s.OpCode5 /20 HalfReuse: s.LoArg111 /22 HalfReuse: s.LoArg217 /21 AsIs: s.LoArg3/23 HalfReuse: )/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_svar( context[20], context[5] );
    refalrts::reinit_svar( context[22], context[11] );
    refalrts::reinit_svar( context[21], context[17] );
    refalrts::reinit_close_bracket(context[1]);
    refalrts::link_brackets( context[0], context[1] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[20];
    refalrts::splice_to_freelist_open( vm, context[0], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutCommand$3:1/4 s.OpCode/5 (/8 s.HiArg1/10 )/9 s.LoArg1/11 (/14 s.HiArg2/16 )/15 s.LoArg2/17 (/20 s.HiArg3/22 )/21 s.LoArg3/23 >/1
  //DEBUG: s.OpCode: 5
  //DEBUG: s.HiArg1: 10
  //DEBUG: s.LoArg1: 11
  //DEBUG: s.HiArg2: 16
  //DEBUG: s.LoArg2: 17
  //DEBUG: s.HiArg3: 22
  //DEBUG: s.LoArg3: 23

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.LoArg2/17 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 AsIs: & PutCommand$3:1/4 } 111/24 </25 Tile{ HalfReuse: & Divmod/8 AsIs: s.HiArg1/10 HalfReuse: 256/9 } >/26 </27 Tile{ HalfReuse: & Divmod/14 AsIs: s.HiArg2/16 HalfReuse: 256/15 } >/28 </29 Tile{ HalfReuse: & Divmod/20 AsIs: s.HiArg3/22 } 256/30 >/31 >/32 (/33 Tile{ AsIs: s.OpCode/5 } Tile{ AsIs: s.LoArg1/11 } Tile{ HalfReuse: s.LoArg217 /21 AsIs: s.LoArg3/23 HalfReuse: )/1 ]] }
  refalrts::alloc_number(vm, context[24], 111UL);
  refalrts::alloc_open_call(vm, context[25]);
  refalrts::alloc_close_call(vm, context[26]);
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_close_call(vm, context[28]);
  refalrts::alloc_open_call(vm, context[29]);
  refalrts::alloc_number(vm, context[30], 256UL);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::alloc_close_call(vm, context[32]);
  refalrts::alloc_open_bracket(vm, context[33]);
  refalrts::reinit_name(context[8], functions[efunc_Divmod]);
  refalrts::reinit_number(context[9], 256UL);
  refalrts::reinit_name(context[14], functions[efunc_Divmod]);
  refalrts::reinit_number(context[15], 256UL);
  refalrts::reinit_name(context[20], functions[efunc_Divmod]);
  refalrts::reinit_svar( context[21], context[17] );
  refalrts::reinit_close_bracket(context[1]);
  refalrts::link_brackets( context[33], context[1] );
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[29] );
  refalrts::push_stack( vm, context[28] );
  refalrts::push_stack( vm, context[27] );
  refalrts::push_stack( vm, context[26] );
  refalrts::push_stack( vm, context[25] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[21];
  res = refalrts::splice_elem( res, context[11] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[30], context[33] );
  res = refalrts::splice_evar( res, context[20], context[22] );
  res = refalrts::splice_evar( res, context[28], context[29] );
  res = refalrts::splice_evar( res, context[14], context[15] );
  res = refalrts::splice_evar( res, context[26], context[27] );
  res = refalrts::splice_evar( res, context[8], context[9] );
  res = refalrts::splice_evar( res, context[24], context[25] );
  refalrts::splice_to_freelist_open( vm, context[4], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutCommand_S3B1("PutCommand$3:1", COOKIE1_, COOKIE2_, func_gen_PutCommand_S3B1);


static refalrts::FnResult func_gen_PutCommand_S3A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & PutCommand$3=1/4 s.Arg1/5 s.Arg2/6 s.Arg3/7 s.OpCode/8 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[7], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[8], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: s.Arg1: 5
  //DEBUG: s.Arg2: 6
  //DEBUG: s.Arg3: 7
  //DEBUG: s.OpCode: 8

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 } Tile{ AsIs: s.OpCode/8 } </9 & Divmod/10 Tile{ AsIs: s.Arg1/5 } 256/11 >/12 </13 & Divmod/14 Tile{ AsIs: s.Arg2/6 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg3/7 } 256/19 >/20 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[9]);
  refalrts::alloc_name(vm, context[10], functions[efunc_Divmod]);
  refalrts::alloc_number(vm, context[11], 256UL);
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::alloc_name(vm, context[14], functions[efunc_Divmod]);
  refalrts::alloc_number(vm, context[15], 256UL);
  refalrts::alloc_close_call(vm, context[16]);
  refalrts::alloc_open_call(vm, context[17]);
  refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
  refalrts::alloc_number(vm, context[19], 256UL);
  refalrts::alloc_close_call(vm, context[20]);
  refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[17] );
  refalrts::push_stack( vm, context[16] );
  refalrts::push_stack( vm, context[13] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[19], context[20] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[15], context[18] );
  res = refalrts::splice_elem( res, context[6] );
  res = refalrts::splice_evar( res, context[11], context[14] );
  res = refalrts::splice_elem( res, context[5] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_elem( res, context[8] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutCommand_S3A1("PutCommand$3=1", COOKIE1_, COOKIE2_, func_gen_PutCommand_S3A1);


static refalrts::FnResult func_PutCommand(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 28 elems
  refalrts::Iter context[28];
  refalrts::zeros( context, 28 );
  // </0 & PutCommand/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & PutCommand/4 e.new1/5 s.new2/7 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_right( context[7], context[5], context[6] ) )
      continue;
    // closed e.new1 as range 5
    do {
      // </0 & PutCommand/4 s.new3/7 >/1
      if( ! refalrts::empty_seq( context[5], context[6] ) )
        continue;
      do {
        // </0 & PutCommand/4 # CmdProfileFunction/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdProfileFunction], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 0/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 0UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdLoadConstants/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdLoadConstants], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 1/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 1UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdIssueMemory/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdIssueMemory], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 2/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 2UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdReserveBacktrackStack/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdReserveBacktrackStack], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 3/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 3UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdOnFailGoTo/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdOnFailGoTo], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 4/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 4UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdProfilerStopSentence/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdProfilerStopSentence], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 5/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 5UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdInitB0/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdInitB0], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 6/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 6UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdInitB0-Lite/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdInitB0m_Lite], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 7/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 7UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdEmpty/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdEmpty], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 45/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 45UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdNotEmpty/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdNotEmpty], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 46/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 46UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdEPrepare/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdEPrepare], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 64/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 64UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdEStart/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdEStart], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 65/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 65UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdSave/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSave], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 66/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 66UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdResetAllocator/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdResetAllocator], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 67/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 67UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdSetResArgBegin/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSetResArgBegin], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 68/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 68UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdSetResRightEdge/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSetResRightEdge], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 69/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 69UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdSetRes/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSetRes], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 70/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 70UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdCopyEVar/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdCopyEVar], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 71/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 71UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdCopySTVar/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdCopySTVar], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 72/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 72UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdReinitSVar/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdReinitSVar], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 73/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 73UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdLinkBrackets/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdLinkBrackets], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 94/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 94UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdPushStack/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdPushStack], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 95/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 95UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdWrapClosure/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdWrapClosure], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 110/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 110UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdSpliceElem/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSpliceElem], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 96/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 96UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdSpliceEVar/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSpliceEVar], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 97/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 97UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdSpliceSTVar/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSpliceSTVar], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 98/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 98UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdSpliceRange/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSpliceRange], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 99/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 99UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdSpliceTile/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSpliceTile], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 100/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 100UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdSpliceToFreeList/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSpliceToFreeList], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 101/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 101UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdNextStep/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdNextStep], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 102/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 102UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdTrashLeftEdge/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdTrashLeftEdge], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 103/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 103UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdTrash/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdTrash], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 104/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 104UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdFail/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdFail], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 105/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 105UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdFetchSwapHead/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdFetchSwapHead], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 106/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 106UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdFetchSwapInfoBounds/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdFetchSwapInfoBounds], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 107/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 107UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdSwapSave/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSwapSave], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 108/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 108UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdPerformNative/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdPerformNative], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 109/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 109UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdScale/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdScale], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 111/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 111UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdVariableDebugOffset/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdVariableDebugOffset], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 112/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 112UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdSpliceToFreeList-Range/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSpliceToFreeListm_Range], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 115/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 115UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdPushState/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdPushState], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 116/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 116UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdPopState/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdPopState], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 117/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 117UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdMainLoopReturnSuccess/7 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdMainLoopReturnSuccess], context[7] ) )
          continue;

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ HalfReuse: (/0 HalfReuse: 118/4 HalfReuse: 0/7 HalfReuse: 0/1 } 0/8 )/9 Tile{ ]] }
        refalrts::alloc_number(vm, context[8], 0UL);
        refalrts::alloc_close_bracket(vm, context[9]);
        refalrts::reinit_open_bracket(context[0]);
        refalrts::reinit_number(context[4], 118UL);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_number(context[1], 0UL);
        refalrts::link_brackets( context[0], context[9] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = arg_end->next;
        res = refalrts::splice_evar( res, context[8], context[9] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PutCommand/4 s.Symbolic/7 >/1
      //DEBUG: s.Symbolic: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } (/8 Tile{ AsIs: </0 Reuse: & NumberFromOpcode*119/4 AsIs: s.Symbolic/7 AsIs: >/1 } 0/9 0/10 0/11 )/12 Tile{ ]] }
      refalrts::alloc_open_bracket(vm, context[8]);
      refalrts::alloc_number(vm, context[9], 0UL);
      refalrts::alloc_number(vm, context[10], 0UL);
      refalrts::alloc_number(vm, context[11], 0UL);
      refalrts::alloc_close_bracket(vm, context[12]);
      refalrts::update_name(context[4], functions[efunc_gen_NumberFromOpcode_D119]);
      refalrts::link_brackets( context[8], context[12] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[9], context[12] );
      res = refalrts::splice_evar( res, context[0], context[1] );
      res = refalrts::splice_elem( res, context[8] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PutCommand/4 s.new4/10 s.new5/11 s.new6/12 s.new3/7 >/1
    context[8] = context[5];
    context[9] = context[6];
    if( ! refalrts::svar_left( context[10], context[8], context[9] ) )
      continue;
    if( ! refalrts::svar_left( context[11], context[8], context[9] ) )
      continue;
    if( ! refalrts::svar_left( context[12], context[8], context[9] ) )
      continue;
    if( ! refalrts::empty_seq( context[8], context[9] ) )
      continue;
    do {
      // </0 & PutCommand/4 # CmdProfileFunction/10 s.Arg1/11 s.Arg2/12 s.Arg3/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdProfileFunction], context[10] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 0/10 } </13 & Divmod/14 Tile{ AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/7 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[10], 0UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdLoadConstants/10 s.Arg1/11 s.Arg2/12 s.Arg3/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdLoadConstants], context[10] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 1/10 } </13 & Divmod/14 Tile{ AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/7 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[10], 1UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdIssueMemory/10 s.Arg1/11 s.Arg2/12 s.Arg3/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdIssueMemory], context[10] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 2/10 } </13 & Divmod/14 Tile{ AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/7 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[10], 2UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdReserveBacktrackStack/10 s.Arg1/11 s.Arg2/12 s.Arg3/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdReserveBacktrackStack], context[10] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 3/10 } </13 & Divmod/14 Tile{ AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/7 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[10], 3UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdOnFailGoTo/10 s.Arg1/11 s.Arg2/12 s.Arg3/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdOnFailGoTo], context[10] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 4/10 } </13 & Divmod/14 Tile{ AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/7 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[10], 4UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 # CmdProfilerStopSentence/10 s.Arg1/11 s.Arg2/12 s.Arg3/7 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdProfilerStopSentence], context[10] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 7

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 5/10 } </13 & Divmod/14 Tile{ AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/7 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_open_call(vm, context[13]);
      refalrts::alloc_name(vm, context[14], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[10], 5UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[13] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PutCommand/4 # CmdInitB0/10 s.Arg1/11 s.Arg2/12 s.Arg3/7 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdInitB0], context[10] ) )
      continue;
    //DEBUG: s.Arg1: 11
    //DEBUG: s.Arg2: 12
    //DEBUG: s.Arg3: 7

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 6/10 } </13 & Divmod/14 Tile{ AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/7 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[13]);
    refalrts::alloc_name(vm, context[14], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[15], 256UL);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[19], 256UL);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[23], 256UL);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::reinit_number(context[10], 6UL);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[13] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[7] );
    res = refalrts::splice_evar( res, context[19], context[22] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[15], context[18] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutCommand/4 t.new1/7 s.new2/9 s.new3/10 s.new4/11 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[10], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[11], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    do {
      // </0 & PutCommand/4 s.new5/7 s.new6/9 s.new7/10 s.new8/11 >/1
      if( ! refalrts::svar_term( context[7], context[7] ) )
        continue;
      do {
        // </0 & PutCommand/4 # CmdInitB0-Lite/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdInitB0m_Lite], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 7/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 7UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdEmpty/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdEmpty], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 45/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 45UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdNotEmpty/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdNotEmpty], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 46/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 46UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdEPrepare/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdEPrepare], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 64/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 64UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdEStart/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdEStart], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 65/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 65UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdSave/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSave], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 66/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 66UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdResetAllocator/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdResetAllocator], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 67/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 67UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdSetResArgBegin/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSetResArgBegin], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 68/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 68UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdSetResRightEdge/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSetResRightEdge], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 69/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 69UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdSetRes/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSetRes], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 70/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 70UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdCopyEVar/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdCopyEVar], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 71/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 71UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdCopySTVar/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdCopySTVar], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 72/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 72UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdReinitSVar/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdReinitSVar], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 73/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 73UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdLinkBrackets/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdLinkBrackets], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 94/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 94UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdPushStack/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdPushStack], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 95/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 95UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdWrapClosure/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdWrapClosure], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 110/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 110UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdSpliceElem/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSpliceElem], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 96/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 96UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdSpliceEVar/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSpliceEVar], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 97/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 97UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdSpliceSTVar/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSpliceSTVar], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 98/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 98UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdSpliceRange/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSpliceRange], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 99/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 99UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdSpliceTile/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSpliceTile], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 100/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 100UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdSpliceToFreeList/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSpliceToFreeList], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 101/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 101UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdNextStep/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdNextStep], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 102/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 102UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdTrashLeftEdge/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdTrashLeftEdge], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 103/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 103UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdTrash/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdTrash], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 104/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 104UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdFail/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdFail], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 105/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 105UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdFetchSwapHead/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdFetchSwapHead], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 106/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 106UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdFetchSwapInfoBounds/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdFetchSwapInfoBounds], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 107/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 107UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdSwapSave/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSwapSave], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 108/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 108UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdPerformNative/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdPerformNative], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 109/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 109UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdScale/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdScale], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 111/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 111UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdVariableDebugOffset/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdVariableDebugOffset], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 112/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 112UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdSpliceToFreeList-Range/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSpliceToFreeListm_Range], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 115/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 115UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdPushState/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdPushState], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 116/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 116UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdPopState/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdPopState], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 117/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 117UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 # CmdMainLoopReturnSuccess/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdMainLoopReturnSuccess], context[7] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 118/7 } </12 & Divmod/13 Tile{ AsIs: s.Arg1/9 } 256/14 >/15 </16 & Divmod/17 Tile{ AsIs: s.Arg2/10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg3/11 } 256/22 >/23 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[12]);
        refalrts::alloc_name(vm, context[13], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[14], 256UL);
        refalrts::alloc_close_call(vm, context[15]);
        refalrts::alloc_open_call(vm, context[16]);
        refalrts::alloc_name(vm, context[17], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 118UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[15] );
        refalrts::push_stack( vm, context[12] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[22], context[23] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[14], context[17] );
        res = refalrts::splice_elem( res, context[9] );
        res = refalrts::splice_evar( res, context[12], context[13] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PutCommand/4 s.Symbolic/7 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
      //DEBUG: s.Symbolic: 7
      //DEBUG: s.Arg1: 9
      //DEBUG: s.Arg2: 10
      //DEBUG: s.Arg3: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3=1/4 } Tile{ AsIs: s.Arg1/9 AsIs: s.Arg2/10 AsIs: s.Arg3/11 HalfReuse: </1 } & NumberFromOpcode*119/12 Tile{ AsIs: s.Symbolic/7 } >/13 >/14 Tile{ ]] }
      refalrts::alloc_name(vm, context[12], functions[efunc_gen_NumberFromOpcode_D119]);
      refalrts::alloc_close_call(vm, context[13]);
      refalrts::alloc_close_call(vm, context[14]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3A1]);
      refalrts::reinit_open_call(context[1]);
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[13] );
      refalrts::push_stack( vm, context[1] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = arg_end->next;
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_elem( res, context[7] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[9], context[1] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PutCommand/4 (/7 e.new5/12 s.new6/14 )/8 s.new7/9 s.new8/10 s.new9/11 >/1
    context[12] = 0;
    context[13] = 0;
    if( ! refalrts::brackets_term( context[12], context[13], context[7] ) )
      continue;
    if( ! refalrts::svar_right( context[14], context[12], context[13] ) )
      continue;
    // closed e.new5 as range 12
    do {
      // </0 & PutCommand/4 (/7 s.new10/14 )/8 s.new11/9 s.new12/10 s.new13/11 >/1
      if( ! refalrts::empty_seq( context[12], context[13] ) )
        continue;
      do {
        // </0 & PutCommand/4 (/7 # CmdProfileFunction/14 )/8 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdProfileFunction], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 0/7 HalfReuse: </14 HalfReuse: & Divmod/8 AsIs: s.Arg1/9 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/10 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/11 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 0UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[8], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/7 # CmdLoadConstants/14 )/8 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdLoadConstants], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 1/7 HalfReuse: </14 HalfReuse: & Divmod/8 AsIs: s.Arg1/9 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/10 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/11 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 1UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[8], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/7 # CmdIssueMemory/14 )/8 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdIssueMemory], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 2/7 HalfReuse: </14 HalfReuse: & Divmod/8 AsIs: s.Arg1/9 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/10 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/11 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 2UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[8], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/7 # CmdReserveBacktrackStack/14 )/8 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdReserveBacktrackStack], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 3/7 HalfReuse: </14 HalfReuse: & Divmod/8 AsIs: s.Arg1/9 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/10 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/11 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 3UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[8], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/7 # CmdOnFailGoTo/14 )/8 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdOnFailGoTo], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 4/7 HalfReuse: </14 HalfReuse: & Divmod/8 AsIs: s.Arg1/9 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/10 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/11 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 4UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[8], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/7 # CmdProfilerStopSentence/14 )/8 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdProfilerStopSentence], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 5/7 HalfReuse: </14 HalfReuse: & Divmod/8 AsIs: s.Arg1/9 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/10 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/11 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 5UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[8], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/7 # CmdInitB0/14 )/8 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdInitB0], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 6/7 HalfReuse: </14 HalfReuse: & Divmod/8 AsIs: s.Arg1/9 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/10 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/11 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 6UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[8], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PutCommand/4 (/7 # CmdInitB0-Lite/14 )/8 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdInitB0m_Lite], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 9
      //DEBUG: s.Arg2: 10
      //DEBUG: s.Arg3: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 7/7 HalfReuse: </14 HalfReuse: & Divmod/8 AsIs: s.Arg1/9 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/10 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/11 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[7], 7UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[8], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PutCommand/4 (/7 s.new11/17 s.new10/14 )/8 s.new12/9 s.new13/10 s.new14/11 >/1
    context[15] = context[12];
    context[16] = context[13];
    if( ! refalrts::svar_left( context[17], context[15], context[16] ) )
      continue;
    if( ! refalrts::empty_seq( context[15], context[16] ) )
      continue;
    do {
      // </0 & PutCommand/4 (/7 # CmdChar/17 s.new15/14 )/8 s.new16/9 s.new17/10 s.new18/11 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdChar], context[17] ) )
        continue;
      do {
        // </0 & PutCommand/4 (/7 # CmdChar/17 # AlgLeft/14 )/8 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 8/7 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg19 /8 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/10 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/11 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 8UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[8], context[9] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/7 # CmdChar/17 # AlgRight/14 )/8 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 9/7 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg19 /8 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/10 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/11 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 9UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[8], context[9] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PutCommand/4 (/7 # CmdChar/17 # AlgTerm/14 )/8 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
      if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 9
      //DEBUG: s.Arg2: 10
      //DEBUG: s.Arg3: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Arg1/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 10/7 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg19 /8 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/10 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/11 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[18], 256UL);
      refalrts::alloc_close_call(vm, context[19]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[22], 256UL);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[26], 256UL);
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[7], 10UL);
      refalrts::reinit_open_call(context[17]);
      refalrts::reinit_name(context[14], functions[efunc_Divmod]);
      refalrts::reinit_svar( context[8], context[9] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[22], context[25] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[18], context[21] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/7 # CmdCharSave/17 s.new15/14 )/8 s.new16/9 s.new17/10 s.new18/11 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdCharSave], context[17] ) )
        continue;
      do {
        // </0 & PutCommand/4 (/7 # CmdCharSave/17 # AlgLeft/14 )/8 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 9
        //DEBUG: s.Arg2: 10
        //DEBUG: s.Arg3: 11

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 11/7 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg19 /8 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/10 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/11 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[7], 11UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[8], context[9] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[11] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[10] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[8], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PutCommand/4 (/7 # CmdCharSave/17 # AlgRight/14 )/8 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
      if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 9
      //DEBUG: s.Arg2: 10
      //DEBUG: s.Arg3: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Arg1/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 12/7 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg19 /8 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/10 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/11 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[18], 256UL);
      refalrts::alloc_close_call(vm, context[19]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[22], 256UL);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[26], 256UL);
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[7], 12UL);
      refalrts::reinit_open_call(context[17]);
      refalrts::reinit_name(context[14], functions[efunc_Divmod]);
      refalrts::reinit_svar( context[8], context[9] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[22], context[25] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[18], context[21] );
      refalrts::splice_to_freelist_open( vm, context[8], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PutCommand/4 (/7 # CmdNumber/17 # AlgLeft/14 )/8 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdNumber], context[17] ) )
      continue;
    if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
      continue;
    //DEBUG: s.Arg1: 9
    //DEBUG: s.Arg2: 10
    //DEBUG: s.Arg3: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.Arg1/9 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 13/7 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg19 /8 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/10 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/11 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_number(vm, context[18], 256UL);
    refalrts::alloc_close_call(vm, context[19]);
    refalrts::alloc_open_call(vm, context[20]);
    refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[22], 256UL);
    refalrts::alloc_close_call(vm, context[23]);
    refalrts::alloc_open_call(vm, context[24]);
    refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[26], 256UL);
    refalrts::alloc_close_call(vm, context[27]);
    refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::reinit_number(context[7], 13UL);
    refalrts::reinit_open_call(context[17]);
    refalrts::reinit_name(context[14], functions[efunc_Divmod]);
    refalrts::reinit_svar( context[8], context[9] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[27] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[23] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[19] );
    refalrts::push_stack( vm, context[17] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[26], context[27] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[22], context[25] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[18], context[21] );
    refalrts::splice_to_freelist_open( vm, context[8], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutCommand/4 (/9 e.new1/7 s.new2/14 )/10 s.new3/11 s.new4/12 s.new5/13 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    if( ! refalrts::svar_left( context[11], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[12], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[13], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_right( context[14], context[7], context[8] ) )
      continue;
    // closed e.new1 as range 7
    do {
      // </0 & PutCommand/4 (/9 s.new10/17 s.new9/14 )/10 s.new6/11 s.new7/12 s.new8/13 >/1
      context[15] = context[7];
      context[16] = context[8];
      if( ! refalrts::svar_left( context[17], context[15], context[16] ) )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      do {
        // </0 & PutCommand/4 (/9 # CmdNumber/17 s.new14/14 )/10 s.new11/11 s.new12/12 s.new13/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdNumber], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/9 # CmdNumber/17 # AlgRight/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 14/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 14UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/9 # CmdNumber/17 # AlgTerm/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 15/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 15UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[10], context[11] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/9 # CmdNumberSave/17 s.new14/14 )/10 s.new11/11 s.new12/12 s.new13/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdNumberSave], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/9 # CmdNumberSave/17 # AlgLeft/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 16/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 16UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/9 # CmdNumberSave/17 # AlgRight/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 17/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 17UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[10], context[11] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/9 # CmdHugeNum/17 s.new14/14 )/10 s.new11/11 s.new12/12 s.new13/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdHugeNum], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/9 # CmdHugeNum/17 # AlgLeft/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 18/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 18UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/9 # CmdHugeNum/17 # AlgRight/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 19/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 19UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/9 # CmdHugeNum/17 # AlgTerm/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 20/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 20UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[10], context[11] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/9 # CmdHugeNumSave/17 s.new14/14 )/10 s.new11/11 s.new12/12 s.new13/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdHugeNumSave], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/9 # CmdHugeNumSave/17 # AlgLeft/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 21/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 21UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/9 # CmdHugeNumSave/17 # AlgRight/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 22/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 22UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[10], context[11] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/9 # CmdName/17 s.new14/14 )/10 s.new11/11 s.new12/12 s.new13/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdName], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/9 # CmdName/17 # AlgLeft/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 23/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 23UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/9 # CmdName/17 # AlgRight/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 24/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 24UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/9 # CmdName/17 # AlgTerm/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 25/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 25UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[10], context[11] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/9 # CmdNameSave/17 s.new14/14 )/10 s.new11/11 s.new12/12 s.new13/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdNameSave], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/9 # CmdNameSave/17 # AlgLeft/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 26/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 26UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/9 # CmdNameSave/17 # AlgRight/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 27/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 27UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[10], context[11] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/9 # CmdIdent/17 s.new14/14 )/10 s.new11/11 s.new12/12 s.new13/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdIdent], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/9 # CmdIdent/17 # AlgLeft/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 28/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 28UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/9 # CmdIdent/17 # AlgRight/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 29/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 29UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/9 # CmdIdent/17 # AlgTerm/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 30/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 30UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[10], context[11] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/9 # CmdIdentSave/17 s.new14/14 )/10 s.new11/11 s.new12/12 s.new13/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdIdentSave], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/9 # CmdIdentSave/17 # AlgLeft/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 31/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 31UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/9 # CmdIdentSave/17 # AlgRight/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 32/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 32UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[10], context[11] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/9 # CmdBrackets/17 s.new14/14 )/10 s.new11/11 s.new12/12 s.new13/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdBrackets], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/9 # CmdBrackets/17 # AlgLeft/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 33/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 33UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/9 # CmdBrackets/17 # AlgRight/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 34/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 34UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/9 # CmdBrackets/17 # AlgTerm/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 35/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 35UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[10], context[11] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/9 # CmdBracketsSave/17 s.new14/14 )/10 s.new11/11 s.new12/12 s.new13/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdBracketsSave], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/9 # CmdBracketsSave/17 # AlgLeft/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 36/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 36UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/9 # CmdBracketsSave/17 # AlgRight/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 37/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 37UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[10], context[11] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/9 # CmdADT/17 s.new14/14 )/10 s.new11/11 s.new12/12 s.new13/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdADT], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/9 # CmdADT/17 # AlgLeft/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 38/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 38UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/9 # CmdADT/17 # AlgRight/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 39/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 39UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/9 # CmdADT/17 # AlgTerm/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 40/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 40UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[10], context[11] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/9 # CmdADTSave/17 s.new14/14 )/10 s.new11/11 s.new12/12 s.new13/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdADTSave], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/9 # CmdADTSave/17 # AlgLeft/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 41/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 41UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/9 # CmdADTSave/17 # AlgRight/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 42/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 42UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/9 # CmdADTSave/17 # AlgTerm/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 43/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 43UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[10], context[11] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PutCommand/4 (/9 # CmdCallSave/17 # AlgLeft/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdCallSave], context[17] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 44/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[18], 256UL);
      refalrts::alloc_close_call(vm, context[19]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[22], 256UL);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[26], 256UL);
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 44UL);
      refalrts::reinit_open_call(context[17]);
      refalrts::reinit_name(context[14], functions[efunc_Divmod]);
      refalrts::reinit_svar( context[10], context[11] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[22], context[25] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[18], context[21] );
      refalrts::splice_to_freelist_open( vm, context[10], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/9 s.new9/14 )/10 s.new6/11 s.new7/12 s.new8/13 >/1
      if( ! refalrts::empty_seq( context[7], context[8] ) )
        continue;
      do {
        // </0 & PutCommand/4 (/9 # CmdEmpty/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdEmpty], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 45/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 45UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[10], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PutCommand/4 (/9 # CmdNotEmpty/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdNotEmpty], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 46/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 46UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[10], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/9 s.new10/17 s.new11/18 s.new9/14 )/10 s.new6/11 s.new7/12 s.new8/13 >/1
      context[15] = context[7];
      context[16] = context[8];
      if( ! refalrts::svar_left( context[17], context[15], context[16] ) )
        continue;
      if( ! refalrts::svar_left( context[18], context[15], context[16] ) )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      do {
        // </0 & PutCommand/4 (/9 s.new16/17 # CmdVar/18 s.new15/14 )/10 s.new12/11 s.new13/12 s.new14/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdVar], context[18] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/9 's'/17 # CmdVar/18 s.new20/14 )/10 s.new17/11 s.new18/12 s.new19/13 >/1
          if( ! refalrts::char_term( 's', context[17] ) )
            continue;
          do {
            // </0 & PutCommand/4 (/9 's'/17 # CmdVar/18 # AlgLeft/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
              continue;
            //DEBUG: s.Arg1: 11
            //DEBUG: s.Arg2: 12
            //DEBUG: s.Arg3: 13

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 47/9 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg111 /14 HalfReuse: 256/10 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
            refalrts::alloc_close_call(vm, context[19]);
            refalrts::alloc_open_call(vm, context[20]);
            refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[22], 256UL);
            refalrts::alloc_close_call(vm, context[23]);
            refalrts::alloc_open_call(vm, context[24]);
            refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[26], 256UL);
            refalrts::alloc_close_call(vm, context[27]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[9], 47UL);
            refalrts::reinit_open_call(context[17]);
            refalrts::reinit_name(context[18], functions[efunc_Divmod]);
            refalrts::reinit_svar( context[14], context[11] );
            refalrts::reinit_number(context[10], 256UL);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[24] );
            refalrts::push_stack( vm, context[23] );
            refalrts::push_stack( vm, context[20] );
            refalrts::push_stack( vm, context[19] );
            refalrts::push_stack( vm, context[17] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[26], context[27] );
            res = refalrts::splice_elem( res, context[13] );
            res = refalrts::splice_evar( res, context[22], context[25] );
            res = refalrts::splice_elem( res, context[12] );
            res = refalrts::splice_evar( res, context[19], context[21] );
            refalrts::splice_to_freelist_open( vm, context[10], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & PutCommand/4 (/9 's'/17 # CmdVar/18 # AlgRight/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
              continue;
            //DEBUG: s.Arg1: 11
            //DEBUG: s.Arg2: 12
            //DEBUG: s.Arg3: 13

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 48/9 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg111 /14 HalfReuse: 256/10 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
            refalrts::alloc_close_call(vm, context[19]);
            refalrts::alloc_open_call(vm, context[20]);
            refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[22], 256UL);
            refalrts::alloc_close_call(vm, context[23]);
            refalrts::alloc_open_call(vm, context[24]);
            refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[26], 256UL);
            refalrts::alloc_close_call(vm, context[27]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[9], 48UL);
            refalrts::reinit_open_call(context[17]);
            refalrts::reinit_name(context[18], functions[efunc_Divmod]);
            refalrts::reinit_svar( context[14], context[11] );
            refalrts::reinit_number(context[10], 256UL);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[24] );
            refalrts::push_stack( vm, context[23] );
            refalrts::push_stack( vm, context[20] );
            refalrts::push_stack( vm, context[19] );
            refalrts::push_stack( vm, context[17] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[26], context[27] );
            res = refalrts::splice_elem( res, context[13] );
            res = refalrts::splice_evar( res, context[22], context[25] );
            res = refalrts::splice_elem( res, context[12] );
            res = refalrts::splice_evar( res, context[19], context[21] );
            refalrts::splice_to_freelist_open( vm, context[10], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & PutCommand/4 (/9 's'/17 # CmdVar/18 # AlgTerm/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 49/9 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg111 /14 HalfReuse: 256/10 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 49UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[18], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[14], context[11] );
          refalrts::reinit_number(context[10], 256UL);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[19], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/9 't'/17 # CmdVar/18 s.new20/14 )/10 s.new17/11 s.new18/12 s.new19/13 >/1
        if( ! refalrts::char_term( 't', context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/9 't'/17 # CmdVar/18 # AlgLeft/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 50/9 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg111 /14 HalfReuse: 256/10 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 50UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[18], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[14], context[11] );
          refalrts::reinit_number(context[10], 256UL);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[19], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/9 't'/17 # CmdVar/18 # AlgRight/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 51/9 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg111 /14 HalfReuse: 256/10 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 51UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[18], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[14], context[11] );
        refalrts::reinit_number(context[10], 256UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[19], context[21] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/9 't'/17 # CmdVarSave/18 s.new15/14 )/10 s.new12/11 s.new13/12 s.new14/13 >/1
        if( ! refalrts::char_term( 't', context[17] ) )
          continue;
        if( ! refalrts::ident_term( identifiers[ident_CmdVarSave], context[18] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/9 't'/17 # CmdVarSave/18 # AlgLeft/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 52/9 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg111 /14 HalfReuse: 256/10 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 52UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[18], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[14], context[11] );
          refalrts::reinit_number(context[10], 256UL);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[19], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/9 't'/17 # CmdVarSave/18 # AlgRight/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 53/9 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg111 /14 HalfReuse: 256/10 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 53UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[18], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[14], context[11] );
        refalrts::reinit_number(context[10], 256UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[19], context[21] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/9 s.new16/17 # CmdRepeated/18 s.new15/14 )/10 s.new12/11 s.new13/12 s.new14/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdRepeated], context[18] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/9 'e'/17 # CmdRepeated/18 s.new20/14 )/10 s.new17/11 s.new18/12 s.new19/13 >/1
          if( ! refalrts::char_term( 'e', context[17] ) )
            continue;
          do {
            // </0 & PutCommand/4 (/9 'e'/17 # CmdRepeated/18 # AlgLeft/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
              continue;
            //DEBUG: s.Arg1: 11
            //DEBUG: s.Arg2: 12
            //DEBUG: s.Arg3: 13

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 54/9 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg111 /14 HalfReuse: 256/10 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
            refalrts::alloc_close_call(vm, context[19]);
            refalrts::alloc_open_call(vm, context[20]);
            refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[22], 256UL);
            refalrts::alloc_close_call(vm, context[23]);
            refalrts::alloc_open_call(vm, context[24]);
            refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[26], 256UL);
            refalrts::alloc_close_call(vm, context[27]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[9], 54UL);
            refalrts::reinit_open_call(context[17]);
            refalrts::reinit_name(context[18], functions[efunc_Divmod]);
            refalrts::reinit_svar( context[14], context[11] );
            refalrts::reinit_number(context[10], 256UL);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[24] );
            refalrts::push_stack( vm, context[23] );
            refalrts::push_stack( vm, context[20] );
            refalrts::push_stack( vm, context[19] );
            refalrts::push_stack( vm, context[17] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[26], context[27] );
            res = refalrts::splice_elem( res, context[13] );
            res = refalrts::splice_evar( res, context[22], context[25] );
            res = refalrts::splice_elem( res, context[12] );
            res = refalrts::splice_evar( res, context[19], context[21] );
            refalrts::splice_to_freelist_open( vm, context[10], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & PutCommand/4 (/9 'e'/17 # CmdRepeated/18 # AlgRight/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 55/9 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg111 /14 HalfReuse: 256/10 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 55UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[18], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[14], context[11] );
          refalrts::reinit_number(context[10], 256UL);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[19], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/9 's'/17 # CmdRepeated/18 s.new20/14 )/10 s.new17/11 s.new18/12 s.new19/13 >/1
          if( ! refalrts::char_term( 's', context[17] ) )
            continue;
          do {
            // </0 & PutCommand/4 (/9 's'/17 # CmdRepeated/18 # AlgLeft/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
              continue;
            //DEBUG: s.Arg1: 11
            //DEBUG: s.Arg2: 12
            //DEBUG: s.Arg3: 13

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 56/9 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg111 /14 HalfReuse: 256/10 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
            refalrts::alloc_close_call(vm, context[19]);
            refalrts::alloc_open_call(vm, context[20]);
            refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[22], 256UL);
            refalrts::alloc_close_call(vm, context[23]);
            refalrts::alloc_open_call(vm, context[24]);
            refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[26], 256UL);
            refalrts::alloc_close_call(vm, context[27]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[9], 56UL);
            refalrts::reinit_open_call(context[17]);
            refalrts::reinit_name(context[18], functions[efunc_Divmod]);
            refalrts::reinit_svar( context[14], context[11] );
            refalrts::reinit_number(context[10], 256UL);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[24] );
            refalrts::push_stack( vm, context[23] );
            refalrts::push_stack( vm, context[20] );
            refalrts::push_stack( vm, context[19] );
            refalrts::push_stack( vm, context[17] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[26], context[27] );
            res = refalrts::splice_elem( res, context[13] );
            res = refalrts::splice_evar( res, context[22], context[25] );
            res = refalrts::splice_elem( res, context[12] );
            res = refalrts::splice_evar( res, context[19], context[21] );
            refalrts::splice_to_freelist_open( vm, context[10], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          do {
            // </0 & PutCommand/4 (/9 's'/17 # CmdRepeated/18 # AlgRight/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
            if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
              continue;
            //DEBUG: s.Arg1: 11
            //DEBUG: s.Arg2: 12
            //DEBUG: s.Arg3: 13

            refalrts::reset_allocator(vm);
            //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
            //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 57/9 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg111 /14 HalfReuse: 256/10 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
            refalrts::alloc_close_call(vm, context[19]);
            refalrts::alloc_open_call(vm, context[20]);
            refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[22], 256UL);
            refalrts::alloc_close_call(vm, context[23]);
            refalrts::alloc_open_call(vm, context[24]);
            refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
            refalrts::alloc_number(vm, context[26], 256UL);
            refalrts::alloc_close_call(vm, context[27]);
            refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
            refalrts::reinit_number(context[9], 57UL);
            refalrts::reinit_open_call(context[17]);
            refalrts::reinit_name(context[18], functions[efunc_Divmod]);
            refalrts::reinit_svar( context[14], context[11] );
            refalrts::reinit_number(context[10], 256UL);
            refalrts::push_stack( vm, context[1] );
            refalrts::push_stack( vm, context[0] );
            refalrts::push_stack( vm, context[27] );
            refalrts::push_stack( vm, context[24] );
            refalrts::push_stack( vm, context[23] );
            refalrts::push_stack( vm, context[20] );
            refalrts::push_stack( vm, context[19] );
            refalrts::push_stack( vm, context[17] );
            refalrts::Iter trash_prev = arg_begin->prev;
            refalrts::use(trash_prev);
            refalrts::Iter res = context[1];
            res = refalrts::splice_evar( res, context[26], context[27] );
            res = refalrts::splice_elem( res, context[13] );
            res = refalrts::splice_evar( res, context[22], context[25] );
            res = refalrts::splice_elem( res, context[12] );
            res = refalrts::splice_evar( res, context[19], context[21] );
            refalrts::splice_to_freelist_open( vm, context[10], res );
            return refalrts::cSuccess;
          } while ( 0 );
          refalrts::stop_sentence(vm);

          // </0 & PutCommand/4 (/9 's'/17 # CmdRepeated/18 # AlgTerm/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 58/9 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg111 /14 HalfReuse: 256/10 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 58UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[18], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[14], context[11] );
          refalrts::reinit_number(context[10], 256UL);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[19], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/9 't'/17 # CmdRepeated/18 s.new20/14 )/10 s.new17/11 s.new18/12 s.new19/13 >/1
        if( ! refalrts::char_term( 't', context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/9 't'/17 # CmdRepeated/18 # AlgLeft/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 59/9 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg111 /14 HalfReuse: 256/10 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 59UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[18], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[14], context[11] );
          refalrts::reinit_number(context[10], 256UL);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[19], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/9 't'/17 # CmdRepeated/18 # AlgRight/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 60/9 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg111 /14 HalfReuse: 256/10 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 60UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[18], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[14], context[11] );
          refalrts::reinit_number(context[10], 256UL);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[19], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/9 't'/17 # CmdRepeated/18 # AlgTerm/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgTerm], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 61/9 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg111 /14 HalfReuse: 256/10 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 61UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[18], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[14], context[11] );
        refalrts::reinit_number(context[10], 256UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[19], context[21] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PutCommand/4 (/9 't'/17 # CmdRepeatedSave/18 s.new15/14 )/10 s.new12/11 s.new13/12 s.new14/13 >/1
      if( ! refalrts::char_term( 't', context[17] ) )
        continue;
      if( ! refalrts::ident_term( identifiers[ident_CmdRepeatedSave], context[18] ) )
        continue;
      do {
        // </0 & PutCommand/4 (/9 't'/17 # CmdRepeatedSave/18 # AlgLeft/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_AlgLeft], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 62/9 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg111 /14 HalfReuse: 256/10 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 62UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[18], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[14], context[11] );
        refalrts::reinit_number(context[10], 256UL);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[19], context[21] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PutCommand/4 (/9 't'/17 # CmdRepeatedSave/18 # AlgRight/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_AlgRight], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 63/9 HalfReuse: </17 HalfReuse: & Divmod/18 HalfReuse: s.Arg111 /14 HalfReuse: 256/10 } >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[19]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[22], 256UL);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[26], 256UL);
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 63UL);
      refalrts::reinit_open_call(context[17]);
      refalrts::reinit_name(context[18], functions[efunc_Divmod]);
      refalrts::reinit_svar( context[14], context[11] );
      refalrts::reinit_number(context[10], 256UL);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[22], context[25] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[19], context[21] );
      refalrts::splice_to_freelist_open( vm, context[10], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PutCommand/4 (/9 # CmdEPrepare/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdEPrepare], context[14] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    //DEBUG: s.Arg1: 11
    //DEBUG: s.Arg2: 12
    //DEBUG: s.Arg3: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 64/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_number(vm, context[15], 256UL);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[19], 256UL);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[23], 256UL);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::reinit_number(context[9], 64UL);
    refalrts::reinit_open_call(context[14]);
    refalrts::reinit_name(context[10], functions[efunc_Divmod]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[19], context[22] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[15], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutCommand/4 (/9 e.new1/7 s.new2/14 )/10 s.new3/11 s.new4/12 s.new5/13 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[7] = 0;
    context[8] = 0;
    context[9] = refalrts::brackets_left( context[7], context[8], context[5], context[6] );
    if( ! context[9] )
      continue;
    refalrts::bracket_pointers(context[9], context[10]);
    if( ! refalrts::svar_left( context[11], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[12], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[13], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_right( context[14], context[7], context[8] ) )
      continue;
    // closed e.new1 as range 7
    do {
      // </0 & PutCommand/4 (/9 s.new9/14 )/10 s.new6/11 s.new7/12 s.new8/13 >/1
      if( ! refalrts::empty_seq( context[7], context[8] ) )
        continue;
      do {
        // </0 & PutCommand/4 (/9 # CmdEStart/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdEStart], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 65/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 65UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[10], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/9 # CmdSave/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSave], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 66/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 66UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[10], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/9 # CmdResetAllocator/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdResetAllocator], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 67/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 67UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[10], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/9 # CmdSetResArgBegin/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSetResArgBegin], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 68/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 68UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[10], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/9 # CmdSetResRightEdge/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSetResRightEdge], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 69/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 69UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[10], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/9 # CmdSetRes/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdSetRes], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 70/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 70UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[10], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/9 # CmdCopyEVar/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdCopyEVar], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 71/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 71UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[10], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/9 # CmdCopySTVar/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_CmdCopySTVar], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 72/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[15], 256UL);
        refalrts::alloc_close_call(vm, context[16]);
        refalrts::alloc_open_call(vm, context[17]);
        refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[19], 256UL);
        refalrts::alloc_close_call(vm, context[20]);
        refalrts::alloc_open_call(vm, context[21]);
        refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[23], 256UL);
        refalrts::alloc_close_call(vm, context[24]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 72UL);
        refalrts::reinit_open_call(context[14]);
        refalrts::reinit_name(context[10], functions[efunc_Divmod]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[21] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[17] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[14] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[23], context[24] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[19], context[22] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[15], context[18] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PutCommand/4 (/9 # CmdReinitSVar/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdReinitSVar], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 73/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 73UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[10], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/9 s.new10/17 s.new9/14 )/10 s.new6/11 s.new7/12 s.new8/13 >/1
      context[15] = context[7];
      context[16] = context[8];
      if( ! refalrts::svar_left( context[17], context[15], context[16] ) )
        continue;
      if( ! refalrts::empty_seq( context[15], context[16] ) )
        continue;
      do {
        // </0 & PutCommand/4 (/9 # Allocate/17 s.new14/14 )/10 s.new11/11 s.new12/12 s.new13/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_Allocate], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/9 # Allocate/17 # ElChar/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElChar], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 74/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 74UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/9 # Allocate/17 # ElName/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElName], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 75/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 75UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/9 # Allocate/17 # ElNumber/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 76/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 76UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/9 # Allocate/17 # ElHugeNumber/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElHugeNumber], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 77/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 77UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/9 # Allocate/17 # ElIdent/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 78/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 78UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/9 # Allocate/17 # ElBracket/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElBracket], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 79/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 79UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/9 # Allocate/17 # ElString/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElString], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 80/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 80UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/9 # Allocate/17 # ElClosureHead/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElClosureHead], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 113/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 113UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/9 # Allocate/17 # ElUnwrappedClosure/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 114/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 114UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[10], context[11] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/9 # Reinit/17 s.new14/14 )/10 s.new11/11 s.new12/12 s.new13/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_Reinit], context[17] ) )
          continue;
        do {
          // </0 & PutCommand/4 (/9 # Reinit/17 # ElChar/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElChar], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 81/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 81UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/9 # Reinit/17 # ElName/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElName], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 82/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 82UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/9 # Reinit/17 # ElNumber/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 83/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 83UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/9 # Reinit/17 # ElHugeNumber/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElHugeNumber], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 84/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 84UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/9 # Reinit/17 # ElIdent/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 85/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 85UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/9 # Reinit/17 # ElBracket/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElBracket], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 86/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 86UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        do {
          // </0 & PutCommand/4 (/9 # Reinit/17 # ElClosureHead/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
          if( ! refalrts::ident_term( identifiers[ident_ElClosureHead], context[14] ) )
            continue;
          //DEBUG: s.Arg1: 11
          //DEBUG: s.Arg2: 12
          //DEBUG: s.Arg3: 13

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 87/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
          refalrts::alloc_number(vm, context[18], 256UL);
          refalrts::alloc_close_call(vm, context[19]);
          refalrts::alloc_open_call(vm, context[20]);
          refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[22], 256UL);
          refalrts::alloc_close_call(vm, context[23]);
          refalrts::alloc_open_call(vm, context[24]);
          refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
          refalrts::alloc_number(vm, context[26], 256UL);
          refalrts::alloc_close_call(vm, context[27]);
          refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
          refalrts::reinit_number(context[9], 87UL);
          refalrts::reinit_open_call(context[17]);
          refalrts::reinit_name(context[14], functions[efunc_Divmod]);
          refalrts::reinit_svar( context[10], context[11] );
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::push_stack( vm, context[27] );
          refalrts::push_stack( vm, context[24] );
          refalrts::push_stack( vm, context[23] );
          refalrts::push_stack( vm, context[20] );
          refalrts::push_stack( vm, context[19] );
          refalrts::push_stack( vm, context[17] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[1];
          res = refalrts::splice_evar( res, context[26], context[27] );
          res = refalrts::splice_elem( res, context[13] );
          res = refalrts::splice_evar( res, context[22], context[25] );
          res = refalrts::splice_elem( res, context[12] );
          res = refalrts::splice_evar( res, context[18], context[21] );
          refalrts::splice_to_freelist_open( vm, context[10], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & PutCommand/4 (/9 # Reinit/17 # ElUnwrappedClosure/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 88/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 88UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[10], context[11] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PutCommand/4 (/9 # Update/17 s.new14/14 )/10 s.new11/11 s.new12/12 s.new13/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_Update], context[17] ) )
        continue;
      do {
        // </0 & PutCommand/4 (/9 # Update/17 # ElChar/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElChar], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 89/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 89UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[10], context[11] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/9 # Update/17 # ElName/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElName], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 90/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 90UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[10], context[11] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/9 # Update/17 # ElNumber/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 91/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 91UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[10], context[11] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & PutCommand/4 (/9 # Update/17 # ElHugeNumber/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
        if( ! refalrts::ident_term( identifiers[ident_ElHugeNumber], context[14] ) )
          continue;
        //DEBUG: s.Arg1: 11
        //DEBUG: s.Arg2: 12
        //DEBUG: s.Arg3: 13

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 92/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_number(vm, context[18], 256UL);
        refalrts::alloc_close_call(vm, context[19]);
        refalrts::alloc_open_call(vm, context[20]);
        refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[22], 256UL);
        refalrts::alloc_close_call(vm, context[23]);
        refalrts::alloc_open_call(vm, context[24]);
        refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
        refalrts::alloc_number(vm, context[26], 256UL);
        refalrts::alloc_close_call(vm, context[27]);
        refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
        refalrts::reinit_number(context[9], 92UL);
        refalrts::reinit_open_call(context[17]);
        refalrts::reinit_name(context[14], functions[efunc_Divmod]);
        refalrts::reinit_svar( context[10], context[11] );
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[27] );
        refalrts::push_stack( vm, context[24] );
        refalrts::push_stack( vm, context[23] );
        refalrts::push_stack( vm, context[20] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[17] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_elem( res, context[13] );
        res = refalrts::splice_evar( res, context[22], context[25] );
        res = refalrts::splice_elem( res, context[12] );
        res = refalrts::splice_evar( res, context[18], context[21] );
        refalrts::splice_to_freelist_open( vm, context[10], res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & PutCommand/4 (/9 # Update/17 # ElIdent/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Arg1/11 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 93/9 HalfReuse: </17 HalfReuse: & Divmod/14 HalfReuse: s.Arg111 /10 } 256/18 >/19 </20 & Divmod/21 Tile{ AsIs: s.Arg2/12 } 256/22 >/23 </24 & Divmod/25 Tile{ AsIs: s.Arg3/13 } 256/26 >/27 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[18], 256UL);
      refalrts::alloc_close_call(vm, context[19]);
      refalrts::alloc_open_call(vm, context[20]);
      refalrts::alloc_name(vm, context[21], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[22], 256UL);
      refalrts::alloc_close_call(vm, context[23]);
      refalrts::alloc_open_call(vm, context[24]);
      refalrts::alloc_name(vm, context[25], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[26], 256UL);
      refalrts::alloc_close_call(vm, context[27]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 93UL);
      refalrts::reinit_open_call(context[17]);
      refalrts::reinit_name(context[14], functions[efunc_Divmod]);
      refalrts::reinit_svar( context[10], context[11] );
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[27] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[23] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[17] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[26], context[27] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[22], context[25] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[18], context[21] );
      refalrts::splice_to_freelist_open( vm, context[10], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PutCommand/4 (/9 s.new9/14 )/10 s.new6/11 s.new7/12 s.new8/13 >/1
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    do {
      // </0 & PutCommand/4 (/9 # CmdLinkBrackets/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdLinkBrackets], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 94/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 94UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[10], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/9 # CmdPushStack/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdPushStack], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 95/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 95UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[10], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/9 # CmdWrapClosure/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdWrapClosure], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 110/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 110UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[10], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/9 # CmdSpliceElem/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceElem], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 96/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 96UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[10], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/9 # CmdSpliceEVar/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceEVar], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 97/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 97UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[10], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/9 # CmdSpliceSTVar/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceSTVar], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 98/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 98UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[10], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/9 # CmdSpliceRange/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceRange], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 99/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 99UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[10], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/9 # CmdSpliceTile/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceTile], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 100/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 100UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[10], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/9 # CmdSpliceToFreeList/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSpliceToFreeList], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 101/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 101UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[10], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/9 # CmdNextStep/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdNextStep], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 102/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 102UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[10], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/9 # CmdTrashLeftEdge/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdTrashLeftEdge], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 103/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 103UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[10], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/9 # CmdTrash/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdTrash], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 104/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 104UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[10], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/9 # CmdFail/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdFail], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 105/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 105UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[10], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/9 # CmdFetchSwapHead/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdFetchSwapHead], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 106/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 106UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[10], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/9 # CmdFetchSwapInfoBounds/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdFetchSwapInfoBounds], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 107/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 107UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[10], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/9 # CmdSwapSave/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdSwapSave], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 108/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 108UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[10], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/9 # CmdPerformNative/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdPerformNative], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 109/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 109UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[10], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/9 # CmdScale/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdScale], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 111/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 111UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[10], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/9 # CmdVariableDebugOffset/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdVariableDebugOffset], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 11
      //DEBUG: s.Arg2: 12
      //DEBUG: s.Arg3: 13

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 112/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[9], 112UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[10], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[13] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[12] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PutCommand/4 (/9 # CmdSpliceToFreeList-Range/14 )/10 s.Arg1/11 s.Arg2/12 s.Arg3/13 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdSpliceToFreeListm_Range], context[14] ) )
      continue;
    //DEBUG: s.Arg1: 11
    //DEBUG: s.Arg2: 12
    //DEBUG: s.Arg3: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 115/9 HalfReuse: </14 HalfReuse: & Divmod/10 AsIs: s.Arg1/11 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/12 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/13 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_number(vm, context[15], 256UL);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[19], 256UL);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[23], 256UL);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::reinit_number(context[9], 115UL);
    refalrts::reinit_open_call(context[14]);
    refalrts::reinit_name(context[10], functions[efunc_Divmod]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_evar( res, context[19], context[22] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[15], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutCommand/4 (/7 e.new1/5 )/8 s.new2/9 s.new3/10 s.new4/11 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[9], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[10], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[11], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & PutCommand/4 (/7 s.new8/14 )/8 s.new5/9 s.new6/10 s.new7/11 >/1
    context[12] = context[5];
    context[13] = context[6];
    if( ! refalrts::svar_left( context[14], context[12], context[13] ) )
      continue;
    if( ! refalrts::empty_seq( context[12], context[13] ) )
      continue;
    do {
      // </0 & PutCommand/4 (/7 # CmdPushState/14 )/8 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdPushState], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 9
      //DEBUG: s.Arg2: 10
      //DEBUG: s.Arg3: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 116/7 HalfReuse: </14 HalfReuse: & Divmod/8 AsIs: s.Arg1/9 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/10 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/11 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[7], 116UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[8], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & PutCommand/4 (/7 # CmdPopState/14 )/8 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
      if( ! refalrts::ident_term( identifiers[ident_CmdPopState], context[14] ) )
        continue;
      //DEBUG: s.Arg1: 9
      //DEBUG: s.Arg2: 10
      //DEBUG: s.Arg3: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 117/7 HalfReuse: </14 HalfReuse: & Divmod/8 AsIs: s.Arg1/9 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/10 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/11 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_number(vm, context[15], 256UL);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[19], 256UL);
      refalrts::alloc_close_call(vm, context[20]);
      refalrts::alloc_open_call(vm, context[21]);
      refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
      refalrts::alloc_number(vm, context[23], 256UL);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
      refalrts::reinit_number(context[7], 117UL);
      refalrts::reinit_open_call(context[14]);
      refalrts::reinit_name(context[8], functions[efunc_Divmod]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[21] );
      refalrts::push_stack( vm, context[20] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[14] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_elem( res, context[11] );
      res = refalrts::splice_evar( res, context[19], context[22] );
      res = refalrts::splice_elem( res, context[10] );
      res = refalrts::splice_evar( res, context[15], context[18] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & PutCommand/4 (/7 # CmdMainLoopReturnSuccess/14 )/8 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
    if( ! refalrts::ident_term( identifiers[ident_CmdMainLoopReturnSuccess], context[14] ) )
      continue;
    //DEBUG: s.Arg1: 9
    //DEBUG: s.Arg2: 10
    //DEBUG: s.Arg3: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 118/7 HalfReuse: </14 HalfReuse: & Divmod/8 AsIs: s.Arg1/9 } 256/15 >/16 </17 & Divmod/18 Tile{ AsIs: s.Arg2/10 } 256/19 >/20 </21 & Divmod/22 Tile{ AsIs: s.Arg3/11 } 256/23 >/24 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_number(vm, context[15], 256UL);
    refalrts::alloc_close_call(vm, context[16]);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[19], 256UL);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::alloc_open_call(vm, context[21]);
    refalrts::alloc_name(vm, context[22], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[23], 256UL);
    refalrts::alloc_close_call(vm, context[24]);
    refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::reinit_number(context[7], 118UL);
    refalrts::reinit_open_call(context[14]);
    refalrts::reinit_name(context[8], functions[efunc_Divmod]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[24] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[16] );
    refalrts::push_stack( vm, context[14] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[23], context[24] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[22] );
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[15], context[18] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutCommand/4 (/7 e.Symbolic/5 )/8 s.Arg1/9 s.Arg2/10 s.Arg3/11 >/1
  // closed e.Symbolic as range 5
  //DEBUG: s.Arg1: 9
  //DEBUG: s.Arg2: 10
  //DEBUG: s.Arg3: 11
  //DEBUG: e.Symbolic: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & PutCommand$3=1/8 AsIs: s.Arg1/9 AsIs: s.Arg2/10 AsIs: s.Arg3/11 HalfReuse: </1 } Tile{ Reuse: & NumberFromOpcode*119/4 } Tile{ AsIs: e.Symbolic/5 } Tile{ HalfReuse: >/7 } >/12 Tile{ ]] }
  refalrts::alloc_close_call(vm, context[12]);
  refalrts::reinit_name(context[8], functions[efunc_gen_PutCommand_S3A1]);
  refalrts::reinit_open_call(context[1]);
  refalrts::update_name(context[4], functions[efunc_gen_NumberFromOpcode_D119]);
  refalrts::reinit_close_call(context[7]);
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[1] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[12] );
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  res = refalrts::splice_elem( res, context[4] );
  res = refalrts::splice_evar( res, context[8], context[1] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PutCommand("PutCommand", COOKIE1_, COOKIE2_, func_PutCommand);


static refalrts::FnResult func_CreateCommandTag(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 6 elems
  refalrts::Iter context[6];
  refalrts::zeros( context, 6 );
  // </0 & CreateCommandTag/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CreateCommandTag/4 s.new1/5 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & CreateCommandTag/4 # ElOpenBracket/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElOpenBracket], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandTag/4 # ElOpenBracket/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # ElBracket/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_ElBracket]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateCommandTag/4 # ElOpenADT/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElOpenADT], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandTag/4 # ElOpenADT/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # ElBracket/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_ElBracket]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateCommandTag/4 # ElOpenCall/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElOpenCall], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandTag/4 # ElOpenCall/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # ElBracket/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_ElBracket]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateCommandTag/4 # ElCloseBracket/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElCloseBracket], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandTag/4 # ElCloseBracket/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # ElBracket/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_ElBracket]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateCommandTag/4 # ElCloseADT/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElCloseADT], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandTag/4 # ElCloseADT/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # ElBracket/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_ElBracket]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateCommandTag/4 # ElCloseCall/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElCloseCall], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandTag/4 # ElCloseCall/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: # ElBracket/1 ]] }
    refalrts::reinit_ident(context[1], identifiers[ident_ElBracket]);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CreateCommandTag/4 s.Other/5 >/1
  //DEBUG: s.Other: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & CreateCommandTag/4 s.Other/5 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ HalfReuse: s.Other5 /1 ]] }
  refalrts::reinit_svar( context[1], context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CreateCommandTag("CreateCommandTag", COOKIE1_, COOKIE2_, func_CreateCommandTag);


static refalrts::FnResult func_CreateCommandInfo(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & CreateCommandInfo/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & CreateCommandInfo/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & CreateCommandInfo/4 s.new3/5 s.new4/8 e.new5/6 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    // closed e.new5 as range 6
    do {
      // </0 & CreateCommandInfo/4 # ElChar/5 s.Char/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_ElChar], context[5] ) )
        continue;
      if( ! refalrts::empty_seq( context[6], context[7] ) )
        continue;
      //DEBUG: s.Char: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: </4 HalfReuse: & Ord/5 AsIs: s.Char/8 AsIs: >/1 ]] }
      refalrts::reinit_open_call(context[4]);
      refalrts::reinit_name(context[5], functions[efunc_Ord]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[4] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[4];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CreateCommandInfo/4 # ElName/5 s.NameId/8 e.Name/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::ident_term( identifiers[ident_ElName], context[5] ) )
        continue;
      // closed e.Name as range 9
      //DEBUG: s.NameId: 8
      //DEBUG: e.Name: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & CreateCommandInfo/4 # ElName/5 s.NameId/8 e.Name/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: s.NameId8 /1 ]] }
      refalrts::reinit_svar( context[1], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CreateCommandInfo/4 # ElNumber/5 s.Number/8 >/1
      if( ! refalrts::ident_term( identifiers[ident_ElNumber], context[5] ) )
        continue;
      if( ! refalrts::empty_seq( context[6], context[7] ) )
        continue;
      //DEBUG: s.Number: 8

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & CreateCommandInfo/4 # ElNumber/5 s.Number/8 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: s.Number8 /1 ]] }
      refalrts::reinit_svar( context[1], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & CreateCommandInfo/4 # ElIdent/5 s.NameId/8 e.Name/9 >/1
      context[9] = context[6];
      context[10] = context[7];
      if( ! refalrts::ident_term( identifiers[ident_ElIdent], context[5] ) )
        continue;
      // closed e.Name as range 9
      //DEBUG: s.NameId: 8
      //DEBUG: e.Name: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} </0 & CreateCommandInfo/4 # ElIdent/5 s.NameId/8 e.Name/9 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ HalfReuse: s.NameId8 /1 ]] }
      refalrts::reinit_svar( context[1], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & CreateCommandInfo/4 # ElString/5 s.StringId/8 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElString], context[5] ) )
      continue;
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    //DEBUG: s.StringId: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandInfo/4 # ElString/5 s.StringId/8 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: s.StringId8 /1 ]] }
    refalrts::reinit_svar( context[1], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateCommandInfo/4 # ElClosureHead/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElClosureHead], context[5] ) )
      continue;
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandInfo/4 # ElClosureHead/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/1 ]] }
    refalrts::reinit_number(context[1], 0UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateCommandInfo/4 # ElUnwrappedClosure/5 s.HeadCounter/8 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::ident_term( identifiers[ident_ElUnwrappedClosure], context[5] ) )
      continue;
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    //DEBUG: s.HeadCounter: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandInfo/4 # ElUnwrappedClosure/5 s.HeadCounter/8 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: s.HeadCounter8 /1 ]] }
    refalrts::reinit_svar( context[1], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CreateCommandInfo/4 s.new3/5 >/1
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & CreateCommandInfo/4 # ElOpenADT/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElOpenADT], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandInfo/4 # ElOpenADT/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 0/1 ]] }
    refalrts::reinit_number(context[1], 0UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateCommandInfo/4 # ElOpenBracket/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElOpenBracket], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandInfo/4 # ElOpenBracket/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 1/1 ]] }
    refalrts::reinit_number(context[1], 1UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateCommandInfo/4 # ElOpenCall/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElOpenCall], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandInfo/4 # ElOpenCall/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 2/1 ]] }
    refalrts::reinit_number(context[1], 2UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateCommandInfo/4 # ElCloseADT/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElCloseADT], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandInfo/4 # ElCloseADT/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 3/1 ]] }
    refalrts::reinit_number(context[1], 3UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateCommandInfo/4 # ElCloseBracket/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElCloseBracket], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandInfo/4 # ElCloseBracket/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 4/1 ]] }
    refalrts::reinit_number(context[1], 4UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & CreateCommandInfo/4 # ElCloseCall/5 >/1
    if( ! refalrts::ident_term( identifiers[ident_ElCloseCall], context[5] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & CreateCommandInfo/4 # ElCloseCall/5 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ HalfReuse: 5/1 ]] }
    refalrts::reinit_number(context[1], 5UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & CreateCommandInfo/4 s.Bracket/5 >/1
  //DEBUG: s.Bracket: 5

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & NumberFromBracket*6/4 AsIs: s.Bracket/5 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_NumberFromBracket_D6]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CreateCommandInfo("CreateCommandInfo", COOKIE1_, COOKIE2_, func_CreateCommandInfo);


static refalrts::FnResult func_CalcLabelsOffsets(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & CalcLabelsOffsets/4 e.RASL/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.RASL as range 2
  //DEBUG: e.RASL: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & DoMapAccum@2/6 (/7 0/8 )/9 Tile{ HalfReuse: (/0 HalfReuse: )/4 AsIs: e.RASL/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_DoMapAccum_Z2]);
  refalrts::alloc_open_bracket(vm, context[7]);
  refalrts::alloc_number(vm, context[8], 0UL);
  refalrts::alloc_close_bracket(vm, context[9]);
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::link_brackets( context[7], context[9] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[5], context[9] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_CalcLabelsOffsets("CalcLabelsOffsets", COOKIE1_, COOKIE2_, func_CalcLabelsOffsets);


static refalrts::FnResult func_gen_ResolveLabeledDestinations_S1B1S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 37 elems
  refalrts::Iter context[37];
  refalrts::zeros( context, 37 );
  // </0 & ResolveLabeledDestinations$1:1$1=1/4 (/7 e.ReadyRASL/5 )/8 (/11 e.Labels-B/9 )/12 (/15 e.Labels-E/13 )/16 (/19 e.UnscannedRASL/17 )/20 (/23 s.JumpHigh/25 )/24 s.JumpLow/26 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.ReadyRASL as range 5
  // closed e.Labels-B as range 9
  // closed e.Labels-E as range 13
  // closed e.UnscannedRASL as range 17
  if( ! refalrts::svar_left( context[25], context[21], context[22] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[21], context[22] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.ReadyRASL: 5
  //DEBUG: e.Labels-B: 9
  //DEBUG: e.Labels-E: 13
  //DEBUG: e.UnscannedRASL: 17
  //DEBUG: s.JumpHigh: 25
  //DEBUG: s.JumpLow: 26

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.ReadyRASL/5 } Tile{ AsIs: </0 Reuse: & PutCommand$3:1/4 HalfReuse: 4/7 } </27 & Divmod/28 Tile{ AsIs: s.JumpLow/26 } 256/29 >/30 Tile{ HalfReuse: </20 HalfReuse: & Divmod/23 AsIs: s.JumpHigh/25 HalfReuse: 256/24 } >/31 Tile{ AsIs: (/19 } 0/32 )/33 0/34 >/35 </36 Tile{ HalfReuse: & ResolveLabeledDestinations@1/8 AsIs: (/11 AsIs: e.Labels-B/9 AsIs: )/12 AsIs: (/15 AsIs: e.Labels-E/13 AsIs: )/16 } Tile{ AsIs: e.UnscannedRASL/17 } Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[27]);
  refalrts::alloc_name(vm, context[28], functions[efunc_Divmod]);
  refalrts::alloc_number(vm, context[29], 256UL);
  refalrts::alloc_close_call(vm, context[30]);
  refalrts::alloc_close_call(vm, context[31]);
  refalrts::alloc_number(vm, context[32], 0UL);
  refalrts::alloc_close_bracket(vm, context[33]);
  refalrts::alloc_number(vm, context[34], 0UL);
  refalrts::alloc_close_call(vm, context[35]);
  refalrts::alloc_open_call(vm, context[36]);
  refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
  refalrts::reinit_number(context[7], 4UL);
  refalrts::reinit_open_call(context[20]);
  refalrts::reinit_name(context[23], functions[efunc_Divmod]);
  refalrts::reinit_number(context[24], 256UL);
  refalrts::reinit_name(context[8], functions[efunc_gen_ResolveLabeledDestinations_Z1]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[36] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::push_stack( vm, context[35] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[19], context[33] );
  refalrts::push_stack( vm, context[31] );
  refalrts::push_stack( vm, context[20] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[27] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[8], context[16] );
  res = refalrts::splice_evar( res, context[32], context[36] );
  res = refalrts::splice_elem( res, context[19] );
  res = refalrts::splice_elem( res, context[31] );
  res = refalrts::splice_evar( res, context[20], context[24] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_elem( res, context[26] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[0], context[7] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ResolveLabeledDestinations_S1B1S1A1("ResolveLabeledDestinations$1:1$1=1", COOKIE1_, COOKIE2_, func_gen_ResolveLabeledDestinations_S1B1S1A1);


static refalrts::FnResult func_gen_ResolveLabeledDestinations_S1B1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 51 elems
  refalrts::Iter context[51];
  refalrts::zeros( context, 51 );
  // </0 & ResolveLabeledDestinations$1:1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ResolveLabeledDestinations$1:1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 s.new5/21 (/24 e.new6/22 )/25 s.new7/26 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  if( ! refalrts::svar_left( context[21], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[22] = 0;
  context[23] = 0;
  context[24] = refalrts::brackets_left( context[22], context[23], context[2], context[3] );
  if( ! context[24] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[24], context[25]);
  // closed e.new6 as range 22
  if( ! refalrts::svar_left( context[26], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & ResolveLabeledDestinations$1:1/4 (/7 e.ReadyRASL/27 )/8 (/11 e.Labels-B/29 )/12 (/15 e.Labels-E/31 )/16 (/19 e.UnscannedRASL/33 )/20 s.RelativeJump/21 (/24 e.FuncName/35 )/25 '<'/26 >/1
    context[27] = context[5];
    context[28] = context[6];
    context[29] = context[9];
    context[30] = context[10];
    context[31] = context[13];
    context[32] = context[14];
    context[33] = context[17];
    context[34] = context[18];
    context[35] = context[22];
    context[36] = context[23];
    if( ! refalrts::char_term( '<', context[26] ) )
      continue;
    // closed e.ReadyRASL as range 27
    // closed e.Labels-B as range 29
    // closed e.Labels-E as range 31
    // closed e.UnscannedRASL as range 33
    // closed e.FuncName as range 35
    //DEBUG: s.RelativeJump: 21
    //DEBUG: e.ReadyRASL: 27
    //DEBUG: e.Labels-B: 29
    //DEBUG: e.Labels-E: 31
    //DEBUG: e.UnscannedRASL: 33
    //DEBUG: e.FuncName: 35

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} e.FuncName/35 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ResolveLabeledDestinations$1:1$1=1/4 AsIs: (/7 AsIs: e.ReadyRASL/27 AsIs: )/8 AsIs: (/11 AsIs: e.Labels-B/29 AsIs: )/12 AsIs: (/15 AsIs: e.Labels-E/31 AsIs: )/16 AsIs: (/19 AsIs: e.UnscannedRASL/33 AsIs: )/20 } </37 Tile{ HalfReuse: & Divmod/24 } Tile{ AsIs: s.RelativeJump/21 } Tile{ HalfReuse: 256/25 HalfReuse: >/26 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[37]);
    refalrts::update_name(context[4], functions[efunc_gen_ResolveLabeledDestinations_S1B1S1A1]);
    refalrts::reinit_name(context[24], functions[efunc_Divmod]);
    refalrts::reinit_number(context[25], 256UL);
    refalrts::reinit_close_call(context[26]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[26] );
    refalrts::push_stack( vm, context[37] );
    refalrts::link_brackets( context[19], context[20] );
    refalrts::link_brackets( context[15], context[16] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[25];
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_elem( res, context[24] );
    res = refalrts::splice_elem( res, context[37] );
    refalrts::splice_to_freelist_open( vm, context[20], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ResolveLabeledDestinations$1:1/4 (/7 e.ReadyRASL/5 )/8 (/11 e.Labels-B/9 )/12 (/15 e.Labels-E/13 )/16 (/19 e.UnscannedRASL/17 )/20 s.RelativeJump/21 (/24 e.FuncName/22 )/25 s.Other/26 >/1
  // closed e.ReadyRASL as range 5
  // closed e.Labels-B as range 9
  // closed e.Labels-E as range 13
  // closed e.UnscannedRASL as range 17
  // closed e.FuncName as range 22
  //DEBUG: s.RelativeJump: 21
  //DEBUG: s.Other: 26
  //DEBUG: e.ReadyRASL: 5
  //DEBUG: e.Labels-B: 9
  //DEBUG: e.Labels-E: 13
  //DEBUG: e.UnscannedRASL: 17
  //DEBUG: e.FuncName: 22

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} e.ReadyRASL/5 {REMOVED TILE} e.Labels-B/9 {REMOVED TILE} e.Labels-E/13 {REMOVED TILE} e.UnscannedRASL/17 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Other/26 {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PrintErr/4 HalfReuse: 'C'/7 } Tile{ HalfReuse: 'o'/12 HalfReuse: 'm'/15 } 'p'/27 Tile{ HalfReuse: 'i'/16 HalfReuse: 'l'/19 } Tile{ HalfReuse: 'a'/8 HalfReuse: 't'/11 } Tile{ HalfReuse: 'i'/25 }"on failure in the function "/28 </30 & DisplayName/31 Tile{ AsIs: e.FuncName/22 } >/32 ':'/33 >/34 </35 & PrintErr/36"  this function tries to jump over "/37 </39 Tile{ HalfReuse: & Symb/20 AsIs: s.RelativeJump/21 HalfReuse: >/24 }" commands, but the maximum jump length is 65535."/40 >/42 </43 & PrintErr/44"  Compilation aborted."/45 >/47 </48 & Exit/49 1/50 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_char(vm, context[27], 'p');
  refalrts::alloc_chars(vm, context[28], context[29], "on failure in the function ", 27);
  refalrts::alloc_open_call(vm, context[30]);
  refalrts::alloc_name(vm, context[31], functions[efunc_DisplayName]);
  refalrts::alloc_close_call(vm, context[32]);
  refalrts::alloc_char(vm, context[33], ':');
  refalrts::alloc_close_call(vm, context[34]);
  refalrts::alloc_open_call(vm, context[35]);
  refalrts::alloc_name(vm, context[36], functions[efunc_PrintErr]);
  refalrts::alloc_chars(vm, context[37], context[38], "  this function tries to jump over ", 35);
  refalrts::alloc_open_call(vm, context[39]);
  refalrts::alloc_chars(vm, context[40], context[41], " commands, but the maximum jump length is 65535.", 48);
  refalrts::alloc_close_call(vm, context[42]);
  refalrts::alloc_open_call(vm, context[43]);
  refalrts::alloc_name(vm, context[44], functions[efunc_PrintErr]);
  refalrts::alloc_chars(vm, context[45], context[46], "  Compilation aborted.", 22);
  refalrts::alloc_close_call(vm, context[47]);
  refalrts::alloc_open_call(vm, context[48]);
  refalrts::alloc_name(vm, context[49], functions[efunc_Exit]);
  refalrts::alloc_number(vm, context[50], 1UL);
  refalrts::update_name(context[4], functions[efunc_PrintErr]);
  refalrts::reinit_char(context[7], 'C');
  refalrts::reinit_char(context[12], 'o');
  refalrts::reinit_char(context[15], 'm');
  refalrts::reinit_char(context[16], 'i');
  refalrts::reinit_char(context[19], 'l');
  refalrts::reinit_char(context[8], 'a');
  refalrts::reinit_char(context[11], 't');
  refalrts::reinit_char(context[25], 'i');
  refalrts::reinit_name(context[20], functions[efunc_Symb]);
  refalrts::reinit_close_call(context[24]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[48] );
  refalrts::push_stack( vm, context[47] );
  refalrts::push_stack( vm, context[43] );
  refalrts::push_stack( vm, context[42] );
  refalrts::push_stack( vm, context[35] );
  refalrts::push_stack( vm, context[24] );
  refalrts::push_stack( vm, context[39] );
  refalrts::push_stack( vm, context[34] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[32] );
  refalrts::push_stack( vm, context[30] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[40], context[50] );
  res = refalrts::splice_evar( res, context[20], context[24] );
  res = refalrts::splice_evar( res, context[32], context[39] );
  res = refalrts::splice_evar( res, context[22], context[23] );
  res = refalrts::splice_evar( res, context[28], context[31] );
  res = refalrts::splice_elem( res, context[25] );
  res = refalrts::splice_evar( res, context[8], context[11] );
  res = refalrts::splice_evar( res, context[16], context[19] );
  res = refalrts::splice_elem( res, context[27] );
  res = refalrts::splice_evar( res, context[12], context[15] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ResolveLabeledDestinations_S1B1("ResolveLabeledDestinations$1:1", COOKIE1_, COOKIE2_, func_gen_ResolveLabeledDestinations_S1B1);


static refalrts::FnResult func_gen_ResolveLabeledDestinations_S1A2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 31 elems
  refalrts::Iter context[31];
  refalrts::zeros( context, 31 );
  // </0 & ResolveLabeledDestinations$1=2/4 (/7 e.ReadyRASL/5 )/8 (/11 e.Labels-B/9 )/12 (/15 e.Labels-E/13 )/16 (/19 e.UnscannedRASL/17 )/20 (/23 e.FuncName/21 )/24 s.RelativeJump/25 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  // closed e.ReadyRASL as range 5
  // closed e.Labels-B as range 9
  // closed e.Labels-E as range 13
  // closed e.UnscannedRASL as range 17
  // closed e.FuncName as range 21
  if( ! refalrts::svar_left( context[25], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  //DEBUG: e.ReadyRASL: 5
  //DEBUG: e.Labels-B: 9
  //DEBUG: e.Labels-E: 13
  //DEBUG: e.UnscannedRASL: 17
  //DEBUG: e.FuncName: 21
  //DEBUG: s.RelativeJump: 25

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ResolveLabeledDestinations$1:1/4 AsIs: (/7 AsIs: e.ReadyRASL/5 AsIs: )/8 AsIs: (/11 AsIs: e.Labels-B/9 AsIs: )/12 AsIs: (/15 AsIs: e.Labels-E/13 AsIs: )/16 AsIs: (/19 AsIs: e.UnscannedRASL/17 AsIs: )/20 HalfReuse: s.RelativeJump25 /23 } (/26 Tile{ AsIs: e.FuncName/21 } )/27 </28 Tile{ HalfReuse: & TermCompare/24 AsIs: s.RelativeJump/25 } 65536/29 >/30 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_open_bracket(vm, context[26]);
  refalrts::alloc_close_bracket(vm, context[27]);
  refalrts::alloc_open_call(vm, context[28]);
  refalrts::alloc_number(vm, context[29], 65536UL);
  refalrts::alloc_close_call(vm, context[30]);
  refalrts::update_name(context[4], functions[efunc_gen_ResolveLabeledDestinations_S1B1]);
  refalrts::reinit_svar( context[23], context[25] );
  refalrts::reinit_name(context[24], functions[efunc_TermCompare]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::push_stack( vm, context[30] );
  refalrts::push_stack( vm, context[28] );
  refalrts::link_brackets( context[26], context[27] );
  refalrts::link_brackets( context[19], context[20] );
  refalrts::link_brackets( context[15], context[16] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[24], context[25] );
  res = refalrts::splice_evar( res, context[27], context[28] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_elem( res, context[26] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ResolveLabeledDestinations_S1A2("ResolveLabeledDestinations$1=2", COOKIE1_, COOKIE2_, func_gen_ResolveLabeledDestinations_S1A2);


static refalrts::FnResult func_gen_ResolveLabeledDestinations_S1A1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 35 elems
  refalrts::Iter context[35];
  refalrts::zeros( context, 35 );
  // </0 & ResolveLabeledDestinations$1=1/4 s.DestinationLabel/5 (/8 e.ReadyRASL/6 )/9 (/12 e.UnscannedRASL/10 )/13 (/16 e.FuncName/14 )/17 s.CommandOffset/18 e.Labels-B/19 (/25 s.DestinationLabel/27 s.DestinationOffset/28 )/26 e.Labels-E/21 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[6] = 0;
  context[7] = 0;
  context[8] = refalrts::brackets_left( context[6], context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[8], context[9]);
  context[10] = 0;
  context[11] = 0;
  context[12] = refalrts::brackets_left( context[10], context[11], context[2], context[3] );
  if( ! context[12] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[12], context[13]);
  context[14] = 0;
  context[15] = 0;
  context[16] = refalrts::brackets_left( context[14], context[15], context[2], context[3] );
  if( ! context[16] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[16], context[17]);
  // closed e.ReadyRASL as range 6
  // closed e.UnscannedRASL as range 10
  // closed e.FuncName as range 14
  if( ! refalrts::svar_left( context[18], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  context[19] = 0;
  context[20] = 0;
  refalrts::start_e_loop(vm);
  do {
    context[21] = context[2];
    context[22] = context[3];
    context[23] = 0;
    context[24] = 0;
    context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
    if( ! context[25] )
      continue;
    refalrts::bracket_pointers(context[25], context[26]);
    if( ! refalrts::repeated_stvar_left( vm, context[27], context[5], context[23], context[24] ) )
      continue;
    // closed e.Labels-E as range 21
    if( ! refalrts::svar_left( context[28], context[23], context[24] ) )
      continue;
    if( ! refalrts::empty_seq( context[23], context[24] ) )
      continue;
    //DEBUG: s.DestinationLabel: 5
    //DEBUG: e.ReadyRASL: 6
    //DEBUG: e.UnscannedRASL: 10
    //DEBUG: e.FuncName: 14
    //DEBUG: s.CommandOffset: 18
    //DEBUG: e.Labels-B: 19
    //DEBUG: e.Labels-E: 21
    //DEBUG: s.DestinationOffset: 28

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.DestinationLabel/5 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.CommandOffset/18 {REMOVED TILE} {REMOVED TILE} s.DestinationLabel/27 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & ResolveLabeledDestinations$1=2/4 } (/29 Tile{ AsIs: e.ReadyRASL/6 } )/30 Tile{ AsIs: (/8 } Tile{ AsIs: e.Labels-B/19 } )/31 Tile{ AsIs: (/25 } Tile{ AsIs: e.Labels-E/21 } Tile{ AsIs: )/9 AsIs: (/12 AsIs: e.UnscannedRASL/10 AsIs: )/13 AsIs: (/16 AsIs: e.FuncName/14 AsIs: )/17 } </32 & Sub/33 Tile{ AsIs: s.DestinationOffset/28 HalfReuse: s.CommandOffset18 /26 } >/34 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[29]);
    refalrts::alloc_close_bracket(vm, context[30]);
    refalrts::alloc_close_bracket(vm, context[31]);
    refalrts::alloc_open_call(vm, context[32]);
    refalrts::alloc_name(vm, context[33], functions[efunc_Sub]);
    refalrts::alloc_close_call(vm, context[34]);
    refalrts::update_name(context[4], functions[efunc_gen_ResolveLabeledDestinations_S1A2]);
    refalrts::reinit_svar( context[26], context[18] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[34] );
    refalrts::push_stack( vm, context[32] );
    refalrts::link_brackets( context[16], context[17] );
    refalrts::link_brackets( context[12], context[13] );
    refalrts::link_brackets( context[25], context[9] );
    refalrts::link_brackets( context[8], context[31] );
    refalrts::link_brackets( context[29], context[30] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[34] );
    res = refalrts::splice_evar( res, context[28], context[26] );
    res = refalrts::splice_evar( res, context[32], context[33] );
    res = refalrts::splice_evar( res, context[9], context[17] );
    res = refalrts::splice_evar( res, context[21], context[22] );
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_elem( res, context[31] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_elem( res, context[30] );
    res = refalrts::splice_evar( res, context[6], context[7] );
    res = refalrts::splice_elem( res, context[29] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( refalrts::open_evar_advance( context[19], context[20], context[2], context[3] ) );
  return refalrts::cRecognitionImpossible;
}

static refalrts::NativeReference nat_ref_gen_ResolveLabeledDestinations_S1A1("ResolveLabeledDestinations$1=1", COOKIE1_, COOKIE2_, func_gen_ResolveLabeledDestinations_S1A1);


static refalrts::FnResult func_ResolveLabeledDestinations(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 26 elems
  refalrts::Iter context[26];
  refalrts::zeros( context, 26 );
  // </0 & ResolveLabeledDestinations/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ResolveLabeledDestinations/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & ResolveLabeledDestinations/4 (/7 e.Labels/9 )/8 e.ReadyRASL/13 (/19 # CmdOnFailGoTo/21 s.CommandOffset/22 s.DestinationLabel/23 e.FuncName/17 )/20 e.UnscannedRASL/15 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Labels as range 9
    context[13] = 0;
    context[14] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[15] = context[11];
      context[16] = context[12];
      context[17] = 0;
      context[18] = 0;
      context[19] = refalrts::brackets_left( context[17], context[18], context[15], context[16] );
      if( ! context[19] )
        continue;
      refalrts::bracket_pointers(context[19], context[20]);
      context[21] = refalrts::ident_left( identifiers[ident_CmdOnFailGoTo], context[17], context[18] );
      if( ! context[21] )
        continue;
      // closed e.UnscannedRASL as range 15
      if( ! refalrts::svar_left( context[22], context[17], context[18] ) )
        continue;
      if( ! refalrts::svar_left( context[23], context[17], context[18] ) )
        continue;
      // closed e.FuncName as range 17
      //DEBUG: e.Labels: 9
      //DEBUG: e.ReadyRASL: 13
      //DEBUG: e.UnscannedRASL: 15
      //DEBUG: s.CommandOffset: 22
      //DEBUG: s.DestinationLabel: 23
      //DEBUG: e.FuncName: 17

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.DestinationLabel/23 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ResolveLabeledDestinations$1=1/4 HalfReuse: s.DestinationLabel23 /7 } Tile{ HalfReuse: (/8 AsIs: e.ReadyRASL/13 HalfReuse: )/19 HalfReuse: (/21 } Tile{ AsIs: e.UnscannedRASL/15 } )/24 (/25 Tile{ AsIs: e.FuncName/17 } Tile{ AsIs: )/20 } Tile{ AsIs: s.CommandOffset/22 } Tile{ AsIs: e.Labels/9 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[24]);
      refalrts::alloc_open_bracket(vm, context[25]);
      refalrts::update_name(context[4], functions[efunc_gen_ResolveLabeledDestinations_S1A1]);
      refalrts::reinit_svar( context[7], context[23] );
      refalrts::reinit_open_bracket(context[8]);
      refalrts::reinit_close_bracket(context[19]);
      refalrts::reinit_open_bracket(context[21]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[25], context[20] );
      refalrts::link_brackets( context[21], context[24] );
      refalrts::link_brackets( context[8], context[19] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[9], context[10] );
      res = refalrts::splice_elem( res, context[22] );
      res = refalrts::splice_elem( res, context[20] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[8], context[21] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[13], context[14], context[11], context[12] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ResolveLabeledDestinations/4 (/7 e.Labels/5 )/8 e.ReadyRASL/2 >/1
  // closed e.Labels as range 5
  // closed e.ReadyRASL as range 2
  //DEBUG: e.Labels: 5
  //DEBUG: e.ReadyRASL: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} </0 & ResolveLabeledDestinations/4 (/7 e.Labels/5 )/8 {REMOVED TILE} >/1 {REMOVED TILE}
  //RESULT: Tile{ [[ } Tile{ AsIs: e.ReadyRASL/2 } Tile{ ]] }
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[2], context[3] );
  refalrts::splice_to_freelist_open( vm, trash_prev, res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_ResolveLabeledDestinations("ResolveLabeledDestinations", COOKIE1_, COOKIE2_, func_ResolveLabeledDestinations);


static refalrts::FnResult func_PutBlockStart(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & PutBlockStart/4 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: 1/0 HalfReuse: </4 HalfReuse: & PutWordLE@1/1 } 8/5 >/6 82/7 65/8 83/9 76/10 67/11 79/12 68/13 69/14 Tile{ ]] }
  refalrts::alloc_number(vm, context[5], 8UL);
  refalrts::alloc_close_call(vm, context[6]);
  refalrts::alloc_number(vm, context[7], 82UL);
  refalrts::alloc_number(vm, context[8], 65UL);
  refalrts::alloc_number(vm, context[9], 83UL);
  refalrts::alloc_number(vm, context[10], 76UL);
  refalrts::alloc_number(vm, context[11], 67UL);
  refalrts::alloc_number(vm, context[12], 79UL);
  refalrts::alloc_number(vm, context[13], 68UL);
  refalrts::alloc_number(vm, context[14], 69UL);
  refalrts::reinit_number(context[0], 1UL);
  refalrts::reinit_open_call(context[4]);
  refalrts::reinit_name(context[1], functions[efunc_gen_PutWordLE_Z1]);
  refalrts::push_stack( vm, context[6] );
  refalrts::push_stack( vm, context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_evar( res, context[5], context[14] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PutBlockStart("PutBlockStart", 0U, 0U, func_PutBlockStart);


static refalrts::FnResult func_PutBlockReference(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & PutBlockReference/4 e.Reference/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.Reference as range 2
  //DEBUG: e.Reference: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & PutBlock@10/6 Tile{ AsIs: </0 Reuse: & Ord/4 AsIs: e.Reference/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_PutBlock_Z10]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_Ord]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PutBlockReference("PutBlockReference", 0U, 0U, func_PutBlockReference);


static refalrts::FnResult func_PutBlockIncorporated(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & PutBlockIncorporated/4 e.LibName/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.LibName as range 2
  //DEBUG: e.LibName: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 & PutBlock@11/6 Tile{ AsIs: </0 Reuse: & Ord/4 AsIs: e.LibName/2 AsIs: >/1 } >/7 Tile{ ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::alloc_name(vm, context[6], functions[efunc_gen_PutBlock_Z11]);
  refalrts::alloc_close_call(vm, context[7]);
  refalrts::update_name(context[4], functions[efunc_Ord]);
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[7] );
  res = refalrts::splice_evar( res, context[0], context[1] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_PutBlockIncorporated("PutBlockIncorporated", 0U, 0U, func_PutBlockIncorporated);


static refalrts::FnResult func_gen_Apply_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@2/4 t.new1/5 t.new2/7 t.new3/9 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_left( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_left( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  do {
    // </0 & Apply@2/4 s.Fn/5 t.Acc/7 t.Next/9 >/1
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 9
    //DEBUG: s.Fn: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: t.Acc/7 AsIs: t.Next/9 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@2/4 (/5 t.Closure/13 e.Bounded/11 )/6 t.Acc/7 t.Next/9 >/1
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded as range 11
    //DEBUG: t.Acc: 7
    //DEBUG: t.Next: 9
    //DEBUG: t.Closure: 13
    //DEBUG: e.Bounded: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@4/4 } Tile{ AsIs: t.Closure/13 } Tile{ AsIs: e.Bounded/11 } Tile{ AsIs: t.Acc/7 AsIs: t.Next/9 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_Apply_Z4]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@2/4 t.dyn0/5 t.Acc/7 t.Next/9 >/1
  //DEBUG: t.dyn0: 5
  //DEBUG: t.Acc: 7
  //DEBUG: t.Next: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: t.Acc/7 AsIs: t.Next/9 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z2("Apply@2", COOKIE1_, COOKIE2_, func_gen_Apply_Z2);


static refalrts::FnResult func_gen_PutWordLE_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 10 elems
  refalrts::Iter context[10];
  refalrts::zeros( context, 10 );
  // </0 & PutWordLE@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & PutWordLE@1/4 s.1/7 s.2/8 s.3/9 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[8], context[5], context[6] ) )
      continue;
    if( ! refalrts::svar_left( context[9], context[5], context[6] ) )
      continue;
    if( ! refalrts::empty_seq( context[5], context[6] ) )
      continue;
    //DEBUG: s.1: 7
    //DEBUG: s.2: 8
    //DEBUG: s.3: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & PutWordLE@1/4 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: s.1/7 AsIs: s.2/8 AsIs: s.3/9 HalfReuse: 0/1 ]] }
    refalrts::reinit_number(context[1], 0UL);
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & PutWordLE@1/4 e.Bytes/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Bytes as range 5
    //DEBUG: e.Bytes: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & PutWordLE@1/4 AsIs: e.Bytes/5 HalfReuse: 0/1 } >/7 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[7]);
    refalrts::reinit_number(context[1], 0UL);
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutWordLE@1/4 e.dyn0/2 >/1
  // closed e.dyn0 as range 2
  //DEBUG: e.dyn0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutWordLE@0/4 AsIs: e.dyn0/2 HalfReuse: 0/1 } >/5 Tile{ ]] }
  refalrts::alloc_close_call(vm, context[5]);
  refalrts::update_name(context[4], functions[efunc_gen_PutWordLE_Z0]);
  refalrts::reinit_number(context[1], 0UL);
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutWordLE_Z1("PutWordLE@1", COOKIE1_, COOKIE2_, func_gen_PutWordLE_Z1);


static refalrts::FnResult func_gen_Map_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 14 elems
  refalrts::Iter context[14];
  refalrts::zeros( context, 14 );
  // </0 & Map@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@1/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@1/4 (/7 e./11 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e. as range 11
      // closed e.Tail as range 9
      //DEBUG: e.: 11
      //DEBUG: e.Tail: 9

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} & Map@1/4 (/7 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: e./11 } Tile{ AsIs: </0 } Tile{ HalfReuse: & Map@1/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z1]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_elem( res, context[0] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@1/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & UnBracket*1/4 AsIs: t.Next/7 } >/11 </12 & Map@1/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z1]);
    refalrts::update_name(context[4], functions[efunc_gen_UnBracket_D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@1/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@1/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@1/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & UnBracket@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_UnBracket_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z1("Map@1", COOKIE1_, COOKIE2_, func_gen_Map_Z1);


static refalrts::FnResult func_gen_PutBlock_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 85 elems
  refalrts::Iter context[85];
  refalrts::zeros( context, 85 );
  // </0 & PutBlock@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PutBlock@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 (/15 e.new3/13 )/16 (/19 e.new4/17 )/20 (/23 e.new5/21 )/24 (/27 e.new6/25 )/28 (/31 e.new7/29 )/32 (/35 e.new8/33 )/36 (/39 e.new9/37 )/40 (/43 e.new10/41 )/44 (/47 e.new11/45 )/48 (/51 e.new12/49 )/52 (/55 e.new13/53 )/56 e.new14/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  context[13] = 0;
  context[14] = 0;
  context[15] = refalrts::brackets_left( context[13], context[14], context[2], context[3] );
  if( ! context[15] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[15], context[16]);
  context[17] = 0;
  context[18] = 0;
  context[19] = refalrts::brackets_left( context[17], context[18], context[2], context[3] );
  if( ! context[19] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[19], context[20]);
  context[21] = 0;
  context[22] = 0;
  context[23] = refalrts::brackets_left( context[21], context[22], context[2], context[3] );
  if( ! context[23] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[23], context[24]);
  context[25] = 0;
  context[26] = 0;
  context[27] = refalrts::brackets_left( context[25], context[26], context[2], context[3] );
  if( ! context[27] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[27], context[28]);
  context[29] = 0;
  context[30] = 0;
  context[31] = refalrts::brackets_left( context[29], context[30], context[2], context[3] );
  if( ! context[31] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[31], context[32]);
  context[33] = 0;
  context[34] = 0;
  context[35] = refalrts::brackets_left( context[33], context[34], context[2], context[3] );
  if( ! context[35] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[35], context[36]);
  context[37] = 0;
  context[38] = 0;
  context[39] = refalrts::brackets_left( context[37], context[38], context[2], context[3] );
  if( ! context[39] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[39], context[40]);
  context[41] = 0;
  context[42] = 0;
  context[43] = refalrts::brackets_left( context[41], context[42], context[2], context[3] );
  if( ! context[43] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[43], context[44]);
  context[45] = 0;
  context[46] = 0;
  context[47] = refalrts::brackets_left( context[45], context[46], context[2], context[3] );
  if( ! context[47] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[47], context[48]);
  context[49] = 0;
  context[50] = 0;
  context[51] = refalrts::brackets_left( context[49], context[50], context[2], context[3] );
  if( ! context[51] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[51], context[52]);
  context[53] = 0;
  context[54] = 0;
  context[55] = refalrts::brackets_left( context[53], context[54], context[2], context[3] );
  if( ! context[55] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[55], context[56]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 13
  // closed e.new4 as range 17
  // closed e.new5 as range 21
  // closed e.new6 as range 25
  // closed e.new7 as range 29
  // closed e.new8 as range 33
  // closed e.new9 as range 37
  // closed e.new10 as range 41
  // closed e.new11 as range 45
  // closed e.new12 as range 49
  // closed e.new13 as range 53
  // closed e.new14 as range 2
  do {
    // </0 & PutBlock@1/4 (/7 e.Call/57 )/8 (/11 e.Call0/59 )/12 (/15 e.Call1/61 )/16 (/19 e.Call2/63 )/20 (/23 e.Call3/65 )/24 (/27 e.Call4/67 )/28 (/31 e.Call5/69 )/32 (/35 e.Call6/71 )/36 (/39 e.Call7/73 )/40 (/43 e.Call8/75 )/44 (/47 e.FuncNamesAsBytes/77 )/48 (/51 e.IdentsAsBytes/79 )/52 (/55 e.StringsAsBytes/81 )/56 e.Call9/83 >/1
    context[57] = context[5];
    context[58] = context[6];
    context[59] = context[9];
    context[60] = context[10];
    context[61] = context[13];
    context[62] = context[14];
    context[63] = context[17];
    context[64] = context[18];
    context[65] = context[21];
    context[66] = context[22];
    context[67] = context[25];
    context[68] = context[26];
    context[69] = context[29];
    context[70] = context[30];
    context[71] = context[33];
    context[72] = context[34];
    context[73] = context[37];
    context[74] = context[38];
    context[75] = context[41];
    context[76] = context[42];
    context[77] = context[45];
    context[78] = context[46];
    context[79] = context[49];
    context[80] = context[50];
    context[81] = context[53];
    context[82] = context[54];
    context[83] = context[2];
    context[84] = context[3];
    // closed e.Call as range 57
    // closed e.Call0 as range 59
    // closed e.Call1 as range 61
    // closed e.Call2 as range 63
    // closed e.Call3 as range 65
    // closed e.Call4 as range 67
    // closed e.Call5 as range 69
    // closed e.Call6 as range 71
    // closed e.Call7 as range 73
    // closed e.Call8 as range 75
    // closed e.FuncNamesAsBytes as range 77
    // closed e.IdentsAsBytes as range 79
    // closed e.StringsAsBytes as range 81
    // closed e.Call9 as range 83
    //DEBUG: e.Call: 57
    //DEBUG: e.Call0: 59
    //DEBUG: e.Call1: 61
    //DEBUG: e.Call2: 63
    //DEBUG: e.Call3: 65
    //DEBUG: e.Call4: 67
    //DEBUG: e.Call5: 69
    //DEBUG: e.Call6: 71
    //DEBUG: e.Call7: 73
    //DEBUG: e.Call8: 75
    //DEBUG: e.FuncNamesAsBytes: 77
    //DEBUG: e.IdentsAsBytes: 79
    //DEBUG: e.StringsAsBytes: 81
    //DEBUG: e.Call9: 83

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 (/11 {REMOVED TILE} )/12 (/15 {REMOVED TILE} )/16 (/19 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} )/24 (/27 {REMOVED TILE} )/28 (/31 {REMOVED TILE} )/32 (/35 {REMOVED TILE} )/36 (/39 {REMOVED TILE} )/40 (/43 {REMOVED TILE} )/44 (/47 {REMOVED TILE} )/48 (/51 {REMOVED TILE} )/52 (/55 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 2/0 HalfReuse: </4 HalfReuse: & Fetch@2/7 } Tile{ HalfReuse: </20 HalfReuse: & Lenw/23 } Tile{ AsIs: e.Call/57 } Tile{ AsIs: e.Call0/59 } Tile{ AsIs: e.Call1/61 } Tile{ AsIs: e.Call2/63 } Tile{ AsIs: e.Call3/65 } Tile{ AsIs: e.Call4/67 } Tile{ AsIs: e.Call5/69 } Tile{ AsIs: e.Call6/71 } Tile{ AsIs: e.Call7/73 } Tile{ AsIs: e.Call8/75 } Tile{ AsIs: e.FuncNamesAsBytes/77 } Tile{ AsIs: e.IdentsAsBytes/79 } Tile{ AsIs: e.StringsAsBytes/81 } Tile{ AsIs: e.Call9/83 } Tile{ HalfReuse: >/56 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_number(context[0], 2UL);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_gen_Fetch_Z2]);
    refalrts::reinit_open_call(context[20]);
    refalrts::reinit_name(context[23], functions[efunc_Lenw]);
    refalrts::reinit_close_call(context[56]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::push_stack( vm, context[56] );
    refalrts::push_stack( vm, context[20] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[56] );
    res = refalrts::splice_evar( res, context[83], context[84] );
    res = refalrts::splice_evar( res, context[81], context[82] );
    res = refalrts::splice_evar( res, context[79], context[80] );
    res = refalrts::splice_evar( res, context[77], context[78] );
    res = refalrts::splice_evar( res, context[75], context[76] );
    res = refalrts::splice_evar( res, context[73], context[74] );
    res = refalrts::splice_evar( res, context[71], context[72] );
    res = refalrts::splice_evar( res, context[69], context[70] );
    res = refalrts::splice_evar( res, context[67], context[68] );
    res = refalrts::splice_evar( res, context[65], context[66] );
    res = refalrts::splice_evar( res, context[63], context[64] );
    res = refalrts::splice_evar( res, context[61], context[62] );
    res = refalrts::splice_evar( res, context[59], context[60] );
    res = refalrts::splice_evar( res, context[57], context[58] );
    res = refalrts::splice_evar( res, context[20], context[23] );
    refalrts::splice_to_freelist_open( vm, context[7], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutBlock@1/4 (/7 e.Call/5 )/8 (/11 e.Call0/9 )/12 (/15 e.Call1/13 )/16 (/19 e.Call2/17 )/20 (/23 e.Call3/21 )/24 (/27 e.Call4/25 )/28 (/31 e.Call5/29 )/32 (/35 e.Call6/33 )/36 (/39 e.Call7/37 )/40 (/43 e.Call8/41 )/44 (/47 e.FuncNamesAsBytes/45 )/48 (/51 e.IdentsAsBytes/49 )/52 (/55 e.StringsAsBytes/53 )/56 e.Call9/2 >/1
  // closed e.Call as range 5
  // closed e.Call0 as range 9
  // closed e.Call1 as range 13
  // closed e.Call2 as range 17
  // closed e.Call3 as range 21
  // closed e.Call4 as range 25
  // closed e.Call5 as range 29
  // closed e.Call6 as range 33
  // closed e.Call7 as range 37
  // closed e.Call8 as range 41
  // closed e.FuncNamesAsBytes as range 45
  // closed e.IdentsAsBytes as range 49
  // closed e.StringsAsBytes as range 53
  // closed e.Call9 as range 2
  //DEBUG: e.Call: 5
  //DEBUG: e.Call0: 9
  //DEBUG: e.Call1: 13
  //DEBUG: e.Call2: 17
  //DEBUG: e.Call3: 21
  //DEBUG: e.Call4: 25
  //DEBUG: e.Call5: 29
  //DEBUG: e.Call6: 33
  //DEBUG: e.Call7: 37
  //DEBUG: e.Call8: 41
  //DEBUG: e.FuncNamesAsBytes: 45
  //DEBUG: e.IdentsAsBytes: 49
  //DEBUG: e.StringsAsBytes: 53
  //DEBUG: e.Call9: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 (/11 {REMOVED TILE} )/12 (/15 {REMOVED TILE} )/16 (/19 {REMOVED TILE} )/20 (/23 {REMOVED TILE} )/24 (/27 {REMOVED TILE} )/28 (/31 {REMOVED TILE} )/32 (/35 {REMOVED TILE} )/36 (/39 {REMOVED TILE} )/40 (/43 {REMOVED TILE} )/44 (/47 {REMOVED TILE} )/48 (/51 {REMOVED TILE} )/52 (/55 {REMOVED TILE} )/56 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock@0/4 HalfReuse: # ConstTable/7 } Tile{ AsIs: e.Call/5 } Tile{ AsIs: e.Call0/9 } Tile{ AsIs: e.Call1/13 } Tile{ AsIs: e.Call2/17 } Tile{ AsIs: e.Call3/21 } Tile{ AsIs: e.Call4/25 } Tile{ AsIs: e.Call5/29 } Tile{ AsIs: e.Call6/33 } Tile{ AsIs: e.Call7/37 } Tile{ AsIs: e.Call8/41 } Tile{ AsIs: e.FuncNamesAsBytes/45 } Tile{ AsIs: e.IdentsAsBytes/49 } Tile{ AsIs: e.StringsAsBytes/53 } Tile{ AsIs: e.Call9/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_PutBlock_Z0]);
  refalrts::reinit_ident(context[7], identifiers[ident_ConstTable]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[53], context[54] );
  res = refalrts::splice_evar( res, context[49], context[50] );
  res = refalrts::splice_evar( res, context[45], context[46] );
  res = refalrts::splice_evar( res, context[41], context[42] );
  res = refalrts::splice_evar( res, context[37], context[38] );
  res = refalrts::splice_evar( res, context[33], context[34] );
  res = refalrts::splice_evar( res, context[29], context[30] );
  res = refalrts::splice_evar( res, context[25], context[26] );
  res = refalrts::splice_evar( res, context[21], context[22] );
  res = refalrts::splice_evar( res, context[17], context[18] );
  res = refalrts::splice_evar( res, context[13], context[14] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutBlock_Z1("PutBlock@1", COOKIE1_, COOKIE2_, func_gen_PutBlock_Z1);


static refalrts::FnResult func_gen_DoMapAccum_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 50 elems
  refalrts::Iter context[50];
  refalrts::zeros( context, 50 );
  // </0 & DoMapAccum@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@1/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@1/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@1/4 (/5 e.new8/21 )/6 (/9 e.new12/17 )/10 (/15 s.new9/25 e.new10/23 )/16 e.new11/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      context[23] = 0;
      context[24] = 0;
      if( ! refalrts::brackets_term( context[23], context[24], context[15] ) )
        continue;
      // closed e.new8 as range 21
      // closed e.new12 as range 17
      // closed e.new11 as range 19
      if( ! refalrts::svar_left( context[25], context[23], context[24] ) )
        continue;
      // closed e.new10 as range 23
      do {
        // </0 & DoMapAccum@1/4 (/5 e./26 )/6 (/9 e.Scanned/28 )/10 (/15 # UnitName/25 e.1/30 )/16 e.Tail/32 >/1
        context[26] = context[21];
        context[27] = context[22];
        context[28] = context[17];
        context[29] = context[18];
        context[30] = context[23];
        context[31] = context[24];
        context[32] = context[19];
        context[33] = context[20];
        if( ! refalrts::ident_term( identifiers[ident_UnitName], context[25] ) )
          continue;
        // closed e. as range 26
        // closed e.Scanned as range 28
        // closed e.1 as range 30
        // closed e.Tail as range 32
        //DEBUG: e.: 26
        //DEBUG: e.Scanned: 28
        //DEBUG: e.1: 30
        //DEBUG: e.Tail: 32

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoMapAccum$1=1@1/6 AsIs: (/9 AsIs: e.Scanned/28 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/32 } Tile{ HalfReuse: )/4 AsIs: (/5 } Tile{ AsIs: e./26 } )/34 </35 & PutBlock@3/36 </37 Tile{ HalfReuse: & Ord/25 AsIs: e.1/30 HalfReuse: >/16 } >/38 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[34]);
        refalrts::alloc_open_call(vm, context[35]);
        refalrts::alloc_name(vm, context[36], functions[efunc_gen_PutBlock_Z3]);
        refalrts::alloc_open_call(vm, context[37]);
        refalrts::alloc_close_call(vm, context[38]);
        refalrts::reinit_name(context[6], functions[efunc_gen_DoMapAccum_S1A1Z1]);
        refalrts::reinit_close_bracket(context[4]);
        refalrts::reinit_name(context[25], functions[efunc_Ord]);
        refalrts::reinit_close_call(context[16]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[38] );
        refalrts::push_stack( vm, context[35] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[37] );
        refalrts::link_brackets( context[5], context[34] );
        refalrts::link_brackets( context[15], context[4] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_elem( res, context[38] );
        res = refalrts::splice_evar( res, context[25], context[16] );
        res = refalrts::splice_evar( res, context[34], context[37] );
        res = refalrts::splice_evar( res, context[26], context[27] );
        res = refalrts::splice_evar( res, context[4], context[5] );
        res = refalrts::splice_evar( res, context[32], context[33] );
        res = refalrts::splice_evar( res, context[6], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@1/4 (/5 e.new13/26 )/6 (/9 e.new17/28 )/10 (/15 # CmdEnumDescr/25 s.new14/34 e.new15/30 )/16 e.new16/32 >/1
      context[26] = context[21];
      context[27] = context[22];
      context[28] = context[17];
      context[29] = context[18];
      context[30] = context[23];
      context[31] = context[24];
      context[32] = context[19];
      context[33] = context[20];
      if( ! refalrts::ident_term( identifiers[ident_CmdEnumDescr], context[25] ) )
        continue;
      // closed e.new13 as range 26
      // closed e.new17 as range 28
      // closed e.new16 as range 32
      if( ! refalrts::svar_left( context[34], context[30], context[31] ) )
        continue;
      // closed e.new15 as range 30
      do {
        // </0 & DoMapAccum@1/4 (/5 e./35 )/6 (/9 e.Scanned/37 )/10 (/15 # CmdEnumDescr/25 # GN-Entry/34 e.2/39 )/16 e.Tail/41 >/1
        context[35] = context[26];
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[33];
        if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[34] ) )
          continue;
        // closed e. as range 35
        // closed e.Scanned as range 37
        // closed e.2 as range 39
        // closed e.Tail as range 41
        //DEBUG: e.: 35
        //DEBUG: e.Scanned: 37
        //DEBUG: e.2: 39
        //DEBUG: e.Tail: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoMapAccum$1=1@1/6 AsIs: (/9 AsIs: e.Scanned/37 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/41 } Tile{ HalfReuse: )/4 AsIs: (/5 } Tile{ AsIs: e./35 } )/43 </44 & PutBlock@4/45 </46 & Asciiz@1/47 Tile{ HalfReuse: </25 HalfReuse: & DisplayName/34 AsIs: e.2/39 HalfReuse: >/16 } >/48 >/49 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[43]);
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_gen_PutBlock_Z4]);
        refalrts::alloc_open_call(vm, context[46]);
        refalrts::alloc_name(vm, context[47], functions[efunc_gen_Asciiz_Z1]);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::alloc_close_call(vm, context[49]);
        refalrts::reinit_name(context[6], functions[efunc_gen_DoMapAccum_S1A1Z1]);
        refalrts::reinit_close_bracket(context[4]);
        refalrts::reinit_open_call(context[25]);
        refalrts::reinit_name(context[34], functions[efunc_DisplayName]);
        refalrts::reinit_close_call(context[16]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[49] );
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[25] );
        refalrts::link_brackets( context[5], context[43] );
        refalrts::link_brackets( context[15], context[4] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[48], context[49] );
        res = refalrts::splice_evar( res, context[25], context[16] );
        res = refalrts::splice_evar( res, context[43], context[47] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[4], context[5] );
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_evar( res, context[6], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & DoMapAccum@1/4 (/5 e./35 )/6 (/9 e.Scanned/37 )/10 (/15 # CmdEnumDescr/25 # GN-Local/34 e.2/39 )/16 e.Tail/41 >/1
        context[35] = context[26];
        context[36] = context[27];
        context[37] = context[28];
        context[38] = context[29];
        context[39] = context[30];
        context[40] = context[31];
        context[41] = context[32];
        context[42] = context[33];
        if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[34] ) )
          continue;
        // closed e. as range 35
        // closed e.Scanned as range 37
        // closed e.2 as range 39
        // closed e.Tail as range 41
        //DEBUG: e.: 35
        //DEBUG: e.Scanned: 37
        //DEBUG: e.2: 39
        //DEBUG: e.Tail: 41

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoMapAccum$1=1@1/6 AsIs: (/9 AsIs: e.Scanned/37 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/41 } Tile{ HalfReuse: )/4 AsIs: (/5 } Tile{ AsIs: e./35 } )/43 </44 & PutBlock@4/45 </46 & Asciiz@2/47 Tile{ HalfReuse: </25 HalfReuse: & DisplayName/34 AsIs: e.2/39 HalfReuse: >/16 } >/48 >/49 Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_bracket(vm, context[43]);
        refalrts::alloc_open_call(vm, context[44]);
        refalrts::alloc_name(vm, context[45], functions[efunc_gen_PutBlock_Z4]);
        refalrts::alloc_open_call(vm, context[46]);
        refalrts::alloc_name(vm, context[47], functions[efunc_gen_Asciiz_Z2]);
        refalrts::alloc_close_call(vm, context[48]);
        refalrts::alloc_close_call(vm, context[49]);
        refalrts::reinit_name(context[6], functions[efunc_gen_DoMapAccum_S1A1Z1]);
        refalrts::reinit_close_bracket(context[4]);
        refalrts::reinit_open_call(context[25]);
        refalrts::reinit_name(context[34], functions[efunc_DisplayName]);
        refalrts::reinit_close_call(context[16]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[49] );
        refalrts::push_stack( vm, context[44] );
        refalrts::push_stack( vm, context[48] );
        refalrts::push_stack( vm, context[46] );
        refalrts::push_stack( vm, context[16] );
        refalrts::push_stack( vm, context[25] );
        refalrts::link_brackets( context[5], context[43] );
        refalrts::link_brackets( context[15], context[4] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[48], context[49] );
        res = refalrts::splice_evar( res, context[25], context[16] );
        res = refalrts::splice_evar( res, context[43], context[47] );
        res = refalrts::splice_evar( res, context[35], context[36] );
        res = refalrts::splice_evar( res, context[4], context[5] );
        res = refalrts::splice_evar( res, context[41], context[42] );
        res = refalrts::splice_evar( res, context[6], context[15] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@1/4 (/5 e./35 )/6 (/9 e.Scanned/37 )/10 (/15 # CmdEnumDescr/25 s.ScopeClass/34 e.2/39 )/16 e.Tail/41 >/1
      context[35] = context[26];
      context[36] = context[27];
      context[37] = context[28];
      context[38] = context[29];
      context[39] = context[30];
      context[40] = context[31];
      context[41] = context[32];
      context[42] = context[33];
      // closed e. as range 35
      // closed e.Scanned as range 37
      // closed e.2 as range 39
      // closed e.Tail as range 41
      //DEBUG: s.ScopeClass: 34
      //DEBUG: e.: 35
      //DEBUG: e.Scanned: 37
      //DEBUG: e.2: 39
      //DEBUG: e.Tail: 41

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 } Tile{ HalfReuse: & DoMapAccum$1=1@1/6 AsIs: (/9 AsIs: e.Scanned/37 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/41 } Tile{ HalfReuse: )/4 AsIs: (/5 } Tile{ AsIs: e./35 } )/43 </44 & PutBlock@4/45 </46 Tile{ HalfReuse: & NameWithSign-Bytes*2/25 AsIs: s.ScopeClass/34 AsIs: e.2/39 HalfReuse: >/16 } >/47 Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[43]);
      refalrts::alloc_open_call(vm, context[44]);
      refalrts::alloc_name(vm, context[45], functions[efunc_gen_PutBlock_Z4]);
      refalrts::alloc_open_call(vm, context[46]);
      refalrts::alloc_close_call(vm, context[47]);
      refalrts::reinit_name(context[6], functions[efunc_gen_DoMapAccum_S1A1Z1]);
      refalrts::reinit_close_bracket(context[4]);
      refalrts::reinit_name(context[25], functions[efunc_gen_NameWithSignm_Bytes_D2]);
      refalrts::reinit_close_call(context[16]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[47] );
      refalrts::push_stack( vm, context[44] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[46] );
      refalrts::link_brackets( context[5], context[43] );
      refalrts::link_brackets( context[15], context[4] );
      refalrts::link_brackets( context[9], context[10] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_elem( res, context[47] );
      res = refalrts::splice_evar( res, context[25], context[16] );
      res = refalrts::splice_evar( res, context[43], context[46] );
      res = refalrts::splice_evar( res, context[35], context[36] );
      res = refalrts::splice_evar( res, context[4], context[5] );
      res = refalrts::splice_evar( res, context[41], context[42] );
      res = refalrts::splice_evar( res, context[6], context[15] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@1/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@1/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & GenCommand-Globals*4/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_GenCommandm_Globals_D4]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@1/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@1/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@1/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & GenCommand-Globals@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_GenCommandm_Globals_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z1("DoMapAccum@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z1);


static refalrts::FnResult func_gen_Map_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & Map@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@2/4 t.Next/7 e.Tail/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.Tail as range 5
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & GenCommand-RASL/4 AsIs: t.Next/7 } >/9 </10 & Map@2/11 Tile{ AsIs: e.Tail/5 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[9]);
    refalrts::alloc_open_call(vm, context[10]);
    refalrts::alloc_name(vm, context[11], functions[efunc_gen_Map_Z2]);
    refalrts::update_name(context[4], functions[efunc_GenCommandm_RASL]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[9], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@2/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@2/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@2/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & GenCommand-RASL@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_GenCommandm_RASL_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z2("Map@2", COOKIE1_, COOKIE2_, func_gen_Map_Z2);


static refalrts::FnResult func_gen_Map_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & Map@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@3/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@3/4 (/7 s.StringId/13 e.0/11 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.Tail as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.0 as range 11
      //DEBUG: e.Tail: 9
      //DEBUG: s.StringId: 13
      //DEBUG: e.0: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.StringId/13 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@1/4 HalfReuse: </7 } & Lenw/14 Tile{ AsIs: e.0/11 } >/15 >/16 </17 Tile{ HalfReuse: & Map@3/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[14], functions[efunc_Lenw]);
      refalrts::alloc_close_call(vm, context[15]);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z1]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z3]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[15], context[17] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_elem( res, context[14] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@3/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & BytesFromStringList\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@3/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z3]);
    refalrts::update_name(context[4], functions[efunc_gen_BytesFromStringList_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@3/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@3/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@3/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & BytesFromStringList\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_BytesFromStringList_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z3("Map@3", COOKIE1_, COOKIE2_, func_gen_Map_Z3);


static refalrts::FnResult func_gen_Map_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 18 elems
  refalrts::Iter context[18];
  refalrts::zeros( context, 18 );
  // </0 & Map@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@4/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@4/4 (/7 s.IdentId/13 e.0/11 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.Tail as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.0 as range 11
      //DEBUG: e.Tail: 9
      //DEBUG: s.IdentId: 13
      //DEBUG: e.0: 11

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.IdentId/13 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & Asciiz/4 HalfReuse: </7 } & DisplayName/14 Tile{ AsIs: e.0/11 } >/15 >/16 </17 Tile{ HalfReuse: & Map@4/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[14], functions[efunc_DisplayName]);
      refalrts::alloc_close_call(vm, context[15]);
      refalrts::alloc_close_call(vm, context[16]);
      refalrts::alloc_open_call(vm, context[17]);
      refalrts::update_name(context[4], functions[efunc_Asciiz]);
      refalrts::reinit_open_call(context[7]);
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z4]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[17] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[0] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[7] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[15], context[17] );
      res = refalrts::splice_evar( res, context[11], context[12] );
      res = refalrts::splice_elem( res, context[14] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@4/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & BytesFromIdentList\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@4/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z4]);
    refalrts::update_name(context[4], functions[efunc_gen_BytesFromIdentList_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@4/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@4/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@4/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & BytesFromIdentList\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_BytesFromIdentList_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z4("Map@4", COOKIE1_, COOKIE2_, func_gen_Map_Z4);


static refalrts::FnResult func_gen_Map_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & Map@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@5/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@5/4 (/7 s.new3/13 e.new4/11 )/8 e.new5/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.new5 as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      // closed e.new4 as range 11
      do {
        // </0 & Map@5/4 (/7 # GN-Entry/13 e.0/14 )/8 e.Tail/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[13] ) )
          continue;
        // closed e.0 as range 14
        // closed e.Tail as range 16
        //DEBUG: e.0: 14
        //DEBUG: e.Tail: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Asciiz@1/4 HalfReuse: </7 HalfReuse: & DisplayName/13 AsIs: e.0/14 HalfReuse: >/8 } >/18 </19 & Map@5/20 Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[18]);
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_gen_Map_Z5]);
        refalrts::update_name(context[4], functions[efunc_gen_Asciiz_Z1]);
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[13], functions[efunc_DisplayName]);
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[7] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[18], context[20] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      do {
        // </0 & Map@5/4 (/7 # GN-Local/13 e.0/14 )/8 e.Tail/16 >/1
        context[14] = context[11];
        context[15] = context[12];
        context[16] = context[9];
        context[17] = context[10];
        if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[13] ) )
          continue;
        // closed e.0 as range 14
        // closed e.Tail as range 16
        //DEBUG: e.0: 14
        //DEBUG: e.Tail: 16

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ AsIs: </0 Reuse: & Asciiz@2/4 HalfReuse: </7 HalfReuse: & DisplayName/13 AsIs: e.0/14 HalfReuse: >/8 } >/18 </19 & Map@5/20 Tile{ AsIs: e.Tail/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_close_call(vm, context[18]);
        refalrts::alloc_open_call(vm, context[19]);
        refalrts::alloc_name(vm, context[20], functions[efunc_gen_Map_Z5]);
        refalrts::update_name(context[4], functions[efunc_gen_Asciiz_Z2]);
        refalrts::reinit_open_call(context[7]);
        refalrts::reinit_name(context[13], functions[efunc_DisplayName]);
        refalrts::reinit_close_call(context[8]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[19] );
        refalrts::push_stack( vm, context[18] );
        refalrts::push_stack( vm, context[0] );
        refalrts::push_stack( vm, context[8] );
        refalrts::push_stack( vm, context[7] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[16], context[17] );
        res = refalrts::splice_evar( res, context[18], context[20] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & Map@5/4 (/7 s.ScopeClass/13 e.0/14 )/8 e.Tail/16 >/1
      context[14] = context[11];
      context[15] = context[12];
      context[16] = context[9];
      context[17] = context[10];
      // closed e.0 as range 14
      // closed e.Tail as range 16
      //DEBUG: s.ScopeClass: 13
      //DEBUG: e.0: 14
      //DEBUG: e.Tail: 16

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.ScopeClass/13 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & NameWithSign-Bytes*2/4 HalfReuse: s.ScopeClass13 /7 } Tile{ AsIs: e.0/14 } >/18 </19 Tile{ HalfReuse: & Map@5/8 AsIs: e.Tail/16 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[18]);
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::update_name(context[4], functions[efunc_gen_NameWithSignm_Bytes_D2]);
      refalrts::reinit_svar( context[7], context[13] );
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z5]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_evar( res, context[14], context[15] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@5/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & BytesFromFunctionList\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@5/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z5]);
    refalrts::update_name(context[4], functions[efunc_gen_BytesFromFunctionList_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@5/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@5/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@5/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & BytesFromFunctionList\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_BytesFromFunctionList_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z5("Map@5", COOKIE1_, COOKIE2_, func_gen_Map_Z5);


static refalrts::FnResult func_gen_Asciiz_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Asciiz@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Asciiz@1/4 e.Call/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Call as range 5
    //DEBUG: e.Call: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 42/7 Tile{ AsIs: </0 Reuse: & Ord/4 AsIs: e.Call/5 AsIs: >/1 } 0/8 Tile{ ]] }
    refalrts::alloc_number(vm, context[7], 42UL);
    refalrts::alloc_number(vm, context[8], 0UL);
    refalrts::update_name(context[4], functions[efunc_Ord]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Asciiz@1/4 e.Call/2 >/1
  // closed e.Call as range 2
  //DEBUG: e.Call: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Asciiz@0/0 HalfReuse: '*'/4 AsIs: e.Call/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Asciiz_Z0]);
  refalrts::reinit_char(context[4], '*');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Asciiz_Z1("Asciiz@1", COOKIE1_, COOKIE2_, func_gen_Asciiz_Z1);


static refalrts::FnResult func_gen_Asciiz_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 9 elems
  refalrts::Iter context[9];
  refalrts::zeros( context, 9 );
  // </0 & Asciiz@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Asciiz@2/4 e.Call/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Call as range 5
    //DEBUG: e.Call: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 35/7 Tile{ AsIs: </0 Reuse: & Ord/4 AsIs: e.Call/5 AsIs: >/1 } 0/8 Tile{ ]] }
    refalrts::alloc_number(vm, context[7], 35UL);
    refalrts::alloc_number(vm, context[8], 0UL);
    refalrts::update_name(context[4], functions[efunc_Ord]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[8] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_elem( res, context[7] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Asciiz@2/4 e.Call/2 >/1
  // closed e.Call as range 2
  //DEBUG: e.Call: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Asciiz@0/0 HalfReuse: '#'/4 AsIs: e.Call/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Asciiz_Z0]);
  refalrts::reinit_char(context[4], '#');
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Asciiz_Z2("Asciiz@2", COOKIE1_, COOKIE2_, func_gen_Asciiz_Z2);


static refalrts::FnResult func_gen_Fetch_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & Fetch@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Fetch@1/4 s.Length/7 e./5 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    // closed e. as range 5
    //DEBUG: s.Length: 7
    //DEBUG: e.: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutWordLE/4 AsIs: s.Length/7 } >/8 </9 & Ord/10 Tile{ AsIs: e./5 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[8]);
    refalrts::alloc_open_call(vm, context[9]);
    refalrts::alloc_name(vm, context[10], functions[efunc_Ord]);
    refalrts::update_name(context[4], functions[efunc_PutWordLE]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[9] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[8], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Fetch@1/4 e.Argument/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Argument as range 5
    //DEBUG: e.Argument: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & BytesFromStringList\1\1*1/4 AsIs: e.Argument/5 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_BytesFromStringList_L1L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@1/4 e.arg/2 >/1
  // closed e.arg as range 2
  //DEBUG: e.arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 AsIs: e.arg/2 HalfReuse: & BytesFromStringList\1\1@0/1 } >/5 Tile{ ]] }
  refalrts::alloc_close_call(vm, context[5]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::reinit_name(context[1], functions[efunc_gen_BytesFromStringList_L1L1Z0]);
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z1("Fetch@1", COOKIE1_, COOKIE2_, func_gen_Fetch_Z1);


static refalrts::FnResult func_gen_Fetch_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 8 elems
  refalrts::Iter context[8];
  refalrts::zeros( context, 8 );
  // </0 & Fetch@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Fetch@2/4 s.Length/7 e./5 >/1
    context[5] = context[2];
    context[6] = context[3];
    if( ! refalrts::svar_left( context[7], context[5], context[6] ) )
      continue;
    // closed e. as range 5
    //DEBUG: s.Length: 7
    //DEBUG: e.: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutWordLE/4 AsIs: s.Length/7 } Tile{ AsIs: >/1 } Tile{ AsIs: e./5 } Tile{ ]] }
    refalrts::update_name(context[4], functions[efunc_PutWordLE]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_elem( res, context[1] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Fetch@2/4 e.Argument/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Argument as range 5
    //DEBUG: e.Argument: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock\1*1/4 AsIs: e.Argument/5 AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_PutBlock_L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Fetch@2/4 e.arg/2 >/1
  // closed e.arg as range 2
  //DEBUG: e.arg: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Fetch@0/4 AsIs: e.arg/2 HalfReuse: & PutBlock\1@0/1 } >/5 Tile{ ]] }
  refalrts::alloc_close_call(vm, context[5]);
  refalrts::update_name(context[4], functions[efunc_gen_Fetch_Z0]);
  refalrts::reinit_name(context[1], functions[efunc_gen_PutBlock_L1Z0]);
  refalrts::push_stack( vm, context[5] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = arg_end->next;
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Fetch_Z2("Fetch@2", COOKIE1_, COOKIE2_, func_gen_Fetch_Z2);


static refalrts::FnResult func_gen_Map_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 20 elems
  refalrts::Iter context[20];
  refalrts::zeros( context, 20 );
  // </0 & Map@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & Map@6/4 t.new1/7 e.new2/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    context[8] = refalrts::tvar_left( context[7], context[5], context[6] );
    if( ! context[8] )
      continue;
    // closed e.new2 as range 5
    do {
      // </0 & Map@6/4 (/7 s.Ident/13 s.Function/14 )/8 e.Tail/9 >/1
      context[9] = context[5];
      context[10] = context[6];
      context[11] = 0;
      context[12] = 0;
      if( ! refalrts::brackets_term( context[11], context[12], context[7] ) )
        continue;
      // closed e.Tail as range 9
      if( ! refalrts::svar_left( context[13], context[11], context[12] ) )
        continue;
      if( ! refalrts::svar_left( context[14], context[11], context[12] ) )
        continue;
      if( ! refalrts::empty_seq( context[11], context[12] ) )
        continue;
      //DEBUG: e.Tail: 9
      //DEBUG: s.Ident: 13
      //DEBUG: s.Function: 14

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} s.Ident/13 {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutWordLE/4 HalfReuse: s.Ident13 /7 } >/15 </16 & PutWordLE/17 Tile{ AsIs: s.Function/14 } >/18 </19 Tile{ HalfReuse: & Map@6/8 AsIs: e.Tail/9 AsIs: >/1 ]] }
      refalrts::alloc_close_call(vm, context[15]);
      refalrts::alloc_open_call(vm, context[16]);
      refalrts::alloc_name(vm, context[17], functions[efunc_PutWordLE]);
      refalrts::alloc_close_call(vm, context[18]);
      refalrts::alloc_open_call(vm, context[19]);
      refalrts::update_name(context[4], functions[efunc_PutWordLE]);
      refalrts::reinit_svar( context[7], context[13] );
      refalrts::reinit_name(context[8], functions[efunc_gen_Map_Z6]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[19] );
      refalrts::push_stack( vm, context[18] );
      refalrts::push_stack( vm, context[16] );
      refalrts::push_stack( vm, context[15] );
      refalrts::push_stack( vm, context[0] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[8];
      res = refalrts::splice_evar( res, context[18], context[19] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[15], context[17] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & Map@6/4 t.Next/7 e.Tail/9 >/1
    context[9] = context[5];
    context[10] = context[6];
    // closed e.Tail as range 9
    //DEBUG: t.Next: 7
    //DEBUG: e.Tail: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & GenCommand-Globals$4\1*1/4 AsIs: t.Next/7 } >/11 </12 & Map@6/13 Tile{ AsIs: e.Tail/9 } Tile{ AsIs: >/1 ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::alloc_open_call(vm, context[12]);
    refalrts::alloc_name(vm, context[13], functions[efunc_gen_Map_Z6]);
    refalrts::update_name(context[4], functions[efunc_gen_GenCommandm_Globals_S4L1D1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Map@6/4 >/1
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & Map@6/4 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Map@6/4 e.items/2 >/1
  // closed e.items as range 2
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & Map@0/0 Reuse: & GenCommand-Globals$4\1@0/4 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_Map_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_GenCommandm_Globals_S4L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Map_Z6("Map@6", COOKIE1_, COOKIE2_, func_gen_Map_Z6);


static refalrts::FnResult func_gen_PutBlock_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 19 elems
  refalrts::Iter context[19];
  refalrts::zeros( context, 19 );
  // </0 & PutBlock@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PutBlock@2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & PutBlock@2/4 (/7 e.Call/13 )/8 (/11 e.Call0/15 )/12 e.Call1/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Call as range 13
    // closed e.Call0 as range 15
    // closed e.Call1 as range 17
    //DEBUG: e.Call: 13
    //DEBUG: e.Call0: 15
    //DEBUG: e.Call1: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 12/0 HalfReuse: </4 HalfReuse: & Fetch@2/7 } Tile{ HalfReuse: </8 HalfReuse: & Lenw/11 } Tile{ AsIs: e.Call/13 } Tile{ AsIs: e.Call0/15 } Tile{ AsIs: e.Call1/17 } Tile{ HalfReuse: >/12 } Tile{ AsIs: >/1 ]] }
    refalrts::reinit_number(context[0], 12UL);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_gen_Fetch_Z2]);
    refalrts::reinit_open_call(context[8]);
    refalrts::reinit_name(context[11], functions[efunc_Lenw]);
    refalrts::reinit_close_call(context[12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[8], context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutBlock@2/4 (/7 e.Call/5 )/8 (/11 e.Call0/9 )/12 e.Call1/2 >/1
  // closed e.Call as range 5
  // closed e.Call0 as range 9
  // closed e.Call1 as range 2
  //DEBUG: e.Call: 5
  //DEBUG: e.Call0: 9
  //DEBUG: e.Call1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 (/11 {REMOVED TILE} )/12 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock@0/4 HalfReuse: # Metatable/7 } Tile{ AsIs: e.Call/5 } Tile{ AsIs: e.Call0/9 } Tile{ AsIs: e.Call1/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_PutBlock_Z0]);
  refalrts::reinit_ident(context[7], identifiers[ident_Metatable]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutBlock_Z2("PutBlock@2", COOKIE1_, COOKIE2_, func_gen_PutBlock_Z2);


static refalrts::FnResult func_gen_PutBlock_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & PutBlock@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & PutBlock@3/4 e.Call/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Call as range 5
    //DEBUG: e.Call: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 11/7 </8 & Fetch@2/9 Tile{ AsIs: </0 Reuse: & Lenw/4 AsIs: e.Call/5 HalfReuse: 0/1 } >/10 >/11 Tile{ ]] }
    refalrts::alloc_number(vm, context[7], 11UL);
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Fetch_Z2]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_Lenw]);
    refalrts::reinit_number(context[1], 0UL);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[7], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutBlock@3/4 e.Call/2 >/1
  // closed e.Call as range 2
  //DEBUG: e.Call: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock@0/4 } # UnitName/5 Tile{ AsIs: e.Call/2 } 0/6 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[5], identifiers[ident_UnitName]);
  refalrts::alloc_number(vm, context[6], 0UL);
  refalrts::update_name(context[4], functions[efunc_gen_PutBlock_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[6] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutBlock_Z3("PutBlock@3", COOKIE1_, COOKIE2_, func_gen_PutBlock_Z3);


static refalrts::FnResult func_gen_PutBlock_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & PutBlock@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & PutBlock@4/4 e.Call/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Call as range 5
    //DEBUG: e.Call: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 5/7 </8 & Fetch@2/9 Tile{ AsIs: </0 Reuse: & Lenw/4 AsIs: e.Call/5 AsIs: >/1 } >/10 Tile{ ]] }
    refalrts::alloc_number(vm, context[7], 5UL);
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Fetch_Z2]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[7], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutBlock@4/4 e.Call/2 >/1
  // closed e.Call as range 2
  //DEBUG: e.Call: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & PutBlock@0/0 HalfReuse: # EmptyFunction/4 AsIs: e.Call/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_PutBlock_Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_EmptyFunction]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutBlock_Z4("PutBlock@4", COOKIE1_, COOKIE2_, func_gen_PutBlock_Z4);


static refalrts::FnResult func_gen_PutBlock_Z5(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & PutBlock@5/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PutBlock@5/4 (/7 e.new1/5 )/8 e.new2/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  // closed e.new1 as range 5
  // closed e.new2 as range 2
  do {
    // </0 & PutBlock@5/4 (/7 e.Call/9 )/8 e.Call0/11 >/1
    context[9] = context[5];
    context[10] = context[6];
    context[11] = context[2];
    context[12] = context[3];
    // closed e.Call as range 9
    // closed e.Call0 as range 11
    //DEBUG: e.Call: 9
    //DEBUG: e.Call0: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: 3/0 HalfReuse: </4 HalfReuse: & Fetch@2/7 } Tile{ HalfReuse: </8 } & Lenw/13 Tile{ AsIs: e.Call/9 } Tile{ AsIs: e.Call0/11 } >/14 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[13], functions[efunc_Lenw]);
    refalrts::alloc_close_call(vm, context[14]);
    refalrts::reinit_number(context[0], 3UL);
    refalrts::reinit_open_call(context[4]);
    refalrts::reinit_name(context[7], functions[efunc_gen_Fetch_Z2]);
    refalrts::reinit_open_call(context[8]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[4] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[14] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_elem( res, context[13] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutBlock@5/4 (/7 e.Call/5 )/8 e.Call0/2 >/1
  // closed e.Call as range 5
  // closed e.Call0 as range 2
  //DEBUG: e.Call: 5
  //DEBUG: e.Call0: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock@0/4 HalfReuse: # RefalFunction/7 } Tile{ AsIs: e.Call/5 } Tile{ AsIs: e.Call0/2 } Tile{ AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_PutBlock_Z0]);
  refalrts::reinit_ident(context[7], identifiers[ident_RefalFunction]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutBlock_Z5("PutBlock@5", COOKIE1_, COOKIE2_, func_gen_PutBlock_Z5);


static refalrts::FnResult func_gen_PutBlock_Z6(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & PutBlock@6/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & PutBlock@6/4 e.Call/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Call as range 5
    //DEBUG: e.Call: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 6/7 </8 & Fetch@2/9 Tile{ AsIs: </0 Reuse: & Lenw/4 AsIs: e.Call/5 AsIs: >/1 } >/10 Tile{ ]] }
    refalrts::alloc_number(vm, context[7], 6UL);
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Fetch_Z2]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[7], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutBlock@6/4 e.Call/2 >/1
  // closed e.Call as range 2
  //DEBUG: e.Call: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & PutBlock@0/0 HalfReuse: # Swap/4 AsIs: e.Call/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_PutBlock_Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_Swap]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutBlock_Z6("PutBlock@6", COOKIE1_, COOKIE2_, func_gen_PutBlock_Z6);


static refalrts::FnResult func_gen_PutBlock_Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & PutBlock@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & PutBlock@7/4 e.Call/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Call as range 5
    //DEBUG: e.Call: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 8/7 </8 & Fetch@2/9 Tile{ AsIs: </0 Reuse: & Lenw/4 AsIs: e.Call/5 AsIs: >/1 } >/10 Tile{ ]] }
    refalrts::alloc_number(vm, context[7], 8UL);
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Fetch_Z2]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[7], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutBlock@7/4 e.Call/2 >/1
  // closed e.Call as range 2
  //DEBUG: e.Call: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & PutBlock@0/0 HalfReuse: # ConditionRasl/4 AsIs: e.Call/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_PutBlock_Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_ConditionRasl]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutBlock_Z7("PutBlock@7", COOKIE1_, COOKIE2_, func_gen_PutBlock_Z7);


static refalrts::FnResult func_gen_PutBlock_Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & PutBlock@8/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & PutBlock@8/4 e.Call/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Call as range 5
    //DEBUG: e.Call: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 9/7 </8 & Fetch@2/9 Tile{ AsIs: </0 Reuse: & Lenw/4 AsIs: e.Call/5 AsIs: >/1 } >/10 Tile{ ]] }
    refalrts::alloc_number(vm, context[7], 9UL);
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Fetch_Z2]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[7], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutBlock@8/4 e.Call/2 >/1
  // closed e.Call as range 2
  //DEBUG: e.Call: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & PutBlock@0/0 HalfReuse: # ConditionNative/4 AsIs: e.Call/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_PutBlock_Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_ConditionNative]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutBlock_Z8("PutBlock@8", COOKIE1_, COOKIE2_, func_gen_PutBlock_Z8);


static refalrts::FnResult func_gen_PutBlock_Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 11 elems
  refalrts::Iter context[11];
  refalrts::zeros( context, 11 );
  // </0 & PutBlock@9/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & PutBlock@9/4 e.Call/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Call as range 5
    //DEBUG: e.Call: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 4/7 </8 & Fetch@2/9 Tile{ AsIs: </0 Reuse: & Lenw/4 AsIs: e.Call/5 AsIs: >/1 } >/10 Tile{ ]] }
    refalrts::alloc_number(vm, context[7], 4UL);
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Fetch_Z2]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::update_name(context[4], functions[efunc_Lenw]);
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[10] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[7], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutBlock@9/4 e.Call/2 >/1
  // closed e.Call as range 2
  //DEBUG: e.Call: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </5 Tile{ HalfReuse: & PutBlock@0/0 HalfReuse: # NativeFunction/4 AsIs: e.Call/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[5]);
  refalrts::reinit_name(context[0], functions[efunc_gen_PutBlock_Z0]);
  refalrts::reinit_ident(context[4], identifiers[ident_NativeFunction]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[5] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutBlock_Z9("PutBlock@9", COOKIE1_, COOKIE2_, func_gen_PutBlock_Z9);


static refalrts::FnResult func_gen_DoMapAccum_Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 53 elems
  refalrts::Iter context[53];
  refalrts::zeros( context, 53 );
  // </0 & DoMapAccum@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum@2/4 t.new1/5 (/9 e.new2/7 )/10 e.new3/2 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[7] = 0;
  context[8] = 0;
  context[9] = refalrts::brackets_left( context[7], context[8], context[2], context[3] );
  if( ! context[9] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[9], context[10]);
  // closed e.new2 as range 7
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum@2/4 t.new4/5 (/9 e.new7/11 )/10 t.new5/15 e.new6/13 >/1
    context[11] = context[7];
    context[12] = context[8];
    context[13] = context[2];
    context[14] = context[3];
    // closed e.new7 as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.new6 as range 13
    do {
      // </0 & DoMapAccum@2/4 (/5 s.new8/23 e.new9/21 )/6 (/9 e.new12/17 )/10 t.new10/15 e.new11/19 >/1
      context[17] = context[11];
      context[18] = context[12];
      context[19] = context[13];
      context[20] = context[14];
      context[21] = 0;
      context[22] = 0;
      if( ! refalrts::brackets_term( context[21], context[22], context[5] ) )
        continue;
      // closed e.new12 as range 17
      // closed e.new11 as range 19
      if( ! refalrts::svar_left( context[23], context[21], context[22] ) )
        continue;
      // closed e.new9 as range 21
      do {
        // </0 & DoMapAccum@2/4 (/5 s.new13/23 e.new14/24 )/6 (/9 e.new19/26 )/10 (/15 s.new15/32 s.new16/33 e.new17/30 )/16 e.new18/28 >/1
        context[24] = context[21];
        context[25] = context[22];
        context[26] = context[17];
        context[27] = context[18];
        context[28] = context[19];
        context[29] = context[20];
        context[30] = 0;
        context[31] = 0;
        if( ! refalrts::brackets_term( context[30], context[31], context[15] ) )
          continue;
        // closed e.new14 as range 24
        // closed e.new19 as range 26
        // closed e.new18 as range 28
        if( ! refalrts::svar_left( context[32], context[30], context[31] ) )
          continue;
        if( ! refalrts::svar_left( context[33], context[30], context[31] ) )
          continue;
        // closed e.new17 as range 30
        do {
          // </0 & DoMapAccum@2/4 (/5 s.Offset/23 e.1/34 )/6 (/9 e.Scanned/36 )/10 (/15 # LABEL/32 s.Label/33 )/16 e.Tail/38 >/1
          context[34] = context[24];
          context[35] = context[25];
          context[36] = context[26];
          context[37] = context[27];
          context[38] = context[28];
          context[39] = context[29];
          if( ! refalrts::ident_term( identifiers[ident_LABEL], context[32] ) )
            continue;
          if( ! refalrts::empty_seq( context[30], context[31] ) )
            continue;
          // closed e.1 as range 34
          // closed e.Scanned as range 36
          // closed e.Tail as range 38
          //DEBUG: s.Offset: 23
          //DEBUG: s.Label: 33
          //DEBUG: e.1: 34
          //DEBUG: e.Scanned: 36
          //DEBUG: e.Tail: 38

          refalrts::reset_allocator(vm);
          //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Label/33 {REMOVED TILE}
          //RESULT: Tile{ [[ AsIs: </0 AsIs: & DoMapAccum@2/4 AsIs: (/5 AsIs: s.Offset/23 AsIs: e.1/34 HalfReuse: (/6 HalfReuse: s.Label33 /9 } s.Offset/23/40 Tile{ HalfReuse: )/32 } Tile{ AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Scanned/36 } Tile{ AsIs: )/16 AsIs: e.Tail/38 AsIs: >/1 ]] }
          refalrts::copy_stvar(vm, context[40], context[23]);
          refalrts::reinit_open_bracket(context[6]);
          refalrts::reinit_svar( context[9], context[33] );
          refalrts::reinit_close_bracket(context[32]);
          refalrts::push_stack( vm, context[1] );
          refalrts::push_stack( vm, context[0] );
          refalrts::link_brackets( context[15], context[16] );
          refalrts::link_brackets( context[5], context[10] );
          refalrts::link_brackets( context[6], context[32] );
          refalrts::Iter trash_prev = arg_begin->prev;
          refalrts::use(trash_prev);
          refalrts::Iter res = context[16];
          res = refalrts::splice_evar( res, context[36], context[37] );
          res = refalrts::splice_evar( res, context[10], context[15] );
          res = refalrts::splice_elem( res, context[32] );
          res = refalrts::splice_elem( res, context[40] );
          refalrts::splice_to_freelist_open( vm, context[9], res );
          return refalrts::cSuccess;
        } while ( 0 );
        refalrts::stop_sentence(vm);

        // </0 & DoMapAccum@2/4 (/5 s.Offset/23 e.1/34 )/6 (/9 e.Scanned/36 )/10 (/15 # CmdOnFailGoTo/32 s.Destination/33 e.3/38 )/16 e.Tail/40 >/1
        context[34] = context[24];
        context[35] = context[25];
        context[36] = context[26];
        context[37] = context[27];
        context[38] = context[30];
        context[39] = context[31];
        context[40] = context[28];
        context[41] = context[29];
        if( ! refalrts::ident_term( identifiers[ident_CmdOnFailGoTo], context[32] ) )
          continue;
        // closed e.1 as range 34
        // closed e.Scanned as range 36
        // closed e.3 as range 38
        // closed e.Tail as range 40
        //DEBUG: s.Offset: 23
        //DEBUG: s.Destination: 33
        //DEBUG: e.1: 34
        //DEBUG: e.Scanned: 36
        //DEBUG: e.3: 38
        //DEBUG: e.Tail: 40

        refalrts::reset_allocator(vm);
        //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
        //RESULT: Tile{ [[ } </42 Tile{ HalfReuse: & DoMapAccum$1=1@2/6 AsIs: (/9 AsIs: e.Scanned/36 AsIs: )/10 AsIs: (/15 } Tile{ AsIs: e.Tail/40 } )/43 (/44 Tile{ AsIs: </0 Reuse: & Add/4 HalfReuse: 1/5 AsIs: s.Offset/23 } >/45 Tile{ AsIs: e.1/34 } )/46 (/47 # CmdOnFailGoTo/48 </49 & Add/50 1/51 s.Offset/23/52 Tile{ HalfReuse: >/32 AsIs: s.Destination/33 AsIs: e.3/38 AsIs: )/16 } Tile{ AsIs: >/1 ]] }
        refalrts::alloc_open_call(vm, context[42]);
        refalrts::alloc_close_bracket(vm, context[43]);
        refalrts::alloc_open_bracket(vm, context[44]);
        refalrts::alloc_close_call(vm, context[45]);
        refalrts::alloc_close_bracket(vm, context[46]);
        refalrts::alloc_open_bracket(vm, context[47]);
        refalrts::alloc_ident(vm, context[48], identifiers[ident_CmdOnFailGoTo]);
        refalrts::alloc_open_call(vm, context[49]);
        refalrts::alloc_name(vm, context[50], functions[efunc_Add]);
        refalrts::alloc_number(vm, context[51], 1UL);
        refalrts::copy_stvar(vm, context[52], context[23]);
        refalrts::reinit_name(context[6], functions[efunc_gen_DoMapAccum_S1A1Z2]);
        refalrts::update_name(context[4], functions[efunc_Add]);
        refalrts::reinit_number(context[5], 1UL);
        refalrts::reinit_close_call(context[32]);
        refalrts::push_stack( vm, context[1] );
        refalrts::push_stack( vm, context[42] );
        refalrts::link_brackets( context[47], context[16] );
        refalrts::push_stack( vm, context[32] );
        refalrts::push_stack( vm, context[49] );
        refalrts::link_brackets( context[44], context[46] );
        refalrts::push_stack( vm, context[45] );
        refalrts::push_stack( vm, context[0] );
        refalrts::link_brackets( context[15], context[43] );
        refalrts::link_brackets( context[9], context[10] );
        refalrts::Iter trash_prev = arg_begin->prev;
        refalrts::use(trash_prev);
        refalrts::Iter res = context[1];
        res = refalrts::splice_evar( res, context[32], context[16] );
        res = refalrts::splice_evar( res, context[46], context[52] );
        res = refalrts::splice_evar( res, context[34], context[35] );
        res = refalrts::splice_elem( res, context[45] );
        res = refalrts::splice_evar( res, context[0], context[23] );
        res = refalrts::splice_evar( res, context[43], context[44] );
        res = refalrts::splice_evar( res, context[40], context[41] );
        res = refalrts::splice_evar( res, context[6], context[15] );
        res = refalrts::splice_elem( res, context[42] );
        refalrts::use( res );
        return refalrts::cSuccess;
      } while ( 0 );
      refalrts::stop_sentence(vm);

      // </0 & DoMapAccum@2/4 (/5 s.Offset/23 e.0/24 )/6 (/9 e.Scanned/26 )/10 t.Next/15 e.Tail/28 >/1
      context[24] = context[21];
      context[25] = context[22];
      context[26] = context[17];
      context[27] = context[18];
      context[28] = context[19];
      context[29] = context[20];
      // closed e.0 as range 24
      // closed e.Scanned as range 26
      // closed e.Tail as range 28
      //DEBUG: t.Next: 15
      //DEBUG: s.Offset: 23
      //DEBUG: e.0: 24
      //DEBUG: e.Scanned: 26
      //DEBUG: e.Tail: 28

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@2/4 AsIs: (/5 } Tile{ AsIs: e.Scanned/26 } Tile{ AsIs: )/6 AsIs: (/9 } Tile{ AsIs: e.Tail/28 } )/30 (/31 </32 & Add/33 1/34 Tile{ AsIs: s.Offset/23 } >/35 Tile{ AsIs: e.0/24 } Tile{ AsIs: )/10 AsIs: t.Next/15 } Tile{ AsIs: >/1 ]] }
      refalrts::alloc_close_bracket(vm, context[30]);
      refalrts::alloc_open_bracket(vm, context[31]);
      refalrts::alloc_open_call(vm, context[32]);
      refalrts::alloc_name(vm, context[33], functions[efunc_Add]);
      refalrts::alloc_number(vm, context[34], 1UL);
      refalrts::alloc_close_call(vm, context[35]);
      refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z2]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[31], context[10] );
      refalrts::push_stack( vm, context[35] );
      refalrts::push_stack( vm, context[32] );
      refalrts::link_brackets( context[9], context[30] );
      refalrts::link_brackets( context[5], context[6] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[10], context[16] );
      res = refalrts::splice_evar( res, context[24], context[25] );
      res = refalrts::splice_elem( res, context[35] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[30], context[34] );
      res = refalrts::splice_evar( res, context[28], context[29] );
      res = refalrts::splice_evar( res, context[6], context[9] );
      res = refalrts::splice_evar( res, context[26], context[27] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & DoMapAccum@2/4 t.Acc/5 (/9 e.Scanned/17 )/10 t.Next/15 e.Tail/19 >/1
    context[17] = context[11];
    context[18] = context[12];
    context[19] = context[13];
    context[20] = context[14];
    // closed e.Scanned as range 17
    // closed e.Tail as range 19
    //DEBUG: t.Acc: 5
    //DEBUG: t.Next: 15
    //DEBUG: e.Scanned: 17
    //DEBUG: e.Tail: 19

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum$1=1@2/4 } Tile{ AsIs: (/9 AsIs: e.Scanned/17 AsIs: )/10 } (/21 Tile{ AsIs: e.Tail/19 } )/22 </23 & CalcLabelsOffsets\1*3/24 Tile{ AsIs: t.Acc/5 } Tile{ AsIs: t.Next/15 } >/25 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[21]);
    refalrts::alloc_close_bracket(vm, context[22]);
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::alloc_name(vm, context[24], functions[efunc_gen_CalcLabelsOffsets_L1D3]);
    refalrts::alloc_close_call(vm, context[25]);
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_S1A1Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[25] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[21], context[22] );
    refalrts::link_brackets( context[9], context[10] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_elem( res, context[25] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    res = refalrts::splice_evar( res, context[22], context[24] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[9], context[10] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & DoMapAccum@2/4 t.Acc/5 (/9 e.Scanned/11 )/10 >/1
    context[11] = context[7];
    context[12] = context[8];
    if( ! refalrts::empty_seq( context[2], context[3] ) )
      continue;
    // closed e.Scanned as range 11
    //DEBUG: t.Acc: 5
    //DEBUG: e.Scanned: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & DoMapAccum@2/4 {REMOVED TILE} (/9 {REMOVED TILE} )/10 >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: t.Acc/5 } Tile{ AsIs: e.Scanned/11 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[5], context[6] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum@2/4 t.acc/5 (/9 e.scanned/7 )/10 e.items/2 >/1
  // closed e.scanned as range 7
  // closed e.items as range 2
  //DEBUG: t.acc: 5
  //DEBUG: e.scanned: 7
  //DEBUG: e.items: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </11 Tile{ HalfReuse: & DoMapAccum@0/0 Reuse: & CalcLabelsOffsets\1@0/4 AsIs: t.acc/5 AsIs: (/9 AsIs: e.scanned/7 AsIs: )/10 AsIs: e.items/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[11]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CalcLabelsOffsets_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[9], context[10] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[11] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_Z2("DoMapAccum@2", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_Z2);


static refalrts::FnResult func_gen_PutCommand_S3A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & PutCommand$3=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PutCommand$3=1@1/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & PutCommand$3=1@1/4 s.Offset$a/5 s.OpCode/8 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    //DEBUG: s.Offset$a: 5
    //DEBUG: s.OpCode: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 } Tile{ AsIs: s.OpCode/8 } (/9 0/10 )/11 0/12 (/13 0/14 )/15 0/16 </17 & Divmod/18 Tile{ AsIs: s.Offset$a/5 } 256/19 >/20 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[9]);
    refalrts::alloc_number(vm, context[10], 0UL);
    refalrts::alloc_close_bracket(vm, context[11]);
    refalrts::alloc_number(vm, context[12], 0UL);
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_number(vm, context[14], 0UL);
    refalrts::alloc_close_bracket(vm, context[15]);
    refalrts::alloc_number(vm, context[16], 0UL);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[19], 256UL);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[17] );
    refalrts::link_brackets( context[13], context[15] );
    refalrts::link_brackets( context[9], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[9], context[18] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutCommand$3=1@1/4 s.Offset$a/5 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: s.Offset$a: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 & PutCommand$3=1@0/7 Tile{ HalfReuse: 0/0 HalfReuse: 0/4 AsIs: s.Offset$a/5 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_PutCommand_S3A1Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutCommand_S3A1Z1("PutCommand$3=1@1", COOKIE1_, COOKIE2_, func_gen_PutCommand_S3A1Z1);


static refalrts::FnResult func_gen_PutCommand_S3A1Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 22 elems
  refalrts::Iter context[22];
  refalrts::zeros( context, 22 );
  // </0 & PutCommand$3=1@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PutCommand$3=1@3/4 s.new1/5 s.new2/6 e.new3/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[6], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new3 as range 2
  do {
    // </0 & PutCommand$3=1@3/4 s.Number/5 s.BracketNumber/6 s.OpCode/9 >/1
    context[7] = context[2];
    context[8] = context[3];
    if( ! refalrts::svar_left( context[9], context[7], context[8] ) )
      continue;
    if( ! refalrts::empty_seq( context[7], context[8] ) )
      continue;
    //DEBUG: s.Number: 5
    //DEBUG: s.BracketNumber: 6
    //DEBUG: s.OpCode: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 } Tile{ AsIs: s.OpCode/9 } (/10 0/11 )/12 0/13 </14 & Divmod/15 Tile{ AsIs: s.Number/5 } 256/16 >/17 </18 & Divmod/19 Tile{ AsIs: s.BracketNumber/6 } 256/20 >/21 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[10]);
    refalrts::alloc_number(vm, context[11], 0UL);
    refalrts::alloc_close_bracket(vm, context[12]);
    refalrts::alloc_number(vm, context[13], 0UL);
    refalrts::alloc_open_call(vm, context[14]);
    refalrts::alloc_name(vm, context[15], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[16], 256UL);
    refalrts::alloc_close_call(vm, context[17]);
    refalrts::alloc_open_call(vm, context[18]);
    refalrts::alloc_name(vm, context[19], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[20], 256UL);
    refalrts::alloc_close_call(vm, context[21]);
    refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[21] );
    refalrts::push_stack( vm, context[18] );
    refalrts::push_stack( vm, context[17] );
    refalrts::push_stack( vm, context[14] );
    refalrts::link_brackets( context[10], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[20], context[21] );
    res = refalrts::splice_elem( res, context[6] );
    res = refalrts::splice_evar( res, context[16], context[19] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[10], context[15] );
    res = refalrts::splice_elem( res, context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutCommand$3=1@3/4 s.Number/5 s.BracketNumber/6 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: s.Number: 5
  //DEBUG: s.BracketNumber: 6
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </7 Tile{ HalfReuse: & PutCommand$3=1@0/0 HalfReuse: 0/4 AsIs: s.Number/5 AsIs: s.BracketNumber/6 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[7]);
  refalrts::reinit_name(context[0], functions[efunc_gen_PutCommand_S3A1Z0]);
  refalrts::reinit_number(context[4], 0UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutCommand_S3A1Z3("PutCommand$3=1@3", COOKIE1_, COOKIE2_, func_gen_PutCommand_S3A1Z3);


static refalrts::FnResult func_gen_PutCommand_S3A1Z7(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & PutCommand$3=1@7/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PutCommand$3=1@7/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & PutCommand$3=1@7/4 s.ElemNumber/5 s.OpCode/8 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    //DEBUG: s.ElemNumber: 5
    //DEBUG: s.OpCode: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 } Tile{ AsIs: s.OpCode/8 } (/9 0/10 )/11 0/12 (/13 0/14 )/15 1/16 </17 & Divmod/18 Tile{ AsIs: s.ElemNumber/5 } 256/19 >/20 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[9]);
    refalrts::alloc_number(vm, context[10], 0UL);
    refalrts::alloc_close_bracket(vm, context[11]);
    refalrts::alloc_number(vm, context[12], 0UL);
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_number(vm, context[14], 0UL);
    refalrts::alloc_close_bracket(vm, context[15]);
    refalrts::alloc_number(vm, context[16], 1UL);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[19], 256UL);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[17] );
    refalrts::link_brackets( context[13], context[15] );
    refalrts::link_brackets( context[9], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[9], context[18] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutCommand$3=1@7/4 s.ElemNumber/5 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: s.ElemNumber: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 & PutCommand$3=1@0/7 Tile{ HalfReuse: 0/0 HalfReuse: 1/4 AsIs: s.ElemNumber/5 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_PutCommand_S3A1Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_number(context[4], 1UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutCommand_S3A1Z7("PutCommand$3=1@7", COOKIE1_, COOKIE2_, func_gen_PutCommand_S3A1Z7);


static refalrts::FnResult func_gen_PutCommand_S3A1Z8(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & PutCommand$3=1@8/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PutCommand$3=1@8/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & PutCommand$3=1@8/4 s.ElemNumber/5 s.OpCode/8 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    //DEBUG: s.ElemNumber: 5
    //DEBUG: s.OpCode: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 } Tile{ AsIs: s.OpCode/8 } (/9 0/10 )/11 0/12 (/13 0/14 )/15 2/16 </17 & Divmod/18 Tile{ AsIs: s.ElemNumber/5 } 256/19 >/20 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[9]);
    refalrts::alloc_number(vm, context[10], 0UL);
    refalrts::alloc_close_bracket(vm, context[11]);
    refalrts::alloc_number(vm, context[12], 0UL);
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_number(vm, context[14], 0UL);
    refalrts::alloc_close_bracket(vm, context[15]);
    refalrts::alloc_number(vm, context[16], 2UL);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[19], 256UL);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[17] );
    refalrts::link_brackets( context[13], context[15] );
    refalrts::link_brackets( context[9], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[9], context[18] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutCommand$3=1@8/4 s.ElemNumber/5 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: s.ElemNumber: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 & PutCommand$3=1@0/7 Tile{ HalfReuse: 0/0 HalfReuse: 2/4 AsIs: s.ElemNumber/5 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_PutCommand_S3A1Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_number(context[4], 2UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutCommand_S3A1Z8("PutCommand$3=1@8", COOKIE1_, COOKIE2_, func_gen_PutCommand_S3A1Z8);


static refalrts::FnResult func_gen_PutCommand_S3A1Z9(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & PutCommand$3=1@9/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PutCommand$3=1@9/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & PutCommand$3=1@9/4 s.ElemNumber/5 s.OpCode/8 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    //DEBUG: s.ElemNumber: 5
    //DEBUG: s.OpCode: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 } Tile{ AsIs: s.OpCode/8 } (/9 0/10 )/11 0/12 (/13 0/14 )/15 4/16 </17 & Divmod/18 Tile{ AsIs: s.ElemNumber/5 } 256/19 >/20 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[9]);
    refalrts::alloc_number(vm, context[10], 0UL);
    refalrts::alloc_close_bracket(vm, context[11]);
    refalrts::alloc_number(vm, context[12], 0UL);
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_number(vm, context[14], 0UL);
    refalrts::alloc_close_bracket(vm, context[15]);
    refalrts::alloc_number(vm, context[16], 4UL);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[19], 256UL);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[17] );
    refalrts::link_brackets( context[13], context[15] );
    refalrts::link_brackets( context[9], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[9], context[18] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutCommand$3=1@9/4 s.ElemNumber/5 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: s.ElemNumber: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 & PutCommand$3=1@0/7 Tile{ HalfReuse: 0/0 HalfReuse: 4/4 AsIs: s.ElemNumber/5 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_PutCommand_S3A1Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_number(context[4], 4UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutCommand_S3A1Z9("PutCommand$3=1@9", COOKIE1_, COOKIE2_, func_gen_PutCommand_S3A1Z9);


static refalrts::FnResult func_gen_PutCommand_S3A1Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & PutCommand$3=1@10/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PutCommand$3=1@10/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & PutCommand$3=1@10/4 s.ElemNumber/5 s.OpCode/8 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    //DEBUG: s.ElemNumber: 5
    //DEBUG: s.OpCode: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 } Tile{ AsIs: s.OpCode/8 } (/9 0/10 )/11 0/12 (/13 0/14 )/15 3/16 </17 & Divmod/18 Tile{ AsIs: s.ElemNumber/5 } 256/19 >/20 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[9]);
    refalrts::alloc_number(vm, context[10], 0UL);
    refalrts::alloc_close_bracket(vm, context[11]);
    refalrts::alloc_number(vm, context[12], 0UL);
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_number(vm, context[14], 0UL);
    refalrts::alloc_close_bracket(vm, context[15]);
    refalrts::alloc_number(vm, context[16], 3UL);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[19], 256UL);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[17] );
    refalrts::link_brackets( context[13], context[15] );
    refalrts::link_brackets( context[9], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[9], context[18] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutCommand$3=1@10/4 s.ElemNumber/5 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: s.ElemNumber: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 & PutCommand$3=1@0/7 Tile{ HalfReuse: 0/0 HalfReuse: 3/4 AsIs: s.ElemNumber/5 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_PutCommand_S3A1Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_number(context[4], 3UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutCommand_S3A1Z10("PutCommand$3=1@10", COOKIE1_, COOKIE2_, func_gen_PutCommand_S3A1Z10);


static refalrts::FnResult func_gen_PutCommand_S3A1Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & PutCommand$3=1@11/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & PutCommand$3=1@11/4 s.new1/5 e.new2/2 >/1
  if( ! refalrts::svar_left( context[5], context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & PutCommand$3=1@11/4 s.ElemNumber/5 s.OpCode/8 >/1
    context[6] = context[2];
    context[7] = context[3];
    if( ! refalrts::svar_left( context[8], context[6], context[7] ) )
      continue;
    if( ! refalrts::empty_seq( context[6], context[7] ) )
      continue;
    //DEBUG: s.ElemNumber: 5
    //DEBUG: s.OpCode: 8

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutCommand$3:1/4 } Tile{ AsIs: s.OpCode/8 } (/9 0/10 )/11 0/12 (/13 0/14 )/15 5/16 </17 & Divmod/18 Tile{ AsIs: s.ElemNumber/5 } 256/19 >/20 Tile{ AsIs: >/1 ]] }
    refalrts::alloc_open_bracket(vm, context[9]);
    refalrts::alloc_number(vm, context[10], 0UL);
    refalrts::alloc_close_bracket(vm, context[11]);
    refalrts::alloc_number(vm, context[12], 0UL);
    refalrts::alloc_open_bracket(vm, context[13]);
    refalrts::alloc_number(vm, context[14], 0UL);
    refalrts::alloc_close_bracket(vm, context[15]);
    refalrts::alloc_number(vm, context[16], 5UL);
    refalrts::alloc_open_call(vm, context[17]);
    refalrts::alloc_name(vm, context[18], functions[efunc_Divmod]);
    refalrts::alloc_number(vm, context[19], 256UL);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::update_name(context[4], functions[efunc_gen_PutCommand_S3B1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[17] );
    refalrts::link_brackets( context[13], context[15] );
    refalrts::link_brackets( context[9], context[11] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[19], context[20] );
    res = refalrts::splice_elem( res, context[5] );
    res = refalrts::splice_evar( res, context[9], context[18] );
    res = refalrts::splice_elem( res, context[8] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutCommand$3=1@11/4 s.ElemNumber/5 e.dyn/2 >/1
  // closed e.dyn as range 2
  //DEBUG: s.ElemNumber: 5
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </6 & PutCommand$3=1@0/7 Tile{ HalfReuse: 0/0 HalfReuse: 5/4 AsIs: s.ElemNumber/5 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[6]);
  refalrts::alloc_name(vm, context[7], functions[efunc_gen_PutCommand_S3A1Z0]);
  refalrts::reinit_number(context[0], 0UL);
  refalrts::reinit_number(context[4], 5UL);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[6] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_evar( res, context[6], context[7] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutCommand_S3A1Z11("PutCommand$3=1@11", COOKIE1_, COOKIE2_, func_gen_PutCommand_S3A1Z11);


static refalrts::FnResult func_gen_ResolveLabeledDestinations_Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 30 elems
  refalrts::Iter context[30];
  refalrts::zeros( context, 30 );
  // </0 & ResolveLabeledDestinations@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & ResolveLabeledDestinations@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & ResolveLabeledDestinations@1/4 (/7 e.Labels-B/13 )/8 (/11 e.Labels-E/15 )/12 e.ReadyRASL/19 (/25 # CmdOnFailGoTo/27 s.CommandOffset/28 s.DestinationLabel/29 e.FuncName/23 )/26 e.UnscannedRASL/21 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Labels-B as range 13
    // closed e.Labels-E as range 15
    context[19] = 0;
    context[20] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[21] = context[17];
      context[22] = context[18];
      context[23] = 0;
      context[24] = 0;
      context[25] = refalrts::brackets_left( context[23], context[24], context[21], context[22] );
      if( ! context[25] )
        continue;
      refalrts::bracket_pointers(context[25], context[26]);
      context[27] = refalrts::ident_left( identifiers[ident_CmdOnFailGoTo], context[23], context[24] );
      if( ! context[27] )
        continue;
      // closed e.UnscannedRASL as range 21
      if( ! refalrts::svar_left( context[28], context[23], context[24] ) )
        continue;
      if( ! refalrts::svar_left( context[29], context[23], context[24] ) )
        continue;
      // closed e.FuncName as range 23
      //DEBUG: e.Labels-B: 13
      //DEBUG: e.Labels-E: 15
      //DEBUG: e.ReadyRASL: 19
      //DEBUG: e.UnscannedRASL: 21
      //DEBUG: s.CommandOffset: 28
      //DEBUG: s.DestinationLabel: 29
      //DEBUG: e.FuncName: 23

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.DestinationLabel/29 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ AsIs: </0 Reuse: & ResolveLabeledDestinations$1=1/4 HalfReuse: s.DestinationLabel29 /7 } Tile{ HalfReuse: (/12 AsIs: e.ReadyRASL/19 HalfReuse: )/25 HalfReuse: (/27 } Tile{ AsIs: e.UnscannedRASL/21 } Tile{ AsIs: )/8 AsIs: (/11 } Tile{ AsIs: e.FuncName/23 } Tile{ AsIs: )/26 } Tile{ AsIs: s.CommandOffset/28 } Tile{ AsIs: e.Labels-B/13 } Tile{ AsIs: e.Labels-E/15 } Tile{ AsIs: >/1 ]] }
      refalrts::update_name(context[4], functions[efunc_gen_ResolveLabeledDestinations_S1A1]);
      refalrts::reinit_svar( context[7], context[29] );
      refalrts::reinit_open_bracket(context[12]);
      refalrts::reinit_close_bracket(context[25]);
      refalrts::reinit_open_bracket(context[27]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[11], context[26] );
      refalrts::link_brackets( context[27], context[8] );
      refalrts::link_brackets( context[12], context[25] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[1];
      res = refalrts::splice_evar( res, context[15], context[16] );
      res = refalrts::splice_evar( res, context[13], context[14] );
      res = refalrts::splice_elem( res, context[28] );
      res = refalrts::splice_elem( res, context[26] );
      res = refalrts::splice_evar( res, context[23], context[24] );
      res = refalrts::splice_evar( res, context[8], context[11] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[12], context[27] );
      refalrts::splice_to_freelist_open( vm, context[7], res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[19], context[20], context[17], context[18] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & ResolveLabeledDestinations@1/4 (/7 e.Labels-B/13 )/8 (/11 e.Labels-E/15 )/12 e.ReadyRASL/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Labels-B as range 13
    // closed e.Labels-E as range 15
    // closed e.ReadyRASL as range 17
    //DEBUG: e.Labels-B: 13
    //DEBUG: e.Labels-E: 15
    //DEBUG: e.ReadyRASL: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} </0 & ResolveLabeledDestinations@1/4 (/7 e.Labels-B/13 )/8 (/11 e.Labels-E/15 )/12 {REMOVED TILE} >/1 {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: e.ReadyRASL/17 } Tile{ ]] }
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[17], context[18] );
    refalrts::splice_to_freelist_open( vm, trash_prev, res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & ResolveLabeledDestinations@1/4 (/7 e.Labels-B/5 )/8 (/11 e.Labels-E/9 )/12 e.dyn1/2 >/1
  // closed e.Labels-B as range 5
  // closed e.Labels-E as range 9
  // closed e.dyn1 as range 2
  //DEBUG: e.Labels-B: 5
  //DEBUG: e.Labels-E: 9
  //DEBUG: e.dyn1: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} )/8 (/11 {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & ResolveLabeledDestinations@0/4 AsIs: (/7 } Tile{ AsIs: e.Labels-B/5 } Tile{ AsIs: e.Labels-E/9 } Tile{ AsIs: )/12 AsIs: e.dyn1/2 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_ResolveLabeledDestinations_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::link_brackets( context[7], context[12] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[12];
  res = refalrts::splice_evar( res, context[9], context[10] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::splice_to_freelist_open( vm, context[7], res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_ResolveLabeledDestinations_Z1("ResolveLabeledDestinations@1", COOKIE1_, COOKIE2_, func_gen_ResolveLabeledDestinations_Z1);


static refalrts::FnResult func_gen_PutBlock_Z10(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & PutBlock@10/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & PutBlock@10/4 e.Call/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Call as range 5
    //DEBUG: e.Call: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 7/7 </8 & Fetch@2/9 Tile{ AsIs: </0 Reuse: & Lenw/4 AsIs: e.Call/5 HalfReuse: 0/1 } >/10 >/11 Tile{ ]] }
    refalrts::alloc_number(vm, context[7], 7UL);
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Fetch_Z2]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_Lenw]);
    refalrts::reinit_number(context[1], 0UL);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[7], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutBlock@10/4 e.Call/2 >/1
  // closed e.Call as range 2
  //DEBUG: e.Call: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock@0/4 } # Reference/5 Tile{ AsIs: e.Call/2 } 0/6 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[5], identifiers[ident_Reference]);
  refalrts::alloc_number(vm, context[6], 0UL);
  refalrts::update_name(context[4], functions[efunc_gen_PutBlock_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[6] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutBlock_Z10("PutBlock@10", COOKIE1_, COOKIE2_, func_gen_PutBlock_Z10);


static refalrts::FnResult func_gen_PutBlock_Z11(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 12 elems
  refalrts::Iter context[12];
  refalrts::zeros( context, 12 );
  // </0 & PutBlock@11/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  do {
    // </0 & PutBlock@11/4 e.Call/5 >/1
    context[5] = context[2];
    context[6] = context[3];
    // closed e.Call as range 5
    //DEBUG: e.Call: 5

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } 10/7 </8 & Fetch@2/9 Tile{ AsIs: </0 Reuse: & Lenw/4 AsIs: e.Call/5 HalfReuse: 0/1 } >/10 >/11 Tile{ ]] }
    refalrts::alloc_number(vm, context[7], 10UL);
    refalrts::alloc_open_call(vm, context[8]);
    refalrts::alloc_name(vm, context[9], functions[efunc_gen_Fetch_Z2]);
    refalrts::alloc_close_call(vm, context[10]);
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_Lenw]);
    refalrts::reinit_number(context[1], 0UL);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[8] );
    refalrts::push_stack( vm, context[10] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_evar( res, context[10], context[11] );
    res = refalrts::splice_evar( res, context[0], context[1] );
    res = refalrts::splice_evar( res, context[7], context[9] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & PutBlock@11/4 e.Call/2 >/1
  // closed e.Call as range 2
  //DEBUG: e.Call: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & PutBlock@0/4 } # Incorporated/5 Tile{ AsIs: e.Call/2 } 0/6 Tile{ AsIs: >/1 ]] }
  refalrts::alloc_ident(vm, context[5], identifiers[ident_Incorporated]);
  refalrts::alloc_number(vm, context[6], 0UL);
  refalrts::update_name(context[4], functions[efunc_gen_PutBlock_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[1];
  res = refalrts::splice_elem( res, context[6] );
  res = refalrts::splice_evar( res, context[2], context[3] );
  res = refalrts::splice_elem( res, context[5] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_PutBlock_Z11("PutBlock@11", COOKIE1_, COOKIE2_, func_gen_PutBlock_Z11);


static refalrts::FnResult func_gen_Apply_Z3(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 15 elems
  refalrts::Iter context[15];
  refalrts::zeros( context, 15 );
  // </0 & Apply@3/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@3/4 t.new1/5 e.new2/2 t.new3/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply@3/4 s.Fn/5 e.X/9 t.X/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X as range 9
    //DEBUG: t.X: 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.X: 9

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.X/9 AsIs: t.X/7 HalfReuse: & $table/1 } >/11 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[11]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[11] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@3/4 (/5 t.Closure/13 e.Bounded/11 )/6 e.X/9 t.X/7 >/1
    context[9] = context[2];
    context[10] = context[3];
    context[11] = 0;
    context[12] = 0;
    if( ! refalrts::brackets_term( context[11], context[12], context[5] ) )
      continue;
    // closed e.X as range 9
    context[14] = refalrts::tvar_left( context[13], context[11], context[12] );
    if( ! context[14] )
      continue;
    // closed e.Bounded as range 11
    //DEBUG: t.X: 7
    //DEBUG: e.X: 9
    //DEBUG: t.Closure: 13
    //DEBUG: e.Bounded: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@3/4 } Tile{ AsIs: t.Closure/13 } Tile{ AsIs: e.Bounded/11 } Tile{ AsIs: e.X/9 } Tile{ AsIs: t.X/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[7];
    res = refalrts::splice_evar( res, context[9], context[10] );
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@3/4 t.dyn0/5 e.X/2 t.X/7 >/1
  // closed e.X as range 2
  //DEBUG: t.dyn0: 5
  //DEBUG: t.X: 7
  //DEBUG: e.X: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: e.X/2 AsIs: t.X/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z3("Apply@3", COOKIE1_, COOKIE2_, func_gen_Apply_Z3);


static refalrts::FnResult func_gen_Apply_Z4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 17 elems
  refalrts::Iter context[17];
  refalrts::zeros( context, 17 );
  // </0 & Apply@4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & Apply@4/4 t.new1/5 e.new2/2 t.new3/9 t.new4/7 >/1
  context[6] = refalrts::tvar_left( context[5], context[2], context[3] );
  if( ! context[6] )
    return refalrts::cRecognitionImpossible;
  context[8] = refalrts::tvar_right( context[7], context[2], context[3] );
  if( ! context[8] )
    return refalrts::cRecognitionImpossible;
  context[10] = refalrts::tvar_right( context[9], context[2], context[3] );
  if( ! context[10] )
    return refalrts::cRecognitionImpossible;
  // closed e.new2 as range 2
  do {
    // </0 & Apply@4/4 s.Fn/5 e.X/11 t.X/9 t.X0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    if( ! refalrts::svar_term( context[5], context[5] ) )
      continue;
    // closed e.X as range 11
    //DEBUG: t.X: 9
    //DEBUG: t.X0: 7
    //DEBUG: s.Fn: 5
    //DEBUG: e.X: 11

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & __Meta_Mu/4 AsIs: s.Fn/5 AsIs: e.X/11 AsIs: t.X/9 AsIs: t.X0/7 HalfReuse: & $table/1 } >/13 Tile{ ]] }
    refalrts::alloc_close_call(vm, context[13]);
    refalrts::update_name(context[4], functions[efunc_u_u_Metau_Mu]);
    refalrts::reinit_name(context[1], functions[efunc_d_table]);
    refalrts::push_stack( vm, context[13] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = arg_end->next;
    res = refalrts::splice_elem( res, context[13] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & Apply@4/4 (/5 t.Closure/15 e.Bounded/13 )/6 e.X/11 t.X/9 t.X0/7 >/1
    context[11] = context[2];
    context[12] = context[3];
    context[13] = 0;
    context[14] = 0;
    if( ! refalrts::brackets_term( context[13], context[14], context[5] ) )
      continue;
    // closed e.X as range 11
    context[16] = refalrts::tvar_left( context[15], context[13], context[14] );
    if( ! context[16] )
      continue;
    // closed e.Bounded as range 13
    //DEBUG: t.X: 9
    //DEBUG: t.X0: 7
    //DEBUG: e.X: 11
    //DEBUG: t.Closure: 15
    //DEBUG: e.Bounded: 13

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/5 {REMOVED TILE} {REMOVED TILE} )/6 {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 AsIs: & Apply@4/4 } Tile{ AsIs: t.Closure/15 } Tile{ AsIs: e.Bounded/13 } Tile{ AsIs: e.X/11 } Tile{ AsIs: t.X/9 AsIs: t.X0/7 AsIs: >/1 ]] }
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[9];
    res = refalrts::splice_evar( res, context[11], context[12] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_evar( res, context[15], context[16] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & Apply@4/4 t.dyn0/5 e.X/2 t.X/9 t.X0/7 >/1
  // closed e.X as range 2
  //DEBUG: t.dyn0: 5
  //DEBUG: t.X: 9
  //DEBUG: t.X0: 7
  //DEBUG: e.X: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE}
  //RESULT: Tile{ [[ AsIs: </0 Reuse: & Apply@0/4 AsIs: t.dyn0/5 AsIs: e.X/2 AsIs: t.X/9 AsIs: t.X0/7 AsIs: >/1 ]] }
  refalrts::update_name(context[4], functions[efunc_gen_Apply_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[0] );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_Apply_Z4("Apply@4", COOKIE1_, COOKIE2_, func_gen_Apply_Z4);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z1(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@1/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@1/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@1/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@1/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z1]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@1/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & GenCommand-Globals@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_GenCommandm_Globals_Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z1("DoMapAccum$1=1@1", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z1);


static refalrts::FnResult func_gen_DoMapAccum_S1A1Z2(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 21 elems
  refalrts::Iter context[21];
  refalrts::zeros( context, 21 );
  // </0 & DoMapAccum$1=1@2/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & DoMapAccum$1=1@2/4 (/7 e.new1/5 )/8 (/11 e.new2/9 )/12 e.new3/2 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  // closed e.new1 as range 5
  // closed e.new2 as range 9
  // closed e.new3 as range 2
  do {
    // </0 & DoMapAccum$1=1@2/4 (/7 e.Scanned0/13 )/8 (/11 e.Tail0/15 )/12 t.Acc$a/19 e.StepScanned/17 >/1
    context[13] = context[5];
    context[14] = context[6];
    context[15] = context[9];
    context[16] = context[10];
    context[17] = context[2];
    context[18] = context[3];
    // closed e.Scanned0 as range 13
    // closed e.Tail0 as range 15
    context[20] = refalrts::tvar_left( context[19], context[17], context[18] );
    if( ! context[20] )
      continue;
    // closed e.StepScanned as range 17
    //DEBUG: e.Scanned0: 13
    //DEBUG: e.Tail0: 15
    //DEBUG: t.Acc$a: 19
    //DEBUG: e.StepScanned: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} (/7 {REMOVED TILE} )/8 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & DoMapAccum@2/4 } Tile{ AsIs: t.Acc$a/19 } Tile{ AsIs: (/11 } Tile{ AsIs: e.Scanned0/13 } Tile{ AsIs: e.StepScanned/17 } Tile{ AsIs: )/12 } Tile{ AsIs: e.Tail0/15 } Tile{ AsIs: >/1 ]] }
    refalrts::update_name(context[4], functions[efunc_gen_DoMapAccum_Z2]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[11], context[12] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[1];
    res = refalrts::splice_evar( res, context[15], context[16] );
    res = refalrts::splice_elem( res, context[12] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[13], context[14] );
    res = refalrts::splice_elem( res, context[11] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[4], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & DoMapAccum$1=1@2/4 (/7 e.Scanned0/5 )/8 (/11 e.Tail0/9 )/12 e.dyn/2 >/1
  // closed e.Scanned0 as range 5
  // closed e.Tail0 as range 9
  // closed e.dyn as range 2
  //DEBUG: e.Scanned0: 5
  //DEBUG: e.Tail0: 9
  //DEBUG: e.dyn: 2

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ } </13 Tile{ HalfReuse: & DoMapAccum$1=1@0/0 Reuse: & CalcLabelsOffsets\1@0/4 AsIs: (/7 AsIs: e.Scanned0/5 AsIs: )/8 AsIs: (/11 AsIs: e.Tail0/9 AsIs: )/12 AsIs: e.dyn/2 AsIs: >/1 ]] }
  refalrts::alloc_open_call(vm, context[13]);
  refalrts::reinit_name(context[0], functions[efunc_gen_DoMapAccum_S1A1Z0]);
  refalrts::update_name(context[4], functions[efunc_gen_CalcLabelsOffsets_L1Z0]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[13] );
  refalrts::link_brackets( context[11], context[12] );
  refalrts::link_brackets( context[7], context[8] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[0];
  res = refalrts::splice_elem( res, context[13] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_DoMapAccum_S1A1Z2("DoMapAccum$1=1@2", COOKIE1_, COOKIE2_, func_gen_DoMapAccum_S1A1Z2);


static refalrts::FnResult func_gen_GenCommandm_Globals_D4(refalrts::VM *vm, refalrts::Iter arg_begin, refalrts::Iter arg_end) {
  (void) vm;
  refalrts::this_is_generated_function(vm);
  refalrts::RefalFunction **functions;
  const refalrts::RefalIdentifier *identifiers;
  refalrts::load_constants(arg_begin, &functions, &identifiers);
  // issue here memory for vars with 36 elems
  refalrts::Iter context[36];
  refalrts::zeros( context, 36 );
  // </0 & GenCommand-Globals*4/4 e.new/2 >/1
  context[0] = arg_begin;
  context[1] = arg_end;
  context[2] = 0;
  context[3] = 0;
  context[4] = refalrts::call_left( context[2], context[3], context[0], context[1] );
  // closed e.new as range 2
  // </0 & GenCommand-Globals*4/4 (/7 e.new1/5 )/8 (/11 s.new2/13 s.new3/14 e.new4/9 )/12 >/1
  context[5] = 0;
  context[6] = 0;
  context[7] = refalrts::brackets_left( context[5], context[6], context[2], context[3] );
  if( ! context[7] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[7], context[8]);
  context[9] = 0;
  context[10] = 0;
  context[11] = refalrts::brackets_left( context[9], context[10], context[2], context[3] );
  if( ! context[11] )
    return refalrts::cRecognitionImpossible;
  refalrts::bracket_pointers(context[11], context[12]);
  if( ! refalrts::empty_seq( context[2], context[3] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new1 as range 5
  if( ! refalrts::svar_left( context[13], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  if( ! refalrts::svar_left( context[14], context[9], context[10] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new4 as range 9
  do {
    // </0 & GenCommand-Globals*4/4 (/7 e.Labels-B/20 (/26 s.Label/28 s.Offset/29 )/27 e.Labels-E/22 )/8 (/11 # CmdInterpretFuncDescr/13 s.ScopeClass/14 e.Name/17 s.Label/19 )/12 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[9];
    context[18] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_CmdInterpretFuncDescr], context[13] ) )
      continue;
    if( ! refalrts::svar_right( context[19], context[17], context[18] ) )
      continue;
    // closed e.Name as range 17
    context[20] = 0;
    context[21] = 0;
    refalrts::start_e_loop(vm);
    do {
      context[22] = context[15];
      context[23] = context[16];
      context[24] = 0;
      context[25] = 0;
      context[26] = refalrts::brackets_left( context[24], context[25], context[22], context[23] );
      if( ! context[26] )
        continue;
      refalrts::bracket_pointers(context[26], context[27]);
      if( ! refalrts::repeated_stvar_left( vm, context[28], context[19], context[24], context[25] ) )
        continue;
      // closed e.Labels-E as range 22
      if( ! refalrts::svar_left( context[29], context[24], context[25] ) )
        continue;
      if( ! refalrts::empty_seq( context[24], context[25] ) )
        continue;
      //DEBUG: s.ScopeClass: 14
      //DEBUG: s.Label: 19
      //DEBUG: e.Name: 17
      //DEBUG: e.Labels-B: 20
      //DEBUG: e.Labels-E: 22
      //DEBUG: s.Offset: 29

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} s.Label/19 {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels-B/20 AsIs: (/26 AsIs: s.Label/28 AsIs: s.Offset/29 AsIs: )/27 AsIs: e.Labels-E/22 AsIs: )/8 HalfReuse: </11 HalfReuse: & PutBlock@5/13 } (/30 Tile{ AsIs: </0 Reuse: & NameWithSign-Bytes/4 } Tile{ AsIs: s.ScopeClass/14 } Tile{ AsIs: e.Name/17 } >/31 )/32 </33 & PutWordLE/34 s.Offset/29/35 Tile{ HalfReuse: >/12 AsIs: >/1 ]] }
      refalrts::alloc_open_bracket(vm, context[30]);
      refalrts::alloc_close_call(vm, context[31]);
      refalrts::alloc_close_bracket(vm, context[32]);
      refalrts::alloc_open_call(vm, context[33]);
      refalrts::alloc_name(vm, context[34], functions[efunc_PutWordLE]);
      refalrts::copy_stvar(vm, context[35], context[29]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[13], functions[efunc_gen_PutBlock_Z5]);
      refalrts::update_name(context[4], functions[efunc_NameWithSignm_Bytes]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[33] );
      refalrts::link_brackets( context[30], context[32] );
      refalrts::push_stack( vm, context[31] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::link_brackets( context[26], context[27] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[12];
      res = refalrts::splice_evar( res, context[31], context[35] );
      res = refalrts::splice_evar( res, context[17], context[18] );
      res = refalrts::splice_elem( res, context[14] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[30] );
      res = refalrts::splice_evar( res, context[7], context[13] );
      refalrts::splice_to_freelist_open( vm, trash_prev, res );
      return refalrts::cSuccess;
    } while ( refalrts::open_evar_advance( context[20], context[21], context[15], context[16] ) );
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Globals*4/4 (/7 e.Labels/15 )/8 (/11 # CmdMetatable/13 s.ScopeClass/14 (/21 e.Name/19 )/22 e.Table/17 )/12 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[9];
    context[18] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_CmdMetatable], context[13] ) )
      continue;
    context[19] = 0;
    context[20] = 0;
    context[21] = refalrts::brackets_left( context[19], context[20], context[17], context[18] );
    if( ! context[21] )
      continue;
    refalrts::bracket_pointers(context[21], context[22]);
    // closed e.Labels as range 15
    // closed e.Name as range 19
    // closed e.Table as range 17
    //DEBUG: s.ScopeClass: 14
    //DEBUG: e.Labels: 15
    //DEBUG: e.Name: 19
    //DEBUG: e.Table: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} s.ScopeClass/14 {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ AsIs: </0 Reuse: & GenCommand-Globals$4=1/4 AsIs: (/7 AsIs: e.Labels/15 AsIs: )/8 HalfReuse: s.ScopeClass14 /11 HalfReuse: (/13 } Tile{ AsIs: e.Name/19 } Tile{ HalfReuse: )/21 } </23 Tile{ HalfReuse: & Lenw/22 AsIs: e.Table/17 HalfReuse: >/12 AsIs: >/1 ]] }
    refalrts::alloc_open_call(vm, context[23]);
    refalrts::update_name(context[4], functions[efunc_gen_GenCommandm_Globals_S4A1]);
    refalrts::reinit_svar( context[11], context[14] );
    refalrts::reinit_open_bracket(context[13]);
    refalrts::reinit_close_bracket(context[21]);
    refalrts::reinit_name(context[22], functions[efunc_Lenw]);
    refalrts::reinit_close_call(context[12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[0] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[23] );
    refalrts::link_brackets( context[13], context[21] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[22];
    res = refalrts::splice_elem( res, context[23] );
    res = refalrts::splice_elem( res, context[21] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::splice_to_freelist_open( vm, context[13], res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Globals*4/4 (/7 e.new5/15 )/8 (/11 # CmdSwapDescr/13 s.new6/14 e.new7/17 )/12 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[9];
    context[18] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_CmdSwapDescr], context[13] ) )
      continue;
    // closed e.new5 as range 15
    // closed e.new7 as range 17
    do {
      // </0 & GenCommand-Globals*4/4 (/7 e.Labels/19 )/8 (/11 # CmdSwapDescr/13 # GN-Entry/14 e.Name/21 )/12 >/1
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[14] ) )
        continue;
      // closed e.Labels as range 19
      // closed e.Name as range 21
      //DEBUG: e.Labels: 19
      //DEBUG: e.Name: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels/19 AsIs: )/8 HalfReuse: </11 HalfReuse: & PutBlock@6/13 HalfReuse: </14 } & Asciiz@1/23 Tile{ AsIs: </0 Reuse: & DisplayName/4 } Tile{ AsIs: e.Name/21 } >/24 Tile{ HalfReuse: >/12 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_Asciiz_Z1]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[13], functions[efunc_gen_PutBlock_Z6]);
      refalrts::reinit_open_call(context[14]);
      refalrts::update_name(context[4], functions[efunc_DisplayName]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[12];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[7], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Globals*4/4 (/7 e.Labels/19 )/8 (/11 # CmdSwapDescr/13 # GN-Local/14 e.Name/21 )/12 >/1
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[14] ) )
        continue;
      // closed e.Labels as range 19
      // closed e.Name as range 21
      //DEBUG: e.Labels: 19
      //DEBUG: e.Name: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels/19 AsIs: )/8 HalfReuse: </11 HalfReuse: & PutBlock@6/13 HalfReuse: </14 } & Asciiz@2/23 Tile{ AsIs: </0 Reuse: & DisplayName/4 } Tile{ AsIs: e.Name/21 } >/24 Tile{ HalfReuse: >/12 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_Asciiz_Z2]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[13], functions[efunc_gen_PutBlock_Z6]);
      refalrts::reinit_open_call(context[14]);
      refalrts::update_name(context[4], functions[efunc_DisplayName]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[12];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[7], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Globals*4/4 (/7 e.Labels/19 )/8 (/11 # CmdSwapDescr/13 s.ScopeClass/14 e.Name/21 )/12 >/1
    context[19] = context[15];
    context[20] = context[16];
    context[21] = context[17];
    context[22] = context[18];
    // closed e.Labels as range 19
    // closed e.Name as range 21
    //DEBUG: s.ScopeClass: 14
    //DEBUG: e.Labels: 19
    //DEBUG: e.Name: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Labels/19 } Tile{ HalfReuse: )/4 HalfReuse: </7 } Tile{ HalfReuse: & PutBlock@6/8 HalfReuse: </11 HalfReuse: & NameWithSign-Bytes*2/13 AsIs: s.ScopeClass/14 AsIs: e.Name/21 HalfReuse: >/12 AsIs: >/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_PutBlock_Z6]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[13], functions[efunc_gen_NameWithSignm_Bytes_D2]);
    refalrts::reinit_close_call(context[12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Globals*4/4 (/7 e.new5/15 )/8 (/11 # CmdConditionFuncDecsrRasl/13 s.new6/14 e.new7/17 )/12 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[9];
    context[18] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_CmdConditionFuncDecsrRasl], context[13] ) )
      continue;
    // closed e.new5 as range 15
    // closed e.new7 as range 17
    do {
      // </0 & GenCommand-Globals*4/4 (/7 e.Labels/19 )/8 (/11 # CmdConditionFuncDecsrRasl/13 # GN-Entry/14 e.Name/21 )/12 >/1
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[14] ) )
        continue;
      // closed e.Labels as range 19
      // closed e.Name as range 21
      //DEBUG: e.Labels: 19
      //DEBUG: e.Name: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels/19 AsIs: )/8 HalfReuse: </11 HalfReuse: & PutBlock@7/13 HalfReuse: </14 } & Asciiz@1/23 Tile{ AsIs: </0 Reuse: & DisplayName/4 } Tile{ AsIs: e.Name/21 } >/24 Tile{ HalfReuse: >/12 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_Asciiz_Z1]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[13], functions[efunc_gen_PutBlock_Z7]);
      refalrts::reinit_open_call(context[14]);
      refalrts::update_name(context[4], functions[efunc_DisplayName]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[12];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[7], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Globals*4/4 (/7 e.Labels/19 )/8 (/11 # CmdConditionFuncDecsrRasl/13 # GN-Local/14 e.Name/21 )/12 >/1
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[14] ) )
        continue;
      // closed e.Labels as range 19
      // closed e.Name as range 21
      //DEBUG: e.Labels: 19
      //DEBUG: e.Name: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels/19 AsIs: )/8 HalfReuse: </11 HalfReuse: & PutBlock@7/13 HalfReuse: </14 } & Asciiz@2/23 Tile{ AsIs: </0 Reuse: & DisplayName/4 } Tile{ AsIs: e.Name/21 } >/24 Tile{ HalfReuse: >/12 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_Asciiz_Z2]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[13], functions[efunc_gen_PutBlock_Z7]);
      refalrts::reinit_open_call(context[14]);
      refalrts::update_name(context[4], functions[efunc_DisplayName]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[12];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[7], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Globals*4/4 (/7 e.Labels/19 )/8 (/11 # CmdConditionFuncDecsrRasl/13 s.ScopeClass/14 e.Name/21 )/12 >/1
    context[19] = context[15];
    context[20] = context[16];
    context[21] = context[17];
    context[22] = context[18];
    // closed e.Labels as range 19
    // closed e.Name as range 21
    //DEBUG: s.ScopeClass: 14
    //DEBUG: e.Labels: 19
    //DEBUG: e.Name: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Labels/19 } Tile{ HalfReuse: )/4 HalfReuse: </7 } Tile{ HalfReuse: & PutBlock@7/8 HalfReuse: </11 HalfReuse: & NameWithSign-Bytes*2/13 AsIs: s.ScopeClass/14 AsIs: e.Name/21 HalfReuse: >/12 AsIs: >/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_PutBlock_Z7]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[13], functions[efunc_gen_NameWithSignm_Bytes_D2]);
    refalrts::reinit_close_call(context[12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Globals*4/4 (/7 e.new5/15 )/8 (/11 # CmdConditionFuncDecsrNative/13 s.new6/14 e.new7/17 )/12 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[9];
    context[18] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_CmdConditionFuncDecsrNative], context[13] ) )
      continue;
    // closed e.new5 as range 15
    // closed e.new7 as range 17
    do {
      // </0 & GenCommand-Globals*4/4 (/7 e.Labels/19 )/8 (/11 # CmdConditionFuncDecsrNative/13 # GN-Entry/14 e.Name/21 )/12 >/1
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[14] ) )
        continue;
      // closed e.Labels as range 19
      // closed e.Name as range 21
      //DEBUG: e.Labels: 19
      //DEBUG: e.Name: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels/19 AsIs: )/8 HalfReuse: </11 HalfReuse: & PutBlock@8/13 HalfReuse: </14 } & Asciiz@1/23 Tile{ AsIs: </0 Reuse: & DisplayName/4 } Tile{ AsIs: e.Name/21 } >/24 Tile{ HalfReuse: >/12 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_Asciiz_Z1]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[13], functions[efunc_gen_PutBlock_Z8]);
      refalrts::reinit_open_call(context[14]);
      refalrts::update_name(context[4], functions[efunc_DisplayName]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[12];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[7], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    do {
      // </0 & GenCommand-Globals*4/4 (/7 e.Labels/19 )/8 (/11 # CmdConditionFuncDecsrNative/13 # GN-Local/14 e.Name/21 )/12 >/1
      context[19] = context[15];
      context[20] = context[16];
      context[21] = context[17];
      context[22] = context[18];
      if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[14] ) )
        continue;
      // closed e.Labels as range 19
      // closed e.Name as range 21
      //DEBUG: e.Labels: 19
      //DEBUG: e.Name: 21

      refalrts::reset_allocator(vm);
      //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
      //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels/19 AsIs: )/8 HalfReuse: </11 HalfReuse: & PutBlock@8/13 HalfReuse: </14 } & Asciiz@2/23 Tile{ AsIs: </0 Reuse: & DisplayName/4 } Tile{ AsIs: e.Name/21 } >/24 Tile{ HalfReuse: >/12 AsIs: >/1 ]] }
      refalrts::alloc_name(vm, context[23], functions[efunc_gen_Asciiz_Z2]);
      refalrts::alloc_close_call(vm, context[24]);
      refalrts::reinit_open_call(context[11]);
      refalrts::reinit_name(context[13], functions[efunc_gen_PutBlock_Z8]);
      refalrts::reinit_open_call(context[14]);
      refalrts::update_name(context[4], functions[efunc_DisplayName]);
      refalrts::reinit_close_call(context[12]);
      refalrts::push_stack( vm, context[1] );
      refalrts::push_stack( vm, context[11] );
      refalrts::push_stack( vm, context[12] );
      refalrts::push_stack( vm, context[14] );
      refalrts::push_stack( vm, context[24] );
      refalrts::push_stack( vm, context[0] );
      refalrts::link_brackets( context[7], context[8] );
      refalrts::Iter trash_prev = arg_begin->prev;
      refalrts::use(trash_prev);
      refalrts::Iter res = context[12];
      res = refalrts::splice_elem( res, context[24] );
      res = refalrts::splice_evar( res, context[21], context[22] );
      res = refalrts::splice_evar( res, context[0], context[4] );
      res = refalrts::splice_elem( res, context[23] );
      res = refalrts::splice_evar( res, context[7], context[14] );
      refalrts::use( res );
      return refalrts::cSuccess;
    } while ( 0 );
    refalrts::stop_sentence(vm);

    // </0 & GenCommand-Globals*4/4 (/7 e.Labels/19 )/8 (/11 # CmdConditionFuncDecsrNative/13 s.ScopeClass/14 e.Name/21 )/12 >/1
    context[19] = context[15];
    context[20] = context[16];
    context[21] = context[17];
    context[22] = context[18];
    // closed e.Labels as range 19
    // closed e.Name as range 21
    //DEBUG: s.ScopeClass: 14
    //DEBUG: e.Labels: 19
    //DEBUG: e.Name: 21

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Labels/19 } Tile{ HalfReuse: )/4 HalfReuse: </7 } Tile{ HalfReuse: & PutBlock@8/8 HalfReuse: </11 HalfReuse: & NameWithSign-Bytes*2/13 AsIs: s.ScopeClass/14 AsIs: e.Name/21 HalfReuse: >/12 AsIs: >/1 ]] }
    refalrts::reinit_open_bracket(context[0]);
    refalrts::reinit_close_bracket(context[4]);
    refalrts::reinit_open_call(context[7]);
    refalrts::reinit_name(context[8], functions[efunc_gen_PutBlock_Z8]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[13], functions[efunc_gen_NameWithSignm_Bytes_D2]);
    refalrts::reinit_close_call(context[12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[7] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[11] );
    refalrts::link_brackets( context[0], context[4] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[8];
    res = refalrts::splice_evar( res, context[4], context[7] );
    res = refalrts::splice_evar( res, context[19], context[20] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenCommand-Globals*4/4 (/7 e.new5/5 )/8 (/11 # CmdNativeFuncDescr/13 s.new6/14 e.new7/9 )/12 >/1
  if( ! refalrts::ident_term( identifiers[ident_CmdNativeFuncDescr], context[13] ) )
    return refalrts::cRecognitionImpossible;
  // closed e.new5 as range 5
  // closed e.new7 as range 9
  do {
    // </0 & GenCommand-Globals*4/4 (/7 e.Labels/15 )/8 (/11 # CmdNativeFuncDescr/13 # GN-Entry/14 e.Name/17 )/12 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[9];
    context[18] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_GNm_Entry], context[14] ) )
      continue;
    // closed e.Labels as range 15
    // closed e.Name as range 17
    //DEBUG: e.Labels: 15
    //DEBUG: e.Name: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels/15 AsIs: )/8 HalfReuse: </11 HalfReuse: & PutBlock@9/13 HalfReuse: </14 } & Asciiz@1/19 Tile{ AsIs: </0 Reuse: & DisplayName/4 } Tile{ AsIs: e.Name/17 } >/20 Tile{ HalfReuse: >/12 AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[19], functions[efunc_gen_Asciiz_Z1]);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[13], functions[efunc_gen_PutBlock_Z9]);
    refalrts::reinit_open_call(context[14]);
    refalrts::update_name(context[4], functions[efunc_DisplayName]);
    refalrts::reinit_close_call(context[12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[7], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  do {
    // </0 & GenCommand-Globals*4/4 (/7 e.Labels/15 )/8 (/11 # CmdNativeFuncDescr/13 # GN-Local/14 e.Name/17 )/12 >/1
    context[15] = context[5];
    context[16] = context[6];
    context[17] = context[9];
    context[18] = context[10];
    if( ! refalrts::ident_term( identifiers[ident_GNm_Local], context[14] ) )
      continue;
    // closed e.Labels as range 15
    // closed e.Name as range 17
    //DEBUG: e.Labels: 15
    //DEBUG: e.Name: 17

    refalrts::reset_allocator(vm);
    //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
    //RESULT: Tile{ [[ } Tile{ AsIs: (/7 AsIs: e.Labels/15 AsIs: )/8 HalfReuse: </11 HalfReuse: & PutBlock@9/13 HalfReuse: </14 } & Asciiz@2/19 Tile{ AsIs: </0 Reuse: & DisplayName/4 } Tile{ AsIs: e.Name/17 } >/20 Tile{ HalfReuse: >/12 AsIs: >/1 ]] }
    refalrts::alloc_name(vm, context[19], functions[efunc_gen_Asciiz_Z2]);
    refalrts::alloc_close_call(vm, context[20]);
    refalrts::reinit_open_call(context[11]);
    refalrts::reinit_name(context[13], functions[efunc_gen_PutBlock_Z9]);
    refalrts::reinit_open_call(context[14]);
    refalrts::update_name(context[4], functions[efunc_DisplayName]);
    refalrts::reinit_close_call(context[12]);
    refalrts::push_stack( vm, context[1] );
    refalrts::push_stack( vm, context[11] );
    refalrts::push_stack( vm, context[12] );
    refalrts::push_stack( vm, context[14] );
    refalrts::push_stack( vm, context[20] );
    refalrts::push_stack( vm, context[0] );
    refalrts::link_brackets( context[7], context[8] );
    refalrts::Iter trash_prev = arg_begin->prev;
    refalrts::use(trash_prev);
    refalrts::Iter res = context[12];
    res = refalrts::splice_elem( res, context[20] );
    res = refalrts::splice_evar( res, context[17], context[18] );
    res = refalrts::splice_evar( res, context[0], context[4] );
    res = refalrts::splice_elem( res, context[19] );
    res = refalrts::splice_evar( res, context[7], context[14] );
    refalrts::use( res );
    return refalrts::cSuccess;
  } while ( 0 );
  refalrts::stop_sentence(vm);

  // </0 & GenCommand-Globals*4/4 (/7 e.Labels/5 )/8 (/11 # CmdNativeFuncDescr/13 s.ScopeClass/14 e.Name/9 )/12 >/1
  // closed e.Labels as range 5
  // closed e.Name as range 9
  //DEBUG: s.ScopeClass: 14
  //DEBUG: e.Labels: 5
  //DEBUG: e.Name: 9

  refalrts::reset_allocator(vm);
  //TRASH: {REMOVED TILE} {REMOVED TILE} {REMOVED TILE} {REMOVED TILE}
  //RESULT: Tile{ [[ HalfReuse: (/0 } Tile{ AsIs: e.Labels/5 } Tile{ HalfReuse: )/4 HalfReuse: </7 } Tile{ HalfReuse: & PutBlock@9/8 HalfReuse: </11 HalfReuse: & NameWithSign-Bytes*2/13 AsIs: s.ScopeClass/14 AsIs: e.Name/9 HalfReuse: >/12 AsIs: >/1 ]] }
  refalrts::reinit_open_bracket(context[0]);
  refalrts::reinit_close_bracket(context[4]);
  refalrts::reinit_open_call(context[7]);
  refalrts::reinit_name(context[8], functions[efunc_gen_PutBlock_Z9]);
  refalrts::reinit_open_call(context[11]);
  refalrts::reinit_name(context[13], functions[efunc_gen_NameWithSignm_Bytes_D2]);
  refalrts::reinit_close_call(context[12]);
  refalrts::push_stack( vm, context[1] );
  refalrts::push_stack( vm, context[7] );
  refalrts::push_stack( vm, context[12] );
  refalrts::push_stack( vm, context[11] );
  refalrts::link_brackets( context[0], context[4] );
  refalrts::Iter trash_prev = arg_begin->prev;
  refalrts::use(trash_prev);
  refalrts::Iter res = context[8];
  res = refalrts::splice_evar( res, context[4], context[7] );
  res = refalrts::splice_evar( res, context[5], context[6] );
  refalrts::use( res );
  return refalrts::cSuccess;
}

static refalrts::NativeReference nat_ref_gen_GenCommandm_Globals_D4("GenCommand-Globals*4", COOKIE1_, COOKIE2_, func_gen_GenCommandm_Globals_D4);


//End of file
